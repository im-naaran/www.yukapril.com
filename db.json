{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape-mod/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/js/mod.js","path":"js/mod.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"c94311b4bc5709b6e78a032452b2e6e43212edec","modified":1563890688991},{"_id":"themes/landscape-mod/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1563201958434},{"_id":"themes/landscape-mod/Gruntfile.js","hash":"bc4662730217196487fd0204721775cd762dd851","modified":1563463461000},{"_id":"themes/landscape-mod/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1563201958434},{"_id":"themes/landscape-mod/_config.yml","hash":"bf4d48d0b78ecbba5ffd2e8a5a4d522587e5b4f6","modified":1565279479148},{"_id":"themes/landscape-mod/package.json","hash":"37b83ebf9a606caba5189d947cebf24212733711","modified":1563463472000},{"_id":"source/_posts/.DS_Store","hash":"4c71b02e299b7bcc664b1045114d1e104e420e09","modified":1563890695091},{"_id":"themes/landscape-mod/languages/zh-CN.yml","hash":"a20188ac865e07b7fe79a032a18ea50ba5b3b472","modified":1563465594185},{"_id":"themes/landscape-mod/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1563201958435},{"_id":"themes/landscape-mod/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1563201958441},{"_id":"themes/landscape-mod/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1563201958441},{"_id":"themes/landscape-mod/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1563201958441},{"_id":"themes/landscape-mod/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1563463524000},{"_id":"themes/landscape-mod/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1563201958442},{"_id":"themes/landscape-mod/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1563201958442},{"_id":"themes/landscape-mod/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1563201958442},{"_id":"themes/landscape-mod/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1563462948000},{"_id":"themes/landscape-mod/scripts/mod.js","hash":"24bbbdd8f1358999d89d991079cfc95e164fc10f","modified":1565284122729},{"_id":"source/_posts/2016/2016-10-15-hello-world.md","hash":"a3fa10124ced953d3e4b76d84a20cd74110f318c","modified":1563470346988},{"_id":"source/_posts/2016/2016-10-15-why-blog.md","hash":"2229e9aaed40bff1220f61e0c4ef987e43712248","modified":1563470347100},{"_id":"source/_posts/2016/2016-10-19-blog-show.md","hash":"d1f13c55f851ab782401483ee61de471c29588d6","modified":1563470347120},{"_id":"source/_posts/2016/2016-10-19-how-to-use.md","hash":"58b72d4db87cf956ef10c9a2919176a0a385ebe4","modified":1563470347211},{"_id":"source/_posts/2016/2016-10-23-buy-beyond-compare.md","hash":"fd05d61094e19fbd424a866b5bb6245a2ad9c791","modified":1563470347123},{"_id":"source/_posts/2016/2016-10-26-kingston.md","hash":"2e1d0b08c54c74c312351ec66c64531126befd63","modified":1563470347245},{"_id":"source/_posts/2016/2016-10-28-sin36.md","hash":"27efdbe8be33fbb37df86001a14082aa0ffeee0a","modified":1563470347317},{"_id":"source/_posts/2016/2016-10-31-codewars-father-and-son.md","hash":"a8f5612d1b4a21b58ba81011c3e36448e9420ef6","modified":1563470347240},{"_id":"source/_posts/2016/2016-11-18-share-drunarchiver.md","hash":"b3564772b909b5d6a934653588bb18acc55d3fd4","modified":1563470347343},{"_id":"source/_posts/2016/2016-11-27-simack-v10.md","hash":"12dd59ecb07125b3a2d6aaedca8bd2437abf0108","modified":1563470347065},{"_id":"source/_posts/2016/2016-12-01-npm-introduction.md","hash":"88aeb3b605cd8102a39d3b7c8ee5cfd9c0e8e5a3","modified":1563470347061},{"_id":"source/_posts/2016/2016-12-06-octocat-figurine.md","hash":"709bd62e524815860b8f04e111db8a61e8f1e9bf","modified":1563470347265},{"_id":"source/_posts/2016/2016-12-07-css-charset.md","hash":"d5b83e4f6bd1838bcd5cd07f71b483f554beb1e8","modified":1563470347093},{"_id":"source/_posts/2016/2016-12-12-netease-you.md","hash":"bbd18af53c97d0b5fa3b75e5949589f77f608ad3","modified":1563470346999},{"_id":"source/_posts/2017/2017-01-04-ikbc-f108.md","hash":"ef3116f7fa4ddfec0590a9a0685d1003361e274b","modified":1563470347158},{"_id":"source/_posts/2017/2017-01-06-webpack-1.md","hash":"d1063619de2d878d06e87c694bae37bf990b4fd0","modified":1563470347096},{"_id":"source/_posts/2017/2017-01-09-chrome-https-error.md","hash":"fc39c86645cd52013338bfd64eb8dd3aeccf33ea","modified":1563470347163},{"_id":"source/_posts/2017/2017-01-09-js-template-compile.md","hash":"c691fc0e650486b0c2f61c4fa739cd4d75c3903c","modified":1563470347219},{"_id":"source/_posts/2017/2017-01-19-webpack-2.md","hash":"436dc1106b97fe55f4d357d3e6aa50ddb26f568c","modified":1563470347053},{"_id":"source/_posts/2017/2017-02-04-webpack2-1.md","hash":"5510a274f3c79da4d8127890198ad5762cdc0712","modified":1563470347336},{"_id":"source/_posts/2017/2017-02-05-zz.md","hash":"0825422c579fbcaea562d4d0abda834de8b3af8b","modified":1563470347257},{"_id":"source/_posts/2017/2017-02-19-webpack2-2.md","hash":"5b311c50ad4c1eab251733454dd05b16697a7b78","modified":1563470347214},{"_id":"source/_posts/2017/2017-02-21-js-new.md","hash":"ad177beb3e3a187fb3b527a5a9b087282e4a3ad1","modified":1563470347138},{"_id":"source/_posts/2017/2017-02-26-js-prototype.md","hash":"0dbe77a2178788636a6e1acadab5ae6b44f35ace","modified":1563470347208},{"_id":"source/_posts/2017/2017-03-01-jekyll-brace.md","hash":"4384220cf7bd3ff3d76f39f737e5d42f479156ba","modified":1563470347304},{"_id":"source/_posts/2017/2017-03-05-js-flexible.md","hash":"4462a3be2b83e0e8c8a9afa834e09fe5e0edffac","modified":1563470347236},{"_id":"source/_posts/2017/2017-03-31-go-snippet.md","hash":"17bae244f9441e98973857dc51e51fa61b4a541c","modified":1563470347340},{"_id":"source/_posts/2017/2017-03-06-share-keka.md","hash":"f8ec91d0fea6a27aa50c49e25ef5c1c99b0c2d92","modified":1563470347186},{"_id":"source/_posts/2017/2017-04-14-zz-node-require.md","hash":"214a7a25d8cd581e2917ada794d523cc40229042","modified":1563470347292},{"_id":"source/_posts/2017/2017-04-22-mac-use-ntfs.md","hash":"41a2d26bd478118b5cc952c7a715a455b4d6d634","modified":1563470347201},{"_id":"source/_posts/2017/2017-05-22-js-array.md","hash":"c4d72cb5e96bdff737a1c12d8daaaace3f2e80dc","modified":1563470347198},{"_id":"source/_posts/2017/2017-05-31-before-marry.md","hash":"936e439517f4488741ba14ea6867f783ec29b599","modified":1563470347145},{"_id":"source/_posts/2017/2017-06-03-react-mobx.md","hash":"a13c0887ea81bb23dfad3f568baf96675a5f1ea9","modified":1563470346966},{"_id":"source/_posts/2017/2017-06-09-ubuntu-login.md","hash":"35bd1ea96392a887f582e975f52d0be625e17f9b","modified":1563470347325},{"_id":"source/_posts/2017/2017-06-17-git-study.md","hash":"b3930d02ba31e574c45bffdd1f0a2e93dcaeb421","modified":1563470347179},{"_id":"source/_posts/2017/2017-07-12-vue-elementui-message.md","hash":"ea57230b9687f20eea2a598d3954a5169a0af71f","modified":1563470347167},{"_id":"source/_posts/2017/2017-07-27-ruby.md","hash":"79f8827a7bfb7acc16b3e56eb7891d7e6c341eaa","modified":1563470347086},{"_id":"source/_posts/2017/2017-08-05-webpack-uglifyjs-ie8.md","hash":"fc5975cce0d765385ccaaea72bcf4ab41b797bb4","modified":1563470347309},{"_id":"source/_posts/2017/2017-09-21-nesting-element.md","hash":"c06f721097dffe227d7a489bd06d321a0bb99a3a","modified":1563470347332},{"_id":"source/_posts/2017/2017-10-03-objective-c.md","hash":"b708f494af1ee57d95b3dc55448d1972ea5a1e2a","modified":1563470347195},{"_id":"source/_posts/2017/2017-10-08-objective-c-2.md","hash":"f0978086a2b596d6cd69aa0e8a5ab11dd65638b5","modified":1563470346993},{"_id":"source/_posts/2017/2017-10-10-objective-c-3.md","hash":"997b097075bc3922d4effaa66fa33f2fb41ce89a","modified":1563470347069},{"_id":"source/_posts/2017/2017-10-17-ios-1.md","hash":"eb5a0604d5eaf2c4760473c538d1a07294900616","modified":1563470347280},{"_id":"source/_posts/2017/2017-10-19-ios-2.md","hash":"ec2b5fd990ab73d2c798c8164f66e7a8e8928f17","modified":1563469955000},{"_id":"source/_posts/2017/2017-12-21-app-store.md","hash":"10fc994160a26671e9498711e9f4fd9196e26657","modified":1563470347171},{"_id":"source/_posts/2018/2018-01-06-dom-html.md","hash":"54ac5d7711a9d97e03b198c646872c7dd943db04","modified":1563470347128},{"_id":"source/_posts/2018/2018-01-19-apache-htaccess.md","hash":"e05f2a7e38a698bfc45e17ba4f3daff1981cc8be","modified":1563470347141},{"_id":"source/_posts/2018/2018-01-20-node-mail.md","hash":"07d051d2b4ec3cb3eb96f4d060cfac372e1dcd03","modified":1563470347134},{"_id":"source/_posts/2018/2018-01-21-js-if-eq.md","hash":"6daf2ff431fbcbbe2d5d0fb2bb4c619a8e13c4fc","modified":1563470347224},{"_id":"source/_posts/2018/2018-01-29-js-focus.md","hash":"4d5b8725bded7ad86ccf9ad940b689ebd3fe727c","modified":1563470347232},{"_id":"source/_posts/2018/2018-02-05-ubuntu.md","hash":"89e206b06ef0fef9774464e7421dbd8aa492c077","modified":1563470347037},{"_id":"source/_posts/2018/2018-02-10-less-zindex.md","hash":"5682a1cc925006124a971c34e3127796cf40626e","modified":1563470347295},{"_id":"source/_posts/2018/2018-02-14-summary.md","hash":"9dfb574f8bf637a2b9dd6746149955c6248f7d95","modified":1563470347312},{"_id":"source/_posts/2018/2018-03-11-cdn.md","hash":"ac3a0b040ff9455167c3c50ac4a486d606c23de6","modified":1563470347228},{"_id":"source/_posts/2018/2018-03-24-bucket.md","hash":"ea339a680b1d5e8498bbf112bcec437f0ca9f08b","modified":1563470347261},{"_id":"source/_posts/2018/2018-03-26-event.md","hash":"820bf5bb11be4a97c1a3114d608d9a11917107ae","modified":1563470347077},{"_id":"source/_posts/2018/2018-04-06-cdn.md","hash":"d6907842de4cfb75803e2810a15405e1638a99d3","modified":1563470347269},{"_id":"source/_posts/2018/2018-05-09-ajax-302.md","hash":"5ab47ab5ee348641ff5300f177f45aee082542b6","modified":1563470347204},{"_id":"source/_posts/2018/2018-05-17-cross-domain.md","hash":"7f44e3d606a4d6f953595e9422609e512e0e4b88","modified":1563470347175},{"_id":"source/_posts/2018/2018-06-20-install-macos.md","hash":"26ff80ef08dbfca78cbcfd5537813a3ec083b1b3","modified":1563470347253},{"_id":"source/_posts/2018/2018-06-26-array-unflattened.md","hash":"c9c464a687611722ad2620da8d9038fd078e521e","modified":1563470347131},{"_id":"source/_posts/2018/2018-06-26-suigintou.md","hash":"86bfd7a884c9dc88c2455663d326f4ce648c076f","modified":1563470347284},{"_id":"source/_posts/2018/2018-06-28-array-flattened.md","hash":"b1f89759d2da638e659f461f0826a493fa3dff89","modified":1563470347009},{"_id":"source/_posts/2018/2018-07-02-adobe-creative-cloud.md","hash":"e173de1f30521194eca25cd858742288742816cc","modified":1563470347044},{"_id":"source/_posts/2018/2018-08-28-hosts.md","hash":"6550169dcaa675a1aeb6467c41322fb6460b0a5d","modified":1563470347183},{"_id":"source/_posts/2018/2018-09-11-ubuntu-ipv6.md","hash":"61aa12647c1f3b21a8a62a82d087cc303eb6c246","modified":1563470347021},{"_id":"source/_posts/2018/2018-09-12-git.md","hash":"facc569c7563b453dbb55b00d73840811043c2e4","modified":1563470347320},{"_id":"source/_posts/2018/2018-10-13-useragent.md","hash":"b63a089da4cc30a50786951762536e6ca87db0c3","modified":1563470347289},{"_id":"source/_posts/2018/2018-10-21-benq-screenbar-plus.md","hash":"3adc0144eb455fcf07b87b400445451d2670a3e7","modified":1563470347104},{"_id":"source/_posts/2018/2018-11-06-webpack.md","hash":"61073f6cb53e9ad2779406f687b4f7fa75a6a4a4","modified":1563470347272},{"_id":"source/_posts/2018/2018-11-18-yarn.md","hash":"d22d715457b89355bc9d2b26ee6b47839f4004b8","modified":1563470347117},{"_id":"source/_posts/2018/2018-11-21-ios-history-back.md","hash":"e7c2e2a8330c8cbc94eb33f88e78eaa33402524d","modified":1563470347073},{"_id":"source/_posts/2018/2018-11-30-paste.md","hash":"cc7535c0d07577ff3e26e5b0e14098029ca9c183","modified":1563470347189},{"_id":"source/_posts/2018/2018-12-30-class-constructor.md","hash":"26f0c4d330bdaaa0c27c3df9e7546251c1780fde","modified":1563470347148},{"_id":"source/_posts/2019/2019-02-16-electron.md","hash":"e31647b73ff7d52b93483d4321bdb8e3ffa7909e","modified":1563470347277},{"_id":"source/_posts/2019/2019-04-08-https-ssl.md","hash":"969904d5b66582e4d61e6a8f0bf7ec615f9144d7","modified":1563470347300},{"_id":"source/_posts/2019/2019-04-10-office-e3.md","hash":"34c6137c3e5d99bc287f51f991931625eac5e1d0","modified":1563470347029},{"_id":"source/_posts/2019/2019-04-15-learning-markdown.md","hash":"d084526004004b0d638c4c03c28f0b169d8ae1bd","modified":1563470347328},{"_id":"source/_posts/2019/2019-04-25-learning-git.md","hash":"1031319dea88b0d79801138064ee7a61cebb5288","modified":1563470347153},{"_id":"source/_posts/2019/2019-07-14-learning-reat-hooks.md","hash":"42b22a8a9dbbd0eae9bcd31eb837fa264b1cd6f2","modified":1563470347248},{"_id":"themes/landscape-mod/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1563201958440},{"_id":"themes/landscape-mod/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1563201958440},{"_id":"themes/landscape-mod/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1565282553347},{"_id":"themes/landscape-mod/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1563201958440},{"_id":"themes/landscape-mod/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1563201958441},{"_id":"themes/landscape-mod/layout/_partial/after-footer.ejs","hash":"797fb4a195a7ba2dd463da34b990f6d4076f7241","modified":1563891632844},{"_id":"themes/landscape-mod/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1563201958437},{"_id":"themes/landscape-mod/layout/_partial/archive.ejs","hash":"60b080cf0ddd9fd431eb4e8d6a486cd458c7460c","modified":1565282182223},{"_id":"themes/landscape-mod/layout/_partial/article.ejs","hash":"381195c1a4603de7254eb7a08ccd43905344bb67","modified":1563463070000},{"_id":"themes/landscape-mod/layout/_partial/footer.ejs","hash":"d68b27f635b2834de4c126922063116a3961acc1","modified":1563762143872},{"_id":"themes/landscape-mod/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1563201958437},{"_id":"themes/landscape-mod/layout/_partial/google-analytics.ejs","hash":"f29a865f7683fb9565264bf30fedcfa39416ed97","modified":1563463091000},{"_id":"themes/landscape-mod/layout/_partial/head.ejs","hash":"89c9fb58d1d6f8f5544faff2fefdf8d6ffa2662d","modified":1563463106000},{"_id":"themes/landscape-mod/layout/_partial/header.ejs","hash":"997923d389ba294e89ce1d3a23b063b6e210a197","modified":1563463115000},{"_id":"themes/landscape-mod/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1563201958438},{"_id":"themes/landscape-mod/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1563201958440},{"_id":"themes/landscape-mod/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1563201958444},{"_id":"themes/landscape-mod/source/css/_variables.styl","hash":"8c1bf798c8e19a797baac00f913957e708280de3","modified":1563463239000},{"_id":"themes/landscape-mod/source/css/style.styl","hash":"8796c4e2e93cb2f691dae77cee7318005e2aaeb9","modified":1563463252000},{"_id":"themes/landscape-mod/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1563462948000},{"_id":"themes/landscape-mod/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1563462948000},{"_id":"themes/landscape-mod/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1563462948000},{"_id":"themes/landscape-mod/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1563462948000},{"_id":"themes/landscape-mod/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1563462948000},{"_id":"themes/landscape-mod/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1563462948000},{"_id":"themes/landscape-mod/source/fancybox/jquery.fancybox.css","hash":"f7dd490f76a52039244ab879b4219fca50c7963a","modified":1563462948000},{"_id":"themes/landscape-mod/source/fancybox/jquery.fancybox.js","hash":"61abfeea7becc4db424149d2bc693968f8b6b362","modified":1563462948000},{"_id":"themes/landscape-mod/source/fancybox/jquery.fancybox.pack.js","hash":"3ac24755c93c080990348fb9301dbbbb5fdbcab6","modified":1563462948000},{"_id":"themes/landscape-mod/source/js/script.js","hash":"e5bb8109d5c8b9cccbefaac5d63e87667b7e622c","modified":1563463312000},{"_id":"themes/landscape-mod/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1565282444539},{"_id":"themes/landscape-mod/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1563201958439},{"_id":"themes/landscape-mod/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1563463019000},{"_id":"themes/landscape-mod/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1565281715508},{"_id":"themes/landscape-mod/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1563201958439},{"_id":"themes/landscape-mod/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1563201958439},{"_id":"themes/landscape-mod/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1563201958444},{"_id":"themes/landscape-mod/source/css/_partial/article.styl","hash":"e15e2db341a671c7dc9318716614b9b5037c73f7","modified":1563468859523},{"_id":"themes/landscape-mod/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1563201958445},{"_id":"themes/landscape-mod/source/css/_partial/footer.styl","hash":"71a567b38128cd61269b863fbfaa7543b7a7e853","modified":1563762268770},{"_id":"themes/landscape-mod/source/css/_partial/header.styl","hash":"8f9b71923d90a25287ae10c9981cbff305b52613","modified":1563464697175},{"_id":"themes/landscape-mod/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1563201958445},{"_id":"themes/landscape-mod/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1563201958446},{"_id":"themes/landscape-mod/source/css/_partial/sidebar-aside.styl","hash":"a013768ebab07cc94aa8a07562c423a7a954a72c","modified":1563464420636},{"_id":"themes/landscape-mod/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1563201958446},{"_id":"themes/landscape-mod/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1563201958447},{"_id":"themes/landscape-mod/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1563201958447},{"_id":"themes/landscape-mod/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1563201958447},{"_id":"themes/landscape-mod/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1563462948000},{"_id":"themes/landscape-mod/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"4310a88abe2e05cc3d0bfc30f57be6b1395547ef","modified":1563462948000},{"_id":"themes/landscape-mod/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1563462948000},{"_id":"themes/landscape-mod/source/fancybox/helpers/jquery.fancybox-media.js","hash":"b861d5c645b8b6f98757b973e72da1c7e7198c9c","modified":1563462948000},{"_id":"themes/landscape-mod/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1563462948000},{"_id":"themes/landscape-mod/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"3d695e257e61f4cbe57adda99eb01b13785f9929","modified":1563462948000},{"_id":"themes/landscape-mod/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1563462948000},{"_id":"themes/landscape-mod/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1563462948000},{"_id":"themes/landscape-mod/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1563462948000},{"_id":"themes/landscape-mod/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1563462948000},{"_id":"themes/landscape-mod/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1563462948000},{"_id":"themes/landscape-mod/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1563201958455},{"_id":"themes/landscape-mod/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1563462948000},{"_id":"themes/landscape-mod/layout/_partial/baidu-analytics.ejs","hash":"1da201f06412c93fb3554d0acc49f65176792c0b","modified":1563760798988},{"_id":"source/_posts/2019/2019-07-23-hexo-blog.md","hash":"c0b488aba5e1957d326d322152c2a042f5850ebe","modified":1563891068588},{"_id":"public/atom.xml","hash":"eba962a077761bffdd7fce2b53a111498da2e35c","modified":1565283942906},{"_id":"public/2016/10/15/hello-world.html","hash":"b39b9ca977d412ba1de467877d1570d2c7b9be7f","modified":1565283944759},{"_id":"public/page/9/index.html","hash":"15361f8957e0439dd45dcb6c9c4d1c83eb20287c","modified":1565283944709},{"_id":"public/categories/theme/index.html","hash":"f76cdabd8ee21bec285ca0c26b6a2a7ec9a31308","modified":1565283944723},{"_id":"public/categories/数学/index.html","hash":"2049a595b6a00ab6498e46f3f0e331d9fde0ed58","modified":1565283944708},{"_id":"public/categories/codewars/index.html","hash":"52e11c2e5bc577feb2d92b49269169c92f3a9623","modified":1565283944708},{"_id":"public/categories/外设/index.html","hash":"9c993eda7ae92fd09f58c5e9479dbfec896767f7","modified":1565283944709},{"_id":"public/archives/2016/11/index.html","hash":"19f72afbb107bea30d86e1a5bb4f97ad3f2d6e10","modified":1565283944722},{"_id":"public/archives/2017/04/index.html","hash":"be5808d2f57608420ba78782f42c1cb13feaeae5","modified":1565283944066},{"_id":"public/archives/2017/05/index.html","hash":"3677d5870cc7df63659c7082430725e971ef92e1","modified":1565283944067},{"_id":"public/archives/2017/06/index.html","hash":"19e3821391c600ea7cd44e1e74437b4e3ec024dd","modified":1565283944722},{"_id":"public/archives/2017/07/index.html","hash":"b0ce80621e083ce46bd138306d552bbf0930304e","modified":1565283944689},{"_id":"public/archives/2017/08/index.html","hash":"18377097296f26e8a81c13d2b31824d403178942","modified":1565283944690},{"_id":"public/archives/2017/09/index.html","hash":"216c73fd42c5d05d1c40e9c961b3fe3e0f9f0f60","modified":1565283944708},{"_id":"public/archives/2017/12/index.html","hash":"89bf7487034f980435c7912cbd723d305cb01cb3","modified":1565283944708},{"_id":"public/archives/2018/02/index.html","hash":"b0c81b723499e2d30c468d11fe9778df93717cbc","modified":1565283944722},{"_id":"public/archives/2018/03/index.html","hash":"63929b52038e4cb7fd172cf9704231ed32b81aa7","modified":1565283944722},{"_id":"public/archives/2018/04/index.html","hash":"c74361efa3d740e8380ef4d9de45275e38a4cb25","modified":1565283944708},{"_id":"public/archives/2018/05/index.html","hash":"fcb1106bb320fdca638602dedf77a3aeebee1625","modified":1565283944708},{"_id":"public/archives/2018/07/index.html","hash":"c8ad0014c88ba490969ec8707b3fef1985cb5137","modified":1565283944708},{"_id":"public/archives/2018/08/index.html","hash":"46f2812f25b8aaf2fb85f19fc82e87557b41e151","modified":1565283944708},{"_id":"public/archives/2018/09/index.html","hash":"7a83bd28acaaa300c488925a6df644d89005c16e","modified":1565283944708},{"_id":"public/archives/2018/10/index.html","hash":"734e070497194d47303582f25bf1f5f17008b90f","modified":1565283944708},{"_id":"public/archives/2018/11/index.html","hash":"7a9648ee2c958113e08bf74c881fb6cbcc1ff750","modified":1565283944722},{"_id":"public/archives/2018/12/index.html","hash":"147649bf4da7d86f906378a20ebca3154a0c22e7","modified":1565283944708},{"_id":"public/archives/2019/02/index.html","hash":"4b49b49bc952a3e455ad7ec6fc0af10a09a2c3bb","modified":1565283944708},{"_id":"public/archives/2019/07/index.html","hash":"585e431bda5657ed7563458490744c87204a87a7","modified":1565283944708},{"_id":"public/tags/simack/index.html","hash":"4c2fb8fb37a92ab3f6b0a72d803c88ff90144745","modified":1565283944724},{"_id":"public/tags/博客/index.html","hash":"c9be87b6db4288bb8152f1e61c4a142316ccb330","modified":1565283944709},{"_id":"public/tags/beyond-compare/index.html","hash":"3fd0f1e68686c7010512ef96bfb757c9b4d65a07","modified":1565283944709},{"_id":"public/tags/bc/index.html","hash":"2425b573e48892abd6fab50233baf30a533f5237","modified":1565283944709},{"_id":"public/tags/金士顿/index.html","hash":"3d0adb86b8069d84504f9799f113d7a7e9afaa98","modified":1565283944709},{"_id":"public/tags/u盘/index.html","hash":"54b0ef4bd91e692093d1e735adea11f942bdd4fb","modified":1565283944709},{"_id":"public/tags/计算/index.html","hash":"758f89eac7e978d94e395e528be407c44d641c64","modified":1565283944709},{"_id":"public/tags/数学/index.html","hash":"5ed78e3dcaac57dbdc03ce7b1c3bf69f5e484e08","modified":1565283944709},{"_id":"public/tags/codewars/index.html","hash":"401c9e4338a0b96edec12acc3f3ce6a2a91c76b1","modified":1565283944709},{"_id":"public/tags/Octocat-Figurine/index.html","hash":"182801dc8c5c296b66b1ad4e18ba428e46932480","modified":1565283944709},{"_id":"public/tags/章鱼猫/index.html","hash":"377eb32955217a0f9bd07f68e0f7ad40eae4d0c6","modified":1565283944709},{"_id":"public/tags/github/index.html","hash":"e58d486cdb8b284287bac0eeaab925a5f89e066e","modified":1565283944709},{"_id":"public/tags/css/index.html","hash":"24c834956488e203e17810d55e5db502d7e31d55","modified":1565283944709},{"_id":"public/tags/编码/index.html","hash":"93bc5ffee6439de81e409f4c5cba06a61b2167ac","modified":1565283944709},{"_id":"public/tags/未央猪肉/index.html","hash":"37380da356939adfa35e68721bfdc38326ec308f","modified":1565283944709},{"_id":"public/tags/网易/index.html","hash":"4ee6100b326852324c22f205a2258225c938c246","modified":1565283944710},{"_id":"public/tags/严选/index.html","hash":"b0167c5378d8bb0434d73961ceb4bbe05e6c0f26","modified":1565283944710},{"_id":"public/tags/网易严选/index.html","hash":"a8c29d521088e59c5a52f6ad0d4b1ab6867ede21","modified":1565283944710},{"_id":"public/tags/优惠券/index.html","hash":"79fe36f085dde78f811f7c34e6f96fc3457121af","modified":1565283944710},{"_id":"public/tags/机械键盘/index.html","hash":"dd70598ece814288972c6184c8ad338619ed1c41","modified":1565283944710},{"_id":"public/tags/键盘/index.html","hash":"5b653b937d0231f12f9f35496f4d36f389797de9","modified":1565283944710},{"_id":"public/tags/ikbc/index.html","hash":"91678e6247db49004d152c3601e342826fe6b57e","modified":1565283944710},{"_id":"public/tags/chrome/index.html","hash":"45f918f459510fb7a87e50751669d328a700535f","modified":1565283944710},{"_id":"public/tags/https/index.html","hash":"8126b4234ed0c5b9332d434c3c4f67a06aafd26f","modified":1565283944710},{"_id":"public/tags/无法连接/index.html","hash":"45186997e93f80de5db04a01cfc03a952637936e","modified":1565283944710},{"_id":"public/tags/模板/index.html","hash":"5138965fa9b446bf8e39a2e5bbffcdda32868d99","modified":1565283944710},{"_id":"public/tags/编译/index.html","hash":"b55d31f083b9e09e40e19d89d407f10c84ff64bf","modified":1565283944711},{"_id":"public/tags/new/index.html","hash":"0707a3fe8393cc8f130e1c8daf08d7e1d4644119","modified":1565283944711},{"_id":"public/tags/jekyll/index.html","hash":"041a839afc801de9802e7ec7cb7cab69e0f95af3","modified":1565283944711},{"_id":"public/tags/括号/index.html","hash":"e445c96fe6dee6249f145c8bae8da9cffd419ecb","modified":1565283944711},{"_id":"public/tags/转义/index.html","hash":"59535b42d11cbc0276626ffebed4776f38f246c4","modified":1565283944711},{"_id":"public/tags/go/index.html","hash":"1affa5fb25a582ece9cbeebc64ae5eb7564b1ca7","modified":1565283944711},{"_id":"public/tags/指针/index.html","hash":"c691f5f4098b8988fe13717830b5bb048194b1f4","modified":1565283944711},{"_id":"public/tags/flexible/index.html","hash":"82fe0945fbd89434194919d08cee83f711117ddc","modified":1565283944711},{"_id":"public/tags/keka/index.html","hash":"4563b4e67122f7c98c1ae81904a9c08f5aa84577","modified":1565283944711},{"_id":"public/tags/module/index.html","hash":"710e0f03e0921c6a7a2216b68b45dd835b50e49f","modified":1565283944711},{"_id":"public/tags/require/index.html","hash":"a9f64a1307f847aeaa5fb5bb21531e3b2eb213d0","modified":1565283944711},{"_id":"public/tags/MAC/index.html","hash":"24e8c74a2cfd24daceac1ee26bfa152699bf7225","modified":1565283944712},{"_id":"public/tags/NFTS/index.html","hash":"552f833f2564d375d61b0bfc897576642744bf02","modified":1565283944713},{"_id":"public/tags/U盘/index.html","hash":"ad1291965e6084ad664bca7c2cb14608bb03200f","modified":1565283944713},{"_id":"public/tags/恋爱/index.html","hash":"8f5661d115da110f5b75ed3d5e17b6900b3db89b","modified":1565283944713},{"_id":"public/tags/长辈相处/index.html","hash":"d0524ac0b72b4c001e0d4c32295d36247162473d","modified":1565283944715},{"_id":"public/tags/ubuntu/index.html","hash":"038ffe16e51a5efe3edf7237bb07241b41295bc8","modified":1565283944724},{"_id":"public/tags/访客/index.html","hash":"a9df13cd58a6d7e44a691269f2f06b233e84333c","modified":1565283944715},{"_id":"public/tags/登录/index.html","hash":"e2d083b0d734ec288e9e4d2b474cb2af023d422d","modified":1565283944715},{"_id":"public/tags/mobx/index.html","hash":"25f2221637fc8b5414d6ea7be17cc626529a5b9e","modified":1565283944716},{"_id":"public/tags/vue/index.html","hash":"cc14961e6ec1aa3c7f1cf6267a69ca3432f9d57e","modified":1565283944716},{"_id":"public/tags/elementUI/index.html","hash":"f51f8280b100a89e77b2cbe23e6ea44391b67ae4","modified":1565283944716},{"_id":"public/tags/ruby/index.html","hash":"a0072f5c999ffdf24598e5022d19fc9c4a77d053","modified":1565283944716},{"_id":"public/tags/uglifyjs/index.html","hash":"f24d3c91cfae82a9a3a7cb957e05a0888d9c0bc4","modified":1565283944716},{"_id":"public/tags/ie8/index.html","hash":"ae7f6aab1555867c50f641f1cdc36e8f72db3a19","modified":1565283944716},{"_id":"public/tags/render/index.html","hash":"b8092b130ee7284d8e971e4ebc3f0cce987e0b5e","modified":1565283944716},{"_id":"public/tags/App-Store/index.html","hash":"794661564ffa895e89761a51ed2b8ea98055b70e","modified":1565283944716},{"_id":"public/tags/Pin/index.html","hash":"d671130832f18610cea4cd0925c6c657c50efa55","modified":1565283944716},{"_id":"public/tags/DOM/index.html","hash":"951153ae5d153fef938520ab1a6594499974c7df","modified":1565283944716},{"_id":"public/tags/apache/index.html","hash":"0b5d5d6fbe5115b204d1b25df0f31cbfacdf80f6","modified":1565283944716},{"_id":"public/tags/htaccess/index.html","hash":"b2da628d71ce405791c09b5728320146dc1c0f38","modified":1565283944716},{"_id":"public/tags/mail/index.html","hash":"b037df4fe60d3fa33cc3f8627eac620cdfb04e65","modified":1565283944716},{"_id":"public/tags/nodemailer/index.html","hash":"31b83a5d219c5ba77276ad3987e59db882b1fee4","modified":1565283944716},{"_id":"public/tags/if/index.html","hash":"5f6d6f40e24880fc7fe6cd8ea67855dcca347f99","modified":1565283944716},{"_id":"public/tags/equal/index.html","hash":"28868208e502d81304b59d4e9ec02b4c17bf4ad8","modified":1565283944716},{"_id":"public/tags/focus/index.html","hash":"ce12e94f484370c8032c360ce282ebb70a9fb698","modified":1565283944717},{"_id":"public/tags/blur/index.html","hash":"fc81dc60230dd0b4da62774689cf9d0843c47fb0","modified":1565283944717},{"_id":"public/tags/less/index.html","hash":"41604b3e7af54a9700274a9b5e355a188dc13998","modified":1565283944717},{"_id":"public/tags/OptimizeCssAssetsPlugin/index.html","hash":"b5b13dc7613cd9bcce38cd5efbf2f8fe5e606fc5","modified":1565283944717},{"_id":"public/tags/cssnano/index.html","hash":"5a3002bdcd0c1b8ac02ffaa45d31ace1e0fc8c54","modified":1565283944717},{"_id":"public/tags/cdn/index.html","hash":"2d4decfae5993c156fc46b2309b3dab5dac5bca8","modified":1565283944724},{"_id":"public/tags/对象存储/index.html","hash":"ad67619e4a6a11ea2e1b3f3af9b86024cb80f19e","modified":1565283944717},{"_id":"public/tags/COS/index.html","hash":"3274817111f897334a422e965b3617c9c1607063","modified":1565283944717},{"_id":"public/tags/OSS/index.html","hash":"fda5cc2c7ffc1a8f9753a48512e0d2d74922c83f","modified":1565283944717},{"_id":"public/tags/CustomEvent/index.html","hash":"01000f19a15f4ae6123b86213d1327fd217878e3","modified":1565283944717},{"_id":"public/tags/blog/index.html","hash":"2abc3f5c382a434cd366d5e19fe52b1568f17ce4","modified":1565283944717},{"_id":"public/tags/jquery/index.html","hash":"cd96f42bd226c98b0a8dcbee0a7802b98f1ae9ac","modified":1565283944717},{"_id":"public/tags/axios/index.html","hash":"e43fc03579b058ba7c606787325c319e784631a9","modified":1565283944717},{"_id":"public/tags/ajax/index.html","hash":"0c94223d4994258ceb72a4094b19c63b2cddc075","modified":1565283944718},{"_id":"public/tags/macOS/index.html","hash":"88b3f796075f0f14bac7ffa384cb1ea67e02503e","modified":1565283944718},{"_id":"public/tags/扁平化/index.html","hash":"d066fe8d0c597039fac4aa4cfa44603bbe4002ff","modified":1565283944718},{"_id":"public/tags/蔷薇少女/index.html","hash":"b784ed836bd61b27914860add667191d6335136b","modified":1565283944718},{"_id":"public/tags/水银灯/index.html","hash":"0a2ccad25e2188e4f2bd54ac186bb01ed262a3de","modified":1565283944718},{"_id":"public/tags/cloudcone/index.html","hash":"c80677ac59d256be1c197123f06218b3802a353d","modified":1565283944718},{"_id":"public/tags/ipv6/index.html","hash":"a2dcfe5aad8c626b10ce200c1de77cae5f027a1e","modified":1565283944718},{"_id":"public/tags/配置/index.html","hash":"093c0b046345cb2d5e5d08ff511f70db3f50180f","modified":1565283944718},{"_id":"public/tags/hosts/index.html","hash":"9c698dbaaf6a02bf72f4d620f630d82586026fda","modified":1565283944718},{"_id":"public/tags/iHosts/index.html","hash":"67b9ce29216c4a8107f3401b3ea0d3bd20e21c5a","modified":1565283944718},{"_id":"public/tags/SwitchHosts/index.html","hash":"bfa9cbf127cdc54602fc975627bddb3a5e62f3db","modified":1565283944718},{"_id":"public/tags/Hozz/index.html","hash":"301569c79ad5f9b256eab0ca072032a7309800ee","modified":1565283944718},{"_id":"public/tags/benq/index.html","hash":"2316442741e3b8f63b77ba20d7038da1ff0ca50a","modified":1565283944718},{"_id":"public/tags/screenbar/index.html","hash":"466800c8e7caaaf085da7fd93fe725ce5b1854c9","modified":1565283944719},{"_id":"public/tags/babel/index.html","hash":"cf4f9b0018a1f3092558c0e9a9b53fa88756cc56","modified":1565283944719},{"_id":"public/tags/ios/index.html","hash":"ba4069c6d12a1ad696d465d83e82f14bceca898f","modified":1565283944719},{"_id":"public/tags/safari/index.html","hash":"8214fec527dd9c74ac39f3e4994aa3852f08ed4f","modified":1565283944719},{"_id":"public/tags/history/index.html","hash":"6a239f566721f68bca5a46ce9988123af019bb51","modified":1565283944719},{"_id":"public/tags/后退/index.html","hash":"2baf8b31ef8b6c9bd6f579ecab212f027f4943b5","modified":1565283944719},{"_id":"public/tags/yarn/index.html","hash":"6fd99817a90104087ac43fd1362d1381ae333291","modified":1565283944719},{"_id":"public/tags/1Clipboard/index.html","hash":"8e0d1ffe68dc57eaccf970911dcb9499b9ab6e2d","modified":1565283944719},{"_id":"public/tags/Clipy/index.html","hash":"0d8839d78a0f380817e9338d15a151de3f8bcacf","modified":1565283944719},{"_id":"public/tags/Paste/index.html","hash":"359511c2e619d00236d3faa918e72ec73720f874","modified":1565283944719},{"_id":"public/tags/iPaste/index.html","hash":"518f9c82df73042e9d9f530e78fca4b323aa888d","modified":1565283944719},{"_id":"public/tags/constructor/index.html","hash":"cff683dccc3f32550beb4c078b1104abe641a1ad","modified":1565283944719},{"_id":"public/tags/electron/index.html","hash":"7c18fb32ec02118832e2e1ee7bd00120bc979cae","modified":1565283944719},{"_id":"public/tags/electron-builder/index.html","hash":"f301d13b17000770e8878727e9124db72787262c","modified":1565283944720},{"_id":"public/tags/office/index.html","hash":"2e9082f5e415fea085c93fd12d728c03555ff9e6","modified":1565283944720},{"_id":"public/tags/CA/index.html","hash":"dc46567191f3cf7a10a822cbdbb6cc95051e1666","modified":1565283944720},{"_id":"public/tags/cert/index.html","hash":"523f1149e355ce7b5917296bfc39a66ade99bd05","modified":1565283944721},{"_id":"public/tags/markdown/index.html","hash":"15441ee7f84d2d99f66f93058dfa986dcf03ad52","modified":1565283944721},{"_id":"public/tags/npm/index.html","hash":"ba3261e63d5ed5e4054d68d05499d81fe13c9abf","modified":1565283944721},{"_id":"public/tags/proto/index.html","hash":"b2f4ba4835da06ffaa0b3e6ab7c5482e192e7f09","modified":1565283944721},{"_id":"public/tags/prototype/index.html","hash":"90b1e2fde386a61ab637bd4be6bcb92fed5bdab1","modified":1565283944721},{"_id":"public/tags/array/index.html","hash":"bcc9f68f1e7dbed85a002752f9b12908bc959ae3","modified":1565283944721},{"_id":"public/tags/cross-domain/index.html","hash":"1c9d47268262359c4519f12ed55fa6a4092e4c97","modified":1565283944721},{"_id":"public/tags/useragent/index.html","hash":"daa0522a911157c67b8722c5d8542d29056dceaa","modified":1565283944721},{"_id":"public/tags/hooks/index.html","hash":"01b88efe58e6d811834ce9f220015d5085366b1a","modified":1565283944721},{"_id":"public/2019/07/14/learning-reat-hooks.html","hash":"137f0f0ac1802ff550868bdbe47f00f815546767","modified":1565283944760},{"_id":"public/2019/04/25/learning-git.html","hash":"4a0ce870ae032e9f10d70f9a0baf5e4aa03aa462","modified":1565283944761},{"_id":"public/2019/04/15/learning-markdown.html","hash":"376d76f0877a412a23263b463dfd6403d9b128fa","modified":1565283944761},{"_id":"public/2019/04/10/office-e3.html","hash":"8b5adaf69e689c792fe63684bfd0736350516e97","modified":1565283944761},{"_id":"public/2019/04/08/https-ssl.html","hash":"4a35490593e19e9a1a656cac342a6446f03f078b","modified":1565283944761},{"_id":"public/2019/02/16/electron.html","hash":"9cdb946fa7a717ca8878d85893daaf1349f08abf","modified":1565283944761},{"_id":"public/2018/12/30/class-constructor.html","hash":"c9f56d301315bd6c19f3b537505f957393e0f517","modified":1565283944761},{"_id":"public/2018/11/30/paste.html","hash":"ee3e5d03b1b950b5131002cd4c8000651c94fbec","modified":1565283944761},{"_id":"public/2018/11/21/ios-history-back.html","hash":"17a8b5e7641de034c2f67417907c6afc9d3db2bf","modified":1565283944762},{"_id":"public/2018/11/18/yarn.html","hash":"d728bc0ccfd6b2e9cafbf35afde9e6dd5fc1dc46","modified":1565283944762},{"_id":"public/2018/11/06/webpack.html","hash":"c7cd54bfd95b3bb1bb5094339d9250a9e1b79e80","modified":1565283944762},{"_id":"public/2018/10/21/benq-screenbar-plus.html","hash":"98b03958b7492412b8e7b96b5fe7e5c6d8ce3f67","modified":1565283944762},{"_id":"public/2018/10/13/useragent.html","hash":"c8e84eafd199cc1ab3277c9ada8d8e01e8dba6eb","modified":1565283944762},{"_id":"public/2018/09/12/git.html","hash":"b3beb39ce380fb9d85785bd21f1ce21915844f66","modified":1565283944762},{"_id":"public/2018/09/11/ubuntu-ipv6.html","hash":"ea0ae159f875339d82bbfb66fd357cd653547846","modified":1565283944762},{"_id":"public/2018/08/28/hosts.html","hash":"8f6eea6f0bbeabcd399ee5490f9769c336c58bfa","modified":1565283944763},{"_id":"public/2018/07/02/adobe-creative-cloud.html","hash":"bda97c79db77e89f7e8d75d8295b796250b2374b","modified":1565283944763},{"_id":"public/2018/06/28/array-flattened.html","hash":"5d7b15d2ed9d2191e54a13b07f9ea9af3efff473","modified":1565283944763},{"_id":"public/2018/06/26/suigintou.html","hash":"a9953b452191823a082d553c5a79660b3ed88fe6","modified":1565283944764},{"_id":"public/2018/06/26/array-unflattened.html","hash":"01d3efd9f5b052391bd4419d60f9171c3efd0f7c","modified":1565283944764},{"_id":"public/2018/06/20/install-macos.html","hash":"fe88bd5a5bb7bd48f7dcc6ce7b2b69472ae3d550","modified":1565283944764},{"_id":"public/2018/05/17/cross-domain.html","hash":"b0c77e7fdb52a2f40ff7a78c8b5a99e54061adba","modified":1565283944764},{"_id":"public/2018/05/09/ajax-302.html","hash":"4a4b50f25eb8b4ebe80d349064ae38ef0fc6ab57","modified":1565283944764},{"_id":"public/2018/04/06/cdn.html","hash":"b77f3f30d1a2a126778b5178910ef1b044b2765f","modified":1565283944764},{"_id":"public/2018/03/26/event.html","hash":"b1209f80faffd65777a2a7383d9b8b9f9851d397","modified":1565283944764},{"_id":"public/2018/03/24/bucket.html","hash":"7c0a48d4962412e90418683aac643751bf6b2b61","modified":1565283944764},{"_id":"public/2018/03/11/cdn.html","hash":"5d4ec48f5f1841697296e58d38d07c7850e0c03f","modified":1565283944765},{"_id":"public/2018/02/14/summary.html","hash":"150093612b5cdc36fbf7aa5d21592f24aa777269","modified":1565283944765},{"_id":"public/2018/02/10/less-zindex.html","hash":"d46f38fa1df0e513ff9547c2e092bf714aab911f","modified":1565283944766},{"_id":"public/2018/02/05/ubuntu.html","hash":"9187b77f0302fb07338a77bfc55f7f4662a69bcb","modified":1565283944766},{"_id":"public/2018/01/29/js-focus.html","hash":"c343d547638dbdb77a3bfda9d7741a3446971dc9","modified":1565283944766},{"_id":"public/2018/01/21/js-if-eq.html","hash":"3cef973d0299d709648c57ec593a14771e48ef1c","modified":1565283944767},{"_id":"public/2018/01/20/node-mail.html","hash":"95ea05f869794e489e030d4220aa97e914002060","modified":1565283944767},{"_id":"public/2018/01/19/apache-htaccess.html","hash":"52b516d11f9e57c3d1373eb2558e40b92a8b8d33","modified":1565283944768},{"_id":"public/2018/01/06/dom-html.html","hash":"f333cd8a5f512988857e62991e2622036fc1ee31","modified":1565283944768},{"_id":"public/2017/12/21/app-store.html","hash":"d9eb614326c95e488ebd65e919ee8c2b274ac3f6","modified":1565283944768},{"_id":"public/2017/10/19/ios-2.html","hash":"a9b6c2c30901f88f9f057cc442b238ecd76eb66a","modified":1565283944768},{"_id":"public/2017/10/17/ios-1.html","hash":"918fd08ebc995e7ae6422e5a70a01946519bba2b","modified":1565283944768},{"_id":"public/2017/10/10/objective-c-3.html","hash":"4f1bbd32e122458f013cf635d3d40f7648f84628","modified":1565283944769},{"_id":"public/2017/10/08/objective-c-2.html","hash":"87852e98d58c1bde6bd5b188c034d8be74b3274e","modified":1565283944769},{"_id":"public/2017/10/03/objective-c.html","hash":"5e7a0535988562e2e2052cf6de9208c8a651244b","modified":1565283944769},{"_id":"public/2017/09/21/nesting-element.html","hash":"e2906a57518857898fdf69bcbdf3fe46c4becb01","modified":1565283944770},{"_id":"public/2017/08/05/webpack-uglifyjs-ie8.html","hash":"c6572267398562a6bd85791aabcd983debc0dc1b","modified":1565283944770},{"_id":"public/2017/07/27/ruby.html","hash":"625d0b8d9a9f98925b464808613bae88fc581862","modified":1565283944770},{"_id":"public/2017/07/12/vue-elementui-message.html","hash":"3c8c6eeed1cbd461dd7031adddc33da378117c5b","modified":1565283944771},{"_id":"public/2017/06/17/git-study.html","hash":"11b23b51dbf6f0fe663d1466eddb01c30462ac8c","modified":1565283944771},{"_id":"public/2017/06/09/ubuntu-login.html","hash":"d1e650d85165339296e6f7a0122b2924741c081b","modified":1565283944771},{"_id":"public/2017/06/03/react-mobx.html","hash":"f270b6ce1a68ad108f61db11119eeb6f0df6798a","modified":1565283944771},{"_id":"public/2017/05/31/before-marry.html","hash":"e468e7451aedb4acd16c2d2fcaaf8bf78501164c","modified":1565283944771},{"_id":"public/2017/05/22/js-array.html","hash":"9c0b3f0258880f2e7a8d09e0ebdb89326f242e4c","modified":1565283944771},{"_id":"public/2017/04/22/mac-use-ntfs.html","hash":"978c598836cfdf9ca574c8c1507a8ac3fb06c692","modified":1565283944771},{"_id":"public/2017/04/14/zz-node-require.html","hash":"87bb996ee0652ebbc85fc925369bd737618d92de","modified":1565283944772},{"_id":"public/2017/03/31/go-snippet.html","hash":"08a5225a4151383234addf4cbe44baf7b4c8e044","modified":1565283944772},{"_id":"public/2017/03/06/share-keka.html","hash":"b9ba2512d178f3d9e97cc1fd59ecea062728fe01","modified":1565283944773},{"_id":"public/2017/03/05/js-flexible.html","hash":"b4b7e5ba1ea256eb1b954795105398667c8a82de","modified":1565283944773},{"_id":"public/2017/03/01/jekyll-brace.html","hash":"477d2aef6a21986ab86fd9d8f7e9c351d7e8702d","modified":1565283944773},{"_id":"public/2017/02/26/js-prototype.html","hash":"1540a6413ff854289584456f2bd5deb3ce077e52","modified":1565283944774},{"_id":"public/2017/02/21/js-new.html","hash":"db2a105accc6fd815d71b24cb956c4229434fab0","modified":1565283944774},{"_id":"public/2017/02/19/webpack2-2.html","hash":"21907868e583ce8663d3e1f198fa7d3ea2fcd3a6","modified":1565283944774},{"_id":"public/2017/02/05/zz.html","hash":"6c258a94c82cf06750b2f5d0d45140c356fc856d","modified":1565283944774},{"_id":"public/2017/02/04/webpack2-1.html","hash":"862db54014940f55286430d2f3c04e5e7fb5bdca","modified":1565283944774},{"_id":"public/2017/01/19/webpack-2.html","hash":"7b84ae640038d2b6ca9947c083546b8e44c8b951","modified":1565283944774},{"_id":"public/2017/01/09/js-template-compile.html","hash":"7076afbcec318841c79056684dde10fb043b2443","modified":1565283944774},{"_id":"public/2017/01/09/chrome-https-error.html","hash":"c19373fecff8aa517f307bae3b1c2753306cdcd2","modified":1565283944774},{"_id":"public/2017/01/06/webpack-1.html","hash":"cc97815dd348caaeaf481d807a97a0e31b7deb2e","modified":1565283944774},{"_id":"public/2017/01/04/ikbc-f108.html","hash":"06f11057f438091d3461146b7795590c546b3f79","modified":1565283944774},{"_id":"public/2016/12/12/netease-you.html","hash":"3e8d564692f235da051b9f446945c88e09f066bf","modified":1565283944775},{"_id":"public/2016/12/07/css-charset.html","hash":"f9e7d65496c8614ec65bcf73ac5419d5604825ce","modified":1565283944775},{"_id":"public/2016/12/06/octocat-figurine.html","hash":"aee99c2248fbb88ab591fb173ab4d9230b8b8ce7","modified":1565283944775},{"_id":"public/2016/12/01/npm-introduction.html","hash":"18a7bbcdfa8f1f284ba9f4b4f71acc6785578cde","modified":1565283944775},{"_id":"public/2016/11/27/simack-v10.html","hash":"b543c2ff1d6e4c0133f036c284e9aa0cad2b5029","modified":1565283944775},{"_id":"public/2016/11/18/share-drunarchiver.html","hash":"4dbfe79953097b2912d76ceb0e4d3f245538e816","modified":1565283944775},{"_id":"public/2016/10/31/codewars-father-and-son.html","hash":"a3bfb381d90093561c96de93c8c14a285c2199ca","modified":1565283944776},{"_id":"public/2016/10/28/sin36.html","hash":"e5fea0493d6dc7d1f8997bc9226834a7c34a47c8","modified":1565283944776},{"_id":"public/2016/10/26/kingston.html","hash":"f632747ca17f1e139ee5e01256b79d4235fee13d","modified":1565283944776},{"_id":"public/2016/10/23/buy-beyond-compare.html","hash":"48be3a8dd472fba11ee44f8593be3d43ae9c8fff","modified":1565283944776},{"_id":"public/2016/10/19/how-to-use.html","hash":"ff548cb257ec5f55876669997127ab39a458c1df","modified":1565283944776},{"_id":"public/2016/10/19/blog-show.html","hash":"ec618a6c1d6ee0ebd92e65448ccfdbd9f7aef5bc","modified":1565283944777},{"_id":"public/2016/10/15/why-blog.html","hash":"060c664097bafb8dc6dc8ad3d48c55e573fac4b2","modified":1565283944777},{"_id":"public/index.html","hash":"554f5c6e0ec5eeece7908f6be8c2f0e18bfe3261","modified":1565283944723},{"_id":"public/page/2/index.html","hash":"afa587239cd8730ec144db4698e6e0237dabf5c6","modified":1565283944723},{"_id":"public/page/3/index.html","hash":"9ff93a1358231b188a453df179c70fadea2bf09a","modified":1565283944723},{"_id":"public/page/4/index.html","hash":"bc69b3ba91af7b9a27feabb747d1a26fa22c07cd","modified":1565283944723},{"_id":"public/page/5/index.html","hash":"4b1855528e76f7dab59fecebd0ba01c7ec170641","modified":1565283944723},{"_id":"public/page/6/index.html","hash":"536db3cb4b66da9f2c69aaafe3e187d5a1311382","modified":1565283944723},{"_id":"public/page/7/index.html","hash":"3e38c46edeb554e3488da5534bf05c65ec8984f0","modified":1565283944723},{"_id":"public/page/8/index.html","hash":"5501dfa31ec25d0610aab492bab7f7d35eba9296","modified":1565283944723},{"_id":"public/categories/随笔/index.html","hash":"c175e46338c5e89803ee130e8f9fba5da923508f","modified":1565283944723},{"_id":"public/categories/软件/index.html","hash":"83e5e3cc18b11fdab0b26c6651eac7b7b42bd6b7","modified":1565283944723},{"_id":"public/categories/前端/index.html","hash":"8ed6c1a03c88f64b413ab658b1c90a46915c2f4f","modified":1565283944723},{"_id":"public/categories/前端/page/2/index.html","hash":"26d8e063bd2f4e31bc4cbd2144294b8ee15cfd6e","modified":1565283944723},{"_id":"public/categories/代码/index.html","hash":"1a89a13bab10ff7344ed5f0c21cfa4b6d3735533","modified":1565283944723},{"_id":"public/archives/index.html","hash":"65f0a15a2aa58e885adc705a49c814485339a1a2","modified":1565283944722},{"_id":"public/archives/page/2/index.html","hash":"aeaac97258810ba5b1a4bac39d31960b3b231106","modified":1565283944722},{"_id":"public/archives/2016/index.html","hash":"8dd6db38cea72a034dd563f32c738619616ee63c","modified":1565283944722},{"_id":"public/archives/2016/10/index.html","hash":"f83a025d31c19b43abe7ff8ba450dcae6189c308","modified":1565283944722},{"_id":"public/archives/2016/12/index.html","hash":"dc3fb8cdaeda472ef7e0337eb974f241ea12c40e","modified":1565283944722},{"_id":"public/archives/2017/index.html","hash":"1e0a56a6dfb43010fd62f1a4d178686420bc586d","modified":1565283944722},{"_id":"public/archives/2017/01/index.html","hash":"3b19c36ca5f5d4a74c0c359b40a3a44f7a43f8cc","modified":1565283944722},{"_id":"public/archives/2017/02/index.html","hash":"70cf21086cd543912fd909f55747418b6b08638f","modified":1565283944722},{"_id":"public/archives/2017/03/index.html","hash":"72cb2f5fb7c38ab34f7c845dfd4316a9c690da9e","modified":1565283944722},{"_id":"public/archives/2017/10/index.html","hash":"6853b867f7128b6f2ff208f20b855eba16206ed3","modified":1565283944722},{"_id":"public/archives/2018/index.html","hash":"a35d703e21870542e8edcc3d498f35b9eb5f6f50","modified":1565283944722},{"_id":"public/archives/2018/01/index.html","hash":"3e22f585fd348f4e4d72b7235c15ad0abce09709","modified":1565283944722},{"_id":"public/archives/2018/06/index.html","hash":"b8c57a6c7086a79800f5dc95ad00844829b86008","modified":1565283944722},{"_id":"public/archives/2019/index.html","hash":"45ae5d400562ddf8f1a4e981430bbc7a133fe78b","modified":1565283944723},{"_id":"public/archives/2019/04/index.html","hash":"f278aacea6bcb00767ae0727f61506305373e476","modified":1565283944723},{"_id":"public/tags/webpack/index.html","hash":"7c1371c16f4442bdccf47264c9fe0395081c8d49","modified":1565283944724},{"_id":"public/tags/js/index.html","hash":"6fe36633f889d4cc311b65028fdc238e19ca64a4","modified":1565283944724},{"_id":"public/tags/node/index.html","hash":"6a8777062b9935b282f623b7db2d5a78ff23cd46","modified":1565283944724},{"_id":"public/tags/react/index.html","hash":"a665e0b3accb315af23d9e7d9c5d1fd50b5ab6df","modified":1565283944724},{"_id":"public/tags/git/index.html","hash":"d7716d3206da963346886d160486b5bfbacdcda6","modified":1565283944724},{"_id":"public/tags/Objective-C/index.html","hash":"c1cd1966ecfac618620de45f53a55287007a5d38","modified":1565283944724},{"_id":"public/2019/07/23/hexo-blog.html","hash":"8ed29c55ab4802a7f7c4409ef7b951e49c990176","modified":1565283944759},{"_id":"public/tags/hexo/index.html","hash":"12e55f9ccf1a4ae8288e28c9df7814857641b40d","modified":1565283944722},{"_id":"public/sitemap.xml","hash":"b85741547e284937256f04a18d8500569a7d1a0a","modified":1565283942908},{"_id":"themes/landscape-mod/source/js/mod.js","hash":"14e008d5de003e427dbfa9f79993c37368ad03f0","modified":1565278881958},{"_id":"public/js/mod.js","hash":"14e008d5de003e427dbfa9f79993c37368ad03f0","modified":1565279253638},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1565279253191},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1565279253192},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1565279253192},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1565279253192},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1565279253192},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1565279253192},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1565279253192},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1565279253629},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1565279253630},{"_id":"public/fancybox/jquery.fancybox.css","hash":"f7dd490f76a52039244ab879b4219fca50c7963a","modified":1565279253638},{"_id":"public/js/script.js","hash":"e5bb8109d5c8b9cccbefaac5d63e87667b7e622c","modified":1565279253638},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"4310a88abe2e05cc3d0bfc30f57be6b1395547ef","modified":1565279253638},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1565279253638},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"3d695e257e61f4cbe57adda99eb01b13785f9929","modified":1565279253638},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1565279253638},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"b861d5c645b8b6f98757b973e72da1c7e7198c9c","modified":1565279253638},{"_id":"public/css/style.css","hash":"769919c3cdf4bc172a0a1c184b30a9250c7b2fca","modified":1565279253639},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1565279253639},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1565279253639},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1565279253639},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1565279253647},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"3ac24755c93c080990348fb9301dbbbb5fdbcab6","modified":1565279253656},{"_id":"public/fancybox/jquery.fancybox.js","hash":"61abfeea7becc4db424149d2bc693968f8b6b362","modified":1565279253681},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1565279253922},{"_id":"public/2016-2016-10-15-hello-world.html","hash":"bf039cfa3c91a2a3c9bd4b77741c3c80cf688b85","modified":1565283894013},{"_id":"public/2019-2019-07-23-hexo-blog.html","hash":"cbdb9b348fb81be51f8a6c40111e721f466c2873","modified":1565283894013},{"_id":"public/2019-2019-07-14-learning-reat-hooks.html","hash":"865c10192c69acdb2f004d970708a1a44a503017","modified":1565283894014},{"_id":"public/2019-2019-04-25-learning-git.html","hash":"234460e7b1782ac2e5b832ff3e87b8c6693d63d9","modified":1565283894014},{"_id":"public/2019-2019-04-10-office-e3.html","hash":"7ba5bd85e080ae86aec7601cc34a5d015f5cced9","modified":1565283894014},{"_id":"public/2019-2019-04-08-https-ssl.html","hash":"49b74b8ee1c94c2c935b4528fb9cd5842747af9d","modified":1565283894015},{"_id":"public/2019-2019-04-15-learning-markdown.html","hash":"5585e933a6363fa6a38761efd766fc8626301a29","modified":1565283894015},{"_id":"public/2018-2018-12-30-class-constructor.html","hash":"3dbb90608890cf9456a3fef50fb70cce04bbfb29","modified":1565283894015},{"_id":"public/2019-2019-02-16-electron.html","hash":"098196680c0b6f6cf848240fc9dd0bf1231c6fdb","modified":1565283894015},{"_id":"public/2018-2018-11-30-paste.html","hash":"0fe5d604f8284691ae8d84458ed9eba438f7b3d1","modified":1565283894015},{"_id":"public/2018-2018-11-21-ios-history-back.html","hash":"9d0244614c616483069c269054101e08ae85b8fb","modified":1565283894016},{"_id":"public/2018-2018-11-18-yarn.html","hash":"c9a03d60775336152344fe0d7d08abc0c0008e76","modified":1565283894016},{"_id":"public/2018-2018-11-06-webpack.html","hash":"51a4bd21e1ef4a8770b0bea92ff39e633009d365","modified":1565283894016},{"_id":"public/2018-2018-10-21-benq-screenbar-plus.html","hash":"f291f069f1eaace60c0c838470bb96859c1ba9a9","modified":1565283894016},{"_id":"public/2018-2018-10-13-useragent.html","hash":"6643e79a72981cb31a32db752f380de9e1108939","modified":1565283894017},{"_id":"public/2018-2018-09-12-git.html","hash":"abc14eea072d71499e62d8c779982f4ecf4e2266","modified":1565283894017},{"_id":"public/2018-2018-09-11-ubuntu-ipv6.html","hash":"d1ddb420c3ae98fb5f88de782edbfecedfd5d09d","modified":1565283894017},{"_id":"public/2018-2018-08-28-hosts.html","hash":"09aa50b6a804c2ca5fda1cbd030a2f8bdf73421b","modified":1565283894017},{"_id":"public/2018-2018-07-02-adobe-creative-cloud.html","hash":"a86a81ee52e7a643dcb54cd754bb4b7ebc2d9c8c","modified":1565283894017},{"_id":"public/2018-2018-06-28-array-flattened.html","hash":"e757b3a9c796e4fe3f2a17ee948ff3b5682b529a","modified":1565283894017},{"_id":"public/2018-2018-06-26-suigintou.html","hash":"2a9c18e037660f1e99f351b4e52d1eb7e694b7eb","modified":1565283894017},{"_id":"public/2018-2018-06-26-array-unflattened.html","hash":"6a8ca66e2e3d89a3818c931ffd02a73454606aee","modified":1565283894017},{"_id":"public/2018-2018-06-20-install-macos.html","hash":"9b96e15c84294071bbb5b4d900d2f6c67aa73187","modified":1565283894017},{"_id":"public/2018-2018-05-17-cross-domain.html","hash":"ca896b51b26abdc6f36cc867cdc7cffe571ec2f8","modified":1565283894018},{"_id":"public/2018-2018-05-09-ajax-302.html","hash":"5265aa58f9aaeabbda5d33ecec27dc66d7665da6","modified":1565283894018},{"_id":"public/2018-2018-04-06-cdn.html","hash":"4e90638764d7e8ed09eba07bf0d6ccc11e05e7a1","modified":1565283894018},{"_id":"public/2018-2018-03-26-event.html","hash":"0f21021137d7f3d9b09a718e3e9bd81f7ab14435","modified":1565283894018},{"_id":"public/2018-2018-03-24-bucket.html","hash":"d404473be856af247e95d2cd307d1d20ee7b698c","modified":1565283894018},{"_id":"public/2018-2018-03-11-cdn.html","hash":"c95a941fa2d3bd784ed8f9309567e401fca7e41f","modified":1565283894018},{"_id":"public/2018-2018-02-14-summary.html","hash":"e05f0c77bda3f77817ff9b1b4786aa066cdc2952","modified":1565283894019},{"_id":"public/2018-2018-02-10-less-zindex.html","hash":"a595094238e81784fa3d9dd4ac4e030def46c02d","modified":1565283894019},{"_id":"public/2018-2018-02-05-ubuntu.html","hash":"486732fd52f15cd2555c1221f14a347ab9969049","modified":1565283894019},{"_id":"public/2018-2018-01-29-js-focus.html","hash":"8fa9d98c9098d98c26eb3916abd87100d0f81489","modified":1565283894019},{"_id":"public/2018-2018-01-20-node-mail.html","hash":"1a833558c02ecbf8c79428e6a0e58992aacdff3c","modified":1565283894019},{"_id":"public/2018-2018-01-19-apache-htaccess.html","hash":"2c42639bd987e26488df371a31a961898d773a25","modified":1565283894019},{"_id":"public/2018-2018-01-06-dom-html.html","hash":"0e4061e18a0a4e55487b2d0b9dad4fa7c86b9efe","modified":1565283894019},{"_id":"public/2018-2018-01-21-js-if-eq.html","hash":"fd23dad7b2ee296b4346fc9d4c39821c8571b55f","modified":1565283894019},{"_id":"public/2017-2017-12-21-app-store.html","hash":"efe42cf202b8460c22c7ced752b7f8e062416129","modified":1565283894020},{"_id":"public/2017-2017-10-19-ios-2.html","hash":"68c2b1c6de6ea39e43715fc0e7ef473fb07fed3f","modified":1565283894020},{"_id":"public/2017-2017-10-17-ios-1.html","hash":"30e2a288894fdcb93838a069227509496877a244","modified":1565283894020},{"_id":"public/2017-2017-10-10-objective-c-3.html","hash":"dc95249b6cb99e5017e2b74db0f1ef7b2d57da2c","modified":1565283894020},{"_id":"public/2017-2017-10-08-objective-c-2.html","hash":"69ae054c41c215eec76a0c882fa3d65a5ea06c5b","modified":1565283894020},{"_id":"public/2017-2017-10-03-objective-c.html","hash":"bb88eeb2a12a476d4a62d0ababdfa7d8bdb0db3f","modified":1565283894020},{"_id":"public/2017-2017-09-21-nesting-element.html","hash":"56088206818b10d209364b2fd7fc38d27c71c746","modified":1565283894020},{"_id":"public/2017-2017-08-05-webpack-uglifyjs-ie8.html","hash":"9f9143e02c2d7c3beb4f102ab1869183ccf22b5c","modified":1565283894020},{"_id":"public/2017-2017-07-27-ruby.html","hash":"fa76c5ced2d48f79390278199526752551753800","modified":1565283894020},{"_id":"public/2017-2017-07-12-vue-elementui-message.html","hash":"adf46f69b2521211ee45e756bdd8d20e0cee243f","modified":1565283894020},{"_id":"public/2017-2017-06-17-git-study.html","hash":"28520fc7ab2b6c32f06bb1ed7bd635051906c9be","modified":1565283894021},{"_id":"public/2017-2017-06-09-ubuntu-login.html","hash":"326b2dd601d5d4edc42a41b421f39be3ac8227b9","modified":1565283894021},{"_id":"public/2017-2017-06-03-react-mobx.html","hash":"09579e279a4e77038ff49c75ac9f01360db02297","modified":1565283894021},{"_id":"public/2017-2017-05-31-before-marry.html","hash":"8a98517671cb37bcc2a1a08d01d882c8fac2a663","modified":1565283894021},{"_id":"public/2017-2017-05-22-js-array.html","hash":"0f5dd74df065b5091878a7d69d084abe5465f8b0","modified":1565283894021},{"_id":"public/2017-2017-04-22-mac-use-ntfs.html","hash":"06746e07ba107babc9dca60cf37011aadc187b0b","modified":1565283894021},{"_id":"public/2017-2017-04-14-zz-node-require.html","hash":"8983617f4a922846cb2806efa7ceaeaa9fb8c4c0","modified":1565283894022},{"_id":"public/2017-2017-03-31-go-snippet.html","hash":"7eba24bded52123127589ffdcad432c5ce7e8154","modified":1565283894022},{"_id":"public/2017-2017-03-06-share-keka.html","hash":"9949a773863fb99571d28b5e546f22e04179a544","modified":1565283894022},{"_id":"public/2017-2017-03-05-js-flexible.html","hash":"e3e35a09909bae3398a95c304aee6614edb2507c","modified":1565283894022},{"_id":"public/2017-2017-03-01-jekyll-brace.html","hash":"8f5bdefb2ff7d92b7cbbd1d045bedc710a1ef2ef","modified":1565283894022},{"_id":"public/2017-2017-02-26-js-prototype.html","hash":"33f688ecfdcc597c6d631ad3c3047273c57dc1eb","modified":1565283894022},{"_id":"public/2017-2017-02-21-js-new.html","hash":"43c6667963ed31a8f6bae38942e61bd2d2b5cd61","modified":1565283894022},{"_id":"public/2017-2017-02-19-webpack2-2.html","hash":"c1de92af085e49e228efa00429c5d8f04b117e9c","modified":1565283894023},{"_id":"public/2017-2017-02-05-zz.html","hash":"ddf10116402e397bdd5d2ff861a1bc27b27dcec5","modified":1565283894023},{"_id":"public/2017-2017-02-04-webpack2-1.html","hash":"e021438ec291c4fba8fffe83419e39cd4b72fcc7","modified":1565283894023},{"_id":"public/2017-2017-01-19-webpack-2.html","hash":"e4d47e4650048b7ef3b77dc810db8436d7c93614","modified":1565283894023},{"_id":"public/2017-2017-01-09-js-template-compile.html","hash":"6da51bd554e88e9328c16d24ea276de7ec006276","modified":1565283894023},{"_id":"public/2017-2017-01-09-chrome-https-error.html","hash":"fe07fefd2bdf03fc2cb8904c2ad6497c063b9bf6","modified":1565283894024},{"_id":"public/2017-2017-01-06-webpack-1.html","hash":"bd3ad15c20e9f1fe7b6dd719a90ad975ea8eb4c5","modified":1565283894024},{"_id":"public/2017-2017-01-04-ikbc-f108.html","hash":"0ac262ee0511231e6b8e6a4b2f9d69030f085ac0","modified":1565283894024},{"_id":"public/2016-2016-12-12-netease-you.html","hash":"fb4267760edb45cbd4b099a7c6effa89c2c00c28","modified":1565283894024},{"_id":"public/2016-2016-12-07-css-charset.html","hash":"013142e71ecc56c88b24f952381c5972a5dd47e2","modified":1565283894024},{"_id":"public/2016-2016-12-06-octocat-figurine.html","hash":"df178b1a0bbacc40203db10b2a51659836a2e5df","modified":1565283894025},{"_id":"public/2016-2016-12-01-npm-introduction.html","hash":"e763c669134af7b18599bea51b8f258a45a57126","modified":1565283894025},{"_id":"public/2016-2016-11-27-simack-v10.html","hash":"e17814ac6da8e071394622ffc877013870ffeea2","modified":1565283894025},{"_id":"public/2016-2016-11-18-share-drunarchiver.html","hash":"a9a43dec372ad341f01a3feaa712002a6afde631","modified":1565283894025},{"_id":"public/2016-2016-10-31-codewars-father-and-son.html","hash":"7910fcf32245e0bb188cdc951e45dba895310b71","modified":1565283894025},{"_id":"public/2016-2016-10-28-sin36.html","hash":"bcfbc6cf004873ced3db91550a25c31d6b1314c2","modified":1565283894025},{"_id":"public/2016-2016-10-26-kingston.html","hash":"4630e5ecb10003b7255f85276f7ba1ba13c8766a","modified":1565283894026},{"_id":"public/2016-2016-10-23-buy-beyond-compare.html","hash":"42958dde296757c996a4c2b26ea3436a2199a84c","modified":1565283894026},{"_id":"public/2016-2016-10-19-how-to-use.html","hash":"3847964fbb80bd3227e35cd66026ef2ec5bcce0f","modified":1565283894027},{"_id":"public/2016-2016-10-19-blog-show.html","hash":"4265975bd74e65a50fc73a4cbe95b70c12f582a0","modified":1565283894027},{"_id":"public/2016-2016-10-15-why-blog.html","hash":"bca10e09cc0930d11a48801197e681a5c2312066","modified":1565283894027}],"Category":[{"name":"theme","_id":"cjy8y72pz0002s21dlx50luz1"},{"name":"随笔","_id":"cjy8y72q50007s21dhdfif9z2"},{"name":"数学","_id":"cjy8y72qm000xs21dmt1sz049"},{"name":"软件","_id":"cjy8y72qp0014s21d1xvoklw9"},{"name":"codewars","_id":"cjy8y72qu001bs21dizcss7b9"},{"name":"前端","_id":"cjy8y72qz001ks21diczl87er"},{"name":"外设","_id":"cjy8y72r5001qs21dt8hnfg43"},{"name":"代码","_id":"cjy8y72rs002us21drbt0r5fi"}],"Data":[],"Page":[],"Post":[{"layout":"post","title":"这是一篇效果示例文章","date":"2016-10-19T21:38:00.000Z","_content":"\n这篇文章，主要展示各种排版效果。\n\n<!-- more -->\n\n## 代码的效果\n\n这里使用了jekyll默认的引擎`rouge`来处理代码高亮。\n\n使用`rouge`的好处就是这是jekyll 3.0的默认代码高亮插件，放在github上面能直接识别，不需要转码成html。\n\n缺点就是默认不带有css，但是网页上代码已经被各种span包裹了各种class样式类。这样我们只需要自己找一个合适的css就行啦~\n\nCSS样式，使用的是 ~~`monokai`~~ `github`风格。可以使用ruby自己生成。具体生成`*.css`方法，请参见[rouge-github](https://github.com/jneen/rouge)。\n\n主要参考这两行。\n\n```bash\n$ rougify foo.rb\n$ rougify style monokai.sublime > syntax.css\n```\n\n> 在simack 1.0版本中，我更换为`github`风格，因为颜色更加协调。\n\n我自己用js给代码加入了行号。\n\n其实还加入了copy和raw功能，但是发现，copy功能除了IE外，需要flash插件。最终我决定放弃这些不太重要的功能了。\n\n好了，看看css的最终效果。\n\n```html\n<!DOCTYPE HTML>\n<html>\n<body>\n\n<video width=\"320\" height=\"240\" controls=\"controls\">\n    <source src=\"movie.ogg\" type=\"video/ogg\">\n    <source src=\"movie.mp4\" type=\"video/mp4\">\n    Your browser does not support the video tag.\n</video>\n\n</body>\n</html>\n```\n\n```js\nfor (i = 0; i < 10; i++) {\n    if (i == 3) {\n        break;\n    }\n    x = x + \"The number is \" + i + \"<br>\";\n}\n```\n\n如果是不支持的语法，那么会是这样子 ~~浅色的~~ 代码无任何样色标注~\n\n```abcd\n<script runat=\"server\">\nSub submit(sender As Object, e As EventArgs)\nlbl1.Text=\"Your name is \" & txt1.Text\nEnd Sub\n</script>\n<html>\n<body>\n\n<form runat=\"server\">\nEnter your name:\n<asp:TextBox id=\"txt1\" runat=\"server\" />\n<asp:Button OnClick=\"submit\" Text=\"Submit\" runat=\"server\" />\n<p><asp:Label id=\"lbl1\" runat=\"server\" /></p>\n</form>\n\n</body>\n</html>\n```\n\n## 表格的效果\n\n这是一个标准的表格效果。\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n\n## 引用的效果\n\n> jekyll是一个简单的免费的Blog生成工具，类似WordPress。\n>\n> 但是和WordPress又有很大的不同，原因是jekyll只是一个生成静态网页的工具，不需要数据库支持。但是可以配合第三方服务,例如Disqus。\n>\n> 最关键的是jekyll可以免费部署在Github上，而且可以绑定自己的域名。\n\n## 文本、图片和链接\n\njekyll环境搭建**并不是**很困难的！\n\n*例如你可以看这里：*\n\n这里是jekyll的中文[网站](http://jekyll.com.cn)\n\n![jekyll](http://jekyll.com.cn/img/logo-2x.png)\n\n## 列表效果\n\n这是一个无序列表\n\n* 苹果\n\n* 香蕉\n\n* 桃子\n\n这是一个有序列表\n\n1. 编写README.md\n\n2. 整理示例文章\n\n3. 提交到github","source":"_posts/2016/2016-10-19-blog-show.md","raw":"---\nlayout: post\ntitle: \"这是一篇效果示例文章\"\ndate: 2016-10-19 21:38:00 GMT+0000\ncategories: [theme]\ntags:  [simack]\n---\n\n这篇文章，主要展示各种排版效果。\n\n<!-- more -->\n\n## 代码的效果\n\n这里使用了jekyll默认的引擎`rouge`来处理代码高亮。\n\n使用`rouge`的好处就是这是jekyll 3.0的默认代码高亮插件，放在github上面能直接识别，不需要转码成html。\n\n缺点就是默认不带有css，但是网页上代码已经被各种span包裹了各种class样式类。这样我们只需要自己找一个合适的css就行啦~\n\nCSS样式，使用的是 ~~`monokai`~~ `github`风格。可以使用ruby自己生成。具体生成`*.css`方法，请参见[rouge-github](https://github.com/jneen/rouge)。\n\n主要参考这两行。\n\n```bash\n$ rougify foo.rb\n$ rougify style monokai.sublime > syntax.css\n```\n\n> 在simack 1.0版本中，我更换为`github`风格，因为颜色更加协调。\n\n我自己用js给代码加入了行号。\n\n其实还加入了copy和raw功能，但是发现，copy功能除了IE外，需要flash插件。最终我决定放弃这些不太重要的功能了。\n\n好了，看看css的最终效果。\n\n```html\n<!DOCTYPE HTML>\n<html>\n<body>\n\n<video width=\"320\" height=\"240\" controls=\"controls\">\n    <source src=\"movie.ogg\" type=\"video/ogg\">\n    <source src=\"movie.mp4\" type=\"video/mp4\">\n    Your browser does not support the video tag.\n</video>\n\n</body>\n</html>\n```\n\n```js\nfor (i = 0; i < 10; i++) {\n    if (i == 3) {\n        break;\n    }\n    x = x + \"The number is \" + i + \"<br>\";\n}\n```\n\n如果是不支持的语法，那么会是这样子 ~~浅色的~~ 代码无任何样色标注~\n\n```abcd\n<script runat=\"server\">\nSub submit(sender As Object, e As EventArgs)\nlbl1.Text=\"Your name is \" & txt1.Text\nEnd Sub\n</script>\n<html>\n<body>\n\n<form runat=\"server\">\nEnter your name:\n<asp:TextBox id=\"txt1\" runat=\"server\" />\n<asp:Button OnClick=\"submit\" Text=\"Submit\" runat=\"server\" />\n<p><asp:Label id=\"lbl1\" runat=\"server\" /></p>\n</form>\n\n</body>\n</html>\n```\n\n## 表格的效果\n\n这是一个标准的表格效果。\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n\n## 引用的效果\n\n> jekyll是一个简单的免费的Blog生成工具，类似WordPress。\n>\n> 但是和WordPress又有很大的不同，原因是jekyll只是一个生成静态网页的工具，不需要数据库支持。但是可以配合第三方服务,例如Disqus。\n>\n> 最关键的是jekyll可以免费部署在Github上，而且可以绑定自己的域名。\n\n## 文本、图片和链接\n\njekyll环境搭建**并不是**很困难的！\n\n*例如你可以看这里：*\n\n这里是jekyll的中文[网站](http://jekyll.com.cn)\n\n![jekyll](http://jekyll.com.cn/img/logo-2x.png)\n\n## 列表效果\n\n这是一个无序列表\n\n* 苹果\n\n* 香蕉\n\n* 桃子\n\n这是一个有序列表\n\n1. 编写README.md\n\n2. 整理示例文章\n\n3. 提交到github","slug":"2016-2016-10-19-blog-show","published":1,"updated":"2019-07-18T17:19:07.120Z","comments":1,"photos":[],"link":"","_id":"cjy8y72pr0000s21dtqi1uct8","content":"<p>这篇文章，主要展示各种排版效果。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"代码的效果\"><a href=\"#代码的效果\" class=\"headerlink\" title=\"代码的效果\"></a>代码的效果</h2><p>这里使用了jekyll默认的引擎<code>rouge</code>来处理代码高亮。</p>\n<p>使用<code>rouge</code>的好处就是这是jekyll 3.0的默认代码高亮插件，放在github上面能直接识别，不需要转码成html。</p>\n<p>缺点就是默认不带有css，但是网页上代码已经被各种span包裹了各种class样式类。这样我们只需要自己找一个合适的css就行啦~</p>\n<p>CSS样式，使用的是 <del><code>monokai</code></del> <code>github</code>风格。可以使用ruby自己生成。具体生成<code>*.css</code>方法，请参见<a href=\"https://github.com/jneen/rouge\" target=\"_blank\" rel=\"noopener\">rouge-github</a>。</p>\n<p>主要参考这两行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rougify foo.rb</span><br><span class=\"line\">$ rougify style monokai.sublime &gt; syntax.css</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在simack 1.0版本中，我更换为<code>github</code>风格，因为颜色更加协调。</p>\n</blockquote>\n<p>我自己用js给代码加入了行号。</p>\n<p>其实还加入了copy和raw功能，但是发现，copy功能除了IE外，需要flash插件。最终我决定放弃这些不太重要的功能了。</p>\n<p>好了，看看css的最终效果。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">width</span>=<span class=\"string\">\"320\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"240\"</span> <span class=\"attr\">controls</span>=<span class=\"string\">\"controls\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"movie.ogg\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/ogg\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"movie.mp4\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/mp4\"</span>&gt;</span></span><br><span class=\"line\">    Your browser does not support the video tag.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    x = x + <span class=\"string\">\"The number is \"</span> + i + <span class=\"string\">\"&lt;br&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果是不支持的语法，那么会是这样子 <del>浅色的</del> 代码无任何样色标注~</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script runat=&quot;server&quot;&gt;</span><br><span class=\"line\">Sub submit(sender As Object, e As EventArgs)</span><br><span class=\"line\">lbl1.Text=&quot;Your name is &quot; &amp; txt1.Text</span><br><span class=\"line\">End Sub</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;form runat=&quot;server&quot;&gt;</span><br><span class=\"line\">Enter your name:</span><br><span class=\"line\">&lt;asp:TextBox id=&quot;txt1&quot; runat=&quot;server&quot; /&gt;</span><br><span class=\"line\">&lt;asp:Button OnClick=&quot;submit&quot; Text=&quot;Submit&quot; runat=&quot;server&quot; /&gt;</span><br><span class=\"line\">&lt;p&gt;&lt;asp:Label id=&quot;lbl1&quot; runat=&quot;server&quot; /&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表格的效果\"><a href=\"#表格的效果\" class=\"headerlink\" title=\"表格的效果\"></a>表格的效果</h2><p>这是一个标准的表格效果。</p>\n<table>\n<thead>\n<tr>\n<th>Tables</th>\n<th align=\"center\">Are</th>\n<th align=\"right\">Cool</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>col 3 is</td>\n<td align=\"center\">right-aligned</td>\n<td align=\"right\">$1600</td>\n</tr>\n<tr>\n<td>col 2 is</td>\n<td align=\"center\">centered</td>\n<td align=\"right\">$12</td>\n</tr>\n<tr>\n<td>zebra stripes</td>\n<td align=\"center\">are neat</td>\n<td align=\"right\">$1</td>\n</tr>\n</tbody></table>\n<h2 id=\"引用的效果\"><a href=\"#引用的效果\" class=\"headerlink\" title=\"引用的效果\"></a>引用的效果</h2><blockquote>\n<p>jekyll是一个简单的免费的Blog生成工具，类似WordPress。</p>\n<p>但是和WordPress又有很大的不同，原因是jekyll只是一个生成静态网页的工具，不需要数据库支持。但是可以配合第三方服务,例如Disqus。</p>\n<p>最关键的是jekyll可以免费部署在Github上，而且可以绑定自己的域名。</p>\n</blockquote>\n<h2 id=\"文本、图片和链接\"><a href=\"#文本、图片和链接\" class=\"headerlink\" title=\"文本、图片和链接\"></a>文本、图片和链接</h2><p>jekyll环境搭建<strong>并不是</strong>很困难的！</p>\n<p><em>例如你可以看这里：</em></p>\n<p>这里是jekyll的中文<a href=\"http://jekyll.com.cn\" target=\"_blank\" rel=\"noopener\">网站</a></p>\n<p><img src=\"http://jekyll.com.cn/img/logo-2x.png\" alt=\"jekyll\"></p>\n<h2 id=\"列表效果\"><a href=\"#列表效果\" class=\"headerlink\" title=\"列表效果\"></a>列表效果</h2><p>这是一个无序列表</p>\n<ul>\n<li><p>苹果</p>\n</li>\n<li><p>香蕉</p>\n</li>\n<li><p>桃子</p>\n</li>\n</ul>\n<p>这是一个有序列表</p>\n<ol>\n<li><p>编写README.md</p>\n</li>\n<li><p>整理示例文章</p>\n</li>\n<li><p>提交到github</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>这篇文章，主要展示各种排版效果。</p>","more":"<h2 id=\"代码的效果\"><a href=\"#代码的效果\" class=\"headerlink\" title=\"代码的效果\"></a>代码的效果</h2><p>这里使用了jekyll默认的引擎<code>rouge</code>来处理代码高亮。</p>\n<p>使用<code>rouge</code>的好处就是这是jekyll 3.0的默认代码高亮插件，放在github上面能直接识别，不需要转码成html。</p>\n<p>缺点就是默认不带有css，但是网页上代码已经被各种span包裹了各种class样式类。这样我们只需要自己找一个合适的css就行啦~</p>\n<p>CSS样式，使用的是 <del><code>monokai</code></del> <code>github</code>风格。可以使用ruby自己生成。具体生成<code>*.css</code>方法，请参见<a href=\"https://github.com/jneen/rouge\" target=\"_blank\" rel=\"noopener\">rouge-github</a>。</p>\n<p>主要参考这两行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rougify foo.rb</span><br><span class=\"line\">$ rougify style monokai.sublime &gt; syntax.css</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在simack 1.0版本中，我更换为<code>github</code>风格，因为颜色更加协调。</p>\n</blockquote>\n<p>我自己用js给代码加入了行号。</p>\n<p>其实还加入了copy和raw功能，但是发现，copy功能除了IE外，需要flash插件。最终我决定放弃这些不太重要的功能了。</p>\n<p>好了，看看css的最终效果。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">width</span>=<span class=\"string\">\"320\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"240\"</span> <span class=\"attr\">controls</span>=<span class=\"string\">\"controls\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"movie.ogg\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/ogg\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"movie.mp4\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/mp4\"</span>&gt;</span></span><br><span class=\"line\">    Your browser does not support the video tag.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    x = x + <span class=\"string\">\"The number is \"</span> + i + <span class=\"string\">\"&lt;br&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果是不支持的语法，那么会是这样子 <del>浅色的</del> 代码无任何样色标注~</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script runat=&quot;server&quot;&gt;</span><br><span class=\"line\">Sub submit(sender As Object, e As EventArgs)</span><br><span class=\"line\">lbl1.Text=&quot;Your name is &quot; &amp; txt1.Text</span><br><span class=\"line\">End Sub</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;form runat=&quot;server&quot;&gt;</span><br><span class=\"line\">Enter your name:</span><br><span class=\"line\">&lt;asp:TextBox id=&quot;txt1&quot; runat=&quot;server&quot; /&gt;</span><br><span class=\"line\">&lt;asp:Button OnClick=&quot;submit&quot; Text=&quot;Submit&quot; runat=&quot;server&quot; /&gt;</span><br><span class=\"line\">&lt;p&gt;&lt;asp:Label id=&quot;lbl1&quot; runat=&quot;server&quot; /&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表格的效果\"><a href=\"#表格的效果\" class=\"headerlink\" title=\"表格的效果\"></a>表格的效果</h2><p>这是一个标准的表格效果。</p>\n<table>\n<thead>\n<tr>\n<th>Tables</th>\n<th align=\"center\">Are</th>\n<th align=\"right\">Cool</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>col 3 is</td>\n<td align=\"center\">right-aligned</td>\n<td align=\"right\">$1600</td>\n</tr>\n<tr>\n<td>col 2 is</td>\n<td align=\"center\">centered</td>\n<td align=\"right\">$12</td>\n</tr>\n<tr>\n<td>zebra stripes</td>\n<td align=\"center\">are neat</td>\n<td align=\"right\">$1</td>\n</tr>\n</tbody></table>\n<h2 id=\"引用的效果\"><a href=\"#引用的效果\" class=\"headerlink\" title=\"引用的效果\"></a>引用的效果</h2><blockquote>\n<p>jekyll是一个简单的免费的Blog生成工具，类似WordPress。</p>\n<p>但是和WordPress又有很大的不同，原因是jekyll只是一个生成静态网页的工具，不需要数据库支持。但是可以配合第三方服务,例如Disqus。</p>\n<p>最关键的是jekyll可以免费部署在Github上，而且可以绑定自己的域名。</p>\n</blockquote>\n<h2 id=\"文本、图片和链接\"><a href=\"#文本、图片和链接\" class=\"headerlink\" title=\"文本、图片和链接\"></a>文本、图片和链接</h2><p>jekyll环境搭建<strong>并不是</strong>很困难的！</p>\n<p><em>例如你可以看这里：</em></p>\n<p>这里是jekyll的中文<a href=\"http://jekyll.com.cn\" target=\"_blank\" rel=\"noopener\">网站</a></p>\n<p><img src=\"http://jekyll.com.cn/img/logo-2x.png\" alt=\"jekyll\"></p>\n<h2 id=\"列表效果\"><a href=\"#列表效果\" class=\"headerlink\" title=\"列表效果\"></a>列表效果</h2><p>这是一个无序列表</p>\n<ul>\n<li><p>苹果</p>\n</li>\n<li><p>香蕉</p>\n</li>\n<li><p>桃子</p>\n</li>\n</ul>\n<p>这是一个有序列表</p>\n<ol>\n<li><p>编写README.md</p>\n</li>\n<li><p>整理示例文章</p>\n</li>\n<li><p>提交到github</p>\n</li>\n</ol>"},{"layout":"post","title":"为什么建立这个博客","date":"2016-10-15T20:00:00.000Z","_content":"\n一言难尽。\n\n那我就慢慢说来听听。\n\n<!-- more -->\n\n## 为什么要换\n\n我在Lofter绑定了yukapril的域名。由于他们政策变化，只能CNAME绑定，所以www自动绑定了，@根域名我是提交绑定了，但是经常自己手动刷他们的IP，用的A记录。\n\n这两天，Lofter死活打不开了。因为我绑定的域名，所以默认必须通过我的域名进行访问。\n\n这一出故障，就是很久。目前快三天了，还不行。\n\n本来我正计划要不就凑合全都在Lofter上写技术和其他类型的文章，这下，全都打消了。\n\n\n## 起初很好\n\n最早我是用网易博客写技术文章的，这样一直没有什么问题。即便是markdown如日中天，我也没有切换到其他博客(比如简书)。\n\n后来网易推出了Lofter，我也在用。主要作为非技术类文章的聚集地了，那时候Tumblr这类的轻博客很火。当然，网易算是绝无仅有的几个活下来的轻博客。你再看新浪轻博客，百度云空间，全部关闭了，曾经的点点网，也这样消失了。\n\n最后，大概是1年前，网易博客发文章时候，默认会让你提交到对应账号的Lofter，虽然每次可以取消关联，还是觉得麻烦，但是还没有放弃网易博客。\n\n这期间，也有几次自动投递到了Lofter，我都会删除。\n\n因为:\n\n> Lofter : 是一个社区，注重艺术、文化交流的社区\n>\n> keywords : 图片社交、照片社交、摄影作品、手机摄影、同人文、平面设计、cosplay、达人、女神图片、时尚搭配、二次元\n\n一个是大众对Lofter的定义，一个是他网站的keywords。所以，这里不宜涉及技术文章。\n\n这样，使得我计划再找适合自己的博客位置。\n\n## 找寻之路\n\n最初，我的计划是花钱再买一个空间，自己来做博客，考虑WordPress，或者Typecho。至于其他NodeJS的框架，可能不会考虑，因为服务器确实不好找，或者很贵(比起PHP来说)。\n\n我查过以下几个方案:\n\n* 新浪云空间\n* 新浪云购买现成WordPress服务包年 (120元)\n* 阿里云共享虚拟主机 (300元)\n* 阿里云弹性云 (200元)\n* 其他第三方的虚机，云平台\n* 知名可控博客:Farbox (65元)，Ghost等\n\n每种方案后面，标有一年大概的费用。\n\n新浪云空间是计算云豆的，之前由于我的疏忽，一直在扣，后来停止了。服务确实不错。这个其实算下来可能不会很贵，但要防止意外，我有点心虚。而且觉得我虽然备案了，但是还不能直接绑定国内CNAME，导致有时候很不稳定。\n\n新浪云WordPress包也不错，没选择除去他，除去上面的新浪规定外，还有一个问题，疑似低档套餐不能开放FTP，等于死空间，除了写博客啥也不行了。\n\n阿里云两个我都觉得好，不管便宜还是贵。差点就要这么选择了。主要是我域名转入阿里后备案，免费送共享主机2年，还是很好使的。贵的方案，可以送CDN，速度一样有飞快保证。差别主要在容量和数据库上。\n\n其他第三方就别说了，也不便宜，而且还感觉有各种坑人。我想如果真心想买的话，就选择大品牌。\n\n还有就是有一定控制能力的博客平台，比如Farbox和Ghost，Ghost因为是收费，而且不便宜，我国访问速度还很慢，就被我PASS了。Farbox之前也接触过，因为没做过开发，怕不熟悉。而且绑定域名这个或许也是问题。\n\n这里说下，我也看过百度和腾讯，他们好像只做稍微有点规模的，像我这种个人能用就行的情况，他们没有合适的解决方案。\n\n\n## 决定了\n\n最后想来想去，就想到了GitHub Pages。免费，可控制。换成国内的，就是Coding。\n\n> 2017年，coding发生了几次Page服务异常，每一次，等他们修复都需要很久（超过1天），我又切换到 Gitlab 上面了。但是不久，就发生了众所周知的 Gitlab 数据库误删事件，在此之后，我发现原有的博客配置（日期写法），竟然在 Gitlab 上失效了。又回到了国内 coding 上。但是依然的，非常不稳定，很多时候莫名其妙访问不了，需要反复随意提交代码，才能触发重新构建。\n>\n> 就这样，正好我的阿里云有个低配的 php 空间，就拿出来，当做静态空间使用了。每次本地用 jekyll 编译好，再上传到 FTP，虽然繁琐点，但是很稳定。\n\n做人要厚道，用人家空间就行了。图片放在七牛，每个月好像是10G流量。\n\n技术选型，怎么简单怎么来。选择Jekyll。\n\n其实吧，确实简单，但是不懂Ruby，不懂模板语法，走了很多弯路。\n\n但是我想，应该比每次折腾NodeJS的Hexo省些事。即便有的功能实现不了、不好实现，那我不要复杂功能行了吧。\n\n就这样，突然一下，我就到了一个新环境...\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2016/2016-10-15-why-blog.md","raw":"---\nlayout: post\ntitle: \"为什么建立这个博客\"\ndate: 2016-10-15 20:00:00 GMT+0000\ncategories: [随笔]\ntags:  [博客]\n---\n\n一言难尽。\n\n那我就慢慢说来听听。\n\n<!-- more -->\n\n## 为什么要换\n\n我在Lofter绑定了yukapril的域名。由于他们政策变化，只能CNAME绑定，所以www自动绑定了，@根域名我是提交绑定了，但是经常自己手动刷他们的IP，用的A记录。\n\n这两天，Lofter死活打不开了。因为我绑定的域名，所以默认必须通过我的域名进行访问。\n\n这一出故障，就是很久。目前快三天了，还不行。\n\n本来我正计划要不就凑合全都在Lofter上写技术和其他类型的文章，这下，全都打消了。\n\n\n## 起初很好\n\n最早我是用网易博客写技术文章的，这样一直没有什么问题。即便是markdown如日中天，我也没有切换到其他博客(比如简书)。\n\n后来网易推出了Lofter，我也在用。主要作为非技术类文章的聚集地了，那时候Tumblr这类的轻博客很火。当然，网易算是绝无仅有的几个活下来的轻博客。你再看新浪轻博客，百度云空间，全部关闭了，曾经的点点网，也这样消失了。\n\n最后，大概是1年前，网易博客发文章时候，默认会让你提交到对应账号的Lofter，虽然每次可以取消关联，还是觉得麻烦，但是还没有放弃网易博客。\n\n这期间，也有几次自动投递到了Lofter，我都会删除。\n\n因为:\n\n> Lofter : 是一个社区，注重艺术、文化交流的社区\n>\n> keywords : 图片社交、照片社交、摄影作品、手机摄影、同人文、平面设计、cosplay、达人、女神图片、时尚搭配、二次元\n\n一个是大众对Lofter的定义，一个是他网站的keywords。所以，这里不宜涉及技术文章。\n\n这样，使得我计划再找适合自己的博客位置。\n\n## 找寻之路\n\n最初，我的计划是花钱再买一个空间，自己来做博客，考虑WordPress，或者Typecho。至于其他NodeJS的框架，可能不会考虑，因为服务器确实不好找，或者很贵(比起PHP来说)。\n\n我查过以下几个方案:\n\n* 新浪云空间\n* 新浪云购买现成WordPress服务包年 (120元)\n* 阿里云共享虚拟主机 (300元)\n* 阿里云弹性云 (200元)\n* 其他第三方的虚机，云平台\n* 知名可控博客:Farbox (65元)，Ghost等\n\n每种方案后面，标有一年大概的费用。\n\n新浪云空间是计算云豆的，之前由于我的疏忽，一直在扣，后来停止了。服务确实不错。这个其实算下来可能不会很贵，但要防止意外，我有点心虚。而且觉得我虽然备案了，但是还不能直接绑定国内CNAME，导致有时候很不稳定。\n\n新浪云WordPress包也不错，没选择除去他，除去上面的新浪规定外，还有一个问题，疑似低档套餐不能开放FTP，等于死空间，除了写博客啥也不行了。\n\n阿里云两个我都觉得好，不管便宜还是贵。差点就要这么选择了。主要是我域名转入阿里后备案，免费送共享主机2年，还是很好使的。贵的方案，可以送CDN，速度一样有飞快保证。差别主要在容量和数据库上。\n\n其他第三方就别说了，也不便宜，而且还感觉有各种坑人。我想如果真心想买的话，就选择大品牌。\n\n还有就是有一定控制能力的博客平台，比如Farbox和Ghost，Ghost因为是收费，而且不便宜，我国访问速度还很慢，就被我PASS了。Farbox之前也接触过，因为没做过开发，怕不熟悉。而且绑定域名这个或许也是问题。\n\n这里说下，我也看过百度和腾讯，他们好像只做稍微有点规模的，像我这种个人能用就行的情况，他们没有合适的解决方案。\n\n\n## 决定了\n\n最后想来想去，就想到了GitHub Pages。免费，可控制。换成国内的，就是Coding。\n\n> 2017年，coding发生了几次Page服务异常，每一次，等他们修复都需要很久（超过1天），我又切换到 Gitlab 上面了。但是不久，就发生了众所周知的 Gitlab 数据库误删事件，在此之后，我发现原有的博客配置（日期写法），竟然在 Gitlab 上失效了。又回到了国内 coding 上。但是依然的，非常不稳定，很多时候莫名其妙访问不了，需要反复随意提交代码，才能触发重新构建。\n>\n> 就这样，正好我的阿里云有个低配的 php 空间，就拿出来，当做静态空间使用了。每次本地用 jekyll 编译好，再上传到 FTP，虽然繁琐点，但是很稳定。\n\n做人要厚道，用人家空间就行了。图片放在七牛，每个月好像是10G流量。\n\n技术选型，怎么简单怎么来。选择Jekyll。\n\n其实吧，确实简单，但是不懂Ruby，不懂模板语法，走了很多弯路。\n\n但是我想，应该比每次折腾NodeJS的Hexo省些事。即便有的功能实现不了、不好实现，那我不要复杂功能行了吧。\n\n就这样，突然一下，我就到了一个新环境...\n\n\n\n\n\n\n\n\n\n\n\n","slug":"2016-2016-10-15-why-blog","published":1,"updated":"2019-07-18T17:19:07.100Z","comments":1,"photos":[],"link":"","_id":"cjy8y72px0001s21d1e8cfnai","content":"<p>一言难尽。</p>\n<p>那我就慢慢说来听听。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"为什么要换\"><a href=\"#为什么要换\" class=\"headerlink\" title=\"为什么要换\"></a>为什么要换</h2><p>我在Lofter绑定了yukapril的域名。由于他们政策变化，只能CNAME绑定，所以www自动绑定了，@根域名我是提交绑定了，但是经常自己手动刷他们的IP，用的A记录。</p>\n<p>这两天，Lofter死活打不开了。因为我绑定的域名，所以默认必须通过我的域名进行访问。</p>\n<p>这一出故障，就是很久。目前快三天了，还不行。</p>\n<p>本来我正计划要不就凑合全都在Lofter上写技术和其他类型的文章，这下，全都打消了。</p>\n<h2 id=\"起初很好\"><a href=\"#起初很好\" class=\"headerlink\" title=\"起初很好\"></a>起初很好</h2><p>最早我是用网易博客写技术文章的，这样一直没有什么问题。即便是markdown如日中天，我也没有切换到其他博客(比如简书)。</p>\n<p>后来网易推出了Lofter，我也在用。主要作为非技术类文章的聚集地了，那时候Tumblr这类的轻博客很火。当然，网易算是绝无仅有的几个活下来的轻博客。你再看新浪轻博客，百度云空间，全部关闭了，曾经的点点网，也这样消失了。</p>\n<p>最后，大概是1年前，网易博客发文章时候，默认会让你提交到对应账号的Lofter，虽然每次可以取消关联，还是觉得麻烦，但是还没有放弃网易博客。</p>\n<p>这期间，也有几次自动投递到了Lofter，我都会删除。</p>\n<p>因为:</p>\n<blockquote>\n<p>Lofter : 是一个社区，注重艺术、文化交流的社区</p>\n<p>keywords : 图片社交、照片社交、摄影作品、手机摄影、同人文、平面设计、cosplay、达人、女神图片、时尚搭配、二次元</p>\n</blockquote>\n<p>一个是大众对Lofter的定义，一个是他网站的keywords。所以，这里不宜涉及技术文章。</p>\n<p>这样，使得我计划再找适合自己的博客位置。</p>\n<h2 id=\"找寻之路\"><a href=\"#找寻之路\" class=\"headerlink\" title=\"找寻之路\"></a>找寻之路</h2><p>最初，我的计划是花钱再买一个空间，自己来做博客，考虑WordPress，或者Typecho。至于其他NodeJS的框架，可能不会考虑，因为服务器确实不好找，或者很贵(比起PHP来说)。</p>\n<p>我查过以下几个方案:</p>\n<ul>\n<li>新浪云空间</li>\n<li>新浪云购买现成WordPress服务包年 (120元)</li>\n<li>阿里云共享虚拟主机 (300元)</li>\n<li>阿里云弹性云 (200元)</li>\n<li>其他第三方的虚机，云平台</li>\n<li>知名可控博客:Farbox (65元)，Ghost等</li>\n</ul>\n<p>每种方案后面，标有一年大概的费用。</p>\n<p>新浪云空间是计算云豆的，之前由于我的疏忽，一直在扣，后来停止了。服务确实不错。这个其实算下来可能不会很贵，但要防止意外，我有点心虚。而且觉得我虽然备案了，但是还不能直接绑定国内CNAME，导致有时候很不稳定。</p>\n<p>新浪云WordPress包也不错，没选择除去他，除去上面的新浪规定外，还有一个问题，疑似低档套餐不能开放FTP，等于死空间，除了写博客啥也不行了。</p>\n<p>阿里云两个我都觉得好，不管便宜还是贵。差点就要这么选择了。主要是我域名转入阿里后备案，免费送共享主机2年，还是很好使的。贵的方案，可以送CDN，速度一样有飞快保证。差别主要在容量和数据库上。</p>\n<p>其他第三方就别说了，也不便宜，而且还感觉有各种坑人。我想如果真心想买的话，就选择大品牌。</p>\n<p>还有就是有一定控制能力的博客平台，比如Farbox和Ghost，Ghost因为是收费，而且不便宜，我国访问速度还很慢，就被我PASS了。Farbox之前也接触过，因为没做过开发，怕不熟悉。而且绑定域名这个或许也是问题。</p>\n<p>这里说下，我也看过百度和腾讯，他们好像只做稍微有点规模的，像我这种个人能用就行的情况，他们没有合适的解决方案。</p>\n<h2 id=\"决定了\"><a href=\"#决定了\" class=\"headerlink\" title=\"决定了\"></a>决定了</h2><p>最后想来想去，就想到了GitHub Pages。免费，可控制。换成国内的，就是Coding。</p>\n<blockquote>\n<p>2017年，coding发生了几次Page服务异常，每一次，等他们修复都需要很久（超过1天），我又切换到 Gitlab 上面了。但是不久，就发生了众所周知的 Gitlab 数据库误删事件，在此之后，我发现原有的博客配置（日期写法），竟然在 Gitlab 上失效了。又回到了国内 coding 上。但是依然的，非常不稳定，很多时候莫名其妙访问不了，需要反复随意提交代码，才能触发重新构建。</p>\n<p>就这样，正好我的阿里云有个低配的 php 空间，就拿出来，当做静态空间使用了。每次本地用 jekyll 编译好，再上传到 FTP，虽然繁琐点，但是很稳定。</p>\n</blockquote>\n<p>做人要厚道，用人家空间就行了。图片放在七牛，每个月好像是10G流量。</p>\n<p>技术选型，怎么简单怎么来。选择Jekyll。</p>\n<p>其实吧，确实简单，但是不懂Ruby，不懂模板语法，走了很多弯路。</p>\n<p>但是我想，应该比每次折腾NodeJS的Hexo省些事。即便有的功能实现不了、不好实现，那我不要复杂功能行了吧。</p>\n<p>就这样，突然一下，我就到了一个新环境…</p>\n","site":{"data":{}},"excerpt":"<p>一言难尽。</p>\n<p>那我就慢慢说来听听。</p>","more":"<h2 id=\"为什么要换\"><a href=\"#为什么要换\" class=\"headerlink\" title=\"为什么要换\"></a>为什么要换</h2><p>我在Lofter绑定了yukapril的域名。由于他们政策变化，只能CNAME绑定，所以www自动绑定了，@根域名我是提交绑定了，但是经常自己手动刷他们的IP，用的A记录。</p>\n<p>这两天，Lofter死活打不开了。因为我绑定的域名，所以默认必须通过我的域名进行访问。</p>\n<p>这一出故障，就是很久。目前快三天了，还不行。</p>\n<p>本来我正计划要不就凑合全都在Lofter上写技术和其他类型的文章，这下，全都打消了。</p>\n<h2 id=\"起初很好\"><a href=\"#起初很好\" class=\"headerlink\" title=\"起初很好\"></a>起初很好</h2><p>最早我是用网易博客写技术文章的，这样一直没有什么问题。即便是markdown如日中天，我也没有切换到其他博客(比如简书)。</p>\n<p>后来网易推出了Lofter，我也在用。主要作为非技术类文章的聚集地了，那时候Tumblr这类的轻博客很火。当然，网易算是绝无仅有的几个活下来的轻博客。你再看新浪轻博客，百度云空间，全部关闭了，曾经的点点网，也这样消失了。</p>\n<p>最后，大概是1年前，网易博客发文章时候，默认会让你提交到对应账号的Lofter，虽然每次可以取消关联，还是觉得麻烦，但是还没有放弃网易博客。</p>\n<p>这期间，也有几次自动投递到了Lofter，我都会删除。</p>\n<p>因为:</p>\n<blockquote>\n<p>Lofter : 是一个社区，注重艺术、文化交流的社区</p>\n<p>keywords : 图片社交、照片社交、摄影作品、手机摄影、同人文、平面设计、cosplay、达人、女神图片、时尚搭配、二次元</p>\n</blockquote>\n<p>一个是大众对Lofter的定义，一个是他网站的keywords。所以，这里不宜涉及技术文章。</p>\n<p>这样，使得我计划再找适合自己的博客位置。</p>\n<h2 id=\"找寻之路\"><a href=\"#找寻之路\" class=\"headerlink\" title=\"找寻之路\"></a>找寻之路</h2><p>最初，我的计划是花钱再买一个空间，自己来做博客，考虑WordPress，或者Typecho。至于其他NodeJS的框架，可能不会考虑，因为服务器确实不好找，或者很贵(比起PHP来说)。</p>\n<p>我查过以下几个方案:</p>\n<ul>\n<li>新浪云空间</li>\n<li>新浪云购买现成WordPress服务包年 (120元)</li>\n<li>阿里云共享虚拟主机 (300元)</li>\n<li>阿里云弹性云 (200元)</li>\n<li>其他第三方的虚机，云平台</li>\n<li>知名可控博客:Farbox (65元)，Ghost等</li>\n</ul>\n<p>每种方案后面，标有一年大概的费用。</p>\n<p>新浪云空间是计算云豆的，之前由于我的疏忽，一直在扣，后来停止了。服务确实不错。这个其实算下来可能不会很贵，但要防止意外，我有点心虚。而且觉得我虽然备案了，但是还不能直接绑定国内CNAME，导致有时候很不稳定。</p>\n<p>新浪云WordPress包也不错，没选择除去他，除去上面的新浪规定外，还有一个问题，疑似低档套餐不能开放FTP，等于死空间，除了写博客啥也不行了。</p>\n<p>阿里云两个我都觉得好，不管便宜还是贵。差点就要这么选择了。主要是我域名转入阿里后备案，免费送共享主机2年，还是很好使的。贵的方案，可以送CDN，速度一样有飞快保证。差别主要在容量和数据库上。</p>\n<p>其他第三方就别说了，也不便宜，而且还感觉有各种坑人。我想如果真心想买的话，就选择大品牌。</p>\n<p>还有就是有一定控制能力的博客平台，比如Farbox和Ghost，Ghost因为是收费，而且不便宜，我国访问速度还很慢，就被我PASS了。Farbox之前也接触过，因为没做过开发，怕不熟悉。而且绑定域名这个或许也是问题。</p>\n<p>这里说下，我也看过百度和腾讯，他们好像只做稍微有点规模的，像我这种个人能用就行的情况，他们没有合适的解决方案。</p>\n<h2 id=\"决定了\"><a href=\"#决定了\" class=\"headerlink\" title=\"决定了\"></a>决定了</h2><p>最后想来想去，就想到了GitHub Pages。免费，可控制。换成国内的，就是Coding。</p>\n<blockquote>\n<p>2017年，coding发生了几次Page服务异常，每一次，等他们修复都需要很久（超过1天），我又切换到 Gitlab 上面了。但是不久，就发生了众所周知的 Gitlab 数据库误删事件，在此之后，我发现原有的博客配置（日期写法），竟然在 Gitlab 上失效了。又回到了国内 coding 上。但是依然的，非常不稳定，很多时候莫名其妙访问不了，需要反复随意提交代码，才能触发重新构建。</p>\n<p>就这样，正好我的阿里云有个低配的 php 空间，就拿出来，当做静态空间使用了。每次本地用 jekyll 编译好，再上传到 FTP，虽然繁琐点，但是很稳定。</p>\n</blockquote>\n<p>做人要厚道，用人家空间就行了。图片放在七牛，每个月好像是10G流量。</p>\n<p>技术选型，怎么简单怎么来。选择Jekyll。</p>\n<p>其实吧，确实简单，但是不懂Ruby，不懂模板语法，走了很多弯路。</p>\n<p>但是我想，应该比每次折腾NodeJS的Hexo省些事。即便有的功能实现不了、不好实现，那我不要复杂功能行了吧。</p>\n<p>就这样，突然一下，我就到了一个新环境…</p>"},{"layout":"post","title":"购买beyond compare","date":"2016-10-23T22:25:00.000Z","_content":"\n一直在找MAC下的bc（beyond compare），倒还好，不太急。一方面是办公还有windows用，当时找到了bc3的破解版。一方面是bc可以免费试用30天（我总觉得是30次）。\n\n看过国外官网，个人普通版，30美金。也看过国内官网，299元。国内目前都是优惠，才是这个价格。原价399元。\n\n我自己也算了下，按照现在的汇率，国外相当于是202快，国内还是黑啊！\n\n<!-- more -->\n\n其实最关键的是，国内只有官网，没有任何资料介绍，也没有能联系上的客服。\n\n比如说吧，我关注这两点：\n\n* 序列号能否进行升级。等到出了bc5时候，bc4用户序列号还能否用？\n* 能否用多台机器？\n\n国内官网的话，找不到答案。\n\n但是看了看国外官网，了解到：\n\n* 根据之前bc2，bc3的经验，如果是花钱购买的话，那么可以升级到新的一版本（和购买时间有关）。如果时间超出了限制，那么可以半价购买。\n* 买的是1 user，非1PC/1MAC这类。也就是说，没有限制机器一说。当然这点上，通过之前网上的序列号也能证明，一号可以在多个机器上启动。\n\n> 这里我应该说下，还真有一号一个机器的软件。就是我们爱用的IntelJ旗下软件。\n>\n> 同一个局域网内，相同注册信息只能有一个机器里的软件能启动，其他机器不能启动。机器上会有同网段提醒。\n\n### 今天再次去看看\n之前记得有一个20% off的优惠，今天又再次去看看，主要是看看能不能支付宝支付。\n\n结果发现20% off是给一个优惠码，购买时候可以输入。\n\n这样发现**奇迹**了，原本30美金的bc，直接变成了24美金！欣喜若狂！！激动的查看支付方式，果真，只能信用卡/PayPal。\n\n![image](https://cdn0.yukapril.com/blog/2016-10-23-buy-bc.png-wm.white)\n\n还好自己有PayPal。\n\n### 找回PayPal密码\n\n这，真是一波三折。\n\n##### 密码找回\n\n邮箱记得，密码不记得了，找回。\n\n找回是没问题的，但是要求输入绑定的银行卡卡号！我去，PayPal是我2011年注册的，当时还在用我人生的第一张银行卡——工商银行的呢。后来没多久就因为卡片有些损毁更换了一张。\n\n这还不算完。\n\n更换以后，一直有问题，因为当时我还小，没有身份证，是户口本开户。而且，最早还是没有卡，只有存折。后来升级的卡。这样导致了换完的卡网上支付不太行。\n\n这样凑合过了几年，因为我上班了，用工资卡。\n\n这样也不算完。\n\n今年还换过一次，因为这次计划取消存折，同时用身份证更新信息。换成了丑陋的协和医院封面卡。\n\n所以，要想找到第一张卡的卡号，难上加难。\n\n意外的是，我竟然背了34遍，慢慢把最早的卡号背出来了...\n\n> 一直把自己的记忆力比作20年不会忘，看来是真的。\n\n##### 重新登录\n\n有了卡号，找回密码很顺利。\n\n结果第一次还是失败了。\n\n因为，新密码和原密码相同...相同...\n\n不会吧，我记得PayPal我至少有将近2年没有动过了，竟然当时的密码和现在的想法一样...\n\n换了更复杂一点的密码，这样才登录了。删除银行卡，更新信息！\n\n### 既然才24美金，那就买吧~\n\n购买算是非常顺利，国外嘛，不需要密码，信用卡是通过卡后面的cvv2（就是那三个数字）进行验证的。\n\n不停地收到短信，邮件，购买成功。各种订单，注册信息发过来了。\n\n太激动了。人生中记忆力中第一个PC/MAC付费商业软件。（记忆力可参考上文）\n\n### 软件注册\n\n第一件事就是删除中文版原版，不为别的，真的是中文版怎么没办法点击注册啊！只能删除换成英文原版。\n\n安装好，填入注册信息，一句感谢的话，让自己好感动。感动了很久...\n\n最后，注册成功！\n\n![image](https://cdn0.yukapril.com/blog/2016-10-23-bc-register.png-wm.white)\n\n","source":"_posts/2016/2016-10-23-buy-beyond-compare.md","raw":"---\nlayout: post\ntitle: \"购买beyond compare\"\ndate: 2016-10-23 22:25:00 GMT+0000\ncategories: [随笔]\ntags:  [beyond compare,bc]\n---\n\n一直在找MAC下的bc（beyond compare），倒还好，不太急。一方面是办公还有windows用，当时找到了bc3的破解版。一方面是bc可以免费试用30天（我总觉得是30次）。\n\n看过国外官网，个人普通版，30美金。也看过国内官网，299元。国内目前都是优惠，才是这个价格。原价399元。\n\n我自己也算了下，按照现在的汇率，国外相当于是202快，国内还是黑啊！\n\n<!-- more -->\n\n其实最关键的是，国内只有官网，没有任何资料介绍，也没有能联系上的客服。\n\n比如说吧，我关注这两点：\n\n* 序列号能否进行升级。等到出了bc5时候，bc4用户序列号还能否用？\n* 能否用多台机器？\n\n国内官网的话，找不到答案。\n\n但是看了看国外官网，了解到：\n\n* 根据之前bc2，bc3的经验，如果是花钱购买的话，那么可以升级到新的一版本（和购买时间有关）。如果时间超出了限制，那么可以半价购买。\n* 买的是1 user，非1PC/1MAC这类。也就是说，没有限制机器一说。当然这点上，通过之前网上的序列号也能证明，一号可以在多个机器上启动。\n\n> 这里我应该说下，还真有一号一个机器的软件。就是我们爱用的IntelJ旗下软件。\n>\n> 同一个局域网内，相同注册信息只能有一个机器里的软件能启动，其他机器不能启动。机器上会有同网段提醒。\n\n### 今天再次去看看\n之前记得有一个20% off的优惠，今天又再次去看看，主要是看看能不能支付宝支付。\n\n结果发现20% off是给一个优惠码，购买时候可以输入。\n\n这样发现**奇迹**了，原本30美金的bc，直接变成了24美金！欣喜若狂！！激动的查看支付方式，果真，只能信用卡/PayPal。\n\n![image](https://cdn0.yukapril.com/blog/2016-10-23-buy-bc.png-wm.white)\n\n还好自己有PayPal。\n\n### 找回PayPal密码\n\n这，真是一波三折。\n\n##### 密码找回\n\n邮箱记得，密码不记得了，找回。\n\n找回是没问题的，但是要求输入绑定的银行卡卡号！我去，PayPal是我2011年注册的，当时还在用我人生的第一张银行卡——工商银行的呢。后来没多久就因为卡片有些损毁更换了一张。\n\n这还不算完。\n\n更换以后，一直有问题，因为当时我还小，没有身份证，是户口本开户。而且，最早还是没有卡，只有存折。后来升级的卡。这样导致了换完的卡网上支付不太行。\n\n这样凑合过了几年，因为我上班了，用工资卡。\n\n这样也不算完。\n\n今年还换过一次，因为这次计划取消存折，同时用身份证更新信息。换成了丑陋的协和医院封面卡。\n\n所以，要想找到第一张卡的卡号，难上加难。\n\n意外的是，我竟然背了34遍，慢慢把最早的卡号背出来了...\n\n> 一直把自己的记忆力比作20年不会忘，看来是真的。\n\n##### 重新登录\n\n有了卡号，找回密码很顺利。\n\n结果第一次还是失败了。\n\n因为，新密码和原密码相同...相同...\n\n不会吧，我记得PayPal我至少有将近2年没有动过了，竟然当时的密码和现在的想法一样...\n\n换了更复杂一点的密码，这样才登录了。删除银行卡，更新信息！\n\n### 既然才24美金，那就买吧~\n\n购买算是非常顺利，国外嘛，不需要密码，信用卡是通过卡后面的cvv2（就是那三个数字）进行验证的。\n\n不停地收到短信，邮件，购买成功。各种订单，注册信息发过来了。\n\n太激动了。人生中记忆力中第一个PC/MAC付费商业软件。（记忆力可参考上文）\n\n### 软件注册\n\n第一件事就是删除中文版原版，不为别的，真的是中文版怎么没办法点击注册啊！只能删除换成英文原版。\n\n安装好，填入注册信息，一句感谢的话，让自己好感动。感动了很久...\n\n最后，注册成功！\n\n![image](https://cdn0.yukapril.com/blog/2016-10-23-bc-register.png-wm.white)\n\n","slug":"2016-2016-10-23-buy-beyond-compare","published":1,"updated":"2019-07-18T17:19:07.123Z","comments":1,"photos":[],"link":"","_id":"cjy8y72q10004s21dqghsk21l","content":"<p>一直在找MAC下的bc（beyond compare），倒还好，不太急。一方面是办公还有windows用，当时找到了bc3的破解版。一方面是bc可以免费试用30天（我总觉得是30次）。</p>\n<p>看过国外官网，个人普通版，30美金。也看过国内官网，299元。国内目前都是优惠，才是这个价格。原价399元。</p>\n<p>我自己也算了下，按照现在的汇率，国外相当于是202快，国内还是黑啊！</p>\n<a id=\"more\"></a>\n\n<p>其实最关键的是，国内只有官网，没有任何资料介绍，也没有能联系上的客服。</p>\n<p>比如说吧，我关注这两点：</p>\n<ul>\n<li>序列号能否进行升级。等到出了bc5时候，bc4用户序列号还能否用？</li>\n<li>能否用多台机器？</li>\n</ul>\n<p>国内官网的话，找不到答案。</p>\n<p>但是看了看国外官网，了解到：</p>\n<ul>\n<li>根据之前bc2，bc3的经验，如果是花钱购买的话，那么可以升级到新的一版本（和购买时间有关）。如果时间超出了限制，那么可以半价购买。</li>\n<li>买的是1 user，非1PC/1MAC这类。也就是说，没有限制机器一说。当然这点上，通过之前网上的序列号也能证明，一号可以在多个机器上启动。</li>\n</ul>\n<blockquote>\n<p>这里我应该说下，还真有一号一个机器的软件。就是我们爱用的IntelJ旗下软件。</p>\n<p>同一个局域网内，相同注册信息只能有一个机器里的软件能启动，其他机器不能启动。机器上会有同网段提醒。</p>\n</blockquote>\n<h3 id=\"今天再次去看看\"><a href=\"#今天再次去看看\" class=\"headerlink\" title=\"今天再次去看看\"></a>今天再次去看看</h3><p>之前记得有一个20% off的优惠，今天又再次去看看，主要是看看能不能支付宝支付。</p>\n<p>结果发现20% off是给一个优惠码，购买时候可以输入。</p>\n<p>这样发现<strong>奇迹</strong>了，原本30美金的bc，直接变成了24美金！欣喜若狂！！激动的查看支付方式，果真，只能信用卡/PayPal。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-23-buy-bc.png-wm.white\" alt=\"image\"></p>\n<p>还好自己有PayPal。</p>\n<h3 id=\"找回PayPal密码\"><a href=\"#找回PayPal密码\" class=\"headerlink\" title=\"找回PayPal密码\"></a>找回PayPal密码</h3><p>这，真是一波三折。</p>\n<h5 id=\"密码找回\"><a href=\"#密码找回\" class=\"headerlink\" title=\"密码找回\"></a>密码找回</h5><p>邮箱记得，密码不记得了，找回。</p>\n<p>找回是没问题的，但是要求输入绑定的银行卡卡号！我去，PayPal是我2011年注册的，当时还在用我人生的第一张银行卡——工商银行的呢。后来没多久就因为卡片有些损毁更换了一张。</p>\n<p>这还不算完。</p>\n<p>更换以后，一直有问题，因为当时我还小，没有身份证，是户口本开户。而且，最早还是没有卡，只有存折。后来升级的卡。这样导致了换完的卡网上支付不太行。</p>\n<p>这样凑合过了几年，因为我上班了，用工资卡。</p>\n<p>这样也不算完。</p>\n<p>今年还换过一次，因为这次计划取消存折，同时用身份证更新信息。换成了丑陋的协和医院封面卡。</p>\n<p>所以，要想找到第一张卡的卡号，难上加难。</p>\n<p>意外的是，我竟然背了34遍，慢慢把最早的卡号背出来了…</p>\n<blockquote>\n<p>一直把自己的记忆力比作20年不会忘，看来是真的。</p>\n</blockquote>\n<h5 id=\"重新登录\"><a href=\"#重新登录\" class=\"headerlink\" title=\"重新登录\"></a>重新登录</h5><p>有了卡号，找回密码很顺利。</p>\n<p>结果第一次还是失败了。</p>\n<p>因为，新密码和原密码相同…相同…</p>\n<p>不会吧，我记得PayPal我至少有将近2年没有动过了，竟然当时的密码和现在的想法一样…</p>\n<p>换了更复杂一点的密码，这样才登录了。删除银行卡，更新信息！</p>\n<h3 id=\"既然才24美金，那就买吧\"><a href=\"#既然才24美金，那就买吧\" class=\"headerlink\" title=\"既然才24美金，那就买吧~\"></a>既然才24美金，那就买吧~</h3><p>购买算是非常顺利，国外嘛，不需要密码，信用卡是通过卡后面的cvv2（就是那三个数字）进行验证的。</p>\n<p>不停地收到短信，邮件，购买成功。各种订单，注册信息发过来了。</p>\n<p>太激动了。人生中记忆力中第一个PC/MAC付费商业软件。（记忆力可参考上文）</p>\n<h3 id=\"软件注册\"><a href=\"#软件注册\" class=\"headerlink\" title=\"软件注册\"></a>软件注册</h3><p>第一件事就是删除中文版原版，不为别的，真的是中文版怎么没办法点击注册啊！只能删除换成英文原版。</p>\n<p>安装好，填入注册信息，一句感谢的话，让自己好感动。感动了很久…</p>\n<p>最后，注册成功！</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-23-bc-register.png-wm.white\" alt=\"image\"></p>\n","site":{"data":{}},"excerpt":"<p>一直在找MAC下的bc（beyond compare），倒还好，不太急。一方面是办公还有windows用，当时找到了bc3的破解版。一方面是bc可以免费试用30天（我总觉得是30次）。</p>\n<p>看过国外官网，个人普通版，30美金。也看过国内官网，299元。国内目前都是优惠，才是这个价格。原价399元。</p>\n<p>我自己也算了下，按照现在的汇率，国外相当于是202快，国内还是黑啊！</p>","more":"<p>其实最关键的是，国内只有官网，没有任何资料介绍，也没有能联系上的客服。</p>\n<p>比如说吧，我关注这两点：</p>\n<ul>\n<li>序列号能否进行升级。等到出了bc5时候，bc4用户序列号还能否用？</li>\n<li>能否用多台机器？</li>\n</ul>\n<p>国内官网的话，找不到答案。</p>\n<p>但是看了看国外官网，了解到：</p>\n<ul>\n<li>根据之前bc2，bc3的经验，如果是花钱购买的话，那么可以升级到新的一版本（和购买时间有关）。如果时间超出了限制，那么可以半价购买。</li>\n<li>买的是1 user，非1PC/1MAC这类。也就是说，没有限制机器一说。当然这点上，通过之前网上的序列号也能证明，一号可以在多个机器上启动。</li>\n</ul>\n<blockquote>\n<p>这里我应该说下，还真有一号一个机器的软件。就是我们爱用的IntelJ旗下软件。</p>\n<p>同一个局域网内，相同注册信息只能有一个机器里的软件能启动，其他机器不能启动。机器上会有同网段提醒。</p>\n</blockquote>\n<h3 id=\"今天再次去看看\"><a href=\"#今天再次去看看\" class=\"headerlink\" title=\"今天再次去看看\"></a>今天再次去看看</h3><p>之前记得有一个20% off的优惠，今天又再次去看看，主要是看看能不能支付宝支付。</p>\n<p>结果发现20% off是给一个优惠码，购买时候可以输入。</p>\n<p>这样发现<strong>奇迹</strong>了，原本30美金的bc，直接变成了24美金！欣喜若狂！！激动的查看支付方式，果真，只能信用卡/PayPal。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-23-buy-bc.png-wm.white\" alt=\"image\"></p>\n<p>还好自己有PayPal。</p>\n<h3 id=\"找回PayPal密码\"><a href=\"#找回PayPal密码\" class=\"headerlink\" title=\"找回PayPal密码\"></a>找回PayPal密码</h3><p>这，真是一波三折。</p>\n<h5 id=\"密码找回\"><a href=\"#密码找回\" class=\"headerlink\" title=\"密码找回\"></a>密码找回</h5><p>邮箱记得，密码不记得了，找回。</p>\n<p>找回是没问题的，但是要求输入绑定的银行卡卡号！我去，PayPal是我2011年注册的，当时还在用我人生的第一张银行卡——工商银行的呢。后来没多久就因为卡片有些损毁更换了一张。</p>\n<p>这还不算完。</p>\n<p>更换以后，一直有问题，因为当时我还小，没有身份证，是户口本开户。而且，最早还是没有卡，只有存折。后来升级的卡。这样导致了换完的卡网上支付不太行。</p>\n<p>这样凑合过了几年，因为我上班了，用工资卡。</p>\n<p>这样也不算完。</p>\n<p>今年还换过一次，因为这次计划取消存折，同时用身份证更新信息。换成了丑陋的协和医院封面卡。</p>\n<p>所以，要想找到第一张卡的卡号，难上加难。</p>\n<p>意外的是，我竟然背了34遍，慢慢把最早的卡号背出来了…</p>\n<blockquote>\n<p>一直把自己的记忆力比作20年不会忘，看来是真的。</p>\n</blockquote>\n<h5 id=\"重新登录\"><a href=\"#重新登录\" class=\"headerlink\" title=\"重新登录\"></a>重新登录</h5><p>有了卡号，找回密码很顺利。</p>\n<p>结果第一次还是失败了。</p>\n<p>因为，新密码和原密码相同…相同…</p>\n<p>不会吧，我记得PayPal我至少有将近2年没有动过了，竟然当时的密码和现在的想法一样…</p>\n<p>换了更复杂一点的密码，这样才登录了。删除银行卡，更新信息！</p>\n<h3 id=\"既然才24美金，那就买吧\"><a href=\"#既然才24美金，那就买吧\" class=\"headerlink\" title=\"既然才24美金，那就买吧~\"></a>既然才24美金，那就买吧~</h3><p>购买算是非常顺利，国外嘛，不需要密码，信用卡是通过卡后面的cvv2（就是那三个数字）进行验证的。</p>\n<p>不停地收到短信，邮件，购买成功。各种订单，注册信息发过来了。</p>\n<p>太激动了。人生中记忆力中第一个PC/MAC付费商业软件。（记忆力可参考上文）</p>\n<h3 id=\"软件注册\"><a href=\"#软件注册\" class=\"headerlink\" title=\"软件注册\"></a>软件注册</h3><p>第一件事就是删除中文版原版，不为别的，真的是中文版怎么没办法点击注册啊！只能删除换成英文原版。</p>\n<p>安装好，填入注册信息，一句感谢的话，让自己好感动。感动了很久…</p>\n<p>最后，注册成功！</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-23-bc-register.png-wm.white\" alt=\"image\"></p>"},{"layout":"post","title":"Hello World!","date":"2016-10-15T18:28:00.000Z","_content":"\nJekyll 博客, 正式开通了!\n\n<!-- more -->","source":"_posts/2016/2016-10-15-hello-world.md","raw":"---\nlayout: post\ntitle: \"Hello World!\"\ndate: 2016-10-15 18:28:00 GMT+0000\ncategories: [随笔]\ntags:  []\n---\n\nJekyll 博客, 正式开通了!\n\n<!-- more -->","slug":"2016-2016-10-15-hello-world","published":1,"updated":"2019-07-18T17:19:06.988Z","comments":1,"photos":[],"link":"","_id":"cjy8y72q20005s21det4cxvm5","content":"<p>Jekyll 博客, 正式开通了!</p>\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<p>Jekyll 博客, 正式开通了!</p>","more":""},{"layout":"post","title":"金士顿U盘的二三事","date":"2016-10-26T21:37:00.000Z","_content":"\n最近公司要拷贝大数据，特意我在京东买了一个大容量存储，金士顿的DataTraveler 100G3，64G装。\n\n选择它，主要是之前买过相同的16G的。觉得速度还可以，质量也不错。\n\n<!-- more -->\n\n因为有时候会用到MAC拷数据，所以本来是把新U盘做成exFat格式。但是听说这个格式有一定几率会出问题，丢失数据，所以就计划着换成NTFS格式了。\n\n首先是拷贝了差不多30G的资料，发现速度非常慢，同样的电脑，同样的USB3.0接口，16G的老U盘都没有这么慢！仔细查看了下，原来是拷贝过程中经常中断，表现为速度慢慢降下来，变成0，之后过了一小会，大概5-6秒吧，速度又上去了。反反复复。\n\n考虑到可能丢数据，干脆就改成NTFS格式了。\n\n虽然说MAC需要装软件才能识别（其实不装也可以的），但是至少感觉稳定性要好一些。\n\n可是没想到，这个忽停忽动的问题，还是有。就这样凑合着用了2-3次。今天实在受不了了，决定京东投诉，申请售后。\n\n附上U盘的读写速度：\n\n金士顿DataTraveler 100G3-64G\n![image](https://cdn0.yukapril.com/blog/2016-10-26-kingston64.png-wm.black)\n\n金士顿DataTraveler 100G3-16G\n![image](https://cdn0.yukapril.com/blog/2016-10-26-kingston16.png-wm.black)\n\n以前买暇步士(hush puppies)鞋子送的U盘，8G，因该是USB3.0的\n![image](https://cdn0.yukapril.com/blog/2016-10-26-other.png-wm.black)\n\n##### 观察这三个U盘的数据\n\n除了送的贴牌U盘读取不稳定外，金士顿64G也不算好。比起16G来讲，读取差了不是一级别。而随机写入，小块数据可以说是完败，连贴牌都不如了。\n\n当然我也没有拿它进行量产，首先找京东厂商看看能不能换货吧，反复速度降为零怎么都不像是量产能搞定的。\n\n##### 最新发现\n\n今天在写文章的时候，发现MAC已经不能识别这个64GU盘了。需要通过`diskutil list`来查看。之前还能读取的，不知道为什么今天出了这个问题。（windows下无问题）\n\n--------\n\n##### 2016-10-27 更新\n\n昨晚申请维修，已经审批过了。今天上午不到12点京东快递员来收货回去了。之拿走了U盘，发票不用看了。这个配送员服务比较好，比较客气。\n\n##### 2016-10-28 更新\n\n今天中午1点多，江苏京东售后客服来电话，大概意思是：小件物品，价值不高，维修时间长，干脆免费给我换货一个。让我随时查看订单。\n\n![image](https://cdn0.yukapril.com/blog/2016-10-28-kingston-jd.png-wm.black)\n\n简单说就是客服直接免费下单，白送一个。\n\n##### 2016-10-31 更新\n\n由于赶上了周末，周六没办法派送，周一收到了U盘。整体来说，比之前的好。\n\n但是写入仍然很慢，快的话，将近24M/s。像我考了几个G左右的视频+少量PPT及网页存档，慢的时候平均速度大概1.6M/s。反正是奇慢无比。表现仍然为写入过程中，突然停住了，然后又再次传输。\n\n上图说话：\n\n默认到手是Fat32格式，速度不太快，和之前差不太多。稳定性不好。\n\n![image](https://cdn0.yukapril.com/blog/2016-10-31-kingston64-fat32.png-wm.black)\n\n我格式化为exFat格式，这回正常了，读取100M/s，写入25M/s左右。\n\n![image](https://cdn0.yukapril.com/blog/2016-10-31-kingston64-exfat.png-wm.black)\n\n我试了试ntfs格式，也比较好，竟然都超过exFat那么多。读取110M/s+，写入将近40M/s。成绩算是很好了。\n\n![image](https://cdn0.yukapril.com/blog/2016-10-31-kingston64-ntfs.png-wm.black)\n\n虽然数据不错，但是实际效果并不好。\n\n实际记录测试数据：8.79G（大量视频+少量PPT/网页存档）。用时8min29sec。折算速度：17.6M/s。像我考了几个G左右的视频\n\n就这样凑合接受吧。\n\n##### 说明：\n\n之前的截图，是在另一台电脑测试的。同样为USB3.0。但可能性能不佳。（可能电压/信号不够降成USB2.0了）。","source":"_posts/2016/2016-10-26-kingston.md","raw":"---\nlayout: post\ntitle: \"金士顿U盘的二三事\"\ndate: 2016-10-26 21:37:00 GMT+0000\ncategories: [随笔]\ntags:  [金士顿,u盘]\n---\n\n最近公司要拷贝大数据，特意我在京东买了一个大容量存储，金士顿的DataTraveler 100G3，64G装。\n\n选择它，主要是之前买过相同的16G的。觉得速度还可以，质量也不错。\n\n<!-- more -->\n\n因为有时候会用到MAC拷数据，所以本来是把新U盘做成exFat格式。但是听说这个格式有一定几率会出问题，丢失数据，所以就计划着换成NTFS格式了。\n\n首先是拷贝了差不多30G的资料，发现速度非常慢，同样的电脑，同样的USB3.0接口，16G的老U盘都没有这么慢！仔细查看了下，原来是拷贝过程中经常中断，表现为速度慢慢降下来，变成0，之后过了一小会，大概5-6秒吧，速度又上去了。反反复复。\n\n考虑到可能丢数据，干脆就改成NTFS格式了。\n\n虽然说MAC需要装软件才能识别（其实不装也可以的），但是至少感觉稳定性要好一些。\n\n可是没想到，这个忽停忽动的问题，还是有。就这样凑合着用了2-3次。今天实在受不了了，决定京东投诉，申请售后。\n\n附上U盘的读写速度：\n\n金士顿DataTraveler 100G3-64G\n![image](https://cdn0.yukapril.com/blog/2016-10-26-kingston64.png-wm.black)\n\n金士顿DataTraveler 100G3-16G\n![image](https://cdn0.yukapril.com/blog/2016-10-26-kingston16.png-wm.black)\n\n以前买暇步士(hush puppies)鞋子送的U盘，8G，因该是USB3.0的\n![image](https://cdn0.yukapril.com/blog/2016-10-26-other.png-wm.black)\n\n##### 观察这三个U盘的数据\n\n除了送的贴牌U盘读取不稳定外，金士顿64G也不算好。比起16G来讲，读取差了不是一级别。而随机写入，小块数据可以说是完败，连贴牌都不如了。\n\n当然我也没有拿它进行量产，首先找京东厂商看看能不能换货吧，反复速度降为零怎么都不像是量产能搞定的。\n\n##### 最新发现\n\n今天在写文章的时候，发现MAC已经不能识别这个64GU盘了。需要通过`diskutil list`来查看。之前还能读取的，不知道为什么今天出了这个问题。（windows下无问题）\n\n--------\n\n##### 2016-10-27 更新\n\n昨晚申请维修，已经审批过了。今天上午不到12点京东快递员来收货回去了。之拿走了U盘，发票不用看了。这个配送员服务比较好，比较客气。\n\n##### 2016-10-28 更新\n\n今天中午1点多，江苏京东售后客服来电话，大概意思是：小件物品，价值不高，维修时间长，干脆免费给我换货一个。让我随时查看订单。\n\n![image](https://cdn0.yukapril.com/blog/2016-10-28-kingston-jd.png-wm.black)\n\n简单说就是客服直接免费下单，白送一个。\n\n##### 2016-10-31 更新\n\n由于赶上了周末，周六没办法派送，周一收到了U盘。整体来说，比之前的好。\n\n但是写入仍然很慢，快的话，将近24M/s。像我考了几个G左右的视频+少量PPT及网页存档，慢的时候平均速度大概1.6M/s。反正是奇慢无比。表现仍然为写入过程中，突然停住了，然后又再次传输。\n\n上图说话：\n\n默认到手是Fat32格式，速度不太快，和之前差不太多。稳定性不好。\n\n![image](https://cdn0.yukapril.com/blog/2016-10-31-kingston64-fat32.png-wm.black)\n\n我格式化为exFat格式，这回正常了，读取100M/s，写入25M/s左右。\n\n![image](https://cdn0.yukapril.com/blog/2016-10-31-kingston64-exfat.png-wm.black)\n\n我试了试ntfs格式，也比较好，竟然都超过exFat那么多。读取110M/s+，写入将近40M/s。成绩算是很好了。\n\n![image](https://cdn0.yukapril.com/blog/2016-10-31-kingston64-ntfs.png-wm.black)\n\n虽然数据不错，但是实际效果并不好。\n\n实际记录测试数据：8.79G（大量视频+少量PPT/网页存档）。用时8min29sec。折算速度：17.6M/s。像我考了几个G左右的视频\n\n就这样凑合接受吧。\n\n##### 说明：\n\n之前的截图，是在另一台电脑测试的。同样为USB3.0。但可能性能不佳。（可能电压/信号不够降成USB2.0了）。","slug":"2016-2016-10-26-kingston","published":1,"updated":"2019-07-18T17:19:07.245Z","comments":1,"photos":[],"link":"","_id":"cjy8y72q40006s21d9sb8ynll","content":"<p>最近公司要拷贝大数据，特意我在京东买了一个大容量存储，金士顿的DataTraveler 100G3，64G装。</p>\n<p>选择它，主要是之前买过相同的16G的。觉得速度还可以，质量也不错。</p>\n<a id=\"more\"></a>\n\n<p>因为有时候会用到MAC拷数据，所以本来是把新U盘做成exFat格式。但是听说这个格式有一定几率会出问题，丢失数据，所以就计划着换成NTFS格式了。</p>\n<p>首先是拷贝了差不多30G的资料，发现速度非常慢，同样的电脑，同样的USB3.0接口，16G的老U盘都没有这么慢！仔细查看了下，原来是拷贝过程中经常中断，表现为速度慢慢降下来，变成0，之后过了一小会，大概5-6秒吧，速度又上去了。反反复复。</p>\n<p>考虑到可能丢数据，干脆就改成NTFS格式了。</p>\n<p>虽然说MAC需要装软件才能识别（其实不装也可以的），但是至少感觉稳定性要好一些。</p>\n<p>可是没想到，这个忽停忽动的问题，还是有。就这样凑合着用了2-3次。今天实在受不了了，决定京东投诉，申请售后。</p>\n<p>附上U盘的读写速度：</p>\n<p>金士顿DataTraveler 100G3-64G<br><img src=\"https://cdn0.yukapril.com/blog/2016-10-26-kingston64.png-wm.black\" alt=\"image\"></p>\n<p>金士顿DataTraveler 100G3-16G<br><img src=\"https://cdn0.yukapril.com/blog/2016-10-26-kingston16.png-wm.black\" alt=\"image\"></p>\n<p>以前买暇步士(hush puppies)鞋子送的U盘，8G，因该是USB3.0的<br><img src=\"https://cdn0.yukapril.com/blog/2016-10-26-other.png-wm.black\" alt=\"image\"></p>\n<h5 id=\"观察这三个U盘的数据\"><a href=\"#观察这三个U盘的数据\" class=\"headerlink\" title=\"观察这三个U盘的数据\"></a>观察这三个U盘的数据</h5><p>除了送的贴牌U盘读取不稳定外，金士顿64G也不算好。比起16G来讲，读取差了不是一级别。而随机写入，小块数据可以说是完败，连贴牌都不如了。</p>\n<p>当然我也没有拿它进行量产，首先找京东厂商看看能不能换货吧，反复速度降为零怎么都不像是量产能搞定的。</p>\n<h5 id=\"最新发现\"><a href=\"#最新发现\" class=\"headerlink\" title=\"最新发现\"></a>最新发现</h5><p>今天在写文章的时候，发现MAC已经不能识别这个64GU盘了。需要通过<code>diskutil list</code>来查看。之前还能读取的，不知道为什么今天出了这个问题。（windows下无问题）</p>\n<hr>\n<h5 id=\"2016-10-27-更新\"><a href=\"#2016-10-27-更新\" class=\"headerlink\" title=\"2016-10-27 更新\"></a>2016-10-27 更新</h5><p>昨晚申请维修，已经审批过了。今天上午不到12点京东快递员来收货回去了。之拿走了U盘，发票不用看了。这个配送员服务比较好，比较客气。</p>\n<h5 id=\"2016-10-28-更新\"><a href=\"#2016-10-28-更新\" class=\"headerlink\" title=\"2016-10-28 更新\"></a>2016-10-28 更新</h5><p>今天中午1点多，江苏京东售后客服来电话，大概意思是：小件物品，价值不高，维修时间长，干脆免费给我换货一个。让我随时查看订单。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-28-kingston-jd.png-wm.black\" alt=\"image\"></p>\n<p>简单说就是客服直接免费下单，白送一个。</p>\n<h5 id=\"2016-10-31-更新\"><a href=\"#2016-10-31-更新\" class=\"headerlink\" title=\"2016-10-31 更新\"></a>2016-10-31 更新</h5><p>由于赶上了周末，周六没办法派送，周一收到了U盘。整体来说，比之前的好。</p>\n<p>但是写入仍然很慢，快的话，将近24M/s。像我考了几个G左右的视频+少量PPT及网页存档，慢的时候平均速度大概1.6M/s。反正是奇慢无比。表现仍然为写入过程中，突然停住了，然后又再次传输。</p>\n<p>上图说话：</p>\n<p>默认到手是Fat32格式，速度不太快，和之前差不太多。稳定性不好。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-31-kingston64-fat32.png-wm.black\" alt=\"image\"></p>\n<p>我格式化为exFat格式，这回正常了，读取100M/s，写入25M/s左右。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-31-kingston64-exfat.png-wm.black\" alt=\"image\"></p>\n<p>我试了试ntfs格式，也比较好，竟然都超过exFat那么多。读取110M/s+，写入将近40M/s。成绩算是很好了。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-31-kingston64-ntfs.png-wm.black\" alt=\"image\"></p>\n<p>虽然数据不错，但是实际效果并不好。</p>\n<p>实际记录测试数据：8.79G（大量视频+少量PPT/网页存档）。用时8min29sec。折算速度：17.6M/s。像我考了几个G左右的视频</p>\n<p>就这样凑合接受吧。</p>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><p>之前的截图，是在另一台电脑测试的。同样为USB3.0。但可能性能不佳。（可能电压/信号不够降成USB2.0了）。</p>\n","site":{"data":{}},"excerpt":"<p>最近公司要拷贝大数据，特意我在京东买了一个大容量存储，金士顿的DataTraveler 100G3，64G装。</p>\n<p>选择它，主要是之前买过相同的16G的。觉得速度还可以，质量也不错。</p>","more":"<p>因为有时候会用到MAC拷数据，所以本来是把新U盘做成exFat格式。但是听说这个格式有一定几率会出问题，丢失数据，所以就计划着换成NTFS格式了。</p>\n<p>首先是拷贝了差不多30G的资料，发现速度非常慢，同样的电脑，同样的USB3.0接口，16G的老U盘都没有这么慢！仔细查看了下，原来是拷贝过程中经常中断，表现为速度慢慢降下来，变成0，之后过了一小会，大概5-6秒吧，速度又上去了。反反复复。</p>\n<p>考虑到可能丢数据，干脆就改成NTFS格式了。</p>\n<p>虽然说MAC需要装软件才能识别（其实不装也可以的），但是至少感觉稳定性要好一些。</p>\n<p>可是没想到，这个忽停忽动的问题，还是有。就这样凑合着用了2-3次。今天实在受不了了，决定京东投诉，申请售后。</p>\n<p>附上U盘的读写速度：</p>\n<p>金士顿DataTraveler 100G3-64G<br><img src=\"https://cdn0.yukapril.com/blog/2016-10-26-kingston64.png-wm.black\" alt=\"image\"></p>\n<p>金士顿DataTraveler 100G3-16G<br><img src=\"https://cdn0.yukapril.com/blog/2016-10-26-kingston16.png-wm.black\" alt=\"image\"></p>\n<p>以前买暇步士(hush puppies)鞋子送的U盘，8G，因该是USB3.0的<br><img src=\"https://cdn0.yukapril.com/blog/2016-10-26-other.png-wm.black\" alt=\"image\"></p>\n<h5 id=\"观察这三个U盘的数据\"><a href=\"#观察这三个U盘的数据\" class=\"headerlink\" title=\"观察这三个U盘的数据\"></a>观察这三个U盘的数据</h5><p>除了送的贴牌U盘读取不稳定外，金士顿64G也不算好。比起16G来讲，读取差了不是一级别。而随机写入，小块数据可以说是完败，连贴牌都不如了。</p>\n<p>当然我也没有拿它进行量产，首先找京东厂商看看能不能换货吧，反复速度降为零怎么都不像是量产能搞定的。</p>\n<h5 id=\"最新发现\"><a href=\"#最新发现\" class=\"headerlink\" title=\"最新发现\"></a>最新发现</h5><p>今天在写文章的时候，发现MAC已经不能识别这个64GU盘了。需要通过<code>diskutil list</code>来查看。之前还能读取的，不知道为什么今天出了这个问题。（windows下无问题）</p>\n<hr>\n<h5 id=\"2016-10-27-更新\"><a href=\"#2016-10-27-更新\" class=\"headerlink\" title=\"2016-10-27 更新\"></a>2016-10-27 更新</h5><p>昨晚申请维修，已经审批过了。今天上午不到12点京东快递员来收货回去了。之拿走了U盘，发票不用看了。这个配送员服务比较好，比较客气。</p>\n<h5 id=\"2016-10-28-更新\"><a href=\"#2016-10-28-更新\" class=\"headerlink\" title=\"2016-10-28 更新\"></a>2016-10-28 更新</h5><p>今天中午1点多，江苏京东售后客服来电话，大概意思是：小件物品，价值不高，维修时间长，干脆免费给我换货一个。让我随时查看订单。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-28-kingston-jd.png-wm.black\" alt=\"image\"></p>\n<p>简单说就是客服直接免费下单，白送一个。</p>\n<h5 id=\"2016-10-31-更新\"><a href=\"#2016-10-31-更新\" class=\"headerlink\" title=\"2016-10-31 更新\"></a>2016-10-31 更新</h5><p>由于赶上了周末，周六没办法派送，周一收到了U盘。整体来说，比之前的好。</p>\n<p>但是写入仍然很慢，快的话，将近24M/s。像我考了几个G左右的视频+少量PPT及网页存档，慢的时候平均速度大概1.6M/s。反正是奇慢无比。表现仍然为写入过程中，突然停住了，然后又再次传输。</p>\n<p>上图说话：</p>\n<p>默认到手是Fat32格式，速度不太快，和之前差不太多。稳定性不好。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-31-kingston64-fat32.png-wm.black\" alt=\"image\"></p>\n<p>我格式化为exFat格式，这回正常了，读取100M/s，写入25M/s左右。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-31-kingston64-exfat.png-wm.black\" alt=\"image\"></p>\n<p>我试了试ntfs格式，也比较好，竟然都超过exFat那么多。读取110M/s+，写入将近40M/s。成绩算是很好了。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-31-kingston64-ntfs.png-wm.black\" alt=\"image\"></p>\n<p>虽然数据不错，但是实际效果并不好。</p>\n<p>实际记录测试数据：8.79G（大量视频+少量PPT/网页存档）。用时8min29sec。折算速度：17.6M/s。像我考了几个G左右的视频</p>\n<p>就这样凑合接受吧。</p>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><p>之前的截图，是在另一台电脑测试的。同样为USB3.0。但可能性能不佳。（可能电压/信号不够降成USB2.0了）。</p>"},{"layout":"post","title":"如何使用simack","date":"2016-10-19T21:41:00.000Z","_content":"\nDEMO文章\n\n<!-- more -->\n\n## 如何书写文章\n只需要一步，直接在`_post`目录下写md格式的文件就行了。\n例如\n\n```md\n---\nlayout: post\ntitle: \"Hello World!\"\ndate: 2016-10-19 15:00:00 GMT+0000\ncategories: [杂谈]\ntags:  [博客,开通]\n---\n\nJekyll 博客, 正式开通了!\n```\n\n其中顶部的yml标记是必须的。而且，分类和tag可以是多个词汇。不过我建议分类还是一个词比较好。\n\n正文嘛，就是markdown就行啦~\n\n\n\n## category的使用\n\n首先，要在文章顶部yml中定义`categories`，这样才能加入到相应分类。\n\n分类的名字嘛，可以是英文，也可以是中文！\n\n### 增加分类方法\n\n需要两步：\n\n* 在`categories`目录下，参考以下代码，制作一个自己的新分类。\n\n```md\n---\nlayout: default\ntitle: 杂谈\n---\n\n{ % include categories.html param=\"杂谈\" % }\n```\n\n   这里的`杂谈`，必须和文章的分类`categories`字段对应。\n \n* 分类在边栏展示，在`_config.yml`中的`categoryLinks`可以控制。\n\n完毕~\n\n\n## 加入评论系统\n\n目前我看用的最多的就是[多说](http://duoshuo.com)了。\n\n注册登录，添加站点。\n\n在左侧选择工具，获取代码。看下代码中你的`short_name`是多少。其实就是你注册的多说域名前缀。\n\n在`_config.yml`中，配置上`duoshuo`下的`name`即可，同时要记得把`status`置为`true`。\n\n如果你希望某一篇文章不能被评论，可以在文章顶部加入字段`nocomments: true`。或者，登录多说进行控制。\n\n\n## 访问统计\n\nV0.1版本方案：\n\n可以在`_config.yml`中配置上`page_analysis`下的`common`。\n\n比如链接形式（建议去掉http和https前缀）：\n\n> 百度统计：//hm.baidu.com/hm.js?515a77345b51b4568446b02f666467d3\n>\n> 友盟统计(站长统计)：//s11.cnzz.com/stat.php?id=1200000000&web_id=1200000000\n>\n> 腾讯统计：//tajs.qq.com/stats?sId=59050000\n\nV1.0版本方案：\n\n由于为了兼容（更简单的实现）多家统计平台的高级统计，请直接在`_includes/user.analysis.html`进行修改。\n\n\n\n\n","source":"_posts/2016/2016-10-19-how-to-use.md","raw":"---\nlayout: post\ntitle: \"如何使用simack\"\ndate: 2016-10-19 21:41:00 GMT+0000\ncategories: [theme]\ntags:  [simack]\n---\n\nDEMO文章\n\n<!-- more -->\n\n## 如何书写文章\n只需要一步，直接在`_post`目录下写md格式的文件就行了。\n例如\n\n```md\n---\nlayout: post\ntitle: \"Hello World!\"\ndate: 2016-10-19 15:00:00 GMT+0000\ncategories: [杂谈]\ntags:  [博客,开通]\n---\n\nJekyll 博客, 正式开通了!\n```\n\n其中顶部的yml标记是必须的。而且，分类和tag可以是多个词汇。不过我建议分类还是一个词比较好。\n\n正文嘛，就是markdown就行啦~\n\n\n\n## category的使用\n\n首先，要在文章顶部yml中定义`categories`，这样才能加入到相应分类。\n\n分类的名字嘛，可以是英文，也可以是中文！\n\n### 增加分类方法\n\n需要两步：\n\n* 在`categories`目录下，参考以下代码，制作一个自己的新分类。\n\n```md\n---\nlayout: default\ntitle: 杂谈\n---\n\n{ % include categories.html param=\"杂谈\" % }\n```\n\n   这里的`杂谈`，必须和文章的分类`categories`字段对应。\n \n* 分类在边栏展示，在`_config.yml`中的`categoryLinks`可以控制。\n\n完毕~\n\n\n## 加入评论系统\n\n目前我看用的最多的就是[多说](http://duoshuo.com)了。\n\n注册登录，添加站点。\n\n在左侧选择工具，获取代码。看下代码中你的`short_name`是多少。其实就是你注册的多说域名前缀。\n\n在`_config.yml`中，配置上`duoshuo`下的`name`即可，同时要记得把`status`置为`true`。\n\n如果你希望某一篇文章不能被评论，可以在文章顶部加入字段`nocomments: true`。或者，登录多说进行控制。\n\n\n## 访问统计\n\nV0.1版本方案：\n\n可以在`_config.yml`中配置上`page_analysis`下的`common`。\n\n比如链接形式（建议去掉http和https前缀）：\n\n> 百度统计：//hm.baidu.com/hm.js?515a77345b51b4568446b02f666467d3\n>\n> 友盟统计(站长统计)：//s11.cnzz.com/stat.php?id=1200000000&web_id=1200000000\n>\n> 腾讯统计：//tajs.qq.com/stats?sId=59050000\n\nV1.0版本方案：\n\n由于为了兼容（更简单的实现）多家统计平台的高级统计，请直接在`_includes/user.analysis.html`进行修改。\n\n\n\n\n","slug":"2016-2016-10-19-how-to-use","published":1,"updated":"2019-07-18T17:19:07.211Z","comments":1,"photos":[],"link":"","_id":"cjy8y72q6000as21dkqx2qywp","content":"<p>DEMO文章</p>\n<a id=\"more\"></a>\n\n<h2 id=\"如何书写文章\"><a href=\"#如何书写文章\" class=\"headerlink\" title=\"如何书写文章\"></a>如何书写文章</h2><p>只需要一步，直接在<code>_post</code>目录下写md格式的文件就行了。<br>例如</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: post</span><br><span class=\"line\">title: \"Hello World!\"</span><br><span class=\"line\">date: 2016-10-19 15:00:00 GMT+0000</span><br><span class=\"line\">categories: [杂谈]</span><br><span class=\"line\">tags:  [博客,开通]</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">Jekyll 博客, 正式开通了!</span><br></pre></td></tr></table></figure>\n\n<p>其中顶部的yml标记是必须的。而且，分类和tag可以是多个词汇。不过我建议分类还是一个词比较好。</p>\n<p>正文嘛，就是markdown就行啦~</p>\n<h2 id=\"category的使用\"><a href=\"#category的使用\" class=\"headerlink\" title=\"category的使用\"></a>category的使用</h2><p>首先，要在文章顶部yml中定义<code>categories</code>，这样才能加入到相应分类。</p>\n<p>分类的名字嘛，可以是英文，也可以是中文！</p>\n<h3 id=\"增加分类方法\"><a href=\"#增加分类方法\" class=\"headerlink\" title=\"增加分类方法\"></a>增加分类方法</h3><p>需要两步：</p>\n<ul>\n<li>在<code>categories</code>目录下，参考以下代码，制作一个自己的新分类。</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: default</span><br><span class=\"line\">title: 杂谈</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">&#123; % include categories.html param=\"杂谈\" % &#125;</span><br></pre></td></tr></table></figure>\n\n<p>   这里的<code>杂谈</code>，必须和文章的分类<code>categories</code>字段对应。</p>\n<ul>\n<li>分类在边栏展示，在<code>_config.yml</code>中的<code>categoryLinks</code>可以控制。</li>\n</ul>\n<p>完毕~</p>\n<h2 id=\"加入评论系统\"><a href=\"#加入评论系统\" class=\"headerlink\" title=\"加入评论系统\"></a>加入评论系统</h2><p>目前我看用的最多的就是<a href=\"http://duoshuo.com\" target=\"_blank\" rel=\"noopener\">多说</a>了。</p>\n<p>注册登录，添加站点。</p>\n<p>在左侧选择工具，获取代码。看下代码中你的<code>short_name</code>是多少。其实就是你注册的多说域名前缀。</p>\n<p>在<code>_config.yml</code>中，配置上<code>duoshuo</code>下的<code>name</code>即可，同时要记得把<code>status</code>置为<code>true</code>。</p>\n<p>如果你希望某一篇文章不能被评论，可以在文章顶部加入字段<code>nocomments: true</code>。或者，登录多说进行控制。</p>\n<h2 id=\"访问统计\"><a href=\"#访问统计\" class=\"headerlink\" title=\"访问统计\"></a>访问统计</h2><p>V0.1版本方案：</p>\n<p>可以在<code>_config.yml</code>中配置上<code>page_analysis</code>下的<code>common</code>。</p>\n<p>比如链接形式（建议去掉http和https前缀）：</p>\n<blockquote>\n<p>百度统计：//hm.baidu.com/hm.js?515a77345b51b4568446b02f666467d3</p>\n<p>友盟统计(站长统计)：//s11.cnzz.com/stat.php?id=1200000000&amp;web_id=1200000000</p>\n<p>腾讯统计：//tajs.qq.com/stats?sId=59050000</p>\n</blockquote>\n<p>V1.0版本方案：</p>\n<p>由于为了兼容（更简单的实现）多家统计平台的高级统计，请直接在<code>_includes/user.analysis.html</code>进行修改。</p>\n","site":{"data":{}},"excerpt":"<p>DEMO文章</p>","more":"<h2 id=\"如何书写文章\"><a href=\"#如何书写文章\" class=\"headerlink\" title=\"如何书写文章\"></a>如何书写文章</h2><p>只需要一步，直接在<code>_post</code>目录下写md格式的文件就行了。<br>例如</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: post</span><br><span class=\"line\">title: \"Hello World!\"</span><br><span class=\"line\">date: 2016-10-19 15:00:00 GMT+0000</span><br><span class=\"line\">categories: [杂谈]</span><br><span class=\"line\">tags:  [博客,开通]</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">Jekyll 博客, 正式开通了!</span><br></pre></td></tr></table></figure>\n\n<p>其中顶部的yml标记是必须的。而且，分类和tag可以是多个词汇。不过我建议分类还是一个词比较好。</p>\n<p>正文嘛，就是markdown就行啦~</p>\n<h2 id=\"category的使用\"><a href=\"#category的使用\" class=\"headerlink\" title=\"category的使用\"></a>category的使用</h2><p>首先，要在文章顶部yml中定义<code>categories</code>，这样才能加入到相应分类。</p>\n<p>分类的名字嘛，可以是英文，也可以是中文！</p>\n<h3 id=\"增加分类方法\"><a href=\"#增加分类方法\" class=\"headerlink\" title=\"增加分类方法\"></a>增加分类方法</h3><p>需要两步：</p>\n<ul>\n<li>在<code>categories</code>目录下，参考以下代码，制作一个自己的新分类。</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: default</span><br><span class=\"line\">title: 杂谈</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">&#123; % include categories.html param=\"杂谈\" % &#125;</span><br></pre></td></tr></table></figure>\n\n<p>   这里的<code>杂谈</code>，必须和文章的分类<code>categories</code>字段对应。</p>\n<ul>\n<li>分类在边栏展示，在<code>_config.yml</code>中的<code>categoryLinks</code>可以控制。</li>\n</ul>\n<p>完毕~</p>\n<h2 id=\"加入评论系统\"><a href=\"#加入评论系统\" class=\"headerlink\" title=\"加入评论系统\"></a>加入评论系统</h2><p>目前我看用的最多的就是<a href=\"http://duoshuo.com\" target=\"_blank\" rel=\"noopener\">多说</a>了。</p>\n<p>注册登录，添加站点。</p>\n<p>在左侧选择工具，获取代码。看下代码中你的<code>short_name</code>是多少。其实就是你注册的多说域名前缀。</p>\n<p>在<code>_config.yml</code>中，配置上<code>duoshuo</code>下的<code>name</code>即可，同时要记得把<code>status</code>置为<code>true</code>。</p>\n<p>如果你希望某一篇文章不能被评论，可以在文章顶部加入字段<code>nocomments: true</code>。或者，登录多说进行控制。</p>\n<h2 id=\"访问统计\"><a href=\"#访问统计\" class=\"headerlink\" title=\"访问统计\"></a>访问统计</h2><p>V0.1版本方案：</p>\n<p>可以在<code>_config.yml</code>中配置上<code>page_analysis</code>下的<code>common</code>。</p>\n<p>比如链接形式（建议去掉http和https前缀）：</p>\n<blockquote>\n<p>百度统计：//hm.baidu.com/hm.js?515a77345b51b4568446b02f666467d3</p>\n<p>友盟统计(站长统计)：//s11.cnzz.com/stat.php?id=1200000000&amp;web_id=1200000000</p>\n<p>腾讯统计：//tajs.qq.com/stats?sId=59050000</p>\n</blockquote>\n<p>V1.0版本方案：</p>\n<p>由于为了兼容（更简单的实现）多家统计平台的高级统计，请直接在<code>_includes/user.analysis.html</code>进行修改。</p>"},{"layout":"post","title":"sin36°的手工计算","date":"2016-10-28T20:59:00.000Z","_content":"\n之前看到一篇文章（[见此](https://www.zhihu.com/question/51970177)），其中有说道sin36°的计算。\n\n自己尝试了下，果真不会算。\n\n其实不会算的原因在于没有画好图，而且参考了错误的思路。\n\n<!-- more -->\n\n### 下面演示下正确的计算方法：\n\n草稿纸开始作图（如下图）\n\n* 画一个等腰三角形ABC，角C为36°。则角A角B均为72°。（三角形内角180°）\n* 画角A的角平分线，相交CB于E点。此时角EAB为36°。角AEB为72°。\n\n通过以上两步，我们发现：\n\n* 我们有了三个等腰三角形。CAB和ECA和ABE。\n* 三角形相似，则对应边成比例。（来源于相似三角形公式）\n\n![image](https://cdn0.yukapril.com/blog/2016-10-27-sin36-1.png-wm.black.s)\n\n##### 下面，我们开始进行计算。\n\n假设CB长度为1，此时CE=AE=AB为x。EB则为1-x。\n\n相似三角形，底边比斜边相等：\n\n$$\\frac{BE}{AB}  = \\frac{AB}{CB}$$\n\n即：\n\n$$\\frac{1-x}{x}  = \\frac{x}{1}$$\n\n$$x^2 = 1-x$$\n\n对结果进行整理：\n\n$$x^2 +x-1= 0$$\n\n使用求根公式：\n\n$$x=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}$$\n\n带入后得到：\n\n$$x=\\frac{-1\\pm\\sqrt{1^2+4}}{2}=\\frac{-1\\pm\\sqrt{5}}{2}$$\n\n在这里，显然是x>0的。所以：\n\n$$x=\\frac{-1+\\sqrt{5}}{2}$$\n\n##### 好。基本上每条线的长度我们都是已知的了。此时要求sin36°，可以转化为求角CAE的正弦。\n\n\n我们再做一条辅助线：\n\n* 做E点的垂直线，相交CA于垂足D。\n\n![image](https://cdn0.yukapril.com/blog/2016-10-27-sin36-2.png-wm.black.s)\n\n这样就有：\n\n$$sin36^o = \\frac{DE}{AE}=\\frac{\\sqrt{AE^2-AD^2}}{AE}$$\n\n$$sin36^o=\\frac{\\sqrt{x^2-0.5^2}}{x}$$\n\n$$sin36^o = \\frac{\\sqrt{(\\frac{-1+\\sqrt{5}}{2})^2-0.5^2}}{\\frac{-1+\\sqrt{5}}{2}}$$\n\n$$sin36^o =\\frac{\\sqrt{(\\frac{6-2\\sqrt{5}}{4})-\\frac{1}{4}}}{\\frac{-1+\\sqrt{5}}{2}}$$\n\n$$sin36^o =\\frac{\\sqrt{\\frac{5-2\\sqrt{5}}{4}}}{\\frac{-1+\\sqrt{5}}{2}}$$\n\n$$sin36^o =\\frac{\\frac{1}{2}\\sqrt{5-2\\sqrt{5}}}{\\frac{-1+\\sqrt{5}}{2}}$$\n\n$$sin36^o =\\frac{\\sqrt{5-2\\sqrt{5}}}{-1+\\sqrt{5}}$$\n\n$$sin36^o =\\frac{\\sqrt{5-2\\sqrt{5}}*\\sqrt{(\\sqrt{5}+1)^2}}{(\\sqrt{5}-1)(\\sqrt{5}+1)}$$\n\n$$sin36^o =\\frac{\\sqrt{5-2\\sqrt{5}}*\\sqrt{(5+1+2\\sqrt{5})}}{4}$$\n\n$$sin36^o =\\frac{\\sqrt{(5-2\\sqrt{5})}*\\sqrt{(6+2\\sqrt{5})}}{4}$$\n\n$$sin36^o =\\frac{\\sqrt{10-2\\sqrt{5}}}{4}$$\n\n##### 最终检验\n> sqrt(10-2*sqrt(5))/4\n>\n> ans =  0.58779\n>\n> sin(36/180*pi)\n>\n> ans =  0.58779\n\n计算正确。\n\n<script src=\"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\"></script>","source":"_posts/2016/2016-10-28-sin36.md","raw":"---\nlayout: post\ntitle: \"sin36°的手工计算\"\ndate: 2016-10-28 20:59:00 GMT+0000\ncategories: [数学]\ntags:  [计算,数学]\n---\n\n之前看到一篇文章（[见此](https://www.zhihu.com/question/51970177)），其中有说道sin36°的计算。\n\n自己尝试了下，果真不会算。\n\n其实不会算的原因在于没有画好图，而且参考了错误的思路。\n\n<!-- more -->\n\n### 下面演示下正确的计算方法：\n\n草稿纸开始作图（如下图）\n\n* 画一个等腰三角形ABC，角C为36°。则角A角B均为72°。（三角形内角180°）\n* 画角A的角平分线，相交CB于E点。此时角EAB为36°。角AEB为72°。\n\n通过以上两步，我们发现：\n\n* 我们有了三个等腰三角形。CAB和ECA和ABE。\n* 三角形相似，则对应边成比例。（来源于相似三角形公式）\n\n![image](https://cdn0.yukapril.com/blog/2016-10-27-sin36-1.png-wm.black.s)\n\n##### 下面，我们开始进行计算。\n\n假设CB长度为1，此时CE=AE=AB为x。EB则为1-x。\n\n相似三角形，底边比斜边相等：\n\n$$\\frac{BE}{AB}  = \\frac{AB}{CB}$$\n\n即：\n\n$$\\frac{1-x}{x}  = \\frac{x}{1}$$\n\n$$x^2 = 1-x$$\n\n对结果进行整理：\n\n$$x^2 +x-1= 0$$\n\n使用求根公式：\n\n$$x=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}$$\n\n带入后得到：\n\n$$x=\\frac{-1\\pm\\sqrt{1^2+4}}{2}=\\frac{-1\\pm\\sqrt{5}}{2}$$\n\n在这里，显然是x>0的。所以：\n\n$$x=\\frac{-1+\\sqrt{5}}{2}$$\n\n##### 好。基本上每条线的长度我们都是已知的了。此时要求sin36°，可以转化为求角CAE的正弦。\n\n\n我们再做一条辅助线：\n\n* 做E点的垂直线，相交CA于垂足D。\n\n![image](https://cdn0.yukapril.com/blog/2016-10-27-sin36-2.png-wm.black.s)\n\n这样就有：\n\n$$sin36^o = \\frac{DE}{AE}=\\frac{\\sqrt{AE^2-AD^2}}{AE}$$\n\n$$sin36^o=\\frac{\\sqrt{x^2-0.5^2}}{x}$$\n\n$$sin36^o = \\frac{\\sqrt{(\\frac{-1+\\sqrt{5}}{2})^2-0.5^2}}{\\frac{-1+\\sqrt{5}}{2}}$$\n\n$$sin36^o =\\frac{\\sqrt{(\\frac{6-2\\sqrt{5}}{4})-\\frac{1}{4}}}{\\frac{-1+\\sqrt{5}}{2}}$$\n\n$$sin36^o =\\frac{\\sqrt{\\frac{5-2\\sqrt{5}}{4}}}{\\frac{-1+\\sqrt{5}}{2}}$$\n\n$$sin36^o =\\frac{\\frac{1}{2}\\sqrt{5-2\\sqrt{5}}}{\\frac{-1+\\sqrt{5}}{2}}$$\n\n$$sin36^o =\\frac{\\sqrt{5-2\\sqrt{5}}}{-1+\\sqrt{5}}$$\n\n$$sin36^o =\\frac{\\sqrt{5-2\\sqrt{5}}*\\sqrt{(\\sqrt{5}+1)^2}}{(\\sqrt{5}-1)(\\sqrt{5}+1)}$$\n\n$$sin36^o =\\frac{\\sqrt{5-2\\sqrt{5}}*\\sqrt{(5+1+2\\sqrt{5})}}{4}$$\n\n$$sin36^o =\\frac{\\sqrt{(5-2\\sqrt{5})}*\\sqrt{(6+2\\sqrt{5})}}{4}$$\n\n$$sin36^o =\\frac{\\sqrt{10-2\\sqrt{5}}}{4}$$\n\n##### 最终检验\n> sqrt(10-2*sqrt(5))/4\n>\n> ans =  0.58779\n>\n> sin(36/180*pi)\n>\n> ans =  0.58779\n\n计算正确。\n\n<script src=\"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\"></script>","slug":"2016-2016-10-28-sin36","published":1,"updated":"2019-07-18T17:19:07.317Z","comments":1,"photos":[],"link":"","_id":"cjy8y72q7000bs21d3j4oackp","content":"<p>之前看到一篇文章（<a href=\"https://www.zhihu.com/question/51970177\" target=\"_blank\" rel=\"noopener\">见此</a>），其中有说道sin36°的计算。</p>\n<p>自己尝试了下，果真不会算。</p>\n<p>其实不会算的原因在于没有画好图，而且参考了错误的思路。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"下面演示下正确的计算方法：\"><a href=\"#下面演示下正确的计算方法：\" class=\"headerlink\" title=\"下面演示下正确的计算方法：\"></a>下面演示下正确的计算方法：</h3><p>草稿纸开始作图（如下图）</p>\n<ul>\n<li>画一个等腰三角形ABC，角C为36°。则角A角B均为72°。（三角形内角180°）</li>\n<li>画角A的角平分线，相交CB于E点。此时角EAB为36°。角AEB为72°。</li>\n</ul>\n<p>通过以上两步，我们发现：</p>\n<ul>\n<li>我们有了三个等腰三角形。CAB和ECA和ABE。</li>\n<li>三角形相似，则对应边成比例。（来源于相似三角形公式）</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-27-sin36-1.png-wm.black.s\" alt=\"image\"></p>\n<h5 id=\"下面，我们开始进行计算。\"><a href=\"#下面，我们开始进行计算。\" class=\"headerlink\" title=\"下面，我们开始进行计算。\"></a>下面，我们开始进行计算。</h5><p>假设CB长度为1，此时CE=AE=AB为x。EB则为1-x。</p>\n<p>相似三角形，底边比斜边相等：</p>\n<p>$$\\frac{BE}{AB}  = \\frac{AB}{CB}$$</p>\n<p>即：</p>\n<p>$$\\frac{1-x}{x}  = \\frac{x}{1}$$</p>\n<p>$$x^2 = 1-x$$</p>\n<p>对结果进行整理：</p>\n<p>$$x^2 +x-1= 0$$</p>\n<p>使用求根公式：</p>\n<p>$$x=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}$$</p>\n<p>带入后得到：</p>\n<p>$$x=\\frac{-1\\pm\\sqrt{1^2+4}}{2}=\\frac{-1\\pm\\sqrt{5}}{2}$$</p>\n<p>在这里，显然是x&gt;0的。所以：</p>\n<p>$$x=\\frac{-1+\\sqrt{5}}{2}$$</p>\n<h5 id=\"好。基本上每条线的长度我们都是已知的了。此时要求sin36°，可以转化为求角CAE的正弦。\"><a href=\"#好。基本上每条线的长度我们都是已知的了。此时要求sin36°，可以转化为求角CAE的正弦。\" class=\"headerlink\" title=\"好。基本上每条线的长度我们都是已知的了。此时要求sin36°，可以转化为求角CAE的正弦。\"></a>好。基本上每条线的长度我们都是已知的了。此时要求sin36°，可以转化为求角CAE的正弦。</h5><p>我们再做一条辅助线：</p>\n<ul>\n<li>做E点的垂直线，相交CA于垂足D。</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-27-sin36-2.png-wm.black.s\" alt=\"image\"></p>\n<p>这样就有：</p>\n<p>$$sin36^o = \\frac{DE}{AE}=\\frac{\\sqrt{AE^2-AD^2}}{AE}$$</p>\n<p>$$sin36^o=\\frac{\\sqrt{x^2-0.5^2}}{x}$$</p>\n<p>$$sin36^o = \\frac{\\sqrt{(\\frac{-1+\\sqrt{5}}{2})^2-0.5^2}}{\\frac{-1+\\sqrt{5}}{2}}$$</p>\n<p>$$sin36^o =\\frac{\\sqrt{(\\frac{6-2\\sqrt{5}}{4})-\\frac{1}{4}}}{\\frac{-1+\\sqrt{5}}{2}}$$</p>\n<p>$$sin36^o =\\frac{\\sqrt{\\frac{5-2\\sqrt{5}}{4}}}{\\frac{-1+\\sqrt{5}}{2}}$$</p>\n<p>$$sin36^o =\\frac{\\frac{1}{2}\\sqrt{5-2\\sqrt{5}}}{\\frac{-1+\\sqrt{5}}{2}}$$</p>\n<p>$$sin36^o =\\frac{\\sqrt{5-2\\sqrt{5}}}{-1+\\sqrt{5}}$$</p>\n<p>$$sin36^o =\\frac{\\sqrt{5-2\\sqrt{5}}*\\sqrt{(\\sqrt{5}+1)^2}}{(\\sqrt{5}-1)(\\sqrt{5}+1)}$$</p>\n<p>$$sin36^o =\\frac{\\sqrt{5-2\\sqrt{5}}*\\sqrt{(5+1+2\\sqrt{5})}}{4}$$</p>\n<p>$$sin36^o =\\frac{\\sqrt{(5-2\\sqrt{5})}*\\sqrt{(6+2\\sqrt{5})}}{4}$$</p>\n<p>$$sin36^o =\\frac{\\sqrt{10-2\\sqrt{5}}}{4}$$</p>\n<h5 id=\"最终检验\"><a href=\"#最终检验\" class=\"headerlink\" title=\"最终检验\"></a>最终检验</h5><blockquote>\n<p>sqrt(10-2*sqrt(5))/4</p>\n<p>ans =  0.58779</p>\n<p>sin(36/180*pi)</p>\n<p>ans =  0.58779</p>\n</blockquote>\n<p>计算正确。</p>\n<script src=\"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\"></script>","site":{"data":{}},"excerpt":"<p>之前看到一篇文章（<a href=\"https://www.zhihu.com/question/51970177\" target=\"_blank\" rel=\"noopener\">见此</a>），其中有说道sin36°的计算。</p>\n<p>自己尝试了下，果真不会算。</p>\n<p>其实不会算的原因在于没有画好图，而且参考了错误的思路。</p>","more":"<h3 id=\"下面演示下正确的计算方法：\"><a href=\"#下面演示下正确的计算方法：\" class=\"headerlink\" title=\"下面演示下正确的计算方法：\"></a>下面演示下正确的计算方法：</h3><p>草稿纸开始作图（如下图）</p>\n<ul>\n<li>画一个等腰三角形ABC，角C为36°。则角A角B均为72°。（三角形内角180°）</li>\n<li>画角A的角平分线，相交CB于E点。此时角EAB为36°。角AEB为72°。</li>\n</ul>\n<p>通过以上两步，我们发现：</p>\n<ul>\n<li>我们有了三个等腰三角形。CAB和ECA和ABE。</li>\n<li>三角形相似，则对应边成比例。（来源于相似三角形公式）</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-27-sin36-1.png-wm.black.s\" alt=\"image\"></p>\n<h5 id=\"下面，我们开始进行计算。\"><a href=\"#下面，我们开始进行计算。\" class=\"headerlink\" title=\"下面，我们开始进行计算。\"></a>下面，我们开始进行计算。</h5><p>假设CB长度为1，此时CE=AE=AB为x。EB则为1-x。</p>\n<p>相似三角形，底边比斜边相等：</p>\n<p>$$\\frac{BE}{AB}  = \\frac{AB}{CB}$$</p>\n<p>即：</p>\n<p>$$\\frac{1-x}{x}  = \\frac{x}{1}$$</p>\n<p>$$x^2 = 1-x$$</p>\n<p>对结果进行整理：</p>\n<p>$$x^2 +x-1= 0$$</p>\n<p>使用求根公式：</p>\n<p>$$x=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}$$</p>\n<p>带入后得到：</p>\n<p>$$x=\\frac{-1\\pm\\sqrt{1^2+4}}{2}=\\frac{-1\\pm\\sqrt{5}}{2}$$</p>\n<p>在这里，显然是x&gt;0的。所以：</p>\n<p>$$x=\\frac{-1+\\sqrt{5}}{2}$$</p>\n<h5 id=\"好。基本上每条线的长度我们都是已知的了。此时要求sin36°，可以转化为求角CAE的正弦。\"><a href=\"#好。基本上每条线的长度我们都是已知的了。此时要求sin36°，可以转化为求角CAE的正弦。\" class=\"headerlink\" title=\"好。基本上每条线的长度我们都是已知的了。此时要求sin36°，可以转化为求角CAE的正弦。\"></a>好。基本上每条线的长度我们都是已知的了。此时要求sin36°，可以转化为求角CAE的正弦。</h5><p>我们再做一条辅助线：</p>\n<ul>\n<li>做E点的垂直线，相交CA于垂足D。</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-27-sin36-2.png-wm.black.s\" alt=\"image\"></p>\n<p>这样就有：</p>\n<p>$$sin36^o = \\frac{DE}{AE}=\\frac{\\sqrt{AE^2-AD^2}}{AE}$$</p>\n<p>$$sin36^o=\\frac{\\sqrt{x^2-0.5^2}}{x}$$</p>\n<p>$$sin36^o = \\frac{\\sqrt{(\\frac{-1+\\sqrt{5}}{2})^2-0.5^2}}{\\frac{-1+\\sqrt{5}}{2}}$$</p>\n<p>$$sin36^o =\\frac{\\sqrt{(\\frac{6-2\\sqrt{5}}{4})-\\frac{1}{4}}}{\\frac{-1+\\sqrt{5}}{2}}$$</p>\n<p>$$sin36^o =\\frac{\\sqrt{\\frac{5-2\\sqrt{5}}{4}}}{\\frac{-1+\\sqrt{5}}{2}}$$</p>\n<p>$$sin36^o =\\frac{\\frac{1}{2}\\sqrt{5-2\\sqrt{5}}}{\\frac{-1+\\sqrt{5}}{2}}$$</p>\n<p>$$sin36^o =\\frac{\\sqrt{5-2\\sqrt{5}}}{-1+\\sqrt{5}}$$</p>\n<p>$$sin36^o =\\frac{\\sqrt{5-2\\sqrt{5}}*\\sqrt{(\\sqrt{5}+1)^2}}{(\\sqrt{5}-1)(\\sqrt{5}+1)}$$</p>\n<p>$$sin36^o =\\frac{\\sqrt{5-2\\sqrt{5}}*\\sqrt{(5+1+2\\sqrt{5})}}{4}$$</p>\n<p>$$sin36^o =\\frac{\\sqrt{(5-2\\sqrt{5})}*\\sqrt{(6+2\\sqrt{5})}}{4}$$</p>\n<p>$$sin36^o =\\frac{\\sqrt{10-2\\sqrt{5}}}{4}$$</p>\n<h5 id=\"最终检验\"><a href=\"#最终检验\" class=\"headerlink\" title=\"最终检验\"></a>最终检验</h5><blockquote>\n<p>sqrt(10-2*sqrt(5))/4</p>\n<p>ans =  0.58779</p>\n<p>sin(36/180*pi)</p>\n<p>ans =  0.58779</p>\n</blockquote>\n<p>计算正确。</p>\n<script src=\"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\"></script>"},{"layout":"post","title":"Dr.Unarchiver - 可视化解压缩软件 [MAC]","date":"2016-11-18T23:22:00.000Z","photos":["https://cdn0.yukapril.com/blog/2016-11-18-drunarchiver.png-wm.black"],"_content":"\n在Windows下，我们可以选择免费的个人广告版WinRAR，或者开源的7-zip。那MAC下呢？\n\n<!-- more -->\n\nMAC自带了解压缩工具，双击就可以完成了，但是对压缩格式支持程度不是很好。我想，各位小伙伴都应该在App Store中下载了排名靠前的解压缩软件吧？\n\n但是下载的各种解压缩软件，都有一个特点，那就是和系统自带的一样，双击就解压缩到当前目录。和WinRAR可以查看内容后再做决定风格完全不同...\n\n来，先上Dr.Unarchiver截图：\n\n![image](https://cdn0.yukapril.com/blog/2016-11-18-drunarchiver.png-wm.black)\n\n怎么样？有点WinRAR的查看感觉了吧。\n\n不过，这个软件有个要注意的特点：比如我要解压缩的`abc.zip`中，结构是目录下`test`有`123.txt`，那么单独拖拽`123.txt`到桌面，也会是`test/123.txt`，和原结构相同，并不会像WinRAR那样，仅仅解压一个文件。\n\n格式支持上，基本上各家软件都差不多，对了，它支持`rar`格式。\n\n这个软件唯一的缺陷，就是只能解压缩，**不能压缩！不能压缩！不能压缩！**\n\n---\n\n##### 软件信息\n\n软件名：Dr.Unarchiver \n\n价格：免费\n\n下载地址：[iTunes](https://itunes.apple.com/cn/app/dr.-unarchiver-rar-zip-archive/id1127253508?l=en&mt=12)","source":"_posts/2016/2016-11-18-share-drunarchiver.md","raw":"---\nlayout: post\ntitle: \"Dr.Unarchiver - 可视化解压缩软件 [MAC]\"\ndate: 2016-11-18 23:22:00 GMT+0000\ncategories: [软件]\ntags:  []\nphotos: [https://cdn0.yukapril.com/blog/2016-11-18-drunarchiver.png-wm.black]\n---\n\n在Windows下，我们可以选择免费的个人广告版WinRAR，或者开源的7-zip。那MAC下呢？\n\n<!-- more -->\n\nMAC自带了解压缩工具，双击就可以完成了，但是对压缩格式支持程度不是很好。我想，各位小伙伴都应该在App Store中下载了排名靠前的解压缩软件吧？\n\n但是下载的各种解压缩软件，都有一个特点，那就是和系统自带的一样，双击就解压缩到当前目录。和WinRAR可以查看内容后再做决定风格完全不同...\n\n来，先上Dr.Unarchiver截图：\n\n![image](https://cdn0.yukapril.com/blog/2016-11-18-drunarchiver.png-wm.black)\n\n怎么样？有点WinRAR的查看感觉了吧。\n\n不过，这个软件有个要注意的特点：比如我要解压缩的`abc.zip`中，结构是目录下`test`有`123.txt`，那么单独拖拽`123.txt`到桌面，也会是`test/123.txt`，和原结构相同，并不会像WinRAR那样，仅仅解压一个文件。\n\n格式支持上，基本上各家软件都差不多，对了，它支持`rar`格式。\n\n这个软件唯一的缺陷，就是只能解压缩，**不能压缩！不能压缩！不能压缩！**\n\n---\n\n##### 软件信息\n\n软件名：Dr.Unarchiver \n\n价格：免费\n\n下载地址：[iTunes](https://itunes.apple.com/cn/app/dr.-unarchiver-rar-zip-archive/id1127253508?l=en&mt=12)","slug":"2016-2016-11-18-share-drunarchiver","published":1,"updated":"2019-07-18T17:19:07.343Z","comments":1,"link":"","_id":"cjy8y72qa000gs21db80aefuz","content":"<p>在Windows下，我们可以选择免费的个人广告版WinRAR，或者开源的7-zip。那MAC下呢？</p>\n<a id=\"more\"></a>\n\n<p>MAC自带了解压缩工具，双击就可以完成了，但是对压缩格式支持程度不是很好。我想，各位小伙伴都应该在App Store中下载了排名靠前的解压缩软件吧？</p>\n<p>但是下载的各种解压缩软件，都有一个特点，那就是和系统自带的一样，双击就解压缩到当前目录。和WinRAR可以查看内容后再做决定风格完全不同…</p>\n<p>来，先上Dr.Unarchiver截图：</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-11-18-drunarchiver.png-wm.black\" alt=\"image\"></p>\n<p>怎么样？有点WinRAR的查看感觉了吧。</p>\n<p>不过，这个软件有个要注意的特点：比如我要解压缩的<code>abc.zip</code>中，结构是目录下<code>test</code>有<code>123.txt</code>，那么单独拖拽<code>123.txt</code>到桌面，也会是<code>test/123.txt</code>，和原结构相同，并不会像WinRAR那样，仅仅解压一个文件。</p>\n<p>格式支持上，基本上各家软件都差不多，对了，它支持<code>rar</code>格式。</p>\n<p>这个软件唯一的缺陷，就是只能解压缩，<strong>不能压缩！不能压缩！不能压缩！</strong></p>\n<hr>\n<h5 id=\"软件信息\"><a href=\"#软件信息\" class=\"headerlink\" title=\"软件信息\"></a>软件信息</h5><p>软件名：Dr.Unarchiver </p>\n<p>价格：免费</p>\n<p>下载地址：<a href=\"https://itunes.apple.com/cn/app/dr.-unarchiver-rar-zip-archive/id1127253508?l=en&mt=12\" target=\"_blank\" rel=\"noopener\">iTunes</a></p>\n","site":{"data":{}},"excerpt":"<p>在Windows下，我们可以选择免费的个人广告版WinRAR，或者开源的7-zip。那MAC下呢？</p>","more":"<p>MAC自带了解压缩工具，双击就可以完成了，但是对压缩格式支持程度不是很好。我想，各位小伙伴都应该在App Store中下载了排名靠前的解压缩软件吧？</p>\n<p>但是下载的各种解压缩软件，都有一个特点，那就是和系统自带的一样，双击就解压缩到当前目录。和WinRAR可以查看内容后再做决定风格完全不同…</p>\n<p>来，先上Dr.Unarchiver截图：</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-11-18-drunarchiver.png-wm.black\" alt=\"image\"></p>\n<p>怎么样？有点WinRAR的查看感觉了吧。</p>\n<p>不过，这个软件有个要注意的特点：比如我要解压缩的<code>abc.zip</code>中，结构是目录下<code>test</code>有<code>123.txt</code>，那么单独拖拽<code>123.txt</code>到桌面，也会是<code>test/123.txt</code>，和原结构相同，并不会像WinRAR那样，仅仅解压一个文件。</p>\n<p>格式支持上，基本上各家软件都差不多，对了，它支持<code>rar</code>格式。</p>\n<p>这个软件唯一的缺陷，就是只能解压缩，<strong>不能压缩！不能压缩！不能压缩！</strong></p>\n<hr>\n<h5 id=\"软件信息\"><a href=\"#软件信息\" class=\"headerlink\" title=\"软件信息\"></a>软件信息</h5><p>软件名：Dr.Unarchiver </p>\n<p>价格：免费</p>\n<p>下载地址：<a href=\"https://itunes.apple.com/cn/app/dr.-unarchiver-rar-zip-archive/id1127253508?l=en&mt=12\" target=\"_blank\" rel=\"noopener\">iTunes</a></p>"},{"layout":"post","title":"codewars - Father and son","date":"2016-10-31T22:14:00.000Z","_content":"\n在 codewars 上面做题，有这样[一道题](https://www.codewars.com/kata/shortest-code-father-and-son)。\n\n<!-- more -->\n\n> Every uppercase letter is Father, The corresponding lowercase letters is the Son.\n>\n> Give you a string s, If the father and son both exist, keep them. If it is a separate existence, delete them. Return the result.\n>\n> For example:\n>\n> * sc(\"Aab\") should return \"Aa\"\n>\n> * sc(\"AabBc\") should return \"AabB\"\n>\n> * sc(\"AaaaAaab\") should return \"AaaaAaa\"(father can have a lot of son)\n>\n> * sc(\"aAAAaAAb\") should return \"aAAAaAA\"(son also can have a lot of father\n\n这道题不难。稍微用几分钟就能写完了。但是这道题有个难度，那就是要求120字符完成代码。\n\n所以，这道题还有一个简单的版本，[见此](http://www.codewars.com/kata/coding-3min-father-and-son/)。\n\n原始版本   (length=187)\n\n```js\nfunction sc(s){\n  return s.split('').map((v)=>{\n    if(v.toLowerCase()==v && s.indexOf(v.toUpperCase())>=0){\n      return v\n    }else if(v.toUpperCase()==v && s.indexOf(v.toLowerCase())>=0){\n      return v\n    }\n  }).join('')\n}\n```\n\n替换了toLowerCase/toUpperCase  (length=186)，这是我所了解的终极写法了..\n\n竟然长度基本没有减少...要命啊，看来重复次数太少了，不太管用。\n\n```js\nfunction sc(s){\n  var l='toLowerCase', u='toUpperCase'\n  return s.split('').map((v)=>{\n    if(v[l]()==v && s.indexOf(v[u]())>=0){\n      return v\n    }else if(v[u]()==v && s.indexOf(v[l]())>=0){\n      return v\n    }\n  }).join('')\n}\n```\n\n删除else if (length=169)，这句话可以合并的。\n\n```js\nfunction sc(s){\n  var l='toLowerCase', u='toUpperCase'\n  return s.split('').map((v)=>{\n    if(v[l]()==v && s.indexOf(v[u]())>=0 || v[u]()==v && s.indexOf(v[l]())>=0){\n      return v\n    }\n  }).join('')\n}\n```\n\n去掉没用的括号 (length=165)\n\n```js\nfunction sc(s){\n  var l='toLowerCase', u='toUpperCase'\n  return s.split('').map(v => {\n    if(v[l]()==v && s.indexOf(v[u]())>=0 || v[u]()==v && s.indexOf(v[l]())>=0)return v\n  }).join('')\n}\n```\n\n这样来试，看来是不行的，必须要优化下逻辑了。\n\n仔细研究下，其实if语句内容是多余的，直接判断当前字符在字符串里面，必须有大写和小写就行了，没必要进行区分(length=143)\n\n```js\nfunction sc(s){\n  var l='toLowerCase', u='toUpperCase'\n  return s.split('').map(v => {\n    if(s.indexOf(v[l]())>=0 &&s.indexOf(v[u]())>=0)return v\n  }).join('')\n}\n```\n\n突然发现，只要函数正确，也可以修改自带的函数结构的。调整为ES6格式。(length=132)\n\n```js\nsc=s=>{\n  var l='toLowerCase', u='toUpperCase'\n  return s.split('').map(v => {\n    if(s.indexOf(v[l]())>=0 &&s.indexOf(v[u]())>=0)return v\n  }).join('')\n}\n```\n\n之后的路，就非常艰辛了。我也参考了简单问题中的部分答案。比如说用到了`filter` `includes`。\n\n这个确实要说，我数组用的不好，刚刚才能用上reduce，虽然听说过filter，但是没有实际应用过。\n\n查过[资料](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)得知，类似于`map`，同样为`return`控制，只不过返回`true` `false`来控制新数组是否包含当前数据而已。\n\n举个非常简单的例子：\n\n```js\nvar filtered = [12, 5, 8, 130, 44].filter((el)=>el >= 10)\n// [12, 130, 44]\n```\n\n改造下，试试看。(length=121)\n\n```js\nsc=s=>{\n  var l='toLowerCase', u='toUpperCase'\n  return s.split('').filter(v => s.indexOf(v[l]())>=0 && s.indexOf(v[u]())>=0).join('')\n}\n```\n\n\n\n这次虽然是121字符，但是实际可以通过了，刷个流氓就能（去掉`var`）。\n\n很明显，这么做不好。那么研究下`includes`。这个方法我都没有听说过。\n\n文档见[这里](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes)。因为实在也是太简单了，直接上例子：\n\n```js\n[1, 2, 3].includes(2); // true\n```\n\n使用`includes`有个好处，那就是省去了判断符号`>=`。我来看看。\n\n```js\nsc=s=>{\n  var l='toLowerCase', u='toUpperCase'\n  return s.split('').filter(v => s.includes(v[l]()) && s.includes(v[u]())).join('')\n}\n```\n\n写的时候我就能感觉到，这次肯定更短了！省去了很多字符...果真，length=117。\n\n老规矩，替换字符法。结果发现，竟然还多了一个字符...哎...代码量太少，没办法这么优化啊。\n\n所以，整理下格式，正确答案就是：\n\n```js\n//length=117\nsc = s => {\n  var l='toLowerCase',\n      u='toUpperCase'\n  return s.split('').filter(\n    v => s.includes(v[l]()) && s.includes(v[u]())\n  ).join('')\n}\n```\n\n如果耍个流氓，那么会更短\n\n```js\n//length=113\nsc = s => {\n  l='toLowerCase',\n  u='toUpperCase'\n  return s.split('').filter(\n    v => s.includes(v[l]()) && s.includes(v[u]())\n  ).join('')\n}\n```\n\n当然，这里也可以去掉定义了。还能省去很多长度。这样可以做到：\n\n```js\n//length=94\nsc = s => s.split('').filter(v => s.includes(v.toLowerCase()) && s.includes(v.toUpperCase())).join('')\n```\n\n这恐怕是最短的结果了。我看了看别的答案，没有什么好的思路了。\n\n看来编译不好使啊！还不如直接来的省事。","source":"_posts/2016/2016-10-31-codewars-father-and-son.md","raw":"---\nlayout: post\ntitle: \"codewars - Father and son\"\ndate: 2016-10-31 22:14:00 GMT+0000\ncategories: [codewars]\ntags:  [codewars]\n---\n\n在 codewars 上面做题，有这样[一道题](https://www.codewars.com/kata/shortest-code-father-and-son)。\n\n<!-- more -->\n\n> Every uppercase letter is Father, The corresponding lowercase letters is the Son.\n>\n> Give you a string s, If the father and son both exist, keep them. If it is a separate existence, delete them. Return the result.\n>\n> For example:\n>\n> * sc(\"Aab\") should return \"Aa\"\n>\n> * sc(\"AabBc\") should return \"AabB\"\n>\n> * sc(\"AaaaAaab\") should return \"AaaaAaa\"(father can have a lot of son)\n>\n> * sc(\"aAAAaAAb\") should return \"aAAAaAA\"(son also can have a lot of father\n\n这道题不难。稍微用几分钟就能写完了。但是这道题有个难度，那就是要求120字符完成代码。\n\n所以，这道题还有一个简单的版本，[见此](http://www.codewars.com/kata/coding-3min-father-and-son/)。\n\n原始版本   (length=187)\n\n```js\nfunction sc(s){\n  return s.split('').map((v)=>{\n    if(v.toLowerCase()==v && s.indexOf(v.toUpperCase())>=0){\n      return v\n    }else if(v.toUpperCase()==v && s.indexOf(v.toLowerCase())>=0){\n      return v\n    }\n  }).join('')\n}\n```\n\n替换了toLowerCase/toUpperCase  (length=186)，这是我所了解的终极写法了..\n\n竟然长度基本没有减少...要命啊，看来重复次数太少了，不太管用。\n\n```js\nfunction sc(s){\n  var l='toLowerCase', u='toUpperCase'\n  return s.split('').map((v)=>{\n    if(v[l]()==v && s.indexOf(v[u]())>=0){\n      return v\n    }else if(v[u]()==v && s.indexOf(v[l]())>=0){\n      return v\n    }\n  }).join('')\n}\n```\n\n删除else if (length=169)，这句话可以合并的。\n\n```js\nfunction sc(s){\n  var l='toLowerCase', u='toUpperCase'\n  return s.split('').map((v)=>{\n    if(v[l]()==v && s.indexOf(v[u]())>=0 || v[u]()==v && s.indexOf(v[l]())>=0){\n      return v\n    }\n  }).join('')\n}\n```\n\n去掉没用的括号 (length=165)\n\n```js\nfunction sc(s){\n  var l='toLowerCase', u='toUpperCase'\n  return s.split('').map(v => {\n    if(v[l]()==v && s.indexOf(v[u]())>=0 || v[u]()==v && s.indexOf(v[l]())>=0)return v\n  }).join('')\n}\n```\n\n这样来试，看来是不行的，必须要优化下逻辑了。\n\n仔细研究下，其实if语句内容是多余的，直接判断当前字符在字符串里面，必须有大写和小写就行了，没必要进行区分(length=143)\n\n```js\nfunction sc(s){\n  var l='toLowerCase', u='toUpperCase'\n  return s.split('').map(v => {\n    if(s.indexOf(v[l]())>=0 &&s.indexOf(v[u]())>=0)return v\n  }).join('')\n}\n```\n\n突然发现，只要函数正确，也可以修改自带的函数结构的。调整为ES6格式。(length=132)\n\n```js\nsc=s=>{\n  var l='toLowerCase', u='toUpperCase'\n  return s.split('').map(v => {\n    if(s.indexOf(v[l]())>=0 &&s.indexOf(v[u]())>=0)return v\n  }).join('')\n}\n```\n\n之后的路，就非常艰辛了。我也参考了简单问题中的部分答案。比如说用到了`filter` `includes`。\n\n这个确实要说，我数组用的不好，刚刚才能用上reduce，虽然听说过filter，但是没有实际应用过。\n\n查过[资料](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)得知，类似于`map`，同样为`return`控制，只不过返回`true` `false`来控制新数组是否包含当前数据而已。\n\n举个非常简单的例子：\n\n```js\nvar filtered = [12, 5, 8, 130, 44].filter((el)=>el >= 10)\n// [12, 130, 44]\n```\n\n改造下，试试看。(length=121)\n\n```js\nsc=s=>{\n  var l='toLowerCase', u='toUpperCase'\n  return s.split('').filter(v => s.indexOf(v[l]())>=0 && s.indexOf(v[u]())>=0).join('')\n}\n```\n\n\n\n这次虽然是121字符，但是实际可以通过了，刷个流氓就能（去掉`var`）。\n\n很明显，这么做不好。那么研究下`includes`。这个方法我都没有听说过。\n\n文档见[这里](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes)。因为实在也是太简单了，直接上例子：\n\n```js\n[1, 2, 3].includes(2); // true\n```\n\n使用`includes`有个好处，那就是省去了判断符号`>=`。我来看看。\n\n```js\nsc=s=>{\n  var l='toLowerCase', u='toUpperCase'\n  return s.split('').filter(v => s.includes(v[l]()) && s.includes(v[u]())).join('')\n}\n```\n\n写的时候我就能感觉到，这次肯定更短了！省去了很多字符...果真，length=117。\n\n老规矩，替换字符法。结果发现，竟然还多了一个字符...哎...代码量太少，没办法这么优化啊。\n\n所以，整理下格式，正确答案就是：\n\n```js\n//length=117\nsc = s => {\n  var l='toLowerCase',\n      u='toUpperCase'\n  return s.split('').filter(\n    v => s.includes(v[l]()) && s.includes(v[u]())\n  ).join('')\n}\n```\n\n如果耍个流氓，那么会更短\n\n```js\n//length=113\nsc = s => {\n  l='toLowerCase',\n  u='toUpperCase'\n  return s.split('').filter(\n    v => s.includes(v[l]()) && s.includes(v[u]())\n  ).join('')\n}\n```\n\n当然，这里也可以去掉定义了。还能省去很多长度。这样可以做到：\n\n```js\n//length=94\nsc = s => s.split('').filter(v => s.includes(v.toLowerCase()) && s.includes(v.toUpperCase())).join('')\n```\n\n这恐怕是最短的结果了。我看了看别的答案，没有什么好的思路了。\n\n看来编译不好使啊！还不如直接来的省事。","slug":"2016-2016-10-31-codewars-father-and-son","published":1,"updated":"2019-07-18T17:19:07.240Z","comments":1,"photos":[],"link":"","_id":"cjy8y72qc000is21d8l86joez","content":"<p>在 codewars 上面做题，有这样<a href=\"https://www.codewars.com/kata/shortest-code-father-and-son\" target=\"_blank\" rel=\"noopener\">一道题</a>。</p>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>Every uppercase letter is Father, The corresponding lowercase letters is the Son.</p>\n<p>Give you a string s, If the father and son both exist, keep them. If it is a separate existence, delete them. Return the result.</p>\n<p>For example:</p>\n<ul>\n<li><p>sc(“Aab”) should return “Aa”</p>\n</li>\n<li><p>sc(“AabBc”) should return “AabB”</p>\n</li>\n<li><p>sc(“AaaaAaab”) should return “AaaaAaa”(father can have a lot of son)</p>\n</li>\n<li><p>sc(“aAAAaAAb”) should return “aAAAaAA”(son also can have a lot of father</p>\n</li>\n</ul>\n</blockquote>\n<p>这道题不难。稍微用几分钟就能写完了。但是这道题有个难度，那就是要求120字符完成代码。</p>\n<p>所以，这道题还有一个简单的版本，<a href=\"http://www.codewars.com/kata/coding-3min-father-and-son/\" target=\"_blank\" rel=\"noopener\">见此</a>。</p>\n<p>原始版本   (length=187)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sc</span>(<span class=\"params\">s</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).map(<span class=\"function\">(<span class=\"params\">v</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v.toLowerCase()==v &amp;&amp; s.indexOf(v.toUpperCase())&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> v</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(v.toUpperCase()==v &amp;&amp; s.indexOf(v.toLowerCase())&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> v</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>替换了toLowerCase/toUpperCase  (length=186)，这是我所了解的终极写法了..</p>\n<p>竟然长度基本没有减少…要命啊，看来重复次数太少了，不太管用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sc</span>(<span class=\"params\">s</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>, u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).map(<span class=\"function\">(<span class=\"params\">v</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v[l]()==v &amp;&amp; s.indexOf(v[u]())&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> v</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(v[u]()==v &amp;&amp; s.indexOf(v[l]())&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> v</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>删除else if (length=169)，这句话可以合并的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sc</span>(<span class=\"params\">s</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>, u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).map(<span class=\"function\">(<span class=\"params\">v</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v[l]()==v &amp;&amp; s.indexOf(v[u]())&gt;=<span class=\"number\">0</span> || v[u]()==v &amp;&amp; s.indexOf(v[l]())&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> v</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>去掉没用的括号 (length=165)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sc</span>(<span class=\"params\">s</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>, u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v[l]()==v &amp;&amp; s.indexOf(v[u]())&gt;=<span class=\"number\">0</span> || v[u]()==v &amp;&amp; s.indexOf(v[l]())&gt;=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> v</span><br><span class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样来试，看来是不行的，必须要优化下逻辑了。</p>\n<p>仔细研究下，其实if语句内容是多余的，直接判断当前字符在字符串里面，必须有大写和小写就行了，没必要进行区分(length=143)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sc</span>(<span class=\"params\">s</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>, u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s.indexOf(v[l]())&gt;=<span class=\"number\">0</span> &amp;&amp;s.indexOf(v[u]())&gt;=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> v</span><br><span class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>突然发现，只要函数正确，也可以修改自带的函数结构的。调整为ES6格式。(length=132)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc=<span class=\"function\"><span class=\"params\">s</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>, u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s.indexOf(v[l]())&gt;=<span class=\"number\">0</span> &amp;&amp;s.indexOf(v[u]())&gt;=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> v</span><br><span class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后的路，就非常艰辛了。我也参考了简单问题中的部分答案。比如说用到了<code>filter</code> <code>includes</code>。</p>\n<p>这个确实要说，我数组用的不好，刚刚才能用上reduce，虽然听说过filter，但是没有实际应用过。</p>\n<p>查过<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" target=\"_blank\" rel=\"noopener\">资料</a>得知，类似于<code>map</code>，同样为<code>return</code>控制，只不过返回<code>true</code> <code>false</code>来控制新数组是否包含当前数据而已。</p>\n<p>举个非常简单的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> filtered = [<span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">130</span>, <span class=\"number\">44</span>].filter(<span class=\"function\">(<span class=\"params\">el</span>)=&gt;</span>el &gt;= <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\">// [12, 130, 44]</span></span><br></pre></td></tr></table></figure>\n\n<p>改造下，试试看。(length=121)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc=<span class=\"function\"><span class=\"params\">s</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>, u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> s.indexOf(v[l]())&gt;=<span class=\"number\">0</span> &amp;&amp; s.indexOf(v[u]())&gt;=<span class=\"number\">0</span>).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这次虽然是121字符，但是实际可以通过了，刷个流氓就能（去掉<code>var</code>）。</p>\n<p>很明显，这么做不好。那么研究下<code>includes</code>。这个方法我都没有听说过。</p>\n<p>文档见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\" target=\"_blank\" rel=\"noopener\">这里</a>。因为实在也是太简单了，直接上例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">2</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>使用<code>includes</code>有个好处，那就是省去了判断符号<code>&gt;=</code>。我来看看。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc=<span class=\"function\"><span class=\"params\">s</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>, u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> s.includes(v[l]()) &amp;&amp; s.includes(v[u]())).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>写的时候我就能感觉到，这次肯定更短了！省去了很多字符…果真，length=117。</p>\n<p>老规矩，替换字符法。结果发现，竟然还多了一个字符…哎…代码量太少，没办法这么优化啊。</p>\n<p>所以，整理下格式，正确答案就是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//length=117</span></span><br><span class=\"line\">sc = <span class=\"function\"><span class=\"params\">s</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>,</span><br><span class=\"line\">      u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).filter(</span><br><span class=\"line\">    v =&gt; s.includes(v[l]()) &amp;&amp; s.includes(v[u]())</span><br><span class=\"line\">  ).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果耍个流氓，那么会更短</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//length=113</span></span><br><span class=\"line\">sc = <span class=\"function\"><span class=\"params\">s</span> =&gt;</span> &#123;</span><br><span class=\"line\">  l=<span class=\"string\">'toLowerCase'</span>,</span><br><span class=\"line\">  u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).filter(</span><br><span class=\"line\">    v =&gt; s.includes(v[l]()) &amp;&amp; s.includes(v[u]())</span><br><span class=\"line\">  ).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然，这里也可以去掉定义了。还能省去很多长度。这样可以做到：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//length=94</span></span><br><span class=\"line\">sc = <span class=\"function\"><span class=\"params\">s</span> =&gt;</span> s.split(<span class=\"string\">''</span>).filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> s.includes(v.toLowerCase()) &amp;&amp; s.includes(v.toUpperCase())).join(<span class=\"string\">''</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这恐怕是最短的结果了。我看了看别的答案，没有什么好的思路了。</p>\n<p>看来编译不好使啊！还不如直接来的省事。</p>\n","site":{"data":{}},"excerpt":"<p>在 codewars 上面做题，有这样<a href=\"https://www.codewars.com/kata/shortest-code-father-and-son\" target=\"_blank\" rel=\"noopener\">一道题</a>。</p>","more":"<blockquote>\n<p>Every uppercase letter is Father, The corresponding lowercase letters is the Son.</p>\n<p>Give you a string s, If the father and son both exist, keep them. If it is a separate existence, delete them. Return the result.</p>\n<p>For example:</p>\n<ul>\n<li><p>sc(“Aab”) should return “Aa”</p>\n</li>\n<li><p>sc(“AabBc”) should return “AabB”</p>\n</li>\n<li><p>sc(“AaaaAaab”) should return “AaaaAaa”(father can have a lot of son)</p>\n</li>\n<li><p>sc(“aAAAaAAb”) should return “aAAAaAA”(son also can have a lot of father</p>\n</li>\n</ul>\n</blockquote>\n<p>这道题不难。稍微用几分钟就能写完了。但是这道题有个难度，那就是要求120字符完成代码。</p>\n<p>所以，这道题还有一个简单的版本，<a href=\"http://www.codewars.com/kata/coding-3min-father-and-son/\" target=\"_blank\" rel=\"noopener\">见此</a>。</p>\n<p>原始版本   (length=187)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sc</span>(<span class=\"params\">s</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).map(<span class=\"function\">(<span class=\"params\">v</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v.toLowerCase()==v &amp;&amp; s.indexOf(v.toUpperCase())&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> v</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(v.toUpperCase()==v &amp;&amp; s.indexOf(v.toLowerCase())&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> v</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>替换了toLowerCase/toUpperCase  (length=186)，这是我所了解的终极写法了..</p>\n<p>竟然长度基本没有减少…要命啊，看来重复次数太少了，不太管用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sc</span>(<span class=\"params\">s</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>, u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).map(<span class=\"function\">(<span class=\"params\">v</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v[l]()==v &amp;&amp; s.indexOf(v[u]())&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> v</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(v[u]()==v &amp;&amp; s.indexOf(v[l]())&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> v</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>删除else if (length=169)，这句话可以合并的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sc</span>(<span class=\"params\">s</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>, u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).map(<span class=\"function\">(<span class=\"params\">v</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v[l]()==v &amp;&amp; s.indexOf(v[u]())&gt;=<span class=\"number\">0</span> || v[u]()==v &amp;&amp; s.indexOf(v[l]())&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> v</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>去掉没用的括号 (length=165)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sc</span>(<span class=\"params\">s</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>, u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v[l]()==v &amp;&amp; s.indexOf(v[u]())&gt;=<span class=\"number\">0</span> || v[u]()==v &amp;&amp; s.indexOf(v[l]())&gt;=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> v</span><br><span class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样来试，看来是不行的，必须要优化下逻辑了。</p>\n<p>仔细研究下，其实if语句内容是多余的，直接判断当前字符在字符串里面，必须有大写和小写就行了，没必要进行区分(length=143)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sc</span>(<span class=\"params\">s</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>, u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s.indexOf(v[l]())&gt;=<span class=\"number\">0</span> &amp;&amp;s.indexOf(v[u]())&gt;=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> v</span><br><span class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>突然发现，只要函数正确，也可以修改自带的函数结构的。调整为ES6格式。(length=132)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc=<span class=\"function\"><span class=\"params\">s</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>, u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s.indexOf(v[l]())&gt;=<span class=\"number\">0</span> &amp;&amp;s.indexOf(v[u]())&gt;=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> v</span><br><span class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后的路，就非常艰辛了。我也参考了简单问题中的部分答案。比如说用到了<code>filter</code> <code>includes</code>。</p>\n<p>这个确实要说，我数组用的不好，刚刚才能用上reduce，虽然听说过filter，但是没有实际应用过。</p>\n<p>查过<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" target=\"_blank\" rel=\"noopener\">资料</a>得知，类似于<code>map</code>，同样为<code>return</code>控制，只不过返回<code>true</code> <code>false</code>来控制新数组是否包含当前数据而已。</p>\n<p>举个非常简单的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> filtered = [<span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">130</span>, <span class=\"number\">44</span>].filter(<span class=\"function\">(<span class=\"params\">el</span>)=&gt;</span>el &gt;= <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\">// [12, 130, 44]</span></span><br></pre></td></tr></table></figure>\n\n<p>改造下，试试看。(length=121)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc=<span class=\"function\"><span class=\"params\">s</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>, u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> s.indexOf(v[l]())&gt;=<span class=\"number\">0</span> &amp;&amp; s.indexOf(v[u]())&gt;=<span class=\"number\">0</span>).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这次虽然是121字符，但是实际可以通过了，刷个流氓就能（去掉<code>var</code>）。</p>\n<p>很明显，这么做不好。那么研究下<code>includes</code>。这个方法我都没有听说过。</p>\n<p>文档见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\" target=\"_blank\" rel=\"noopener\">这里</a>。因为实在也是太简单了，直接上例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">2</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>使用<code>includes</code>有个好处，那就是省去了判断符号<code>&gt;=</code>。我来看看。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc=<span class=\"function\"><span class=\"params\">s</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>, u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> s.includes(v[l]()) &amp;&amp; s.includes(v[u]())).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>写的时候我就能感觉到，这次肯定更短了！省去了很多字符…果真，length=117。</p>\n<p>老规矩，替换字符法。结果发现，竟然还多了一个字符…哎…代码量太少，没办法这么优化啊。</p>\n<p>所以，整理下格式，正确答案就是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//length=117</span></span><br><span class=\"line\">sc = <span class=\"function\"><span class=\"params\">s</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>,</span><br><span class=\"line\">      u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).filter(</span><br><span class=\"line\">    v =&gt; s.includes(v[l]()) &amp;&amp; s.includes(v[u]())</span><br><span class=\"line\">  ).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果耍个流氓，那么会更短</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//length=113</span></span><br><span class=\"line\">sc = <span class=\"function\"><span class=\"params\">s</span> =&gt;</span> &#123;</span><br><span class=\"line\">  l=<span class=\"string\">'toLowerCase'</span>,</span><br><span class=\"line\">  u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).filter(</span><br><span class=\"line\">    v =&gt; s.includes(v[l]()) &amp;&amp; s.includes(v[u]())</span><br><span class=\"line\">  ).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然，这里也可以去掉定义了。还能省去很多长度。这样可以做到：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//length=94</span></span><br><span class=\"line\">sc = <span class=\"function\"><span class=\"params\">s</span> =&gt;</span> s.split(<span class=\"string\">''</span>).filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> s.includes(v.toLowerCase()) &amp;&amp; s.includes(v.toUpperCase())).join(<span class=\"string\">''</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这恐怕是最短的结果了。我看了看别的答案，没有什么好的思路了。</p>\n<p>看来编译不好使啊！还不如直接来的省事。</p>"},{"layout":"post","title":"simack v1.0制作完毕","date":"2016-11-27T22:20:00.000Z","_content":"\n## 1.0终于制作出来了\n\n<!-- more -->\n\n这个版本，真的等待了很久。在github上，距离上次更新已经有了将近一个月。\n\n其中一方面是，确实有些其他的任务，导致了simack暂缓了。还有一些个人的原因，比如希望能有更好的设计，在下文上，也会提到。\n\n那么，在这一个月，都更新了什么呢？\n\n## 风格样式\n\n这是最大的变化。调整效果风格，优化精简代码...\n\n从之前的左右排版，直接调整为上中下排版。好处是，页面宽了，更加简洁了，同时在兼容移动端也更加清晰明朗了。\n\n还有一些其他变化：\n\n* 所有的分类/模块跳转链接，采用下划线效果\n\n* 所有的文章标题/文章内链接，采用变色效果。变成红色，更容易理解\n\n* 取消了没有太大意义的“查看全文”按钮\n\n* 不再使用任何banner图片，替换为一段着色文本\n\n* 每篇文章，支持列表中展示图片\n\n* 文章代码部分，调整为浅色效果（github风格）\n\n## 代码变化\n\n* 所有代码重构，`_includes`内文件命名同时大换血，文件引用更加清晰\n\n* 支持`rss` `sitemap`功能，提升SEO（搜索引擎优化）\n\n## 比较庆幸的是\n\n* 配置文件几乎没变，仅仅是：\n\n\t* 取消兴趣爱好描述/头像\n\n\t* 访问统计为了能支持不同平台，最终决定将取消配置，直接将平台统计代码写入文件\n\n* 已经写好的页面（文章、关于页面等），不需要做任何修改。但是自己写的独立页面，且仅仅是文字性质，建议调整为新的md格式，效果更佳\n\n* 本地调试依然不需要安装除分页之外的任何插件\n\n## 未来的展望/bug\n\n* 偶然一次，移动端，分类按钮列表异常，无法选择分类，~~目前无法复现，~~找到了，出现在微信内，具体原因还没有去研究...（懒\n\n* 搜索功能：一直就在想，查了很多方案，都觉得不太优美，而且搜索我认为还没有那么迫切，就推迟了，具体实现，见文章末尾\n\n* 移动端效果，还不是特别理想，还可以优化\n\n* 整体风格色彩，还需要进一步磨合调整\n\n## 搜索功能\n\n这个想好好说一说：\n\njekyll 或者Hexo，可以说都没办法优雅的解决搜索问题，或者没办法简单的解决搜索问题。\n\n目前比较主流的几种做法：\n\n* 方案一：AJAX加载所有文章\n\n\t* 做一个页面，可以是JSON格式，包含所有文章标题，分类，tags，正文。搜索时候，加载此页面，用JS实现搜索。\n\n\t* 优点：没有依赖，可以方便解决，难度相对低。体验也可以做的不错，比如输入内容，实时显示。\n\n\t* 缺点：效率低，文章多的话，AJAX加载内容非常多，会慢，而且JS处理也会变慢。只能处理精确匹配，很难做模糊搜索。\n\n* 方案二：AJAX加载精简文章\n\n\t* 自己考虑出的方案，大致和方案一一致，就是仅仅包含问斩标题，分类，tags，文章摘要。取消正文。这样会相对快一点，但不能支持正文搜索了。\n\n* 方案三：借助搜索引擎\n\n\t* 简单来说，就是想办法每篇文章都让搜索引擎收录（可以主动推送文章等），当搜索的时候，调用其搜索引擎，最终搜索内容变为：`keyword site:yukapril.com`这种样子。\n\n\t* 优点：SEO效果好，搜索质量高\n\n\t* 缺点：很难让搜索引擎每篇文章都收录，或者收录延迟很难把控。同时最终搜索`keyword site:yukapril.com`结果鬼知道是啥...比如baidu有类似的页面控件，但是我没办法调试成功...我总想着给它的代码精简精简。\n\n* 方案四：第三方平台托管搜索\n\n\t* 和方案三一致，只不过数据不是提交给搜索引擎了，而是第三方服务。一样是每次写完博客提交，每次用的时候进行AJAX查询即可。\n\n\t* 优点：质量很高，非常好\n\n\t* 缺点：听过几个平台，需要接入API，貌似有免费的，但是要求在搜索框上面加入他们的LOGO等，也就是说还是希望你能付费使用。API接入成本会相对复杂一些，开发成本比起前三个都要多不少。主要还是开发成本，谁想用就要注册一个第三方平台，否则没办法使用。\n\n\n\n\n\n\n\n\n\n","source":"_posts/2016/2016-11-27-simack-v10.md","raw":"---\nlayout: post\ntitle: \"simack v1.0制作完毕\"\ndate: 2016-11-27 22:20:00 GMT+0000\ncategories: [theme]\ntags:  [simack]\n---\n\n## 1.0终于制作出来了\n\n<!-- more -->\n\n这个版本，真的等待了很久。在github上，距离上次更新已经有了将近一个月。\n\n其中一方面是，确实有些其他的任务，导致了simack暂缓了。还有一些个人的原因，比如希望能有更好的设计，在下文上，也会提到。\n\n那么，在这一个月，都更新了什么呢？\n\n## 风格样式\n\n这是最大的变化。调整效果风格，优化精简代码...\n\n从之前的左右排版，直接调整为上中下排版。好处是，页面宽了，更加简洁了，同时在兼容移动端也更加清晰明朗了。\n\n还有一些其他变化：\n\n* 所有的分类/模块跳转链接，采用下划线效果\n\n* 所有的文章标题/文章内链接，采用变色效果。变成红色，更容易理解\n\n* 取消了没有太大意义的“查看全文”按钮\n\n* 不再使用任何banner图片，替换为一段着色文本\n\n* 每篇文章，支持列表中展示图片\n\n* 文章代码部分，调整为浅色效果（github风格）\n\n## 代码变化\n\n* 所有代码重构，`_includes`内文件命名同时大换血，文件引用更加清晰\n\n* 支持`rss` `sitemap`功能，提升SEO（搜索引擎优化）\n\n## 比较庆幸的是\n\n* 配置文件几乎没变，仅仅是：\n\n\t* 取消兴趣爱好描述/头像\n\n\t* 访问统计为了能支持不同平台，最终决定将取消配置，直接将平台统计代码写入文件\n\n* 已经写好的页面（文章、关于页面等），不需要做任何修改。但是自己写的独立页面，且仅仅是文字性质，建议调整为新的md格式，效果更佳\n\n* 本地调试依然不需要安装除分页之外的任何插件\n\n## 未来的展望/bug\n\n* 偶然一次，移动端，分类按钮列表异常，无法选择分类，~~目前无法复现，~~找到了，出现在微信内，具体原因还没有去研究...（懒\n\n* 搜索功能：一直就在想，查了很多方案，都觉得不太优美，而且搜索我认为还没有那么迫切，就推迟了，具体实现，见文章末尾\n\n* 移动端效果，还不是特别理想，还可以优化\n\n* 整体风格色彩，还需要进一步磨合调整\n\n## 搜索功能\n\n这个想好好说一说：\n\njekyll 或者Hexo，可以说都没办法优雅的解决搜索问题，或者没办法简单的解决搜索问题。\n\n目前比较主流的几种做法：\n\n* 方案一：AJAX加载所有文章\n\n\t* 做一个页面，可以是JSON格式，包含所有文章标题，分类，tags，正文。搜索时候，加载此页面，用JS实现搜索。\n\n\t* 优点：没有依赖，可以方便解决，难度相对低。体验也可以做的不错，比如输入内容，实时显示。\n\n\t* 缺点：效率低，文章多的话，AJAX加载内容非常多，会慢，而且JS处理也会变慢。只能处理精确匹配，很难做模糊搜索。\n\n* 方案二：AJAX加载精简文章\n\n\t* 自己考虑出的方案，大致和方案一一致，就是仅仅包含问斩标题，分类，tags，文章摘要。取消正文。这样会相对快一点，但不能支持正文搜索了。\n\n* 方案三：借助搜索引擎\n\n\t* 简单来说，就是想办法每篇文章都让搜索引擎收录（可以主动推送文章等），当搜索的时候，调用其搜索引擎，最终搜索内容变为：`keyword site:yukapril.com`这种样子。\n\n\t* 优点：SEO效果好，搜索质量高\n\n\t* 缺点：很难让搜索引擎每篇文章都收录，或者收录延迟很难把控。同时最终搜索`keyword site:yukapril.com`结果鬼知道是啥...比如baidu有类似的页面控件，但是我没办法调试成功...我总想着给它的代码精简精简。\n\n* 方案四：第三方平台托管搜索\n\n\t* 和方案三一致，只不过数据不是提交给搜索引擎了，而是第三方服务。一样是每次写完博客提交，每次用的时候进行AJAX查询即可。\n\n\t* 优点：质量很高，非常好\n\n\t* 缺点：听过几个平台，需要接入API，貌似有免费的，但是要求在搜索框上面加入他们的LOGO等，也就是说还是希望你能付费使用。API接入成本会相对复杂一些，开发成本比起前三个都要多不少。主要还是开发成本，谁想用就要注册一个第三方平台，否则没办法使用。\n\n\n\n\n\n\n\n\n\n","slug":"2016-2016-11-27-simack-v10","published":1,"updated":"2019-07-18T17:19:07.065Z","comments":1,"photos":[],"link":"","_id":"cjy8y72qf000ms21d9vatvs7s","content":"<h2 id=\"1-0终于制作出来了\"><a href=\"#1-0终于制作出来了\" class=\"headerlink\" title=\"1.0终于制作出来了\"></a>1.0终于制作出来了</h2><a id=\"more\"></a>\n\n<p>这个版本，真的等待了很久。在github上，距离上次更新已经有了将近一个月。</p>\n<p>其中一方面是，确实有些其他的任务，导致了simack暂缓了。还有一些个人的原因，比如希望能有更好的设计，在下文上，也会提到。</p>\n<p>那么，在这一个月，都更新了什么呢？</p>\n<h2 id=\"风格样式\"><a href=\"#风格样式\" class=\"headerlink\" title=\"风格样式\"></a>风格样式</h2><p>这是最大的变化。调整效果风格，优化精简代码…</p>\n<p>从之前的左右排版，直接调整为上中下排版。好处是，页面宽了，更加简洁了，同时在兼容移动端也更加清晰明朗了。</p>\n<p>还有一些其他变化：</p>\n<ul>\n<li><p>所有的分类/模块跳转链接，采用下划线效果</p>\n</li>\n<li><p>所有的文章标题/文章内链接，采用变色效果。变成红色，更容易理解</p>\n</li>\n<li><p>取消了没有太大意义的“查看全文”按钮</p>\n</li>\n<li><p>不再使用任何banner图片，替换为一段着色文本</p>\n</li>\n<li><p>每篇文章，支持列表中展示图片</p>\n</li>\n<li><p>文章代码部分，调整为浅色效果（github风格）</p>\n</li>\n</ul>\n<h2 id=\"代码变化\"><a href=\"#代码变化\" class=\"headerlink\" title=\"代码变化\"></a>代码变化</h2><ul>\n<li><p>所有代码重构，<code>_includes</code>内文件命名同时大换血，文件引用更加清晰</p>\n</li>\n<li><p>支持<code>rss</code> <code>sitemap</code>功能，提升SEO（搜索引擎优化）</p>\n</li>\n</ul>\n<h2 id=\"比较庆幸的是\"><a href=\"#比较庆幸的是\" class=\"headerlink\" title=\"比较庆幸的是\"></a>比较庆幸的是</h2><ul>\n<li><p>配置文件几乎没变，仅仅是：</p>\n<ul>\n<li><p>取消兴趣爱好描述/头像</p>\n</li>\n<li><p>访问统计为了能支持不同平台，最终决定将取消配置，直接将平台统计代码写入文件</p>\n</li>\n</ul>\n</li>\n<li><p>已经写好的页面（文章、关于页面等），不需要做任何修改。但是自己写的独立页面，且仅仅是文字性质，建议调整为新的md格式，效果更佳</p>\n</li>\n<li><p>本地调试依然不需要安装除分页之外的任何插件</p>\n</li>\n</ul>\n<h2 id=\"未来的展望-bug\"><a href=\"#未来的展望-bug\" class=\"headerlink\" title=\"未来的展望/bug\"></a>未来的展望/bug</h2><ul>\n<li><p>偶然一次，移动端，分类按钮列表异常，无法选择分类，<del>目前无法复现，</del>找到了，出现在微信内，具体原因还没有去研究…（懒</p>\n</li>\n<li><p>搜索功能：一直就在想，查了很多方案，都觉得不太优美，而且搜索我认为还没有那么迫切，就推迟了，具体实现，见文章末尾</p>\n</li>\n<li><p>移动端效果，还不是特别理想，还可以优化</p>\n</li>\n<li><p>整体风格色彩，还需要进一步磨合调整</p>\n</li>\n</ul>\n<h2 id=\"搜索功能\"><a href=\"#搜索功能\" class=\"headerlink\" title=\"搜索功能\"></a>搜索功能</h2><p>这个想好好说一说：</p>\n<p>jekyll 或者Hexo，可以说都没办法优雅的解决搜索问题，或者没办法简单的解决搜索问题。</p>\n<p>目前比较主流的几种做法：</p>\n<ul>\n<li><p>方案一：AJAX加载所有文章</p>\n<ul>\n<li><p>做一个页面，可以是JSON格式，包含所有文章标题，分类，tags，正文。搜索时候，加载此页面，用JS实现搜索。</p>\n</li>\n<li><p>优点：没有依赖，可以方便解决，难度相对低。体验也可以做的不错，比如输入内容，实时显示。</p>\n</li>\n<li><p>缺点：效率低，文章多的话，AJAX加载内容非常多，会慢，而且JS处理也会变慢。只能处理精确匹配，很难做模糊搜索。</p>\n</li>\n</ul>\n</li>\n<li><p>方案二：AJAX加载精简文章</p>\n<ul>\n<li>自己考虑出的方案，大致和方案一一致，就是仅仅包含问斩标题，分类，tags，文章摘要。取消正文。这样会相对快一点，但不能支持正文搜索了。</li>\n</ul>\n</li>\n<li><p>方案三：借助搜索引擎</p>\n<ul>\n<li><p>简单来说，就是想办法每篇文章都让搜索引擎收录（可以主动推送文章等），当搜索的时候，调用其搜索引擎，最终搜索内容变为：<code>keyword site:yukapril.com</code>这种样子。</p>\n</li>\n<li><p>优点：SEO效果好，搜索质量高</p>\n</li>\n<li><p>缺点：很难让搜索引擎每篇文章都收录，或者收录延迟很难把控。同时最终搜索<code>keyword site:yukapril.com</code>结果鬼知道是啥…比如baidu有类似的页面控件，但是我没办法调试成功…我总想着给它的代码精简精简。</p>\n</li>\n</ul>\n</li>\n<li><p>方案四：第三方平台托管搜索</p>\n<ul>\n<li><p>和方案三一致，只不过数据不是提交给搜索引擎了，而是第三方服务。一样是每次写完博客提交，每次用的时候进行AJAX查询即可。</p>\n</li>\n<li><p>优点：质量很高，非常好</p>\n</li>\n<li><p>缺点：听过几个平台，需要接入API，貌似有免费的，但是要求在搜索框上面加入他们的LOGO等，也就是说还是希望你能付费使用。API接入成本会相对复杂一些，开发成本比起前三个都要多不少。主要还是开发成本，谁想用就要注册一个第三方平台，否则没办法使用。</p>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"1-0终于制作出来了\"><a href=\"#1-0终于制作出来了\" class=\"headerlink\" title=\"1.0终于制作出来了\"></a>1.0终于制作出来了</h2>","more":"<p>这个版本，真的等待了很久。在github上，距离上次更新已经有了将近一个月。</p>\n<p>其中一方面是，确实有些其他的任务，导致了simack暂缓了。还有一些个人的原因，比如希望能有更好的设计，在下文上，也会提到。</p>\n<p>那么，在这一个月，都更新了什么呢？</p>\n<h2 id=\"风格样式\"><a href=\"#风格样式\" class=\"headerlink\" title=\"风格样式\"></a>风格样式</h2><p>这是最大的变化。调整效果风格，优化精简代码…</p>\n<p>从之前的左右排版，直接调整为上中下排版。好处是，页面宽了，更加简洁了，同时在兼容移动端也更加清晰明朗了。</p>\n<p>还有一些其他变化：</p>\n<ul>\n<li><p>所有的分类/模块跳转链接，采用下划线效果</p>\n</li>\n<li><p>所有的文章标题/文章内链接，采用变色效果。变成红色，更容易理解</p>\n</li>\n<li><p>取消了没有太大意义的“查看全文”按钮</p>\n</li>\n<li><p>不再使用任何banner图片，替换为一段着色文本</p>\n</li>\n<li><p>每篇文章，支持列表中展示图片</p>\n</li>\n<li><p>文章代码部分，调整为浅色效果（github风格）</p>\n</li>\n</ul>\n<h2 id=\"代码变化\"><a href=\"#代码变化\" class=\"headerlink\" title=\"代码变化\"></a>代码变化</h2><ul>\n<li><p>所有代码重构，<code>_includes</code>内文件命名同时大换血，文件引用更加清晰</p>\n</li>\n<li><p>支持<code>rss</code> <code>sitemap</code>功能，提升SEO（搜索引擎优化）</p>\n</li>\n</ul>\n<h2 id=\"比较庆幸的是\"><a href=\"#比较庆幸的是\" class=\"headerlink\" title=\"比较庆幸的是\"></a>比较庆幸的是</h2><ul>\n<li><p>配置文件几乎没变，仅仅是：</p>\n<ul>\n<li><p>取消兴趣爱好描述/头像</p>\n</li>\n<li><p>访问统计为了能支持不同平台，最终决定将取消配置，直接将平台统计代码写入文件</p>\n</li>\n</ul>\n</li>\n<li><p>已经写好的页面（文章、关于页面等），不需要做任何修改。但是自己写的独立页面，且仅仅是文字性质，建议调整为新的md格式，效果更佳</p>\n</li>\n<li><p>本地调试依然不需要安装除分页之外的任何插件</p>\n</li>\n</ul>\n<h2 id=\"未来的展望-bug\"><a href=\"#未来的展望-bug\" class=\"headerlink\" title=\"未来的展望/bug\"></a>未来的展望/bug</h2><ul>\n<li><p>偶然一次，移动端，分类按钮列表异常，无法选择分类，<del>目前无法复现，</del>找到了，出现在微信内，具体原因还没有去研究…（懒</p>\n</li>\n<li><p>搜索功能：一直就在想，查了很多方案，都觉得不太优美，而且搜索我认为还没有那么迫切，就推迟了，具体实现，见文章末尾</p>\n</li>\n<li><p>移动端效果，还不是特别理想，还可以优化</p>\n</li>\n<li><p>整体风格色彩，还需要进一步磨合调整</p>\n</li>\n</ul>\n<h2 id=\"搜索功能\"><a href=\"#搜索功能\" class=\"headerlink\" title=\"搜索功能\"></a>搜索功能</h2><p>这个想好好说一说：</p>\n<p>jekyll 或者Hexo，可以说都没办法优雅的解决搜索问题，或者没办法简单的解决搜索问题。</p>\n<p>目前比较主流的几种做法：</p>\n<ul>\n<li><p>方案一：AJAX加载所有文章</p>\n<ul>\n<li><p>做一个页面，可以是JSON格式，包含所有文章标题，分类，tags，正文。搜索时候，加载此页面，用JS实现搜索。</p>\n</li>\n<li><p>优点：没有依赖，可以方便解决，难度相对低。体验也可以做的不错，比如输入内容，实时显示。</p>\n</li>\n<li><p>缺点：效率低，文章多的话，AJAX加载内容非常多，会慢，而且JS处理也会变慢。只能处理精确匹配，很难做模糊搜索。</p>\n</li>\n</ul>\n</li>\n<li><p>方案二：AJAX加载精简文章</p>\n<ul>\n<li>自己考虑出的方案，大致和方案一一致，就是仅仅包含问斩标题，分类，tags，文章摘要。取消正文。这样会相对快一点，但不能支持正文搜索了。</li>\n</ul>\n</li>\n<li><p>方案三：借助搜索引擎</p>\n<ul>\n<li><p>简单来说，就是想办法每篇文章都让搜索引擎收录（可以主动推送文章等），当搜索的时候，调用其搜索引擎，最终搜索内容变为：<code>keyword site:yukapril.com</code>这种样子。</p>\n</li>\n<li><p>优点：SEO效果好，搜索质量高</p>\n</li>\n<li><p>缺点：很难让搜索引擎每篇文章都收录，或者收录延迟很难把控。同时最终搜索<code>keyword site:yukapril.com</code>结果鬼知道是啥…比如baidu有类似的页面控件，但是我没办法调试成功…我总想着给它的代码精简精简。</p>\n</li>\n</ul>\n</li>\n<li><p>方案四：第三方平台托管搜索</p>\n<ul>\n<li><p>和方案三一致，只不过数据不是提交给搜索引擎了，而是第三方服务。一样是每次写完博客提交，每次用的时候进行AJAX查询即可。</p>\n</li>\n<li><p>优点：质量很高，非常好</p>\n</li>\n<li><p>缺点：听过几个平台，需要接入API，貌似有免费的，但是要求在搜索框上面加入他们的LOGO等，也就是说还是希望你能付费使用。API接入成本会相对复杂一些，开发成本比起前三个都要多不少。主要还是开发成本，谁想用就要注册一个第三方平台，否则没办法使用。</p>\n</li>\n</ul>\n</li>\n</ul>"},{"layout":"post","title":"提前获得圣诞礼物 - Octocat Figurine","date":"2016-12-06T21:50:00.000Z","photos":["https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine6.jpg-wm.pic"],"_content":"\n今天稍微加了一点班，回家就收到了老婆大人送的礼物~\n\n一直想买，想买5寸的，想买杯子、杯垫...苦于不知道如何运输等，一直没在官网购买。\n\n这次终于获得3寸的啦~\n\n<!-- more -->\n\n**章鱼猫 3寸版**\n\n![image](https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine1.jpg-wm.pic)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine2.jpg-wm.pic)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine3.jpg-wm.pic)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine4.jpg-wm.pic)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine5.jpg-wm.pic)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine6.jpg-wm.pic)\n\n这是说明我要用三脚猫的功夫，继续在开源这条不归路上好好走下去...\n\n---\n\n官方购买地址：[github](https://github.myshopify.com/products/octocat-figurine)\n","source":"_posts/2016/2016-12-06-octocat-figurine.md","raw":"---\nlayout: post\ntitle: \"提前获得圣诞礼物 - Octocat Figurine\"\ndate: 2016-12-06 21:50:00 GMT+0000\ncategories: [随笔]\ntags:  [Octocat Figurine,章鱼猫,github]\nphotos: [https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine6.jpg-wm.pic]\n---\n\n今天稍微加了一点班，回家就收到了老婆大人送的礼物~\n\n一直想买，想买5寸的，想买杯子、杯垫...苦于不知道如何运输等，一直没在官网购买。\n\n这次终于获得3寸的啦~\n\n<!-- more -->\n\n**章鱼猫 3寸版**\n\n![image](https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine1.jpg-wm.pic)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine2.jpg-wm.pic)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine3.jpg-wm.pic)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine4.jpg-wm.pic)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine5.jpg-wm.pic)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine6.jpg-wm.pic)\n\n这是说明我要用三脚猫的功夫，继续在开源这条不归路上好好走下去...\n\n---\n\n官方购买地址：[github](https://github.myshopify.com/products/octocat-figurine)\n","slug":"2016-2016-12-06-octocat-figurine","published":1,"updated":"2019-07-18T17:19:07.265Z","comments":1,"link":"","_id":"cjy8y72qh000os21d1qpj9prj","content":"<p>今天稍微加了一点班，回家就收到了老婆大人送的礼物~</p>\n<p>一直想买，想买5寸的，想买杯子、杯垫…苦于不知道如何运输等，一直没在官网购买。</p>\n<p>这次终于获得3寸的啦~</p>\n<a id=\"more\"></a>\n\n<p><strong>章鱼猫 3寸版</strong></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine1.jpg-wm.pic\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine2.jpg-wm.pic\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine3.jpg-wm.pic\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine4.jpg-wm.pic\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine5.jpg-wm.pic\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine6.jpg-wm.pic\" alt=\"image\"></p>\n<p>这是说明我要用三脚猫的功夫，继续在开源这条不归路上好好走下去…</p>\n<hr>\n<p>官方购买地址：<a href=\"https://github.myshopify.com/products/octocat-figurine\" target=\"_blank\" rel=\"noopener\">github</a></p>\n","site":{"data":{}},"excerpt":"<p>今天稍微加了一点班，回家就收到了老婆大人送的礼物~</p>\n<p>一直想买，想买5寸的，想买杯子、杯垫…苦于不知道如何运输等，一直没在官网购买。</p>\n<p>这次终于获得3寸的啦~</p>","more":"<p><strong>章鱼猫 3寸版</strong></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine1.jpg-wm.pic\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine2.jpg-wm.pic\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine3.jpg-wm.pic\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine4.jpg-wm.pic\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine5.jpg-wm.pic\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine6.jpg-wm.pic\" alt=\"image\"></p>\n<p>这是说明我要用三脚猫的功夫，继续在开源这条不归路上好好走下去…</p>\n<hr>\n<p>官方购买地址：<a href=\"https://github.myshopify.com/products/octocat-figurine\" target=\"_blank\" rel=\"noopener\">github</a></p>"},{"layout":"post","title":"CSS编码引发的问题","date":"2016-12-07T22:18:00.000Z","_content":"\n今天突然接到一个测试反馈，是说项目IE8下面CSS样式不对，但其他高级浏览器都没有问题。\n\n我测试了下，因为已经升级到IE11，所以只能靠模拟IE8，发现没有任何问题，同时IE7及兼容性模式也没有问题。\n\n那么我的第一感觉，是让其清理缓存。结果无效。\n\n<!-- more -->\n\n这个很诧异，因为我用双核浏览器也测试过（比如360浏览器），兼容性肯定是不会有问题的。那么这个问题就很奇怪。\n\n最后，在周围同事找了一圈，终于找到了一个有IE8的机器。测试发现，一般情况下，第一次打开网页，不会有问题，用用也问题不大。但是只要触发以下两点，立即CSS样式几乎全部异常，但是CSS样式文件可以识别**。\n\n* 启动F12调试\n* 点击兼容性模式按钮\n\n因为可以加载CSS文件，就打算看看是怎么解析的。\n\n点击一个元素，发现仅仅加载了第一行样式，就顺藤摸瓜，查看样式表。IE的F12下，可以看到当前的CSS文件解析情况，结果发现，仅仅能解析到几行而已。我又去查看CSS文件内容，发现正好是注释的地方。\n\n在IE下打开CSS文件，结果发现，由于文件编码是`UTF-8`，导致注释的地方是乱码。\n\n这样原因就很明确了：CSS文件编码导致的，最简单的方法，就是删除注释了，这样就直接解决了。\n\n因为未来会用webpack打包项目，到时候CSS会被压缩，这类问题就不会再出现，就没有继续深入研究。比如说可以在CSS文件开头加入`@charset \"utf-8\"`，但是听说这个方法IE6可能会有问题，就没再尝试。","source":"_posts/2016/2016-12-07-css-charset.md","raw":"---\nlayout: post\ntitle: \"CSS编码引发的问题\"\ndate: 2016-12-07 22:18:00 GMT+0000\ncategories: [前端]\ntags:  [css,编码]\n---\n\n今天突然接到一个测试反馈，是说项目IE8下面CSS样式不对，但其他高级浏览器都没有问题。\n\n我测试了下，因为已经升级到IE11，所以只能靠模拟IE8，发现没有任何问题，同时IE7及兼容性模式也没有问题。\n\n那么我的第一感觉，是让其清理缓存。结果无效。\n\n<!-- more -->\n\n这个很诧异，因为我用双核浏览器也测试过（比如360浏览器），兼容性肯定是不会有问题的。那么这个问题就很奇怪。\n\n最后，在周围同事找了一圈，终于找到了一个有IE8的机器。测试发现，一般情况下，第一次打开网页，不会有问题，用用也问题不大。但是只要触发以下两点，立即CSS样式几乎全部异常，但是CSS样式文件可以识别**。\n\n* 启动F12调试\n* 点击兼容性模式按钮\n\n因为可以加载CSS文件，就打算看看是怎么解析的。\n\n点击一个元素，发现仅仅加载了第一行样式，就顺藤摸瓜，查看样式表。IE的F12下，可以看到当前的CSS文件解析情况，结果发现，仅仅能解析到几行而已。我又去查看CSS文件内容，发现正好是注释的地方。\n\n在IE下打开CSS文件，结果发现，由于文件编码是`UTF-8`，导致注释的地方是乱码。\n\n这样原因就很明确了：CSS文件编码导致的，最简单的方法，就是删除注释了，这样就直接解决了。\n\n因为未来会用webpack打包项目，到时候CSS会被压缩，这类问题就不会再出现，就没有继续深入研究。比如说可以在CSS文件开头加入`@charset \"utf-8\"`，但是听说这个方法IE6可能会有问题，就没再尝试。","slug":"2016-2016-12-07-css-charset","published":1,"updated":"2019-07-18T17:19:07.093Z","comments":1,"photos":[],"link":"","_id":"cjy8y72qj000ts21dw4kemk5o","content":"<p>今天突然接到一个测试反馈，是说项目IE8下面CSS样式不对，但其他高级浏览器都没有问题。</p>\n<p>我测试了下，因为已经升级到IE11，所以只能靠模拟IE8，发现没有任何问题，同时IE7及兼容性模式也没有问题。</p>\n<p>那么我的第一感觉，是让其清理缓存。结果无效。</p>\n<a id=\"more\"></a>\n\n<p>这个很诧异，因为我用双核浏览器也测试过（比如360浏览器），兼容性肯定是不会有问题的。那么这个问题就很奇怪。</p>\n<p>最后，在周围同事找了一圈，终于找到了一个有IE8的机器。测试发现，一般情况下，第一次打开网页，不会有问题，用用也问题不大。但是只要触发以下两点，立即CSS样式几乎全部异常，但是CSS样式文件可以识别**。</p>\n<ul>\n<li>启动F12调试</li>\n<li>点击兼容性模式按钮</li>\n</ul>\n<p>因为可以加载CSS文件，就打算看看是怎么解析的。</p>\n<p>点击一个元素，发现仅仅加载了第一行样式，就顺藤摸瓜，查看样式表。IE的F12下，可以看到当前的CSS文件解析情况，结果发现，仅仅能解析到几行而已。我又去查看CSS文件内容，发现正好是注释的地方。</p>\n<p>在IE下打开CSS文件，结果发现，由于文件编码是<code>UTF-8</code>，导致注释的地方是乱码。</p>\n<p>这样原因就很明确了：CSS文件编码导致的，最简单的方法，就是删除注释了，这样就直接解决了。</p>\n<p>因为未来会用webpack打包项目，到时候CSS会被压缩，这类问题就不会再出现，就没有继续深入研究。比如说可以在CSS文件开头加入<code>@charset &quot;utf-8&quot;</code>，但是听说这个方法IE6可能会有问题，就没再尝试。</p>\n","site":{"data":{}},"excerpt":"<p>今天突然接到一个测试反馈，是说项目IE8下面CSS样式不对，但其他高级浏览器都没有问题。</p>\n<p>我测试了下，因为已经升级到IE11，所以只能靠模拟IE8，发现没有任何问题，同时IE7及兼容性模式也没有问题。</p>\n<p>那么我的第一感觉，是让其清理缓存。结果无效。</p>","more":"<p>这个很诧异，因为我用双核浏览器也测试过（比如360浏览器），兼容性肯定是不会有问题的。那么这个问题就很奇怪。</p>\n<p>最后，在周围同事找了一圈，终于找到了一个有IE8的机器。测试发现，一般情况下，第一次打开网页，不会有问题，用用也问题不大。但是只要触发以下两点，立即CSS样式几乎全部异常，但是CSS样式文件可以识别**。</p>\n<ul>\n<li>启动F12调试</li>\n<li>点击兼容性模式按钮</li>\n</ul>\n<p>因为可以加载CSS文件，就打算看看是怎么解析的。</p>\n<p>点击一个元素，发现仅仅加载了第一行样式，就顺藤摸瓜，查看样式表。IE的F12下，可以看到当前的CSS文件解析情况，结果发现，仅仅能解析到几行而已。我又去查看CSS文件内容，发现正好是注释的地方。</p>\n<p>在IE下打开CSS文件，结果发现，由于文件编码是<code>UTF-8</code>，导致注释的地方是乱码。</p>\n<p>这样原因就很明确了：CSS文件编码导致的，最简单的方法，就是删除注释了，这样就直接解决了。</p>\n<p>因为未来会用webpack打包项目，到时候CSS会被压缩，这类问题就不会再出现，就没有继续深入研究。比如说可以在CSS文件开头加入<code>@charset &quot;utf-8&quot;</code>，但是听说这个方法IE6可能会有问题，就没再尝试。</p>"},{"layout":"post","title":"网易严选 严选的都不能使用优惠券","date":"2016-12-12T21:22:00.000Z","_content":"\n今天中午在联通手机营业厅上，参加爽十二摇奖活动，中了一个网易严选的优惠券礼包。大致内含20元直减券，满99减15券等，均为全场通用。\n\n之后就去严选看了看，东西品质很好，至少拍出的照片都非常诱人。\n\n<!-- more -->\n\n正好看到有网易未央猪肉，这个可是非常有名。虽然仅仅配送4次，价格高达650元，但是我还是想尝试下。\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netnese-you7.png-wm.black)\n\n晚上回到家吃过饭，第一时间决定把优惠券用掉。全场通用299减40，非常合适。\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netease-you0.png-wm.black)\n\n结果发现未央猪肉竟然没有优惠券选项。一开始我以为是礼品卡，但是礼品卡里面什么都没有。\n\n反复查找，最终无奈，只得求助客服。\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netease-you1.png-wm.black)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netease-you2.png-wm.black)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netease-you3.png-wm.black)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netease-you4.png-wm.black)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netease-you5.png-wm.black)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netease-you6.png-wm.black)\n\n也就是说：\n\n* 未央猪肉和网易严选不是一家\n* 未央猪肉仅仅是产品挂在网易严选上销售，使用网易严选支付渠道而已\n* 优惠券只能网易严选编辑自己“严选”出来的东西，被强行加到货架上的广告产品无效\n* 未央猪肉是广告产品\n\n后来也在网上搜索了下，未央猪肉有自己的官网。但是除了几个图片文字，没有任何销售等信息。\n\n而目前未央猪肉销售渠道仅有两个：\n\n* 网易严选\n* 网易考拉海购\n\n价格都是129元体验套装，2个月4次650元套装，6个月13次1950元套装，12个月25次3350元套装。\n\n可以理解为，饥饿营销，推广手段。故意放量少测试下需求（2个月套装说是放量765份），至于优惠券不能用，我认为应该是配置错误或者故意而为之，当然我更倾向后者。\n\n但为什么优惠券没有额外说明，我认为应该是卖猪肉的还是少数，导致投诉量很小，他们应该能撑得住，也就懒得修改了。","source":"_posts/2016/2016-12-12-netease-you.md","raw":"---\nlayout: post\ntitle: \"网易严选 严选的都不能使用优惠券\"\ndate: 2016-12-12 21:22:00 GMT+0000\ncategories: [随笔]\ntags:  [未央猪肉,网易,严选,网易严选,优惠券]\n---\n\n今天中午在联通手机营业厅上，参加爽十二摇奖活动，中了一个网易严选的优惠券礼包。大致内含20元直减券，满99减15券等，均为全场通用。\n\n之后就去严选看了看，东西品质很好，至少拍出的照片都非常诱人。\n\n<!-- more -->\n\n正好看到有网易未央猪肉，这个可是非常有名。虽然仅仅配送4次，价格高达650元，但是我还是想尝试下。\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netnese-you7.png-wm.black)\n\n晚上回到家吃过饭，第一时间决定把优惠券用掉。全场通用299减40，非常合适。\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netease-you0.png-wm.black)\n\n结果发现未央猪肉竟然没有优惠券选项。一开始我以为是礼品卡，但是礼品卡里面什么都没有。\n\n反复查找，最终无奈，只得求助客服。\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netease-you1.png-wm.black)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netease-you2.png-wm.black)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netease-you3.png-wm.black)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netease-you4.png-wm.black)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netease-you5.png-wm.black)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netease-you6.png-wm.black)\n\n也就是说：\n\n* 未央猪肉和网易严选不是一家\n* 未央猪肉仅仅是产品挂在网易严选上销售，使用网易严选支付渠道而已\n* 优惠券只能网易严选编辑自己“严选”出来的东西，被强行加到货架上的广告产品无效\n* 未央猪肉是广告产品\n\n后来也在网上搜索了下，未央猪肉有自己的官网。但是除了几个图片文字，没有任何销售等信息。\n\n而目前未央猪肉销售渠道仅有两个：\n\n* 网易严选\n* 网易考拉海购\n\n价格都是129元体验套装，2个月4次650元套装，6个月13次1950元套装，12个月25次3350元套装。\n\n可以理解为，饥饿营销，推广手段。故意放量少测试下需求（2个月套装说是放量765份），至于优惠券不能用，我认为应该是配置错误或者故意而为之，当然我更倾向后者。\n\n但为什么优惠券没有额外说明，我认为应该是卖猪肉的还是少数，导致投诉量很小，他们应该能撑得住，也就懒得修改了。","slug":"2016-2016-12-12-netease-you","published":1,"updated":"2019-07-18T17:19:06.999Z","comments":1,"photos":[],"link":"","_id":"cjy8y72qk000vs21d8uxzm84k","content":"<p>今天中午在联通手机营业厅上，参加爽十二摇奖活动，中了一个网易严选的优惠券礼包。大致内含20元直减券，满99减15券等，均为全场通用。</p>\n<p>之后就去严选看了看，东西品质很好，至少拍出的照片都非常诱人。</p>\n<a id=\"more\"></a>\n\n<p>正好看到有网易未央猪肉，这个可是非常有名。虽然仅仅配送4次，价格高达650元，但是我还是想尝试下。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netnese-you7.png-wm.black\" alt=\"image\"></p>\n<p>晚上回到家吃过饭，第一时间决定把优惠券用掉。全场通用299减40，非常合适。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netease-you0.png-wm.black\" alt=\"image\"></p>\n<p>结果发现未央猪肉竟然没有优惠券选项。一开始我以为是礼品卡，但是礼品卡里面什么都没有。</p>\n<p>反复查找，最终无奈，只得求助客服。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netease-you1.png-wm.black\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netease-you2.png-wm.black\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netease-you3.png-wm.black\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netease-you4.png-wm.black\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netease-you5.png-wm.black\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netease-you6.png-wm.black\" alt=\"image\"></p>\n<p>也就是说：</p>\n<ul>\n<li>未央猪肉和网易严选不是一家</li>\n<li>未央猪肉仅仅是产品挂在网易严选上销售，使用网易严选支付渠道而已</li>\n<li>优惠券只能网易严选编辑自己“严选”出来的东西，被强行加到货架上的广告产品无效</li>\n<li>未央猪肉是广告产品</li>\n</ul>\n<p>后来也在网上搜索了下，未央猪肉有自己的官网。但是除了几个图片文字，没有任何销售等信息。</p>\n<p>而目前未央猪肉销售渠道仅有两个：</p>\n<ul>\n<li>网易严选</li>\n<li>网易考拉海购</li>\n</ul>\n<p>价格都是129元体验套装，2个月4次650元套装，6个月13次1950元套装，12个月25次3350元套装。</p>\n<p>可以理解为，饥饿营销，推广手段。故意放量少测试下需求（2个月套装说是放量765份），至于优惠券不能用，我认为应该是配置错误或者故意而为之，当然我更倾向后者。</p>\n<p>但为什么优惠券没有额外说明，我认为应该是卖猪肉的还是少数，导致投诉量很小，他们应该能撑得住，也就懒得修改了。</p>\n","site":{"data":{}},"excerpt":"<p>今天中午在联通手机营业厅上，参加爽十二摇奖活动，中了一个网易严选的优惠券礼包。大致内含20元直减券，满99减15券等，均为全场通用。</p>\n<p>之后就去严选看了看，东西品质很好，至少拍出的照片都非常诱人。</p>","more":"<p>正好看到有网易未央猪肉，这个可是非常有名。虽然仅仅配送4次，价格高达650元，但是我还是想尝试下。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netnese-you7.png-wm.black\" alt=\"image\"></p>\n<p>晚上回到家吃过饭，第一时间决定把优惠券用掉。全场通用299减40，非常合适。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netease-you0.png-wm.black\" alt=\"image\"></p>\n<p>结果发现未央猪肉竟然没有优惠券选项。一开始我以为是礼品卡，但是礼品卡里面什么都没有。</p>\n<p>反复查找，最终无奈，只得求助客服。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netease-you1.png-wm.black\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netease-you2.png-wm.black\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netease-you3.png-wm.black\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netease-you4.png-wm.black\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netease-you5.png-wm.black\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netease-you6.png-wm.black\" alt=\"image\"></p>\n<p>也就是说：</p>\n<ul>\n<li>未央猪肉和网易严选不是一家</li>\n<li>未央猪肉仅仅是产品挂在网易严选上销售，使用网易严选支付渠道而已</li>\n<li>优惠券只能网易严选编辑自己“严选”出来的东西，被强行加到货架上的广告产品无效</li>\n<li>未央猪肉是广告产品</li>\n</ul>\n<p>后来也在网上搜索了下，未央猪肉有自己的官网。但是除了几个图片文字，没有任何销售等信息。</p>\n<p>而目前未央猪肉销售渠道仅有两个：</p>\n<ul>\n<li>网易严选</li>\n<li>网易考拉海购</li>\n</ul>\n<p>价格都是129元体验套装，2个月4次650元套装，6个月13次1950元套装，12个月25次3350元套装。</p>\n<p>可以理解为，饥饿营销，推广手段。故意放量少测试下需求（2个月套装说是放量765份），至于优惠券不能用，我认为应该是配置错误或者故意而为之，当然我更倾向后者。</p>\n<p>但为什么优惠券没有额外说明，我认为应该是卖猪肉的还是少数，导致投诉量很小，他们应该能撑得住，也就懒得修改了。</p>"},{"layout":"post","title":"入手IKBC F108时光机键盘","date":"2017-01-04T20:54:00.000Z","_content":"\nIKBC入手一周了，一直太忙，不过也正好让我体验充足。来，上IKBC入手记。\n\n首先这个键盘确实不贵，才500多一点，IKBC整体都不是很贵，但是很有特色。比如本次我入手的F108，就因为它有计时功能，我觉得可能会有些实用，决定入手看看。\n\n<!-- more -->\n\n# IKBC的系列介绍\n\n我在挑选的时候，也是有些迷糊，因为虽然系列不多，但是却很接近，有点迷茫。\n\n根据IKBC的[官网](http://www.ikbc.com.cn/)，我们可以得知有三个系列：F系列，C系列，G系列。这三个系列，都是104/108或者87键盘。\n还有poker系列，是60键盘。\n\n#### 先说标准的三大系列\n\nF是新出的系列，主打灯光，有F108和F87，注意是108按键，没有104按键的。灯光主要是除了常规的GH60客制化系列的常亮、闪动、涟漪、单点点亮等，额外支持：自定义9组常亮灯光区和灯光倒计时。在细节的，我下面再说。\n\nC和G系列，都是有104键盘和87键盘。\n\nC系列说是2015年发明的，我没怎么看出来怎么好。反倒是2014年的G系列我觉得还可能有些特色。\n\nC系列和G系列键帽均是PBT，但是C系列键帽厚实，G系列键帽可以透光（F时光机系列也是透光的）。同时两个系列特殊功能按键稍有不同。\n\nC系列默认没有灯（可以加灯，换成透光的G系列键帽），G系列默认带灯。\n\nC系列功能：<kbd>Win</kbd>键锁定，全键盘无冲切换，音量控制，恢复出厂设置。\n\nG系列功能：音量控制，音乐播放控制，切换<kbd>ctrl</kbd>和<kbd>CapsLock</kbd>位置，鼠标右键按钮。\n\nC系列只能选择红黑茶青奶轴，G系列可选择更多的轴（红黑茶青奶绿，多一个绿轴）。\n\n> 据传，C系列加灯之后，可以用<kbd>Fn</kbd> + <kbd>1</kbd>~<kbd>8</kbd>控制灯光。\n\n#### 捎带手说下poker\n\n这个真的要成谜了...玩笑~\n\n不过poker系列确实难买。目前poker2，poker3已经全部断货很久了。\n\npoker分为poker1，poker2，poker3，poker升级版。共计4代产品。目前能买到的新品是poker升级版，或许你运气极好的情况下，能碰上poker3。\n\npoker升级版和poker3有红黑茶青四种轴。都需要自己加灯。poker升级版说是可以编程和固件升级，poker3因为带有额外三层，我估计编程啥的也问题不大。\n\npoker系列键盘外观完全一致，仅仅在特殊按键上有区别。\n\n比如poker3，是可以切换Layer2/Layer3/Layer4的，同时鼠标右键是<kbd>Fn</kbd>+<kbd>z</kbd>。但是<kbd>Insert</kbd> <kbd>Del</kbd> <kbd>PU</kbd> <kbd>PD</kbd> 等键位我认为不合理。键盘内建Qwery/Dvorak等键盘布局。\n\n# 说说F108\n\n![image](https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-1.jpg-wm.black)\n\nIKBC白色红轴（冰蓝灯）\n\n买回来，包装盒还算可以，谈不上赛睿/雷蛇的精致、樱桃的硬朗，但是人家便宜啊，500多块红轴还带灯光特效啥的。\n\n![image](https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-2.jpg-wm.black)\n\n打开后的效果，键盘有薄塑料壳盖住。我从来是不收拾包装盒就拍照的~来得时候就是这样子，我就这样子拍...\n\n![image](https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-3.jpg-wm.black)\n\n附送的物品：说明书（介绍怎么按快捷键，还是很重要的），刷子，10颗键帽（红蓝各5颗，分别是R1四颗，R4一颗），拔键器，捆绑带。\n\n要说明的是，键盘线上已经带有一个捆绑带了，这个是额外附送。而那2组R1R4键帽，可以安装在<kbd>Esc</kbd>和方向键上，相当于任选一组配色。至于手感啥的，呵呵。白送的东西嘛。\n\n![image](https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-4.jpg-wm.black)\n\n点亮的效果，比我预想的好。冰蓝灯很明亮，白天也非常清楚，这就让灯光倒计时功能发挥作用。一开始我有点犹豫，是选择黑色款还是白色款，主要是考虑倒计时一定要能看清楚。现在确信了，白色一定没问题的。\n\n这里要说明的是，默认开启，键盘默认是全灯光模式，这个不能修改。\n\n还好，全灯光相当于70~80%的亮度。默认仅在倒计时的设置过程中，可以启动100%灯光。\n\n不过，灯光亮度可以设置。\n\n说道灯光，也就是说它的最大亮点。它可以设置：\n\n* <kbd>Fn</kbd> + <kbd>1</kbd>~<kbd>9</kbd> 九组自定义灯光区域，比如我设置<kbd>Fn</kbd> + <kbd>1</kbd> 是字母键盘区域有一个桃心区域亮。\n* <kbd>Fn</kbd> + 上下左右 调整灯光速度和强度\n* <kbd>ScrLk</kbd> 设置倒计时，使用<kbd>F1</kbd>一行按键表示x10分钟，最多120分钟，使用字母上方数字表示1-9分钟。这样最多设置129分钟。按下<kbd>ScrLk</kbd>后，所有灯管熄灭，只有<kbd>F1</kbd>~<kbd>F12</kbd>和数字键亮灯，同时<kbd>Enter</kbd>和<kbd>END</kbd>表示完成和取消。选中的时间，使用最亮灯光提示。结束前一分钟，整个字母键盘区（不算空格共计60个按键）开始倒计时，一个一个灯熄灭。全部结束后，灯光闪烁提示。\n* <kbd>Pause</kbd> 另外一种倒计时，和上一个差不多，就是只能设置10分钟，只有数字区域可用。而且最终闪烁效果不同。我基本上没用过这个提醒。因为实在时间设置太短了。\n\n**这里要说一个bug**\n\n键盘的<kbd>ScrLk</kbd> <kbd>Pause</kbd>是正刻，理论上直接按应该是这两个默认按键，但是其实是特殊功能了，而要想使用默认的按键功能，需要先按下<kbd>Fn</kbd>，相当于侧刻。这个印刷算是bug。\n\n\n![image](https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-6.jpg-wm.black)\n\n键盘的背面。中间那个名牌卡片，用了1周，已经磨下来2次了...我只能把脚垫抬起来了。脚垫是两段式的。\n\n走线，可以三个方向，算是方便。同样，也已经从线槽掉出来1次了...\n\n对了，这个键盘很沉，比我的樱桃 G80-3000 还要沉不少。\n\n# 此外F108的功能\n\n除去上面说到的，F108还有的功能：\n\n* <kbd>Fn</kbd> + <kbd>F1</kbd>~<kbd>F9</kbd> 配置连键速度等（就是按住不撒手，重复的速度）\n* <kbd>Fn</kbd> + <kbd>F12</kbd> 切换8种灯光。好像是全开灯，呼吸灯，点亮（按那个那个亮），按一个一行亮，按一个一列亮，全键盘没规律瞎特么亮，水平波浪瞎特么亮，计时亮。\n* <kbd>Fn</kbd> + <kbd>0</kbd> 关灯\n* <kbd>Fn</kbd> + <kbd>PrtSc</kbd> 切换键盘布局。共四种：标准Qwery布局，换键Qwery布局（<kbd>win</kbd>和<kbd>Alt</kbd>换位置，其实就是是Mac键位啦），德沃拉克布局，还有一种不知道的布局。\n\n灯光上，我觉得除了个别时候需要全开灯，和当做计时器的最后一种有实际用途，其他就是呼吸灯和点亮比较好。剩下全是辣鸡！\n\n# 使用感受\n\n说实在的，这个说起来真的很难。\n\n单说键盘做工，对得起500块的价格，键帽也不错。白色PBT效果，也比我自己组装GH60用的PBT要好，灯光更不用提。\n\n但是论手感上，竟然没有组装的GH60普通PBT手感好，我也没发现问题...这才是问题所在。可能还要多用用，慢慢感受下。\n\n不过初步感觉问题出在按键回弹上和按键克数稍微少了一点。\n\n灯光上，虽然看很多人说是没用，我觉得倒还行，比如9点半打完水，晾好，设置15分钟后吃药。虽然之后还会拖延一点时间，但是确实能起到提醒功能。灯光算是仁者见仁智者见智吧。\n\n最后，上一张三键盘图，正巧樱桃和GH60全在公司，直接一张拍！\n\n![image](https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-5.jpg-wm.black)","source":"_posts/2017/2017-01-04-ikbc-f108.md","raw":"---\nlayout: post\ntitle: \"入手IKBC F108时光机键盘\"\ndate: 2017-01-04 20:54:00 GMT+0000\ncategories: [外设]\ntags:  [机械键盘,键盘,ikbc]\n---\n\nIKBC入手一周了，一直太忙，不过也正好让我体验充足。来，上IKBC入手记。\n\n首先这个键盘确实不贵，才500多一点，IKBC整体都不是很贵，但是很有特色。比如本次我入手的F108，就因为它有计时功能，我觉得可能会有些实用，决定入手看看。\n\n<!-- more -->\n\n# IKBC的系列介绍\n\n我在挑选的时候，也是有些迷糊，因为虽然系列不多，但是却很接近，有点迷茫。\n\n根据IKBC的[官网](http://www.ikbc.com.cn/)，我们可以得知有三个系列：F系列，C系列，G系列。这三个系列，都是104/108或者87键盘。\n还有poker系列，是60键盘。\n\n#### 先说标准的三大系列\n\nF是新出的系列，主打灯光，有F108和F87，注意是108按键，没有104按键的。灯光主要是除了常规的GH60客制化系列的常亮、闪动、涟漪、单点点亮等，额外支持：自定义9组常亮灯光区和灯光倒计时。在细节的，我下面再说。\n\nC和G系列，都是有104键盘和87键盘。\n\nC系列说是2015年发明的，我没怎么看出来怎么好。反倒是2014年的G系列我觉得还可能有些特色。\n\nC系列和G系列键帽均是PBT，但是C系列键帽厚实，G系列键帽可以透光（F时光机系列也是透光的）。同时两个系列特殊功能按键稍有不同。\n\nC系列默认没有灯（可以加灯，换成透光的G系列键帽），G系列默认带灯。\n\nC系列功能：<kbd>Win</kbd>键锁定，全键盘无冲切换，音量控制，恢复出厂设置。\n\nG系列功能：音量控制，音乐播放控制，切换<kbd>ctrl</kbd>和<kbd>CapsLock</kbd>位置，鼠标右键按钮。\n\nC系列只能选择红黑茶青奶轴，G系列可选择更多的轴（红黑茶青奶绿，多一个绿轴）。\n\n> 据传，C系列加灯之后，可以用<kbd>Fn</kbd> + <kbd>1</kbd>~<kbd>8</kbd>控制灯光。\n\n#### 捎带手说下poker\n\n这个真的要成谜了...玩笑~\n\n不过poker系列确实难买。目前poker2，poker3已经全部断货很久了。\n\npoker分为poker1，poker2，poker3，poker升级版。共计4代产品。目前能买到的新品是poker升级版，或许你运气极好的情况下，能碰上poker3。\n\npoker升级版和poker3有红黑茶青四种轴。都需要自己加灯。poker升级版说是可以编程和固件升级，poker3因为带有额外三层，我估计编程啥的也问题不大。\n\npoker系列键盘外观完全一致，仅仅在特殊按键上有区别。\n\n比如poker3，是可以切换Layer2/Layer3/Layer4的，同时鼠标右键是<kbd>Fn</kbd>+<kbd>z</kbd>。但是<kbd>Insert</kbd> <kbd>Del</kbd> <kbd>PU</kbd> <kbd>PD</kbd> 等键位我认为不合理。键盘内建Qwery/Dvorak等键盘布局。\n\n# 说说F108\n\n![image](https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-1.jpg-wm.black)\n\nIKBC白色红轴（冰蓝灯）\n\n买回来，包装盒还算可以，谈不上赛睿/雷蛇的精致、樱桃的硬朗，但是人家便宜啊，500多块红轴还带灯光特效啥的。\n\n![image](https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-2.jpg-wm.black)\n\n打开后的效果，键盘有薄塑料壳盖住。我从来是不收拾包装盒就拍照的~来得时候就是这样子，我就这样子拍...\n\n![image](https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-3.jpg-wm.black)\n\n附送的物品：说明书（介绍怎么按快捷键，还是很重要的），刷子，10颗键帽（红蓝各5颗，分别是R1四颗，R4一颗），拔键器，捆绑带。\n\n要说明的是，键盘线上已经带有一个捆绑带了，这个是额外附送。而那2组R1R4键帽，可以安装在<kbd>Esc</kbd>和方向键上，相当于任选一组配色。至于手感啥的，呵呵。白送的东西嘛。\n\n![image](https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-4.jpg-wm.black)\n\n点亮的效果，比我预想的好。冰蓝灯很明亮，白天也非常清楚，这就让灯光倒计时功能发挥作用。一开始我有点犹豫，是选择黑色款还是白色款，主要是考虑倒计时一定要能看清楚。现在确信了，白色一定没问题的。\n\n这里要说明的是，默认开启，键盘默认是全灯光模式，这个不能修改。\n\n还好，全灯光相当于70~80%的亮度。默认仅在倒计时的设置过程中，可以启动100%灯光。\n\n不过，灯光亮度可以设置。\n\n说道灯光，也就是说它的最大亮点。它可以设置：\n\n* <kbd>Fn</kbd> + <kbd>1</kbd>~<kbd>9</kbd> 九组自定义灯光区域，比如我设置<kbd>Fn</kbd> + <kbd>1</kbd> 是字母键盘区域有一个桃心区域亮。\n* <kbd>Fn</kbd> + 上下左右 调整灯光速度和强度\n* <kbd>ScrLk</kbd> 设置倒计时，使用<kbd>F1</kbd>一行按键表示x10分钟，最多120分钟，使用字母上方数字表示1-9分钟。这样最多设置129分钟。按下<kbd>ScrLk</kbd>后，所有灯管熄灭，只有<kbd>F1</kbd>~<kbd>F12</kbd>和数字键亮灯，同时<kbd>Enter</kbd>和<kbd>END</kbd>表示完成和取消。选中的时间，使用最亮灯光提示。结束前一分钟，整个字母键盘区（不算空格共计60个按键）开始倒计时，一个一个灯熄灭。全部结束后，灯光闪烁提示。\n* <kbd>Pause</kbd> 另外一种倒计时，和上一个差不多，就是只能设置10分钟，只有数字区域可用。而且最终闪烁效果不同。我基本上没用过这个提醒。因为实在时间设置太短了。\n\n**这里要说一个bug**\n\n键盘的<kbd>ScrLk</kbd> <kbd>Pause</kbd>是正刻，理论上直接按应该是这两个默认按键，但是其实是特殊功能了，而要想使用默认的按键功能，需要先按下<kbd>Fn</kbd>，相当于侧刻。这个印刷算是bug。\n\n\n![image](https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-6.jpg-wm.black)\n\n键盘的背面。中间那个名牌卡片，用了1周，已经磨下来2次了...我只能把脚垫抬起来了。脚垫是两段式的。\n\n走线，可以三个方向，算是方便。同样，也已经从线槽掉出来1次了...\n\n对了，这个键盘很沉，比我的樱桃 G80-3000 还要沉不少。\n\n# 此外F108的功能\n\n除去上面说到的，F108还有的功能：\n\n* <kbd>Fn</kbd> + <kbd>F1</kbd>~<kbd>F9</kbd> 配置连键速度等（就是按住不撒手，重复的速度）\n* <kbd>Fn</kbd> + <kbd>F12</kbd> 切换8种灯光。好像是全开灯，呼吸灯，点亮（按那个那个亮），按一个一行亮，按一个一列亮，全键盘没规律瞎特么亮，水平波浪瞎特么亮，计时亮。\n* <kbd>Fn</kbd> + <kbd>0</kbd> 关灯\n* <kbd>Fn</kbd> + <kbd>PrtSc</kbd> 切换键盘布局。共四种：标准Qwery布局，换键Qwery布局（<kbd>win</kbd>和<kbd>Alt</kbd>换位置，其实就是是Mac键位啦），德沃拉克布局，还有一种不知道的布局。\n\n灯光上，我觉得除了个别时候需要全开灯，和当做计时器的最后一种有实际用途，其他就是呼吸灯和点亮比较好。剩下全是辣鸡！\n\n# 使用感受\n\n说实在的，这个说起来真的很难。\n\n单说键盘做工，对得起500块的价格，键帽也不错。白色PBT效果，也比我自己组装GH60用的PBT要好，灯光更不用提。\n\n但是论手感上，竟然没有组装的GH60普通PBT手感好，我也没发现问题...这才是问题所在。可能还要多用用，慢慢感受下。\n\n不过初步感觉问题出在按键回弹上和按键克数稍微少了一点。\n\n灯光上，虽然看很多人说是没用，我觉得倒还行，比如9点半打完水，晾好，设置15分钟后吃药。虽然之后还会拖延一点时间，但是确实能起到提醒功能。灯光算是仁者见仁智者见智吧。\n\n最后，上一张三键盘图，正巧樱桃和GH60全在公司，直接一张拍！\n\n![image](https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-5.jpg-wm.black)","slug":"2017-2017-01-04-ikbc-f108","published":1,"updated":"2019-07-18T17:19:07.158Z","comments":1,"photos":[],"link":"","_id":"cjy8y72qm000zs21deuhkhb7w","content":"<p>IKBC入手一周了，一直太忙，不过也正好让我体验充足。来，上IKBC入手记。</p>\n<p>首先这个键盘确实不贵，才500多一点，IKBC整体都不是很贵，但是很有特色。比如本次我入手的F108，就因为它有计时功能，我觉得可能会有些实用，决定入手看看。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"IKBC的系列介绍\"><a href=\"#IKBC的系列介绍\" class=\"headerlink\" title=\"IKBC的系列介绍\"></a>IKBC的系列介绍</h1><p>我在挑选的时候，也是有些迷糊，因为虽然系列不多，但是却很接近，有点迷茫。</p>\n<p>根据IKBC的<a href=\"http://www.ikbc.com.cn/\" target=\"_blank\" rel=\"noopener\">官网</a>，我们可以得知有三个系列：F系列，C系列，G系列。这三个系列，都是104/108或者87键盘。<br>还有poker系列，是60键盘。</p>\n<h4 id=\"先说标准的三大系列\"><a href=\"#先说标准的三大系列\" class=\"headerlink\" title=\"先说标准的三大系列\"></a>先说标准的三大系列</h4><p>F是新出的系列，主打灯光，有F108和F87，注意是108按键，没有104按键的。灯光主要是除了常规的GH60客制化系列的常亮、闪动、涟漪、单点点亮等，额外支持：自定义9组常亮灯光区和灯光倒计时。在细节的，我下面再说。</p>\n<p>C和G系列，都是有104键盘和87键盘。</p>\n<p>C系列说是2015年发明的，我没怎么看出来怎么好。反倒是2014年的G系列我觉得还可能有些特色。</p>\n<p>C系列和G系列键帽均是PBT，但是C系列键帽厚实，G系列键帽可以透光（F时光机系列也是透光的）。同时两个系列特殊功能按键稍有不同。</p>\n<p>C系列默认没有灯（可以加灯，换成透光的G系列键帽），G系列默认带灯。</p>\n<p>C系列功能：<kbd>Win</kbd>键锁定，全键盘无冲切换，音量控制，恢复出厂设置。</p>\n<p>G系列功能：音量控制，音乐播放控制，切换<kbd>ctrl</kbd>和<kbd>CapsLock</kbd>位置，鼠标右键按钮。</p>\n<p>C系列只能选择红黑茶青奶轴，G系列可选择更多的轴（红黑茶青奶绿，多一个绿轴）。</p>\n<blockquote>\n<p>据传，C系列加灯之后，可以用<kbd>Fn</kbd> + <kbd>1</kbd>~<kbd>8</kbd>控制灯光。</p>\n</blockquote>\n<h4 id=\"捎带手说下poker\"><a href=\"#捎带手说下poker\" class=\"headerlink\" title=\"捎带手说下poker\"></a>捎带手说下poker</h4><p>这个真的要成谜了…玩笑~</p>\n<p>不过poker系列确实难买。目前poker2，poker3已经全部断货很久了。</p>\n<p>poker分为poker1，poker2，poker3，poker升级版。共计4代产品。目前能买到的新品是poker升级版，或许你运气极好的情况下，能碰上poker3。</p>\n<p>poker升级版和poker3有红黑茶青四种轴。都需要自己加灯。poker升级版说是可以编程和固件升级，poker3因为带有额外三层，我估计编程啥的也问题不大。</p>\n<p>poker系列键盘外观完全一致，仅仅在特殊按键上有区别。</p>\n<p>比如poker3，是可以切换Layer2/Layer3/Layer4的，同时鼠标右键是<kbd>Fn</kbd>+<kbd>z</kbd>。但是<kbd>Insert</kbd> <kbd>Del</kbd> <kbd>PU</kbd> <kbd>PD</kbd> 等键位我认为不合理。键盘内建Qwery/Dvorak等键盘布局。</p>\n<h1 id=\"说说F108\"><a href=\"#说说F108\" class=\"headerlink\" title=\"说说F108\"></a>说说F108</h1><p><img src=\"https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-1.jpg-wm.black\" alt=\"image\"></p>\n<p>IKBC白色红轴（冰蓝灯）</p>\n<p>买回来，包装盒还算可以，谈不上赛睿/雷蛇的精致、樱桃的硬朗，但是人家便宜啊，500多块红轴还带灯光特效啥的。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-2.jpg-wm.black\" alt=\"image\"></p>\n<p>打开后的效果，键盘有薄塑料壳盖住。我从来是不收拾包装盒就拍照的~来得时候就是这样子，我就这样子拍…</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-3.jpg-wm.black\" alt=\"image\"></p>\n<p>附送的物品：说明书（介绍怎么按快捷键，还是很重要的），刷子，10颗键帽（红蓝各5颗，分别是R1四颗，R4一颗），拔键器，捆绑带。</p>\n<p>要说明的是，键盘线上已经带有一个捆绑带了，这个是额外附送。而那2组R1R4键帽，可以安装在<kbd>Esc</kbd>和方向键上，相当于任选一组配色。至于手感啥的，呵呵。白送的东西嘛。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-4.jpg-wm.black\" alt=\"image\"></p>\n<p>点亮的效果，比我预想的好。冰蓝灯很明亮，白天也非常清楚，这就让灯光倒计时功能发挥作用。一开始我有点犹豫，是选择黑色款还是白色款，主要是考虑倒计时一定要能看清楚。现在确信了，白色一定没问题的。</p>\n<p>这里要说明的是，默认开启，键盘默认是全灯光模式，这个不能修改。</p>\n<p>还好，全灯光相当于70~80%的亮度。默认仅在倒计时的设置过程中，可以启动100%灯光。</p>\n<p>不过，灯光亮度可以设置。</p>\n<p>说道灯光，也就是说它的最大亮点。它可以设置：</p>\n<ul>\n<li><kbd>Fn</kbd> + <kbd>1</kbd>~<kbd>9</kbd> 九组自定义灯光区域，比如我设置<kbd>Fn</kbd> + <kbd>1</kbd> 是字母键盘区域有一个桃心区域亮。</li>\n<li><kbd>Fn</kbd> + 上下左右 调整灯光速度和强度</li>\n<li><kbd>ScrLk</kbd> 设置倒计时，使用<kbd>F1</kbd>一行按键表示x10分钟，最多120分钟，使用字母上方数字表示1-9分钟。这样最多设置129分钟。按下<kbd>ScrLk</kbd>后，所有灯管熄灭，只有<kbd>F1</kbd>~<kbd>F12</kbd>和数字键亮灯，同时<kbd>Enter</kbd>和<kbd>END</kbd>表示完成和取消。选中的时间，使用最亮灯光提示。结束前一分钟，整个字母键盘区（不算空格共计60个按键）开始倒计时，一个一个灯熄灭。全部结束后，灯光闪烁提示。</li>\n<li><kbd>Pause</kbd> 另外一种倒计时，和上一个差不多，就是只能设置10分钟，只有数字区域可用。而且最终闪烁效果不同。我基本上没用过这个提醒。因为实在时间设置太短了。</li>\n</ul>\n<p><strong>这里要说一个bug</strong></p>\n<p>键盘的<kbd>ScrLk</kbd> <kbd>Pause</kbd>是正刻，理论上直接按应该是这两个默认按键，但是其实是特殊功能了，而要想使用默认的按键功能，需要先按下<kbd>Fn</kbd>，相当于侧刻。这个印刷算是bug。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-6.jpg-wm.black\" alt=\"image\"></p>\n<p>键盘的背面。中间那个名牌卡片，用了1周，已经磨下来2次了…我只能把脚垫抬起来了。脚垫是两段式的。</p>\n<p>走线，可以三个方向，算是方便。同样，也已经从线槽掉出来1次了…</p>\n<p>对了，这个键盘很沉，比我的樱桃 G80-3000 还要沉不少。</p>\n<h1 id=\"此外F108的功能\"><a href=\"#此外F108的功能\" class=\"headerlink\" title=\"此外F108的功能\"></a>此外F108的功能</h1><p>除去上面说到的，F108还有的功能：</p>\n<ul>\n<li><kbd>Fn</kbd> + <kbd>F1</kbd>~<kbd>F9</kbd> 配置连键速度等（就是按住不撒手，重复的速度）</li>\n<li><kbd>Fn</kbd> + <kbd>F12</kbd> 切换8种灯光。好像是全开灯，呼吸灯，点亮（按那个那个亮），按一个一行亮，按一个一列亮，全键盘没规律瞎特么亮，水平波浪瞎特么亮，计时亮。</li>\n<li><kbd>Fn</kbd> + <kbd>0</kbd> 关灯</li>\n<li><kbd>Fn</kbd> + <kbd>PrtSc</kbd> 切换键盘布局。共四种：标准Qwery布局，换键Qwery布局（<kbd>win</kbd>和<kbd>Alt</kbd>换位置，其实就是是Mac键位啦），德沃拉克布局，还有一种不知道的布局。</li>\n</ul>\n<p>灯光上，我觉得除了个别时候需要全开灯，和当做计时器的最后一种有实际用途，其他就是呼吸灯和点亮比较好。剩下全是辣鸡！</p>\n<h1 id=\"使用感受\"><a href=\"#使用感受\" class=\"headerlink\" title=\"使用感受\"></a>使用感受</h1><p>说实在的，这个说起来真的很难。</p>\n<p>单说键盘做工，对得起500块的价格，键帽也不错。白色PBT效果，也比我自己组装GH60用的PBT要好，灯光更不用提。</p>\n<p>但是论手感上，竟然没有组装的GH60普通PBT手感好，我也没发现问题…这才是问题所在。可能还要多用用，慢慢感受下。</p>\n<p>不过初步感觉问题出在按键回弹上和按键克数稍微少了一点。</p>\n<p>灯光上，虽然看很多人说是没用，我觉得倒还行，比如9点半打完水，晾好，设置15分钟后吃药。虽然之后还会拖延一点时间，但是确实能起到提醒功能。灯光算是仁者见仁智者见智吧。</p>\n<p>最后，上一张三键盘图，正巧樱桃和GH60全在公司，直接一张拍！</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-5.jpg-wm.black\" alt=\"image\"></p>\n","site":{"data":{}},"excerpt":"<p>IKBC入手一周了，一直太忙，不过也正好让我体验充足。来，上IKBC入手记。</p>\n<p>首先这个键盘确实不贵，才500多一点，IKBC整体都不是很贵，但是很有特色。比如本次我入手的F108，就因为它有计时功能，我觉得可能会有些实用，决定入手看看。</p>","more":"<h1 id=\"IKBC的系列介绍\"><a href=\"#IKBC的系列介绍\" class=\"headerlink\" title=\"IKBC的系列介绍\"></a>IKBC的系列介绍</h1><p>我在挑选的时候，也是有些迷糊，因为虽然系列不多，但是却很接近，有点迷茫。</p>\n<p>根据IKBC的<a href=\"http://www.ikbc.com.cn/\" target=\"_blank\" rel=\"noopener\">官网</a>，我们可以得知有三个系列：F系列，C系列，G系列。这三个系列，都是104/108或者87键盘。<br>还有poker系列，是60键盘。</p>\n<h4 id=\"先说标准的三大系列\"><a href=\"#先说标准的三大系列\" class=\"headerlink\" title=\"先说标准的三大系列\"></a>先说标准的三大系列</h4><p>F是新出的系列，主打灯光，有F108和F87，注意是108按键，没有104按键的。灯光主要是除了常规的GH60客制化系列的常亮、闪动、涟漪、单点点亮等，额外支持：自定义9组常亮灯光区和灯光倒计时。在细节的，我下面再说。</p>\n<p>C和G系列，都是有104键盘和87键盘。</p>\n<p>C系列说是2015年发明的，我没怎么看出来怎么好。反倒是2014年的G系列我觉得还可能有些特色。</p>\n<p>C系列和G系列键帽均是PBT，但是C系列键帽厚实，G系列键帽可以透光（F时光机系列也是透光的）。同时两个系列特殊功能按键稍有不同。</p>\n<p>C系列默认没有灯（可以加灯，换成透光的G系列键帽），G系列默认带灯。</p>\n<p>C系列功能：<kbd>Win</kbd>键锁定，全键盘无冲切换，音量控制，恢复出厂设置。</p>\n<p>G系列功能：音量控制，音乐播放控制，切换<kbd>ctrl</kbd>和<kbd>CapsLock</kbd>位置，鼠标右键按钮。</p>\n<p>C系列只能选择红黑茶青奶轴，G系列可选择更多的轴（红黑茶青奶绿，多一个绿轴）。</p>\n<blockquote>\n<p>据传，C系列加灯之后，可以用<kbd>Fn</kbd> + <kbd>1</kbd>~<kbd>8</kbd>控制灯光。</p>\n</blockquote>\n<h4 id=\"捎带手说下poker\"><a href=\"#捎带手说下poker\" class=\"headerlink\" title=\"捎带手说下poker\"></a>捎带手说下poker</h4><p>这个真的要成谜了…玩笑~</p>\n<p>不过poker系列确实难买。目前poker2，poker3已经全部断货很久了。</p>\n<p>poker分为poker1，poker2，poker3，poker升级版。共计4代产品。目前能买到的新品是poker升级版，或许你运气极好的情况下，能碰上poker3。</p>\n<p>poker升级版和poker3有红黑茶青四种轴。都需要自己加灯。poker升级版说是可以编程和固件升级，poker3因为带有额外三层，我估计编程啥的也问题不大。</p>\n<p>poker系列键盘外观完全一致，仅仅在特殊按键上有区别。</p>\n<p>比如poker3，是可以切换Layer2/Layer3/Layer4的，同时鼠标右键是<kbd>Fn</kbd>+<kbd>z</kbd>。但是<kbd>Insert</kbd> <kbd>Del</kbd> <kbd>PU</kbd> <kbd>PD</kbd> 等键位我认为不合理。键盘内建Qwery/Dvorak等键盘布局。</p>\n<h1 id=\"说说F108\"><a href=\"#说说F108\" class=\"headerlink\" title=\"说说F108\"></a>说说F108</h1><p><img src=\"https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-1.jpg-wm.black\" alt=\"image\"></p>\n<p>IKBC白色红轴（冰蓝灯）</p>\n<p>买回来，包装盒还算可以，谈不上赛睿/雷蛇的精致、樱桃的硬朗，但是人家便宜啊，500多块红轴还带灯光特效啥的。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-2.jpg-wm.black\" alt=\"image\"></p>\n<p>打开后的效果，键盘有薄塑料壳盖住。我从来是不收拾包装盒就拍照的~来得时候就是这样子，我就这样子拍…</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-3.jpg-wm.black\" alt=\"image\"></p>\n<p>附送的物品：说明书（介绍怎么按快捷键，还是很重要的），刷子，10颗键帽（红蓝各5颗，分别是R1四颗，R4一颗），拔键器，捆绑带。</p>\n<p>要说明的是，键盘线上已经带有一个捆绑带了，这个是额外附送。而那2组R1R4键帽，可以安装在<kbd>Esc</kbd>和方向键上，相当于任选一组配色。至于手感啥的，呵呵。白送的东西嘛。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-4.jpg-wm.black\" alt=\"image\"></p>\n<p>点亮的效果，比我预想的好。冰蓝灯很明亮，白天也非常清楚，这就让灯光倒计时功能发挥作用。一开始我有点犹豫，是选择黑色款还是白色款，主要是考虑倒计时一定要能看清楚。现在确信了，白色一定没问题的。</p>\n<p>这里要说明的是，默认开启，键盘默认是全灯光模式，这个不能修改。</p>\n<p>还好，全灯光相当于70~80%的亮度。默认仅在倒计时的设置过程中，可以启动100%灯光。</p>\n<p>不过，灯光亮度可以设置。</p>\n<p>说道灯光，也就是说它的最大亮点。它可以设置：</p>\n<ul>\n<li><kbd>Fn</kbd> + <kbd>1</kbd>~<kbd>9</kbd> 九组自定义灯光区域，比如我设置<kbd>Fn</kbd> + <kbd>1</kbd> 是字母键盘区域有一个桃心区域亮。</li>\n<li><kbd>Fn</kbd> + 上下左右 调整灯光速度和强度</li>\n<li><kbd>ScrLk</kbd> 设置倒计时，使用<kbd>F1</kbd>一行按键表示x10分钟，最多120分钟，使用字母上方数字表示1-9分钟。这样最多设置129分钟。按下<kbd>ScrLk</kbd>后，所有灯管熄灭，只有<kbd>F1</kbd>~<kbd>F12</kbd>和数字键亮灯，同时<kbd>Enter</kbd>和<kbd>END</kbd>表示完成和取消。选中的时间，使用最亮灯光提示。结束前一分钟，整个字母键盘区（不算空格共计60个按键）开始倒计时，一个一个灯熄灭。全部结束后，灯光闪烁提示。</li>\n<li><kbd>Pause</kbd> 另外一种倒计时，和上一个差不多，就是只能设置10分钟，只有数字区域可用。而且最终闪烁效果不同。我基本上没用过这个提醒。因为实在时间设置太短了。</li>\n</ul>\n<p><strong>这里要说一个bug</strong></p>\n<p>键盘的<kbd>ScrLk</kbd> <kbd>Pause</kbd>是正刻，理论上直接按应该是这两个默认按键，但是其实是特殊功能了，而要想使用默认的按键功能，需要先按下<kbd>Fn</kbd>，相当于侧刻。这个印刷算是bug。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-6.jpg-wm.black\" alt=\"image\"></p>\n<p>键盘的背面。中间那个名牌卡片，用了1周，已经磨下来2次了…我只能把脚垫抬起来了。脚垫是两段式的。</p>\n<p>走线，可以三个方向，算是方便。同样，也已经从线槽掉出来1次了…</p>\n<p>对了，这个键盘很沉，比我的樱桃 G80-3000 还要沉不少。</p>\n<h1 id=\"此外F108的功能\"><a href=\"#此外F108的功能\" class=\"headerlink\" title=\"此外F108的功能\"></a>此外F108的功能</h1><p>除去上面说到的，F108还有的功能：</p>\n<ul>\n<li><kbd>Fn</kbd> + <kbd>F1</kbd>~<kbd>F9</kbd> 配置连键速度等（就是按住不撒手，重复的速度）</li>\n<li><kbd>Fn</kbd> + <kbd>F12</kbd> 切换8种灯光。好像是全开灯，呼吸灯，点亮（按那个那个亮），按一个一行亮，按一个一列亮，全键盘没规律瞎特么亮，水平波浪瞎特么亮，计时亮。</li>\n<li><kbd>Fn</kbd> + <kbd>0</kbd> 关灯</li>\n<li><kbd>Fn</kbd> + <kbd>PrtSc</kbd> 切换键盘布局。共四种：标准Qwery布局，换键Qwery布局（<kbd>win</kbd>和<kbd>Alt</kbd>换位置，其实就是是Mac键位啦），德沃拉克布局，还有一种不知道的布局。</li>\n</ul>\n<p>灯光上，我觉得除了个别时候需要全开灯，和当做计时器的最后一种有实际用途，其他就是呼吸灯和点亮比较好。剩下全是辣鸡！</p>\n<h1 id=\"使用感受\"><a href=\"#使用感受\" class=\"headerlink\" title=\"使用感受\"></a>使用感受</h1><p>说实在的，这个说起来真的很难。</p>\n<p>单说键盘做工，对得起500块的价格，键帽也不错。白色PBT效果，也比我自己组装GH60用的PBT要好，灯光更不用提。</p>\n<p>但是论手感上，竟然没有组装的GH60普通PBT手感好，我也没发现问题…这才是问题所在。可能还要多用用，慢慢感受下。</p>\n<p>不过初步感觉问题出在按键回弹上和按键克数稍微少了一点。</p>\n<p>灯光上，虽然看很多人说是没用，我觉得倒还行，比如9点半打完水，晾好，设置15分钟后吃药。虽然之后还会拖延一点时间，但是确实能起到提醒功能。灯光算是仁者见仁智者见智吧。</p>\n<p>最后，上一张三键盘图，正巧樱桃和GH60全在公司，直接一张拍！</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-5.jpg-wm.black\" alt=\"image\"></p>"},{"layout":"post","title":"chrome浏览器无法打开htpps网站的处理","date":"2017-01-09T00:34:00.000Z","_content":"\n在升级chrome53到54的时候，访问https站点经常会出现问题。\n\n<!-- more -->\n\n表现在：\n\n* 首先会提示https不授信，但是可以点击继续访问来处理。\n* 此时有的网站内容是有问题的。\n\n这个问题，今天再次复现时候，正好截图，这样就可以说下处理方法了。\n\n## 问题原因\n\n如果部分资源无法访问，原因很简单，和打开网站一样，也是资源不授信。我们只要是把资源的域名/网站也按照网站打开时候点一下授信就可以了。\n\n至于为什么https的网站chrome变得不授信了，目前我没看到可靠地消息解释。一般都是说更新新版本，大概是时间的问题（当前版本超过60天等）。鉴于国内的情况，更新基本上是很难的。\n\n## 处理方法\n\n今天访问稀土掘金，页面不能正常显示。使用<kbd>cmd</kbd> + <kbd>alt</kbd> + <kbd>I</kbd>（或者windows下<kbd>F12</kbd>）打开面板，切换到`console`栏目下，发现了大量链接访问错误。\n\n![image](https://cdn0.yukapril.com/blog/2017-01-09-chrome-https-error-1.png-wm.black)\n\n只需要右键选择无法访问的链接，新开窗口打开就行了。\n\n![image](https://cdn0.yukapril.com/blog/2017-01-09-chrome-https-error-2.png-wm.black)\n\n熟悉的页面又出现了，继续就可以了。\n\n![image](https://cdn0.yukapril.com/blog/2017-01-09-chrome-https-error-3.png-wm.black)\n\n之后就可以回到原网站，刷新看看效果了。\n\n如果还有失败的链接，继续再来一遍。一个链接的网站域名/端口不同，就算一个新网站，就需要重来一遍，一般网站最多3-4遍足够了。\n\n\n\n","source":"_posts/2017/2017-01-09-chrome-https-error.md","raw":"---\nlayout: post\ntitle: \"chrome浏览器无法打开htpps网站的处理\"\ndate: 2017-01-09 00:34:00 GMT+0000\ncategories: [随笔]\ntags:  [chrome,https,无法连接]\n---\n\n在升级chrome53到54的时候，访问https站点经常会出现问题。\n\n<!-- more -->\n\n表现在：\n\n* 首先会提示https不授信，但是可以点击继续访问来处理。\n* 此时有的网站内容是有问题的。\n\n这个问题，今天再次复现时候，正好截图，这样就可以说下处理方法了。\n\n## 问题原因\n\n如果部分资源无法访问，原因很简单，和打开网站一样，也是资源不授信。我们只要是把资源的域名/网站也按照网站打开时候点一下授信就可以了。\n\n至于为什么https的网站chrome变得不授信了，目前我没看到可靠地消息解释。一般都是说更新新版本，大概是时间的问题（当前版本超过60天等）。鉴于国内的情况，更新基本上是很难的。\n\n## 处理方法\n\n今天访问稀土掘金，页面不能正常显示。使用<kbd>cmd</kbd> + <kbd>alt</kbd> + <kbd>I</kbd>（或者windows下<kbd>F12</kbd>）打开面板，切换到`console`栏目下，发现了大量链接访问错误。\n\n![image](https://cdn0.yukapril.com/blog/2017-01-09-chrome-https-error-1.png-wm.black)\n\n只需要右键选择无法访问的链接，新开窗口打开就行了。\n\n![image](https://cdn0.yukapril.com/blog/2017-01-09-chrome-https-error-2.png-wm.black)\n\n熟悉的页面又出现了，继续就可以了。\n\n![image](https://cdn0.yukapril.com/blog/2017-01-09-chrome-https-error-3.png-wm.black)\n\n之后就可以回到原网站，刷新看看效果了。\n\n如果还有失败的链接，继续再来一遍。一个链接的网站域名/端口不同，就算一个新网站，就需要重来一遍，一般网站最多3-4遍足够了。\n\n\n\n","slug":"2017-2017-01-09-chrome-https-error","published":1,"updated":"2019-07-18T17:19:07.163Z","comments":1,"photos":[],"link":"","_id":"cjy8y72qo0012s21doqiuz1mt","content":"<p>在升级chrome53到54的时候，访问https站点经常会出现问题。</p>\n<a id=\"more\"></a>\n\n<p>表现在：</p>\n<ul>\n<li>首先会提示https不授信，但是可以点击继续访问来处理。</li>\n<li>此时有的网站内容是有问题的。</li>\n</ul>\n<p>这个问题，今天再次复现时候，正好截图，这样就可以说下处理方法了。</p>\n<h2 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h2><p>如果部分资源无法访问，原因很简单，和打开网站一样，也是资源不授信。我们只要是把资源的域名/网站也按照网站打开时候点一下授信就可以了。</p>\n<p>至于为什么https的网站chrome变得不授信了，目前我没看到可靠地消息解释。一般都是说更新新版本，大概是时间的问题（当前版本超过60天等）。鉴于国内的情况，更新基本上是很难的。</p>\n<h2 id=\"处理方法\"><a href=\"#处理方法\" class=\"headerlink\" title=\"处理方法\"></a>处理方法</h2><p>今天访问稀土掘金，页面不能正常显示。使用<kbd>cmd</kbd> + <kbd>alt</kbd> + <kbd>I</kbd>（或者windows下<kbd>F12</kbd>）打开面板，切换到<code>console</code>栏目下，发现了大量链接访问错误。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-01-09-chrome-https-error-1.png-wm.black\" alt=\"image\"></p>\n<p>只需要右键选择无法访问的链接，新开窗口打开就行了。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-01-09-chrome-https-error-2.png-wm.black\" alt=\"image\"></p>\n<p>熟悉的页面又出现了，继续就可以了。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-01-09-chrome-https-error-3.png-wm.black\" alt=\"image\"></p>\n<p>之后就可以回到原网站，刷新看看效果了。</p>\n<p>如果还有失败的链接，继续再来一遍。一个链接的网站域名/端口不同，就算一个新网站，就需要重来一遍，一般网站最多3-4遍足够了。</p>\n","site":{"data":{}},"excerpt":"<p>在升级chrome53到54的时候，访问https站点经常会出现问题。</p>","more":"<p>表现在：</p>\n<ul>\n<li>首先会提示https不授信，但是可以点击继续访问来处理。</li>\n<li>此时有的网站内容是有问题的。</li>\n</ul>\n<p>这个问题，今天再次复现时候，正好截图，这样就可以说下处理方法了。</p>\n<h2 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h2><p>如果部分资源无法访问，原因很简单，和打开网站一样，也是资源不授信。我们只要是把资源的域名/网站也按照网站打开时候点一下授信就可以了。</p>\n<p>至于为什么https的网站chrome变得不授信了，目前我没看到可靠地消息解释。一般都是说更新新版本，大概是时间的问题（当前版本超过60天等）。鉴于国内的情况，更新基本上是很难的。</p>\n<h2 id=\"处理方法\"><a href=\"#处理方法\" class=\"headerlink\" title=\"处理方法\"></a>处理方法</h2><p>今天访问稀土掘金，页面不能正常显示。使用<kbd>cmd</kbd> + <kbd>alt</kbd> + <kbd>I</kbd>（或者windows下<kbd>F12</kbd>）打开面板，切换到<code>console</code>栏目下，发现了大量链接访问错误。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-01-09-chrome-https-error-1.png-wm.black\" alt=\"image\"></p>\n<p>只需要右键选择无法访问的链接，新开窗口打开就行了。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-01-09-chrome-https-error-2.png-wm.black\" alt=\"image\"></p>\n<p>熟悉的页面又出现了，继续就可以了。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-01-09-chrome-https-error-3.png-wm.black\" alt=\"image\"></p>\n<p>之后就可以回到原网站，刷新看看效果了。</p>\n<p>如果还有失败的链接，继续再来一遍。一个链接的网站域名/端口不同，就算一个新网站，就需要重来一遍，一般网站最多3-4遍足够了。</p>"},{"layout":"post","title":"js 模板编译的实现","date":"2017-01-09T21:03:00.000Z","_content":"\n看过很多模板，语法各不相同，执行效率也差异很大。在用angular 1 的时候，有一个名词是编译（$compile）。我很诧异，js作为解释型语言，为什么要编译？\n\n后来我也看过一些模板文章，终于明白的编译的用意。\n\n<!-- more -->\n\n## 编译是什么\n\n我认为编译是一种格式变成另一种格式的过程。编译会导致好的结果，比如书写简单的代码，编译出来复杂的代码；或者，提高代码的使用性能。\n\n比如说`jade` （现在改名叫做`pug`），就是编译从简单到复杂的过程\n\n```html\np hello!\n```\n\n这和html也相差太远了吧？所以，需要用插件对其进行编译，编译成`<p>hello!</p>`，之后我们就可以拿着编译后的内容随意使用了。\n\n**这里我更想说模板。** 写一个最简单的模板。\n\n```html\n<p>Hello, { {name} }!</p>\n```\n\n这个模板用数据`{name:'world'}`渲染后的结果就是：\n\n```html\n<p>Hello, world!</p>\n```\n\n来个问题，这个你怎么实现？\n\n## 模板的简单实现\n\n继续说上一个问题。来看看如何实现。\n\n如果项目非常简单，都不用任何框架，自己写一个就好。写法原理很简单：正则查找替换就行了。\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"UTF-8\">\n    <title>template</title>\n</head>\n\n<body>\n<script>\n    var template = function (tpl, data) {\n        var ret = tpl;\n        for (var item in data) {\n            // 遍历data每一个字段\n            if (data.hasOwnProperty(item)) {\n                var re = new RegExp('{ {' + item + '} }', 'g');\n                ret = ret.replace(re, data[item]);\n            }\n        }\n        return ret;\n    };\n\n    var tpl = \"<p>Hello, I'm { {name} }! { {age} } years old!</p>\";\n    var data = {\n        name: 'Jason',\n        age: 25\n    };\n    var result = template(tpl, data);\n    console.log(result);\n</script>\n</body>\n\n</html>\n```\n\n这个难度很低，直接正则替换就实现了，不做解释了。这个真的太简单了，因为除了正则替换字段，啥都干不了。\n\n不信看看这个简单的需求：\n\n模板：\n\n```html\n<p>Hello, I'm { {user.name} }! { {user.age} } years old!</p>\n```\n\n渲染数据是：\n\n```js\nvar data = {\n    user: {\n        name: 'Jason',\n        age: 25\n    }\n}\n```\n\n还用上面的方法，就失效了。还用正则的话，就很难来做了。因为需要做语法/词法分析，看看大括号内写的是什么了。\n\n## 模板编译\n\n我们先回到最简单的例子上来说。\n\n上面，我们实现的思路是，每次传入模板和数据，执行正则替换。假设10个字段，就是替换10次。这样性能也是个问题，因为每次都要跑循环去正则去替换。而且这还仅仅是单数据渲染，如果要是加上 `if` `for` 这样的语法可咋办？\n\n对于上面的这个模板，其实也可以这样来写：\n\n```js\nvar tpl = function(data){\n    return \"<p>Hello, I'm \" + data.name + \"! \" + data.age + \" years old!</p>\";\n}\n```\n\n这么写的好处：只需一次**编译**，之后再使用只需直接填充数据即可。而且可以方便的支持 `data.user.name` 这种形式。\n\n这里涉及一个功能点，一般可能用不到，我点一下。\n\n#### 通过字符串生成函数\n\n我们要生成一个函数，传入 `x` `y` ，执行 `return x + y`来获得求和功能。\n\n可以这样写：\n\n```js\nvar fn = new Function('x','y','return x + y');\n\nconsole.log(fn);\n\n// 返回\n(function(x,y\n/**/) {\nreturn x + y\n})\n```\n\n通过`new Function`，我们可以创造函数。下文会用到。\n\n#### 模板编译\n\n我们先整理下思路，应该是传入tpl模板字符串，通过 `new Function` 方式返回一个新函数。新函数接收一个对象，我叫做 `obj`。\n\n```js\nvar template = function (tpl) {\n    // 模板字符串\n    var retStr = '';\n    //...\n    return new Function('obj', retStr);\n};\n```\n\n我们接下来要做的是，把`{ {xxx.xxx} }`部分都找出来，替换为`obj.xxx.xxx`就行了。\n\n```js\nvar template = function (tpl) {\n    // 模板字符串\n    var retStr = tpl.replace(/{ {(.+?)} }/g, 'obj.$1');\n    retStr = 'return \"' + retStr + '\"';\n    return new Function('obj', retStr);\n};\n\nvar tpl = \"<p>Hello, I'm { {user.name} }! { {user.age} } years old!</p>\";\nvar render = template(tpl);\nconsole.log(render);\n```\n\n这样写，发现函数是\n\n```js\nfunction anonymous(obj\n/**/) {\nreturn \"<p>Hello, I'm obj.user.name! obj.user.age years old!</p>\"\n}\n```\n\n很明显不行，至少应该把正则替换那句修改下，前后加上引号和加号才行。最终变成这样子：\n\n```js\nvar template = function (tpl) {\n    // 模板字符串\n    var retStr = tpl.replace(/{ {(.+?)} }/g, '\" + obj.$1 + \"');\n    retStr = 'return \"' + retStr + '\"';\n    return new Function('obj', retStr);\n};\n\nvar tpl = \"<p>Hello, I'm { {user.name} }! { {user.age} } years old!</p>\";\nvar data = {\n    user: {\n        name: 'Jason',\n        age: 25\n    }\n};\nvar render = template(tpl);\nconsole.log(render);\nvar result = render(data);\nconsole.log(result);\n```\n\n我们可以看到结果正常了\n\n函数是：\n\n```js\nfunction anonymous(obj\n/**/) {\nreturn \"<p>Hello, I'm \" + obj.user.name + \"! \" + obj.user.age + \" years old!</p>\"\n}\n```\n\n渲染结果是：\n\n```html\n<p>Hello, I'm Jason! 25 years old!</p>\n```\n\n## 高级模板编译\n\n上面的例子，可以处理各种对象形式的赋值。我们还应该支持 `if` `for` 这样的语法。 这里我就不展开写了。代码我放在了 [Github - template-render](https://github.com/yukapril/template-render)。代码是ES6的，可以放在最新的浏览器执行，或者**自行**去编译。\n\n我说下过程：\n\n1. 字符串模板解析：要从模板中分析出那些是普通字符串，那些是模板代码。见 [`parse2array`](https://github.com/yukapril/template-render/blob/master/template.js#L27) 方法。\n2. 合成返回函数主体：可以直接写入字符串，也有人喜欢写入数组（最后执行`arr.join('')`）。要区分三种情况，普通字符串（直接简单处理返回就行），普通赋值语法（稍作处理返回），高级语法字符串（需要根据你自己定义的模板语法来写解释器）。见 [编译为函数](https://github.com/yukapril/template-render/blob/master/template.js#L92) 和 [高级语法处理 - syntaxParse](https://github.com/yukapril/template-render/blob/master/template.js#L67)。\n3. 将第二步的内容稍加处理，采用 `new Function` 返回就行了。见 [最后处理并返回](https://github.com/yukapril/template-render/blob/master/template.js#L109)\n\n还有一些经验可以借鉴：\n\n1. 使用`with`语法。这样可以方便的处理多层的对象，对上文来说，就是可以省去正则替换后中的`obj`了。这个灵感好像来源于Vue，我记得在哪里听说过。这个语法我没用过，曾经听说是效率低下，现在不太清楚。可以参见[这里](https://www.zhihu.com/question/49929356)。\n\n2. 我对逻辑循环等语法进行了设计，比如：\n\n```html\n{ {# each hobbys as item } }\n    <li>{ {$index+1} }/{ {$length} } - { {item} }</li>\n{ {# endeach } }\n```\n\n我也见有人这里干脆不设计，直接就用原生js语法，那么上面的三步过程，可以调整为两步：第一步解析，第二步当做js语法进行拼接处理。\n\n思路例子总归是例子，虽然功能可以用，但是还有许多需要完善的地方，比如要渲染的字符串是html怎么办，应该需要转义处理；模板换行等需要处理（例子里面我已经处理了），如果渲染的字段不是字符串而是函数要处理（例子里面部分位置已经处理），渲染数据缺失情况等处理。\n\n----\n\n通过做模板编译这个例子，就会感觉到React的JSX设计还是有道理的，方便解析，方便书写，就是不方便理解...","source":"_posts/2017/2017-01-09-js-template-compile.md","raw":"---\nlayout: post\ntitle: \"js 模板编译的实现\"\ndate: 2017-01-09 21:03:00 GMT+0000\ncategories: [前端]\ntags:  [模板,编译]\n---\n\n看过很多模板，语法各不相同，执行效率也差异很大。在用angular 1 的时候，有一个名词是编译（$compile）。我很诧异，js作为解释型语言，为什么要编译？\n\n后来我也看过一些模板文章，终于明白的编译的用意。\n\n<!-- more -->\n\n## 编译是什么\n\n我认为编译是一种格式变成另一种格式的过程。编译会导致好的结果，比如书写简单的代码，编译出来复杂的代码；或者，提高代码的使用性能。\n\n比如说`jade` （现在改名叫做`pug`），就是编译从简单到复杂的过程\n\n```html\np hello!\n```\n\n这和html也相差太远了吧？所以，需要用插件对其进行编译，编译成`<p>hello!</p>`，之后我们就可以拿着编译后的内容随意使用了。\n\n**这里我更想说模板。** 写一个最简单的模板。\n\n```html\n<p>Hello, { {name} }!</p>\n```\n\n这个模板用数据`{name:'world'}`渲染后的结果就是：\n\n```html\n<p>Hello, world!</p>\n```\n\n来个问题，这个你怎么实现？\n\n## 模板的简单实现\n\n继续说上一个问题。来看看如何实现。\n\n如果项目非常简单，都不用任何框架，自己写一个就好。写法原理很简单：正则查找替换就行了。\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"UTF-8\">\n    <title>template</title>\n</head>\n\n<body>\n<script>\n    var template = function (tpl, data) {\n        var ret = tpl;\n        for (var item in data) {\n            // 遍历data每一个字段\n            if (data.hasOwnProperty(item)) {\n                var re = new RegExp('{ {' + item + '} }', 'g');\n                ret = ret.replace(re, data[item]);\n            }\n        }\n        return ret;\n    };\n\n    var tpl = \"<p>Hello, I'm { {name} }! { {age} } years old!</p>\";\n    var data = {\n        name: 'Jason',\n        age: 25\n    };\n    var result = template(tpl, data);\n    console.log(result);\n</script>\n</body>\n\n</html>\n```\n\n这个难度很低，直接正则替换就实现了，不做解释了。这个真的太简单了，因为除了正则替换字段，啥都干不了。\n\n不信看看这个简单的需求：\n\n模板：\n\n```html\n<p>Hello, I'm { {user.name} }! { {user.age} } years old!</p>\n```\n\n渲染数据是：\n\n```js\nvar data = {\n    user: {\n        name: 'Jason',\n        age: 25\n    }\n}\n```\n\n还用上面的方法，就失效了。还用正则的话，就很难来做了。因为需要做语法/词法分析，看看大括号内写的是什么了。\n\n## 模板编译\n\n我们先回到最简单的例子上来说。\n\n上面，我们实现的思路是，每次传入模板和数据，执行正则替换。假设10个字段，就是替换10次。这样性能也是个问题，因为每次都要跑循环去正则去替换。而且这还仅仅是单数据渲染，如果要是加上 `if` `for` 这样的语法可咋办？\n\n对于上面的这个模板，其实也可以这样来写：\n\n```js\nvar tpl = function(data){\n    return \"<p>Hello, I'm \" + data.name + \"! \" + data.age + \" years old!</p>\";\n}\n```\n\n这么写的好处：只需一次**编译**，之后再使用只需直接填充数据即可。而且可以方便的支持 `data.user.name` 这种形式。\n\n这里涉及一个功能点，一般可能用不到，我点一下。\n\n#### 通过字符串生成函数\n\n我们要生成一个函数，传入 `x` `y` ，执行 `return x + y`来获得求和功能。\n\n可以这样写：\n\n```js\nvar fn = new Function('x','y','return x + y');\n\nconsole.log(fn);\n\n// 返回\n(function(x,y\n/**/) {\nreturn x + y\n})\n```\n\n通过`new Function`，我们可以创造函数。下文会用到。\n\n#### 模板编译\n\n我们先整理下思路，应该是传入tpl模板字符串，通过 `new Function` 方式返回一个新函数。新函数接收一个对象，我叫做 `obj`。\n\n```js\nvar template = function (tpl) {\n    // 模板字符串\n    var retStr = '';\n    //...\n    return new Function('obj', retStr);\n};\n```\n\n我们接下来要做的是，把`{ {xxx.xxx} }`部分都找出来，替换为`obj.xxx.xxx`就行了。\n\n```js\nvar template = function (tpl) {\n    // 模板字符串\n    var retStr = tpl.replace(/{ {(.+?)} }/g, 'obj.$1');\n    retStr = 'return \"' + retStr + '\"';\n    return new Function('obj', retStr);\n};\n\nvar tpl = \"<p>Hello, I'm { {user.name} }! { {user.age} } years old!</p>\";\nvar render = template(tpl);\nconsole.log(render);\n```\n\n这样写，发现函数是\n\n```js\nfunction anonymous(obj\n/**/) {\nreturn \"<p>Hello, I'm obj.user.name! obj.user.age years old!</p>\"\n}\n```\n\n很明显不行，至少应该把正则替换那句修改下，前后加上引号和加号才行。最终变成这样子：\n\n```js\nvar template = function (tpl) {\n    // 模板字符串\n    var retStr = tpl.replace(/{ {(.+?)} }/g, '\" + obj.$1 + \"');\n    retStr = 'return \"' + retStr + '\"';\n    return new Function('obj', retStr);\n};\n\nvar tpl = \"<p>Hello, I'm { {user.name} }! { {user.age} } years old!</p>\";\nvar data = {\n    user: {\n        name: 'Jason',\n        age: 25\n    }\n};\nvar render = template(tpl);\nconsole.log(render);\nvar result = render(data);\nconsole.log(result);\n```\n\n我们可以看到结果正常了\n\n函数是：\n\n```js\nfunction anonymous(obj\n/**/) {\nreturn \"<p>Hello, I'm \" + obj.user.name + \"! \" + obj.user.age + \" years old!</p>\"\n}\n```\n\n渲染结果是：\n\n```html\n<p>Hello, I'm Jason! 25 years old!</p>\n```\n\n## 高级模板编译\n\n上面的例子，可以处理各种对象形式的赋值。我们还应该支持 `if` `for` 这样的语法。 这里我就不展开写了。代码我放在了 [Github - template-render](https://github.com/yukapril/template-render)。代码是ES6的，可以放在最新的浏览器执行，或者**自行**去编译。\n\n我说下过程：\n\n1. 字符串模板解析：要从模板中分析出那些是普通字符串，那些是模板代码。见 [`parse2array`](https://github.com/yukapril/template-render/blob/master/template.js#L27) 方法。\n2. 合成返回函数主体：可以直接写入字符串，也有人喜欢写入数组（最后执行`arr.join('')`）。要区分三种情况，普通字符串（直接简单处理返回就行），普通赋值语法（稍作处理返回），高级语法字符串（需要根据你自己定义的模板语法来写解释器）。见 [编译为函数](https://github.com/yukapril/template-render/blob/master/template.js#L92) 和 [高级语法处理 - syntaxParse](https://github.com/yukapril/template-render/blob/master/template.js#L67)。\n3. 将第二步的内容稍加处理，采用 `new Function` 返回就行了。见 [最后处理并返回](https://github.com/yukapril/template-render/blob/master/template.js#L109)\n\n还有一些经验可以借鉴：\n\n1. 使用`with`语法。这样可以方便的处理多层的对象，对上文来说，就是可以省去正则替换后中的`obj`了。这个灵感好像来源于Vue，我记得在哪里听说过。这个语法我没用过，曾经听说是效率低下，现在不太清楚。可以参见[这里](https://www.zhihu.com/question/49929356)。\n\n2. 我对逻辑循环等语法进行了设计，比如：\n\n```html\n{ {# each hobbys as item } }\n    <li>{ {$index+1} }/{ {$length} } - { {item} }</li>\n{ {# endeach } }\n```\n\n我也见有人这里干脆不设计，直接就用原生js语法，那么上面的三步过程，可以调整为两步：第一步解析，第二步当做js语法进行拼接处理。\n\n思路例子总归是例子，虽然功能可以用，但是还有许多需要完善的地方，比如要渲染的字符串是html怎么办，应该需要转义处理；模板换行等需要处理（例子里面我已经处理了），如果渲染的字段不是字符串而是函数要处理（例子里面部分位置已经处理），渲染数据缺失情况等处理。\n\n----\n\n通过做模板编译这个例子，就会感觉到React的JSX设计还是有道理的，方便解析，方便书写，就是不方便理解...","slug":"2017-2017-01-09-js-template-compile","published":1,"updated":"2019-07-18T17:19:07.219Z","comments":1,"photos":[],"link":"","_id":"cjy8y72qp0015s21dlx2nh6q9","content":"<p>看过很多模板，语法各不相同，执行效率也差异很大。在用angular 1 的时候，有一个名词是编译（$compile）。我很诧异，js作为解释型语言，为什么要编译？</p>\n<p>后来我也看过一些模板文章，终于明白的编译的用意。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"编译是什么\"><a href=\"#编译是什么\" class=\"headerlink\" title=\"编译是什么\"></a>编译是什么</h2><p>我认为编译是一种格式变成另一种格式的过程。编译会导致好的结果，比如书写简单的代码，编译出来复杂的代码；或者，提高代码的使用性能。</p>\n<p>比如说<code>jade</code> （现在改名叫做<code>pug</code>），就是编译从简单到复杂的过程</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p hello!</span><br></pre></td></tr></table></figure>\n\n<p>这和html也相差太远了吧？所以，需要用插件对其进行编译，编译成<code>&lt;p&gt;hello!&lt;/p&gt;</code>，之后我们就可以拿着编译后的内容随意使用了。</p>\n<p><strong>这里我更想说模板。</strong> 写一个最简单的模板。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello, &#123; &#123;name&#125; &#125;!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个模板用数据<code>{name:&#39;world&#39;}</code>渲染后的结果就是：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>来个问题，这个你怎么实现？</p>\n<h2 id=\"模板的简单实现\"><a href=\"#模板的简单实现\" class=\"headerlink\" title=\"模板的简单实现\"></a>模板的简单实现</h2><p>继续说上一个问题。来看看如何实现。</p>\n<p>如果项目非常简单，都不用任何框架，自己写一个就好。写法原理很简单：正则查找替换就行了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>template<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> template = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tpl, data</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> ret = tpl;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> data) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 遍历data每一个字段</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">if</span> (data.hasOwnProperty(item)) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> re = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'&#123; &#123;'</span> + item + <span class=\"string\">'&#125; &#125;'</span>, <span class=\"string\">'g'</span>);</span></span><br><span class=\"line\">                ret = ret.replace(re, data[item]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> ret;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> tpl = <span class=\"string\">\"&lt;p&gt;Hello, I'm &#123; &#123;name&#125; &#125;! &#123; &#123;age&#125; &#125; years old!&lt;/p&gt;\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> data = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        name: <span class=\"string\">'Jason'</span>,</span></span><br><span class=\"line\">        age: 25</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> result = template(tpl, data);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(result);</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个难度很低，直接正则替换就实现了，不做解释了。这个真的太简单了，因为除了正则替换字段，啥都干不了。</p>\n<p>不信看看这个简单的需求：</p>\n<p>模板：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello, I'm &#123; &#123;user.name&#125; &#125;! &#123; &#123;user.age&#125; &#125; years old!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>渲染数据是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">    user: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'Jason'</span>,</span><br><span class=\"line\">        age: <span class=\"number\">25</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还用上面的方法，就失效了。还用正则的话，就很难来做了。因为需要做语法/词法分析，看看大括号内写的是什么了。</p>\n<h2 id=\"模板编译\"><a href=\"#模板编译\" class=\"headerlink\" title=\"模板编译\"></a>模板编译</h2><p>我们先回到最简单的例子上来说。</p>\n<p>上面，我们实现的思路是，每次传入模板和数据，执行正则替换。假设10个字段，就是替换10次。这样性能也是个问题，因为每次都要跑循环去正则去替换。而且这还仅仅是单数据渲染，如果要是加上 <code>if</code> <code>for</code> 这样的语法可咋办？</p>\n<p>对于上面的这个模板，其实也可以这样来写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tpl = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;p&gt;Hello, I'm \"</span> + data.name + <span class=\"string\">\"! \"</span> + data.age + <span class=\"string\">\" years old!&lt;/p&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这么写的好处：只需一次<strong>编译</strong>，之后再使用只需直接填充数据即可。而且可以方便的支持 <code>data.user.name</code> 这种形式。</p>\n<p>这里涉及一个功能点，一般可能用不到，我点一下。</p>\n<h4 id=\"通过字符串生成函数\"><a href=\"#通过字符串生成函数\" class=\"headerlink\" title=\"通过字符串生成函数\"></a>通过字符串生成函数</h4><p>我们要生成一个函数，传入 <code>x</code> <code>y</code> ，执行 <code>return x + y</code>来获得求和功能。</p>\n<p>可以这样写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'x'</span>,<span class=\"string\">'y'</span>,<span class=\"string\">'return x + y'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fn);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"regexp\">/**/</span></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>new Function</code>，我们可以创造函数。下文会用到。</p>\n<h4 id=\"模板编译-1\"><a href=\"#模板编译-1\" class=\"headerlink\" title=\"模板编译\"></a>模板编译</h4><p>我们先整理下思路，应该是传入tpl模板字符串，通过 <code>new Function</code> 方式返回一个新函数。新函数接收一个对象，我叫做 <code>obj</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> template = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tpl</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 模板字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> retStr = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'obj'</span>, retStr);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>我们接下来要做的是，把<code>{ {xxx.xxx} }</code>部分都找出来，替换为<code>obj.xxx.xxx</code>就行了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> template = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tpl</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 模板字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> retStr = tpl.replace(<span class=\"regexp\">/&#123; &#123;(.+?)&#125; &#125;/g</span>, <span class=\"string\">'obj.$1'</span>);</span><br><span class=\"line\">    retStr = <span class=\"string\">'return \"'</span> + retStr + <span class=\"string\">'\"'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'obj'</span>, retStr);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> tpl = <span class=\"string\">\"&lt;p&gt;Hello, I'm &#123; &#123;user.name&#125; &#125;! &#123; &#123;user.age&#125; &#125; years old!&lt;/p&gt;\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> render = template(tpl);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(render);</span><br></pre></td></tr></table></figure>\n\n<p>这样写，发现函数是</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">anonymous</span>(<span class=\"params\">obj</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"regexp\">/**/</span></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">\"&lt;p&gt;Hello, I'm obj.user.name! obj.user.age years old!&lt;/p&gt;\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>很明显不行，至少应该把正则替换那句修改下，前后加上引号和加号才行。最终变成这样子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> template = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tpl</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 模板字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> retStr = tpl.replace(<span class=\"regexp\">/&#123; &#123;(.+?)&#125; &#125;/g</span>, <span class=\"string\">'\" + obj.$1 + \"'</span>);</span><br><span class=\"line\">    retStr = <span class=\"string\">'return \"'</span> + retStr + <span class=\"string\">'\"'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'obj'</span>, retStr);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> tpl = <span class=\"string\">\"&lt;p&gt;Hello, I'm &#123; &#123;user.name&#125; &#125;! &#123; &#123;user.age&#125; &#125; years old!&lt;/p&gt;\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">    user: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'Jason'</span>,</span><br><span class=\"line\">        age: <span class=\"number\">25</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> render = template(tpl);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(render);</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = render(data);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到结果正常了</p>\n<p>函数是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">anonymous</span>(<span class=\"params\">obj</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"regexp\">/**/</span></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">\"&lt;p&gt;Hello, I'm \"</span> + obj.user.name + <span class=\"string\">\"! \"</span> + obj.user.age + <span class=\"string\">\" years old!&lt;/p&gt;\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>渲染结果是：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello, I'm Jason! 25 years old!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"高级模板编译\"><a href=\"#高级模板编译\" class=\"headerlink\" title=\"高级模板编译\"></a>高级模板编译</h2><p>上面的例子，可以处理各种对象形式的赋值。我们还应该支持 <code>if</code> <code>for</code> 这样的语法。 这里我就不展开写了。代码我放在了 <a href=\"https://github.com/yukapril/template-render\" target=\"_blank\" rel=\"noopener\">Github - template-render</a>。代码是ES6的，可以放在最新的浏览器执行，或者<strong>自行</strong>去编译。</p>\n<p>我说下过程：</p>\n<ol>\n<li>字符串模板解析：要从模板中分析出那些是普通字符串，那些是模板代码。见 <a href=\"https://github.com/yukapril/template-render/blob/master/template.js#L27\" target=\"_blank\" rel=\"noopener\"><code>parse2array</code></a> 方法。</li>\n<li>合成返回函数主体：可以直接写入字符串，也有人喜欢写入数组（最后执行<code>arr.join(&#39;&#39;)</code>）。要区分三种情况，普通字符串（直接简单处理返回就行），普通赋值语法（稍作处理返回），高级语法字符串（需要根据你自己定义的模板语法来写解释器）。见 <a href=\"https://github.com/yukapril/template-render/blob/master/template.js#L92\" target=\"_blank\" rel=\"noopener\">编译为函数</a> 和 <a href=\"https://github.com/yukapril/template-render/blob/master/template.js#L67\" target=\"_blank\" rel=\"noopener\">高级语法处理 - syntaxParse</a>。</li>\n<li>将第二步的内容稍加处理，采用 <code>new Function</code> 返回就行了。见 <a href=\"https://github.com/yukapril/template-render/blob/master/template.js#L109\" target=\"_blank\" rel=\"noopener\">最后处理并返回</a></li>\n</ol>\n<p>还有一些经验可以借鉴：</p>\n<ol>\n<li><p>使用<code>with</code>语法。这样可以方便的处理多层的对象，对上文来说，就是可以省去正则替换后中的<code>obj</code>了。这个灵感好像来源于Vue，我记得在哪里听说过。这个语法我没用过，曾经听说是效率低下，现在不太清楚。可以参见<a href=\"https://www.zhihu.com/question/49929356\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n</li>\n<li><p>我对逻辑循环等语法进行了设计，比如：</p>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; &#123;# each hobbys as item &#125; &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123; &#123;$index+1&#125; &#125;/&#123; &#123;$length&#125; &#125; - &#123; &#123;item&#125; &#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">&#123; &#123;# endeach &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>我也见有人这里干脆不设计，直接就用原生js语法，那么上面的三步过程，可以调整为两步：第一步解析，第二步当做js语法进行拼接处理。</p>\n<p>思路例子总归是例子，虽然功能可以用，但是还有许多需要完善的地方，比如要渲染的字符串是html怎么办，应该需要转义处理；模板换行等需要处理（例子里面我已经处理了），如果渲染的字段不是字符串而是函数要处理（例子里面部分位置已经处理），渲染数据缺失情况等处理。</p>\n<hr>\n<p>通过做模板编译这个例子，就会感觉到React的JSX设计还是有道理的，方便解析，方便书写，就是不方便理解…</p>\n","site":{"data":{}},"excerpt":"<p>看过很多模板，语法各不相同，执行效率也差异很大。在用angular 1 的时候，有一个名词是编译（$compile）。我很诧异，js作为解释型语言，为什么要编译？</p>\n<p>后来我也看过一些模板文章，终于明白的编译的用意。</p>","more":"<h2 id=\"编译是什么\"><a href=\"#编译是什么\" class=\"headerlink\" title=\"编译是什么\"></a>编译是什么</h2><p>我认为编译是一种格式变成另一种格式的过程。编译会导致好的结果，比如书写简单的代码，编译出来复杂的代码；或者，提高代码的使用性能。</p>\n<p>比如说<code>jade</code> （现在改名叫做<code>pug</code>），就是编译从简单到复杂的过程</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p hello!</span><br></pre></td></tr></table></figure>\n\n<p>这和html也相差太远了吧？所以，需要用插件对其进行编译，编译成<code>&lt;p&gt;hello!&lt;/p&gt;</code>，之后我们就可以拿着编译后的内容随意使用了。</p>\n<p><strong>这里我更想说模板。</strong> 写一个最简单的模板。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello, &#123; &#123;name&#125; &#125;!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个模板用数据<code>{name:&#39;world&#39;}</code>渲染后的结果就是：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>来个问题，这个你怎么实现？</p>\n<h2 id=\"模板的简单实现\"><a href=\"#模板的简单实现\" class=\"headerlink\" title=\"模板的简单实现\"></a>模板的简单实现</h2><p>继续说上一个问题。来看看如何实现。</p>\n<p>如果项目非常简单，都不用任何框架，自己写一个就好。写法原理很简单：正则查找替换就行了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>template<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> template = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tpl, data</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> ret = tpl;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> data) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 遍历data每一个字段</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">if</span> (data.hasOwnProperty(item)) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> re = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'&#123; &#123;'</span> + item + <span class=\"string\">'&#125; &#125;'</span>, <span class=\"string\">'g'</span>);</span></span><br><span class=\"line\">                ret = ret.replace(re, data[item]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> ret;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> tpl = <span class=\"string\">\"&lt;p&gt;Hello, I'm &#123; &#123;name&#125; &#125;! &#123; &#123;age&#125; &#125; years old!&lt;/p&gt;\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> data = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        name: <span class=\"string\">'Jason'</span>,</span></span><br><span class=\"line\">        age: 25</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> result = template(tpl, data);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(result);</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个难度很低，直接正则替换就实现了，不做解释了。这个真的太简单了，因为除了正则替换字段，啥都干不了。</p>\n<p>不信看看这个简单的需求：</p>\n<p>模板：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello, I'm &#123; &#123;user.name&#125; &#125;! &#123; &#123;user.age&#125; &#125; years old!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>渲染数据是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">    user: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'Jason'</span>,</span><br><span class=\"line\">        age: <span class=\"number\">25</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还用上面的方法，就失效了。还用正则的话，就很难来做了。因为需要做语法/词法分析，看看大括号内写的是什么了。</p>\n<h2 id=\"模板编译\"><a href=\"#模板编译\" class=\"headerlink\" title=\"模板编译\"></a>模板编译</h2><p>我们先回到最简单的例子上来说。</p>\n<p>上面，我们实现的思路是，每次传入模板和数据，执行正则替换。假设10个字段，就是替换10次。这样性能也是个问题，因为每次都要跑循环去正则去替换。而且这还仅仅是单数据渲染，如果要是加上 <code>if</code> <code>for</code> 这样的语法可咋办？</p>\n<p>对于上面的这个模板，其实也可以这样来写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tpl = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;p&gt;Hello, I'm \"</span> + data.name + <span class=\"string\">\"! \"</span> + data.age + <span class=\"string\">\" years old!&lt;/p&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这么写的好处：只需一次<strong>编译</strong>，之后再使用只需直接填充数据即可。而且可以方便的支持 <code>data.user.name</code> 这种形式。</p>\n<p>这里涉及一个功能点，一般可能用不到，我点一下。</p>\n<h4 id=\"通过字符串生成函数\"><a href=\"#通过字符串生成函数\" class=\"headerlink\" title=\"通过字符串生成函数\"></a>通过字符串生成函数</h4><p>我们要生成一个函数，传入 <code>x</code> <code>y</code> ，执行 <code>return x + y</code>来获得求和功能。</p>\n<p>可以这样写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'x'</span>,<span class=\"string\">'y'</span>,<span class=\"string\">'return x + y'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fn);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"regexp\">/**/</span></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>new Function</code>，我们可以创造函数。下文会用到。</p>\n<h4 id=\"模板编译-1\"><a href=\"#模板编译-1\" class=\"headerlink\" title=\"模板编译\"></a>模板编译</h4><p>我们先整理下思路，应该是传入tpl模板字符串，通过 <code>new Function</code> 方式返回一个新函数。新函数接收一个对象，我叫做 <code>obj</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> template = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tpl</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 模板字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> retStr = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'obj'</span>, retStr);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>我们接下来要做的是，把<code>{ {xxx.xxx} }</code>部分都找出来，替换为<code>obj.xxx.xxx</code>就行了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> template = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tpl</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 模板字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> retStr = tpl.replace(<span class=\"regexp\">/&#123; &#123;(.+?)&#125; &#125;/g</span>, <span class=\"string\">'obj.$1'</span>);</span><br><span class=\"line\">    retStr = <span class=\"string\">'return \"'</span> + retStr + <span class=\"string\">'\"'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'obj'</span>, retStr);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> tpl = <span class=\"string\">\"&lt;p&gt;Hello, I'm &#123; &#123;user.name&#125; &#125;! &#123; &#123;user.age&#125; &#125; years old!&lt;/p&gt;\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> render = template(tpl);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(render);</span><br></pre></td></tr></table></figure>\n\n<p>这样写，发现函数是</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">anonymous</span>(<span class=\"params\">obj</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"regexp\">/**/</span></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">\"&lt;p&gt;Hello, I'm obj.user.name! obj.user.age years old!&lt;/p&gt;\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>很明显不行，至少应该把正则替换那句修改下，前后加上引号和加号才行。最终变成这样子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> template = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tpl</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 模板字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> retStr = tpl.replace(<span class=\"regexp\">/&#123; &#123;(.+?)&#125; &#125;/g</span>, <span class=\"string\">'\" + obj.$1 + \"'</span>);</span><br><span class=\"line\">    retStr = <span class=\"string\">'return \"'</span> + retStr + <span class=\"string\">'\"'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'obj'</span>, retStr);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> tpl = <span class=\"string\">\"&lt;p&gt;Hello, I'm &#123; &#123;user.name&#125; &#125;! &#123; &#123;user.age&#125; &#125; years old!&lt;/p&gt;\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">    user: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'Jason'</span>,</span><br><span class=\"line\">        age: <span class=\"number\">25</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> render = template(tpl);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(render);</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = render(data);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到结果正常了</p>\n<p>函数是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">anonymous</span>(<span class=\"params\">obj</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"regexp\">/**/</span></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">\"&lt;p&gt;Hello, I'm \"</span> + obj.user.name + <span class=\"string\">\"! \"</span> + obj.user.age + <span class=\"string\">\" years old!&lt;/p&gt;\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>渲染结果是：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello, I'm Jason! 25 years old!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"高级模板编译\"><a href=\"#高级模板编译\" class=\"headerlink\" title=\"高级模板编译\"></a>高级模板编译</h2><p>上面的例子，可以处理各种对象形式的赋值。我们还应该支持 <code>if</code> <code>for</code> 这样的语法。 这里我就不展开写了。代码我放在了 <a href=\"https://github.com/yukapril/template-render\" target=\"_blank\" rel=\"noopener\">Github - template-render</a>。代码是ES6的，可以放在最新的浏览器执行，或者<strong>自行</strong>去编译。</p>\n<p>我说下过程：</p>\n<ol>\n<li>字符串模板解析：要从模板中分析出那些是普通字符串，那些是模板代码。见 <a href=\"https://github.com/yukapril/template-render/blob/master/template.js#L27\" target=\"_blank\" rel=\"noopener\"><code>parse2array</code></a> 方法。</li>\n<li>合成返回函数主体：可以直接写入字符串，也有人喜欢写入数组（最后执行<code>arr.join(&#39;&#39;)</code>）。要区分三种情况，普通字符串（直接简单处理返回就行），普通赋值语法（稍作处理返回），高级语法字符串（需要根据你自己定义的模板语法来写解释器）。见 <a href=\"https://github.com/yukapril/template-render/blob/master/template.js#L92\" target=\"_blank\" rel=\"noopener\">编译为函数</a> 和 <a href=\"https://github.com/yukapril/template-render/blob/master/template.js#L67\" target=\"_blank\" rel=\"noopener\">高级语法处理 - syntaxParse</a>。</li>\n<li>将第二步的内容稍加处理，采用 <code>new Function</code> 返回就行了。见 <a href=\"https://github.com/yukapril/template-render/blob/master/template.js#L109\" target=\"_blank\" rel=\"noopener\">最后处理并返回</a></li>\n</ol>\n<p>还有一些经验可以借鉴：</p>\n<ol>\n<li><p>使用<code>with</code>语法。这样可以方便的处理多层的对象，对上文来说，就是可以省去正则替换后中的<code>obj</code>了。这个灵感好像来源于Vue，我记得在哪里听说过。这个语法我没用过，曾经听说是效率低下，现在不太清楚。可以参见<a href=\"https://www.zhihu.com/question/49929356\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n</li>\n<li><p>我对逻辑循环等语法进行了设计，比如：</p>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; &#123;# each hobbys as item &#125; &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123; &#123;$index+1&#125; &#125;/&#123; &#123;$length&#125; &#125; - &#123; &#123;item&#125; &#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">&#123; &#123;# endeach &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>我也见有人这里干脆不设计，直接就用原生js语法，那么上面的三步过程，可以调整为两步：第一步解析，第二步当做js语法进行拼接处理。</p>\n<p>思路例子总归是例子，虽然功能可以用，但是还有许多需要完善的地方，比如要渲染的字符串是html怎么办，应该需要转义处理；模板换行等需要处理（例子里面我已经处理了），如果渲染的字段不是字符串而是函数要处理（例子里面部分位置已经处理），渲染数据缺失情况等处理。</p>\n<hr>\n<p>通过做模板编译这个例子，就会感觉到React的JSX设计还是有道理的，方便解析，方便书写，就是不方便理解…</p>"},{"layout":"post","title":"webpack2入门-第一篇","date":"2017-02-04T22:58:00.000Z","_content":"\n2016年底，webpack2终于出来正式版了。改变的很少，基本上稍作修改就能兼容webpack1。改善了一些我认为太过于松散的配置，最终生成的代码质量更高。\n\nwebpack1系列的文章还没写完，其实也是有点乏了，后面还有一篇webpack-dev-server文章，初稿写好了，一直没审校，那就直接并入webpack2的入门文章吧~\n\n<!-- more -->\n\n## 第一个例子 demo1 入门 [webpack2-demo1](https://github.com/yukapril/learning/tree/master/webpack2-demo/demo1)\n\n### 建立项目\n\n由于之前的文章为了方便，全局安装了webpack，这次2.0的webpack我就采用项目内安装。\n\n首先要确保你在项目下初始化了 `package.json`文件\n\n```bash\nnpm init\n```\n\n之后项目安装webpack2\n\n```bash\nnpm i webpack -save-dev\n```\n\n`package.json` 中增加启动方法\n\n```json\n \"scripts\": {\n    \"webpack\":\"webpack\"\n  }\n```\n\n### 创建项目文件\n\n建立资源目录 `./src` ，以及组件目录 `./src/components`\n\n为了以后的插件部分，我这里使用了ES5，因为压缩混淆插件好像无法处理ES6代码，会报错。但是webpack2是完全支持ES6（import等语法）的。\n\n建立一个组件`./src/components/log.js`\n\n```js\nmodule.exports = function (s) {\n    console.log(s)\n}\n```\n\n建立两个入口文件，分别是`./src/page1.js` `./src/page2.js`\n\n```js\nvar log = require('./components/log')\nlog('this is page1')\n```\n\n```js\nvar log = require('./components/log')\nlog('this is page2')\n```\n\n### 配置webpack\n\n建立文件 `webpack.config.js`\n\n```js\nconst path = require('path');\n\nmodule.exports = {\n    entry: {\n        page1: './src/page1',\n        page2: './src/page2'\n    },\n    output: {\n        path: path.resolve(__dirname, \"dist\"),\n        filename: \"[name].bundle.js\"\n    }\n}\n```\n\n### 进行打包\n\n控制台执行 `npm run webpack` 即可。\n\n在目录下多出了`dist` 目录，并带有 `page1.bundle.js` `page2.bunlde.js`。\n\n我们最简单的例子完成了~\n\n## 第二个例子 demo2 引入loaders [webpack2-demo2](https://github.com/yukapril/learning/tree/master/webpack2-demo)\n\n首先复制一下demo1，我们在之前的代码基础上增加内容。\n\n为了简单，我自己写了两个loader。无需过多了解，知道能用就行了。\n\n`./strict-loader.js`\n\n严格模式插件，会在代码块（chunk）最前面加入 `'use strict;'` 标志。\n\n```js\nmodule.exports = function (source) {\n    return '\\'use strict\\';\\n' + source;\n};\n```\n\n`comment-loader.js`\n\n代码块（chunk）注释插件，会在代码块前后加入等号，并写入 `some-file.js comment v1.0` 这种形式标记。\n\n```js\nconst path = require('path');\nmodule.exports = function (source) {\n    var str = this.query.str || '';\n    var ver = this.query.ver || '';\n    var file = path.parse(this.resourcePath);\n    var ret = '//--------' + file.base + ' ' + str + ' ' + ver + '--------\\n' + source + '\\n//------------------------';\n    this.callback(null, ret, null);\n};\n```\n\n### 修改webpack配置文件\n\n我们要实现的功能是：\n* 自动处理入口文件\n* 每个非组件的代码块（chunk），要先进行版本显示，形式为 some-file.js MAIN v1.1，之后在加入严格模式\n* 每个组件的代码块（chunk），直接进行版本显示，形式为 some-file.js COMPONENTS v1.0\n\n\n我们要在`webpack.config.js`中增加一段 `module` 。最终如下：\n\n```js\nconst path = require('path');\n\nmodule.exports = {\n    entry: {\n        page1: './src/page1',\n        page2: './src/page2'\n    },\n    output: {\n        path: path.resolve(__dirname, \"dist\"),\n        filename: \"[name].bundle.js\"\n    },\n    module: {\n        rules: [{\n            test: /\\.js$/,\n            exclude: path.resolve(__dirname, './src/components/'),\n            use: [\n                // strict规则加载器，第二个执行\n                // 如果当前规则加载器不需要配置，可以直接使用字符串\n                path.resolve(__dirname, './strict-loader'),\n                // comment规则加载器，第一个执行\n                // 如果当前规则加载器需要配置，则需要使用array形式，并将加载器写成对象传入\n                {\n                    loader: path.resolve(__dirname, './comment-loader'),\n                    options: {\n                        str: 'MAIN',\n                        ver: 'v1.1'\n                    }\n                }\n            ]\n        }, {\n            test: /\\.js$/,\n            include: path.resolve(__dirname, './src/components/'),\n            use: [{\n                loader: path.resolve(__dirname, './comment-loader'),\n                options: {\n                    str: 'COMPONENTS',\n                    ver: 'v1.0'\n                }\n            }]\n        }]\n    }\n}\n```\n\n需要说明的是：\n* 现在的预处理规则，要放在 `module.rules` 下面，每个规则用一个对象表示。\n* 每个预处理规则中：\n    * `test` 一般用于匹配文件扩展名\n    * `include` 当前规则匹配的路径。如果匹配扩展名成功，匹配是否在 `include` 里面，如果是否，则不执行此条规则\n    * `exclude` 当前规则不能匹配的路径。同 `include` ，如果匹配扩展名成功，匹配是否被`exclude` 排除掉，如果是排除掉，则不执行此条规则\n    * 要想应用一条规则，相当于必须满足条件 (test && include && !exclude) === true\n    * `use`（也可以使用`loaders` `loader`） 此条规则应用哪些预处理器。接受参数为array或者string，其中string仍然使用!进行分割。执行顺序同webpack1，从右到左（string形式），从下到上（array形式）\n    * `use` 如果是写成对象形式的预处理器，直接使用`options`可以进行配置\n\n### 打包查看效果\n\n控制台执行 `npm run webpack` 即可。\n\n在目录下多出了`dist` 目录，并带有 `page1.bundle.js` `page2.bunlde.js`。\n\n检查其中一个文件，可以看到最后部分：\n\n```js\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n//--------log.js COMPONENTS v1.0--------\nmodule.exports = function (s) {\n    console.log(s)\n}\n//------------------------\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n//--------page1.js MAIN v1.1--------\nvar log = __webpack_require__(0)\nlog('this is page1')\n//------------------------\n\n/***/ })\n/******/ ]);\n```\n\n其中组件 `log.js` 中，加入了我们期望的注释。 `page1.js` 中，首先加入了期望的注释，同时最上面加入了严格模式标签。\n\n大功告成！\n","source":"_posts/2017/2017-02-04-webpack2-1.md","raw":"---\nlayout: post\ntitle: \"webpack2入门-第一篇\"\ndate: 2017-02-04 22:58:00 GMT+0000\ncategories: [前端]\ntags:  [webpack]\n---\n\n2016年底，webpack2终于出来正式版了。改变的很少，基本上稍作修改就能兼容webpack1。改善了一些我认为太过于松散的配置，最终生成的代码质量更高。\n\nwebpack1系列的文章还没写完，其实也是有点乏了，后面还有一篇webpack-dev-server文章，初稿写好了，一直没审校，那就直接并入webpack2的入门文章吧~\n\n<!-- more -->\n\n## 第一个例子 demo1 入门 [webpack2-demo1](https://github.com/yukapril/learning/tree/master/webpack2-demo/demo1)\n\n### 建立项目\n\n由于之前的文章为了方便，全局安装了webpack，这次2.0的webpack我就采用项目内安装。\n\n首先要确保你在项目下初始化了 `package.json`文件\n\n```bash\nnpm init\n```\n\n之后项目安装webpack2\n\n```bash\nnpm i webpack -save-dev\n```\n\n`package.json` 中增加启动方法\n\n```json\n \"scripts\": {\n    \"webpack\":\"webpack\"\n  }\n```\n\n### 创建项目文件\n\n建立资源目录 `./src` ，以及组件目录 `./src/components`\n\n为了以后的插件部分，我这里使用了ES5，因为压缩混淆插件好像无法处理ES6代码，会报错。但是webpack2是完全支持ES6（import等语法）的。\n\n建立一个组件`./src/components/log.js`\n\n```js\nmodule.exports = function (s) {\n    console.log(s)\n}\n```\n\n建立两个入口文件，分别是`./src/page1.js` `./src/page2.js`\n\n```js\nvar log = require('./components/log')\nlog('this is page1')\n```\n\n```js\nvar log = require('./components/log')\nlog('this is page2')\n```\n\n### 配置webpack\n\n建立文件 `webpack.config.js`\n\n```js\nconst path = require('path');\n\nmodule.exports = {\n    entry: {\n        page1: './src/page1',\n        page2: './src/page2'\n    },\n    output: {\n        path: path.resolve(__dirname, \"dist\"),\n        filename: \"[name].bundle.js\"\n    }\n}\n```\n\n### 进行打包\n\n控制台执行 `npm run webpack` 即可。\n\n在目录下多出了`dist` 目录，并带有 `page1.bundle.js` `page2.bunlde.js`。\n\n我们最简单的例子完成了~\n\n## 第二个例子 demo2 引入loaders [webpack2-demo2](https://github.com/yukapril/learning/tree/master/webpack2-demo)\n\n首先复制一下demo1，我们在之前的代码基础上增加内容。\n\n为了简单，我自己写了两个loader。无需过多了解，知道能用就行了。\n\n`./strict-loader.js`\n\n严格模式插件，会在代码块（chunk）最前面加入 `'use strict;'` 标志。\n\n```js\nmodule.exports = function (source) {\n    return '\\'use strict\\';\\n' + source;\n};\n```\n\n`comment-loader.js`\n\n代码块（chunk）注释插件，会在代码块前后加入等号，并写入 `some-file.js comment v1.0` 这种形式标记。\n\n```js\nconst path = require('path');\nmodule.exports = function (source) {\n    var str = this.query.str || '';\n    var ver = this.query.ver || '';\n    var file = path.parse(this.resourcePath);\n    var ret = '//--------' + file.base + ' ' + str + ' ' + ver + '--------\\n' + source + '\\n//------------------------';\n    this.callback(null, ret, null);\n};\n```\n\n### 修改webpack配置文件\n\n我们要实现的功能是：\n* 自动处理入口文件\n* 每个非组件的代码块（chunk），要先进行版本显示，形式为 some-file.js MAIN v1.1，之后在加入严格模式\n* 每个组件的代码块（chunk），直接进行版本显示，形式为 some-file.js COMPONENTS v1.0\n\n\n我们要在`webpack.config.js`中增加一段 `module` 。最终如下：\n\n```js\nconst path = require('path');\n\nmodule.exports = {\n    entry: {\n        page1: './src/page1',\n        page2: './src/page2'\n    },\n    output: {\n        path: path.resolve(__dirname, \"dist\"),\n        filename: \"[name].bundle.js\"\n    },\n    module: {\n        rules: [{\n            test: /\\.js$/,\n            exclude: path.resolve(__dirname, './src/components/'),\n            use: [\n                // strict规则加载器，第二个执行\n                // 如果当前规则加载器不需要配置，可以直接使用字符串\n                path.resolve(__dirname, './strict-loader'),\n                // comment规则加载器，第一个执行\n                // 如果当前规则加载器需要配置，则需要使用array形式，并将加载器写成对象传入\n                {\n                    loader: path.resolve(__dirname, './comment-loader'),\n                    options: {\n                        str: 'MAIN',\n                        ver: 'v1.1'\n                    }\n                }\n            ]\n        }, {\n            test: /\\.js$/,\n            include: path.resolve(__dirname, './src/components/'),\n            use: [{\n                loader: path.resolve(__dirname, './comment-loader'),\n                options: {\n                    str: 'COMPONENTS',\n                    ver: 'v1.0'\n                }\n            }]\n        }]\n    }\n}\n```\n\n需要说明的是：\n* 现在的预处理规则，要放在 `module.rules` 下面，每个规则用一个对象表示。\n* 每个预处理规则中：\n    * `test` 一般用于匹配文件扩展名\n    * `include` 当前规则匹配的路径。如果匹配扩展名成功，匹配是否在 `include` 里面，如果是否，则不执行此条规则\n    * `exclude` 当前规则不能匹配的路径。同 `include` ，如果匹配扩展名成功，匹配是否被`exclude` 排除掉，如果是排除掉，则不执行此条规则\n    * 要想应用一条规则，相当于必须满足条件 (test && include && !exclude) === true\n    * `use`（也可以使用`loaders` `loader`） 此条规则应用哪些预处理器。接受参数为array或者string，其中string仍然使用!进行分割。执行顺序同webpack1，从右到左（string形式），从下到上（array形式）\n    * `use` 如果是写成对象形式的预处理器，直接使用`options`可以进行配置\n\n### 打包查看效果\n\n控制台执行 `npm run webpack` 即可。\n\n在目录下多出了`dist` 目录，并带有 `page1.bundle.js` `page2.bunlde.js`。\n\n检查其中一个文件，可以看到最后部分：\n\n```js\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n//--------log.js COMPONENTS v1.0--------\nmodule.exports = function (s) {\n    console.log(s)\n}\n//------------------------\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n//--------page1.js MAIN v1.1--------\nvar log = __webpack_require__(0)\nlog('this is page1')\n//------------------------\n\n/***/ })\n/******/ ]);\n```\n\n其中组件 `log.js` 中，加入了我们期望的注释。 `page1.js` 中，首先加入了期望的注释，同时最上面加入了严格模式标签。\n\n大功告成！\n","slug":"2017-2017-02-04-webpack2-1","published":1,"updated":"2019-07-18T17:19:07.336Z","comments":1,"photos":[],"link":"","_id":"cjy8y72qs0018s21d8uktswsb","content":"<p>2016年底，webpack2终于出来正式版了。改变的很少，基本上稍作修改就能兼容webpack1。改善了一些我认为太过于松散的配置，最终生成的代码质量更高。</p>\n<p>webpack1系列的文章还没写完，其实也是有点乏了，后面还有一篇webpack-dev-server文章，初稿写好了，一直没审校，那就直接并入webpack2的入门文章吧~</p>\n<a id=\"more\"></a>\n\n<h2 id=\"第一个例子-demo1-入门-webpack2-demo1\"><a href=\"#第一个例子-demo1-入门-webpack2-demo1\" class=\"headerlink\" title=\"第一个例子 demo1 入门 webpack2-demo1\"></a>第一个例子 demo1 入门 <a href=\"https://github.com/yukapril/learning/tree/master/webpack2-demo/demo1\" target=\"_blank\" rel=\"noopener\">webpack2-demo1</a></h2><h3 id=\"建立项目\"><a href=\"#建立项目\" class=\"headerlink\" title=\"建立项目\"></a>建立项目</h3><p>由于之前的文章为了方便，全局安装了webpack，这次2.0的webpack我就采用项目内安装。</p>\n<p>首先要确保你在项目下初始化了 <code>package.json</code>文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n\n<p>之后项目安装webpack2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack -save-dev</span><br></pre></td></tr></table></figure>\n\n<p><code>package.json</code> 中增加启动方法</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">   \"webpack\":\"webpack\"</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建项目文件\"><a href=\"#创建项目文件\" class=\"headerlink\" title=\"创建项目文件\"></a>创建项目文件</h3><p>建立资源目录 <code>./src</code> ，以及组件目录 <code>./src/components</code></p>\n<p>为了以后的插件部分，我这里使用了ES5，因为压缩混淆插件好像无法处理ES6代码，会报错。但是webpack2是完全支持ES6（import等语法）的。</p>\n<p>建立一个组件<code>./src/components/log.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(s)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>建立两个入口文件，分别是<code>./src/page1.js</code> <code>./src/page2.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> log = <span class=\"built_in\">require</span>(<span class=\"string\">'./components/log'</span>)</span><br><span class=\"line\">log(<span class=\"string\">'this is page1'</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> log = <span class=\"built_in\">require</span>(<span class=\"string\">'./components/log'</span>)</span><br><span class=\"line\">log(<span class=\"string\">'this is page2'</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置webpack\"><a href=\"#配置webpack\" class=\"headerlink\" title=\"配置webpack\"></a>配置webpack</h3><p>建立文件 <code>webpack.config.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        page1: <span class=\"string\">'./src/page1'</span>,</span><br><span class=\"line\">        page2: <span class=\"string\">'./src/page2'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">\"dist\"</span>),</span><br><span class=\"line\">        filename: <span class=\"string\">\"[name].bundle.js\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"进行打包\"><a href=\"#进行打包\" class=\"headerlink\" title=\"进行打包\"></a>进行打包</h3><p>控制台执行 <code>npm run webpack</code> 即可。</p>\n<p>在目录下多出了<code>dist</code> 目录，并带有 <code>page1.bundle.js</code> <code>page2.bunlde.js</code>。</p>\n<p>我们最简单的例子完成了~</p>\n<h2 id=\"第二个例子-demo2-引入loaders-webpack2-demo2\"><a href=\"#第二个例子-demo2-引入loaders-webpack2-demo2\" class=\"headerlink\" title=\"第二个例子 demo2 引入loaders webpack2-demo2\"></a>第二个例子 demo2 引入loaders <a href=\"https://github.com/yukapril/learning/tree/master/webpack2-demo\" target=\"_blank\" rel=\"noopener\">webpack2-demo2</a></h2><p>首先复制一下demo1，我们在之前的代码基础上增加内容。</p>\n<p>为了简单，我自己写了两个loader。无需过多了解，知道能用就行了。</p>\n<p><code>./strict-loader.js</code></p>\n<p>严格模式插件，会在代码块（chunk）最前面加入 <code>&#39;use strict;&#39;</code> 标志。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'\\'use strict\\';\\n'</span> + source;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>comment-loader.js</code></p>\n<p>代码块（chunk）注释插件，会在代码块前后加入等号，并写入 <code>some-file.js comment v1.0</code> 这种形式标记。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"keyword\">this</span>.query.str || <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ver = <span class=\"keyword\">this</span>.query.ver || <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> file = path.parse(<span class=\"keyword\">this</span>.resourcePath);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret = <span class=\"string\">'//--------'</span> + file.base + <span class=\"string\">' '</span> + str + <span class=\"string\">' '</span> + ver + <span class=\"string\">'--------\\n'</span> + source + <span class=\"string\">'\\n//------------------------'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callback(<span class=\"literal\">null</span>, ret, <span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改webpack配置文件\"><a href=\"#修改webpack配置文件\" class=\"headerlink\" title=\"修改webpack配置文件\"></a>修改webpack配置文件</h3><p>我们要实现的功能是：</p>\n<ul>\n<li>自动处理入口文件</li>\n<li>每个非组件的代码块（chunk），要先进行版本显示，形式为 some-file.js MAIN v1.1，之后在加入严格模式</li>\n<li>每个组件的代码块（chunk），直接进行版本显示，形式为 some-file.js COMPONENTS v1.0</li>\n</ul>\n<p>我们要在<code>webpack.config.js</code>中增加一段 <code>module</code> 。最终如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        page1: <span class=\"string\">'./src/page1'</span>,</span><br><span class=\"line\">        page2: <span class=\"string\">'./src/page2'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">\"dist\"</span>),</span><br><span class=\"line\">        filename: <span class=\"string\">\"[name].bundle.js\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            exclude: path.resolve(__dirname, <span class=\"string\">'./src/components/'</span>),</span><br><span class=\"line\">            use: [</span><br><span class=\"line\">                <span class=\"comment\">// strict规则加载器，第二个执行</span></span><br><span class=\"line\">                <span class=\"comment\">// 如果当前规则加载器不需要配置，可以直接使用字符串</span></span><br><span class=\"line\">                path.resolve(__dirname, <span class=\"string\">'./strict-loader'</span>),</span><br><span class=\"line\">                <span class=\"comment\">// comment规则加载器，第一个执行</span></span><br><span class=\"line\">                <span class=\"comment\">// 如果当前规则加载器需要配置，则需要使用array形式，并将加载器写成对象传入</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    loader: path.resolve(__dirname, <span class=\"string\">'./comment-loader'</span>),</span><br><span class=\"line\">                    options: &#123;</span><br><span class=\"line\">                        str: <span class=\"string\">'MAIN'</span>,</span><br><span class=\"line\">                        ver: <span class=\"string\">'v1.1'</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            include: path.resolve(__dirname, <span class=\"string\">'./src/components/'</span>),</span><br><span class=\"line\">            use: [&#123;</span><br><span class=\"line\">                loader: path.resolve(__dirname, <span class=\"string\">'./comment-loader'</span>),</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                    str: <span class=\"string\">'COMPONENTS'</span>,</span><br><span class=\"line\">                    ver: <span class=\"string\">'v1.0'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;]</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要说明的是：</p>\n<ul>\n<li>现在的预处理规则，要放在 <code>module.rules</code> 下面，每个规则用一个对象表示。</li>\n<li>每个预处理规则中：<ul>\n<li><code>test</code> 一般用于匹配文件扩展名</li>\n<li><code>include</code> 当前规则匹配的路径。如果匹配扩展名成功，匹配是否在 <code>include</code> 里面，如果是否，则不执行此条规则</li>\n<li><code>exclude</code> 当前规则不能匹配的路径。同 <code>include</code> ，如果匹配扩展名成功，匹配是否被<code>exclude</code> 排除掉，如果是排除掉，则不执行此条规则</li>\n<li>要想应用一条规则，相当于必须满足条件 (test &amp;&amp; include &amp;&amp; !exclude) === true</li>\n<li><code>use</code>（也可以使用<code>loaders</code> <code>loader</code>） 此条规则应用哪些预处理器。接受参数为array或者string，其中string仍然使用!进行分割。执行顺序同webpack1，从右到左（string形式），从下到上（array形式）</li>\n<li><code>use</code> 如果是写成对象形式的预处理器，直接使用<code>options</code>可以进行配置</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"打包查看效果\"><a href=\"#打包查看效果\" class=\"headerlink\" title=\"打包查看效果\"></a>打包查看效果</h3><p>控制台执行 <code>npm run webpack</code> 即可。</p>\n<p>在目录下多出了<code>dist</code> 目录，并带有 <code>page1.bundle.js</code> <code>page2.bunlde.js</code>。</p>\n<p>检查其中一个文件，可以看到最后部分：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/************************************************************************/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> ([</span><br><span class=\"line\"><span class=\"comment\">/* 0 */</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//--------log.js COMPONENTS v1.0--------</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;),</span><br><span class=\"line\"><span class=\"comment\">/* 1 */</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//--------page1.js MAIN v1.1--------</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> log = __webpack_require__(<span class=\"number\">0</span>)</span><br><span class=\"line\">log(<span class=\"string\">'this is page1'</span>)</span><br><span class=\"line\"><span class=\"comment\">//------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">/******/</span> ]);</span><br></pre></td></tr></table></figure>\n\n<p>其中组件 <code>log.js</code> 中，加入了我们期望的注释。 <code>page1.js</code> 中，首先加入了期望的注释，同时最上面加入了严格模式标签。</p>\n<p>大功告成！</p>\n","site":{"data":{}},"excerpt":"<p>2016年底，webpack2终于出来正式版了。改变的很少，基本上稍作修改就能兼容webpack1。改善了一些我认为太过于松散的配置，最终生成的代码质量更高。</p>\n<p>webpack1系列的文章还没写完，其实也是有点乏了，后面还有一篇webpack-dev-server文章，初稿写好了，一直没审校，那就直接并入webpack2的入门文章吧~</p>","more":"<h2 id=\"第一个例子-demo1-入门-webpack2-demo1\"><a href=\"#第一个例子-demo1-入门-webpack2-demo1\" class=\"headerlink\" title=\"第一个例子 demo1 入门 webpack2-demo1\"></a>第一个例子 demo1 入门 <a href=\"https://github.com/yukapril/learning/tree/master/webpack2-demo/demo1\" target=\"_blank\" rel=\"noopener\">webpack2-demo1</a></h2><h3 id=\"建立项目\"><a href=\"#建立项目\" class=\"headerlink\" title=\"建立项目\"></a>建立项目</h3><p>由于之前的文章为了方便，全局安装了webpack，这次2.0的webpack我就采用项目内安装。</p>\n<p>首先要确保你在项目下初始化了 <code>package.json</code>文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n\n<p>之后项目安装webpack2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack -save-dev</span><br></pre></td></tr></table></figure>\n\n<p><code>package.json</code> 中增加启动方法</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">   \"webpack\":\"webpack\"</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建项目文件\"><a href=\"#创建项目文件\" class=\"headerlink\" title=\"创建项目文件\"></a>创建项目文件</h3><p>建立资源目录 <code>./src</code> ，以及组件目录 <code>./src/components</code></p>\n<p>为了以后的插件部分，我这里使用了ES5，因为压缩混淆插件好像无法处理ES6代码，会报错。但是webpack2是完全支持ES6（import等语法）的。</p>\n<p>建立一个组件<code>./src/components/log.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(s)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>建立两个入口文件，分别是<code>./src/page1.js</code> <code>./src/page2.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> log = <span class=\"built_in\">require</span>(<span class=\"string\">'./components/log'</span>)</span><br><span class=\"line\">log(<span class=\"string\">'this is page1'</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> log = <span class=\"built_in\">require</span>(<span class=\"string\">'./components/log'</span>)</span><br><span class=\"line\">log(<span class=\"string\">'this is page2'</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置webpack\"><a href=\"#配置webpack\" class=\"headerlink\" title=\"配置webpack\"></a>配置webpack</h3><p>建立文件 <code>webpack.config.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        page1: <span class=\"string\">'./src/page1'</span>,</span><br><span class=\"line\">        page2: <span class=\"string\">'./src/page2'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">\"dist\"</span>),</span><br><span class=\"line\">        filename: <span class=\"string\">\"[name].bundle.js\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"进行打包\"><a href=\"#进行打包\" class=\"headerlink\" title=\"进行打包\"></a>进行打包</h3><p>控制台执行 <code>npm run webpack</code> 即可。</p>\n<p>在目录下多出了<code>dist</code> 目录，并带有 <code>page1.bundle.js</code> <code>page2.bunlde.js</code>。</p>\n<p>我们最简单的例子完成了~</p>\n<h2 id=\"第二个例子-demo2-引入loaders-webpack2-demo2\"><a href=\"#第二个例子-demo2-引入loaders-webpack2-demo2\" class=\"headerlink\" title=\"第二个例子 demo2 引入loaders webpack2-demo2\"></a>第二个例子 demo2 引入loaders <a href=\"https://github.com/yukapril/learning/tree/master/webpack2-demo\" target=\"_blank\" rel=\"noopener\">webpack2-demo2</a></h2><p>首先复制一下demo1，我们在之前的代码基础上增加内容。</p>\n<p>为了简单，我自己写了两个loader。无需过多了解，知道能用就行了。</p>\n<p><code>./strict-loader.js</code></p>\n<p>严格模式插件，会在代码块（chunk）最前面加入 <code>&#39;use strict;&#39;</code> 标志。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'\\'use strict\\';\\n'</span> + source;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>comment-loader.js</code></p>\n<p>代码块（chunk）注释插件，会在代码块前后加入等号，并写入 <code>some-file.js comment v1.0</code> 这种形式标记。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"keyword\">this</span>.query.str || <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ver = <span class=\"keyword\">this</span>.query.ver || <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> file = path.parse(<span class=\"keyword\">this</span>.resourcePath);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret = <span class=\"string\">'//--------'</span> + file.base + <span class=\"string\">' '</span> + str + <span class=\"string\">' '</span> + ver + <span class=\"string\">'--------\\n'</span> + source + <span class=\"string\">'\\n//------------------------'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callback(<span class=\"literal\">null</span>, ret, <span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改webpack配置文件\"><a href=\"#修改webpack配置文件\" class=\"headerlink\" title=\"修改webpack配置文件\"></a>修改webpack配置文件</h3><p>我们要实现的功能是：</p>\n<ul>\n<li>自动处理入口文件</li>\n<li>每个非组件的代码块（chunk），要先进行版本显示，形式为 some-file.js MAIN v1.1，之后在加入严格模式</li>\n<li>每个组件的代码块（chunk），直接进行版本显示，形式为 some-file.js COMPONENTS v1.0</li>\n</ul>\n<p>我们要在<code>webpack.config.js</code>中增加一段 <code>module</code> 。最终如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        page1: <span class=\"string\">'./src/page1'</span>,</span><br><span class=\"line\">        page2: <span class=\"string\">'./src/page2'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">\"dist\"</span>),</span><br><span class=\"line\">        filename: <span class=\"string\">\"[name].bundle.js\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            exclude: path.resolve(__dirname, <span class=\"string\">'./src/components/'</span>),</span><br><span class=\"line\">            use: [</span><br><span class=\"line\">                <span class=\"comment\">// strict规则加载器，第二个执行</span></span><br><span class=\"line\">                <span class=\"comment\">// 如果当前规则加载器不需要配置，可以直接使用字符串</span></span><br><span class=\"line\">                path.resolve(__dirname, <span class=\"string\">'./strict-loader'</span>),</span><br><span class=\"line\">                <span class=\"comment\">// comment规则加载器，第一个执行</span></span><br><span class=\"line\">                <span class=\"comment\">// 如果当前规则加载器需要配置，则需要使用array形式，并将加载器写成对象传入</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    loader: path.resolve(__dirname, <span class=\"string\">'./comment-loader'</span>),</span><br><span class=\"line\">                    options: &#123;</span><br><span class=\"line\">                        str: <span class=\"string\">'MAIN'</span>,</span><br><span class=\"line\">                        ver: <span class=\"string\">'v1.1'</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            include: path.resolve(__dirname, <span class=\"string\">'./src/components/'</span>),</span><br><span class=\"line\">            use: [&#123;</span><br><span class=\"line\">                loader: path.resolve(__dirname, <span class=\"string\">'./comment-loader'</span>),</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                    str: <span class=\"string\">'COMPONENTS'</span>,</span><br><span class=\"line\">                    ver: <span class=\"string\">'v1.0'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;]</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要说明的是：</p>\n<ul>\n<li>现在的预处理规则，要放在 <code>module.rules</code> 下面，每个规则用一个对象表示。</li>\n<li>每个预处理规则中：<ul>\n<li><code>test</code> 一般用于匹配文件扩展名</li>\n<li><code>include</code> 当前规则匹配的路径。如果匹配扩展名成功，匹配是否在 <code>include</code> 里面，如果是否，则不执行此条规则</li>\n<li><code>exclude</code> 当前规则不能匹配的路径。同 <code>include</code> ，如果匹配扩展名成功，匹配是否被<code>exclude</code> 排除掉，如果是排除掉，则不执行此条规则</li>\n<li>要想应用一条规则，相当于必须满足条件 (test &amp;&amp; include &amp;&amp; !exclude) === true</li>\n<li><code>use</code>（也可以使用<code>loaders</code> <code>loader</code>） 此条规则应用哪些预处理器。接受参数为array或者string，其中string仍然使用!进行分割。执行顺序同webpack1，从右到左（string形式），从下到上（array形式）</li>\n<li><code>use</code> 如果是写成对象形式的预处理器，直接使用<code>options</code>可以进行配置</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"打包查看效果\"><a href=\"#打包查看效果\" class=\"headerlink\" title=\"打包查看效果\"></a>打包查看效果</h3><p>控制台执行 <code>npm run webpack</code> 即可。</p>\n<p>在目录下多出了<code>dist</code> 目录，并带有 <code>page1.bundle.js</code> <code>page2.bunlde.js</code>。</p>\n<p>检查其中一个文件，可以看到最后部分：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/************************************************************************/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> ([</span><br><span class=\"line\"><span class=\"comment\">/* 0 */</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//--------log.js COMPONENTS v1.0--------</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;),</span><br><span class=\"line\"><span class=\"comment\">/* 1 */</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//--------page1.js MAIN v1.1--------</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> log = __webpack_require__(<span class=\"number\">0</span>)</span><br><span class=\"line\">log(<span class=\"string\">'this is page1'</span>)</span><br><span class=\"line\"><span class=\"comment\">//------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">/******/</span> ]);</span><br></pre></td></tr></table></figure>\n\n<p>其中组件 <code>log.js</code> 中，加入了我们期望的注释。 <code>page1.js</code> 中，首先加入了期望的注释，同时最上面加入了严格模式标签。</p>\n<p>大功告成！</p>"},{"layout":"post","title":"[转载] 关于CSS一些细节问题","date":"2017-02-05T22:44:00.000Z","_content":"\ncss每天都要接触，但是有很多值计算你不一定非常清楚。我看过一些视频，这篇文章把常见的问题总结了一下。\n\n<!-- more -->\n\nhttp://ghmagical.com/article/page/id/tQOOxx1N1K1a\n\n","source":"_posts/2017/2017-02-05-zz.md","raw":"---\nlayout: post\ntitle: \"[转载] 关于CSS一些细节问题\"\ndate: 2017-02-05 22:44:00 GMT+0000\ncategories: [前端]\ntags:  [css]\n---\n\ncss每天都要接触，但是有很多值计算你不一定非常清楚。我看过一些视频，这篇文章把常见的问题总结了一下。\n\n<!-- more -->\n\nhttp://ghmagical.com/article/page/id/tQOOxx1N1K1a\n\n","slug":"2017-2017-02-05-zz","published":1,"updated":"2019-07-18T17:19:07.257Z","comments":1,"photos":[],"link":"","_id":"cjy8y72qu001cs21dkri3sb2o","content":"<p>css每天都要接触，但是有很多值计算你不一定非常清楚。我看过一些视频，这篇文章把常见的问题总结了一下。</p>\n<a id=\"more\"></a>\n\n<p><a href=\"http://ghmagical.com/article/page/id/tQOOxx1N1K1a\" target=\"_blank\" rel=\"noopener\">http://ghmagical.com/article/page/id/tQOOxx1N1K1a</a></p>\n","site":{"data":{}},"excerpt":"<p>css每天都要接触，但是有很多值计算你不一定非常清楚。我看过一些视频，这篇文章把常见的问题总结了一下。</p>","more":"<p><a href=\"http://ghmagical.com/article/page/id/tQOOxx1N1K1a\" target=\"_blank\" rel=\"noopener\">http://ghmagical.com/article/page/id/tQOOxx1N1K1a</a></p>"},{"layout":"post","title":"webpack2入门-第二篇 公共代码提取插件","date":"2017-02-19T11:01:00.000Z","_content":"\n这次，我们来看看 webpack 中一些常见的插件如何来使用。\n\n接上篇。\n\n<!-- more -->\n\n## 第三个例子 demo3 CommonsChunkPlugin [webpack2-demo3](https://github.com/yukapril/learning/tree/master/webpack2-demo/demo3)\n\n复制一个demo1。\n\n首先介绍下，在本例子中，page1.js和page2.js 均引用了一个公共模块（log.js），按照demo1的方案来做，最终page1.bundle.js和page2.bundle.js中均含有公共模块（log.js），在项目里是冗余的，我们应该把公共部分提取出来，建立一个commons.js才对。\n\n> 其实 webpack 加载器代码也是公共部分\n\n我们来修改下webpack.config.js\n\n```js\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {\n    entry: {\n        page1: './src/page1',\n        page2: './src/page2'\n    },\n    output: {\n        path: path.resolve(__dirname, \"dist\"),\n        filename: \"[name].bundle.js\"\n    },\n    plugins: [\n        // 通用代码独立文件插件\n        new webpack.optimize.CommonsChunkPlugin({\n            name: 'common',\n            filename: 'commons.js',\n            chunks: ['page1', 'page2'],\n            minChunks: 2\n        })\n    ]\n}\n```\n\n**代码说明**\n\n* 首先需要引入webpack，因为CommonsChunkPlugin是存在于 `webpack.optimize.CommonsChunkPlugin` 这里的，这个是webapck自带组件，无需npm额外安装。\n* 入口上，我们是用对象表示的，其中page1、page2是叫做chunk（代码块），这个chunk应该是唯一的，如果不唯一，会被覆盖掉。\n\n**配置说明**\n* `name` 这个就是最终抽离出来的代码的chunk（代码块）名字，应该是唯一的，必须填。如果与entry等字段的chunk不同，则新建立一个代码块并最终生成单独文件；如果和其他chunk相同，会把其他chunk覆盖掉，最终的文件中就不会有被覆盖的chunk代码的文件了。\n* `filename` 最终打包文件名字\n* `chunks` 配置chunks入口，比如当前有5个chunks（page1,page2,page3,page4,page5），但是你只想把page1和page2的chunks进行提取，那么这里只需要配置两个就行了。如果不配置，则表示所有chunks都处理。\n* `minChunks` 模块最少要被依赖多少次，才能算作公共模块。首先，webpack处理模块部分以及第三方依赖库（如果有的话）会写入commons.js；之后检查每个入口chunk相同的依赖，如果该依赖存在大于等于2次chunk调用（本例子是2个，以此举例），则写入commons.js，否则写入到相应js文件中，就不算做公共代码。如果 `minChunks: 1`，那么所有以来的组件均算作公共代码了。\n\n都弄好了，我们在执行打包看看效果。\n\n```bash\nnpm run webpack\n```\n\n检查下dist目录，多出了一个`commons.js`，这里面包含了webpack的加载器代码，同时还有公共代码（log.js）。\n\n在看看page1.js和page2.js，每个文件都变得非常小了，之后相应的业务代码，没有了对应的模块被打到当前文件中。\n\n这样，公共模块就提取好啦~","source":"_posts/2017/2017-02-19-webpack2-2.md","raw":"---\nlayout: post\ntitle: \"webpack2入门-第二篇 公共代码提取插件\"\ndate: 2017-02-19 11:01:00 GMT+0000\ncategories: [前端]\ntags:  [webpack]\n---\n\n这次，我们来看看 webpack 中一些常见的插件如何来使用。\n\n接上篇。\n\n<!-- more -->\n\n## 第三个例子 demo3 CommonsChunkPlugin [webpack2-demo3](https://github.com/yukapril/learning/tree/master/webpack2-demo/demo3)\n\n复制一个demo1。\n\n首先介绍下，在本例子中，page1.js和page2.js 均引用了一个公共模块（log.js），按照demo1的方案来做，最终page1.bundle.js和page2.bundle.js中均含有公共模块（log.js），在项目里是冗余的，我们应该把公共部分提取出来，建立一个commons.js才对。\n\n> 其实 webpack 加载器代码也是公共部分\n\n我们来修改下webpack.config.js\n\n```js\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {\n    entry: {\n        page1: './src/page1',\n        page2: './src/page2'\n    },\n    output: {\n        path: path.resolve(__dirname, \"dist\"),\n        filename: \"[name].bundle.js\"\n    },\n    plugins: [\n        // 通用代码独立文件插件\n        new webpack.optimize.CommonsChunkPlugin({\n            name: 'common',\n            filename: 'commons.js',\n            chunks: ['page1', 'page2'],\n            minChunks: 2\n        })\n    ]\n}\n```\n\n**代码说明**\n\n* 首先需要引入webpack，因为CommonsChunkPlugin是存在于 `webpack.optimize.CommonsChunkPlugin` 这里的，这个是webapck自带组件，无需npm额外安装。\n* 入口上，我们是用对象表示的，其中page1、page2是叫做chunk（代码块），这个chunk应该是唯一的，如果不唯一，会被覆盖掉。\n\n**配置说明**\n* `name` 这个就是最终抽离出来的代码的chunk（代码块）名字，应该是唯一的，必须填。如果与entry等字段的chunk不同，则新建立一个代码块并最终生成单独文件；如果和其他chunk相同，会把其他chunk覆盖掉，最终的文件中就不会有被覆盖的chunk代码的文件了。\n* `filename` 最终打包文件名字\n* `chunks` 配置chunks入口，比如当前有5个chunks（page1,page2,page3,page4,page5），但是你只想把page1和page2的chunks进行提取，那么这里只需要配置两个就行了。如果不配置，则表示所有chunks都处理。\n* `minChunks` 模块最少要被依赖多少次，才能算作公共模块。首先，webpack处理模块部分以及第三方依赖库（如果有的话）会写入commons.js；之后检查每个入口chunk相同的依赖，如果该依赖存在大于等于2次chunk调用（本例子是2个，以此举例），则写入commons.js，否则写入到相应js文件中，就不算做公共代码。如果 `minChunks: 1`，那么所有以来的组件均算作公共代码了。\n\n都弄好了，我们在执行打包看看效果。\n\n```bash\nnpm run webpack\n```\n\n检查下dist目录，多出了一个`commons.js`，这里面包含了webpack的加载器代码，同时还有公共代码（log.js）。\n\n在看看page1.js和page2.js，每个文件都变得非常小了，之后相应的业务代码，没有了对应的模块被打到当前文件中。\n\n这样，公共模块就提取好啦~","slug":"2017-2017-02-19-webpack2-2","published":1,"updated":"2019-07-18T17:19:07.214Z","comments":1,"photos":[],"link":"","_id":"cjy8y72qw001gs21dway4fqq5","content":"<p>这次，我们来看看 webpack 中一些常见的插件如何来使用。</p>\n<p>接上篇。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"第三个例子-demo3-CommonsChunkPlugin-webpack2-demo3\"><a href=\"#第三个例子-demo3-CommonsChunkPlugin-webpack2-demo3\" class=\"headerlink\" title=\"第三个例子 demo3 CommonsChunkPlugin webpack2-demo3\"></a>第三个例子 demo3 CommonsChunkPlugin <a href=\"https://github.com/yukapril/learning/tree/master/webpack2-demo/demo3\" target=\"_blank\" rel=\"noopener\">webpack2-demo3</a></h2><p>复制一个demo1。</p>\n<p>首先介绍下，在本例子中，page1.js和page2.js 均引用了一个公共模块（log.js），按照demo1的方案来做，最终page1.bundle.js和page2.bundle.js中均含有公共模块（log.js），在项目里是冗余的，我们应该把公共部分提取出来，建立一个commons.js才对。</p>\n<blockquote>\n<p>其实 webpack 加载器代码也是公共部分</p>\n</blockquote>\n<p>我们来修改下webpack.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        page1: <span class=\"string\">'./src/page1'</span>,</span><br><span class=\"line\">        page2: <span class=\"string\">'./src/page2'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">\"dist\"</span>),</span><br><span class=\"line\">        filename: <span class=\"string\">\"[name].bundle.js\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"comment\">// 通用代码独立文件插件</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">            name: <span class=\"string\">'common'</span>,</span><br><span class=\"line\">            filename: <span class=\"string\">'commons.js'</span>,</span><br><span class=\"line\">            chunks: [<span class=\"string\">'page1'</span>, <span class=\"string\">'page2'</span>],</span><br><span class=\"line\">            minChunks: <span class=\"number\">2</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>代码说明</strong></p>\n<ul>\n<li>首先需要引入webpack，因为CommonsChunkPlugin是存在于 <code>webpack.optimize.CommonsChunkPlugin</code> 这里的，这个是webapck自带组件，无需npm额外安装。</li>\n<li>入口上，我们是用对象表示的，其中page1、page2是叫做chunk（代码块），这个chunk应该是唯一的，如果不唯一，会被覆盖掉。</li>\n</ul>\n<p><strong>配置说明</strong></p>\n<ul>\n<li><code>name</code> 这个就是最终抽离出来的代码的chunk（代码块）名字，应该是唯一的，必须填。如果与entry等字段的chunk不同，则新建立一个代码块并最终生成单独文件；如果和其他chunk相同，会把其他chunk覆盖掉，最终的文件中就不会有被覆盖的chunk代码的文件了。</li>\n<li><code>filename</code> 最终打包文件名字</li>\n<li><code>chunks</code> 配置chunks入口，比如当前有5个chunks（page1,page2,page3,page4,page5），但是你只想把page1和page2的chunks进行提取，那么这里只需要配置两个就行了。如果不配置，则表示所有chunks都处理。</li>\n<li><code>minChunks</code> 模块最少要被依赖多少次，才能算作公共模块。首先，webpack处理模块部分以及第三方依赖库（如果有的话）会写入commons.js；之后检查每个入口chunk相同的依赖，如果该依赖存在大于等于2次chunk调用（本例子是2个，以此举例），则写入commons.js，否则写入到相应js文件中，就不算做公共代码。如果 <code>minChunks: 1</code>，那么所有以来的组件均算作公共代码了。</li>\n</ul>\n<p>都弄好了，我们在执行打包看看效果。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run webpack</span><br></pre></td></tr></table></figure>\n\n<p>检查下dist目录，多出了一个<code>commons.js</code>，这里面包含了webpack的加载器代码，同时还有公共代码（log.js）。</p>\n<p>在看看page1.js和page2.js，每个文件都变得非常小了，之后相应的业务代码，没有了对应的模块被打到当前文件中。</p>\n<p>这样，公共模块就提取好啦~</p>\n","site":{"data":{}},"excerpt":"<p>这次，我们来看看 webpack 中一些常见的插件如何来使用。</p>\n<p>接上篇。</p>","more":"<h2 id=\"第三个例子-demo3-CommonsChunkPlugin-webpack2-demo3\"><a href=\"#第三个例子-demo3-CommonsChunkPlugin-webpack2-demo3\" class=\"headerlink\" title=\"第三个例子 demo3 CommonsChunkPlugin webpack2-demo3\"></a>第三个例子 demo3 CommonsChunkPlugin <a href=\"https://github.com/yukapril/learning/tree/master/webpack2-demo/demo3\" target=\"_blank\" rel=\"noopener\">webpack2-demo3</a></h2><p>复制一个demo1。</p>\n<p>首先介绍下，在本例子中，page1.js和page2.js 均引用了一个公共模块（log.js），按照demo1的方案来做，最终page1.bundle.js和page2.bundle.js中均含有公共模块（log.js），在项目里是冗余的，我们应该把公共部分提取出来，建立一个commons.js才对。</p>\n<blockquote>\n<p>其实 webpack 加载器代码也是公共部分</p>\n</blockquote>\n<p>我们来修改下webpack.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        page1: <span class=\"string\">'./src/page1'</span>,</span><br><span class=\"line\">        page2: <span class=\"string\">'./src/page2'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">\"dist\"</span>),</span><br><span class=\"line\">        filename: <span class=\"string\">\"[name].bundle.js\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"comment\">// 通用代码独立文件插件</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">            name: <span class=\"string\">'common'</span>,</span><br><span class=\"line\">            filename: <span class=\"string\">'commons.js'</span>,</span><br><span class=\"line\">            chunks: [<span class=\"string\">'page1'</span>, <span class=\"string\">'page2'</span>],</span><br><span class=\"line\">            minChunks: <span class=\"number\">2</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>代码说明</strong></p>\n<ul>\n<li>首先需要引入webpack，因为CommonsChunkPlugin是存在于 <code>webpack.optimize.CommonsChunkPlugin</code> 这里的，这个是webapck自带组件，无需npm额外安装。</li>\n<li>入口上，我们是用对象表示的，其中page1、page2是叫做chunk（代码块），这个chunk应该是唯一的，如果不唯一，会被覆盖掉。</li>\n</ul>\n<p><strong>配置说明</strong></p>\n<ul>\n<li><code>name</code> 这个就是最终抽离出来的代码的chunk（代码块）名字，应该是唯一的，必须填。如果与entry等字段的chunk不同，则新建立一个代码块并最终生成单独文件；如果和其他chunk相同，会把其他chunk覆盖掉，最终的文件中就不会有被覆盖的chunk代码的文件了。</li>\n<li><code>filename</code> 最终打包文件名字</li>\n<li><code>chunks</code> 配置chunks入口，比如当前有5个chunks（page1,page2,page3,page4,page5），但是你只想把page1和page2的chunks进行提取，那么这里只需要配置两个就行了。如果不配置，则表示所有chunks都处理。</li>\n<li><code>minChunks</code> 模块最少要被依赖多少次，才能算作公共模块。首先，webpack处理模块部分以及第三方依赖库（如果有的话）会写入commons.js；之后检查每个入口chunk相同的依赖，如果该依赖存在大于等于2次chunk调用（本例子是2个，以此举例），则写入commons.js，否则写入到相应js文件中，就不算做公共代码。如果 <code>minChunks: 1</code>，那么所有以来的组件均算作公共代码了。</li>\n</ul>\n<p>都弄好了，我们在执行打包看看效果。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run webpack</span><br></pre></td></tr></table></figure>\n\n<p>检查下dist目录，多出了一个<code>commons.js</code>，这里面包含了webpack的加载器代码，同时还有公共代码（log.js）。</p>\n<p>在看看page1.js和page2.js，每个文件都变得非常小了，之后相应的业务代码，没有了对应的模块被打到当前文件中。</p>\n<p>这样，公共模块就提取好啦~</p>"},{"layout":"post","title":"JS的new关键字考题一则","date":"2017-02-21T22:25:00.000Z","_content":"\n在sf.gg看到这样一个[问题](https://segmentfault.com/q/1010000008430170)：\n\n<!-- more -->\n\n```js\nfunction Foo() {\n  getName = function () {\n    alert(1);\n  };\n  return this;\n}\nFoo.prototype.getName = function () {\n  alert(3);\n};\nvar getName = function () {\n  alert(4);\n};\nfunction getName() {\n  alert(5);\n}\n\nnew Foo().getName();\n```\n\n自己也尝试解答下。\n\n从上至下，扫一遍，首先要处理下声明提升问题。\n\n这个不难理解，处理后的代码是\n\n```js\nvar getName = undefined;\n\nfunction Foo() {\n  getName = function () {\n    alert(1);\n  };\n  return this;\n}\nFoo.prototype.getName = function () {\n  alert(3);\n};\n\ngetName = function () {\n  alert(4);\n};\n\nfunction getName() {\n  alert(5);\n}\n\nnew Foo().getName();\n```\n\n这里能看出，4是不能被弹出的，因为被5覆盖了。而且，`getName` 是定义在了全局上，访问的话是 `window.getName`。\n\n但是，如果执行了 `Foo()`，则会把 `getName` 再次覆盖，此时只能弹出1。\n\n不过，这个其实和最终的答案没啥关系...\n\n主要可以看出 `Foo` 是构造函数，在其原型链上增加了方法 `getName`。\n\n最后一句我已开始也看错了，主要是少看了括号。\n\n最后一句可以看成\n\n```js\nvar test = new Foo();\ntest.getName(); // 3\n```\n\n这样就好理解了。新创建的对象访问`Foo`的原型链，就可以得到结果3。\n\n我把最后一句看成了 `new Foo.getName`，结果没有找到\n\n```js\nFoo.getName = function(){\n  ...\n  return this;  \n};\n```\n\n这种内容...\n\n看来是我想的太复杂了...\n","source":"_posts/2017/2017-02-21-js-new.md","raw":"---\nlayout: post\ntitle: \"JS的new关键字考题一则\"\ndate: 2017-02-21 22:25:00 GMT+0000\ncategories: [前端]\ntags:  [js, new]\n---\n\n在sf.gg看到这样一个[问题](https://segmentfault.com/q/1010000008430170)：\n\n<!-- more -->\n\n```js\nfunction Foo() {\n  getName = function () {\n    alert(1);\n  };\n  return this;\n}\nFoo.prototype.getName = function () {\n  alert(3);\n};\nvar getName = function () {\n  alert(4);\n};\nfunction getName() {\n  alert(5);\n}\n\nnew Foo().getName();\n```\n\n自己也尝试解答下。\n\n从上至下，扫一遍，首先要处理下声明提升问题。\n\n这个不难理解，处理后的代码是\n\n```js\nvar getName = undefined;\n\nfunction Foo() {\n  getName = function () {\n    alert(1);\n  };\n  return this;\n}\nFoo.prototype.getName = function () {\n  alert(3);\n};\n\ngetName = function () {\n  alert(4);\n};\n\nfunction getName() {\n  alert(5);\n}\n\nnew Foo().getName();\n```\n\n这里能看出，4是不能被弹出的，因为被5覆盖了。而且，`getName` 是定义在了全局上，访问的话是 `window.getName`。\n\n但是，如果执行了 `Foo()`，则会把 `getName` 再次覆盖，此时只能弹出1。\n\n不过，这个其实和最终的答案没啥关系...\n\n主要可以看出 `Foo` 是构造函数，在其原型链上增加了方法 `getName`。\n\n最后一句我已开始也看错了，主要是少看了括号。\n\n最后一句可以看成\n\n```js\nvar test = new Foo();\ntest.getName(); // 3\n```\n\n这样就好理解了。新创建的对象访问`Foo`的原型链，就可以得到结果3。\n\n我把最后一句看成了 `new Foo.getName`，结果没有找到\n\n```js\nFoo.getName = function(){\n  ...\n  return this;  \n};\n```\n\n这种内容...\n\n看来是我想的太复杂了...\n","slug":"2017-2017-02-21-js-new","published":1,"updated":"2019-07-18T17:19:07.138Z","comments":1,"photos":[],"link":"","_id":"cjy8y72qy001is21d0j0qx5zi","content":"<p>在sf.gg看到这样一个<a href=\"https://segmentfault.com/q/1010000008430170\" target=\"_blank\" rel=\"noopener\">问题</a>：</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo().getName();</span><br></pre></td></tr></table></figure>\n\n<p>自己也尝试解答下。</p>\n<p>从上至下，扫一遍，首先要处理下声明提升问题。</p>\n<p>这个不难理解，处理后的代码是</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo().getName();</span><br></pre></td></tr></table></figure>\n\n<p>这里能看出，4是不能被弹出的，因为被5覆盖了。而且，<code>getName</code> 是定义在了全局上，访问的话是 <code>window.getName</code>。</p>\n<p>但是，如果执行了 <code>Foo()</code>，则会把 <code>getName</code> 再次覆盖，此时只能弹出1。</p>\n<p>不过，这个其实和最终的答案没啥关系…</p>\n<p>主要可以看出 <code>Foo</code> 是构造函数，在其原型链上增加了方法 <code>getName</code>。</p>\n<p>最后一句我已开始也看错了，主要是少看了括号。</p>\n<p>最后一句可以看成</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\">test.getName(); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p>这样就好理解了。新创建的对象访问<code>Foo</code>的原型链，就可以得到结果3。</p>\n<p>我把最后一句看成了 <code>new Foo.getName</code>，结果没有找到</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Foo.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这种内容…</p>\n<p>看来是我想的太复杂了…</p>\n","site":{"data":{}},"excerpt":"<p>在sf.gg看到这样一个<a href=\"https://segmentfault.com/q/1010000008430170\" target=\"_blank\" rel=\"noopener\">问题</a>：</p>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo().getName();</span><br></pre></td></tr></table></figure>\n\n<p>自己也尝试解答下。</p>\n<p>从上至下，扫一遍，首先要处理下声明提升问题。</p>\n<p>这个不难理解，处理后的代码是</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo().getName();</span><br></pre></td></tr></table></figure>\n\n<p>这里能看出，4是不能被弹出的，因为被5覆盖了。而且，<code>getName</code> 是定义在了全局上，访问的话是 <code>window.getName</code>。</p>\n<p>但是，如果执行了 <code>Foo()</code>，则会把 <code>getName</code> 再次覆盖，此时只能弹出1。</p>\n<p>不过，这个其实和最终的答案没啥关系…</p>\n<p>主要可以看出 <code>Foo</code> 是构造函数，在其原型链上增加了方法 <code>getName</code>。</p>\n<p>最后一句我已开始也看错了，主要是少看了括号。</p>\n<p>最后一句可以看成</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\">test.getName(); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p>这样就好理解了。新创建的对象访问<code>Foo</code>的原型链，就可以得到结果3。</p>\n<p>我把最后一句看成了 <code>new Foo.getName</code>，结果没有找到</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Foo.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这种内容…</p>\n<p>看来是我想的太复杂了…</p>"},{"layout":"post","title":"jekyll 下文章无法显示双大括号{{ }}和{% %}的处理","date":"2017-03-01T21:25:00.000Z","_content":"\n在前些天写一篇渲染的文章时候，文章内容反复出现了 `{ { name } }` 这种格式的代码。\n\n之前也遇到过一次，是代码中有 `{ %  % }` 的部分，也没办法处理。\n\n思考很久，也查阅了很多文章，始终无法解决。\n\n<!-- more -->\n\njekyll 会把模板中 `{ { ... } }` 当做语法串进行处理，最终传输到页面就是空串了。\n\n查阅 jekyll 的文档，没发现有能忽略 `{ { } }` 的配置。我尝试用 `{ { \"...\" | html } }` 这种形式，通过管道运算符来处理，结果还是不行。\n\n最终考虑一种方案，将符号转义，让 jekyll 直接将符号输出到页面吧，多出的转义符号，交给js来处理。\n\n经过研究，只能使用 `\\{ \\{ ... \\} \\}`(去掉空格) 这种形式，不能用 `{\\{ ... }\\}` 这种形式，原因在于，后者代码的展现配色效果不如前者好。\n\n之后，加入js代码，作用很简单，找到页面存在问题的部分，然后依次用正则替换为正确的展现。\n\n```js\nvar fixBrace = function () {\n    var list = document.querySelectorAll('code');\n    list.forEach(function(item){\n        if (item.innerHTML.indexOf('\\\\{\\\\{') >= 0) {\n            item.innerHTML = item.innerHTML.replace(/\\\\{\\\\{/g,'{ {');\n        } \n        if (item.innerHTML.indexOf('\\\\}\\\\}') >= 0) {\n            item.innerHTML = item.innerHTML.replace(/\\\\}\\\\}/g,'} }');\n        }\n        if (item.innerHTML.indexOf('\\\\{\\\\%') >= 0) {\n            item.innerHTML = item.innerHTML.replace(/\\\\{\\\\%/g,'\\{\\%');\n        }\n        if (item.innerHTML.indexOf('\\\\%\\\\}') >= 0) {\n            item.innerHTML = item.innerHTML.replace(/\\\\%\\\\}/g,'\\%\\}');\n        }\n    });\n};\n```\n\n\n完毕，搞定。","source":"_posts/2017/2017-03-01-jekyll-brace.md","raw":"---\nlayout: post\ntitle: \"jekyll 下文章无法显示双大括号{{ }}和{% %}的处理\"\ndate: 2017-03-01 21:25:00 GMT+0000\ncategories: [前端]\ntags:  [jekyll,括号,转义]\n---\n\n在前些天写一篇渲染的文章时候，文章内容反复出现了 `{ { name } }` 这种格式的代码。\n\n之前也遇到过一次，是代码中有 `{ %  % }` 的部分，也没办法处理。\n\n思考很久，也查阅了很多文章，始终无法解决。\n\n<!-- more -->\n\njekyll 会把模板中 `{ { ... } }` 当做语法串进行处理，最终传输到页面就是空串了。\n\n查阅 jekyll 的文档，没发现有能忽略 `{ { } }` 的配置。我尝试用 `{ { \"...\" | html } }` 这种形式，通过管道运算符来处理，结果还是不行。\n\n最终考虑一种方案，将符号转义，让 jekyll 直接将符号输出到页面吧，多出的转义符号，交给js来处理。\n\n经过研究，只能使用 `\\{ \\{ ... \\} \\}`(去掉空格) 这种形式，不能用 `{\\{ ... }\\}` 这种形式，原因在于，后者代码的展现配色效果不如前者好。\n\n之后，加入js代码，作用很简单，找到页面存在问题的部分，然后依次用正则替换为正确的展现。\n\n```js\nvar fixBrace = function () {\n    var list = document.querySelectorAll('code');\n    list.forEach(function(item){\n        if (item.innerHTML.indexOf('\\\\{\\\\{') >= 0) {\n            item.innerHTML = item.innerHTML.replace(/\\\\{\\\\{/g,'{ {');\n        } \n        if (item.innerHTML.indexOf('\\\\}\\\\}') >= 0) {\n            item.innerHTML = item.innerHTML.replace(/\\\\}\\\\}/g,'} }');\n        }\n        if (item.innerHTML.indexOf('\\\\{\\\\%') >= 0) {\n            item.innerHTML = item.innerHTML.replace(/\\\\{\\\\%/g,'\\{\\%');\n        }\n        if (item.innerHTML.indexOf('\\\\%\\\\}') >= 0) {\n            item.innerHTML = item.innerHTML.replace(/\\\\%\\\\}/g,'\\%\\}');\n        }\n    });\n};\n```\n\n\n完毕，搞定。","slug":"2017-2017-03-01-jekyll-brace","published":1,"updated":"2019-07-18T17:19:07.304Z","comments":1,"photos":[],"link":"","_id":"cjy8y72qz001ms21dkmv0tu7n","content":"<p>在前些天写一篇渲染的文章时候，文章内容反复出现了 <code>{ { name } }</code> 这种格式的代码。</p>\n<p>之前也遇到过一次，是代码中有 <code>{ %  % }</code> 的部分，也没办法处理。</p>\n<p>思考很久，也查阅了很多文章，始终无法解决。</p>\n<a id=\"more\"></a>\n\n<p>jekyll 会把模板中 <code>{ { ... } }</code> 当做语法串进行处理，最终传输到页面就是空串了。</p>\n<p>查阅 jekyll 的文档，没发现有能忽略 <code>{ { } }</code> 的配置。我尝试用 <code>{ { &quot;...&quot; | html } }</code> 这种形式，通过管道运算符来处理，结果还是不行。</p>\n<p>最终考虑一种方案，将符号转义，让 jekyll 直接将符号输出到页面吧，多出的转义符号，交给js来处理。</p>\n<p>经过研究，只能使用 <code>\\{ \\{ ... \\} \\}</code>(去掉空格) 这种形式，不能用 <code>{\\{ ... }\\}</code> 这种形式，原因在于，后者代码的展现配色效果不如前者好。</p>\n<p>之后，加入js代码，作用很简单，找到页面存在问题的部分，然后依次用正则替换为正确的展现。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fixBrace = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> list = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'code'</span>);</span><br><span class=\"line\">    list.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.innerHTML.indexOf(<span class=\"string\">'\\\\&#123;\\\\&#123;'</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            item.innerHTML = item.innerHTML.replace(<span class=\"regexp\">/\\\\&#123;\\\\&#123;/g</span>,<span class=\"string\">'&#123; &#123;'</span>);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.innerHTML.indexOf(<span class=\"string\">'\\\\&#125;\\\\&#125;'</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            item.innerHTML = item.innerHTML.replace(<span class=\"regexp\">/\\\\&#125;\\\\&#125;/g</span>,<span class=\"string\">'&#125; &#125;'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.innerHTML.indexOf(<span class=\"string\">'\\\\&#123;\\\\%'</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            item.innerHTML = item.innerHTML.replace(<span class=\"regexp\">/\\\\&#123;\\\\%/g</span>,<span class=\"string\">'\\&#123;\\%'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.innerHTML.indexOf(<span class=\"string\">'\\\\%\\\\&#125;'</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            item.innerHTML = item.innerHTML.replace(<span class=\"regexp\">/\\\\%\\\\&#125;/g</span>,<span class=\"string\">'\\%\\&#125;'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>完毕，搞定。</p>\n","site":{"data":{}},"excerpt":"<p>在前些天写一篇渲染的文章时候，文章内容反复出现了 <code>{ { name } }</code> 这种格式的代码。</p>\n<p>之前也遇到过一次，是代码中有 <code>{ %  % }</code> 的部分，也没办法处理。</p>\n<p>思考很久，也查阅了很多文章，始终无法解决。</p>","more":"<p>jekyll 会把模板中 <code>{ { ... } }</code> 当做语法串进行处理，最终传输到页面就是空串了。</p>\n<p>查阅 jekyll 的文档，没发现有能忽略 <code>{ { } }</code> 的配置。我尝试用 <code>{ { &quot;...&quot; | html } }</code> 这种形式，通过管道运算符来处理，结果还是不行。</p>\n<p>最终考虑一种方案，将符号转义，让 jekyll 直接将符号输出到页面吧，多出的转义符号，交给js来处理。</p>\n<p>经过研究，只能使用 <code>\\{ \\{ ... \\} \\}</code>(去掉空格) 这种形式，不能用 <code>{\\{ ... }\\}</code> 这种形式，原因在于，后者代码的展现配色效果不如前者好。</p>\n<p>之后，加入js代码，作用很简单，找到页面存在问题的部分，然后依次用正则替换为正确的展现。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fixBrace = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> list = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'code'</span>);</span><br><span class=\"line\">    list.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.innerHTML.indexOf(<span class=\"string\">'\\\\&#123;\\\\&#123;'</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            item.innerHTML = item.innerHTML.replace(<span class=\"regexp\">/\\\\&#123;\\\\&#123;/g</span>,<span class=\"string\">'&#123; &#123;'</span>);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.innerHTML.indexOf(<span class=\"string\">'\\\\&#125;\\\\&#125;'</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            item.innerHTML = item.innerHTML.replace(<span class=\"regexp\">/\\\\&#125;\\\\&#125;/g</span>,<span class=\"string\">'&#125; &#125;'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.innerHTML.indexOf(<span class=\"string\">'\\\\&#123;\\\\%'</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            item.innerHTML = item.innerHTML.replace(<span class=\"regexp\">/\\\\&#123;\\\\%/g</span>,<span class=\"string\">'\\&#123;\\%'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.innerHTML.indexOf(<span class=\"string\">'\\\\%\\\\&#125;'</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            item.innerHTML = item.innerHTML.replace(<span class=\"regexp\">/\\\\%\\\\&#125;/g</span>,<span class=\"string\">'\\%\\&#125;'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>完毕，搞定。</p>"},{"layout":"post","title":"GO 语言学习片段","date":"2017-03-31T00:09:00.000Z","_content":"\ngo 语言入门笔记。\n\n<!-- more -->\n\n### 循环输出字符\n\n```go\npackage main\nimport \"fmt\"\n\nfunc main() {\n    var max int = 25\n    var c string = \"G\"\n    \n    for i := 1; i <= max; i++{\n        var str = \"\"\n        for j := 1; j <= i; j++{\n            str += c\n        }\n        fmt.Println(str)\n    }\n}\n```\n\n### 函数多返回值，解构赋值\n\n```go\npackage main\nimport \"fmt\"\n\nfunc twoNumbers (a int, b int, c int) (x int, y int){\n    x = a + b\n    y = b + c\n    return // 省略 x和y\n}\n\nfunc main() {\n    m,n := twoNumbers(3, 5, 8) //等同于Javascript的解构赋值\n    fmt.Printf(\"第一个数:%d, 第二个数:%d\", m, n)\n}\n```\n\n### 函数变长参数（展开运算符）\n\n```go\npackage main\nimport \"fmt\"\n\nfunc add (args ...int) (sum int){\n    for ix,v := range args {\n        fmt.Printf(\"index:%d,current:%d\\n\", ix, v)\n        sum += v\n    }\n    return\n}\n\nfunc main() {\n    sum := add(3, 5, 8, 9, 12)\n    fmt.Printf(\"sum:%d\", sum)\n}\n```\n\n### defer推迟执行（异步执行）\n\n```go\npackage main\nimport \"fmt\"\n\nfunc say (str string){\n    fmt.Println(str)\n}\n\nfunc f1 (){\n    fmt.Println(\"entry f1...\")\n    defer say(\"defer f1\")\n    fmt.Println(\"leave f1...\")\n    f2()\n}\n\nfunc f2 (){\n    fmt.Println(\"entry f2...\")\n    defer say(\"defer f2\")\n    fmt.Println(\"leave f2...\")\n}\n\nfunc main() {\n    fmt.Println(\"entry main...\")\n    f1()\n    fmt.Println(\"leave main...\")\n}\n\n// entry main...\n// entry f1...\n// leave f1...\n// entry f2...\n// leave f2...\n// defer f2\n// defer f1\n// leave main...\n```\n\n需要注意的是，`leave main...`是最后执行的，推迟执行并没有在其之后。而且 defer 的函数类似栈操作，先进后出，后进先出。\n\n### 关于指针的使用\n\n`*` 是获取值，`&`获取地址。\n\n声明 `*p`，此时 `*p` 是地址。\n\n声明 `q`，此时 `q` 是值，`&q`是取址。\n\n```go\npackage main\nimport \"fmt\"\n\n// 传入普通数组\nfunc f(a [3]int) { \n    a[2] = 5\n}\n\n// 传入指针类型\nfunc fp(a *[3]int) { \n    a[1] = 3\n}\n\nfunc main() {\n    var ar [3]int\n    fmt.Println(ar)\n\n    f(ar)\n    fmt.Println(ar)\n\n    fp(&ar) // 此处需要传入地址\n    fmt.Println(ar)\n}\n\n// [0 0 0]\n// [0 0 0]\n// [0 3 0]\n```\n","source":"_posts/2017/2017-03-31-go-snippet.md","raw":"---\nlayout: post\ntitle: \"GO 语言学习片段\"\ndate: 2017-03-31 00:09:00 GMT+0000\ncategories: [代码]\ntags:  [go,指针]\n---\n\ngo 语言入门笔记。\n\n<!-- more -->\n\n### 循环输出字符\n\n```go\npackage main\nimport \"fmt\"\n\nfunc main() {\n    var max int = 25\n    var c string = \"G\"\n    \n    for i := 1; i <= max; i++{\n        var str = \"\"\n        for j := 1; j <= i; j++{\n            str += c\n        }\n        fmt.Println(str)\n    }\n}\n```\n\n### 函数多返回值，解构赋值\n\n```go\npackage main\nimport \"fmt\"\n\nfunc twoNumbers (a int, b int, c int) (x int, y int){\n    x = a + b\n    y = b + c\n    return // 省略 x和y\n}\n\nfunc main() {\n    m,n := twoNumbers(3, 5, 8) //等同于Javascript的解构赋值\n    fmt.Printf(\"第一个数:%d, 第二个数:%d\", m, n)\n}\n```\n\n### 函数变长参数（展开运算符）\n\n```go\npackage main\nimport \"fmt\"\n\nfunc add (args ...int) (sum int){\n    for ix,v := range args {\n        fmt.Printf(\"index:%d,current:%d\\n\", ix, v)\n        sum += v\n    }\n    return\n}\n\nfunc main() {\n    sum := add(3, 5, 8, 9, 12)\n    fmt.Printf(\"sum:%d\", sum)\n}\n```\n\n### defer推迟执行（异步执行）\n\n```go\npackage main\nimport \"fmt\"\n\nfunc say (str string){\n    fmt.Println(str)\n}\n\nfunc f1 (){\n    fmt.Println(\"entry f1...\")\n    defer say(\"defer f1\")\n    fmt.Println(\"leave f1...\")\n    f2()\n}\n\nfunc f2 (){\n    fmt.Println(\"entry f2...\")\n    defer say(\"defer f2\")\n    fmt.Println(\"leave f2...\")\n}\n\nfunc main() {\n    fmt.Println(\"entry main...\")\n    f1()\n    fmt.Println(\"leave main...\")\n}\n\n// entry main...\n// entry f1...\n// leave f1...\n// entry f2...\n// leave f2...\n// defer f2\n// defer f1\n// leave main...\n```\n\n需要注意的是，`leave main...`是最后执行的，推迟执行并没有在其之后。而且 defer 的函数类似栈操作，先进后出，后进先出。\n\n### 关于指针的使用\n\n`*` 是获取值，`&`获取地址。\n\n声明 `*p`，此时 `*p` 是地址。\n\n声明 `q`，此时 `q` 是值，`&q`是取址。\n\n```go\npackage main\nimport \"fmt\"\n\n// 传入普通数组\nfunc f(a [3]int) { \n    a[2] = 5\n}\n\n// 传入指针类型\nfunc fp(a *[3]int) { \n    a[1] = 3\n}\n\nfunc main() {\n    var ar [3]int\n    fmt.Println(ar)\n\n    f(ar)\n    fmt.Println(ar)\n\n    fp(&ar) // 此处需要传入地址\n    fmt.Println(ar)\n}\n\n// [0 0 0]\n// [0 0 0]\n// [0 3 0]\n```\n","slug":"2017-2017-03-31-go-snippet","published":1,"updated":"2019-07-18T17:19:07.340Z","comments":1,"photos":[],"link":"","_id":"cjy8y72r1001os21d7ggrjtrc","content":"<p>go 语言入门笔记。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"循环输出字符\"><a href=\"#循环输出字符\" class=\"headerlink\" title=\"循环输出字符\"></a>循环输出字符</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> max <span class=\"keyword\">int</span> = <span class=\"number\">25</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> c <span class=\"keyword\">string</span> = <span class=\"string\">\"G\"</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= max; i++&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> str = <span class=\"string\">\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j := <span class=\"number\">1</span>; j &lt;= i; j++&#123;</span><br><span class=\"line\">            str += c</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fmt.Println(str)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数多返回值，解构赋值\"><a href=\"#函数多返回值，解构赋值\" class=\"headerlink\" title=\"函数多返回值，解构赋值\"></a>函数多返回值，解构赋值</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">twoNumbers</span> <span class=\"params\">(a <span class=\"keyword\">int</span>, b <span class=\"keyword\">int</span>, c <span class=\"keyword\">int</span>)</span> <span class=\"params\">(x <span class=\"keyword\">int</span>, y <span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">    x = a + b</span><br><span class=\"line\">    y = b + c</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"comment\">// 省略 x和y</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    m,n := twoNumbers(<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>) <span class=\"comment\">//等同于Javascript的解构赋值</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"第一个数:%d, 第二个数:%d\"</span>, m, n)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数变长参数（展开运算符）\"><a href=\"#函数变长参数（展开运算符）\" class=\"headerlink\" title=\"函数变长参数（展开运算符）\"></a>函数变长参数（展开运算符）</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span> <span class=\"params\">(args ...<span class=\"keyword\">int</span>)</span> <span class=\"params\">(sum <span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ix,v := <span class=\"keyword\">range</span> args &#123;</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"index:%d,current:%d\\n\"</span>, ix, v)</span><br><span class=\"line\">        sum += v</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    sum := add(<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"sum:%d\"</span>, sum)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"defer推迟执行（异步执行）\"><a href=\"#defer推迟执行（异步执行）\" class=\"headerlink\" title=\"defer推迟执行（异步执行）\"></a>defer推迟执行（异步执行）</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">say</span> <span class=\"params\">(str <span class=\"keyword\">string</span>)</span></span>&#123;</span><br><span class=\"line\">    fmt.Println(str)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f1</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"entry f1...\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> say(<span class=\"string\">\"defer f1\"</span>)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"leave f1...\"</span>)</span><br><span class=\"line\">    f2()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f2</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"entry f2...\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> say(<span class=\"string\">\"defer f2\"</span>)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"leave f2...\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"entry main...\"</span>)</span><br><span class=\"line\">    f1()</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"leave main...\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// entry main...</span></span><br><span class=\"line\"><span class=\"comment\">// entry f1...</span></span><br><span class=\"line\"><span class=\"comment\">// leave f1...</span></span><br><span class=\"line\"><span class=\"comment\">// entry f2...</span></span><br><span class=\"line\"><span class=\"comment\">// leave f2...</span></span><br><span class=\"line\"><span class=\"comment\">// defer f2</span></span><br><span class=\"line\"><span class=\"comment\">// defer f1</span></span><br><span class=\"line\"><span class=\"comment\">// leave main...</span></span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，<code>leave main...</code>是最后执行的，推迟执行并没有在其之后。而且 defer 的函数类似栈操作，先进后出，后进先出。</p>\n<h3 id=\"关于指针的使用\"><a href=\"#关于指针的使用\" class=\"headerlink\" title=\"关于指针的使用\"></a>关于指针的使用</h3><p><code>*</code> 是获取值，<code>&amp;</code>获取地址。</p>\n<p>声明 <code>*p</code>，此时 <code>*p</code> 是地址。</p>\n<p>声明 <code>q</code>，此时 <code>q</code> 是值，<code>&amp;q</code>是取址。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传入普通数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span><span class=\"params\">(a [3]<span class=\"keyword\">int</span>)</span></span> &#123; </span><br><span class=\"line\">    a[<span class=\"number\">2</span>] = <span class=\"number\">5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传入指针类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fp</span><span class=\"params\">(a *[3]<span class=\"keyword\">int</span>)</span></span> &#123; </span><br><span class=\"line\">    a[<span class=\"number\">1</span>] = <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ar [<span class=\"number\">3</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">    fmt.Println(ar)</span><br><span class=\"line\"></span><br><span class=\"line\">    f(ar)</span><br><span class=\"line\">    fmt.Println(ar)</span><br><span class=\"line\"></span><br><span class=\"line\">    fp(&amp;ar) <span class=\"comment\">// 此处需要传入地址</span></span><br><span class=\"line\">    fmt.Println(ar)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [0 0 0]</span></span><br><span class=\"line\"><span class=\"comment\">// [0 0 0]</span></span><br><span class=\"line\"><span class=\"comment\">// [0 3 0]</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>go 语言入门笔记。</p>","more":"<h3 id=\"循环输出字符\"><a href=\"#循环输出字符\" class=\"headerlink\" title=\"循环输出字符\"></a>循环输出字符</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> max <span class=\"keyword\">int</span> = <span class=\"number\">25</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> c <span class=\"keyword\">string</span> = <span class=\"string\">\"G\"</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= max; i++&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> str = <span class=\"string\">\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j := <span class=\"number\">1</span>; j &lt;= i; j++&#123;</span><br><span class=\"line\">            str += c</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fmt.Println(str)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数多返回值，解构赋值\"><a href=\"#函数多返回值，解构赋值\" class=\"headerlink\" title=\"函数多返回值，解构赋值\"></a>函数多返回值，解构赋值</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">twoNumbers</span> <span class=\"params\">(a <span class=\"keyword\">int</span>, b <span class=\"keyword\">int</span>, c <span class=\"keyword\">int</span>)</span> <span class=\"params\">(x <span class=\"keyword\">int</span>, y <span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">    x = a + b</span><br><span class=\"line\">    y = b + c</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"comment\">// 省略 x和y</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    m,n := twoNumbers(<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>) <span class=\"comment\">//等同于Javascript的解构赋值</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"第一个数:%d, 第二个数:%d\"</span>, m, n)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数变长参数（展开运算符）\"><a href=\"#函数变长参数（展开运算符）\" class=\"headerlink\" title=\"函数变长参数（展开运算符）\"></a>函数变长参数（展开运算符）</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span> <span class=\"params\">(args ...<span class=\"keyword\">int</span>)</span> <span class=\"params\">(sum <span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ix,v := <span class=\"keyword\">range</span> args &#123;</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"index:%d,current:%d\\n\"</span>, ix, v)</span><br><span class=\"line\">        sum += v</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    sum := add(<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"sum:%d\"</span>, sum)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"defer推迟执行（异步执行）\"><a href=\"#defer推迟执行（异步执行）\" class=\"headerlink\" title=\"defer推迟执行（异步执行）\"></a>defer推迟执行（异步执行）</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">say</span> <span class=\"params\">(str <span class=\"keyword\">string</span>)</span></span>&#123;</span><br><span class=\"line\">    fmt.Println(str)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f1</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"entry f1...\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> say(<span class=\"string\">\"defer f1\"</span>)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"leave f1...\"</span>)</span><br><span class=\"line\">    f2()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f2</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"entry f2...\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> say(<span class=\"string\">\"defer f2\"</span>)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"leave f2...\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"entry main...\"</span>)</span><br><span class=\"line\">    f1()</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"leave main...\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// entry main...</span></span><br><span class=\"line\"><span class=\"comment\">// entry f1...</span></span><br><span class=\"line\"><span class=\"comment\">// leave f1...</span></span><br><span class=\"line\"><span class=\"comment\">// entry f2...</span></span><br><span class=\"line\"><span class=\"comment\">// leave f2...</span></span><br><span class=\"line\"><span class=\"comment\">// defer f2</span></span><br><span class=\"line\"><span class=\"comment\">// defer f1</span></span><br><span class=\"line\"><span class=\"comment\">// leave main...</span></span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，<code>leave main...</code>是最后执行的，推迟执行并没有在其之后。而且 defer 的函数类似栈操作，先进后出，后进先出。</p>\n<h3 id=\"关于指针的使用\"><a href=\"#关于指针的使用\" class=\"headerlink\" title=\"关于指针的使用\"></a>关于指针的使用</h3><p><code>*</code> 是获取值，<code>&amp;</code>获取地址。</p>\n<p>声明 <code>*p</code>，此时 <code>*p</code> 是地址。</p>\n<p>声明 <code>q</code>，此时 <code>q</code> 是值，<code>&amp;q</code>是取址。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传入普通数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span><span class=\"params\">(a [3]<span class=\"keyword\">int</span>)</span></span> &#123; </span><br><span class=\"line\">    a[<span class=\"number\">2</span>] = <span class=\"number\">5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传入指针类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fp</span><span class=\"params\">(a *[3]<span class=\"keyword\">int</span>)</span></span> &#123; </span><br><span class=\"line\">    a[<span class=\"number\">1</span>] = <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ar [<span class=\"number\">3</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">    fmt.Println(ar)</span><br><span class=\"line\"></span><br><span class=\"line\">    f(ar)</span><br><span class=\"line\">    fmt.Println(ar)</span><br><span class=\"line\"></span><br><span class=\"line\">    fp(&amp;ar) <span class=\"comment\">// 此处需要传入地址</span></span><br><span class=\"line\">    fmt.Println(ar)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [0 0 0]</span></span><br><span class=\"line\"><span class=\"comment\">// [0 0 0]</span></span><br><span class=\"line\"><span class=\"comment\">// [0 3 0]</span></span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"移动端采用flexible布局 安卓机华为vivo 10rem大于屏幕宽度的解决办法","date":"2017-03-05T22:35:00.000Z","_content":"\n在我们的新项目中，依旧采用了传统的flexible思路，对屏幕进行分割，通过 rem 来进行比例适配。\n\n<!-- more -->\n\n## 简易 flexible 的思路\n\n首先获得屏幕宽度，并将其平均分10份，比如安卓机，屏幕宽度360px，每一份就是36px。\n\n然后把一份的宽度写入根节点。 `html style=\"font-size:36px\"`。之后，如果想用25%的屏幕宽度，直接写2.5rem就行了。这样好处是不用从父级到子级一层一层的传递宽度，尤其是每次都要写100%。\n\n之后，还应该把body元素字体重设下。这样em也可以很好的使用。`body style=\"font-size:16px\"`。\n\n正常情况下，只需要四行代码就可以搞定。\n\n* 获取屏幕宽度\n* 将屏幕宽度分成10份\n* 将每一份宽度写入根节点\n* 重设下body字体大小\n\n如果你更希望更好一些，可以把屏幕旋转加上，旋转后触发这四步操作。\n\n基本上就这样，在不考虑dpr为 2 或者 3 的时候，这样做已经完全满足了。\n\n> 为什么不是平分100份呢？比如iPhone 6s Plus，屏幕宽度414px（默认dpr=1），如果分成100份，每份是4.14px，太小了，很多时候支持不了。和文字过小被限制差不多。如果分成25份，额，计算太麻烦了而已。\n\n## 问题出现\n\n之前一直按照上文那么做，也没发现问题。应该是也没接到问题反馈。\n\n但是这次遇到了一个奇葩情况。\n\n360px宽度的安卓机vivo，html已经设置为36px。有元素10rem，正常情况下，别的机型都是等于360px宽（屏宽），但是此机型奇葩，通过js计算后获取，值为392.03125px。如果不用rem，用100%，则没有问题。\n\n问题出现在安卓APP的webview中。至于手机浏览器中是否会出问题，我忘记了。\n\n网上也没有关于这方面的资料。\n\n唯独一条记录在这里：[segmentfault](https://segmentfault.com/q/1010000006851410)\n\n## 问题的解决\n\n后来曾经巧合，阅读到一篇文章，大概也是说页面缩放-375px屏幕的实现。出的问题结果和我们的情况是一致的。意思是 `initial-scale` 要进行设置。我检查了下，我们的代码也写好了。但还是不行。[文章见此](https://github.com/ShowJoy-com/showjoy-blog/issues/6) ，以及他的文章参考了[这里](http://lvdada.org/2016/01/28/viewport-and-flexibleJs/)。\n\n他的文章思路是修改scale数值，以便达到用360px宽度的屏幕，显示375px的内容。\n\n而我们思考的方向，是针对出问题的机型，进行fontSize修复。\n\n我们的思路是，首先用标准方案（上文四步方法），然后进行检查。安卓机全部要添加一个10rem元素，检查其计算宽度和屏幕宽度的比例，如果10rem元素超过屏幕宽度了，那就是当前机器出问题，此时需要进行修复。\n\n修复方法和他们的计算一致，看看尺寸比正常的屏幕宽度大了多少倍。大了多少倍，就把fontSize缩小多少倍。\n\n\n**这两种方式的区别：**\n\n* 他们的是定宽（此时所有机器都采用了设计稿的一半，375px）但是修复起来简单质量高，缺点是414px的iPhone，也要降低屏幕宽度，在文字显示上吃亏，因为屏幕最多只有375px，文字是按照px定义的。（我这么认为的）\n* 我们是常规宽，大屏机用自己的大宽度，小屏机用自己的小屏宽度，图片缩放和他们一样都是屏幕比例，但是文字展示上不会受影响。\n\n\n> 一般情况下，用了flexible方案，仅仅对布局使用rem，而对文字之类，还是使用px或em为单位。用了rem或进行等比缩小，小屏手机文字会看不清或者浏览器禁止设置过小的字体。\n\n## 最后，附上我们的解决方案代码\n\n```js\n    (function (win) {\n        // html根元素\n        var HTML_ELEMENT = document.documentElement;\n        // 屏幕宽度\n        var SCREEN_WIDTH = 0;\n        // 标准fontSize计算值\n        var BASE_FONT_SIZE = 0;\n        // 处理后的fontSize计算值\n        var REAL_BASE_FONT_SIZE = 0;\n\n        /**\n        * 修复异常的fontSize代码\n        */\n        var fix = function () {\n            var ua = navigator.userAgent;\n            var isIOS = /(iPhone|iPad|iPod)/.test(ua);\n            // 非苹果设备，均进行检测\n            if (!isIOS) {\n                var div = win.document.createElement('div');\n                div.style.width = '10rem';\n                win.document.body.appendChild(div);\n                win.setTimeout(function () {\n                    var getWidth = parseFloat(win.getComputedStyle(div).width);\n                    if (getWidth > SCREEN_WIDTH) {\n                        // 此时是出问题的情况\n                        var ratio = getWidth / SCREEN_WIDTH;\n                        REAL_BASE_FONT_SIZE = (BASE_FONT_SIZE / ratio).toFixed(4);\n                        HTML_ELEMENT.style.fontSize = REAL_BASE_FONT_SIZE + 'px';\n                    }\n                    div.remove();\n                }, 100);\n            }\n        };\n\n        /**\n         * 调整根元素fontSize\n         */\n        var setBaseFontSize = function () {\n            // 获取屏幕宽度\n            SCREEN_WIDTH = HTML_ELEMENT.clientWidth;\n            // 将屏幕分成10份，获取每一份宽度\n            BASE_FONT_SIZE = SCREEN_WIDTH / 10;\n            // 写入html元素fontSize\n            HTML_ELEMENT.style.fontSize = BASE_FONT_SIZE + 'px';\n            fix();\n        };\n\n        /**\n         *手机旋转控制\n         */\n        var tid;\n        if (win.onorientationchange) {\n            win.onorientationchange = function () {\n                clearTimeout(tid);\n                tid = setTimeout(function () {\n                    setBaseFontSize();\n                }, 300);\n            }\n        } else {\n            win.onresize = function () {\n                clearTimeout(tid);\n                tid = setTimeout(function () {\n                    setBaseFontSize();\n                }, 300);\n            };\n        }\n        setBaseFontSize();\n    })(window);\n```","source":"_posts/2017/2017-03-05-js-flexible.md","raw":"---\nlayout: post\ntitle: \"移动端采用flexible布局 安卓机华为vivo 10rem大于屏幕宽度的解决办法\"\ndate: 2017-03-05 22:35:00 GMT+0000\ncategories: [前端]\ntags:  [flexible]\n---\n\n在我们的新项目中，依旧采用了传统的flexible思路，对屏幕进行分割，通过 rem 来进行比例适配。\n\n<!-- more -->\n\n## 简易 flexible 的思路\n\n首先获得屏幕宽度，并将其平均分10份，比如安卓机，屏幕宽度360px，每一份就是36px。\n\n然后把一份的宽度写入根节点。 `html style=\"font-size:36px\"`。之后，如果想用25%的屏幕宽度，直接写2.5rem就行了。这样好处是不用从父级到子级一层一层的传递宽度，尤其是每次都要写100%。\n\n之后，还应该把body元素字体重设下。这样em也可以很好的使用。`body style=\"font-size:16px\"`。\n\n正常情况下，只需要四行代码就可以搞定。\n\n* 获取屏幕宽度\n* 将屏幕宽度分成10份\n* 将每一份宽度写入根节点\n* 重设下body字体大小\n\n如果你更希望更好一些，可以把屏幕旋转加上，旋转后触发这四步操作。\n\n基本上就这样，在不考虑dpr为 2 或者 3 的时候，这样做已经完全满足了。\n\n> 为什么不是平分100份呢？比如iPhone 6s Plus，屏幕宽度414px（默认dpr=1），如果分成100份，每份是4.14px，太小了，很多时候支持不了。和文字过小被限制差不多。如果分成25份，额，计算太麻烦了而已。\n\n## 问题出现\n\n之前一直按照上文那么做，也没发现问题。应该是也没接到问题反馈。\n\n但是这次遇到了一个奇葩情况。\n\n360px宽度的安卓机vivo，html已经设置为36px。有元素10rem，正常情况下，别的机型都是等于360px宽（屏宽），但是此机型奇葩，通过js计算后获取，值为392.03125px。如果不用rem，用100%，则没有问题。\n\n问题出现在安卓APP的webview中。至于手机浏览器中是否会出问题，我忘记了。\n\n网上也没有关于这方面的资料。\n\n唯独一条记录在这里：[segmentfault](https://segmentfault.com/q/1010000006851410)\n\n## 问题的解决\n\n后来曾经巧合，阅读到一篇文章，大概也是说页面缩放-375px屏幕的实现。出的问题结果和我们的情况是一致的。意思是 `initial-scale` 要进行设置。我检查了下，我们的代码也写好了。但还是不行。[文章见此](https://github.com/ShowJoy-com/showjoy-blog/issues/6) ，以及他的文章参考了[这里](http://lvdada.org/2016/01/28/viewport-and-flexibleJs/)。\n\n他的文章思路是修改scale数值，以便达到用360px宽度的屏幕，显示375px的内容。\n\n而我们思考的方向，是针对出问题的机型，进行fontSize修复。\n\n我们的思路是，首先用标准方案（上文四步方法），然后进行检查。安卓机全部要添加一个10rem元素，检查其计算宽度和屏幕宽度的比例，如果10rem元素超过屏幕宽度了，那就是当前机器出问题，此时需要进行修复。\n\n修复方法和他们的计算一致，看看尺寸比正常的屏幕宽度大了多少倍。大了多少倍，就把fontSize缩小多少倍。\n\n\n**这两种方式的区别：**\n\n* 他们的是定宽（此时所有机器都采用了设计稿的一半，375px）但是修复起来简单质量高，缺点是414px的iPhone，也要降低屏幕宽度，在文字显示上吃亏，因为屏幕最多只有375px，文字是按照px定义的。（我这么认为的）\n* 我们是常规宽，大屏机用自己的大宽度，小屏机用自己的小屏宽度，图片缩放和他们一样都是屏幕比例，但是文字展示上不会受影响。\n\n\n> 一般情况下，用了flexible方案，仅仅对布局使用rem，而对文字之类，还是使用px或em为单位。用了rem或进行等比缩小，小屏手机文字会看不清或者浏览器禁止设置过小的字体。\n\n## 最后，附上我们的解决方案代码\n\n```js\n    (function (win) {\n        // html根元素\n        var HTML_ELEMENT = document.documentElement;\n        // 屏幕宽度\n        var SCREEN_WIDTH = 0;\n        // 标准fontSize计算值\n        var BASE_FONT_SIZE = 0;\n        // 处理后的fontSize计算值\n        var REAL_BASE_FONT_SIZE = 0;\n\n        /**\n        * 修复异常的fontSize代码\n        */\n        var fix = function () {\n            var ua = navigator.userAgent;\n            var isIOS = /(iPhone|iPad|iPod)/.test(ua);\n            // 非苹果设备，均进行检测\n            if (!isIOS) {\n                var div = win.document.createElement('div');\n                div.style.width = '10rem';\n                win.document.body.appendChild(div);\n                win.setTimeout(function () {\n                    var getWidth = parseFloat(win.getComputedStyle(div).width);\n                    if (getWidth > SCREEN_WIDTH) {\n                        // 此时是出问题的情况\n                        var ratio = getWidth / SCREEN_WIDTH;\n                        REAL_BASE_FONT_SIZE = (BASE_FONT_SIZE / ratio).toFixed(4);\n                        HTML_ELEMENT.style.fontSize = REAL_BASE_FONT_SIZE + 'px';\n                    }\n                    div.remove();\n                }, 100);\n            }\n        };\n\n        /**\n         * 调整根元素fontSize\n         */\n        var setBaseFontSize = function () {\n            // 获取屏幕宽度\n            SCREEN_WIDTH = HTML_ELEMENT.clientWidth;\n            // 将屏幕分成10份，获取每一份宽度\n            BASE_FONT_SIZE = SCREEN_WIDTH / 10;\n            // 写入html元素fontSize\n            HTML_ELEMENT.style.fontSize = BASE_FONT_SIZE + 'px';\n            fix();\n        };\n\n        /**\n         *手机旋转控制\n         */\n        var tid;\n        if (win.onorientationchange) {\n            win.onorientationchange = function () {\n                clearTimeout(tid);\n                tid = setTimeout(function () {\n                    setBaseFontSize();\n                }, 300);\n            }\n        } else {\n            win.onresize = function () {\n                clearTimeout(tid);\n                tid = setTimeout(function () {\n                    setBaseFontSize();\n                }, 300);\n            };\n        }\n        setBaseFontSize();\n    })(window);\n```","slug":"2017-2017-03-05-js-flexible","published":1,"updated":"2019-07-18T17:19:07.236Z","comments":1,"photos":[],"link":"","_id":"cjy8y72r7001ss21dz6r7q6ff","content":"<p>在我们的新项目中，依旧采用了传统的flexible思路，对屏幕进行分割，通过 rem 来进行比例适配。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"简易-flexible-的思路\"><a href=\"#简易-flexible-的思路\" class=\"headerlink\" title=\"简易 flexible 的思路\"></a>简易 flexible 的思路</h2><p>首先获得屏幕宽度，并将其平均分10份，比如安卓机，屏幕宽度360px，每一份就是36px。</p>\n<p>然后把一份的宽度写入根节点。 <code>html style=&quot;font-size:36px&quot;</code>。之后，如果想用25%的屏幕宽度，直接写2.5rem就行了。这样好处是不用从父级到子级一层一层的传递宽度，尤其是每次都要写100%。</p>\n<p>之后，还应该把body元素字体重设下。这样em也可以很好的使用。<code>body style=&quot;font-size:16px&quot;</code>。</p>\n<p>正常情况下，只需要四行代码就可以搞定。</p>\n<ul>\n<li>获取屏幕宽度</li>\n<li>将屏幕宽度分成10份</li>\n<li>将每一份宽度写入根节点</li>\n<li>重设下body字体大小</li>\n</ul>\n<p>如果你更希望更好一些，可以把屏幕旋转加上，旋转后触发这四步操作。</p>\n<p>基本上就这样，在不考虑dpr为 2 或者 3 的时候，这样做已经完全满足了。</p>\n<blockquote>\n<p>为什么不是平分100份呢？比如iPhone 6s Plus，屏幕宽度414px（默认dpr=1），如果分成100份，每份是4.14px，太小了，很多时候支持不了。和文字过小被限制差不多。如果分成25份，额，计算太麻烦了而已。</p>\n</blockquote>\n<h2 id=\"问题出现\"><a href=\"#问题出现\" class=\"headerlink\" title=\"问题出现\"></a>问题出现</h2><p>之前一直按照上文那么做，也没发现问题。应该是也没接到问题反馈。</p>\n<p>但是这次遇到了一个奇葩情况。</p>\n<p>360px宽度的安卓机vivo，html已经设置为36px。有元素10rem，正常情况下，别的机型都是等于360px宽（屏宽），但是此机型奇葩，通过js计算后获取，值为392.03125px。如果不用rem，用100%，则没有问题。</p>\n<p>问题出现在安卓APP的webview中。至于手机浏览器中是否会出问题，我忘记了。</p>\n<p>网上也没有关于这方面的资料。</p>\n<p>唯独一条记录在这里：<a href=\"https://segmentfault.com/q/1010000006851410\" target=\"_blank\" rel=\"noopener\">segmentfault</a></p>\n<h2 id=\"问题的解决\"><a href=\"#问题的解决\" class=\"headerlink\" title=\"问题的解决\"></a>问题的解决</h2><p>后来曾经巧合，阅读到一篇文章，大概也是说页面缩放-375px屏幕的实现。出的问题结果和我们的情况是一致的。意思是 <code>initial-scale</code> 要进行设置。我检查了下，我们的代码也写好了。但还是不行。<a href=\"https://github.com/ShowJoy-com/showjoy-blog/issues/6\" target=\"_blank\" rel=\"noopener\">文章见此</a> ，以及他的文章参考了<a href=\"http://lvdada.org/2016/01/28/viewport-and-flexibleJs/\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>他的文章思路是修改scale数值，以便达到用360px宽度的屏幕，显示375px的内容。</p>\n<p>而我们思考的方向，是针对出问题的机型，进行fontSize修复。</p>\n<p>我们的思路是，首先用标准方案（上文四步方法），然后进行检查。安卓机全部要添加一个10rem元素，检查其计算宽度和屏幕宽度的比例，如果10rem元素超过屏幕宽度了，那就是当前机器出问题，此时需要进行修复。</p>\n<p>修复方法和他们的计算一致，看看尺寸比正常的屏幕宽度大了多少倍。大了多少倍，就把fontSize缩小多少倍。</p>\n<p><strong>这两种方式的区别：</strong></p>\n<ul>\n<li>他们的是定宽（此时所有机器都采用了设计稿的一半，375px）但是修复起来简单质量高，缺点是414px的iPhone，也要降低屏幕宽度，在文字显示上吃亏，因为屏幕最多只有375px，文字是按照px定义的。（我这么认为的）</li>\n<li>我们是常规宽，大屏机用自己的大宽度，小屏机用自己的小屏宽度，图片缩放和他们一样都是屏幕比例，但是文字展示上不会受影响。</li>\n</ul>\n<blockquote>\n<p>一般情况下，用了flexible方案，仅仅对布局使用rem，而对文字之类，还是使用px或em为单位。用了rem或进行等比缩小，小屏手机文字会看不清或者浏览器禁止设置过小的字体。</p>\n</blockquote>\n<h2 id=\"最后，附上我们的解决方案代码\"><a href=\"#最后，附上我们的解决方案代码\" class=\"headerlink\" title=\"最后，附上我们的解决方案代码\"></a>最后，附上我们的解决方案代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">win</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// html根元素</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> HTML_ELEMENT = <span class=\"built_in\">document</span>.documentElement;</span><br><span class=\"line\">    <span class=\"comment\">// 屏幕宽度</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> SCREEN_WIDTH = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 标准fontSize计算值</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> BASE_FONT_SIZE = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 处理后的fontSize计算值</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> REAL_BASE_FONT_SIZE = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 修复异常的fontSize代码</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> fix = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ua = navigator.userAgent;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> isIOS = <span class=\"regexp\">/(iPhone|iPad|iPod)/</span>.test(ua);</span><br><span class=\"line\">        <span class=\"comment\">// 非苹果设备，均进行检测</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isIOS) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> div = win.document.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">            div.style.width = <span class=\"string\">'10rem'</span>;</span><br><span class=\"line\">            win.document.body.appendChild(div);</span><br><span class=\"line\">            win.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> getWidth = <span class=\"built_in\">parseFloat</span>(win.getComputedStyle(div).width);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (getWidth &gt; SCREEN_WIDTH) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 此时是出问题的情况</span></span><br><span class=\"line\">                    <span class=\"keyword\">var</span> ratio = getWidth / SCREEN_WIDTH;</span><br><span class=\"line\">                    REAL_BASE_FONT_SIZE = (BASE_FONT_SIZE / ratio).toFixed(<span class=\"number\">4</span>);</span><br><span class=\"line\">                    HTML_ELEMENT.style.fontSize = REAL_BASE_FONT_SIZE + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                div.remove();</span><br><span class=\"line\">            &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 调整根元素fontSize</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> setBaseFontSize = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取屏幕宽度</span></span><br><span class=\"line\">        SCREEN_WIDTH = HTML_ELEMENT.clientWidth;</span><br><span class=\"line\">        <span class=\"comment\">// 将屏幕分成10份，获取每一份宽度</span></span><br><span class=\"line\">        BASE_FONT_SIZE = SCREEN_WIDTH / <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 写入html元素fontSize</span></span><br><span class=\"line\">        HTML_ELEMENT.style.fontSize = BASE_FONT_SIZE + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">        fix();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *手机旋转控制</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> tid;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (win.onorientationchange) &#123;</span><br><span class=\"line\">        win.onorientationchange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            clearTimeout(tid);</span><br><span class=\"line\">            tid = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                setBaseFontSize();</span><br><span class=\"line\">            &#125;, <span class=\"number\">300</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        win.onresize = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            clearTimeout(tid);</span><br><span class=\"line\">            tid = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                setBaseFontSize();</span><br><span class=\"line\">            &#125;, <span class=\"number\">300</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setBaseFontSize();</span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>在我们的新项目中，依旧采用了传统的flexible思路，对屏幕进行分割，通过 rem 来进行比例适配。</p>","more":"<h2 id=\"简易-flexible-的思路\"><a href=\"#简易-flexible-的思路\" class=\"headerlink\" title=\"简易 flexible 的思路\"></a>简易 flexible 的思路</h2><p>首先获得屏幕宽度，并将其平均分10份，比如安卓机，屏幕宽度360px，每一份就是36px。</p>\n<p>然后把一份的宽度写入根节点。 <code>html style=&quot;font-size:36px&quot;</code>。之后，如果想用25%的屏幕宽度，直接写2.5rem就行了。这样好处是不用从父级到子级一层一层的传递宽度，尤其是每次都要写100%。</p>\n<p>之后，还应该把body元素字体重设下。这样em也可以很好的使用。<code>body style=&quot;font-size:16px&quot;</code>。</p>\n<p>正常情况下，只需要四行代码就可以搞定。</p>\n<ul>\n<li>获取屏幕宽度</li>\n<li>将屏幕宽度分成10份</li>\n<li>将每一份宽度写入根节点</li>\n<li>重设下body字体大小</li>\n</ul>\n<p>如果你更希望更好一些，可以把屏幕旋转加上，旋转后触发这四步操作。</p>\n<p>基本上就这样，在不考虑dpr为 2 或者 3 的时候，这样做已经完全满足了。</p>\n<blockquote>\n<p>为什么不是平分100份呢？比如iPhone 6s Plus，屏幕宽度414px（默认dpr=1），如果分成100份，每份是4.14px，太小了，很多时候支持不了。和文字过小被限制差不多。如果分成25份，额，计算太麻烦了而已。</p>\n</blockquote>\n<h2 id=\"问题出现\"><a href=\"#问题出现\" class=\"headerlink\" title=\"问题出现\"></a>问题出现</h2><p>之前一直按照上文那么做，也没发现问题。应该是也没接到问题反馈。</p>\n<p>但是这次遇到了一个奇葩情况。</p>\n<p>360px宽度的安卓机vivo，html已经设置为36px。有元素10rem，正常情况下，别的机型都是等于360px宽（屏宽），但是此机型奇葩，通过js计算后获取，值为392.03125px。如果不用rem，用100%，则没有问题。</p>\n<p>问题出现在安卓APP的webview中。至于手机浏览器中是否会出问题，我忘记了。</p>\n<p>网上也没有关于这方面的资料。</p>\n<p>唯独一条记录在这里：<a href=\"https://segmentfault.com/q/1010000006851410\" target=\"_blank\" rel=\"noopener\">segmentfault</a></p>\n<h2 id=\"问题的解决\"><a href=\"#问题的解决\" class=\"headerlink\" title=\"问题的解决\"></a>问题的解决</h2><p>后来曾经巧合，阅读到一篇文章，大概也是说页面缩放-375px屏幕的实现。出的问题结果和我们的情况是一致的。意思是 <code>initial-scale</code> 要进行设置。我检查了下，我们的代码也写好了。但还是不行。<a href=\"https://github.com/ShowJoy-com/showjoy-blog/issues/6\" target=\"_blank\" rel=\"noopener\">文章见此</a> ，以及他的文章参考了<a href=\"http://lvdada.org/2016/01/28/viewport-and-flexibleJs/\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>他的文章思路是修改scale数值，以便达到用360px宽度的屏幕，显示375px的内容。</p>\n<p>而我们思考的方向，是针对出问题的机型，进行fontSize修复。</p>\n<p>我们的思路是，首先用标准方案（上文四步方法），然后进行检查。安卓机全部要添加一个10rem元素，检查其计算宽度和屏幕宽度的比例，如果10rem元素超过屏幕宽度了，那就是当前机器出问题，此时需要进行修复。</p>\n<p>修复方法和他们的计算一致，看看尺寸比正常的屏幕宽度大了多少倍。大了多少倍，就把fontSize缩小多少倍。</p>\n<p><strong>这两种方式的区别：</strong></p>\n<ul>\n<li>他们的是定宽（此时所有机器都采用了设计稿的一半，375px）但是修复起来简单质量高，缺点是414px的iPhone，也要降低屏幕宽度，在文字显示上吃亏，因为屏幕最多只有375px，文字是按照px定义的。（我这么认为的）</li>\n<li>我们是常规宽，大屏机用自己的大宽度，小屏机用自己的小屏宽度，图片缩放和他们一样都是屏幕比例，但是文字展示上不会受影响。</li>\n</ul>\n<blockquote>\n<p>一般情况下，用了flexible方案，仅仅对布局使用rem，而对文字之类，还是使用px或em为单位。用了rem或进行等比缩小，小屏手机文字会看不清或者浏览器禁止设置过小的字体。</p>\n</blockquote>\n<h2 id=\"最后，附上我们的解决方案代码\"><a href=\"#最后，附上我们的解决方案代码\" class=\"headerlink\" title=\"最后，附上我们的解决方案代码\"></a>最后，附上我们的解决方案代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">win</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// html根元素</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> HTML_ELEMENT = <span class=\"built_in\">document</span>.documentElement;</span><br><span class=\"line\">    <span class=\"comment\">// 屏幕宽度</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> SCREEN_WIDTH = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 标准fontSize计算值</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> BASE_FONT_SIZE = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 处理后的fontSize计算值</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> REAL_BASE_FONT_SIZE = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 修复异常的fontSize代码</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> fix = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ua = navigator.userAgent;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> isIOS = <span class=\"regexp\">/(iPhone|iPad|iPod)/</span>.test(ua);</span><br><span class=\"line\">        <span class=\"comment\">// 非苹果设备，均进行检测</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isIOS) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> div = win.document.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">            div.style.width = <span class=\"string\">'10rem'</span>;</span><br><span class=\"line\">            win.document.body.appendChild(div);</span><br><span class=\"line\">            win.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> getWidth = <span class=\"built_in\">parseFloat</span>(win.getComputedStyle(div).width);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (getWidth &gt; SCREEN_WIDTH) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 此时是出问题的情况</span></span><br><span class=\"line\">                    <span class=\"keyword\">var</span> ratio = getWidth / SCREEN_WIDTH;</span><br><span class=\"line\">                    REAL_BASE_FONT_SIZE = (BASE_FONT_SIZE / ratio).toFixed(<span class=\"number\">4</span>);</span><br><span class=\"line\">                    HTML_ELEMENT.style.fontSize = REAL_BASE_FONT_SIZE + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                div.remove();</span><br><span class=\"line\">            &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 调整根元素fontSize</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> setBaseFontSize = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取屏幕宽度</span></span><br><span class=\"line\">        SCREEN_WIDTH = HTML_ELEMENT.clientWidth;</span><br><span class=\"line\">        <span class=\"comment\">// 将屏幕分成10份，获取每一份宽度</span></span><br><span class=\"line\">        BASE_FONT_SIZE = SCREEN_WIDTH / <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 写入html元素fontSize</span></span><br><span class=\"line\">        HTML_ELEMENT.style.fontSize = BASE_FONT_SIZE + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">        fix();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *手机旋转控制</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> tid;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (win.onorientationchange) &#123;</span><br><span class=\"line\">        win.onorientationchange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            clearTimeout(tid);</span><br><span class=\"line\">            tid = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                setBaseFontSize();</span><br><span class=\"line\">            &#125;, <span class=\"number\">300</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        win.onresize = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            clearTimeout(tid);</span><br><span class=\"line\">            tid = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                setBaseFontSize();</span><br><span class=\"line\">            &#125;, <span class=\"number\">300</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setBaseFontSize();</span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>);</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"Keka - 可视化多格式压缩工具 [MAC]","date":"2017-03-06T21:42:00.000Z","_content":"\n在 MAC 下，想找一款好用的压缩软件，绝对很难。我找了很久，也试过了很多，基本上没有特别好用的。\n\n<!-- more -->\n\n首先说便捷性，可以说系统自带的最方便。但是功能却是最少的，格式不能选择（虽然很多时候只需要zip格式就够了），不能设置密码等等。\n\n很多软件也仿照系统的风格，所以也没什么特色。\n\n这里想插一句，**无论选择什么软件，都不能压缩成 rar 格式。**这个是 winRAR 专有的，winRAR 是没有 MAC 和 linux 版本的。貌似也没有开源或者其他第三方 rar 的插件。\n\n除去 rar，我觉得用的最顺手的就是 Keka 了。\n\n![image](https://cdn0.yukapril.com/blog/2017-03-06-share-keka.png-wm.black)\n\n选好要压缩的格式，比如 Zip，还可以进行选项配置。之后直接把目录或文件拖拽到软件界面上就 OK 了。\n\n当然，他还可以有默认配置。绝对算是好用。\n\n![image](https://cdn0.yukapril.com/blog/2017-03-06-share-keka2.png-wm.black)\n\n不仅如此，Keka 还能解压缩。同样是用它打开压缩文件就可以了。和系统一样，自动解压到当前目录。不过我还是喜欢 (Dr.Unarchiver)[http://yukapril.com/2016/11/18/share-drunarchiver.html]\n\n至于 rar 格式，MAC 下不支持压缩，所以也没有机会尝试...但是官网说是支持的。\n\n---\n\n##### 软件信息\n\n软件名：Keka \n\n价格：免费\n\n下载地址：[官网](http://www.kekaosx.com/en/)\n\n注：iTunes也提供下载，但是价格是12元。不知道为什么。","source":"_posts/2017/2017-03-06-share-keka.md","raw":"---\nlayout: post\ntitle: \"Keka - 可视化多格式压缩工具 [MAC]\"\ndate: 2017-03-06 21:42:00 GMT+0000\ncategories: [软件]\ntags:  [keka]\n---\n\n在 MAC 下，想找一款好用的压缩软件，绝对很难。我找了很久，也试过了很多，基本上没有特别好用的。\n\n<!-- more -->\n\n首先说便捷性，可以说系统自带的最方便。但是功能却是最少的，格式不能选择（虽然很多时候只需要zip格式就够了），不能设置密码等等。\n\n很多软件也仿照系统的风格，所以也没什么特色。\n\n这里想插一句，**无论选择什么软件，都不能压缩成 rar 格式。**这个是 winRAR 专有的，winRAR 是没有 MAC 和 linux 版本的。貌似也没有开源或者其他第三方 rar 的插件。\n\n除去 rar，我觉得用的最顺手的就是 Keka 了。\n\n![image](https://cdn0.yukapril.com/blog/2017-03-06-share-keka.png-wm.black)\n\n选好要压缩的格式，比如 Zip，还可以进行选项配置。之后直接把目录或文件拖拽到软件界面上就 OK 了。\n\n当然，他还可以有默认配置。绝对算是好用。\n\n![image](https://cdn0.yukapril.com/blog/2017-03-06-share-keka2.png-wm.black)\n\n不仅如此，Keka 还能解压缩。同样是用它打开压缩文件就可以了。和系统一样，自动解压到当前目录。不过我还是喜欢 (Dr.Unarchiver)[http://yukapril.com/2016/11/18/share-drunarchiver.html]\n\n至于 rar 格式，MAC 下不支持压缩，所以也没有机会尝试...但是官网说是支持的。\n\n---\n\n##### 软件信息\n\n软件名：Keka \n\n价格：免费\n\n下载地址：[官网](http://www.kekaosx.com/en/)\n\n注：iTunes也提供下载，但是价格是12元。不知道为什么。","slug":"2017-2017-03-06-share-keka","published":1,"updated":"2019-07-18T17:19:07.186Z","comments":1,"photos":[],"link":"","_id":"cjy8y72ra001vs21dj0wb4367","content":"<p>在 MAC 下，想找一款好用的压缩软件，绝对很难。我找了很久，也试过了很多，基本上没有特别好用的。</p>\n<a id=\"more\"></a>\n\n<p>首先说便捷性，可以说系统自带的最方便。但是功能却是最少的，格式不能选择（虽然很多时候只需要zip格式就够了），不能设置密码等等。</p>\n<p>很多软件也仿照系统的风格，所以也没什么特色。</p>\n<p>这里想插一句，<strong>无论选择什么软件，都不能压缩成 rar 格式。</strong>这个是 winRAR 专有的，winRAR 是没有 MAC 和 linux 版本的。貌似也没有开源或者其他第三方 rar 的插件。</p>\n<p>除去 rar，我觉得用的最顺手的就是 Keka 了。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-03-06-share-keka.png-wm.black\" alt=\"image\"></p>\n<p>选好要压缩的格式，比如 Zip，还可以进行选项配置。之后直接把目录或文件拖拽到软件界面上就 OK 了。</p>\n<p>当然，他还可以有默认配置。绝对算是好用。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-03-06-share-keka2.png-wm.black\" alt=\"image\"></p>\n<p>不仅如此，Keka 还能解压缩。同样是用它打开压缩文件就可以了。和系统一样，自动解压到当前目录。不过我还是喜欢 (Dr.Unarchiver)[<a href=\"http://yukapril.com/2016/11/18/share-drunarchiver.html]\" target=\"_blank\" rel=\"noopener\">http://yukapril.com/2016/11/18/share-drunarchiver.html]</a></p>\n<p>至于 rar 格式，MAC 下不支持压缩，所以也没有机会尝试…但是官网说是支持的。</p>\n<hr>\n<h5 id=\"软件信息\"><a href=\"#软件信息\" class=\"headerlink\" title=\"软件信息\"></a>软件信息</h5><p>软件名：Keka </p>\n<p>价格：免费</p>\n<p>下载地址：<a href=\"http://www.kekaosx.com/en/\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<p>注：iTunes也提供下载，但是价格是12元。不知道为什么。</p>\n","site":{"data":{}},"excerpt":"<p>在 MAC 下，想找一款好用的压缩软件，绝对很难。我找了很久，也试过了很多，基本上没有特别好用的。</p>","more":"<p>首先说便捷性，可以说系统自带的最方便。但是功能却是最少的，格式不能选择（虽然很多时候只需要zip格式就够了），不能设置密码等等。</p>\n<p>很多软件也仿照系统的风格，所以也没什么特色。</p>\n<p>这里想插一句，<strong>无论选择什么软件，都不能压缩成 rar 格式。</strong>这个是 winRAR 专有的，winRAR 是没有 MAC 和 linux 版本的。貌似也没有开源或者其他第三方 rar 的插件。</p>\n<p>除去 rar，我觉得用的最顺手的就是 Keka 了。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-03-06-share-keka.png-wm.black\" alt=\"image\"></p>\n<p>选好要压缩的格式，比如 Zip，还可以进行选项配置。之后直接把目录或文件拖拽到软件界面上就 OK 了。</p>\n<p>当然，他还可以有默认配置。绝对算是好用。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-03-06-share-keka2.png-wm.black\" alt=\"image\"></p>\n<p>不仅如此，Keka 还能解压缩。同样是用它打开压缩文件就可以了。和系统一样，自动解压到当前目录。不过我还是喜欢 (Dr.Unarchiver)[<a href=\"http://yukapril.com/2016/11/18/share-drunarchiver.html]\" target=\"_blank\" rel=\"noopener\">http://yukapril.com/2016/11/18/share-drunarchiver.html]</a></p>\n<p>至于 rar 格式，MAC 下不支持压缩，所以也没有机会尝试…但是官网说是支持的。</p>\n<hr>\n<h5 id=\"软件信息\"><a href=\"#软件信息\" class=\"headerlink\" title=\"软件信息\"></a>软件信息</h5><p>软件名：Keka </p>\n<p>价格：免费</p>\n<p>下载地址：<a href=\"http://www.kekaosx.com/en/\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<p>注：iTunes也提供下载，但是价格是12元。不知道为什么。</p>"},{"layout":"post","title":"[转载] 在 Node.js 中引入模块：你所需要知道的一切都在这里","date":"2017-04-14T17:52:00.000Z","_content":"\n非常好的翻译文章，对node中的模块概念阐述的非常清楚。模块的查找路径/顺序，文件名，如何去加载，又如何去调用。\n\n<!-- more -->\n\nhttp://huziketang.com/blog/posts/detail?postId=58eaf471a58c240ae35bb8e3","source":"_posts/2017/2017-04-14-zz-node-require.md","raw":"---\nlayout: post\ntitle: \"[转载] 在 Node.js 中引入模块：你所需要知道的一切都在这里\"\ndate: 2017-04-14 17:52:00 GMT+0000\ncategories: [前端]\ntags:  [node,module,require]\n---\n\n非常好的翻译文章，对node中的模块概念阐述的非常清楚。模块的查找路径/顺序，文件名，如何去加载，又如何去调用。\n\n<!-- more -->\n\nhttp://huziketang.com/blog/posts/detail?postId=58eaf471a58c240ae35bb8e3","slug":"2017-2017-04-14-zz-node-require","published":1,"updated":"2019-07-18T17:19:07.292Z","comments":1,"photos":[],"link":"","_id":"cjy8y72rc001ys21dzehjgpd5","content":"<p>非常好的翻译文章，对node中的模块概念阐述的非常清楚。模块的查找路径/顺序，文件名，如何去加载，又如何去调用。</p>\n<a id=\"more\"></a>\n\n<p><a href=\"http://huziketang.com/blog/posts/detail?postId=58eaf471a58c240ae35bb8e3\" target=\"_blank\" rel=\"noopener\">http://huziketang.com/blog/posts/detail?postId=58eaf471a58c240ae35bb8e3</a></p>\n","site":{"data":{}},"excerpt":"<p>非常好的翻译文章，对node中的模块概念阐述的非常清楚。模块的查找路径/顺序，文件名，如何去加载，又如何去调用。</p>","more":"<p><a href=\"http://huziketang.com/blog/posts/detail?postId=58eaf471a58c240ae35bb8e3\" target=\"_blank\" rel=\"noopener\">http://huziketang.com/blog/posts/detail?postId=58eaf471a58c240ae35bb8e3</a></p>"},{"layout":"post","title":"苹果MAC系统读写NTFS格式u盘硬盘方法","date":"2017-04-22T16:04:00.000Z","_content":"\n平时用U盘传数据时候，如果是windows或者linux，一般不会有问题，但是如果要从MAC下拷文件，那基本上就会遇到无法写入NTFS格式U盘的问题。\n\n<!-- more -->\n\n解决方案无非就三种：\n\n* 更换U盘格式，比如Fat32，或者exFat格式。\n* 花钱，购买苹果软件，让MAC支持NTFS。\n* 更换U盘格式，变成苹果的HFS格式。给Windows/linux都安装支持软件。\n\n这三种方案：\n\n* 第一种最省事，全平台兼容。但是据说MAC下操作可能会导致U盘文件丢失，而且最大的缺点是如果不是你的U盘，人家可能不会照顾你，不一定就是Fat32/exFat格式。\n* 第二种简单粗暴，貌似问题很少。缺点就是花钱。\n* 第三种比较不推荐，主要是如果涉及的非MAC机器太多，那也太麻烦了，还不如第二种花钱方案。但是好处是非常稳定，比如对于windows平台，兼容性极佳，各种格式都可以通吃。\n\n整体来看，如果为了踏实使用，让MAC支持NTFS是最好的方案。\n\n幸好，经过查询和试用，发现了一种免费的方案，让MAC原生支持NTFS。\n\n据说，MAC本身就支持NTFS的，只不过算是技术屏蔽了而已。\n\n## 让MAC原生支持NTFS格式U盘\n\n> 原文有一阵打不开了，不知道什么原因。原文[见此](http://bbs.feng.com/read-htm-tid-9932031.html)。\n\n### 方法步骤：\n\n我自己整理的方案，与上文有出入。\n\n**1. 插入设备（u盘）**\n\n**2. 在桌面上查看U盘的卷标（就是刚刚多出的硬盘标志的名字啦），这个记下来**\n\n当然，如果不显示或者其他问题，也可以通过终端中输入 `diskutil list`\n\n返回内容有多段，一般参考最后一段，如下：\n\n```\n/dev/disk2 (external, physical):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:     FDisk_partition_scheme                        *62.1 GB    disk2\n   1:               Windows_NTFS KINGSTON                62.1 GB    disk2s1\n```\n\n看最后一条，是ntfs格式的u盘，他的name是`KINGSTON`，这个名字就是卷标。\n\n**3. 打开配置文件，将卷标写入。**\n\n终端中输入 `sudo nano /etc/fstab`。当然，你愿意用vim也可以啦~ `nano` 换成 `vim` 就行。\n\n注意，这个文件 `fstab` 可能不存在，那就自己创建就好。\n\n打开文件后，新增加一行，写入如下内容：\n\n```\nLABEL=KINGSTON none ntfs rw,auto,nobrowse\n```\n\n这里的`KINGSTON`换成你的卷标就好。如果下次还要有新的设备，那么在加入一行就行。\n\n按照原文所说，如果你的卷标如果是`ABC DEFG`这种带有空格的话，那么这里要写成`ABC\\040DEFG`，就是用`\\040`代表空格。\n\n至于含义，我也不懂，粘贴如下：\n\n>后面的ntfs rw表示把这个分区挂载为可读写的ntfs格式\n>\n>最后nobrowse非常重要，因为这个代表了在finder里不显示这个分区，这个选项非常重要，如果不打开的话挂载是不会成功的。\n\n最后，保存文件。\n\n用nano打开的，按`Ctrl+X`关闭，会提示保存，按`y`即可保存。\n\n用vim打开的，按下`ESC`，输入`:wq`即可。\n\n**4. 重新插拔U盘，这步是必须的**\n\n**5. 进入U盘目录**\n\n这步还说？对，这步还真得说下。因为上文配置的原因，他是**不出现**在桌面的。那怎么找打它？\n\n右键点击 `Finder`，选择 `前往文件夹`，输入 `/Volumes`，进入磁盘目录。我想你会看到刚才的卷标的这个文件夹。比如我的是`KINGSTON`。\n\n## 题外话\n\n原文作者还给出了制作快捷方式的命令行方法，当然也给出了`直接将u盘目录拖拽`的快捷方式方法。\n\n我推荐就是拖拽，所以不给出命令了。\n\n虽然步骤有好几步，但是整体操作很简单，而且一个卷标看样子只需要一次就行了。如果固定几个u盘，那么一旦设置好，还是很方便的。\n\n此方法最主要是免费，而且配置好就省心了，唯独就是没有测试，没有卷标的情况。在终端中查阅卷标就会显示空，此情况目前还没尝试过。所以建议还是有个卷标比较好。\n\n用了这么多年U盘，从来不用卷标，现在终于知道重要性了。","source":"_posts/2017/2017-04-22-mac-use-ntfs.md","raw":"---\nlayout: post\ntitle: \"苹果MAC系统读写NTFS格式u盘硬盘方法\"\ndate: 2017-04-22 16:04:00 GMT+0000\ncategories: [随笔]\ntags:  [MAC,NFTS,U盘]\n---\n\n平时用U盘传数据时候，如果是windows或者linux，一般不会有问题，但是如果要从MAC下拷文件，那基本上就会遇到无法写入NTFS格式U盘的问题。\n\n<!-- more -->\n\n解决方案无非就三种：\n\n* 更换U盘格式，比如Fat32，或者exFat格式。\n* 花钱，购买苹果软件，让MAC支持NTFS。\n* 更换U盘格式，变成苹果的HFS格式。给Windows/linux都安装支持软件。\n\n这三种方案：\n\n* 第一种最省事，全平台兼容。但是据说MAC下操作可能会导致U盘文件丢失，而且最大的缺点是如果不是你的U盘，人家可能不会照顾你，不一定就是Fat32/exFat格式。\n* 第二种简单粗暴，貌似问题很少。缺点就是花钱。\n* 第三种比较不推荐，主要是如果涉及的非MAC机器太多，那也太麻烦了，还不如第二种花钱方案。但是好处是非常稳定，比如对于windows平台，兼容性极佳，各种格式都可以通吃。\n\n整体来看，如果为了踏实使用，让MAC支持NTFS是最好的方案。\n\n幸好，经过查询和试用，发现了一种免费的方案，让MAC原生支持NTFS。\n\n据说，MAC本身就支持NTFS的，只不过算是技术屏蔽了而已。\n\n## 让MAC原生支持NTFS格式U盘\n\n> 原文有一阵打不开了，不知道什么原因。原文[见此](http://bbs.feng.com/read-htm-tid-9932031.html)。\n\n### 方法步骤：\n\n我自己整理的方案，与上文有出入。\n\n**1. 插入设备（u盘）**\n\n**2. 在桌面上查看U盘的卷标（就是刚刚多出的硬盘标志的名字啦），这个记下来**\n\n当然，如果不显示或者其他问题，也可以通过终端中输入 `diskutil list`\n\n返回内容有多段，一般参考最后一段，如下：\n\n```\n/dev/disk2 (external, physical):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:     FDisk_partition_scheme                        *62.1 GB    disk2\n   1:               Windows_NTFS KINGSTON                62.1 GB    disk2s1\n```\n\n看最后一条，是ntfs格式的u盘，他的name是`KINGSTON`，这个名字就是卷标。\n\n**3. 打开配置文件，将卷标写入。**\n\n终端中输入 `sudo nano /etc/fstab`。当然，你愿意用vim也可以啦~ `nano` 换成 `vim` 就行。\n\n注意，这个文件 `fstab` 可能不存在，那就自己创建就好。\n\n打开文件后，新增加一行，写入如下内容：\n\n```\nLABEL=KINGSTON none ntfs rw,auto,nobrowse\n```\n\n这里的`KINGSTON`换成你的卷标就好。如果下次还要有新的设备，那么在加入一行就行。\n\n按照原文所说，如果你的卷标如果是`ABC DEFG`这种带有空格的话，那么这里要写成`ABC\\040DEFG`，就是用`\\040`代表空格。\n\n至于含义，我也不懂，粘贴如下：\n\n>后面的ntfs rw表示把这个分区挂载为可读写的ntfs格式\n>\n>最后nobrowse非常重要，因为这个代表了在finder里不显示这个分区，这个选项非常重要，如果不打开的话挂载是不会成功的。\n\n最后，保存文件。\n\n用nano打开的，按`Ctrl+X`关闭，会提示保存，按`y`即可保存。\n\n用vim打开的，按下`ESC`，输入`:wq`即可。\n\n**4. 重新插拔U盘，这步是必须的**\n\n**5. 进入U盘目录**\n\n这步还说？对，这步还真得说下。因为上文配置的原因，他是**不出现**在桌面的。那怎么找打它？\n\n右键点击 `Finder`，选择 `前往文件夹`，输入 `/Volumes`，进入磁盘目录。我想你会看到刚才的卷标的这个文件夹。比如我的是`KINGSTON`。\n\n## 题外话\n\n原文作者还给出了制作快捷方式的命令行方法，当然也给出了`直接将u盘目录拖拽`的快捷方式方法。\n\n我推荐就是拖拽，所以不给出命令了。\n\n虽然步骤有好几步，但是整体操作很简单，而且一个卷标看样子只需要一次就行了。如果固定几个u盘，那么一旦设置好，还是很方便的。\n\n此方法最主要是免费，而且配置好就省心了，唯独就是没有测试，没有卷标的情况。在终端中查阅卷标就会显示空，此情况目前还没尝试过。所以建议还是有个卷标比较好。\n\n用了这么多年U盘，从来不用卷标，现在终于知道重要性了。","slug":"2017-2017-04-22-mac-use-ntfs","published":1,"updated":"2019-07-18T17:19:07.201Z","comments":1,"photos":[],"link":"","_id":"cjy8y72re0021s21db6uye3dd","content":"<p>平时用U盘传数据时候，如果是windows或者linux，一般不会有问题，但是如果要从MAC下拷文件，那基本上就会遇到无法写入NTFS格式U盘的问题。</p>\n<a id=\"more\"></a>\n\n<p>解决方案无非就三种：</p>\n<ul>\n<li>更换U盘格式，比如Fat32，或者exFat格式。</li>\n<li>花钱，购买苹果软件，让MAC支持NTFS。</li>\n<li>更换U盘格式，变成苹果的HFS格式。给Windows/linux都安装支持软件。</li>\n</ul>\n<p>这三种方案：</p>\n<ul>\n<li>第一种最省事，全平台兼容。但是据说MAC下操作可能会导致U盘文件丢失，而且最大的缺点是如果不是你的U盘，人家可能不会照顾你，不一定就是Fat32/exFat格式。</li>\n<li>第二种简单粗暴，貌似问题很少。缺点就是花钱。</li>\n<li>第三种比较不推荐，主要是如果涉及的非MAC机器太多，那也太麻烦了，还不如第二种花钱方案。但是好处是非常稳定，比如对于windows平台，兼容性极佳，各种格式都可以通吃。</li>\n</ul>\n<p>整体来看，如果为了踏实使用，让MAC支持NTFS是最好的方案。</p>\n<p>幸好，经过查询和试用，发现了一种免费的方案，让MAC原生支持NTFS。</p>\n<p>据说，MAC本身就支持NTFS的，只不过算是技术屏蔽了而已。</p>\n<h2 id=\"让MAC原生支持NTFS格式U盘\"><a href=\"#让MAC原生支持NTFS格式U盘\" class=\"headerlink\" title=\"让MAC原生支持NTFS格式U盘\"></a>让MAC原生支持NTFS格式U盘</h2><blockquote>\n<p>原文有一阵打不开了，不知道什么原因。原文<a href=\"http://bbs.feng.com/read-htm-tid-9932031.html\" target=\"_blank\" rel=\"noopener\">见此</a>。</p>\n</blockquote>\n<h3 id=\"方法步骤：\"><a href=\"#方法步骤：\" class=\"headerlink\" title=\"方法步骤：\"></a>方法步骤：</h3><p>我自己整理的方案，与上文有出入。</p>\n<p><strong>1. 插入设备（u盘）</strong></p>\n<p><strong>2. 在桌面上查看U盘的卷标（就是刚刚多出的硬盘标志的名字啦），这个记下来</strong></p>\n<p>当然，如果不显示或者其他问题，也可以通过终端中输入 <code>diskutil list</code></p>\n<p>返回内容有多段，一般参考最后一段，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev/disk2 (external, physical):</span><br><span class=\"line\">   #:                       TYPE NAME                    SIZE       IDENTIFIER</span><br><span class=\"line\">   0:     FDisk_partition_scheme                        *62.1 GB    disk2</span><br><span class=\"line\">   1:               Windows_NTFS KINGSTON                62.1 GB    disk2s1</span><br></pre></td></tr></table></figure>\n\n<p>看最后一条，是ntfs格式的u盘，他的name是<code>KINGSTON</code>，这个名字就是卷标。</p>\n<p><strong>3. 打开配置文件，将卷标写入。</strong></p>\n<p>终端中输入 <code>sudo nano /etc/fstab</code>。当然，你愿意用vim也可以啦~ <code>nano</code> 换成 <code>vim</code> 就行。</p>\n<p>注意，这个文件 <code>fstab</code> 可能不存在，那就自己创建就好。</p>\n<p>打开文件后，新增加一行，写入如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LABEL=KINGSTON none ntfs rw,auto,nobrowse</span><br></pre></td></tr></table></figure>\n\n<p>这里的<code>KINGSTON</code>换成你的卷标就好。如果下次还要有新的设备，那么在加入一行就行。</p>\n<p>按照原文所说，如果你的卷标如果是<code>ABC DEFG</code>这种带有空格的话，那么这里要写成<code>ABC\\040DEFG</code>，就是用<code>\\040</code>代表空格。</p>\n<p>至于含义，我也不懂，粘贴如下：</p>\n<blockquote>\n<p>后面的ntfs rw表示把这个分区挂载为可读写的ntfs格式</p>\n<p>最后nobrowse非常重要，因为这个代表了在finder里不显示这个分区，这个选项非常重要，如果不打开的话挂载是不会成功的。</p>\n</blockquote>\n<p>最后，保存文件。</p>\n<p>用nano打开的，按<code>Ctrl+X</code>关闭，会提示保存，按<code>y</code>即可保存。</p>\n<p>用vim打开的，按下<code>ESC</code>，输入<code>:wq</code>即可。</p>\n<p><strong>4. 重新插拔U盘，这步是必须的</strong></p>\n<p><strong>5. 进入U盘目录</strong></p>\n<p>这步还说？对，这步还真得说下。因为上文配置的原因，他是<strong>不出现</strong>在桌面的。那怎么找打它？</p>\n<p>右键点击 <code>Finder</code>，选择 <code>前往文件夹</code>，输入 <code>/Volumes</code>，进入磁盘目录。我想你会看到刚才的卷标的这个文件夹。比如我的是<code>KINGSTON</code>。</p>\n<h2 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h2><p>原文作者还给出了制作快捷方式的命令行方法，当然也给出了<code>直接将u盘目录拖拽</code>的快捷方式方法。</p>\n<p>我推荐就是拖拽，所以不给出命令了。</p>\n<p>虽然步骤有好几步，但是整体操作很简单，而且一个卷标看样子只需要一次就行了。如果固定几个u盘，那么一旦设置好，还是很方便的。</p>\n<p>此方法最主要是免费，而且配置好就省心了，唯独就是没有测试，没有卷标的情况。在终端中查阅卷标就会显示空，此情况目前还没尝试过。所以建议还是有个卷标比较好。</p>\n<p>用了这么多年U盘，从来不用卷标，现在终于知道重要性了。</p>\n","site":{"data":{}},"excerpt":"<p>平时用U盘传数据时候，如果是windows或者linux，一般不会有问题，但是如果要从MAC下拷文件，那基本上就会遇到无法写入NTFS格式U盘的问题。</p>","more":"<p>解决方案无非就三种：</p>\n<ul>\n<li>更换U盘格式，比如Fat32，或者exFat格式。</li>\n<li>花钱，购买苹果软件，让MAC支持NTFS。</li>\n<li>更换U盘格式，变成苹果的HFS格式。给Windows/linux都安装支持软件。</li>\n</ul>\n<p>这三种方案：</p>\n<ul>\n<li>第一种最省事，全平台兼容。但是据说MAC下操作可能会导致U盘文件丢失，而且最大的缺点是如果不是你的U盘，人家可能不会照顾你，不一定就是Fat32/exFat格式。</li>\n<li>第二种简单粗暴，貌似问题很少。缺点就是花钱。</li>\n<li>第三种比较不推荐，主要是如果涉及的非MAC机器太多，那也太麻烦了，还不如第二种花钱方案。但是好处是非常稳定，比如对于windows平台，兼容性极佳，各种格式都可以通吃。</li>\n</ul>\n<p>整体来看，如果为了踏实使用，让MAC支持NTFS是最好的方案。</p>\n<p>幸好，经过查询和试用，发现了一种免费的方案，让MAC原生支持NTFS。</p>\n<p>据说，MAC本身就支持NTFS的，只不过算是技术屏蔽了而已。</p>\n<h2 id=\"让MAC原生支持NTFS格式U盘\"><a href=\"#让MAC原生支持NTFS格式U盘\" class=\"headerlink\" title=\"让MAC原生支持NTFS格式U盘\"></a>让MAC原生支持NTFS格式U盘</h2><blockquote>\n<p>原文有一阵打不开了，不知道什么原因。原文<a href=\"http://bbs.feng.com/read-htm-tid-9932031.html\" target=\"_blank\" rel=\"noopener\">见此</a>。</p>\n</blockquote>\n<h3 id=\"方法步骤：\"><a href=\"#方法步骤：\" class=\"headerlink\" title=\"方法步骤：\"></a>方法步骤：</h3><p>我自己整理的方案，与上文有出入。</p>\n<p><strong>1. 插入设备（u盘）</strong></p>\n<p><strong>2. 在桌面上查看U盘的卷标（就是刚刚多出的硬盘标志的名字啦），这个记下来</strong></p>\n<p>当然，如果不显示或者其他问题，也可以通过终端中输入 <code>diskutil list</code></p>\n<p>返回内容有多段，一般参考最后一段，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev/disk2 (external, physical):</span><br><span class=\"line\">   #:                       TYPE NAME                    SIZE       IDENTIFIER</span><br><span class=\"line\">   0:     FDisk_partition_scheme                        *62.1 GB    disk2</span><br><span class=\"line\">   1:               Windows_NTFS KINGSTON                62.1 GB    disk2s1</span><br></pre></td></tr></table></figure>\n\n<p>看最后一条，是ntfs格式的u盘，他的name是<code>KINGSTON</code>，这个名字就是卷标。</p>\n<p><strong>3. 打开配置文件，将卷标写入。</strong></p>\n<p>终端中输入 <code>sudo nano /etc/fstab</code>。当然，你愿意用vim也可以啦~ <code>nano</code> 换成 <code>vim</code> 就行。</p>\n<p>注意，这个文件 <code>fstab</code> 可能不存在，那就自己创建就好。</p>\n<p>打开文件后，新增加一行，写入如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LABEL=KINGSTON none ntfs rw,auto,nobrowse</span><br></pre></td></tr></table></figure>\n\n<p>这里的<code>KINGSTON</code>换成你的卷标就好。如果下次还要有新的设备，那么在加入一行就行。</p>\n<p>按照原文所说，如果你的卷标如果是<code>ABC DEFG</code>这种带有空格的话，那么这里要写成<code>ABC\\040DEFG</code>，就是用<code>\\040</code>代表空格。</p>\n<p>至于含义，我也不懂，粘贴如下：</p>\n<blockquote>\n<p>后面的ntfs rw表示把这个分区挂载为可读写的ntfs格式</p>\n<p>最后nobrowse非常重要，因为这个代表了在finder里不显示这个分区，这个选项非常重要，如果不打开的话挂载是不会成功的。</p>\n</blockquote>\n<p>最后，保存文件。</p>\n<p>用nano打开的，按<code>Ctrl+X</code>关闭，会提示保存，按<code>y</code>即可保存。</p>\n<p>用vim打开的，按下<code>ESC</code>，输入<code>:wq</code>即可。</p>\n<p><strong>4. 重新插拔U盘，这步是必须的</strong></p>\n<p><strong>5. 进入U盘目录</strong></p>\n<p>这步还说？对，这步还真得说下。因为上文配置的原因，他是<strong>不出现</strong>在桌面的。那怎么找打它？</p>\n<p>右键点击 <code>Finder</code>，选择 <code>前往文件夹</code>，输入 <code>/Volumes</code>，进入磁盘目录。我想你会看到刚才的卷标的这个文件夹。比如我的是<code>KINGSTON</code>。</p>\n<h2 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h2><p>原文作者还给出了制作快捷方式的命令行方法，当然也给出了<code>直接将u盘目录拖拽</code>的快捷方式方法。</p>\n<p>我推荐就是拖拽，所以不给出命令了。</p>\n<p>虽然步骤有好几步，但是整体操作很简单，而且一个卷标看样子只需要一次就行了。如果固定几个u盘，那么一旦设置好，还是很方便的。</p>\n<p>此方法最主要是免费，而且配置好就省心了，唯独就是没有测试，没有卷标的情况。在终端中查阅卷标就会显示空，此情况目前还没尝试过。所以建议还是有个卷标比较好。</p>\n<p>用了这么多年U盘，从来不用卷标，现在终于知道重要性了。</p>"},{"layout":"post","title":"端午节带对象回家，家长要带身份证学位证","date":"2017-05-31T13:46:00.000Z","_content":"\n在知乎上面，看到了这两个问题，突然想到了一段视频...视频是滴滴公司广告，我有删减。\n\n<!-- more -->\n\n[端午节请女朋友回家，家长要带身份证学位证？](https://www.zhihu.com/question/60478176)\n\n[端午节叫男朋友上门，家人要他带身份证和毕业证，男朋友很生气，说这是作践他的人格，硬是不带，怎么办？](https://www.zhihu.com/question/60416551)\n\n<video width=\"320\" height=\"240\" controls>\n<source src=\"https://cdn0.yukapril.com/blog/2017-05-31-before-marry.mp4\" type=\"video/mp4\">\n</video>","source":"_posts/2017/2017-05-31-before-marry.md","raw":"---\nlayout: post\ntitle: \"端午节带对象回家，家长要带身份证学位证\"\ndate: 2017-05-31 13:46:00 GMT+0000\ncategories: [随笔]\ntags:  [恋爱, 长辈相处]\n---\n\n在知乎上面，看到了这两个问题，突然想到了一段视频...视频是滴滴公司广告，我有删减。\n\n<!-- more -->\n\n[端午节请女朋友回家，家长要带身份证学位证？](https://www.zhihu.com/question/60478176)\n\n[端午节叫男朋友上门，家人要他带身份证和毕业证，男朋友很生气，说这是作践他的人格，硬是不带，怎么办？](https://www.zhihu.com/question/60416551)\n\n<video width=\"320\" height=\"240\" controls>\n<source src=\"https://cdn0.yukapril.com/blog/2017-05-31-before-marry.mp4\" type=\"video/mp4\">\n</video>","slug":"2017-2017-05-31-before-marry","published":1,"updated":"2019-07-18T17:19:07.145Z","comments":1,"photos":[],"link":"","_id":"cjy8y72rg0024s21d9ssbybzi","content":"<p>在知乎上面，看到了这两个问题，突然想到了一段视频…视频是滴滴公司广告，我有删减。</p>\n<a id=\"more\"></a>\n\n<p><a href=\"https://www.zhihu.com/question/60478176\" target=\"_blank\" rel=\"noopener\">端午节请女朋友回家，家长要带身份证学位证？</a></p>\n<p><a href=\"https://www.zhihu.com/question/60416551\" target=\"_blank\" rel=\"noopener\">端午节叫男朋友上门，家人要他带身份证和毕业证，男朋友很生气，说这是作践他的人格，硬是不带，怎么办？</a></p>\n<video width=\"320\" height=\"240\" controls>\n<source src=\"https://cdn0.yukapril.com/blog/2017-05-31-before-marry.mp4\" type=\"video/mp4\">\n</video>","site":{"data":{}},"excerpt":"<p>在知乎上面，看到了这两个问题，突然想到了一段视频…视频是滴滴公司广告，我有删减。</p>","more":"<p><a href=\"https://www.zhihu.com/question/60478176\" target=\"_blank\" rel=\"noopener\">端午节请女朋友回家，家长要带身份证学位证？</a></p>\n<p><a href=\"https://www.zhihu.com/question/60416551\" target=\"_blank\" rel=\"noopener\">端午节叫男朋友上门，家人要他带身份证和毕业证，男朋友很生气，说这是作践他的人格，硬是不带，怎么办？</a></p>\n<video width=\"320\" height=\"240\" controls>\n<source src=\"https://cdn0.yukapril.com/blog/2017-05-31-before-marry.mp4\" type=\"video/mp4\">\n</video>"},{"layout":"post","title":"ubuntu 只能以访客登录的问题处理","date":"2017-06-09T21:47:00.000Z","_content":"\n今天打开笔记本，发现 Ubuntu 没有让输入密码，直接回车就进入了桌面，并且无法看到数据了。\n\n这才发现，是以访客身份登录的系统。\n\n我直接切换用户，发现黑屏。\n\n<!-- more -->\n\n重启，选择用户，输入密码，黑屏。\n\n经过上网查询，主要是桌面环境配置可能有了问题，建议删除配置文件就好。\n\n方法记录如下：\n\n1. 重启，启动后按 <kbd>ctrl</kbd> + <kbd>alt</kbd> + <kbd>F1</kbd>（<kbd>F1</kbd> ~ <kbd>F5</kbd>都行，看到让你登录就好）\n2. 输入账号，密码，登录。\n3. 删除配置文件，以 `.Xaut` 开头的文件\n```sh\ncd ~ \nrm -rf .Xaut*\n```\n4. 重启，正常","source":"_posts/2017/2017-06-09-ubuntu-login.md","raw":"---\nlayout: post\ntitle: \"ubuntu 只能以访客登录的问题处理\"\ndate: 2017-06-09 21:47:00 GMT+0000\ncategories: [随笔]\ntags:  [ubuntu,访客,登录]\n---\n\n今天打开笔记本，发现 Ubuntu 没有让输入密码，直接回车就进入了桌面，并且无法看到数据了。\n\n这才发现，是以访客身份登录的系统。\n\n我直接切换用户，发现黑屏。\n\n<!-- more -->\n\n重启，选择用户，输入密码，黑屏。\n\n经过上网查询，主要是桌面环境配置可能有了问题，建议删除配置文件就好。\n\n方法记录如下：\n\n1. 重启，启动后按 <kbd>ctrl</kbd> + <kbd>alt</kbd> + <kbd>F1</kbd>（<kbd>F1</kbd> ~ <kbd>F5</kbd>都行，看到让你登录就好）\n2. 输入账号，密码，登录。\n3. 删除配置文件，以 `.Xaut` 开头的文件\n```sh\ncd ~ \nrm -rf .Xaut*\n```\n4. 重启，正常","slug":"2017-2017-06-09-ubuntu-login","published":1,"updated":"2019-07-18T17:19:07.325Z","comments":1,"photos":[],"link":"","_id":"cjy8y72rh0027s21d9hv030wz","content":"<p>今天打开笔记本，发现 Ubuntu 没有让输入密码，直接回车就进入了桌面，并且无法看到数据了。</p>\n<p>这才发现，是以访客身份登录的系统。</p>\n<p>我直接切换用户，发现黑屏。</p>\n<a id=\"more\"></a>\n\n<p>重启，选择用户，输入密码，黑屏。</p>\n<p>经过上网查询，主要是桌面环境配置可能有了问题，建议删除配置文件就好。</p>\n<p>方法记录如下：</p>\n<ol>\n<li><p>重启，启动后按 <kbd>ctrl</kbd> + <kbd>alt</kbd> + <kbd>F1</kbd>（<kbd>F1</kbd> ~ <kbd>F5</kbd>都行，看到让你登录就好）</p>\n</li>\n<li><p>输入账号，密码，登录。</p>\n</li>\n<li><p>删除配置文件，以 <code>.Xaut</code> 开头的文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~ </span><br><span class=\"line\">rm -rf .Xaut*</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启，正常</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>今天打开笔记本，发现 Ubuntu 没有让输入密码，直接回车就进入了桌面，并且无法看到数据了。</p>\n<p>这才发现，是以访客身份登录的系统。</p>\n<p>我直接切换用户，发现黑屏。</p>","more":"<p>重启，选择用户，输入密码，黑屏。</p>\n<p>经过上网查询，主要是桌面环境配置可能有了问题，建议删除配置文件就好。</p>\n<p>方法记录如下：</p>\n<ol>\n<li><p>重启，启动后按 <kbd>ctrl</kbd> + <kbd>alt</kbd> + <kbd>F1</kbd>（<kbd>F1</kbd> ~ <kbd>F5</kbd>都行，看到让你登录就好）</p>\n</li>\n<li><p>输入账号，密码，登录。</p>\n</li>\n<li><p>删除配置文件，以 <code>.Xaut</code> 开头的文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~ </span><br><span class=\"line\">rm -rf .Xaut*</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启，正常</p>\n</li>\n</ol>"},{"layout":"post","title":"学习 React - MobX","date":"2017-06-03T14:16:00.000Z","_content":"\n计划学习 React，就接触到了 MobX。之前听过 Redux，因为我接触过 Vuex，感觉差不太多，就没有再去学习。还听说 Redux 的作者推荐 MobX，看来在不是很复杂的数据流动选择 MobX 是非常正确的。\n\n<!-- more -->\n\n## 一个简单的 React 例子\n\n做一个最简单的 React 页面——页面实时显示时间。\n\n其中有一个组件 `Timer` ，负责显示时间，并完成实时更新。\n\n### 用 React直接来写\n\n那么，`app.js` 如下：\n\n```jsx\nimport React from \"react\";\nimport \"./App.css\";\n\nconst now = () => {\n    let t = new Date().toISOString().replace('T', ' ');\n    return t.substring(0, t.length - 5);\n};\n\nclass Timer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            timer: null,\n            timeString: now()\n        }\n    }\n    componentDidMount() {\n        let timer = setInterval(() => {\n            this.setState({\n                timeString: now()\n            });\n        }, 1000);\n        this.setState({timer});\n    }\n    componentWillUnmount() {\n        clearInterval(this.state.timer);\n    }\n    render() {\n        return (<span>now: { this.state.timeString } </span> )\n    }\n}\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className=\"app\">\n                <Timer></Timer>\n            </div>\n        )\n    }\n}\n\nexport default App;\n```\n\n由于我们需要实时更新时间，在 `Timer` 组件内，定义内部状态（ `state`），并且在挂载组件后启动定时，组件移除时清除定时器。\n\n这样做有这些问题：\n\n- 如果有两个组件公用一个时间，那么没办法写在其中一个组件内，否则第二个组件获得不到时间\n- 为了解决第一点，一般就是采用 Redux，创建公共的 store，接收公共状态\n- 当然，如果两个组件是父子关系，可以通过 `props` 来进行传递，可以不用 Redux\n\n而一旦使用 Redux，那么项目规模立刻变大许多，而且 Redux 也比较复杂，不易于学习。所以就有了 MobX。😘\n\n### 使用 MobX\n\n引入 MobX 包，我们改写下 `app.js` ：\n\n```jsx\nimport React from \"react\";\nimport \"./App.css\";\n\nimport {observable} from \"mobx\";\nimport {observer} from \"mobx-react\";\n\nconst now = () => {\n    let t = new Date().toISOString().replace('T', ' ');\n    return t.substring(0, t.length - 5);\n};\n\nlet store = observable({\n    timerString: now()\n});\n\nsetInterval(() => {\n    store.timerString = now();\n}, 1000);\n\n@observer\nclass Timer extends React.Component {\n    render() {\n        return (<span>now: { store.timerString } </span> )\n    }\n}\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className=\"app\">\n                <Timer></Timer>\n            </div>\n        )\n    }\n}\n\nexport default App;\n```\n\n修改之后，是不是简单多了？\n\n修改的内容有：\n\n- 引入了新包 `mobx` 和 `mobx-react`\n- 共享的状态，直接写到了全局下，而且还是 `observable` （可观察的）\n- 状态的修改，也直接放到了全局下，当然，这个放在那里都无所谓，也可以放到组件内\n- 原有的 `Timer` 组件，直接引用全局共享状态，并且加上了装饰器 `observer` \n- 需要说明的一点：**observable 如果使用装饰器形式，只能写在类（ `class` ）内，所以这里没办法写成装饰器形式**\n\n## 小结\n\n通过使用 MobX，可以大大简化状态共享的代码量，原本需要使用 Redux 的项目，如果数据流动不是特别复杂，换成 MobX 可以开发效率更高。但是据说项目有一定规模的话，MobX 也会比较难于管理，还是 Redux 比较适合。\n","source":"_posts/2017/2017-06-03-react-mobx.md","raw":"---\nlayout: post\ntitle: \"学习 React - MobX\"\ndate: 2017-06-03 14:16:00 GMT+0000\ncategories: [前端]\ntags:  [react,mobx]\n---\n\n计划学习 React，就接触到了 MobX。之前听过 Redux，因为我接触过 Vuex，感觉差不太多，就没有再去学习。还听说 Redux 的作者推荐 MobX，看来在不是很复杂的数据流动选择 MobX 是非常正确的。\n\n<!-- more -->\n\n## 一个简单的 React 例子\n\n做一个最简单的 React 页面——页面实时显示时间。\n\n其中有一个组件 `Timer` ，负责显示时间，并完成实时更新。\n\n### 用 React直接来写\n\n那么，`app.js` 如下：\n\n```jsx\nimport React from \"react\";\nimport \"./App.css\";\n\nconst now = () => {\n    let t = new Date().toISOString().replace('T', ' ');\n    return t.substring(0, t.length - 5);\n};\n\nclass Timer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            timer: null,\n            timeString: now()\n        }\n    }\n    componentDidMount() {\n        let timer = setInterval(() => {\n            this.setState({\n                timeString: now()\n            });\n        }, 1000);\n        this.setState({timer});\n    }\n    componentWillUnmount() {\n        clearInterval(this.state.timer);\n    }\n    render() {\n        return (<span>now: { this.state.timeString } </span> )\n    }\n}\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className=\"app\">\n                <Timer></Timer>\n            </div>\n        )\n    }\n}\n\nexport default App;\n```\n\n由于我们需要实时更新时间，在 `Timer` 组件内，定义内部状态（ `state`），并且在挂载组件后启动定时，组件移除时清除定时器。\n\n这样做有这些问题：\n\n- 如果有两个组件公用一个时间，那么没办法写在其中一个组件内，否则第二个组件获得不到时间\n- 为了解决第一点，一般就是采用 Redux，创建公共的 store，接收公共状态\n- 当然，如果两个组件是父子关系，可以通过 `props` 来进行传递，可以不用 Redux\n\n而一旦使用 Redux，那么项目规模立刻变大许多，而且 Redux 也比较复杂，不易于学习。所以就有了 MobX。😘\n\n### 使用 MobX\n\n引入 MobX 包，我们改写下 `app.js` ：\n\n```jsx\nimport React from \"react\";\nimport \"./App.css\";\n\nimport {observable} from \"mobx\";\nimport {observer} from \"mobx-react\";\n\nconst now = () => {\n    let t = new Date().toISOString().replace('T', ' ');\n    return t.substring(0, t.length - 5);\n};\n\nlet store = observable({\n    timerString: now()\n});\n\nsetInterval(() => {\n    store.timerString = now();\n}, 1000);\n\n@observer\nclass Timer extends React.Component {\n    render() {\n        return (<span>now: { store.timerString } </span> )\n    }\n}\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className=\"app\">\n                <Timer></Timer>\n            </div>\n        )\n    }\n}\n\nexport default App;\n```\n\n修改之后，是不是简单多了？\n\n修改的内容有：\n\n- 引入了新包 `mobx` 和 `mobx-react`\n- 共享的状态，直接写到了全局下，而且还是 `observable` （可观察的）\n- 状态的修改，也直接放到了全局下，当然，这个放在那里都无所谓，也可以放到组件内\n- 原有的 `Timer` 组件，直接引用全局共享状态，并且加上了装饰器 `observer` \n- 需要说明的一点：**observable 如果使用装饰器形式，只能写在类（ `class` ）内，所以这里没办法写成装饰器形式**\n\n## 小结\n\n通过使用 MobX，可以大大简化状态共享的代码量，原本需要使用 Redux 的项目，如果数据流动不是特别复杂，换成 MobX 可以开发效率更高。但是据说项目有一定规模的话，MobX 也会比较难于管理，还是 Redux 比较适合。\n","slug":"2017-2017-06-03-react-mobx","published":1,"updated":"2019-07-18T17:19:06.966Z","comments":1,"photos":[],"link":"","_id":"cjy8y72rj002as21dw54leygs","content":"<p>计划学习 React，就接触到了 MobX。之前听过 Redux，因为我接触过 Vuex，感觉差不太多，就没有再去学习。还听说 Redux 的作者推荐 MobX，看来在不是很复杂的数据流动选择 MobX 是非常正确的。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"一个简单的-React-例子\"><a href=\"#一个简单的-React-例子\" class=\"headerlink\" title=\"一个简单的 React 例子\"></a>一个简单的 React 例子</h2><p>做一个最简单的 React 页面——页面实时显示时间。</p>\n<p>其中有一个组件 <code>Timer</code> ，负责显示时间，并完成实时更新。</p>\n<h3 id=\"用-React直接来写\"><a href=\"#用-React直接来写\" class=\"headerlink\" title=\"用 React直接来写\"></a>用 React直接来写</h3><p>那么，<code>app.js</code> 如下：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"./App.css\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> now = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> t = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toISOString().replace(<span class=\"string\">'T'</span>, <span class=\"string\">' '</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t.substring(<span class=\"number\">0</span>, t.length - <span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Timer</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">            timer: <span class=\"literal\">null</span>,</span><br><span class=\"line\">            timeString: now()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    componentDidMount() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> timer = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">                timeString: now()</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;timer&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    componentWillUnmount() &#123;</span><br><span class=\"line\">        clearInterval(<span class=\"keyword\">this</span>.state.timer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>now: &#123; this.state.timeString &#125; <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span> )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div className=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">                &lt;Timer&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">Timer</span>&gt;</span></span></span><br><span class=\"line\">            &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        )</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default App;</span></span><br></pre></td></tr></table></figure>\n\n<p>由于我们需要实时更新时间，在 <code>Timer</code> 组件内，定义内部状态（ <code>state</code>），并且在挂载组件后启动定时，组件移除时清除定时器。</p>\n<p>这样做有这些问题：</p>\n<ul>\n<li>如果有两个组件公用一个时间，那么没办法写在其中一个组件内，否则第二个组件获得不到时间</li>\n<li>为了解决第一点，一般就是采用 Redux，创建公共的 store，接收公共状态</li>\n<li>当然，如果两个组件是父子关系，可以通过 <code>props</code> 来进行传递，可以不用 Redux</li>\n</ul>\n<p>而一旦使用 Redux，那么项目规模立刻变大许多，而且 Redux 也比较复杂，不易于学习。所以就有了 MobX。😘</p>\n<h3 id=\"使用-MobX\"><a href=\"#使用-MobX\" class=\"headerlink\" title=\"使用 MobX\"></a>使用 MobX</h3><p>引入 MobX 包，我们改写下 <code>app.js</code> ：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"./App.css\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;observable&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"mobx\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;observer&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"mobx-react\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> now = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> t = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toISOString().replace(<span class=\"string\">'T'</span>, <span class=\"string\">' '</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t.substring(<span class=\"number\">0</span>, t.length - <span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> store = observable(&#123;</span><br><span class=\"line\">    timerString: now()</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    store.timerString = now();</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">@observer</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Timer</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>now: &#123; store.timerString &#125; <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span> )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div className=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">                &lt;Timer&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">Timer</span>&gt;</span></span></span><br><span class=\"line\">            &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        )</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default App;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改之后，是不是简单多了？</p>\n<p>修改的内容有：</p>\n<ul>\n<li>引入了新包 <code>mobx</code> 和 <code>mobx-react</code></li>\n<li>共享的状态，直接写到了全局下，而且还是 <code>observable</code> （可观察的）</li>\n<li>状态的修改，也直接放到了全局下，当然，这个放在那里都无所谓，也可以放到组件内</li>\n<li>原有的 <code>Timer</code> 组件，直接引用全局共享状态，并且加上了装饰器 <code>observer</code> </li>\n<li>需要说明的一点：<strong>observable 如果使用装饰器形式，只能写在类（ <code>class</code> ）内，所以这里没办法写成装饰器形式</strong></li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>通过使用 MobX，可以大大简化状态共享的代码量，原本需要使用 Redux 的项目，如果数据流动不是特别复杂，换成 MobX 可以开发效率更高。但是据说项目有一定规模的话，MobX 也会比较难于管理，还是 Redux 比较适合。</p>\n","site":{"data":{}},"excerpt":"<p>计划学习 React，就接触到了 MobX。之前听过 Redux，因为我接触过 Vuex，感觉差不太多，就没有再去学习。还听说 Redux 的作者推荐 MobX，看来在不是很复杂的数据流动选择 MobX 是非常正确的。</p>","more":"<h2 id=\"一个简单的-React-例子\"><a href=\"#一个简单的-React-例子\" class=\"headerlink\" title=\"一个简单的 React 例子\"></a>一个简单的 React 例子</h2><p>做一个最简单的 React 页面——页面实时显示时间。</p>\n<p>其中有一个组件 <code>Timer</code> ，负责显示时间，并完成实时更新。</p>\n<h3 id=\"用-React直接来写\"><a href=\"#用-React直接来写\" class=\"headerlink\" title=\"用 React直接来写\"></a>用 React直接来写</h3><p>那么，<code>app.js</code> 如下：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"./App.css\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> now = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> t = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toISOString().replace(<span class=\"string\">'T'</span>, <span class=\"string\">' '</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t.substring(<span class=\"number\">0</span>, t.length - <span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Timer</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">            timer: <span class=\"literal\">null</span>,</span><br><span class=\"line\">            timeString: now()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    componentDidMount() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> timer = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">                timeString: now()</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;timer&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    componentWillUnmount() &#123;</span><br><span class=\"line\">        clearInterval(<span class=\"keyword\">this</span>.state.timer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>now: &#123; this.state.timeString &#125; <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span> )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div className=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">                &lt;Timer&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">Timer</span>&gt;</span></span></span><br><span class=\"line\">            &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        )</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default App;</span></span><br></pre></td></tr></table></figure>\n\n<p>由于我们需要实时更新时间，在 <code>Timer</code> 组件内，定义内部状态（ <code>state</code>），并且在挂载组件后启动定时，组件移除时清除定时器。</p>\n<p>这样做有这些问题：</p>\n<ul>\n<li>如果有两个组件公用一个时间，那么没办法写在其中一个组件内，否则第二个组件获得不到时间</li>\n<li>为了解决第一点，一般就是采用 Redux，创建公共的 store，接收公共状态</li>\n<li>当然，如果两个组件是父子关系，可以通过 <code>props</code> 来进行传递，可以不用 Redux</li>\n</ul>\n<p>而一旦使用 Redux，那么项目规模立刻变大许多，而且 Redux 也比较复杂，不易于学习。所以就有了 MobX。😘</p>\n<h3 id=\"使用-MobX\"><a href=\"#使用-MobX\" class=\"headerlink\" title=\"使用 MobX\"></a>使用 MobX</h3><p>引入 MobX 包，我们改写下 <code>app.js</code> ：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"./App.css\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;observable&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"mobx\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;observer&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"mobx-react\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> now = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> t = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toISOString().replace(<span class=\"string\">'T'</span>, <span class=\"string\">' '</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t.substring(<span class=\"number\">0</span>, t.length - <span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> store = observable(&#123;</span><br><span class=\"line\">    timerString: now()</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    store.timerString = now();</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">@observer</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Timer</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>now: &#123; store.timerString &#125; <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span> )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div className=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">                &lt;Timer&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">Timer</span>&gt;</span></span></span><br><span class=\"line\">            &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        )</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default App;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改之后，是不是简单多了？</p>\n<p>修改的内容有：</p>\n<ul>\n<li>引入了新包 <code>mobx</code> 和 <code>mobx-react</code></li>\n<li>共享的状态，直接写到了全局下，而且还是 <code>observable</code> （可观察的）</li>\n<li>状态的修改，也直接放到了全局下，当然，这个放在那里都无所谓，也可以放到组件内</li>\n<li>原有的 <code>Timer</code> 组件，直接引用全局共享状态，并且加上了装饰器 <code>observer</code> </li>\n<li>需要说明的一点：<strong>observable 如果使用装饰器形式，只能写在类（ <code>class</code> ）内，所以这里没办法写成装饰器形式</strong></li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>通过使用 MobX，可以大大简化状态共享的代码量，原本需要使用 Redux 的项目，如果数据流动不是特别复杂，换成 MobX 可以开发效率更高。但是据说项目有一定规模的话，MobX 也会比较难于管理，还是 Redux 比较适合。</p>"},{"layout":"post","title":"git 命令学习","date":"2017-06-17T22:11:00.000Z","_content":"\n一直使用 git，但都是通过软件进行操作，基本上也没有实际用过 git 命令。本着多掌握一些英语单词的思想，还是学习一下 git 使用为好。\n\n<!-- more -->\n\n>  因为我的机器里面已经用 sourceTree 登录过 github / coding.net 了，所以 git 不会再要求输入密码了。\n\n## 从服务器克隆（下载）代码仓库\n\n假设代码存放在 coding.net。项目地址：`https://git.coding.net/yukapril/git-study.git`。\n\n一般很少需要直接本地建立 git 仓库，之后上传到服务器上，这些活都应该是版本管理员做的，所以我就省略了。\n\n**首先，克隆代码到本地**\n\n```sh\n# 首先通过 cd 切换到你要克隆到的位置\ngit clone https://git.coding.net/yukapril/git-study.git git-study\n# 也可以简写为\ngit clone https://git.coding.net/yukapril/git-study.git\n```\n\n命令格式为：`git clone 远程地址 本地目录名字`，其中本地目录名字经常不写，使用 git 的项目名字。\n\n这样，代码就被我们克隆到本地了。\n\n\n\n## git 操作流程\n\n我们下载代码后，进行修改，要想最终上传到服务器，流程是这样的。\n\n1. 确定要提交的文件，添加到版本库的暂存区中。你可能这次修改了10个文件，但是仅仅打算提交2个文件。\n2. 针对第一步确定的文件，填写注释并提交到本地 git 仓库。\n3. 将本地仓库的变更，推送到服务器仓库。\n\n注意：流程可以是1->2->3，也可以是反复的1->2，或者1->1->1再提交2，最后一起推送3。\n\n\n## 修改了代码，添加文件到暂存区\n\n首先，我们先要添加一些文件，就叫做 `index.html` 和 `src/index.js`吧。随便写点什么都行。\n\n**检查下 git 文件状态**\n\n```sh\ngit status\n# 或者简单模式查看\ngit status -s\n```\n\n结果为：\n\n```sh\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n\tindex.html\n\tsrc/\n\n```\n\ngit 提示我们有 （红色的）`index.html` 和 `src/` 没有添加到版本中。\n\n\n\n**添加文件到版本库中**\n\n我们要把本次即将提交的文件添加到版本库中，这样 git 才会追踪文件的修改。\n\n添加方法很简单，常用有以下几种方法：\n\n```sh\ngit add . # 添加所有文件\ngit add index.html # 添加指定的文件(index.html)\ngit add src/ # 添加指定的目录\ngit add *.html # 添加扩展名是html的文件\n```\n\n如果本次我仅仅想提交 `index.html`，但是我使用了 `git add .`命令，这样会导致把其他目录也添加到本次待提交暂存区。咋办？我比较笨，不知道如何移除单独的目录，所以用的笨方法，将本次添加的文件全部重置掉：\n\n```sh\ngit reset\n```\n\n之后重新添加就好了。\n\n你可以试试 `git status`，查看下状态：\n\n```sh\nnew file:   index.html\nnew file:   src/index.js\n```\n\n会有绿色的文件提示了。绿色表示新增加。\n\n\n\n## 填写注释，提交代码到本地仓库\n\n首先说明的是，必须要有上一步 `git add`，添加文件到暂存区，否则这步没办法提交。\n\n提交上一步的代码，建议写一点注释：\n\n```sh\ngit commit -m \"add files\"\n```\n\n这里 `-m` 表示 `message` ，后面写注释就好了。\n\n之后，我们查看下状态吧， `git status`：\n\n```sh\nOn branch master\nYour branch is ahead of 'origin/master' by 1 commit.\n  (use \"git push\" to publish your local commits)\nnothing to commit, working tree clean\n```\n\n它提示我们，现在本地的分支，比服务器的 `origin/master` 分支多了一条。\n\n\n\n## 将本地的修改，推送到服务器\n\n上面一步已经提示我们，本地比服务器代码更加超前，那么需要将本地的代码，推送到服务器上面。\n\ngit 命令是 `git push <远程主机名> <本地分支名>  <远程分支名>`\n\n```sh\ngit push origin master master # 远程主机叫做origin，本地分支默认为master，提交到远程分支master上\ngit push origin master # 远程主机叫做origin，本地分支默认为master，远程主机分支不写则同本地分支\ngit push origin # 将本地当前分支直接推送到远程主机当前分支\ngit push # 将本地当前分支直接推送到默认远程分支\n# 所有的操作，如果远程分支不存在则自动创建分支\n```\n\n一般来讲，我们都用最简单的，第四句。除非需要拉一个新的分支，否则其他写法很少用到。\n\n这里还有一点需要说明，假设你是在17:00进行了 `git commit`，之后忘记同步到服务器了。到了17:30想起来了，进行了 `git push`。在服务器上查看你的提交历史，**是17:00提交的**，绝不是17:30。\n\n\n\n## 总结\n\n这次，学习了以下命令：\n\n* `git clone` 从服务器克隆代码到本地\n* `git status` 查看文件状态\n* `git add` 添加文件到暂存区\n* `git reset` 重置文件暂存区\n* `git commit -m \"message\"` 提交当前暂存区并加入注释\n* `git push` 提交本地git变更到服务器\n\n","source":"_posts/2017/2017-06-17-git-study.md","raw":"---\nlayout: post\ntitle: \"git 命令学习\"\ndate: 2017-06-17 22:11:00 GMT+0000\ncategories: [代码]\ntags:  [git]\n---\n\n一直使用 git，但都是通过软件进行操作，基本上也没有实际用过 git 命令。本着多掌握一些英语单词的思想，还是学习一下 git 使用为好。\n\n<!-- more -->\n\n>  因为我的机器里面已经用 sourceTree 登录过 github / coding.net 了，所以 git 不会再要求输入密码了。\n\n## 从服务器克隆（下载）代码仓库\n\n假设代码存放在 coding.net。项目地址：`https://git.coding.net/yukapril/git-study.git`。\n\n一般很少需要直接本地建立 git 仓库，之后上传到服务器上，这些活都应该是版本管理员做的，所以我就省略了。\n\n**首先，克隆代码到本地**\n\n```sh\n# 首先通过 cd 切换到你要克隆到的位置\ngit clone https://git.coding.net/yukapril/git-study.git git-study\n# 也可以简写为\ngit clone https://git.coding.net/yukapril/git-study.git\n```\n\n命令格式为：`git clone 远程地址 本地目录名字`，其中本地目录名字经常不写，使用 git 的项目名字。\n\n这样，代码就被我们克隆到本地了。\n\n\n\n## git 操作流程\n\n我们下载代码后，进行修改，要想最终上传到服务器，流程是这样的。\n\n1. 确定要提交的文件，添加到版本库的暂存区中。你可能这次修改了10个文件，但是仅仅打算提交2个文件。\n2. 针对第一步确定的文件，填写注释并提交到本地 git 仓库。\n3. 将本地仓库的变更，推送到服务器仓库。\n\n注意：流程可以是1->2->3，也可以是反复的1->2，或者1->1->1再提交2，最后一起推送3。\n\n\n## 修改了代码，添加文件到暂存区\n\n首先，我们先要添加一些文件，就叫做 `index.html` 和 `src/index.js`吧。随便写点什么都行。\n\n**检查下 git 文件状态**\n\n```sh\ngit status\n# 或者简单模式查看\ngit status -s\n```\n\n结果为：\n\n```sh\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n\tindex.html\n\tsrc/\n\n```\n\ngit 提示我们有 （红色的）`index.html` 和 `src/` 没有添加到版本中。\n\n\n\n**添加文件到版本库中**\n\n我们要把本次即将提交的文件添加到版本库中，这样 git 才会追踪文件的修改。\n\n添加方法很简单，常用有以下几种方法：\n\n```sh\ngit add . # 添加所有文件\ngit add index.html # 添加指定的文件(index.html)\ngit add src/ # 添加指定的目录\ngit add *.html # 添加扩展名是html的文件\n```\n\n如果本次我仅仅想提交 `index.html`，但是我使用了 `git add .`命令，这样会导致把其他目录也添加到本次待提交暂存区。咋办？我比较笨，不知道如何移除单独的目录，所以用的笨方法，将本次添加的文件全部重置掉：\n\n```sh\ngit reset\n```\n\n之后重新添加就好了。\n\n你可以试试 `git status`，查看下状态：\n\n```sh\nnew file:   index.html\nnew file:   src/index.js\n```\n\n会有绿色的文件提示了。绿色表示新增加。\n\n\n\n## 填写注释，提交代码到本地仓库\n\n首先说明的是，必须要有上一步 `git add`，添加文件到暂存区，否则这步没办法提交。\n\n提交上一步的代码，建议写一点注释：\n\n```sh\ngit commit -m \"add files\"\n```\n\n这里 `-m` 表示 `message` ，后面写注释就好了。\n\n之后，我们查看下状态吧， `git status`：\n\n```sh\nOn branch master\nYour branch is ahead of 'origin/master' by 1 commit.\n  (use \"git push\" to publish your local commits)\nnothing to commit, working tree clean\n```\n\n它提示我们，现在本地的分支，比服务器的 `origin/master` 分支多了一条。\n\n\n\n## 将本地的修改，推送到服务器\n\n上面一步已经提示我们，本地比服务器代码更加超前，那么需要将本地的代码，推送到服务器上面。\n\ngit 命令是 `git push <远程主机名> <本地分支名>  <远程分支名>`\n\n```sh\ngit push origin master master # 远程主机叫做origin，本地分支默认为master，提交到远程分支master上\ngit push origin master # 远程主机叫做origin，本地分支默认为master，远程主机分支不写则同本地分支\ngit push origin # 将本地当前分支直接推送到远程主机当前分支\ngit push # 将本地当前分支直接推送到默认远程分支\n# 所有的操作，如果远程分支不存在则自动创建分支\n```\n\n一般来讲，我们都用最简单的，第四句。除非需要拉一个新的分支，否则其他写法很少用到。\n\n这里还有一点需要说明，假设你是在17:00进行了 `git commit`，之后忘记同步到服务器了。到了17:30想起来了，进行了 `git push`。在服务器上查看你的提交历史，**是17:00提交的**，绝不是17:30。\n\n\n\n## 总结\n\n这次，学习了以下命令：\n\n* `git clone` 从服务器克隆代码到本地\n* `git status` 查看文件状态\n* `git add` 添加文件到暂存区\n* `git reset` 重置文件暂存区\n* `git commit -m \"message\"` 提交当前暂存区并加入注释\n* `git push` 提交本地git变更到服务器\n\n","slug":"2017-2017-06-17-git-study","published":1,"updated":"2019-07-18T17:19:07.179Z","comments":1,"photos":[],"link":"","_id":"cjy8y72rk002ds21d8bv6z8ur","content":"<p>一直使用 git，但都是通过软件进行操作，基本上也没有实际用过 git 命令。本着多掌握一些英语单词的思想，还是学习一下 git 使用为好。</p>\n<a id=\"more\"></a>\n\n<blockquote>\n<p> 因为我的机器里面已经用 sourceTree 登录过 github / coding.net 了，所以 git 不会再要求输入密码了。</p>\n</blockquote>\n<h2 id=\"从服务器克隆（下载）代码仓库\"><a href=\"#从服务器克隆（下载）代码仓库\" class=\"headerlink\" title=\"从服务器克隆（下载）代码仓库\"></a>从服务器克隆（下载）代码仓库</h2><p>假设代码存放在 coding.net。项目地址：<code>https://git.coding.net/yukapril/git-study.git</code>。</p>\n<p>一般很少需要直接本地建立 git 仓库，之后上传到服务器上，这些活都应该是版本管理员做的，所以我就省略了。</p>\n<p><strong>首先，克隆代码到本地</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 首先通过 cd 切换到你要克隆到的位置</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://git.coding.net/yukapril/git-study.git git-study</span><br><span class=\"line\"><span class=\"comment\"># 也可以简写为</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://git.coding.net/yukapril/git-study.git</span><br></pre></td></tr></table></figure>\n\n<p>命令格式为：<code>git clone 远程地址 本地目录名字</code>，其中本地目录名字经常不写，使用 git 的项目名字。</p>\n<p>这样，代码就被我们克隆到本地了。</p>\n<h2 id=\"git-操作流程\"><a href=\"#git-操作流程\" class=\"headerlink\" title=\"git 操作流程\"></a>git 操作流程</h2><p>我们下载代码后，进行修改，要想最终上传到服务器，流程是这样的。</p>\n<ol>\n<li>确定要提交的文件，添加到版本库的暂存区中。你可能这次修改了10个文件，但是仅仅打算提交2个文件。</li>\n<li>针对第一步确定的文件，填写注释并提交到本地 git 仓库。</li>\n<li>将本地仓库的变更，推送到服务器仓库。</li>\n</ol>\n<p>注意：流程可以是1-&gt;2-&gt;3，也可以是反复的1-&gt;2，或者1-&gt;1-&gt;1再提交2，最后一起推送3。</p>\n<h2 id=\"修改了代码，添加文件到暂存区\"><a href=\"#修改了代码，添加文件到暂存区\" class=\"headerlink\" title=\"修改了代码，添加文件到暂存区\"></a>修改了代码，添加文件到暂存区</h2><p>首先，我们先要添加一些文件，就叫做 <code>index.html</code> 和 <code>src/index.js</code>吧。随便写点什么都行。</p>\n<p><strong>检查下 git 文件状态</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br><span class=\"line\"><span class=\"comment\"># 或者简单模式查看</span></span><br><span class=\"line\">git status -s</span><br></pre></td></tr></table></figure>\n\n<p>结果为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">On branch master</span><br><span class=\"line\">Your branch is up-to-date with <span class=\"string\">'origin/master'</span>.</span><br><span class=\"line\">Untracked files:</span><br><span class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to include <span class=\"keyword\">in</span> what will be committed)</span><br><span class=\"line\"></span><br><span class=\"line\">\tindex.html</span><br><span class=\"line\">\tsrc/</span><br></pre></td></tr></table></figure>\n\n<p>git 提示我们有 （红色的）<code>index.html</code> 和 <code>src/</code> 没有添加到版本中。</p>\n<p><strong>添加文件到版本库中</strong></p>\n<p>我们要把本次即将提交的文件添加到版本库中，这样 git 才会追踪文件的修改。</p>\n<p>添加方法很简单，常用有以下几种方法：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add . <span class=\"comment\"># 添加所有文件</span></span><br><span class=\"line\">git add index.html <span class=\"comment\"># 添加指定的文件(index.html)</span></span><br><span class=\"line\">git add src/ <span class=\"comment\"># 添加指定的目录</span></span><br><span class=\"line\">git add *.html <span class=\"comment\"># 添加扩展名是html的文件</span></span><br></pre></td></tr></table></figure>\n\n<p>如果本次我仅仅想提交 <code>index.html</code>，但是我使用了 <code>git add .</code>命令，这样会导致把其他目录也添加到本次待提交暂存区。咋办？我比较笨，不知道如何移除单独的目录，所以用的笨方法，将本次添加的文件全部重置掉：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset</span><br></pre></td></tr></table></figure>\n\n<p>之后重新添加就好了。</p>\n<p>你可以试试 <code>git status</code>，查看下状态：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new file:   index.html</span><br><span class=\"line\">new file:   src/index.js</span><br></pre></td></tr></table></figure>\n\n<p>会有绿色的文件提示了。绿色表示新增加。</p>\n<h2 id=\"填写注释，提交代码到本地仓库\"><a href=\"#填写注释，提交代码到本地仓库\" class=\"headerlink\" title=\"填写注释，提交代码到本地仓库\"></a>填写注释，提交代码到本地仓库</h2><p>首先说明的是，必须要有上一步 <code>git add</code>，添加文件到暂存区，否则这步没办法提交。</p>\n<p>提交上一步的代码，建议写一点注释：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">\"add files\"</span></span><br></pre></td></tr></table></figure>\n\n<p>这里 <code>-m</code> 表示 <code>message</code> ，后面写注释就好了。</p>\n<p>之后，我们查看下状态吧， <code>git status</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">On branch master</span><br><span class=\"line\">Your branch is ahead of <span class=\"string\">'origin/master'</span> by 1 commit.</span><br><span class=\"line\">  (use <span class=\"string\">\"git push\"</span> to publish your <span class=\"built_in\">local</span> commits)</span><br><span class=\"line\">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>\n\n<p>它提示我们，现在本地的分支，比服务器的 <code>origin/master</code> 分支多了一条。</p>\n<h2 id=\"将本地的修改，推送到服务器\"><a href=\"#将本地的修改，推送到服务器\" class=\"headerlink\" title=\"将本地的修改，推送到服务器\"></a>将本地的修改，推送到服务器</h2><p>上面一步已经提示我们，本地比服务器代码更加超前，那么需要将本地的代码，推送到服务器上面。</p>\n<p>git 命令是 <code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;  &lt;远程分支名&gt;</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master master <span class=\"comment\"># 远程主机叫做origin，本地分支默认为master，提交到远程分支master上</span></span><br><span class=\"line\">git push origin master <span class=\"comment\"># 远程主机叫做origin，本地分支默认为master，远程主机分支不写则同本地分支</span></span><br><span class=\"line\">git push origin <span class=\"comment\"># 将本地当前分支直接推送到远程主机当前分支</span></span><br><span class=\"line\">git push <span class=\"comment\"># 将本地当前分支直接推送到默认远程分支</span></span><br><span class=\"line\"><span class=\"comment\"># 所有的操作，如果远程分支不存在则自动创建分支</span></span><br></pre></td></tr></table></figure>\n\n<p>一般来讲，我们都用最简单的，第四句。除非需要拉一个新的分支，否则其他写法很少用到。</p>\n<p>这里还有一点需要说明，假设你是在17:00进行了 <code>git commit</code>，之后忘记同步到服务器了。到了17:30想起来了，进行了 <code>git push</code>。在服务器上查看你的提交历史，<strong>是17:00提交的</strong>，绝不是17:30。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这次，学习了以下命令：</p>\n<ul>\n<li><code>git clone</code> 从服务器克隆代码到本地</li>\n<li><code>git status</code> 查看文件状态</li>\n<li><code>git add</code> 添加文件到暂存区</li>\n<li><code>git reset</code> 重置文件暂存区</li>\n<li><code>git commit -m &quot;message&quot;</code> 提交当前暂存区并加入注释</li>\n<li><code>git push</code> 提交本地git变更到服务器</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>一直使用 git，但都是通过软件进行操作，基本上也没有实际用过 git 命令。本着多掌握一些英语单词的思想，还是学习一下 git 使用为好。</p>","more":"<blockquote>\n<p> 因为我的机器里面已经用 sourceTree 登录过 github / coding.net 了，所以 git 不会再要求输入密码了。</p>\n</blockquote>\n<h2 id=\"从服务器克隆（下载）代码仓库\"><a href=\"#从服务器克隆（下载）代码仓库\" class=\"headerlink\" title=\"从服务器克隆（下载）代码仓库\"></a>从服务器克隆（下载）代码仓库</h2><p>假设代码存放在 coding.net。项目地址：<code>https://git.coding.net/yukapril/git-study.git</code>。</p>\n<p>一般很少需要直接本地建立 git 仓库，之后上传到服务器上，这些活都应该是版本管理员做的，所以我就省略了。</p>\n<p><strong>首先，克隆代码到本地</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 首先通过 cd 切换到你要克隆到的位置</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://git.coding.net/yukapril/git-study.git git-study</span><br><span class=\"line\"><span class=\"comment\"># 也可以简写为</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://git.coding.net/yukapril/git-study.git</span><br></pre></td></tr></table></figure>\n\n<p>命令格式为：<code>git clone 远程地址 本地目录名字</code>，其中本地目录名字经常不写，使用 git 的项目名字。</p>\n<p>这样，代码就被我们克隆到本地了。</p>\n<h2 id=\"git-操作流程\"><a href=\"#git-操作流程\" class=\"headerlink\" title=\"git 操作流程\"></a>git 操作流程</h2><p>我们下载代码后，进行修改，要想最终上传到服务器，流程是这样的。</p>\n<ol>\n<li>确定要提交的文件，添加到版本库的暂存区中。你可能这次修改了10个文件，但是仅仅打算提交2个文件。</li>\n<li>针对第一步确定的文件，填写注释并提交到本地 git 仓库。</li>\n<li>将本地仓库的变更，推送到服务器仓库。</li>\n</ol>\n<p>注意：流程可以是1-&gt;2-&gt;3，也可以是反复的1-&gt;2，或者1-&gt;1-&gt;1再提交2，最后一起推送3。</p>\n<h2 id=\"修改了代码，添加文件到暂存区\"><a href=\"#修改了代码，添加文件到暂存区\" class=\"headerlink\" title=\"修改了代码，添加文件到暂存区\"></a>修改了代码，添加文件到暂存区</h2><p>首先，我们先要添加一些文件，就叫做 <code>index.html</code> 和 <code>src/index.js</code>吧。随便写点什么都行。</p>\n<p><strong>检查下 git 文件状态</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br><span class=\"line\"><span class=\"comment\"># 或者简单模式查看</span></span><br><span class=\"line\">git status -s</span><br></pre></td></tr></table></figure>\n\n<p>结果为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">On branch master</span><br><span class=\"line\">Your branch is up-to-date with <span class=\"string\">'origin/master'</span>.</span><br><span class=\"line\">Untracked files:</span><br><span class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to include <span class=\"keyword\">in</span> what will be committed)</span><br><span class=\"line\"></span><br><span class=\"line\">\tindex.html</span><br><span class=\"line\">\tsrc/</span><br></pre></td></tr></table></figure>\n\n<p>git 提示我们有 （红色的）<code>index.html</code> 和 <code>src/</code> 没有添加到版本中。</p>\n<p><strong>添加文件到版本库中</strong></p>\n<p>我们要把本次即将提交的文件添加到版本库中，这样 git 才会追踪文件的修改。</p>\n<p>添加方法很简单，常用有以下几种方法：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add . <span class=\"comment\"># 添加所有文件</span></span><br><span class=\"line\">git add index.html <span class=\"comment\"># 添加指定的文件(index.html)</span></span><br><span class=\"line\">git add src/ <span class=\"comment\"># 添加指定的目录</span></span><br><span class=\"line\">git add *.html <span class=\"comment\"># 添加扩展名是html的文件</span></span><br></pre></td></tr></table></figure>\n\n<p>如果本次我仅仅想提交 <code>index.html</code>，但是我使用了 <code>git add .</code>命令，这样会导致把其他目录也添加到本次待提交暂存区。咋办？我比较笨，不知道如何移除单独的目录，所以用的笨方法，将本次添加的文件全部重置掉：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset</span><br></pre></td></tr></table></figure>\n\n<p>之后重新添加就好了。</p>\n<p>你可以试试 <code>git status</code>，查看下状态：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new file:   index.html</span><br><span class=\"line\">new file:   src/index.js</span><br></pre></td></tr></table></figure>\n\n<p>会有绿色的文件提示了。绿色表示新增加。</p>\n<h2 id=\"填写注释，提交代码到本地仓库\"><a href=\"#填写注释，提交代码到本地仓库\" class=\"headerlink\" title=\"填写注释，提交代码到本地仓库\"></a>填写注释，提交代码到本地仓库</h2><p>首先说明的是，必须要有上一步 <code>git add</code>，添加文件到暂存区，否则这步没办法提交。</p>\n<p>提交上一步的代码，建议写一点注释：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">\"add files\"</span></span><br></pre></td></tr></table></figure>\n\n<p>这里 <code>-m</code> 表示 <code>message</code> ，后面写注释就好了。</p>\n<p>之后，我们查看下状态吧， <code>git status</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">On branch master</span><br><span class=\"line\">Your branch is ahead of <span class=\"string\">'origin/master'</span> by 1 commit.</span><br><span class=\"line\">  (use <span class=\"string\">\"git push\"</span> to publish your <span class=\"built_in\">local</span> commits)</span><br><span class=\"line\">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>\n\n<p>它提示我们，现在本地的分支，比服务器的 <code>origin/master</code> 分支多了一条。</p>\n<h2 id=\"将本地的修改，推送到服务器\"><a href=\"#将本地的修改，推送到服务器\" class=\"headerlink\" title=\"将本地的修改，推送到服务器\"></a>将本地的修改，推送到服务器</h2><p>上面一步已经提示我们，本地比服务器代码更加超前，那么需要将本地的代码，推送到服务器上面。</p>\n<p>git 命令是 <code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;  &lt;远程分支名&gt;</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master master <span class=\"comment\"># 远程主机叫做origin，本地分支默认为master，提交到远程分支master上</span></span><br><span class=\"line\">git push origin master <span class=\"comment\"># 远程主机叫做origin，本地分支默认为master，远程主机分支不写则同本地分支</span></span><br><span class=\"line\">git push origin <span class=\"comment\"># 将本地当前分支直接推送到远程主机当前分支</span></span><br><span class=\"line\">git push <span class=\"comment\"># 将本地当前分支直接推送到默认远程分支</span></span><br><span class=\"line\"><span class=\"comment\"># 所有的操作，如果远程分支不存在则自动创建分支</span></span><br></pre></td></tr></table></figure>\n\n<p>一般来讲，我们都用最简单的，第四句。除非需要拉一个新的分支，否则其他写法很少用到。</p>\n<p>这里还有一点需要说明，假设你是在17:00进行了 <code>git commit</code>，之后忘记同步到服务器了。到了17:30想起来了，进行了 <code>git push</code>。在服务器上查看你的提交历史，<strong>是17:00提交的</strong>，绝不是17:30。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这次，学习了以下命令：</p>\n<ul>\n<li><code>git clone</code> 从服务器克隆代码到本地</li>\n<li><code>git status</code> 查看文件状态</li>\n<li><code>git add</code> 添加文件到暂存区</li>\n<li><code>git reset</code> 重置文件暂存区</li>\n<li><code>git commit -m &quot;message&quot;</code> 提交当前暂存区并加入注释</li>\n<li><code>git push</code> 提交本地git变更到服务器</li>\n</ul>"},{"layout":"post","title":"elementUI Message 独立引入的用法","date":"2017-07-12T13:04:00.000Z","_content":"\n今天在做项目时候，用到了 elementUI 的 Message 组件。因为我是按需 `import` 引入的方法，结果按照原本的文档API代码不生效。\n\n<!-- more -->\n\n## 查看文档\n\n来看下，[elementUI - Message 文档](http://element.eleme.io/#/zh-CN/component/message) 的说明如下\n\n> **全局方法**\n>\n> Element 为 Vue.prototype 添加了全局方法 $message。因此在 vue instance 中可以采用本页面中的方式调用 Message。\n>\n> **单独引用**\n>\n> 单独引入 Message：\n>\n> `import { Message } from 'element-ui';`\n>\n> 此时调用方法为 `Message(options)`。我们也为每个 type 定义了各自的方法，如 `Message.success(options)`。 并且可以调用 `Message.closeAll()` 手动关闭所有实例。\n\n简答来说，如果是全局引入的话，直接按照文档方法就可以使用了，见下：\n\n```js\nexport default {\n  methods: {\n    open() {\n      this.$message.error('错误信息');\n    }\n  }\n}\n```\n\n但是如果是单独引入的，就只能在某个vue单文件组件中这样来实现：\n\n```js\nimport { Message } from 'element-ui';\nexport default {\n  methods: {\n    open() {\n      Message.error('错误信息');\n    }\n  }\n}\n```\n\n每个组件中，都需要引入 Message，太繁琐了。能不能像全局引入一样用 `this.$message` 呢\n\n## 问题原因及解决\n\n查看下 `element-ui/package/message/index.js` 的实现方法，结果发现：\n\n```js\nimport Message from './src/main.js';\nexport default Message;\n```\n\n直接返回了。\n\n而其他的组件，一般都是有 `install` 方法供Vue来操作的。\n\n知道问题所在就好解决了，给 Message 添加 install 方法就行了。\n\n```js\n// 和其他组件一样，一并引入\nimport {Button, Message} from 'element-ui'\n\n// 在调用 Vue.use 前，给 Message 添加 install 方法\nMessage.install = function (Vue, options) {\n  Vue.prototype.$message = Message\n}\n\n// 和所有组件一样，一并进行use\nVue.use(Button)\nVue.use(Message)\n```\n\n当然，也可以不用 Vue.use 来实现，比如直接写在 Vue 实例上：\n```js\n// 和其他组件一样，一并引入\nimport {Button, Message} from 'element-ui'\n\nVue.use(Button)\n\n// 将 Message 直接挂在 Vue 实例上\nVue.prototype.$message = Message\n```\n\n我比较倾向第一种方案，写法比较规矩而已。\n","source":"_posts/2017/2017-07-12-vue-elementui-message.md","raw":"---\nlayout: post\ntitle: \"elementUI Message 独立引入的用法\"\ndate: 2017-07-12 13:04:00 GMT+0000\ncategories: [前端]\ntags:  [vue,elementUI]\n---\n\n今天在做项目时候，用到了 elementUI 的 Message 组件。因为我是按需 `import` 引入的方法，结果按照原本的文档API代码不生效。\n\n<!-- more -->\n\n## 查看文档\n\n来看下，[elementUI - Message 文档](http://element.eleme.io/#/zh-CN/component/message) 的说明如下\n\n> **全局方法**\n>\n> Element 为 Vue.prototype 添加了全局方法 $message。因此在 vue instance 中可以采用本页面中的方式调用 Message。\n>\n> **单独引用**\n>\n> 单独引入 Message：\n>\n> `import { Message } from 'element-ui';`\n>\n> 此时调用方法为 `Message(options)`。我们也为每个 type 定义了各自的方法，如 `Message.success(options)`。 并且可以调用 `Message.closeAll()` 手动关闭所有实例。\n\n简答来说，如果是全局引入的话，直接按照文档方法就可以使用了，见下：\n\n```js\nexport default {\n  methods: {\n    open() {\n      this.$message.error('错误信息');\n    }\n  }\n}\n```\n\n但是如果是单独引入的，就只能在某个vue单文件组件中这样来实现：\n\n```js\nimport { Message } from 'element-ui';\nexport default {\n  methods: {\n    open() {\n      Message.error('错误信息');\n    }\n  }\n}\n```\n\n每个组件中，都需要引入 Message，太繁琐了。能不能像全局引入一样用 `this.$message` 呢\n\n## 问题原因及解决\n\n查看下 `element-ui/package/message/index.js` 的实现方法，结果发现：\n\n```js\nimport Message from './src/main.js';\nexport default Message;\n```\n\n直接返回了。\n\n而其他的组件，一般都是有 `install` 方法供Vue来操作的。\n\n知道问题所在就好解决了，给 Message 添加 install 方法就行了。\n\n```js\n// 和其他组件一样，一并引入\nimport {Button, Message} from 'element-ui'\n\n// 在调用 Vue.use 前，给 Message 添加 install 方法\nMessage.install = function (Vue, options) {\n  Vue.prototype.$message = Message\n}\n\n// 和所有组件一样，一并进行use\nVue.use(Button)\nVue.use(Message)\n```\n\n当然，也可以不用 Vue.use 来实现，比如直接写在 Vue 实例上：\n```js\n// 和其他组件一样，一并引入\nimport {Button, Message} from 'element-ui'\n\nVue.use(Button)\n\n// 将 Message 直接挂在 Vue 实例上\nVue.prototype.$message = Message\n```\n\n我比较倾向第一种方案，写法比较规矩而已。\n","slug":"2017-2017-07-12-vue-elementui-message","published":1,"updated":"2019-07-18T17:19:07.167Z","comments":1,"photos":[],"link":"","_id":"cjy8y72rm002hs21d7wf1rhe6","content":"<p>今天在做项目时候，用到了 elementUI 的 Message 组件。因为我是按需 <code>import</code> 引入的方法，结果按照原本的文档API代码不生效。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"查看文档\"><a href=\"#查看文档\" class=\"headerlink\" title=\"查看文档\"></a>查看文档</h2><p>来看下，<a href=\"http://element.eleme.io/#/zh-CN/component/message\" target=\"_blank\" rel=\"noopener\">elementUI - Message 文档</a> 的说明如下</p>\n<blockquote>\n<p><strong>全局方法</strong></p>\n<p>Element 为 Vue.prototype 添加了全局方法 $message。因此在 vue instance 中可以采用本页面中的方式调用 Message。</p>\n<p><strong>单独引用</strong></p>\n<p>单独引入 Message：</p>\n<p><code>import { Message } from &#39;element-ui&#39;;</code></p>\n<p>此时调用方法为 <code>Message(options)</code>。我们也为每个 type 定义了各自的方法，如 <code>Message.success(options)</code>。 并且可以调用 <code>Message.closeAll()</code> 手动关闭所有实例。</p>\n</blockquote>\n<p>简答来说，如果是全局引入的话，直接按照文档方法就可以使用了，见下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    open() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$message.error(<span class=\"string\">'错误信息'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是如果是单独引入的，就只能在某个vue单文件组件中这样来实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Message &#125; <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    open() &#123;</span><br><span class=\"line\">      Message.error(<span class=\"string\">'错误信息'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每个组件中，都需要引入 Message，太繁琐了。能不能像全局引入一样用 <code>this.$message</code> 呢</p>\n<h2 id=\"问题原因及解决\"><a href=\"#问题原因及解决\" class=\"headerlink\" title=\"问题原因及解决\"></a>问题原因及解决</h2><p>查看下 <code>element-ui/package/message/index.js</code> 的实现方法，结果发现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Message <span class=\"keyword\">from</span> <span class=\"string\">'./src/main.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Message;</span><br></pre></td></tr></table></figure>\n\n<p>直接返回了。</p>\n<p>而其他的组件，一般都是有 <code>install</code> 方法供Vue来操作的。</p>\n<p>知道问题所在就好解决了，给 Message 添加 install 方法就行了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 和其他组件一样，一并引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Button, Message&#125; <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在调用 Vue.use 前，给 Message 添加 install 方法</span></span><br><span class=\"line\">Message.install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue, options</span>) </span>&#123;</span><br><span class=\"line\">  Vue.prototype.$message = Message</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 和所有组件一样，一并进行use</span></span><br><span class=\"line\">Vue.use(Button)</span><br><span class=\"line\">Vue.use(Message)</span><br></pre></td></tr></table></figure>\n\n<p>当然，也可以不用 Vue.use 来实现，比如直接写在 Vue 实例上：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 和其他组件一样，一并引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Button, Message&#125; <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Button)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 Message 直接挂在 Vue 实例上</span></span><br><span class=\"line\">Vue.prototype.$message = Message</span><br></pre></td></tr></table></figure>\n\n<p>我比较倾向第一种方案，写法比较规矩而已。</p>\n","site":{"data":{}},"excerpt":"<p>今天在做项目时候，用到了 elementUI 的 Message 组件。因为我是按需 <code>import</code> 引入的方法，结果按照原本的文档API代码不生效。</p>","more":"<h2 id=\"查看文档\"><a href=\"#查看文档\" class=\"headerlink\" title=\"查看文档\"></a>查看文档</h2><p>来看下，<a href=\"http://element.eleme.io/#/zh-CN/component/message\" target=\"_blank\" rel=\"noopener\">elementUI - Message 文档</a> 的说明如下</p>\n<blockquote>\n<p><strong>全局方法</strong></p>\n<p>Element 为 Vue.prototype 添加了全局方法 $message。因此在 vue instance 中可以采用本页面中的方式调用 Message。</p>\n<p><strong>单独引用</strong></p>\n<p>单独引入 Message：</p>\n<p><code>import { Message } from &#39;element-ui&#39;;</code></p>\n<p>此时调用方法为 <code>Message(options)</code>。我们也为每个 type 定义了各自的方法，如 <code>Message.success(options)</code>。 并且可以调用 <code>Message.closeAll()</code> 手动关闭所有实例。</p>\n</blockquote>\n<p>简答来说，如果是全局引入的话，直接按照文档方法就可以使用了，见下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    open() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$message.error(<span class=\"string\">'错误信息'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是如果是单独引入的，就只能在某个vue单文件组件中这样来实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Message &#125; <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    open() &#123;</span><br><span class=\"line\">      Message.error(<span class=\"string\">'错误信息'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每个组件中，都需要引入 Message，太繁琐了。能不能像全局引入一样用 <code>this.$message</code> 呢</p>\n<h2 id=\"问题原因及解决\"><a href=\"#问题原因及解决\" class=\"headerlink\" title=\"问题原因及解决\"></a>问题原因及解决</h2><p>查看下 <code>element-ui/package/message/index.js</code> 的实现方法，结果发现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Message <span class=\"keyword\">from</span> <span class=\"string\">'./src/main.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Message;</span><br></pre></td></tr></table></figure>\n\n<p>直接返回了。</p>\n<p>而其他的组件，一般都是有 <code>install</code> 方法供Vue来操作的。</p>\n<p>知道问题所在就好解决了，给 Message 添加 install 方法就行了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 和其他组件一样，一并引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Button, Message&#125; <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在调用 Vue.use 前，给 Message 添加 install 方法</span></span><br><span class=\"line\">Message.install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue, options</span>) </span>&#123;</span><br><span class=\"line\">  Vue.prototype.$message = Message</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 和所有组件一样，一并进行use</span></span><br><span class=\"line\">Vue.use(Button)</span><br><span class=\"line\">Vue.use(Message)</span><br></pre></td></tr></table></figure>\n\n<p>当然，也可以不用 Vue.use 来实现，比如直接写在 Vue 实例上：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 和其他组件一样，一并引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Button, Message&#125; <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Button)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 Message 直接挂在 Vue 实例上</span></span><br><span class=\"line\">Vue.prototype.$message = Message</span><br></pre></td></tr></table></figure>\n\n<p>我比较倾向第一种方案，写法比较规矩而已。</p>"},{"layout":"post","title":"ruby jekyll 的安装","date":"2017-07-27T22:50:00.000Z","_content":"\n突然发现，自己博客没有 `jekyll` 的安装方法。\n\n之前笔记本重装系统，也就没有安装 `ruby`，装好后记录一下。\n\n<!-- more -->\n\n## 首先安装 ruby\n\n下载地址： http://www.ruby-lang.org/en/documentation/installation/\n\n### windows\n\n需要选择 [RubyInstaller](https://rubyinstaller.org/downloads/)，其他系统就没那么多事情。至于DevKit，我觉得无所谓，可以不下载。\n\n### MacOS\n\n自带ruby，需要升级。一般都是采用 rvm 独立安装一套。\n\n``` bash\n$ curl -L get.rvm.io | bash -s stable\n```\n\n之后有提示，会要求把一行代码写入 `~/.bash_profile` 中，按要求写入就行了。之后重启一个控制台就可以使用 rvm 了。\n\n之后就可以安装 ruby 了：\n\n```bash\nrvm install 2.4.1\n```\n\n其中2.4.1是目前最新的版本。\n\n装好之后，验证一下：\n\n```bash\nruby -v\ngem -v\n```\n\n可以查看安装的版本号。\n\n## 安装 jekyll\n\n需要通过 `gem` 安装 `jekyll` 和 `bundle`，不安装 `bundle` 就没办法启动打包。\n\n```bash\ngem install jekyll bundler\n```\n\n装好之后，验证一下：\n\n```bash\njekyll -v\nbundle -v\n```\n\n可以查看安装的版本号。\n\n## 使用 jekyll 创建博客\n\n进入一个目录，然后：\n\n```bash\njekyll new blog\n```\n\n这样就创建了一个叫做 blog 的默认博客了。\n\n\n## 启动报错\n\n最常见的问题就是从网上找到的 jekyll 主题，他们用了插件，你没有安装。\n\n比如会有提示缺少 `jekyll-paginate` 分页插件，安装即可：\n\n```bash\ngem install jekyll-paginate\n```","source":"_posts/2017/2017-07-27-ruby.md","raw":"---\nlayout: post\ntitle: \"ruby jekyll 的安装\"\ndate: 2017-07-27 22:50:00 GMT+0000\ncategories: [代码]\ntags:  [ruby,jekyll]\n---\n\n突然发现，自己博客没有 `jekyll` 的安装方法。\n\n之前笔记本重装系统，也就没有安装 `ruby`，装好后记录一下。\n\n<!-- more -->\n\n## 首先安装 ruby\n\n下载地址： http://www.ruby-lang.org/en/documentation/installation/\n\n### windows\n\n需要选择 [RubyInstaller](https://rubyinstaller.org/downloads/)，其他系统就没那么多事情。至于DevKit，我觉得无所谓，可以不下载。\n\n### MacOS\n\n自带ruby，需要升级。一般都是采用 rvm 独立安装一套。\n\n``` bash\n$ curl -L get.rvm.io | bash -s stable\n```\n\n之后有提示，会要求把一行代码写入 `~/.bash_profile` 中，按要求写入就行了。之后重启一个控制台就可以使用 rvm 了。\n\n之后就可以安装 ruby 了：\n\n```bash\nrvm install 2.4.1\n```\n\n其中2.4.1是目前最新的版本。\n\n装好之后，验证一下：\n\n```bash\nruby -v\ngem -v\n```\n\n可以查看安装的版本号。\n\n## 安装 jekyll\n\n需要通过 `gem` 安装 `jekyll` 和 `bundle`，不安装 `bundle` 就没办法启动打包。\n\n```bash\ngem install jekyll bundler\n```\n\n装好之后，验证一下：\n\n```bash\njekyll -v\nbundle -v\n```\n\n可以查看安装的版本号。\n\n## 使用 jekyll 创建博客\n\n进入一个目录，然后：\n\n```bash\njekyll new blog\n```\n\n这样就创建了一个叫做 blog 的默认博客了。\n\n\n## 启动报错\n\n最常见的问题就是从网上找到的 jekyll 主题，他们用了插件，你没有安装。\n\n比如会有提示缺少 `jekyll-paginate` 分页插件，安装即可：\n\n```bash\ngem install jekyll-paginate\n```","slug":"2017-2017-07-27-ruby","published":1,"updated":"2019-07-18T17:19:07.086Z","comments":1,"photos":[],"link":"","_id":"cjy8y72rn002ks21dbmhvavvm","content":"<p>突然发现，自己博客没有 <code>jekyll</code> 的安装方法。</p>\n<p>之前笔记本重装系统，也就没有安装 <code>ruby</code>，装好后记录一下。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"首先安装-ruby\"><a href=\"#首先安装-ruby\" class=\"headerlink\" title=\"首先安装 ruby\"></a>首先安装 ruby</h2><p>下载地址： <a href=\"http://www.ruby-lang.org/en/documentation/installation/\" target=\"_blank\" rel=\"noopener\">http://www.ruby-lang.org/en/documentation/installation/</a></p>\n<h3 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h3><p>需要选择 <a href=\"https://rubyinstaller.org/downloads/\" target=\"_blank\" rel=\"noopener\">RubyInstaller</a>，其他系统就没那么多事情。至于DevKit，我觉得无所谓，可以不下载。</p>\n<h3 id=\"MacOS\"><a href=\"#MacOS\" class=\"headerlink\" title=\"MacOS\"></a>MacOS</h3><p>自带ruby，需要升级。一般都是采用 rvm 独立安装一套。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -L get.rvm.io | bash -s stable</span><br></pre></td></tr></table></figure>\n\n<p>之后有提示，会要求把一行代码写入 <code>~/.bash_profile</code> 中，按要求写入就行了。之后重启一个控制台就可以使用 rvm 了。</p>\n<p>之后就可以安装 ruby 了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm install 2.4.1</span><br></pre></td></tr></table></figure>\n\n<p>其中2.4.1是目前最新的版本。</p>\n<p>装好之后，验证一下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby -v</span><br><span class=\"line\">gem -v</span><br></pre></td></tr></table></figure>\n\n<p>可以查看安装的版本号。</p>\n<h2 id=\"安装-jekyll\"><a href=\"#安装-jekyll\" class=\"headerlink\" title=\"安装 jekyll\"></a>安装 jekyll</h2><p>需要通过 <code>gem</code> 安装 <code>jekyll</code> 和 <code>bundle</code>，不安装 <code>bundle</code> 就没办法启动打包。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install jekyll bundler</span><br></pre></td></tr></table></figure>\n\n<p>装好之后，验证一下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jekyll -v</span><br><span class=\"line\">bundle -v</span><br></pre></td></tr></table></figure>\n\n<p>可以查看安装的版本号。</p>\n<h2 id=\"使用-jekyll-创建博客\"><a href=\"#使用-jekyll-创建博客\" class=\"headerlink\" title=\"使用 jekyll 创建博客\"></a>使用 jekyll 创建博客</h2><p>进入一个目录，然后：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jekyll new blog</span><br></pre></td></tr></table></figure>\n\n<p>这样就创建了一个叫做 blog 的默认博客了。</p>\n<h2 id=\"启动报错\"><a href=\"#启动报错\" class=\"headerlink\" title=\"启动报错\"></a>启动报错</h2><p>最常见的问题就是从网上找到的 jekyll 主题，他们用了插件，你没有安装。</p>\n<p>比如会有提示缺少 <code>jekyll-paginate</code> 分页插件，安装即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install jekyll-paginate</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>突然发现，自己博客没有 <code>jekyll</code> 的安装方法。</p>\n<p>之前笔记本重装系统，也就没有安装 <code>ruby</code>，装好后记录一下。</p>","more":"<h2 id=\"首先安装-ruby\"><a href=\"#首先安装-ruby\" class=\"headerlink\" title=\"首先安装 ruby\"></a>首先安装 ruby</h2><p>下载地址： <a href=\"http://www.ruby-lang.org/en/documentation/installation/\" target=\"_blank\" rel=\"noopener\">http://www.ruby-lang.org/en/documentation/installation/</a></p>\n<h3 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h3><p>需要选择 <a href=\"https://rubyinstaller.org/downloads/\" target=\"_blank\" rel=\"noopener\">RubyInstaller</a>，其他系统就没那么多事情。至于DevKit，我觉得无所谓，可以不下载。</p>\n<h3 id=\"MacOS\"><a href=\"#MacOS\" class=\"headerlink\" title=\"MacOS\"></a>MacOS</h3><p>自带ruby，需要升级。一般都是采用 rvm 独立安装一套。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -L get.rvm.io | bash -s stable</span><br></pre></td></tr></table></figure>\n\n<p>之后有提示，会要求把一行代码写入 <code>~/.bash_profile</code> 中，按要求写入就行了。之后重启一个控制台就可以使用 rvm 了。</p>\n<p>之后就可以安装 ruby 了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm install 2.4.1</span><br></pre></td></tr></table></figure>\n\n<p>其中2.4.1是目前最新的版本。</p>\n<p>装好之后，验证一下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby -v</span><br><span class=\"line\">gem -v</span><br></pre></td></tr></table></figure>\n\n<p>可以查看安装的版本号。</p>\n<h2 id=\"安装-jekyll\"><a href=\"#安装-jekyll\" class=\"headerlink\" title=\"安装 jekyll\"></a>安装 jekyll</h2><p>需要通过 <code>gem</code> 安装 <code>jekyll</code> 和 <code>bundle</code>，不安装 <code>bundle</code> 就没办法启动打包。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install jekyll bundler</span><br></pre></td></tr></table></figure>\n\n<p>装好之后，验证一下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jekyll -v</span><br><span class=\"line\">bundle -v</span><br></pre></td></tr></table></figure>\n\n<p>可以查看安装的版本号。</p>\n<h2 id=\"使用-jekyll-创建博客\"><a href=\"#使用-jekyll-创建博客\" class=\"headerlink\" title=\"使用 jekyll 创建博客\"></a>使用 jekyll 创建博客</h2><p>进入一个目录，然后：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jekyll new blog</span><br></pre></td></tr></table></figure>\n\n<p>这样就创建了一个叫做 blog 的默认博客了。</p>\n<h2 id=\"启动报错\"><a href=\"#启动报错\" class=\"headerlink\" title=\"启动报错\"></a>启动报错</h2><p>最常见的问题就是从网上找到的 jekyll 主题，他们用了插件，你没有安装。</p>\n<p>比如会有提示缺少 <code>jekyll-paginate</code> 分页插件，安装即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install jekyll-paginate</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"webpack uglifyJS 在 IE8 下的兼容处理","date":"2017-08-05T11:34:00.000Z","_content":"\n最近在做组件项目，写 ES6 代码，通过 webpack3 进行打包，中途用 uglifyjs-webpack-plugin 插件进行压缩。\n\n考虑到各个项目都能用得上，所以最终打包格式选择了 `umd`。\n\n<!-- more -->\n\n## 基础处理\n\n首先，IE8 不支持的东西太多了，所以必须用垫片修补下。\n\n由于我确实不了解 `babel-polyfill`，而且组件可能不只这一个，也不可能只在一个项目中去用，看了下 `babel-polyfill` 的引入方式，基本上都是直接放到最终代码中的，在大项目中我认为算是首选。\n\n所以采用了 `shim` + `sham` 的方案，个别功能（比如 `Element.prototype.classList`），采用自己写补丁的方式实现。\n\n最终，在页面这样写：\n\n```html\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\"\n          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Test</title>\n    <!--[if lt IE 9]>\n    <script src=\"../lib/es5-shim.min.js\"></script>\n    <script src=\"../lib/es5-sham.min.js\"></script>\n    <![endif]-->\n    <!--[if lte IE 9]>\n    <script src=\"../lib/ie.min.js\"></script>\n    <![endif]-->\n</head>\n<body>\n  ...\n</body>\n</html>\n```\n\n通过 IE 的注释语法，特定情况下加载特定 JS 来实现。\n\n由于我需要针对 IE9 做一些补丁，所以额外打了一个 ie.min.js 补丁。\n\n这样，大部分ES5 的兼容性问题都可以解决了。\n\n\n\n## webpack\n\n首先说说 webpack，这个网上有人说，webpack1 支持 IE8，从 webpack2 开始不支持了。\n\n具体我没有深究，但是我用 webpack3，是可以实现兼容的。\n\n首先是必须打上面的补丁，让 IE8 支持 ES5，最重要的是 `sham` 也是必须的，主要用来实现 `Object.defineProperty` ，虽然可能稳定性欠佳。\n\nwebpack 打包（`umd` 方式）后，未压缩的代码部分：\n\n```js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Checkbox = function () {\n  function Checkbox(element) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Checkbox);\n  }\n  _createClass(Checkbox, [{\n    key: 'on',\n    value: function on() {    }\n  }]);\n  return Checkbox;\n}();\n```\n\n之后，webpack 采用 defineProperty 进行定义属性，所以才必须打这个补丁。\n\n可能 webpack1 最终打包的方式不同，不需要对 `Object.defineProperty` 打补丁，才有人说 webpack1 才支持 IE8 这种说法。\n\n本身，webpack 不需要做任何兼容处理修改，只需要之前的补丁即可。\n\n#### 小问题\n\n但是，在编译过程中，曾经遇到了一个问题，随后莫名其妙自己没问题了，尚不清楚原因所在。\n\n在上面代码中，有一步 `_classCallCheck(this,Checkbox)`，这个竟然 `throw new TypeError` 了，原本上用 `class Checkbox`，改成了 `function Checkbox(){}`，最后又改回去了，自己就好了。\n\n\n\n## 代码压缩 uglifyJS\n\n这个问题比较大，不过还好可以通过配置来解决。\n\n首先，webpack3 的插件 `uglifyjs-webpack-plugin` 目前只支持 `uglify-js` 2.x 系列。所以必须确保 `uglify-js` 是2.x 版本。\n\n> 就在写这篇文章前 9 天，`uglifyjs-webpack-plugin` 开始支持 `uglify-js` 3.x 系列了。\n\n上面这个解决，下面的问题就好说了。\n\n说先明确下，uglifyJS 默认压缩，不兼容 IE8 的，但是它有一个配置，可以兼容 IE8。\n\n方法描述摘抄如下：\n\n>```\n>--screw-ie8     Use this flag if you don't wish to support\n>                Internet Explorer 6/7/8.\n>                By default UglifyJS will not try to be IE-proof.\n>--support-ie8   Use this flag to support Internet Explorer 6/7/8.\n>                Equivalent to setting `screw_ie8: false` in `minify()`\n>                for `compress`, `mangle` and `output` options.\n>```\n\n意思是说， `--screw-ie8` 开启后，不支持IE6/7/8。但是可以关闭啊。默认是开启的。`--support-ie8` 也行，等同于设置 balabala 很多兼容 IE 的参数。\n\n这里有个坑，那就是：`uglifyjs-webpack-plugin` 不支持 `--support-ie8` 这个参数。[issue 见此](https://github.com/webpack/webpack/issues/3614)\n\n所以换成 `--screw-ie8`  就好了。具体配置如下：\n\n```js\nnew UglifyJSPlugin({\n    compress: {screw_ie8: false},\n    output: {screw_ie8: false},\n    mangle: {\n      screw_ie8: false, \n      except: ['$']\n    },\n    support_ie8: true\n})\n```\n\n就是在 `compress` 中写入 `screw_ie8` 就好了。\n\n**至于网上说的什么 IE8 不能支持混淆啥的，我没发现问题，可以使用混淆。**\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2017/2017-08-05-webpack-uglifyjs-ie8.md","raw":"---\nlayout: post\ntitle: \"webpack uglifyJS 在 IE8 下的兼容处理\"\ndate: 2017-08-05 11:34:00 GMT+0000\ncategories: [前端]\ntags:  [webpack,uglifyjs,ie8]\n---\n\n最近在做组件项目，写 ES6 代码，通过 webpack3 进行打包，中途用 uglifyjs-webpack-plugin 插件进行压缩。\n\n考虑到各个项目都能用得上，所以最终打包格式选择了 `umd`。\n\n<!-- more -->\n\n## 基础处理\n\n首先，IE8 不支持的东西太多了，所以必须用垫片修补下。\n\n由于我确实不了解 `babel-polyfill`，而且组件可能不只这一个，也不可能只在一个项目中去用，看了下 `babel-polyfill` 的引入方式，基本上都是直接放到最终代码中的，在大项目中我认为算是首选。\n\n所以采用了 `shim` + `sham` 的方案，个别功能（比如 `Element.prototype.classList`），采用自己写补丁的方式实现。\n\n最终，在页面这样写：\n\n```html\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\"\n          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Test</title>\n    <!--[if lt IE 9]>\n    <script src=\"../lib/es5-shim.min.js\"></script>\n    <script src=\"../lib/es5-sham.min.js\"></script>\n    <![endif]-->\n    <!--[if lte IE 9]>\n    <script src=\"../lib/ie.min.js\"></script>\n    <![endif]-->\n</head>\n<body>\n  ...\n</body>\n</html>\n```\n\n通过 IE 的注释语法，特定情况下加载特定 JS 来实现。\n\n由于我需要针对 IE9 做一些补丁，所以额外打了一个 ie.min.js 补丁。\n\n这样，大部分ES5 的兼容性问题都可以解决了。\n\n\n\n## webpack\n\n首先说说 webpack，这个网上有人说，webpack1 支持 IE8，从 webpack2 开始不支持了。\n\n具体我没有深究，但是我用 webpack3，是可以实现兼容的。\n\n首先是必须打上面的补丁，让 IE8 支持 ES5，最重要的是 `sham` 也是必须的，主要用来实现 `Object.defineProperty` ，虽然可能稳定性欠佳。\n\nwebpack 打包（`umd` 方式）后，未压缩的代码部分：\n\n```js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Checkbox = function () {\n  function Checkbox(element) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Checkbox);\n  }\n  _createClass(Checkbox, [{\n    key: 'on',\n    value: function on() {    }\n  }]);\n  return Checkbox;\n}();\n```\n\n之后，webpack 采用 defineProperty 进行定义属性，所以才必须打这个补丁。\n\n可能 webpack1 最终打包的方式不同，不需要对 `Object.defineProperty` 打补丁，才有人说 webpack1 才支持 IE8 这种说法。\n\n本身，webpack 不需要做任何兼容处理修改，只需要之前的补丁即可。\n\n#### 小问题\n\n但是，在编译过程中，曾经遇到了一个问题，随后莫名其妙自己没问题了，尚不清楚原因所在。\n\n在上面代码中，有一步 `_classCallCheck(this,Checkbox)`，这个竟然 `throw new TypeError` 了，原本上用 `class Checkbox`，改成了 `function Checkbox(){}`，最后又改回去了，自己就好了。\n\n\n\n## 代码压缩 uglifyJS\n\n这个问题比较大，不过还好可以通过配置来解决。\n\n首先，webpack3 的插件 `uglifyjs-webpack-plugin` 目前只支持 `uglify-js` 2.x 系列。所以必须确保 `uglify-js` 是2.x 版本。\n\n> 就在写这篇文章前 9 天，`uglifyjs-webpack-plugin` 开始支持 `uglify-js` 3.x 系列了。\n\n上面这个解决，下面的问题就好说了。\n\n说先明确下，uglifyJS 默认压缩，不兼容 IE8 的，但是它有一个配置，可以兼容 IE8。\n\n方法描述摘抄如下：\n\n>```\n>--screw-ie8     Use this flag if you don't wish to support\n>                Internet Explorer 6/7/8.\n>                By default UglifyJS will not try to be IE-proof.\n>--support-ie8   Use this flag to support Internet Explorer 6/7/8.\n>                Equivalent to setting `screw_ie8: false` in `minify()`\n>                for `compress`, `mangle` and `output` options.\n>```\n\n意思是说， `--screw-ie8` 开启后，不支持IE6/7/8。但是可以关闭啊。默认是开启的。`--support-ie8` 也行，等同于设置 balabala 很多兼容 IE 的参数。\n\n这里有个坑，那就是：`uglifyjs-webpack-plugin` 不支持 `--support-ie8` 这个参数。[issue 见此](https://github.com/webpack/webpack/issues/3614)\n\n所以换成 `--screw-ie8`  就好了。具体配置如下：\n\n```js\nnew UglifyJSPlugin({\n    compress: {screw_ie8: false},\n    output: {screw_ie8: false},\n    mangle: {\n      screw_ie8: false, \n      except: ['$']\n    },\n    support_ie8: true\n})\n```\n\n就是在 `compress` 中写入 `screw_ie8` 就好了。\n\n**至于网上说的什么 IE8 不能支持混淆啥的，我没发现问题，可以使用混淆。**\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"2017-2017-08-05-webpack-uglifyjs-ie8","published":1,"updated":"2019-07-18T17:19:07.309Z","comments":1,"photos":[],"link":"","_id":"cjy8y72rp002ps21d5gqqzbfv","content":"<p>最近在做组件项目，写 ES6 代码，通过 webpack3 进行打包，中途用 uglifyjs-webpack-plugin 插件进行压缩。</p>\n<p>考虑到各个项目都能用得上，所以最终打包格式选择了 <code>umd</code>。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"基础处理\"><a href=\"#基础处理\" class=\"headerlink\" title=\"基础处理\"></a>基础处理</h2><p>首先，IE8 不支持的东西太多了，所以必须用垫片修补下。</p>\n<p>由于我确实不了解 <code>babel-polyfill</code>，而且组件可能不只这一个，也不可能只在一个项目中去用，看了下 <code>babel-polyfill</code> 的引入方式，基本上都是直接放到最终代码中的，在大项目中我认为算是首选。</p>\n<p>所以采用了 <code>shim</code> + <code>sham</code> 的方案，个别功能（比如 <code>Element.prototype.classList</code>），采用自己写补丁的方式实现。</p>\n<p>最终，在页面这样写：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--[if lt IE 9]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;script src=\"../lib/es5-shim.min.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;script src=\"../lib/es5-sham.min.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;![endif]--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--[if lte IE 9]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;script src=\"../lib/ie.min.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;![endif]--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过 IE 的注释语法，特定情况下加载特定 JS 来实现。</p>\n<p>由于我需要针对 IE9 做一些补丁，所以额外打了一个 ie.min.js 补丁。</p>\n<p>这样，大部分ES5 的兼容性问题都可以解决了。</p>\n<h2 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h2><p>首先说说 webpack，这个网上有人说，webpack1 支持 IE8，从 webpack2 开始不支持了。</p>\n<p>具体我没有深究，但是我用 webpack3，是可以实现兼容的。</p>\n<p>首先是必须打上面的补丁，让 IE8 支持 ES5，最重要的是 <code>sham</code> 也是必须的，主要用来实现 <code>Object.defineProperty</code> ，虽然可能稳定性欠佳。</p>\n<p>webpack 打包（<code>umd</code> 方式）后，未压缩的代码部分：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_classCallCheck</span>(<span class=\"params\">instance, Constructor</span>) </span>&#123; <span class=\"keyword\">if</span> (!(instance <span class=\"keyword\">instanceof</span> Constructor)) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"Cannot call a class as a function\"</span>); &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Checkbox = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Checkbox</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> opts = <span class=\"built_in\">arguments</span>.length &gt; <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>] !== <span class=\"literal\">undefined</span> ? <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>] : &#123;&#125;;</span><br><span class=\"line\">    _classCallCheck(<span class=\"keyword\">this</span>, Checkbox);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _createClass(Checkbox, [&#123;</span><br><span class=\"line\">    key: <span class=\"string\">'on'</span>,</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">on</span>(<span class=\"params\"></span>) </span>&#123;    &#125;</span><br><span class=\"line\">  &#125;]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Checkbox;</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n\n<p>之后，webpack 采用 defineProperty 进行定义属性，所以才必须打这个补丁。</p>\n<p>可能 webpack1 最终打包的方式不同，不需要对 <code>Object.defineProperty</code> 打补丁，才有人说 webpack1 才支持 IE8 这种说法。</p>\n<p>本身，webpack 不需要做任何兼容处理修改，只需要之前的补丁即可。</p>\n<h4 id=\"小问题\"><a href=\"#小问题\" class=\"headerlink\" title=\"小问题\"></a>小问题</h4><p>但是，在编译过程中，曾经遇到了一个问题，随后莫名其妙自己没问题了，尚不清楚原因所在。</p>\n<p>在上面代码中，有一步 <code>_classCallCheck(this,Checkbox)</code>，这个竟然 <code>throw new TypeError</code> 了，原本上用 <code>class Checkbox</code>，改成了 <code>function Checkbox(){}</code>，最后又改回去了，自己就好了。</p>\n<h2 id=\"代码压缩-uglifyJS\"><a href=\"#代码压缩-uglifyJS\" class=\"headerlink\" title=\"代码压缩 uglifyJS\"></a>代码压缩 uglifyJS</h2><p>这个问题比较大，不过还好可以通过配置来解决。</p>\n<p>首先，webpack3 的插件 <code>uglifyjs-webpack-plugin</code> 目前只支持 <code>uglify-js</code> 2.x 系列。所以必须确保 <code>uglify-js</code> 是2.x 版本。</p>\n<blockquote>\n<p>就在写这篇文章前 9 天，<code>uglifyjs-webpack-plugin</code> 开始支持 <code>uglify-js</code> 3.x 系列了。</p>\n</blockquote>\n<p>上面这个解决，下面的问题就好说了。</p>\n<p>说先明确下，uglifyJS 默认压缩，不兼容 IE8 的，但是它有一个配置，可以兼容 IE8。</p>\n<p>方法描述摘抄如下：</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;--screw-ie8     Use this flag if you don&apos;t wish to support</span><br><span class=\"line\">&gt;                Internet Explorer 6/7/8.</span><br><span class=\"line\">&gt;                By default UglifyJS will not try to be IE-proof.</span><br><span class=\"line\">&gt;--support-ie8   Use this flag to support Internet Explorer 6/7/8.</span><br><span class=\"line\">&gt;                Equivalent to setting `screw_ie8: false` in `minify()`</span><br><span class=\"line\">&gt;                for `compress`, `mangle` and `output` options.</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>意思是说， <code>--screw-ie8</code> 开启后，不支持IE6/7/8。但是可以关闭啊。默认是开启的。<code>--support-ie8</code> 也行，等同于设置 balabala 很多兼容 IE 的参数。</p>\n<p>这里有个坑，那就是：<code>uglifyjs-webpack-plugin</code> 不支持 <code>--support-ie8</code> 这个参数。<a href=\"https://github.com/webpack/webpack/issues/3614\" target=\"_blank\" rel=\"noopener\">issue 见此</a></p>\n<p>所以换成 <code>--screw-ie8</code>  就好了。具体配置如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> UglifyJSPlugin(&#123;</span><br><span class=\"line\">    compress: &#123;<span class=\"attr\">screw_ie8</span>: <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">    output: &#123;<span class=\"attr\">screw_ie8</span>: <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">    mangle: &#123;</span><br><span class=\"line\">      screw_ie8: <span class=\"literal\">false</span>, </span><br><span class=\"line\">      except: [<span class=\"string\">'$'</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    support_ie8: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>就是在 <code>compress</code> 中写入 <code>screw_ie8</code> 就好了。</p>\n<p><strong>至于网上说的什么 IE8 不能支持混淆啥的，我没发现问题，可以使用混淆。</strong></p>\n","site":{"data":{}},"excerpt":"<p>最近在做组件项目，写 ES6 代码，通过 webpack3 进行打包，中途用 uglifyjs-webpack-plugin 插件进行压缩。</p>\n<p>考虑到各个项目都能用得上，所以最终打包格式选择了 <code>umd</code>。</p>","more":"<h2 id=\"基础处理\"><a href=\"#基础处理\" class=\"headerlink\" title=\"基础处理\"></a>基础处理</h2><p>首先，IE8 不支持的东西太多了，所以必须用垫片修补下。</p>\n<p>由于我确实不了解 <code>babel-polyfill</code>，而且组件可能不只这一个，也不可能只在一个项目中去用，看了下 <code>babel-polyfill</code> 的引入方式，基本上都是直接放到最终代码中的，在大项目中我认为算是首选。</p>\n<p>所以采用了 <code>shim</code> + <code>sham</code> 的方案，个别功能（比如 <code>Element.prototype.classList</code>），采用自己写补丁的方式实现。</p>\n<p>最终，在页面这样写：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--[if lt IE 9]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;script src=\"../lib/es5-shim.min.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;script src=\"../lib/es5-sham.min.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;![endif]--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--[if lte IE 9]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;script src=\"../lib/ie.min.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;![endif]--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过 IE 的注释语法，特定情况下加载特定 JS 来实现。</p>\n<p>由于我需要针对 IE9 做一些补丁，所以额外打了一个 ie.min.js 补丁。</p>\n<p>这样，大部分ES5 的兼容性问题都可以解决了。</p>\n<h2 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h2><p>首先说说 webpack，这个网上有人说，webpack1 支持 IE8，从 webpack2 开始不支持了。</p>\n<p>具体我没有深究，但是我用 webpack3，是可以实现兼容的。</p>\n<p>首先是必须打上面的补丁，让 IE8 支持 ES5，最重要的是 <code>sham</code> 也是必须的，主要用来实现 <code>Object.defineProperty</code> ，虽然可能稳定性欠佳。</p>\n<p>webpack 打包（<code>umd</code> 方式）后，未压缩的代码部分：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_classCallCheck</span>(<span class=\"params\">instance, Constructor</span>) </span>&#123; <span class=\"keyword\">if</span> (!(instance <span class=\"keyword\">instanceof</span> Constructor)) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"Cannot call a class as a function\"</span>); &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Checkbox = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Checkbox</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> opts = <span class=\"built_in\">arguments</span>.length &gt; <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>] !== <span class=\"literal\">undefined</span> ? <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>] : &#123;&#125;;</span><br><span class=\"line\">    _classCallCheck(<span class=\"keyword\">this</span>, Checkbox);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _createClass(Checkbox, [&#123;</span><br><span class=\"line\">    key: <span class=\"string\">'on'</span>,</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">on</span>(<span class=\"params\"></span>) </span>&#123;    &#125;</span><br><span class=\"line\">  &#125;]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Checkbox;</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n\n<p>之后，webpack 采用 defineProperty 进行定义属性，所以才必须打这个补丁。</p>\n<p>可能 webpack1 最终打包的方式不同，不需要对 <code>Object.defineProperty</code> 打补丁，才有人说 webpack1 才支持 IE8 这种说法。</p>\n<p>本身，webpack 不需要做任何兼容处理修改，只需要之前的补丁即可。</p>\n<h4 id=\"小问题\"><a href=\"#小问题\" class=\"headerlink\" title=\"小问题\"></a>小问题</h4><p>但是，在编译过程中，曾经遇到了一个问题，随后莫名其妙自己没问题了，尚不清楚原因所在。</p>\n<p>在上面代码中，有一步 <code>_classCallCheck(this,Checkbox)</code>，这个竟然 <code>throw new TypeError</code> 了，原本上用 <code>class Checkbox</code>，改成了 <code>function Checkbox(){}</code>，最后又改回去了，自己就好了。</p>\n<h2 id=\"代码压缩-uglifyJS\"><a href=\"#代码压缩-uglifyJS\" class=\"headerlink\" title=\"代码压缩 uglifyJS\"></a>代码压缩 uglifyJS</h2><p>这个问题比较大，不过还好可以通过配置来解决。</p>\n<p>首先，webpack3 的插件 <code>uglifyjs-webpack-plugin</code> 目前只支持 <code>uglify-js</code> 2.x 系列。所以必须确保 <code>uglify-js</code> 是2.x 版本。</p>\n<blockquote>\n<p>就在写这篇文章前 9 天，<code>uglifyjs-webpack-plugin</code> 开始支持 <code>uglify-js</code> 3.x 系列了。</p>\n</blockquote>\n<p>上面这个解决，下面的问题就好说了。</p>\n<p>说先明确下，uglifyJS 默认压缩，不兼容 IE8 的，但是它有一个配置，可以兼容 IE8。</p>\n<p>方法描述摘抄如下：</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;--screw-ie8     Use this flag if you don&apos;t wish to support</span><br><span class=\"line\">&gt;                Internet Explorer 6/7/8.</span><br><span class=\"line\">&gt;                By default UglifyJS will not try to be IE-proof.</span><br><span class=\"line\">&gt;--support-ie8   Use this flag to support Internet Explorer 6/7/8.</span><br><span class=\"line\">&gt;                Equivalent to setting `screw_ie8: false` in `minify()`</span><br><span class=\"line\">&gt;                for `compress`, `mangle` and `output` options.</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>意思是说， <code>--screw-ie8</code> 开启后，不支持IE6/7/8。但是可以关闭啊。默认是开启的。<code>--support-ie8</code> 也行，等同于设置 balabala 很多兼容 IE 的参数。</p>\n<p>这里有个坑，那就是：<code>uglifyjs-webpack-plugin</code> 不支持 <code>--support-ie8</code> 这个参数。<a href=\"https://github.com/webpack/webpack/issues/3614\" target=\"_blank\" rel=\"noopener\">issue 见此</a></p>\n<p>所以换成 <code>--screw-ie8</code>  就好了。具体配置如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> UglifyJSPlugin(&#123;</span><br><span class=\"line\">    compress: &#123;<span class=\"attr\">screw_ie8</span>: <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">    output: &#123;<span class=\"attr\">screw_ie8</span>: <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">    mangle: &#123;</span><br><span class=\"line\">      screw_ie8: <span class=\"literal\">false</span>, </span><br><span class=\"line\">      except: [<span class=\"string\">'$'</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    support_ie8: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>就是在 <code>compress</code> 中写入 <code>screw_ie8</code> 就好了。</p>\n<p><strong>至于网上说的什么 IE8 不能支持混淆啥的，我没发现问题，可以使用混淆。</strong></p>"},{"layout":"post","title":"嵌套结构的处理与渲染","date":"2017-09-21T21:45:00.000Z","_content":"\n公司组件库项目，有个同事做菜单功能，处理迭代弄不好。我写了一个简单的 DEMO，同时放出来参考：\n\n<!-- more -->\n\n> 在这里查看效果 [JSFiddle](https://jsfiddle.net/yukapril/egogr2h1/)\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Test</title>\n    <style>\n        .lv1 {\n            margin: 10px 10px;\n            border: 1px solid #ccc;\n        }\n\n        .lv2 {\n            margin: 10px 20px;\n            border: 1px solid #ccc;\n        }\n\n        .lv3 {\n            margin: 10px 30px;\n            border: 1px solid #ccc;\n        }\n    </style>\n</head>\n<body>\n<div id=\"nav\">\n    <div data-color=\"red\">1</div>\n    <div>\n        <div data-color=\"blue\">2 - 1</div>\n        <div data-color=\"purple\">2 - 2</div>\n        <div data-color=\"black\">2 - 3</div>\n    </div>\n    <div>\n        <div data-color=\"magenta\">3 - 1</div>\n        <div>\n            <div data-color=\"green\">3 - 2 - 1</div>\n            <div data-color=\"brown\">3 - 2 - 2</div>\n        </div>\n    </div>\n</div>\n\n<script>\n  const rootElement = el => {\n    if (typeof el === 'string') {\n      return document.querySelector(el)\n    }\n    return el\n  }\n\n  const AST = root => {\n    const children = (el, lv = 0) => {\n      let color = el.dataset.color || null\n      let text = null\n      let child = el.children\n      if (child.length === 0) text = el.textContent\n      return {\n        color,\n        text,\n        lv: lv,\n        children: Array.prototype.map.call(child, v => children(v, lv + 1))\n      }\n    }\n    return children(root).children\n  }\n\n  const render = list => {\n    const htmlArr = children => {\n      return children.map(child => {\n        let color = child.color\n        let text = child.text\n        let ch = child.children\n        let lv = child.lv\n        if (ch.length > 0) {\n          return `<div class=\"lv${lv}\">${htmlArr(ch)}</div>`\n        } else {\n          return `<div class=\"lv${lv}\" style=\"color:${color}\">${text}</div>`\n        }\n      }).join('')\n    }\n    return htmlArr(list)\n  }\n\n  class Test {\n    constructor (el) {\n      let $el = rootElement(el)\n      let list = AST($el)\n      console.log(list)\n      let html = render(list)\n      console.log(html)\n      $el.innerHTML = html\n    }\n  }\n</script>\n\n<script>\n  new Test('#nav')\n</script>\n</body>\n</html>\n```\n\n\n","source":"_posts/2017/2017-09-21-nesting-element.md","raw":"---\nlayout: post\ntitle: \"嵌套结构的处理与渲染\"\ndate: 2017-09-21 21:45:00 GMT+0000\ncategories: [前端]\ntags:  [js,render]\n---\n\n公司组件库项目，有个同事做菜单功能，处理迭代弄不好。我写了一个简单的 DEMO，同时放出来参考：\n\n<!-- more -->\n\n> 在这里查看效果 [JSFiddle](https://jsfiddle.net/yukapril/egogr2h1/)\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Test</title>\n    <style>\n        .lv1 {\n            margin: 10px 10px;\n            border: 1px solid #ccc;\n        }\n\n        .lv2 {\n            margin: 10px 20px;\n            border: 1px solid #ccc;\n        }\n\n        .lv3 {\n            margin: 10px 30px;\n            border: 1px solid #ccc;\n        }\n    </style>\n</head>\n<body>\n<div id=\"nav\">\n    <div data-color=\"red\">1</div>\n    <div>\n        <div data-color=\"blue\">2 - 1</div>\n        <div data-color=\"purple\">2 - 2</div>\n        <div data-color=\"black\">2 - 3</div>\n    </div>\n    <div>\n        <div data-color=\"magenta\">3 - 1</div>\n        <div>\n            <div data-color=\"green\">3 - 2 - 1</div>\n            <div data-color=\"brown\">3 - 2 - 2</div>\n        </div>\n    </div>\n</div>\n\n<script>\n  const rootElement = el => {\n    if (typeof el === 'string') {\n      return document.querySelector(el)\n    }\n    return el\n  }\n\n  const AST = root => {\n    const children = (el, lv = 0) => {\n      let color = el.dataset.color || null\n      let text = null\n      let child = el.children\n      if (child.length === 0) text = el.textContent\n      return {\n        color,\n        text,\n        lv: lv,\n        children: Array.prototype.map.call(child, v => children(v, lv + 1))\n      }\n    }\n    return children(root).children\n  }\n\n  const render = list => {\n    const htmlArr = children => {\n      return children.map(child => {\n        let color = child.color\n        let text = child.text\n        let ch = child.children\n        let lv = child.lv\n        if (ch.length > 0) {\n          return `<div class=\"lv${lv}\">${htmlArr(ch)}</div>`\n        } else {\n          return `<div class=\"lv${lv}\" style=\"color:${color}\">${text}</div>`\n        }\n      }).join('')\n    }\n    return htmlArr(list)\n  }\n\n  class Test {\n    constructor (el) {\n      let $el = rootElement(el)\n      let list = AST($el)\n      console.log(list)\n      let html = render(list)\n      console.log(html)\n      $el.innerHTML = html\n    }\n  }\n</script>\n\n<script>\n  new Test('#nav')\n</script>\n</body>\n</html>\n```\n\n\n","slug":"2017-2017-09-21-nesting-element","published":1,"updated":"2019-07-18T17:19:07.332Z","comments":1,"photos":[],"link":"","_id":"cjy8y72rq002rs21dbowzoxhp","content":"<p>公司组件库项目，有个同事做菜单功能，处理迭代弄不好。我写了一个简单的 DEMO，同时放出来参考：</p>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>在这里查看效果 <a href=\"https://jsfiddle.net/yukapril/egogr2h1/\" target=\"_blank\" rel=\"noopener\">JSFiddle</a></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">        .lv1 &#123;</span><br><span class=\"line\">            margin: 10px 10px;</span><br><span class=\"line\">            border: 1px solid #ccc;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .lv2 &#123;</span><br><span class=\"line\">            margin: 10px 20px;</span><br><span class=\"line\">            border: 1px solid #ccc;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .lv3 &#123;</span><br><span class=\"line\">            margin: 10px 30px;</span><br><span class=\"line\">            border: 1px solid #ccc;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"nav\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-color</span>=<span class=\"string\">\"red\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-color</span>=<span class=\"string\">\"blue\"</span>&gt;</span>2 - 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-color</span>=<span class=\"string\">\"purple\"</span>&gt;</span>2 - 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-color</span>=<span class=\"string\">\"black\"</span>&gt;</span>2 - 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-color</span>=<span class=\"string\">\"magenta\"</span>&gt;</span>3 - 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-color</span>=<span class=\"string\">\"green\"</span>&gt;</span>3 - 2 - 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-color</span>=<span class=\"string\">\"brown\"</span>&gt;</span>3 - 2 - 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">const</span> rootElement = <span class=\"function\"><span class=\"params\">el</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> el === <span class=\"string\">'string'</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.querySelector(el)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> el</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">const</span> AST = <span class=\"function\"><span class=\"params\">root</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> children = <span class=\"function\">(<span class=\"params\">el, lv = <span class=\"number\">0</span></span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> color = el.dataset.color || <span class=\"literal\">null</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> text = <span class=\"literal\">null</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> child = el.children</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">if</span> (child.length === <span class=\"number\">0</span>) text = el.textContent</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">        color,</span><br><span class=\"line\">        text,</span><br><span class=\"line\">        lv: lv,</span><br><span class=\"line\"><span class=\"javascript\">        children: <span class=\"built_in\">Array</span>.prototype.map.call(child, v =&gt; children(v, lv + <span class=\"number\">1</span>))</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> children(root).children</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">const</span> render = <span class=\"function\"><span class=\"params\">list</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> htmlArr = <span class=\"function\"><span class=\"params\">children</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> children.map(<span class=\"function\"><span class=\"params\">child</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> color = child.color</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> text = child.text</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> ch = child.children</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> lv = child.lv</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (ch.length &gt; <span class=\"number\">0</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">return</span> <span class=\"string\">`&lt;div class=\"lv<span class=\"subst\">$&#123;lv&#125;</span>\"&gt;<span class=\"subst\">$&#123;htmlArr(ch)&#125;</span>&lt;/div&gt;`</span></span></span><br><span class=\"line\"><span class=\"javascript\">        &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">return</span> <span class=\"string\">`&lt;div class=\"lv<span class=\"subst\">$&#123;lv&#125;</span>\" style=\"color:<span class=\"subst\">$&#123;color&#125;</span>\"&gt;<span class=\"subst\">$&#123;text&#125;</span>&lt;/div&gt;`</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">      &#125;).join(<span class=\"string\">''</span>)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> htmlArr(list)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">constructor</span> (el) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> $el = rootElement(el)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> list = AST($el)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(list)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> html = render(list)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(html)</span></span><br><span class=\"line\">      $el.innerHTML = html</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Test(<span class=\"string\">'#nav'</span>)</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>公司组件库项目，有个同事做菜单功能，处理迭代弄不好。我写了一个简单的 DEMO，同时放出来参考：</p>","more":"<blockquote>\n<p>在这里查看效果 <a href=\"https://jsfiddle.net/yukapril/egogr2h1/\" target=\"_blank\" rel=\"noopener\">JSFiddle</a></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">        .lv1 &#123;</span><br><span class=\"line\">            margin: 10px 10px;</span><br><span class=\"line\">            border: 1px solid #ccc;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .lv2 &#123;</span><br><span class=\"line\">            margin: 10px 20px;</span><br><span class=\"line\">            border: 1px solid #ccc;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .lv3 &#123;</span><br><span class=\"line\">            margin: 10px 30px;</span><br><span class=\"line\">            border: 1px solid #ccc;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"nav\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-color</span>=<span class=\"string\">\"red\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-color</span>=<span class=\"string\">\"blue\"</span>&gt;</span>2 - 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-color</span>=<span class=\"string\">\"purple\"</span>&gt;</span>2 - 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-color</span>=<span class=\"string\">\"black\"</span>&gt;</span>2 - 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-color</span>=<span class=\"string\">\"magenta\"</span>&gt;</span>3 - 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-color</span>=<span class=\"string\">\"green\"</span>&gt;</span>3 - 2 - 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-color</span>=<span class=\"string\">\"brown\"</span>&gt;</span>3 - 2 - 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">const</span> rootElement = <span class=\"function\"><span class=\"params\">el</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> el === <span class=\"string\">'string'</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.querySelector(el)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> el</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">const</span> AST = <span class=\"function\"><span class=\"params\">root</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> children = <span class=\"function\">(<span class=\"params\">el, lv = <span class=\"number\">0</span></span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> color = el.dataset.color || <span class=\"literal\">null</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> text = <span class=\"literal\">null</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> child = el.children</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">if</span> (child.length === <span class=\"number\">0</span>) text = el.textContent</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">        color,</span><br><span class=\"line\">        text,</span><br><span class=\"line\">        lv: lv,</span><br><span class=\"line\"><span class=\"javascript\">        children: <span class=\"built_in\">Array</span>.prototype.map.call(child, v =&gt; children(v, lv + <span class=\"number\">1</span>))</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> children(root).children</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">const</span> render = <span class=\"function\"><span class=\"params\">list</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> htmlArr = <span class=\"function\"><span class=\"params\">children</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> children.map(<span class=\"function\"><span class=\"params\">child</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> color = child.color</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> text = child.text</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> ch = child.children</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> lv = child.lv</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (ch.length &gt; <span class=\"number\">0</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">return</span> <span class=\"string\">`&lt;div class=\"lv<span class=\"subst\">$&#123;lv&#125;</span>\"&gt;<span class=\"subst\">$&#123;htmlArr(ch)&#125;</span>&lt;/div&gt;`</span></span></span><br><span class=\"line\"><span class=\"javascript\">        &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">return</span> <span class=\"string\">`&lt;div class=\"lv<span class=\"subst\">$&#123;lv&#125;</span>\" style=\"color:<span class=\"subst\">$&#123;color&#125;</span>\"&gt;<span class=\"subst\">$&#123;text&#125;</span>&lt;/div&gt;`</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">      &#125;).join(<span class=\"string\">''</span>)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> htmlArr(list)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">constructor</span> (el) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> $el = rootElement(el)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> list = AST($el)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(list)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> html = render(list)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(html)</span></span><br><span class=\"line\">      $el.innerHTML = html</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Test(<span class=\"string\">'#nav'</span>)</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"Objective-C 学习（二）- NSDictionary NSSet 类型转换 NSData NSError","date":"2017-10-08T18:03:00.000Z","_content":"\n记录学习过程，做好笔记。\n\n<!-- more -->\n\n## NSDictionary\n\n#### 创建\n\n```objective-c\nNSDictionary *dic1 = @{@\"apple\": @1.5, @\"banana\": @1.2};\nNSDictionary<NSString *, NSNumber *> *dic2 = [NSDictionary dictionaryWithObjectsAndKeys:@1.5, @\"apple\", @1.2, @\"banana\", nil];s\n```\n\n#### 读取\n\n```objective-c\nfor (id key in dic1.allKeys) {\n  id v = dic1[key];\n  // id v = [dic1 objectForKey:key];\n  NSLog(@\"<1>key:%@, value:%@\", key, v);\n}\nfor (NSString *key in dic2.allKeys) {\n  NSNumber *v = dic1[key];\n  NSLog(@\"<2>key:%@, value:%@\", key, v);\n}\n\nfor (id key in dic1.allKeys) {\n  id v = dic1[key];\n  // id v = [dic1 objectForKey:key];\n  NSLog(@\"<1>key:%@, value:%@\", key, v);\n}\nfor (NSString *key in dic2.allKeys) {\n  NSNumber *v = dic1[key];\n  NSLog(@\"<2>key:%@, value:%@\", key, v);\n}\n```\n\n#### 转换\n\n```objective-c\nNSArray *keys = dic2.allKeys;\nNSArray *values = dic2.allValues;\nNSLog(@\"keys: %@\", keys);\nNSLog(@\"values: %@\", values);\n```\n\n#### 写入读取\n\n```objective-c\nNSMutableDictionary *dicm1 = [NSMutableDictionary dictionaryWithObjectsAndKeys:@1.5, @\"apple\", nil];\n// [dicm1 setObject:@1.2 forKey:@\"banana\"];\ndicm1[@\"banana\"] = @1.2;\nNSLog(@\"dicm1: %@\", dicm1);\n```\n\n## NSSet\n\n#### 创建读取\n\n```objective-c\nNSSet *set1 = [NSSet setWithObjects:@1, @2, @3, @4, @1, nil];\nNSLog(@\"set1: %@\", set1);\nfor (NSNumber *n in set1) {\n  NSLog(@\"set1 value: %@\", n);\n}\n\nNSMutableSet *setu1 = [NSMutableSet setWithObjects:@1, @2, @3, @4, nil];\n[setu1 removeObject:@4];\n[setu1 addObject:@5];\nNSLog(@\"setu1: %@\", setu1);\n```\n\n## 类型转换\n\n#### NSString <==> NSNumber\n\n```objective-c\nNSString *ageStr1 = @\"18\";\nNSNumber *age1 = @([ageStr1 integerValue]);\n\nNSNumber *age2 = @19;\nNSString *ageStr2 = [age2 stringValue];\n```\n\n#### NSString <==> NSArray\n\n```objective-c\nNSString *names = @\"apple,banana\";\nNSArray *nameArr = [names componentsSeparatedByString:@\",\"];\nNSLog(@\"%@\", nameArr);\n\nNSArray *arr = @[@\"apple\",@\"banana\"];\nNSString *arrStr = [arr componentsJoinedByString:@\"-\"];\nNSLog(@\"%@\", arrStr);\n```\n\n#### NSArray <==> NSSet\n\n```objective-c\nNSArray *arr = @[@\"apple\", @\"banana\", @\"apple\", @\"orange\"];\nNSSet *set = [NSSet setWithArray:arr];\nNSLog(@\"set %@\", set);\n\nNSSet *set2 = [NSSet setWithObjects:@\"orange\", @\"banana\", @\"apple\", nil];\nNSMutableArray *arrm2 = [NSMutableArray array];\nfor (id value in set2) {\n  [arrm2 addObject:value];\n}\nNSLog(@\"arrm2: %@\", arrm2);\n```\n\n#### NSArray <==> NSDictionary\n\n```objective-c\nNSArray *arr1 = @[@\"apple\", @\"banana\"];\nNSArray *arr2 = @[@1.5, @1.2];\nNSDictionary *dic = [NSDictionary dictionaryWithObjects:arr2 forKeys:arr1];\nNSLog(@\"%@\", dic);\n\nNSDictionary *dic2 = @{@\"apple\": @1.5, @\"banana\": @1.2};\nNSArray *arr3 = dic2.allKeys;\nNSArray *arr4 = dic2.allValues;\n```\n\n## NSData\n\n```objective-c\nNSString *str = @\"apple\";\nNSData *data = [str dataUsingEncoding:NSUTF8StringEncoding];\nNSLog(@\"%@\", data);\n\nNSString *str2 = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\nNSLog(@\"%@\", str2);\n```\n\n## NSError\n\n```objective-c\n#import <Foundation/Foundation.h>\n\ntypedef NS_ENUM(NSUInteger, CheckError) {\n    CheckErrorTooMax = 1\n};\n\nNSError *check(NSArray *arr) {\n    for (NSNumber *v in arr) {\n        int r = [v compare:@10];\n        NSLog(@\"value:%@, result:%i\", v, r);\n        if ([v compare:@10] == 1) {\n            NSDictionary *userInfo = @{@\"number\": v};\n            return [NSError errorWithDomain:@\"check failed\" code:CheckErrorTooMax userInfo:userInfo];\n        }\n    }\n    return nil;\n}\n\nint main(int argc, const char *argv[]) {\n    @autoreleasepool {\n        NSArray *arr = @[@1, @4, @7, @9, @12];\n        NSError *err = check(arr);\n        NSLog(@\"%@\", err);\n    }\n    return 0;\n}\n```","source":"_posts/2017/2017-10-08-objective-c-2.md","raw":"---\nlayout: post\ntitle: \"Objective-C 学习（二）- NSDictionary NSSet 类型转换 NSData NSError\"\ndate: 2017-10-08 18:03:00 GMT+0000\ncategories: [代码]\ntags:  [Objective-C]\n---\n\n记录学习过程，做好笔记。\n\n<!-- more -->\n\n## NSDictionary\n\n#### 创建\n\n```objective-c\nNSDictionary *dic1 = @{@\"apple\": @1.5, @\"banana\": @1.2};\nNSDictionary<NSString *, NSNumber *> *dic2 = [NSDictionary dictionaryWithObjectsAndKeys:@1.5, @\"apple\", @1.2, @\"banana\", nil];s\n```\n\n#### 读取\n\n```objective-c\nfor (id key in dic1.allKeys) {\n  id v = dic1[key];\n  // id v = [dic1 objectForKey:key];\n  NSLog(@\"<1>key:%@, value:%@\", key, v);\n}\nfor (NSString *key in dic2.allKeys) {\n  NSNumber *v = dic1[key];\n  NSLog(@\"<2>key:%@, value:%@\", key, v);\n}\n\nfor (id key in dic1.allKeys) {\n  id v = dic1[key];\n  // id v = [dic1 objectForKey:key];\n  NSLog(@\"<1>key:%@, value:%@\", key, v);\n}\nfor (NSString *key in dic2.allKeys) {\n  NSNumber *v = dic1[key];\n  NSLog(@\"<2>key:%@, value:%@\", key, v);\n}\n```\n\n#### 转换\n\n```objective-c\nNSArray *keys = dic2.allKeys;\nNSArray *values = dic2.allValues;\nNSLog(@\"keys: %@\", keys);\nNSLog(@\"values: %@\", values);\n```\n\n#### 写入读取\n\n```objective-c\nNSMutableDictionary *dicm1 = [NSMutableDictionary dictionaryWithObjectsAndKeys:@1.5, @\"apple\", nil];\n// [dicm1 setObject:@1.2 forKey:@\"banana\"];\ndicm1[@\"banana\"] = @1.2;\nNSLog(@\"dicm1: %@\", dicm1);\n```\n\n## NSSet\n\n#### 创建读取\n\n```objective-c\nNSSet *set1 = [NSSet setWithObjects:@1, @2, @3, @4, @1, nil];\nNSLog(@\"set1: %@\", set1);\nfor (NSNumber *n in set1) {\n  NSLog(@\"set1 value: %@\", n);\n}\n\nNSMutableSet *setu1 = [NSMutableSet setWithObjects:@1, @2, @3, @4, nil];\n[setu1 removeObject:@4];\n[setu1 addObject:@5];\nNSLog(@\"setu1: %@\", setu1);\n```\n\n## 类型转换\n\n#### NSString <==> NSNumber\n\n```objective-c\nNSString *ageStr1 = @\"18\";\nNSNumber *age1 = @([ageStr1 integerValue]);\n\nNSNumber *age2 = @19;\nNSString *ageStr2 = [age2 stringValue];\n```\n\n#### NSString <==> NSArray\n\n```objective-c\nNSString *names = @\"apple,banana\";\nNSArray *nameArr = [names componentsSeparatedByString:@\",\"];\nNSLog(@\"%@\", nameArr);\n\nNSArray *arr = @[@\"apple\",@\"banana\"];\nNSString *arrStr = [arr componentsJoinedByString:@\"-\"];\nNSLog(@\"%@\", arrStr);\n```\n\n#### NSArray <==> NSSet\n\n```objective-c\nNSArray *arr = @[@\"apple\", @\"banana\", @\"apple\", @\"orange\"];\nNSSet *set = [NSSet setWithArray:arr];\nNSLog(@\"set %@\", set);\n\nNSSet *set2 = [NSSet setWithObjects:@\"orange\", @\"banana\", @\"apple\", nil];\nNSMutableArray *arrm2 = [NSMutableArray array];\nfor (id value in set2) {\n  [arrm2 addObject:value];\n}\nNSLog(@\"arrm2: %@\", arrm2);\n```\n\n#### NSArray <==> NSDictionary\n\n```objective-c\nNSArray *arr1 = @[@\"apple\", @\"banana\"];\nNSArray *arr2 = @[@1.5, @1.2];\nNSDictionary *dic = [NSDictionary dictionaryWithObjects:arr2 forKeys:arr1];\nNSLog(@\"%@\", dic);\n\nNSDictionary *dic2 = @{@\"apple\": @1.5, @\"banana\": @1.2};\nNSArray *arr3 = dic2.allKeys;\nNSArray *arr4 = dic2.allValues;\n```\n\n## NSData\n\n```objective-c\nNSString *str = @\"apple\";\nNSData *data = [str dataUsingEncoding:NSUTF8StringEncoding];\nNSLog(@\"%@\", data);\n\nNSString *str2 = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\nNSLog(@\"%@\", str2);\n```\n\n## NSError\n\n```objective-c\n#import <Foundation/Foundation.h>\n\ntypedef NS_ENUM(NSUInteger, CheckError) {\n    CheckErrorTooMax = 1\n};\n\nNSError *check(NSArray *arr) {\n    for (NSNumber *v in arr) {\n        int r = [v compare:@10];\n        NSLog(@\"value:%@, result:%i\", v, r);\n        if ([v compare:@10] == 1) {\n            NSDictionary *userInfo = @{@\"number\": v};\n            return [NSError errorWithDomain:@\"check failed\" code:CheckErrorTooMax userInfo:userInfo];\n        }\n    }\n    return nil;\n}\n\nint main(int argc, const char *argv[]) {\n    @autoreleasepool {\n        NSArray *arr = @[@1, @4, @7, @9, @12];\n        NSError *err = check(arr);\n        NSLog(@\"%@\", err);\n    }\n    return 0;\n}\n```","slug":"2017-2017-10-08-objective-c-2","published":1,"updated":"2019-07-18T17:19:06.993Z","comments":1,"photos":[],"link":"","_id":"cjy8y72rs002vs21d8apvyt0h","content":"<p>记录学习过程，做好笔记。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"NSDictionary\"><a href=\"#NSDictionary\" class=\"headerlink\" title=\"NSDictionary\"></a>NSDictionary</h2><h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSDictionary *dic1 = @&#123;@&quot;apple&quot;: @1.5, @&quot;banana&quot;: @1.2&#125;;</span><br><span class=\"line\">NSDictionary&lt;NSString *, NSNumber *&gt; *dic2 = [NSDictionary dictionaryWithObjectsAndKeys:@1.5, @&quot;apple&quot;, @1.2, @&quot;banana&quot;, nil];s</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"读取\"><a href=\"#读取\" class=\"headerlink\" title=\"读取\"></a>读取</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (id key in dic1.allKeys) &#123;</span><br><span class=\"line\">  id v = dic1[key];</span><br><span class=\"line\">  // id v = [dic1 objectForKey:key];</span><br><span class=\"line\">  NSLog(@&quot;&lt;1&gt;key:%@, value:%@&quot;, key, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for (NSString *key in dic2.allKeys) &#123;</span><br><span class=\"line\">  NSNumber *v = dic1[key];</span><br><span class=\"line\">  NSLog(@&quot;&lt;2&gt;key:%@, value:%@&quot;, key, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">for (id key in dic1.allKeys) &#123;</span><br><span class=\"line\">  id v = dic1[key];</span><br><span class=\"line\">  // id v = [dic1 objectForKey:key];</span><br><span class=\"line\">  NSLog(@&quot;&lt;1&gt;key:%@, value:%@&quot;, key, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for (NSString *key in dic2.allKeys) &#123;</span><br><span class=\"line\">  NSNumber *v = dic1[key];</span><br><span class=\"line\">  NSLog(@&quot;&lt;2&gt;key:%@, value:%@&quot;, key, v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"转换\"><a href=\"#转换\" class=\"headerlink\" title=\"转换\"></a>转换</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray *keys = dic2.allKeys;</span><br><span class=\"line\">NSArray *values = dic2.allValues;</span><br><span class=\"line\">NSLog(@&quot;keys: %@&quot;, keys);</span><br><span class=\"line\">NSLog(@&quot;values: %@&quot;, values);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"写入读取\"><a href=\"#写入读取\" class=\"headerlink\" title=\"写入读取\"></a>写入读取</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableDictionary *dicm1 = [NSMutableDictionary dictionaryWithObjectsAndKeys:@1.5, @&quot;apple&quot;, nil];</span><br><span class=\"line\">// [dicm1 setObject:@1.2 forKey:@&quot;banana&quot;];</span><br><span class=\"line\">dicm1[@&quot;banana&quot;] = @1.2;</span><br><span class=\"line\">NSLog(@&quot;dicm1: %@&quot;, dicm1);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NSSet\"><a href=\"#NSSet\" class=\"headerlink\" title=\"NSSet\"></a>NSSet</h2><h4 id=\"创建读取\"><a href=\"#创建读取\" class=\"headerlink\" title=\"创建读取\"></a>创建读取</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSSet *set1 = [NSSet setWithObjects:@1, @2, @3, @4, @1, nil];</span><br><span class=\"line\">NSLog(@&quot;set1: %@&quot;, set1);</span><br><span class=\"line\">for (NSNumber *n in set1) &#123;</span><br><span class=\"line\">  NSLog(@&quot;set1 value: %@&quot;, n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NSMutableSet *setu1 = [NSMutableSet setWithObjects:@1, @2, @3, @4, nil];</span><br><span class=\"line\">[setu1 removeObject:@4];</span><br><span class=\"line\">[setu1 addObject:@5];</span><br><span class=\"line\">NSLog(@&quot;setu1: %@&quot;, setu1);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><h4 id=\"NSString-lt-gt-NSNumber\"><a href=\"#NSString-lt-gt-NSNumber\" class=\"headerlink\" title=\"NSString &lt;==&gt; NSNumber\"></a>NSString &lt;==&gt; NSNumber</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *ageStr1 = @&quot;18&quot;;</span><br><span class=\"line\">NSNumber *age1 = @([ageStr1 integerValue]);</span><br><span class=\"line\"></span><br><span class=\"line\">NSNumber *age2 = @19;</span><br><span class=\"line\">NSString *ageStr2 = [age2 stringValue];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"NSString-lt-gt-NSArray\"><a href=\"#NSString-lt-gt-NSArray\" class=\"headerlink\" title=\"NSString &lt;==&gt; NSArray\"></a>NSString &lt;==&gt; NSArray</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *names = @&quot;apple,banana&quot;;</span><br><span class=\"line\">NSArray *nameArr = [names componentsSeparatedByString:@&quot;,&quot;];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, nameArr);</span><br><span class=\"line\"></span><br><span class=\"line\">NSArray *arr = @[@&quot;apple&quot;,@&quot;banana&quot;];</span><br><span class=\"line\">NSString *arrStr = [arr componentsJoinedByString:@&quot;-&quot;];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, arrStr);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"NSArray-lt-gt-NSSet\"><a href=\"#NSArray-lt-gt-NSSet\" class=\"headerlink\" title=\"NSArray &lt;==&gt; NSSet\"></a>NSArray &lt;==&gt; NSSet</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray *arr = @[@&quot;apple&quot;, @&quot;banana&quot;, @&quot;apple&quot;, @&quot;orange&quot;];</span><br><span class=\"line\">NSSet *set = [NSSet setWithArray:arr];</span><br><span class=\"line\">NSLog(@&quot;set %@&quot;, set);</span><br><span class=\"line\"></span><br><span class=\"line\">NSSet *set2 = [NSSet setWithObjects:@&quot;orange&quot;, @&quot;banana&quot;, @&quot;apple&quot;, nil];</span><br><span class=\"line\">NSMutableArray *arrm2 = [NSMutableArray array];</span><br><span class=\"line\">for (id value in set2) &#123;</span><br><span class=\"line\">  [arrm2 addObject:value];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">NSLog(@&quot;arrm2: %@&quot;, arrm2);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"NSArray-lt-gt-NSDictionary\"><a href=\"#NSArray-lt-gt-NSDictionary\" class=\"headerlink\" title=\"NSArray &lt;==&gt; NSDictionary\"></a>NSArray &lt;==&gt; NSDictionary</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray *arr1 = @[@&quot;apple&quot;, @&quot;banana&quot;];</span><br><span class=\"line\">NSArray *arr2 = @[@1.5, @1.2];</span><br><span class=\"line\">NSDictionary *dic = [NSDictionary dictionaryWithObjects:arr2 forKeys:arr1];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, dic);</span><br><span class=\"line\"></span><br><span class=\"line\">NSDictionary *dic2 = @&#123;@&quot;apple&quot;: @1.5, @&quot;banana&quot;: @1.2&#125;;</span><br><span class=\"line\">NSArray *arr3 = dic2.allKeys;</span><br><span class=\"line\">NSArray *arr4 = dic2.allValues;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NSData\"><a href=\"#NSData\" class=\"headerlink\" title=\"NSData\"></a>NSData</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str = @&quot;apple&quot;;</span><br><span class=\"line\">NSData *data = [str dataUsingEncoding:NSUTF8StringEncoding];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, data);</span><br><span class=\"line\"></span><br><span class=\"line\">NSString *str2 = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, str2);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NSError\"><a href=\"#NSError\" class=\"headerlink\" title=\"NSError\"></a>NSError</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef NS_ENUM(NSUInteger, CheckError) &#123;</span><br><span class=\"line\">    CheckErrorTooMax = 1</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">NSError *check(NSArray *arr) &#123;</span><br><span class=\"line\">    for (NSNumber *v in arr) &#123;</span><br><span class=\"line\">        int r = [v compare:@10];</span><br><span class=\"line\">        NSLog(@&quot;value:%@, result:%i&quot;, v, r);</span><br><span class=\"line\">        if ([v compare:@10] == 1) &#123;</span><br><span class=\"line\">            NSDictionary *userInfo = @&#123;@&quot;number&quot;: v&#125;;</span><br><span class=\"line\">            return [NSError errorWithDomain:@&quot;check failed&quot; code:CheckErrorTooMax userInfo:userInfo];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return nil;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, const char *argv[]) &#123;</span><br><span class=\"line\">    @autoreleasepool &#123;</span><br><span class=\"line\">        NSArray *arr = @[@1, @4, @7, @9, @12];</span><br><span class=\"line\">        NSError *err = check(arr);</span><br><span class=\"line\">        NSLog(@&quot;%@&quot;, err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>记录学习过程，做好笔记。</p>","more":"<h2 id=\"NSDictionary\"><a href=\"#NSDictionary\" class=\"headerlink\" title=\"NSDictionary\"></a>NSDictionary</h2><h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSDictionary *dic1 = @&#123;@&quot;apple&quot;: @1.5, @&quot;banana&quot;: @1.2&#125;;</span><br><span class=\"line\">NSDictionary&lt;NSString *, NSNumber *&gt; *dic2 = [NSDictionary dictionaryWithObjectsAndKeys:@1.5, @&quot;apple&quot;, @1.2, @&quot;banana&quot;, nil];s</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"读取\"><a href=\"#读取\" class=\"headerlink\" title=\"读取\"></a>读取</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (id key in dic1.allKeys) &#123;</span><br><span class=\"line\">  id v = dic1[key];</span><br><span class=\"line\">  // id v = [dic1 objectForKey:key];</span><br><span class=\"line\">  NSLog(@&quot;&lt;1&gt;key:%@, value:%@&quot;, key, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for (NSString *key in dic2.allKeys) &#123;</span><br><span class=\"line\">  NSNumber *v = dic1[key];</span><br><span class=\"line\">  NSLog(@&quot;&lt;2&gt;key:%@, value:%@&quot;, key, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">for (id key in dic1.allKeys) &#123;</span><br><span class=\"line\">  id v = dic1[key];</span><br><span class=\"line\">  // id v = [dic1 objectForKey:key];</span><br><span class=\"line\">  NSLog(@&quot;&lt;1&gt;key:%@, value:%@&quot;, key, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for (NSString *key in dic2.allKeys) &#123;</span><br><span class=\"line\">  NSNumber *v = dic1[key];</span><br><span class=\"line\">  NSLog(@&quot;&lt;2&gt;key:%@, value:%@&quot;, key, v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"转换\"><a href=\"#转换\" class=\"headerlink\" title=\"转换\"></a>转换</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray *keys = dic2.allKeys;</span><br><span class=\"line\">NSArray *values = dic2.allValues;</span><br><span class=\"line\">NSLog(@&quot;keys: %@&quot;, keys);</span><br><span class=\"line\">NSLog(@&quot;values: %@&quot;, values);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"写入读取\"><a href=\"#写入读取\" class=\"headerlink\" title=\"写入读取\"></a>写入读取</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableDictionary *dicm1 = [NSMutableDictionary dictionaryWithObjectsAndKeys:@1.5, @&quot;apple&quot;, nil];</span><br><span class=\"line\">// [dicm1 setObject:@1.2 forKey:@&quot;banana&quot;];</span><br><span class=\"line\">dicm1[@&quot;banana&quot;] = @1.2;</span><br><span class=\"line\">NSLog(@&quot;dicm1: %@&quot;, dicm1);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NSSet\"><a href=\"#NSSet\" class=\"headerlink\" title=\"NSSet\"></a>NSSet</h2><h4 id=\"创建读取\"><a href=\"#创建读取\" class=\"headerlink\" title=\"创建读取\"></a>创建读取</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSSet *set1 = [NSSet setWithObjects:@1, @2, @3, @4, @1, nil];</span><br><span class=\"line\">NSLog(@&quot;set1: %@&quot;, set1);</span><br><span class=\"line\">for (NSNumber *n in set1) &#123;</span><br><span class=\"line\">  NSLog(@&quot;set1 value: %@&quot;, n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NSMutableSet *setu1 = [NSMutableSet setWithObjects:@1, @2, @3, @4, nil];</span><br><span class=\"line\">[setu1 removeObject:@4];</span><br><span class=\"line\">[setu1 addObject:@5];</span><br><span class=\"line\">NSLog(@&quot;setu1: %@&quot;, setu1);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><h4 id=\"NSString-lt-gt-NSNumber\"><a href=\"#NSString-lt-gt-NSNumber\" class=\"headerlink\" title=\"NSString &lt;==&gt; NSNumber\"></a>NSString &lt;==&gt; NSNumber</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *ageStr1 = @&quot;18&quot;;</span><br><span class=\"line\">NSNumber *age1 = @([ageStr1 integerValue]);</span><br><span class=\"line\"></span><br><span class=\"line\">NSNumber *age2 = @19;</span><br><span class=\"line\">NSString *ageStr2 = [age2 stringValue];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"NSString-lt-gt-NSArray\"><a href=\"#NSString-lt-gt-NSArray\" class=\"headerlink\" title=\"NSString &lt;==&gt; NSArray\"></a>NSString &lt;==&gt; NSArray</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *names = @&quot;apple,banana&quot;;</span><br><span class=\"line\">NSArray *nameArr = [names componentsSeparatedByString:@&quot;,&quot;];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, nameArr);</span><br><span class=\"line\"></span><br><span class=\"line\">NSArray *arr = @[@&quot;apple&quot;,@&quot;banana&quot;];</span><br><span class=\"line\">NSString *arrStr = [arr componentsJoinedByString:@&quot;-&quot;];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, arrStr);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"NSArray-lt-gt-NSSet\"><a href=\"#NSArray-lt-gt-NSSet\" class=\"headerlink\" title=\"NSArray &lt;==&gt; NSSet\"></a>NSArray &lt;==&gt; NSSet</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray *arr = @[@&quot;apple&quot;, @&quot;banana&quot;, @&quot;apple&quot;, @&quot;orange&quot;];</span><br><span class=\"line\">NSSet *set = [NSSet setWithArray:arr];</span><br><span class=\"line\">NSLog(@&quot;set %@&quot;, set);</span><br><span class=\"line\"></span><br><span class=\"line\">NSSet *set2 = [NSSet setWithObjects:@&quot;orange&quot;, @&quot;banana&quot;, @&quot;apple&quot;, nil];</span><br><span class=\"line\">NSMutableArray *arrm2 = [NSMutableArray array];</span><br><span class=\"line\">for (id value in set2) &#123;</span><br><span class=\"line\">  [arrm2 addObject:value];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">NSLog(@&quot;arrm2: %@&quot;, arrm2);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"NSArray-lt-gt-NSDictionary\"><a href=\"#NSArray-lt-gt-NSDictionary\" class=\"headerlink\" title=\"NSArray &lt;==&gt; NSDictionary\"></a>NSArray &lt;==&gt; NSDictionary</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray *arr1 = @[@&quot;apple&quot;, @&quot;banana&quot;];</span><br><span class=\"line\">NSArray *arr2 = @[@1.5, @1.2];</span><br><span class=\"line\">NSDictionary *dic = [NSDictionary dictionaryWithObjects:arr2 forKeys:arr1];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, dic);</span><br><span class=\"line\"></span><br><span class=\"line\">NSDictionary *dic2 = @&#123;@&quot;apple&quot;: @1.5, @&quot;banana&quot;: @1.2&#125;;</span><br><span class=\"line\">NSArray *arr3 = dic2.allKeys;</span><br><span class=\"line\">NSArray *arr4 = dic2.allValues;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NSData\"><a href=\"#NSData\" class=\"headerlink\" title=\"NSData\"></a>NSData</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str = @&quot;apple&quot;;</span><br><span class=\"line\">NSData *data = [str dataUsingEncoding:NSUTF8StringEncoding];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, data);</span><br><span class=\"line\"></span><br><span class=\"line\">NSString *str2 = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, str2);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NSError\"><a href=\"#NSError\" class=\"headerlink\" title=\"NSError\"></a>NSError</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef NS_ENUM(NSUInteger, CheckError) &#123;</span><br><span class=\"line\">    CheckErrorTooMax = 1</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">NSError *check(NSArray *arr) &#123;</span><br><span class=\"line\">    for (NSNumber *v in arr) &#123;</span><br><span class=\"line\">        int r = [v compare:@10];</span><br><span class=\"line\">        NSLog(@&quot;value:%@, result:%i&quot;, v, r);</span><br><span class=\"line\">        if ([v compare:@10] == 1) &#123;</span><br><span class=\"line\">            NSDictionary *userInfo = @&#123;@&quot;number&quot;: v&#125;;</span><br><span class=\"line\">            return [NSError errorWithDomain:@&quot;check failed&quot; code:CheckErrorTooMax userInfo:userInfo];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return nil;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, const char *argv[]) &#123;</span><br><span class=\"line\">    @autoreleasepool &#123;</span><br><span class=\"line\">        NSArray *arr = @[@1, @4, @7, @9, @12];</span><br><span class=\"line\">        NSError *err = check(arr);</span><br><span class=\"line\">        NSLog(@&quot;%@&quot;, err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"Objective-C 学习（一）- 字符串 数字 数组 NSIndexSet","date":"2017-10-03T23:35:00.000Z","_content":"\n记录学习过程，做好笔记。\n\n<!-- more -->\n\n## 字符串\n\n#### 创建\n\n```objective-c\n// 直接创建\nNSString *str1 = @\"test\";\n\n// 从C字符串创建\nNSString *str21 = [[NSString alloc] initWithUTF8String:\"hello\"];\nNSString *str22 = [NSString stringWithUTF8String:\"hello\"];\n\n// 格式化创建\nNSString *str31 = [[NSString alloc] initWithFormat:@\"hello %@\", @\"world\"];\nNSString *str32 = [NSString stringWithFormat:@\"hello %@\", @\"world\"];\n```\n\n#### 比较\n\n```objective-c\nNSString *str41 = @\"abc\";\nNSString *str42 = @\"bcd\";\n// 直接比较\nBOOL result41 = [str41 isEqualToString:str42];\n// 忽略大小写比较\nBOOL result42 = [str41 compare:str42 options:NSCaseInsensitiveSearch] == 0;\n```\n\n#### 获取长度\n\n```objective-c\nNSString *str5 = @\"abcde\";\nNSUInteger length5 = str5.length;\nNSLog(@\"len: %lu\", (unsigned long)length5);\n```\n\n#### 查找替换\n\n```objective-c\nNSString *str6 = @\"abcdxyzabcd\";\nNSRange range6 = [str6 rangeOfString:@\"xyz\"];\nif (range6.location == NSNotFound) {\n  NSLog(@\"not found!\");\n} else {\n  NSLog(@\"location: %ld, length:%ld\", range6.location, range6.length);\n}\n```\n\n#### 修改原文\n\n```objective-c\nNSString *str71 = @\"hello world\";\nstr71 = [str71 stringByReplacingOccurrencesOfString:@\"world\" withString:@\"yukapril\"];\nNSLog(@\"%@\", str71);\nNSMutableString *str72 = [NSMutableString stringWithUTF8String:\"hello world\"];\n[str72 appendString:@\"!\"];\nNSLog(@\"%@\", str72);\n```\n\n## 数字\n\n#### 转换\n\n```objective-c\nNSNumber *num1 = @(100);\nNSInteger int1 = [num1 integerValue];\n```\n\n## 数组\n\n#### 创建和读取\n\n```objective-c\nNSArray<NSString *> *arr1 = @[@\"a\", @\"b\"];\nNSString *arr1Temp = arr1[1];\nNSLog(@\"%@\", arr1Temp);\n\nNSInteger arr2Temp = 10;\nNSArray<NSNumber *> *arr2 = @[@1, @2, @3, @(arr2Temp)];\nfor (NSNumber *v in arr2) {\n  NSLog(@\"arr2: %@\", v);\n}\n\nNSArray <id> *arr3 = @[@\"a\", @1, @(YES)];\nfor (id v in arr3) {\n  NSLog(@\"arr3:%@\", v);\n}\n\nNSArray *arr4 = [[NSArray alloc] initWithObjects:@1, @2, @3, [NSNull null], @5, nil];\nfor (id v in arr4) {\n  NSLog(@\"arr4:%@\", v);\n}\n\nNSNumber *valueFirst = arr4.firstObject;\nNSNumber *valueLast = arr4.lastObject;\nNSLog(@\"valueFirst:%@, valueLast: %@\", valueFirst, valueLast);\nif ([arr4 count] >= 4) {\n  NSLog(@\"someValue:%@\", arr4[3]);\n}\n```\n\n#### 查找\n\n```objective-c\nNSArray<NSString *> *arr5 = @[@\"a\", @\"b\"];\nNSUInteger index5 = [arr5 indexOfObject:@\"b\"];\nNSLog(@\"index5:%@, count5:%@\", @(index5), @([arr5 count]));\n```\n\n#### 替换\n\n```objective-c\nNSMutableArray *arr6 = [@[@\"a\", @\"b\", @\"c\"] mutableCopy];\n// NSMutableArray *arr6 = [[NSMutableArray alloc] initWithObjects:@\"a\", @\"b\", @\"c\", nil];\n[arr6 addObject:@\"d\"];\n[arr6 removeLastObject];\n[arr6 removeObject:@\"c\"];\nNSLog(@\"%@\", arr6);\n```\n\n## NSIndexSet\n\n```objective-c\nNSMutableArray *arr = [@[@1, @2, @3, @4, @5] mutableCopy];\nNSMutableIndexSet *indexSet = [NSMutableIndexSet indexSetWithIndex:1];\n[indexSet addIndexesInRange:NSMakeRange(3, 2)];\n[arr removeObjectsAtIndexes:indexSet];\nNSLog(@\"NSIndexSet %@\", arr);\n```\n","source":"_posts/2017/2017-10-03-objective-c.md","raw":"---\nlayout: post\ntitle: \"Objective-C 学习（一）- 字符串 数字 数组 NSIndexSet\"\ndate: 2017-10-03 23:35:00 GMT+0000\ncategories: [代码]\ntags:  [Objective-C]\n---\n\n记录学习过程，做好笔记。\n\n<!-- more -->\n\n## 字符串\n\n#### 创建\n\n```objective-c\n// 直接创建\nNSString *str1 = @\"test\";\n\n// 从C字符串创建\nNSString *str21 = [[NSString alloc] initWithUTF8String:\"hello\"];\nNSString *str22 = [NSString stringWithUTF8String:\"hello\"];\n\n// 格式化创建\nNSString *str31 = [[NSString alloc] initWithFormat:@\"hello %@\", @\"world\"];\nNSString *str32 = [NSString stringWithFormat:@\"hello %@\", @\"world\"];\n```\n\n#### 比较\n\n```objective-c\nNSString *str41 = @\"abc\";\nNSString *str42 = @\"bcd\";\n// 直接比较\nBOOL result41 = [str41 isEqualToString:str42];\n// 忽略大小写比较\nBOOL result42 = [str41 compare:str42 options:NSCaseInsensitiveSearch] == 0;\n```\n\n#### 获取长度\n\n```objective-c\nNSString *str5 = @\"abcde\";\nNSUInteger length5 = str5.length;\nNSLog(@\"len: %lu\", (unsigned long)length5);\n```\n\n#### 查找替换\n\n```objective-c\nNSString *str6 = @\"abcdxyzabcd\";\nNSRange range6 = [str6 rangeOfString:@\"xyz\"];\nif (range6.location == NSNotFound) {\n  NSLog(@\"not found!\");\n} else {\n  NSLog(@\"location: %ld, length:%ld\", range6.location, range6.length);\n}\n```\n\n#### 修改原文\n\n```objective-c\nNSString *str71 = @\"hello world\";\nstr71 = [str71 stringByReplacingOccurrencesOfString:@\"world\" withString:@\"yukapril\"];\nNSLog(@\"%@\", str71);\nNSMutableString *str72 = [NSMutableString stringWithUTF8String:\"hello world\"];\n[str72 appendString:@\"!\"];\nNSLog(@\"%@\", str72);\n```\n\n## 数字\n\n#### 转换\n\n```objective-c\nNSNumber *num1 = @(100);\nNSInteger int1 = [num1 integerValue];\n```\n\n## 数组\n\n#### 创建和读取\n\n```objective-c\nNSArray<NSString *> *arr1 = @[@\"a\", @\"b\"];\nNSString *arr1Temp = arr1[1];\nNSLog(@\"%@\", arr1Temp);\n\nNSInteger arr2Temp = 10;\nNSArray<NSNumber *> *arr2 = @[@1, @2, @3, @(arr2Temp)];\nfor (NSNumber *v in arr2) {\n  NSLog(@\"arr2: %@\", v);\n}\n\nNSArray <id> *arr3 = @[@\"a\", @1, @(YES)];\nfor (id v in arr3) {\n  NSLog(@\"arr3:%@\", v);\n}\n\nNSArray *arr4 = [[NSArray alloc] initWithObjects:@1, @2, @3, [NSNull null], @5, nil];\nfor (id v in arr4) {\n  NSLog(@\"arr4:%@\", v);\n}\n\nNSNumber *valueFirst = arr4.firstObject;\nNSNumber *valueLast = arr4.lastObject;\nNSLog(@\"valueFirst:%@, valueLast: %@\", valueFirst, valueLast);\nif ([arr4 count] >= 4) {\n  NSLog(@\"someValue:%@\", arr4[3]);\n}\n```\n\n#### 查找\n\n```objective-c\nNSArray<NSString *> *arr5 = @[@\"a\", @\"b\"];\nNSUInteger index5 = [arr5 indexOfObject:@\"b\"];\nNSLog(@\"index5:%@, count5:%@\", @(index5), @([arr5 count]));\n```\n\n#### 替换\n\n```objective-c\nNSMutableArray *arr6 = [@[@\"a\", @\"b\", @\"c\"] mutableCopy];\n// NSMutableArray *arr6 = [[NSMutableArray alloc] initWithObjects:@\"a\", @\"b\", @\"c\", nil];\n[arr6 addObject:@\"d\"];\n[arr6 removeLastObject];\n[arr6 removeObject:@\"c\"];\nNSLog(@\"%@\", arr6);\n```\n\n## NSIndexSet\n\n```objective-c\nNSMutableArray *arr = [@[@1, @2, @3, @4, @5] mutableCopy];\nNSMutableIndexSet *indexSet = [NSMutableIndexSet indexSetWithIndex:1];\n[indexSet addIndexesInRange:NSMakeRange(3, 2)];\n[arr removeObjectsAtIndexes:indexSet];\nNSLog(@\"NSIndexSet %@\", arr);\n```\n","slug":"2017-2017-10-03-objective-c","published":1,"updated":"2019-07-18T17:19:07.195Z","comments":1,"photos":[],"link":"","_id":"cjy8y72rt002ys21dsm3ja6y0","content":"<p>记录学习过程，做好笔记。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 直接创建</span><br><span class=\"line\">NSString *str1 = @&quot;test&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 从C字符串创建</span><br><span class=\"line\">NSString *str21 = [[NSString alloc] initWithUTF8String:&quot;hello&quot;];</span><br><span class=\"line\">NSString *str22 = [NSString stringWithUTF8String:&quot;hello&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">// 格式化创建</span><br><span class=\"line\">NSString *str31 = [[NSString alloc] initWithFormat:@&quot;hello %@&quot;, @&quot;world&quot;];</span><br><span class=\"line\">NSString *str32 = [NSString stringWithFormat:@&quot;hello %@&quot;, @&quot;world&quot;];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str41 = @&quot;abc&quot;;</span><br><span class=\"line\">NSString *str42 = @&quot;bcd&quot;;</span><br><span class=\"line\">// 直接比较</span><br><span class=\"line\">BOOL result41 = [str41 isEqualToString:str42];</span><br><span class=\"line\">// 忽略大小写比较</span><br><span class=\"line\">BOOL result42 = [str41 compare:str42 options:NSCaseInsensitiveSearch] == 0;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"获取长度\"><a href=\"#获取长度\" class=\"headerlink\" title=\"获取长度\"></a>获取长度</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str5 = @&quot;abcde&quot;;</span><br><span class=\"line\">NSUInteger length5 = str5.length;</span><br><span class=\"line\">NSLog(@&quot;len: %lu&quot;, (unsigned long)length5);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查找替换\"><a href=\"#查找替换\" class=\"headerlink\" title=\"查找替换\"></a>查找替换</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str6 = @&quot;abcdxyzabcd&quot;;</span><br><span class=\"line\">NSRange range6 = [str6 rangeOfString:@&quot;xyz&quot;];</span><br><span class=\"line\">if (range6.location == NSNotFound) &#123;</span><br><span class=\"line\">  NSLog(@&quot;not found!&quot;);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  NSLog(@&quot;location: %ld, length:%ld&quot;, range6.location, range6.length);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改原文\"><a href=\"#修改原文\" class=\"headerlink\" title=\"修改原文\"></a>修改原文</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str71 = @&quot;hello world&quot;;</span><br><span class=\"line\">str71 = [str71 stringByReplacingOccurrencesOfString:@&quot;world&quot; withString:@&quot;yukapril&quot;];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, str71);</span><br><span class=\"line\">NSMutableString *str72 = [NSMutableString stringWithUTF8String:&quot;hello world&quot;];</span><br><span class=\"line\">[str72 appendString:@&quot;!&quot;];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, str72);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a>数字</h2><h4 id=\"转换\"><a href=\"#转换\" class=\"headerlink\" title=\"转换\"></a>转换</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSNumber *num1 = @(100);</span><br><span class=\"line\">NSInteger int1 = [num1 integerValue];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><h4 id=\"创建和读取\"><a href=\"#创建和读取\" class=\"headerlink\" title=\"创建和读取\"></a>创建和读取</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray&lt;NSString *&gt; *arr1 = @[@&quot;a&quot;, @&quot;b&quot;];</span><br><span class=\"line\">NSString *arr1Temp = arr1[1];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, arr1Temp);</span><br><span class=\"line\"></span><br><span class=\"line\">NSInteger arr2Temp = 10;</span><br><span class=\"line\">NSArray&lt;NSNumber *&gt; *arr2 = @[@1, @2, @3, @(arr2Temp)];</span><br><span class=\"line\">for (NSNumber *v in arr2) &#123;</span><br><span class=\"line\">  NSLog(@&quot;arr2: %@&quot;, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NSArray &lt;id&gt; *arr3 = @[@&quot;a&quot;, @1, @(YES)];</span><br><span class=\"line\">for (id v in arr3) &#123;</span><br><span class=\"line\">  NSLog(@&quot;arr3:%@&quot;, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NSArray *arr4 = [[NSArray alloc] initWithObjects:@1, @2, @3, [NSNull null], @5, nil];</span><br><span class=\"line\">for (id v in arr4) &#123;</span><br><span class=\"line\">  NSLog(@&quot;arr4:%@&quot;, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NSNumber *valueFirst = arr4.firstObject;</span><br><span class=\"line\">NSNumber *valueLast = arr4.lastObject;</span><br><span class=\"line\">NSLog(@&quot;valueFirst:%@, valueLast: %@&quot;, valueFirst, valueLast);</span><br><span class=\"line\">if ([arr4 count] &gt;= 4) &#123;</span><br><span class=\"line\">  NSLog(@&quot;someValue:%@&quot;, arr4[3]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray&lt;NSString *&gt; *arr5 = @[@&quot;a&quot;, @&quot;b&quot;];</span><br><span class=\"line\">NSUInteger index5 = [arr5 indexOfObject:@&quot;b&quot;];</span><br><span class=\"line\">NSLog(@&quot;index5:%@, count5:%@&quot;, @(index5), @([arr5 count]));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableArray *arr6 = [@[@&quot;a&quot;, @&quot;b&quot;, @&quot;c&quot;] mutableCopy];</span><br><span class=\"line\">// NSMutableArray *arr6 = [[NSMutableArray alloc] initWithObjects:@&quot;a&quot;, @&quot;b&quot;, @&quot;c&quot;, nil];</span><br><span class=\"line\">[arr6 addObject:@&quot;d&quot;];</span><br><span class=\"line\">[arr6 removeLastObject];</span><br><span class=\"line\">[arr6 removeObject:@&quot;c&quot;];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, arr6);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NSIndexSet\"><a href=\"#NSIndexSet\" class=\"headerlink\" title=\"NSIndexSet\"></a>NSIndexSet</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableArray *arr = [@[@1, @2, @3, @4, @5] mutableCopy];</span><br><span class=\"line\">NSMutableIndexSet *indexSet = [NSMutableIndexSet indexSetWithIndex:1];</span><br><span class=\"line\">[indexSet addIndexesInRange:NSMakeRange(3, 2)];</span><br><span class=\"line\">[arr removeObjectsAtIndexes:indexSet];</span><br><span class=\"line\">NSLog(@&quot;NSIndexSet %@&quot;, arr);</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>记录学习过程，做好笔记。</p>","more":"<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 直接创建</span><br><span class=\"line\">NSString *str1 = @&quot;test&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 从C字符串创建</span><br><span class=\"line\">NSString *str21 = [[NSString alloc] initWithUTF8String:&quot;hello&quot;];</span><br><span class=\"line\">NSString *str22 = [NSString stringWithUTF8String:&quot;hello&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">// 格式化创建</span><br><span class=\"line\">NSString *str31 = [[NSString alloc] initWithFormat:@&quot;hello %@&quot;, @&quot;world&quot;];</span><br><span class=\"line\">NSString *str32 = [NSString stringWithFormat:@&quot;hello %@&quot;, @&quot;world&quot;];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str41 = @&quot;abc&quot;;</span><br><span class=\"line\">NSString *str42 = @&quot;bcd&quot;;</span><br><span class=\"line\">// 直接比较</span><br><span class=\"line\">BOOL result41 = [str41 isEqualToString:str42];</span><br><span class=\"line\">// 忽略大小写比较</span><br><span class=\"line\">BOOL result42 = [str41 compare:str42 options:NSCaseInsensitiveSearch] == 0;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"获取长度\"><a href=\"#获取长度\" class=\"headerlink\" title=\"获取长度\"></a>获取长度</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str5 = @&quot;abcde&quot;;</span><br><span class=\"line\">NSUInteger length5 = str5.length;</span><br><span class=\"line\">NSLog(@&quot;len: %lu&quot;, (unsigned long)length5);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查找替换\"><a href=\"#查找替换\" class=\"headerlink\" title=\"查找替换\"></a>查找替换</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str6 = @&quot;abcdxyzabcd&quot;;</span><br><span class=\"line\">NSRange range6 = [str6 rangeOfString:@&quot;xyz&quot;];</span><br><span class=\"line\">if (range6.location == NSNotFound) &#123;</span><br><span class=\"line\">  NSLog(@&quot;not found!&quot;);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  NSLog(@&quot;location: %ld, length:%ld&quot;, range6.location, range6.length);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改原文\"><a href=\"#修改原文\" class=\"headerlink\" title=\"修改原文\"></a>修改原文</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str71 = @&quot;hello world&quot;;</span><br><span class=\"line\">str71 = [str71 stringByReplacingOccurrencesOfString:@&quot;world&quot; withString:@&quot;yukapril&quot;];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, str71);</span><br><span class=\"line\">NSMutableString *str72 = [NSMutableString stringWithUTF8String:&quot;hello world&quot;];</span><br><span class=\"line\">[str72 appendString:@&quot;!&quot;];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, str72);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a>数字</h2><h4 id=\"转换\"><a href=\"#转换\" class=\"headerlink\" title=\"转换\"></a>转换</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSNumber *num1 = @(100);</span><br><span class=\"line\">NSInteger int1 = [num1 integerValue];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><h4 id=\"创建和读取\"><a href=\"#创建和读取\" class=\"headerlink\" title=\"创建和读取\"></a>创建和读取</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray&lt;NSString *&gt; *arr1 = @[@&quot;a&quot;, @&quot;b&quot;];</span><br><span class=\"line\">NSString *arr1Temp = arr1[1];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, arr1Temp);</span><br><span class=\"line\"></span><br><span class=\"line\">NSInteger arr2Temp = 10;</span><br><span class=\"line\">NSArray&lt;NSNumber *&gt; *arr2 = @[@1, @2, @3, @(arr2Temp)];</span><br><span class=\"line\">for (NSNumber *v in arr2) &#123;</span><br><span class=\"line\">  NSLog(@&quot;arr2: %@&quot;, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NSArray &lt;id&gt; *arr3 = @[@&quot;a&quot;, @1, @(YES)];</span><br><span class=\"line\">for (id v in arr3) &#123;</span><br><span class=\"line\">  NSLog(@&quot;arr3:%@&quot;, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NSArray *arr4 = [[NSArray alloc] initWithObjects:@1, @2, @3, [NSNull null], @5, nil];</span><br><span class=\"line\">for (id v in arr4) &#123;</span><br><span class=\"line\">  NSLog(@&quot;arr4:%@&quot;, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NSNumber *valueFirst = arr4.firstObject;</span><br><span class=\"line\">NSNumber *valueLast = arr4.lastObject;</span><br><span class=\"line\">NSLog(@&quot;valueFirst:%@, valueLast: %@&quot;, valueFirst, valueLast);</span><br><span class=\"line\">if ([arr4 count] &gt;= 4) &#123;</span><br><span class=\"line\">  NSLog(@&quot;someValue:%@&quot;, arr4[3]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray&lt;NSString *&gt; *arr5 = @[@&quot;a&quot;, @&quot;b&quot;];</span><br><span class=\"line\">NSUInteger index5 = [arr5 indexOfObject:@&quot;b&quot;];</span><br><span class=\"line\">NSLog(@&quot;index5:%@, count5:%@&quot;, @(index5), @([arr5 count]));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableArray *arr6 = [@[@&quot;a&quot;, @&quot;b&quot;, @&quot;c&quot;] mutableCopy];</span><br><span class=\"line\">// NSMutableArray *arr6 = [[NSMutableArray alloc] initWithObjects:@&quot;a&quot;, @&quot;b&quot;, @&quot;c&quot;, nil];</span><br><span class=\"line\">[arr6 addObject:@&quot;d&quot;];</span><br><span class=\"line\">[arr6 removeLastObject];</span><br><span class=\"line\">[arr6 removeObject:@&quot;c&quot;];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, arr6);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NSIndexSet\"><a href=\"#NSIndexSet\" class=\"headerlink\" title=\"NSIndexSet\"></a>NSIndexSet</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableArray *arr = [@[@1, @2, @3, @4, @5] mutableCopy];</span><br><span class=\"line\">NSMutableIndexSet *indexSet = [NSMutableIndexSet indexSetWithIndex:1];</span><br><span class=\"line\">[indexSet addIndexesInRange:NSMakeRange(3, 2)];</span><br><span class=\"line\">[arr removeObjectsAtIndexes:indexSet];</span><br><span class=\"line\">NSLog(@&quot;NSIndexSet %@&quot;, arr);</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"Objective-C 学习（三） - 内存管理 KVC","date":"2017-10-10T22:23:00.000Z","_content":"\n记录学习过程，做好笔记。\n\n<!-- more -->\n\n## 内存管理\n\n#### ARC 管理\n\nARC 管理下，一般情况下，无需手动管理内存。\n\n需要注意的是，防止出现循环引用。此时可使用弱引用来解决。\n\n```objective-c\n@property (weak) NSString *str;\n```\n\n#### 手动管理\n\n在OC 1.0时，需要手动调用 `release`来进行触发。\n\n在使用 `CoreFoundation` 对象中，使用 `CFRelease(str)`。\n\n#### 内容释放通知\n\n```objective-c\n- (void)dealloc {\n  NSLog(@\"dealloc\");\n}\n```\n\n#### 变量在 ARC 和手动管理下转换\n\n* `__bridge` 不修改内存管理方式\n* `__bridge_retained` 修改为手动管理\n* `__bridge_transfer` 修改为 ARC 管理\n\n\n```objective-c\nNSString *str1 = @\"apple\";\n// str1 强转，并且保留 str1 的 ARC 管理\nCFStringRef str2 = (__bridge CFStringRef) str1;\n// str1 强转，并修改内存管理方式为手动管理\nCFStringRef str21 = (__bridge_retained CFStringRef) str1;\n\nCFStringRef str3 = CFStringCreateWithCString(NULL, \"apple\", kCFStringEncodingUTF8);\n// str3 强转，并且保留 str3 的 ARC 管理\nNSString *str4 = (__bridge NSString *) str3;\n// str3 强转，并修改内存管理方式为手动管理\nNSString *str41 = (__bridge_transfer NSString *) str3;\n```\n\n\n## @property\n\n```objective-c\n@property (weak) NSString *str;\n@property (strong) NSString *str;\n@property (assign) CGFloat *num; \n\n@property (assign) NSString *str;\n// 等同于\n@property (unsafe_unretained) NSString *str;\n\n@property (copy) NSString *str;\n\n@property (readonly) NSString *str;\n```\n\nOC对象：默认修饰符是 `strong`\n\n非OC对象：默认修饰符是 `assign`\n\n`assign` 可以修饰 OC 对象，也可以修饰非 OC 对象，均表示弱引用（引用计数不增加）\n\n内存回收后，`weak` 的对象返回 nil，`assign` 的对象返回原始值\n\n## KVC\n\n通过 `setValue: forKey:` 快速赋值：\n\n```objective-c\n- (instancetype)initWithDict:(NSDictionary *)dict {\n    self = [super init];\n    if (self) {\n        [dict enumerateKeysAndObjectsUsingBlock:^(id key, id obj, BOOL *stop) {\n            [self setValue:obj forKey:key];\n        }];\n    }\n    return self;\n}\n```\n\n赋值时，对于不存在的 key，则会调用 `setValue: forUndefinedKey:`：\n\n```objective-c\n- (void)setValue:(id)value forUndefinedKey:(NSString *)key {\n    NSLog(@\"undefined key:%@, value:%@\", key, value);\n}\n```\n\n读取时候，不存在 key，则会调用 `valueForUndefinedKey:`：\n\n```objective-c\n- (id)valueForUndefinedKey:(NSString *)key {\n    return nil;\n}\n```\n\n读取嵌套对象\n\n```objective-c\nAddress *addr = [[Address alloc] initWithProvince:@\"北京\" city:@\"北京\" county:@\"东城区\"];\nNSDictionary *dict = @{@\"name\": @\"小明\", @\"age\": @18, @\"address\": addr};\nUser *user = [[User alloc] initWithDict:dict];\nNSString *city1 = [[user valueForKey:@\"address\"] valueForKey:@\"city\"];\nNSString *city2 = [user valueForKeyPath:@\"address.city\"];\n```\n\nKVC集合操作：\n\n```objective-c\nNSMutableArray *arr = [NSMutableArray array];\n{\n  NSDictionary *dict = @{@\"name\": @\"小明\", @\"age\": @18};\n  User *user = [[User alloc] initWithDict:dict];\n  [arr addObject:user];\n}\n{\n  NSDictionary *dict = @{@\"name\": @\"小王\", @\"age\": @16};\n  User *user = [[User alloc] initWithDict:dict];\n  [arr addObject:user];\n}\n{\n  NSDictionary *dict = @{@\"name\": @\"小刘\", @\"age\": @20};\n  User *user = [[User alloc] initWithDict:dict];\n  [arr addObject:user];\n}\n\n// 计算平均年龄\n// CGFloat sum = 0;\n// for (User *user in arr) {\n//     sum = user.age;\n// }\n// CGFloat avg = sum / arr.count;\nCGFloat avg = [[arr valueForKeyPath:@\"@avg.age\"] floatValue];\n```\n\n支持的5种语法：\n\n```objective-c\n[arr valueForKeyPath:@\"@avg.age\"];\n[arr valueForKeyPath:@\"@sum.age\"];\n[arr valueForKeyPath:@\"@max.age\"];\n[arr valueForKeyPath:@\"@min.age\"];\n[arr valueForKeyPath:@\"@count\"];\n```","source":"_posts/2017/2017-10-10-objective-c-3.md","raw":"---\nlayout: post\ntitle: \"Objective-C 学习（三） - 内存管理 KVC\"\ndate: 2017-10-10 22:23:00 GMT+0000\ncategories: [代码]\ntags:  [Objective-C]\n---\n\n记录学习过程，做好笔记。\n\n<!-- more -->\n\n## 内存管理\n\n#### ARC 管理\n\nARC 管理下，一般情况下，无需手动管理内存。\n\n需要注意的是，防止出现循环引用。此时可使用弱引用来解决。\n\n```objective-c\n@property (weak) NSString *str;\n```\n\n#### 手动管理\n\n在OC 1.0时，需要手动调用 `release`来进行触发。\n\n在使用 `CoreFoundation` 对象中，使用 `CFRelease(str)`。\n\n#### 内容释放通知\n\n```objective-c\n- (void)dealloc {\n  NSLog(@\"dealloc\");\n}\n```\n\n#### 变量在 ARC 和手动管理下转换\n\n* `__bridge` 不修改内存管理方式\n* `__bridge_retained` 修改为手动管理\n* `__bridge_transfer` 修改为 ARC 管理\n\n\n```objective-c\nNSString *str1 = @\"apple\";\n// str1 强转，并且保留 str1 的 ARC 管理\nCFStringRef str2 = (__bridge CFStringRef) str1;\n// str1 强转，并修改内存管理方式为手动管理\nCFStringRef str21 = (__bridge_retained CFStringRef) str1;\n\nCFStringRef str3 = CFStringCreateWithCString(NULL, \"apple\", kCFStringEncodingUTF8);\n// str3 强转，并且保留 str3 的 ARC 管理\nNSString *str4 = (__bridge NSString *) str3;\n// str3 强转，并修改内存管理方式为手动管理\nNSString *str41 = (__bridge_transfer NSString *) str3;\n```\n\n\n## @property\n\n```objective-c\n@property (weak) NSString *str;\n@property (strong) NSString *str;\n@property (assign) CGFloat *num; \n\n@property (assign) NSString *str;\n// 等同于\n@property (unsafe_unretained) NSString *str;\n\n@property (copy) NSString *str;\n\n@property (readonly) NSString *str;\n```\n\nOC对象：默认修饰符是 `strong`\n\n非OC对象：默认修饰符是 `assign`\n\n`assign` 可以修饰 OC 对象，也可以修饰非 OC 对象，均表示弱引用（引用计数不增加）\n\n内存回收后，`weak` 的对象返回 nil，`assign` 的对象返回原始值\n\n## KVC\n\n通过 `setValue: forKey:` 快速赋值：\n\n```objective-c\n- (instancetype)initWithDict:(NSDictionary *)dict {\n    self = [super init];\n    if (self) {\n        [dict enumerateKeysAndObjectsUsingBlock:^(id key, id obj, BOOL *stop) {\n            [self setValue:obj forKey:key];\n        }];\n    }\n    return self;\n}\n```\n\n赋值时，对于不存在的 key，则会调用 `setValue: forUndefinedKey:`：\n\n```objective-c\n- (void)setValue:(id)value forUndefinedKey:(NSString *)key {\n    NSLog(@\"undefined key:%@, value:%@\", key, value);\n}\n```\n\n读取时候，不存在 key，则会调用 `valueForUndefinedKey:`：\n\n```objective-c\n- (id)valueForUndefinedKey:(NSString *)key {\n    return nil;\n}\n```\n\n读取嵌套对象\n\n```objective-c\nAddress *addr = [[Address alloc] initWithProvince:@\"北京\" city:@\"北京\" county:@\"东城区\"];\nNSDictionary *dict = @{@\"name\": @\"小明\", @\"age\": @18, @\"address\": addr};\nUser *user = [[User alloc] initWithDict:dict];\nNSString *city1 = [[user valueForKey:@\"address\"] valueForKey:@\"city\"];\nNSString *city2 = [user valueForKeyPath:@\"address.city\"];\n```\n\nKVC集合操作：\n\n```objective-c\nNSMutableArray *arr = [NSMutableArray array];\n{\n  NSDictionary *dict = @{@\"name\": @\"小明\", @\"age\": @18};\n  User *user = [[User alloc] initWithDict:dict];\n  [arr addObject:user];\n}\n{\n  NSDictionary *dict = @{@\"name\": @\"小王\", @\"age\": @16};\n  User *user = [[User alloc] initWithDict:dict];\n  [arr addObject:user];\n}\n{\n  NSDictionary *dict = @{@\"name\": @\"小刘\", @\"age\": @20};\n  User *user = [[User alloc] initWithDict:dict];\n  [arr addObject:user];\n}\n\n// 计算平均年龄\n// CGFloat sum = 0;\n// for (User *user in arr) {\n//     sum = user.age;\n// }\n// CGFloat avg = sum / arr.count;\nCGFloat avg = [[arr valueForKeyPath:@\"@avg.age\"] floatValue];\n```\n\n支持的5种语法：\n\n```objective-c\n[arr valueForKeyPath:@\"@avg.age\"];\n[arr valueForKeyPath:@\"@sum.age\"];\n[arr valueForKeyPath:@\"@max.age\"];\n[arr valueForKeyPath:@\"@min.age\"];\n[arr valueForKeyPath:@\"@count\"];\n```","slug":"2017-2017-10-10-objective-c-3","published":1,"updated":"2019-07-18T17:19:07.069Z","comments":1,"photos":[],"link":"","_id":"cjy8y72rv0033s21dd3i4yg0h","content":"<p>记录学习过程，做好笔记。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h2><h4 id=\"ARC-管理\"><a href=\"#ARC-管理\" class=\"headerlink\" title=\"ARC 管理\"></a>ARC 管理</h4><p>ARC 管理下，一般情况下，无需手动管理内存。</p>\n<p>需要注意的是，防止出现循环引用。此时可使用弱引用来解决。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (weak) NSString *str;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"手动管理\"><a href=\"#手动管理\" class=\"headerlink\" title=\"手动管理\"></a>手动管理</h4><p>在OC 1.0时，需要手动调用 <code>release</code>来进行触发。</p>\n<p>在使用 <code>CoreFoundation</code> 对象中，使用 <code>CFRelease(str)</code>。</p>\n<h4 id=\"内容释放通知\"><a href=\"#内容释放通知\" class=\"headerlink\" title=\"内容释放通知\"></a>内容释放通知</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)dealloc &#123;</span><br><span class=\"line\">  NSLog(@&quot;dealloc&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"变量在-ARC-和手动管理下转换\"><a href=\"#变量在-ARC-和手动管理下转换\" class=\"headerlink\" title=\"变量在 ARC 和手动管理下转换\"></a>变量在 ARC 和手动管理下转换</h4><ul>\n<li><code>__bridge</code> 不修改内存管理方式</li>\n<li><code>__bridge_retained</code> 修改为手动管理</li>\n<li><code>__bridge_transfer</code> 修改为 ARC 管理</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str1 = @&quot;apple&quot;;</span><br><span class=\"line\">// str1 强转，并且保留 str1 的 ARC 管理</span><br><span class=\"line\">CFStringRef str2 = (__bridge CFStringRef) str1;</span><br><span class=\"line\">// str1 强转，并修改内存管理方式为手动管理</span><br><span class=\"line\">CFStringRef str21 = (__bridge_retained CFStringRef) str1;</span><br><span class=\"line\"></span><br><span class=\"line\">CFStringRef str3 = CFStringCreateWithCString(NULL, &quot;apple&quot;, kCFStringEncodingUTF8);</span><br><span class=\"line\">// str3 强转，并且保留 str3 的 ARC 管理</span><br><span class=\"line\">NSString *str4 = (__bridge NSString *) str3;</span><br><span class=\"line\">// str3 强转，并修改内存管理方式为手动管理</span><br><span class=\"line\">NSString *str41 = (__bridge_transfer NSString *) str3;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"property\"><a href=\"#property\" class=\"headerlink\" title=\"@property\"></a>@property</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (weak) NSString *str;</span><br><span class=\"line\">@property (strong) NSString *str;</span><br><span class=\"line\">@property (assign) CGFloat *num; </span><br><span class=\"line\"></span><br><span class=\"line\">@property (assign) NSString *str;</span><br><span class=\"line\">// 等同于</span><br><span class=\"line\">@property (unsafe_unretained) NSString *str;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (copy) NSString *str;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (readonly) NSString *str;</span><br></pre></td></tr></table></figure>\n\n<p>OC对象：默认修饰符是 <code>strong</code></p>\n<p>非OC对象：默认修饰符是 <code>assign</code></p>\n<p><code>assign</code> 可以修饰 OC 对象，也可以修饰非 OC 对象，均表示弱引用（引用计数不增加）</p>\n<p>内存回收后，<code>weak</code> 的对象返回 nil，<code>assign</code> 的对象返回原始值</p>\n<h2 id=\"KVC\"><a href=\"#KVC\" class=\"headerlink\" title=\"KVC\"></a>KVC</h2><p>通过 <code>setValue: forKey:</code> 快速赋值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (instancetype)initWithDict:(NSDictionary *)dict &#123;</span><br><span class=\"line\">    self = [super init];</span><br><span class=\"line\">    if (self) &#123;</span><br><span class=\"line\">        [dict enumerateKeysAndObjectsUsingBlock:^(id key, id obj, BOOL *stop) &#123;</span><br><span class=\"line\">            [self setValue:obj forKey:key];</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>赋值时，对于不存在的 key，则会调用 <code>setValue: forUndefinedKey:</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)setValue:(id)value forUndefinedKey:(NSString *)key &#123;</span><br><span class=\"line\">    NSLog(@&quot;undefined key:%@, value:%@&quot;, key, value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>读取时候，不存在 key，则会调用 <code>valueForUndefinedKey:</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (id)valueForUndefinedKey:(NSString *)key &#123;</span><br><span class=\"line\">    return nil;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>读取嵌套对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Address *addr = [[Address alloc] initWithProvince:@&quot;北京&quot; city:@&quot;北京&quot; county:@&quot;东城区&quot;];</span><br><span class=\"line\">NSDictionary *dict = @&#123;@&quot;name&quot;: @&quot;小明&quot;, @&quot;age&quot;: @18, @&quot;address&quot;: addr&#125;;</span><br><span class=\"line\">User *user = [[User alloc] initWithDict:dict];</span><br><span class=\"line\">NSString *city1 = [[user valueForKey:@&quot;address&quot;] valueForKey:@&quot;city&quot;];</span><br><span class=\"line\">NSString *city2 = [user valueForKeyPath:@&quot;address.city&quot;];</span><br></pre></td></tr></table></figure>\n\n<p>KVC集合操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableArray *arr = [NSMutableArray array];</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  NSDictionary *dict = @&#123;@&quot;name&quot;: @&quot;小明&quot;, @&quot;age&quot;: @18&#125;;</span><br><span class=\"line\">  User *user = [[User alloc] initWithDict:dict];</span><br><span class=\"line\">  [arr addObject:user];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  NSDictionary *dict = @&#123;@&quot;name&quot;: @&quot;小王&quot;, @&quot;age&quot;: @16&#125;;</span><br><span class=\"line\">  User *user = [[User alloc] initWithDict:dict];</span><br><span class=\"line\">  [arr addObject:user];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  NSDictionary *dict = @&#123;@&quot;name&quot;: @&quot;小刘&quot;, @&quot;age&quot;: @20&#125;;</span><br><span class=\"line\">  User *user = [[User alloc] initWithDict:dict];</span><br><span class=\"line\">  [arr addObject:user];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 计算平均年龄</span><br><span class=\"line\">// CGFloat sum = 0;</span><br><span class=\"line\">// for (User *user in arr) &#123;</span><br><span class=\"line\">//     sum = user.age;</span><br><span class=\"line\">// &#125;</span><br><span class=\"line\">// CGFloat avg = sum / arr.count;</span><br><span class=\"line\">CGFloat avg = [[arr valueForKeyPath:@&quot;@avg.age&quot;] floatValue];</span><br></pre></td></tr></table></figure>\n\n<p>支持的5种语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[arr valueForKeyPath:@&quot;@avg.age&quot;];</span><br><span class=\"line\">[arr valueForKeyPath:@&quot;@sum.age&quot;];</span><br><span class=\"line\">[arr valueForKeyPath:@&quot;@max.age&quot;];</span><br><span class=\"line\">[arr valueForKeyPath:@&quot;@min.age&quot;];</span><br><span class=\"line\">[arr valueForKeyPath:@&quot;@count&quot;];</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>记录学习过程，做好笔记。</p>","more":"<h2 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h2><h4 id=\"ARC-管理\"><a href=\"#ARC-管理\" class=\"headerlink\" title=\"ARC 管理\"></a>ARC 管理</h4><p>ARC 管理下，一般情况下，无需手动管理内存。</p>\n<p>需要注意的是，防止出现循环引用。此时可使用弱引用来解决。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (weak) NSString *str;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"手动管理\"><a href=\"#手动管理\" class=\"headerlink\" title=\"手动管理\"></a>手动管理</h4><p>在OC 1.0时，需要手动调用 <code>release</code>来进行触发。</p>\n<p>在使用 <code>CoreFoundation</code> 对象中，使用 <code>CFRelease(str)</code>。</p>\n<h4 id=\"内容释放通知\"><a href=\"#内容释放通知\" class=\"headerlink\" title=\"内容释放通知\"></a>内容释放通知</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)dealloc &#123;</span><br><span class=\"line\">  NSLog(@&quot;dealloc&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"变量在-ARC-和手动管理下转换\"><a href=\"#变量在-ARC-和手动管理下转换\" class=\"headerlink\" title=\"变量在 ARC 和手动管理下转换\"></a>变量在 ARC 和手动管理下转换</h4><ul>\n<li><code>__bridge</code> 不修改内存管理方式</li>\n<li><code>__bridge_retained</code> 修改为手动管理</li>\n<li><code>__bridge_transfer</code> 修改为 ARC 管理</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str1 = @&quot;apple&quot;;</span><br><span class=\"line\">// str1 强转，并且保留 str1 的 ARC 管理</span><br><span class=\"line\">CFStringRef str2 = (__bridge CFStringRef) str1;</span><br><span class=\"line\">// str1 强转，并修改内存管理方式为手动管理</span><br><span class=\"line\">CFStringRef str21 = (__bridge_retained CFStringRef) str1;</span><br><span class=\"line\"></span><br><span class=\"line\">CFStringRef str3 = CFStringCreateWithCString(NULL, &quot;apple&quot;, kCFStringEncodingUTF8);</span><br><span class=\"line\">// str3 强转，并且保留 str3 的 ARC 管理</span><br><span class=\"line\">NSString *str4 = (__bridge NSString *) str3;</span><br><span class=\"line\">// str3 强转，并修改内存管理方式为手动管理</span><br><span class=\"line\">NSString *str41 = (__bridge_transfer NSString *) str3;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"property\"><a href=\"#property\" class=\"headerlink\" title=\"@property\"></a>@property</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (weak) NSString *str;</span><br><span class=\"line\">@property (strong) NSString *str;</span><br><span class=\"line\">@property (assign) CGFloat *num; </span><br><span class=\"line\"></span><br><span class=\"line\">@property (assign) NSString *str;</span><br><span class=\"line\">// 等同于</span><br><span class=\"line\">@property (unsafe_unretained) NSString *str;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (copy) NSString *str;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (readonly) NSString *str;</span><br></pre></td></tr></table></figure>\n\n<p>OC对象：默认修饰符是 <code>strong</code></p>\n<p>非OC对象：默认修饰符是 <code>assign</code></p>\n<p><code>assign</code> 可以修饰 OC 对象，也可以修饰非 OC 对象，均表示弱引用（引用计数不增加）</p>\n<p>内存回收后，<code>weak</code> 的对象返回 nil，<code>assign</code> 的对象返回原始值</p>\n<h2 id=\"KVC\"><a href=\"#KVC\" class=\"headerlink\" title=\"KVC\"></a>KVC</h2><p>通过 <code>setValue: forKey:</code> 快速赋值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (instancetype)initWithDict:(NSDictionary *)dict &#123;</span><br><span class=\"line\">    self = [super init];</span><br><span class=\"line\">    if (self) &#123;</span><br><span class=\"line\">        [dict enumerateKeysAndObjectsUsingBlock:^(id key, id obj, BOOL *stop) &#123;</span><br><span class=\"line\">            [self setValue:obj forKey:key];</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>赋值时，对于不存在的 key，则会调用 <code>setValue: forUndefinedKey:</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)setValue:(id)value forUndefinedKey:(NSString *)key &#123;</span><br><span class=\"line\">    NSLog(@&quot;undefined key:%@, value:%@&quot;, key, value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>读取时候，不存在 key，则会调用 <code>valueForUndefinedKey:</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (id)valueForUndefinedKey:(NSString *)key &#123;</span><br><span class=\"line\">    return nil;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>读取嵌套对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Address *addr = [[Address alloc] initWithProvince:@&quot;北京&quot; city:@&quot;北京&quot; county:@&quot;东城区&quot;];</span><br><span class=\"line\">NSDictionary *dict = @&#123;@&quot;name&quot;: @&quot;小明&quot;, @&quot;age&quot;: @18, @&quot;address&quot;: addr&#125;;</span><br><span class=\"line\">User *user = [[User alloc] initWithDict:dict];</span><br><span class=\"line\">NSString *city1 = [[user valueForKey:@&quot;address&quot;] valueForKey:@&quot;city&quot;];</span><br><span class=\"line\">NSString *city2 = [user valueForKeyPath:@&quot;address.city&quot;];</span><br></pre></td></tr></table></figure>\n\n<p>KVC集合操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableArray *arr = [NSMutableArray array];</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  NSDictionary *dict = @&#123;@&quot;name&quot;: @&quot;小明&quot;, @&quot;age&quot;: @18&#125;;</span><br><span class=\"line\">  User *user = [[User alloc] initWithDict:dict];</span><br><span class=\"line\">  [arr addObject:user];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  NSDictionary *dict = @&#123;@&quot;name&quot;: @&quot;小王&quot;, @&quot;age&quot;: @16&#125;;</span><br><span class=\"line\">  User *user = [[User alloc] initWithDict:dict];</span><br><span class=\"line\">  [arr addObject:user];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  NSDictionary *dict = @&#123;@&quot;name&quot;: @&quot;小刘&quot;, @&quot;age&quot;: @20&#125;;</span><br><span class=\"line\">  User *user = [[User alloc] initWithDict:dict];</span><br><span class=\"line\">  [arr addObject:user];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 计算平均年龄</span><br><span class=\"line\">// CGFloat sum = 0;</span><br><span class=\"line\">// for (User *user in arr) &#123;</span><br><span class=\"line\">//     sum = user.age;</span><br><span class=\"line\">// &#125;</span><br><span class=\"line\">// CGFloat avg = sum / arr.count;</span><br><span class=\"line\">CGFloat avg = [[arr valueForKeyPath:@&quot;@avg.age&quot;] floatValue];</span><br></pre></td></tr></table></figure>\n\n<p>支持的5种语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[arr valueForKeyPath:@&quot;@avg.age&quot;];</span><br><span class=\"line\">[arr valueForKeyPath:@&quot;@sum.age&quot;];</span><br><span class=\"line\">[arr valueForKeyPath:@&quot;@max.age&quot;];</span><br><span class=\"line\">[arr valueForKeyPath:@&quot;@min.age&quot;];</span><br><span class=\"line\">[arr valueForKeyPath:@&quot;@count&quot;];</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"iOS 学习（一） 绑定事件","date":"2017-10-17T23:46:00.000Z","_content":"\n学习事件绑定方法。\n\n<!-- more -->\n\n## 直接对按钮组件进行绑定\n\n在 `Main.storyboard` 中，拖拽组件到 implementation 中。唯一问题就是必须是可点击组件，其他组件不支持。\n\n## 直接代码绑定触摸\n\n使用 `UITapGestureRecognizer` 处理。也要注意，组件 `userInteractionEnabled` 需要是 `YES`。\n\n```objective-c\n#import \"ViewController.h\"\n\n@interface ViewController ()\n\n@end\n\n@implementation ViewController\n\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self setupView];\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n}\n\n- (void)setupView {\n    UIView *view = [[UIView alloc] init];\n    view.frame = CGRectMake(0, 20, 200, 50);\n    view.backgroundColor = [UIColor lightGrayColor];\n    [self.view addSubview:view];\n\n    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(10, 10, 100, 20)];\n    [label setText:@\"tap here\"];\n    [label setTextColor:[UIColor whiteColor]];\n    [view addSubview:label];\n\n    label.userInteractionEnabled = YES;\n    UITapGestureRecognizer *labelTapGestureRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(labelTouchUpInside:)];\n    [label addGestureRecognizer:labelTapGestureRecognizer];\n}\n\n- (void)labelTouchUpInside:(UITapGestureRecognizer *)recognizer {\n    NSLog(@\"tap label,text(%@)\", ((UILabel *) recognizer.view).text);\n}\n\n- (IBAction)buttonTouchUpInside:(id)sender {\n    NSLog(@\"tap button\");\n}\n\n@end\n```","source":"_posts/2017/2017-10-17-ios-1.md","raw":"---\nlayout: post\ntitle: \"iOS 学习（一） 绑定事件\"\ndate: 2017-10-17 23:46:00 GMT+0000\ncategories: [代码]\ntags:  [Objective-C]\n---\n\n学习事件绑定方法。\n\n<!-- more -->\n\n## 直接对按钮组件进行绑定\n\n在 `Main.storyboard` 中，拖拽组件到 implementation 中。唯一问题就是必须是可点击组件，其他组件不支持。\n\n## 直接代码绑定触摸\n\n使用 `UITapGestureRecognizer` 处理。也要注意，组件 `userInteractionEnabled` 需要是 `YES`。\n\n```objective-c\n#import \"ViewController.h\"\n\n@interface ViewController ()\n\n@end\n\n@implementation ViewController\n\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self setupView];\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n}\n\n- (void)setupView {\n    UIView *view = [[UIView alloc] init];\n    view.frame = CGRectMake(0, 20, 200, 50);\n    view.backgroundColor = [UIColor lightGrayColor];\n    [self.view addSubview:view];\n\n    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(10, 10, 100, 20)];\n    [label setText:@\"tap here\"];\n    [label setTextColor:[UIColor whiteColor]];\n    [view addSubview:label];\n\n    label.userInteractionEnabled = YES;\n    UITapGestureRecognizer *labelTapGestureRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(labelTouchUpInside:)];\n    [label addGestureRecognizer:labelTapGestureRecognizer];\n}\n\n- (void)labelTouchUpInside:(UITapGestureRecognizer *)recognizer {\n    NSLog(@\"tap label,text(%@)\", ((UILabel *) recognizer.view).text);\n}\n\n- (IBAction)buttonTouchUpInside:(id)sender {\n    NSLog(@\"tap button\");\n}\n\n@end\n```","slug":"2017-2017-10-17-ios-1","published":1,"updated":"2019-07-18T17:19:07.280Z","comments":1,"photos":[],"link":"","_id":"cjy8y72rx0035s21d3odn6x5l","content":"<p>学习事件绑定方法。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"直接对按钮组件进行绑定\"><a href=\"#直接对按钮组件进行绑定\" class=\"headerlink\" title=\"直接对按钮组件进行绑定\"></a>直接对按钮组件进行绑定</h2><p>在 <code>Main.storyboard</code> 中，拖拽组件到 implementation 中。唯一问题就是必须是可点击组件，其他组件不支持。</p>\n<h2 id=\"直接代码绑定触摸\"><a href=\"#直接代码绑定触摸\" class=\"headerlink\" title=\"直接代码绑定触摸\"></a>直接代码绑定触摸</h2><p>使用 <code>UITapGestureRecognizer</code> 处理。也要注意，组件 <code>userInteractionEnabled</code> 需要是 <code>YES</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;ViewController.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface ViewController ()</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation ViewController</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (void)viewDidLoad &#123;</span><br><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\">    [self setupView];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)didReceiveMemoryWarning &#123;</span><br><span class=\"line\">    [super didReceiveMemoryWarning];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)setupView &#123;</span><br><span class=\"line\">    UIView *view = [[UIView alloc] init];</span><br><span class=\"line\">    view.frame = CGRectMake(0, 20, 200, 50);</span><br><span class=\"line\">    view.backgroundColor = [UIColor lightGrayColor];</span><br><span class=\"line\">    [self.view addSubview:view];</span><br><span class=\"line\"></span><br><span class=\"line\">    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(10, 10, 100, 20)];</span><br><span class=\"line\">    [label setText:@&quot;tap here&quot;];</span><br><span class=\"line\">    [label setTextColor:[UIColor whiteColor]];</span><br><span class=\"line\">    [view addSubview:label];</span><br><span class=\"line\"></span><br><span class=\"line\">    label.userInteractionEnabled = YES;</span><br><span class=\"line\">    UITapGestureRecognizer *labelTapGestureRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(labelTouchUpInside:)];</span><br><span class=\"line\">    [label addGestureRecognizer:labelTapGestureRecognizer];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)labelTouchUpInside:(UITapGestureRecognizer *)recognizer &#123;</span><br><span class=\"line\">    NSLog(@&quot;tap label,text(%@)&quot;, ((UILabel *) recognizer.view).text);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (IBAction)buttonTouchUpInside:(id)sender &#123;</span><br><span class=\"line\">    NSLog(@&quot;tap button&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>学习事件绑定方法。</p>","more":"<h2 id=\"直接对按钮组件进行绑定\"><a href=\"#直接对按钮组件进行绑定\" class=\"headerlink\" title=\"直接对按钮组件进行绑定\"></a>直接对按钮组件进行绑定</h2><p>在 <code>Main.storyboard</code> 中，拖拽组件到 implementation 中。唯一问题就是必须是可点击组件，其他组件不支持。</p>\n<h2 id=\"直接代码绑定触摸\"><a href=\"#直接代码绑定触摸\" class=\"headerlink\" title=\"直接代码绑定触摸\"></a>直接代码绑定触摸</h2><p>使用 <code>UITapGestureRecognizer</code> 处理。也要注意，组件 <code>userInteractionEnabled</code> 需要是 <code>YES</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;ViewController.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface ViewController ()</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation ViewController</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (void)viewDidLoad &#123;</span><br><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\">    [self setupView];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)didReceiveMemoryWarning &#123;</span><br><span class=\"line\">    [super didReceiveMemoryWarning];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)setupView &#123;</span><br><span class=\"line\">    UIView *view = [[UIView alloc] init];</span><br><span class=\"line\">    view.frame = CGRectMake(0, 20, 200, 50);</span><br><span class=\"line\">    view.backgroundColor = [UIColor lightGrayColor];</span><br><span class=\"line\">    [self.view addSubview:view];</span><br><span class=\"line\"></span><br><span class=\"line\">    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(10, 10, 100, 20)];</span><br><span class=\"line\">    [label setText:@&quot;tap here&quot;];</span><br><span class=\"line\">    [label setTextColor:[UIColor whiteColor]];</span><br><span class=\"line\">    [view addSubview:label];</span><br><span class=\"line\"></span><br><span class=\"line\">    label.userInteractionEnabled = YES;</span><br><span class=\"line\">    UITapGestureRecognizer *labelTapGestureRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(labelTouchUpInside:)];</span><br><span class=\"line\">    [label addGestureRecognizer:labelTapGestureRecognizer];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)labelTouchUpInside:(UITapGestureRecognizer *)recognizer &#123;</span><br><span class=\"line\">    NSLog(@&quot;tap label,text(%@)&quot;, ((UILabel *) recognizer.view).text);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (IBAction)buttonTouchUpInside:(id)sender &#123;</span><br><span class=\"line\">    NSLog(@&quot;tap button&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"iOS 学习（二） 周期钩子","date":"2017-10-19T00:07:00.000Z","_content":"\n学习生命周期及钩子函数。\n\n<!-- more -->\n\n| 钩子 | 说明 |\n|----|----|\n|`loadView` | 创建 self.view （懒加载）|\n|`viewDidLoad` | view 加载完成，处理 view 相关功能 |\n|`viewWillAppear` | view 即将展现到 APP |\n|`viewDidAppear` | view 已经展现到 APP |\n|`viewWillDisappear` | view 即将移除 |\n|`viewDidDisappear` | view 已经移除 |\n\n在转场动画中，可能顺序是：\n\n\n正常操作： `secondWillDisappear` -> `firstWillAppear` -> `firstDidAppear` -> `secondDidDisappear`\n\n转场取消： `secondWillDisappear` -> `firstWillAppear` -> `firstWillDisappear` -> `firstDidDisappear` -> `secondWillApear` -> `secondWillAppear`","source":"_posts/2017/2017-10-19-ios-2.md","raw":"---\nlayout: post\ntitle: \"iOS 学习（二） 周期钩子\"\ndate: 2017-10-19 00:07:00 GMT+0000\ncategories: [代码]\ntags:  [Objective-C]\n---\n\n学习生命周期及钩子函数。\n\n<!-- more -->\n\n| 钩子 | 说明 |\n|----|----|\n|`loadView` | 创建 self.view （懒加载）|\n|`viewDidLoad` | view 加载完成，处理 view 相关功能 |\n|`viewWillAppear` | view 即将展现到 APP |\n|`viewDidAppear` | view 已经展现到 APP |\n|`viewWillDisappear` | view 即将移除 |\n|`viewDidDisappear` | view 已经移除 |\n\n在转场动画中，可能顺序是：\n\n\n正常操作： `secondWillDisappear` -> `firstWillAppear` -> `firstDidAppear` -> `secondDidDisappear`\n\n转场取消： `secondWillDisappear` -> `firstWillAppear` -> `firstWillDisappear` -> `firstDidDisappear` -> `secondWillApear` -> `secondWillAppear`","slug":"2017-2017-10-19-ios-2","published":1,"updated":"2019-07-18T17:12:35.000Z","comments":1,"photos":[],"link":"","_id":"cjy8y72s00039s21dnskgsw50","content":"<p>学习生命周期及钩子函数。</p>\n<a id=\"more\"></a>\n\n<table>\n<thead>\n<tr>\n<th>钩子</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>loadView</code></td>\n<td>创建 self.view （懒加载）</td>\n</tr>\n<tr>\n<td><code>viewDidLoad</code></td>\n<td>view 加载完成，处理 view 相关功能</td>\n</tr>\n<tr>\n<td><code>viewWillAppear</code></td>\n<td>view 即将展现到 APP</td>\n</tr>\n<tr>\n<td><code>viewDidAppear</code></td>\n<td>view 已经展现到 APP</td>\n</tr>\n<tr>\n<td><code>viewWillDisappear</code></td>\n<td>view 即将移除</td>\n</tr>\n<tr>\n<td><code>viewDidDisappear</code></td>\n<td>view 已经移除</td>\n</tr>\n</tbody></table>\n<p>在转场动画中，可能顺序是：</p>\n<p>正常操作： <code>secondWillDisappear</code> -&gt; <code>firstWillAppear</code> -&gt; <code>firstDidAppear</code> -&gt; <code>secondDidDisappear</code></p>\n<p>转场取消： <code>secondWillDisappear</code> -&gt; <code>firstWillAppear</code> -&gt; <code>firstWillDisappear</code> -&gt; <code>firstDidDisappear</code> -&gt; <code>secondWillApear</code> -&gt; <code>secondWillAppear</code></p>\n","site":{"data":{}},"excerpt":"<p>学习生命周期及钩子函数。</p>","more":"<table>\n<thead>\n<tr>\n<th>钩子</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>loadView</code></td>\n<td>创建 self.view （懒加载）</td>\n</tr>\n<tr>\n<td><code>viewDidLoad</code></td>\n<td>view 加载完成，处理 view 相关功能</td>\n</tr>\n<tr>\n<td><code>viewWillAppear</code></td>\n<td>view 即将展现到 APP</td>\n</tr>\n<tr>\n<td><code>viewDidAppear</code></td>\n<td>view 已经展现到 APP</td>\n</tr>\n<tr>\n<td><code>viewWillDisappear</code></td>\n<td>view 即将移除</td>\n</tr>\n<tr>\n<td><code>viewDidDisappear</code></td>\n<td>view 已经移除</td>\n</tr>\n</tbody></table>\n<p>在转场动画中，可能顺序是：</p>\n<p>正常操作： <code>secondWillDisappear</code> -&gt; <code>firstWillAppear</code> -&gt; <code>firstDidAppear</code> -&gt; <code>secondDidDisappear</code></p>\n<p>转场取消： <code>secondWillDisappear</code> -&gt; <code>firstWillAppear</code> -&gt; <code>firstWillDisappear</code> -&gt; <code>firstDidDisappear</code> -&gt; <code>secondWillApear</code> -&gt; <code>secondWillAppear</code></p>"},{"layout":"post","title":"苹果 App Store 的计费思考","date":"2017-12-21T22:00:00.000Z","_content":"\n前两天，看 Pin 的作者出了新的软件 JSBox，感觉他是个非常认真做软件的工程师，就决定买下他的所有软件。\n\n原本上，我是在限免时间段，免费下载了 Pin。这是个前提。\n\n<!-- more -->\n\n现在有如下软件：\n\n| 软件                   | 价格   |\n| -------------------- | ---- |\n| Pin                  | 18   |\n| TodayMind            | 6    |\n| 小历                   | 1    |\n| JSBox                | 30   |\n| 套装1 Pin/TodayMind/小历 | 18   |\n| 套装2 Pin/JSBox        | 30   |\n\n我的想法是，先购买套装1，这样拥有3个授权，在购买套装2，这样由于有了 Pin 授权，应该可以用差价12元（30-18）来购买套装2。\n\n结果发现，根本不是这样子的。\n\n购买了套装1，可以下载套装1的所有 App 没问题。但是仅仅是下载使用而已，并不代表拥有 Pin 的独立授权（仅仅是使用权）。可以理解为，以优惠价格购买了3个 App，实际上你一个 App 都没有拥有。\n\n这时候购买套装2，还是以 30元的价格购买。此次购买，相当于重复购买了 Pin。\n\n这样非常不划算。\n\n所以，以后这种情况，我觉得基本上无解。因为关键 App （Pin）我是限免下载的，没办法再次付费了。也就是永远不能享受 Pin 的套装了。\n\n此时最好的解法是：独立购买 JSBox，虽然也是30元，但是拥有了独立授权。在独立购买 TodayMind 和小历。这样花钱最少，只需要 37 元（30+6+1）。而且除了 Pin，都是独立授权，未来如果有套装，还可能减免。\n\n如果没有限免时候下载 Pin，这样买最划算：购买独立 Pin （18元），购买套装1（免费），购买套装2（补差价12元）。此时 30 元享可以受所有 App。\n\n通过以上可以总结出：如果你购买拥有一个App，他是套装的核心，此时购买套装是价格优惠的，但是不能获得相应 App 的授权。如果你是限免下载的，那么就远离套装吧。\n\n我查了下，可以通过购买礼品卡形式，将App送给自己，但是不确定自己接收到App是拥有授权还是仅仅是使用权。\n\nEND","source":"_posts/2017/2017-12-21-app-store.md","raw":"---\nlayout: post\ntitle: \"苹果 App Store 的计费思考\"\ndate: 2017-12-21 22:00:00 GMT+0000\ncategories: [随笔]\ntags:  [App Store, Pin]\n---\n\n前两天，看 Pin 的作者出了新的软件 JSBox，感觉他是个非常认真做软件的工程师，就决定买下他的所有软件。\n\n原本上，我是在限免时间段，免费下载了 Pin。这是个前提。\n\n<!-- more -->\n\n现在有如下软件：\n\n| 软件                   | 价格   |\n| -------------------- | ---- |\n| Pin                  | 18   |\n| TodayMind            | 6    |\n| 小历                   | 1    |\n| JSBox                | 30   |\n| 套装1 Pin/TodayMind/小历 | 18   |\n| 套装2 Pin/JSBox        | 30   |\n\n我的想法是，先购买套装1，这样拥有3个授权，在购买套装2，这样由于有了 Pin 授权，应该可以用差价12元（30-18）来购买套装2。\n\n结果发现，根本不是这样子的。\n\n购买了套装1，可以下载套装1的所有 App 没问题。但是仅仅是下载使用而已，并不代表拥有 Pin 的独立授权（仅仅是使用权）。可以理解为，以优惠价格购买了3个 App，实际上你一个 App 都没有拥有。\n\n这时候购买套装2，还是以 30元的价格购买。此次购买，相当于重复购买了 Pin。\n\n这样非常不划算。\n\n所以，以后这种情况，我觉得基本上无解。因为关键 App （Pin）我是限免下载的，没办法再次付费了。也就是永远不能享受 Pin 的套装了。\n\n此时最好的解法是：独立购买 JSBox，虽然也是30元，但是拥有了独立授权。在独立购买 TodayMind 和小历。这样花钱最少，只需要 37 元（30+6+1）。而且除了 Pin，都是独立授权，未来如果有套装，还可能减免。\n\n如果没有限免时候下载 Pin，这样买最划算：购买独立 Pin （18元），购买套装1（免费），购买套装2（补差价12元）。此时 30 元享可以受所有 App。\n\n通过以上可以总结出：如果你购买拥有一个App，他是套装的核心，此时购买套装是价格优惠的，但是不能获得相应 App 的授权。如果你是限免下载的，那么就远离套装吧。\n\n我查了下，可以通过购买礼品卡形式，将App送给自己，但是不确定自己接收到App是拥有授权还是仅仅是使用权。\n\nEND","slug":"2017-2017-12-21-app-store","published":1,"updated":"2019-07-18T17:19:07.171Z","comments":1,"photos":[],"link":"","_id":"cjy8y72s2003bs21dfpt1j3pt","content":"<p>前两天，看 Pin 的作者出了新的软件 JSBox，感觉他是个非常认真做软件的工程师，就决定买下他的所有软件。</p>\n<p>原本上，我是在限免时间段，免费下载了 Pin。这是个前提。</p>\n<a id=\"more\"></a>\n\n<p>现在有如下软件：</p>\n<table>\n<thead>\n<tr>\n<th>软件</th>\n<th>价格</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Pin</td>\n<td>18</td>\n</tr>\n<tr>\n<td>TodayMind</td>\n<td>6</td>\n</tr>\n<tr>\n<td>小历</td>\n<td>1</td>\n</tr>\n<tr>\n<td>JSBox</td>\n<td>30</td>\n</tr>\n<tr>\n<td>套装1 Pin/TodayMind/小历</td>\n<td>18</td>\n</tr>\n<tr>\n<td>套装2 Pin/JSBox</td>\n<td>30</td>\n</tr>\n</tbody></table>\n<p>我的想法是，先购买套装1，这样拥有3个授权，在购买套装2，这样由于有了 Pin 授权，应该可以用差价12元（30-18）来购买套装2。</p>\n<p>结果发现，根本不是这样子的。</p>\n<p>购买了套装1，可以下载套装1的所有 App 没问题。但是仅仅是下载使用而已，并不代表拥有 Pin 的独立授权（仅仅是使用权）。可以理解为，以优惠价格购买了3个 App，实际上你一个 App 都没有拥有。</p>\n<p>这时候购买套装2，还是以 30元的价格购买。此次购买，相当于重复购买了 Pin。</p>\n<p>这样非常不划算。</p>\n<p>所以，以后这种情况，我觉得基本上无解。因为关键 App （Pin）我是限免下载的，没办法再次付费了。也就是永远不能享受 Pin 的套装了。</p>\n<p>此时最好的解法是：独立购买 JSBox，虽然也是30元，但是拥有了独立授权。在独立购买 TodayMind 和小历。这样花钱最少，只需要 37 元（30+6+1）。而且除了 Pin，都是独立授权，未来如果有套装，还可能减免。</p>\n<p>如果没有限免时候下载 Pin，这样买最划算：购买独立 Pin （18元），购买套装1（免费），购买套装2（补差价12元）。此时 30 元享可以受所有 App。</p>\n<p>通过以上可以总结出：如果你购买拥有一个App，他是套装的核心，此时购买套装是价格优惠的，但是不能获得相应 App 的授权。如果你是限免下载的，那么就远离套装吧。</p>\n<p>我查了下，可以通过购买礼品卡形式，将App送给自己，但是不确定自己接收到App是拥有授权还是仅仅是使用权。</p>\n<p>END</p>\n","site":{"data":{}},"excerpt":"<p>前两天，看 Pin 的作者出了新的软件 JSBox，感觉他是个非常认真做软件的工程师，就决定买下他的所有软件。</p>\n<p>原本上，我是在限免时间段，免费下载了 Pin。这是个前提。</p>","more":"<p>现在有如下软件：</p>\n<table>\n<thead>\n<tr>\n<th>软件</th>\n<th>价格</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Pin</td>\n<td>18</td>\n</tr>\n<tr>\n<td>TodayMind</td>\n<td>6</td>\n</tr>\n<tr>\n<td>小历</td>\n<td>1</td>\n</tr>\n<tr>\n<td>JSBox</td>\n<td>30</td>\n</tr>\n<tr>\n<td>套装1 Pin/TodayMind/小历</td>\n<td>18</td>\n</tr>\n<tr>\n<td>套装2 Pin/JSBox</td>\n<td>30</td>\n</tr>\n</tbody></table>\n<p>我的想法是，先购买套装1，这样拥有3个授权，在购买套装2，这样由于有了 Pin 授权，应该可以用差价12元（30-18）来购买套装2。</p>\n<p>结果发现，根本不是这样子的。</p>\n<p>购买了套装1，可以下载套装1的所有 App 没问题。但是仅仅是下载使用而已，并不代表拥有 Pin 的独立授权（仅仅是使用权）。可以理解为，以优惠价格购买了3个 App，实际上你一个 App 都没有拥有。</p>\n<p>这时候购买套装2，还是以 30元的价格购买。此次购买，相当于重复购买了 Pin。</p>\n<p>这样非常不划算。</p>\n<p>所以，以后这种情况，我觉得基本上无解。因为关键 App （Pin）我是限免下载的，没办法再次付费了。也就是永远不能享受 Pin 的套装了。</p>\n<p>此时最好的解法是：独立购买 JSBox，虽然也是30元，但是拥有了独立授权。在独立购买 TodayMind 和小历。这样花钱最少，只需要 37 元（30+6+1）。而且除了 Pin，都是独立授权，未来如果有套装，还可能减免。</p>\n<p>如果没有限免时候下载 Pin，这样买最划算：购买独立 Pin （18元），购买套装1（免费），购买套装2（补差价12元）。此时 30 元享可以受所有 App。</p>\n<p>通过以上可以总结出：如果你购买拥有一个App，他是套装的核心，此时购买套装是价格优惠的，但是不能获得相应 App 的授权。如果你是限免下载的，那么就远离套装吧。</p>\n<p>我查了下，可以通过购买礼品卡形式，将App送给自己，但是不确定自己接收到App是拥有授权还是仅仅是使用权。</p>\n<p>END</p>"},{"layout":"post","title":"HTML DOM 和 XML DOM 操作","date":"2018-01-06T18:37:00.000Z","_content":"\n今天看到一篇[文章](https://segmentfault.com/a/1190000012674948)，突然发现自己之前对 DOM 操作有很大的误解。\n\n<!-- more -->\n\n## 获取元素的属性值\n\n对于页面的 DOM 元素，一般获取其 `id` `class` `dataset` 都有 HTML DOM 的获取方法，但是在我面试的时候，几乎所有的面试者都给出了让我意外的结果，那就是通过 XML DOM 的 `getAttribute` 方法来进行获取。\n\n## 一个例子\n\n基础模版如下：\n\n```html\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>DOM</title>\n</head>\n<body>\n<input type=\"text\" id=\"input0\" class=\"input-box\" value=\"hello world!\" data-view=\"abc\">\n\n<script>\n  var input = document.querySelector('#input0')\n</script>\n</body>\n</html>\n```\n\n首先测试 `class`：\n\n```js\nconsole.log('HTML - class before:', input.className)\nconsole.log('XML - class before:', input.getAttribute('class'))\ninput.classList.add('red')\ninput.className += ' blue'\nvar className = input.getAttribute('class')\ninput.setAttribute('class', className + ' green')\nconsole.log('HTML - class after:', input.className)\nconsole.log('XML - class after:', input.getAttribute('class'))\n\n\n// result\nHTML - class before: input-box\nXML - class before: input-box\nHTML - class after: input-box red blue green\nXML - class after: input-box red blue green\n```\n\n可以说，对于 `class` 不管用 HTML 还是 XML 的 DOM 方法，获取结果都是一致的。\n\n我们再测试下 `value`：\n\n```js\nconsole.log('HTML - value before:', input.value)\nconsole.log('XML - value before:', input.getAttribute('value'))\ninput.value += '123'\nconsole.log('HTML - value after:', input.value)\nconsole.log('XML - value after:', input.getAttribute('value'))\n//  input.addEventListener('input', function () {\n//    console.log('HTML - value after:', input.value)\n//    console.log('XML - value after:', input.getAttribute('value'))\n//  })\n\n// result\nHTML - value before: hello world!\nXML - value before: hello world!\nHTML - value after: hello world!123\nXML - value after: hello world!\n```\n\n不论是通过 JS 改变还是页面编辑触发，都会导致两者获得的值不同。其中 XML-DOM 方法获取的永远是原始值。\n\n其他属性，也可以进行测试，大部分情况下两者还是相同的。\n\n出现这种现象，我认为主要是 `操作是否在HTML上进行响应`。在操作 `class` 时，HTML 发生了改变。而 `value` 这个属性，不会随之改变。\n\n所以，常规的 `dataset` `id` `checked` 属性两种方案都可以正常获取。\n\n但是如果我们对 DOM 增加属性，如 `input.aaa = 111`，此时数据仅仅记录在 DOM 对象上，并没有反馈到 HTML 节点，所以 `getAttribute` 就无法获取。\n\n## 小结\n\n对于本次例子整体来说，HTML-DOM 是对象级别操作，可以对对象进行读取修改增加等，并不是所有的操作都需要反馈到 XML-DOM节点上。\n\n而XML-DOM是对XML节点（HTML 字符串）的读取和写入操作，其中写入操作必定还会反馈到HTML-DOM对象上。","source":"_posts/2018/2018-01-06-dom-html.md","raw":"---\nlayout: post\ntitle: \"HTML DOM 和 XML DOM 操作\"\ndate: 2018-01-06 18:37:00 GMT+0000\ncategories: [前端]\ntags:  [DOM]\n---\n\n今天看到一篇[文章](https://segmentfault.com/a/1190000012674948)，突然发现自己之前对 DOM 操作有很大的误解。\n\n<!-- more -->\n\n## 获取元素的属性值\n\n对于页面的 DOM 元素，一般获取其 `id` `class` `dataset` 都有 HTML DOM 的获取方法，但是在我面试的时候，几乎所有的面试者都给出了让我意外的结果，那就是通过 XML DOM 的 `getAttribute` 方法来进行获取。\n\n## 一个例子\n\n基础模版如下：\n\n```html\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>DOM</title>\n</head>\n<body>\n<input type=\"text\" id=\"input0\" class=\"input-box\" value=\"hello world!\" data-view=\"abc\">\n\n<script>\n  var input = document.querySelector('#input0')\n</script>\n</body>\n</html>\n```\n\n首先测试 `class`：\n\n```js\nconsole.log('HTML - class before:', input.className)\nconsole.log('XML - class before:', input.getAttribute('class'))\ninput.classList.add('red')\ninput.className += ' blue'\nvar className = input.getAttribute('class')\ninput.setAttribute('class', className + ' green')\nconsole.log('HTML - class after:', input.className)\nconsole.log('XML - class after:', input.getAttribute('class'))\n\n\n// result\nHTML - class before: input-box\nXML - class before: input-box\nHTML - class after: input-box red blue green\nXML - class after: input-box red blue green\n```\n\n可以说，对于 `class` 不管用 HTML 还是 XML 的 DOM 方法，获取结果都是一致的。\n\n我们再测试下 `value`：\n\n```js\nconsole.log('HTML - value before:', input.value)\nconsole.log('XML - value before:', input.getAttribute('value'))\ninput.value += '123'\nconsole.log('HTML - value after:', input.value)\nconsole.log('XML - value after:', input.getAttribute('value'))\n//  input.addEventListener('input', function () {\n//    console.log('HTML - value after:', input.value)\n//    console.log('XML - value after:', input.getAttribute('value'))\n//  })\n\n// result\nHTML - value before: hello world!\nXML - value before: hello world!\nHTML - value after: hello world!123\nXML - value after: hello world!\n```\n\n不论是通过 JS 改变还是页面编辑触发，都会导致两者获得的值不同。其中 XML-DOM 方法获取的永远是原始值。\n\n其他属性，也可以进行测试，大部分情况下两者还是相同的。\n\n出现这种现象，我认为主要是 `操作是否在HTML上进行响应`。在操作 `class` 时，HTML 发生了改变。而 `value` 这个属性，不会随之改变。\n\n所以，常规的 `dataset` `id` `checked` 属性两种方案都可以正常获取。\n\n但是如果我们对 DOM 增加属性，如 `input.aaa = 111`，此时数据仅仅记录在 DOM 对象上，并没有反馈到 HTML 节点，所以 `getAttribute` 就无法获取。\n\n## 小结\n\n对于本次例子整体来说，HTML-DOM 是对象级别操作，可以对对象进行读取修改增加等，并不是所有的操作都需要反馈到 XML-DOM节点上。\n\n而XML-DOM是对XML节点（HTML 字符串）的读取和写入操作，其中写入操作必定还会反馈到HTML-DOM对象上。","slug":"2018-2018-01-06-dom-html","published":1,"updated":"2019-07-18T17:19:07.128Z","comments":1,"photos":[],"link":"","_id":"cjy8y72s6003ds21d5c7jgddx","content":"<p>今天看到一篇<a href=\"https://segmentfault.com/a/1190000012674948\" target=\"_blank\" rel=\"noopener\">文章</a>，突然发现自己之前对 DOM 操作有很大的误解。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"获取元素的属性值\"><a href=\"#获取元素的属性值\" class=\"headerlink\" title=\"获取元素的属性值\"></a>获取元素的属性值</h2><p>对于页面的 DOM 元素，一般获取其 <code>id</code> <code>class</code> <code>dataset</code> 都有 HTML DOM 的获取方法，但是在我面试的时候，几乎所有的面试者都给出了让我意外的结果，那就是通过 XML DOM 的 <code>getAttribute</code> 方法来进行获取。</p>\n<h2 id=\"一个例子\"><a href=\"#一个例子\" class=\"headerlink\" title=\"一个例子\"></a>一个例子</h2><p>基础模版如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DOM<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"input0\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-box\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"hello world!\"</span> <span class=\"attr\">data-view</span>=<span class=\"string\">\"abc\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> input = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#input0'</span>)</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>首先测试 <code>class</code>：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'HTML - class before:'</span>, input.className)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'XML - class before:'</span>, input.getAttribute(<span class=\"string\">'class'</span>))</span><br><span class=\"line\">input.classList.add(<span class=\"string\">'red'</span>)</span><br><span class=\"line\">input.className += <span class=\"string\">' blue'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> className = input.getAttribute(<span class=\"string\">'class'</span>)</span><br><span class=\"line\">input.setAttribute(<span class=\"string\">'class'</span>, className + <span class=\"string\">' green'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'HTML - class after:'</span>, input.className)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'XML - class after:'</span>, input.getAttribute(<span class=\"string\">'class'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// result</span></span><br><span class=\"line\">HTML - class before: input-box</span><br><span class=\"line\">XML - class before: input-box</span><br><span class=\"line\">HTML - class after: input-box red blue green</span><br><span class=\"line\">XML - class after: input-box red blue green</span><br></pre></td></tr></table></figure>\n\n<p>可以说，对于 <code>class</code> 不管用 HTML 还是 XML 的 DOM 方法，获取结果都是一致的。</p>\n<p>我们再测试下 <code>value</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'HTML - value before:'</span>, input.value)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'XML - value before:'</span>, input.getAttribute(<span class=\"string\">'value'</span>))</span><br><span class=\"line\">input.value += <span class=\"string\">'123'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'HTML - value after:'</span>, input.value)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'XML - value after:'</span>, input.getAttribute(<span class=\"string\">'value'</span>))</span><br><span class=\"line\"><span class=\"comment\">//  input.addEventListener('input', function () &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    console.log('HTML - value after:', input.value)</span></span><br><span class=\"line\"><span class=\"comment\">//    console.log('XML - value after:', input.getAttribute('value'))</span></span><br><span class=\"line\"><span class=\"comment\">//  &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// result</span></span><br><span class=\"line\">HTML - value before: hello world!</span><br><span class=\"line\">XML - value before: hello world!</span><br><span class=\"line\">HTML - value after: hello world!<span class=\"number\">123</span></span><br><span class=\"line\">XML - value after: hello world!</span><br></pre></td></tr></table></figure>\n\n<p>不论是通过 JS 改变还是页面编辑触发，都会导致两者获得的值不同。其中 XML-DOM 方法获取的永远是原始值。</p>\n<p>其他属性，也可以进行测试，大部分情况下两者还是相同的。</p>\n<p>出现这种现象，我认为主要是 <code>操作是否在HTML上进行响应</code>。在操作 <code>class</code> 时，HTML 发生了改变。而 <code>value</code> 这个属性，不会随之改变。</p>\n<p>所以，常规的 <code>dataset</code> <code>id</code> <code>checked</code> 属性两种方案都可以正常获取。</p>\n<p>但是如果我们对 DOM 增加属性，如 <code>input.aaa = 111</code>，此时数据仅仅记录在 DOM 对象上，并没有反馈到 HTML 节点，所以 <code>getAttribute</code> 就无法获取。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>对于本次例子整体来说，HTML-DOM 是对象级别操作，可以对对象进行读取修改增加等，并不是所有的操作都需要反馈到 XML-DOM节点上。</p>\n<p>而XML-DOM是对XML节点（HTML 字符串）的读取和写入操作，其中写入操作必定还会反馈到HTML-DOM对象上。</p>\n","site":{"data":{}},"excerpt":"<p>今天看到一篇<a href=\"https://segmentfault.com/a/1190000012674948\" target=\"_blank\" rel=\"noopener\">文章</a>，突然发现自己之前对 DOM 操作有很大的误解。</p>","more":"<h2 id=\"获取元素的属性值\"><a href=\"#获取元素的属性值\" class=\"headerlink\" title=\"获取元素的属性值\"></a>获取元素的属性值</h2><p>对于页面的 DOM 元素，一般获取其 <code>id</code> <code>class</code> <code>dataset</code> 都有 HTML DOM 的获取方法，但是在我面试的时候，几乎所有的面试者都给出了让我意外的结果，那就是通过 XML DOM 的 <code>getAttribute</code> 方法来进行获取。</p>\n<h2 id=\"一个例子\"><a href=\"#一个例子\" class=\"headerlink\" title=\"一个例子\"></a>一个例子</h2><p>基础模版如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DOM<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"input0\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-box\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"hello world!\"</span> <span class=\"attr\">data-view</span>=<span class=\"string\">\"abc\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> input = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#input0'</span>)</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>首先测试 <code>class</code>：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'HTML - class before:'</span>, input.className)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'XML - class before:'</span>, input.getAttribute(<span class=\"string\">'class'</span>))</span><br><span class=\"line\">input.classList.add(<span class=\"string\">'red'</span>)</span><br><span class=\"line\">input.className += <span class=\"string\">' blue'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> className = input.getAttribute(<span class=\"string\">'class'</span>)</span><br><span class=\"line\">input.setAttribute(<span class=\"string\">'class'</span>, className + <span class=\"string\">' green'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'HTML - class after:'</span>, input.className)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'XML - class after:'</span>, input.getAttribute(<span class=\"string\">'class'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// result</span></span><br><span class=\"line\">HTML - class before: input-box</span><br><span class=\"line\">XML - class before: input-box</span><br><span class=\"line\">HTML - class after: input-box red blue green</span><br><span class=\"line\">XML - class after: input-box red blue green</span><br></pre></td></tr></table></figure>\n\n<p>可以说，对于 <code>class</code> 不管用 HTML 还是 XML 的 DOM 方法，获取结果都是一致的。</p>\n<p>我们再测试下 <code>value</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'HTML - value before:'</span>, input.value)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'XML - value before:'</span>, input.getAttribute(<span class=\"string\">'value'</span>))</span><br><span class=\"line\">input.value += <span class=\"string\">'123'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'HTML - value after:'</span>, input.value)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'XML - value after:'</span>, input.getAttribute(<span class=\"string\">'value'</span>))</span><br><span class=\"line\"><span class=\"comment\">//  input.addEventListener('input', function () &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    console.log('HTML - value after:', input.value)</span></span><br><span class=\"line\"><span class=\"comment\">//    console.log('XML - value after:', input.getAttribute('value'))</span></span><br><span class=\"line\"><span class=\"comment\">//  &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// result</span></span><br><span class=\"line\">HTML - value before: hello world!</span><br><span class=\"line\">XML - value before: hello world!</span><br><span class=\"line\">HTML - value after: hello world!<span class=\"number\">123</span></span><br><span class=\"line\">XML - value after: hello world!</span><br></pre></td></tr></table></figure>\n\n<p>不论是通过 JS 改变还是页面编辑触发，都会导致两者获得的值不同。其中 XML-DOM 方法获取的永远是原始值。</p>\n<p>其他属性，也可以进行测试，大部分情况下两者还是相同的。</p>\n<p>出现这种现象，我认为主要是 <code>操作是否在HTML上进行响应</code>。在操作 <code>class</code> 时，HTML 发生了改变。而 <code>value</code> 这个属性，不会随之改变。</p>\n<p>所以，常规的 <code>dataset</code> <code>id</code> <code>checked</code> 属性两种方案都可以正常获取。</p>\n<p>但是如果我们对 DOM 增加属性，如 <code>input.aaa = 111</code>，此时数据仅仅记录在 DOM 对象上，并没有反馈到 HTML 节点，所以 <code>getAttribute</code> 就无法获取。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>对于本次例子整体来说，HTML-DOM 是对象级别操作，可以对对象进行读取修改增加等，并不是所有的操作都需要反馈到 XML-DOM节点上。</p>\n<p>而XML-DOM是对XML节点（HTML 字符串）的读取和写入操作，其中写入操作必定还会反馈到HTML-DOM对象上。</p>"},{"layout":"post","title":"虚拟主机 Apache 一个目录划分多个域名使用","date":"2018-01-19T22:52:00.000Z","_content":"\napache 下的空间，其实很容易实现一个目录下，绑定多个网站域名。\n\n<!-- more -->\n\n这都要说到想当初，在阿里云域名转入后，提示了一个广告，允许低价购买共享虚拟主机，这个阿里云的空间一直就保留着。现在续费大概也就是每年 60 块左右。虽然是垃圾配置，也不能弄 https，但是国内访问速度绝对一流，做个博客还是很适合的。\n\n本身虚拟主机是 apache + php 的方案，也带有 mySql，但是我还是用了 jekyll 静态页面博客。这么说就远了...回归主题。\n\n## 如何配置\n\n首先要能通过 ftp 连接到虚拟主机，因为不是 vps 机器，通过 ftp 是我们和虚拟主机唯一的通讯方式...\n\n在网页目录下，可以上传一个 `.htaccess` 文件。\n\n这个有技巧，有的系统不方便创建和操作（比如 Mac 和 linux 会隐藏，Windows 下貌似是非法文件），可以直接创建一个 `htaccess` 文件，上传到 ftp 后，再进行改名。\n\n## 访问地址 301，302 跳转\n\n比如我可以配置凡是访问 `/about` 路径，直接访问 `aboutme/about.php`\n\n```\nRedirect permanent about aboutme/about.php\norder deny,allow\n```\n\n## 根据主机头访问不同目录\n\n这才是这篇文章的重点。\n\n我希望用户访问 `yukapril.com` 后，访问 `yukapril_com` 目录；\n\n访问 `my.yukapril.com` 后，访问 `my_yukapril_com` 目录。\n\n```\nRewriteEngine on\n\nRewriteCond %{HTTP_HOST} yukapril.com\nRewriteCond %{REQUEST_URI} !^/yukapril_com\nRewriteRule ^(.*)$ /yukapril_com/$1\n\nRewriteCond %{HTTP_HOST} my.yukapril.com\nRewriteCond %{REQUEST_URI} !^/my_yukapril_com\nRewriteRule ^(.*)$ /my_yukapril_com/$1\n\norder deny,allow\n```\n\n每配置一个域名，复制三行就行了。\n\n`.htaccess` 还有很多玩法，可以自行搜索看看～\n\n## 小问题\n\n按照上面这么配置，也会有一些体验上的问题。\n\n比如，你的网站有链接 `http://yukapril.com/2018/01/01.html`，此时如果你访问 `http://yukapril.com/2018` 那么肯定是 403 错误（Forbidden）。\n\n此时因为我是静态页面，没有进行错误处理，所以错误消息会提示 `The requested URL /yukapril_com/2018/ was not found on this server.`\n\n这个我就不会直接配置了。\n\n一般虚拟主机商支持配置一个通用的错误页面，你的各个域名，如果相同错误码，错误页面也相同，那就好办。直接配置下就行了。但是如果不同的域名要求错误页不同，这个需要变换思路解决。\n\n变相的解决方案是，在每个域名对应目录里面，再次添加 `.htaccess` 文件。\n\n大致写法如下：\n\n```\nErrorDocument 403 /403.html\nErrorDocument 404 /404.html\norder deny,allow\n```","source":"_posts/2018/2018-01-19-apache-htaccess.md","raw":"---\nlayout: post\ntitle: \"虚拟主机 Apache 一个目录划分多个域名使用\"\ndate: 2018-01-19 22:52:00 GMT+0000\ncategories: [前端]\ntags:  [apache, htaccess]\n---\n\napache 下的空间，其实很容易实现一个目录下，绑定多个网站域名。\n\n<!-- more -->\n\n这都要说到想当初，在阿里云域名转入后，提示了一个广告，允许低价购买共享虚拟主机，这个阿里云的空间一直就保留着。现在续费大概也就是每年 60 块左右。虽然是垃圾配置，也不能弄 https，但是国内访问速度绝对一流，做个博客还是很适合的。\n\n本身虚拟主机是 apache + php 的方案，也带有 mySql，但是我还是用了 jekyll 静态页面博客。这么说就远了...回归主题。\n\n## 如何配置\n\n首先要能通过 ftp 连接到虚拟主机，因为不是 vps 机器，通过 ftp 是我们和虚拟主机唯一的通讯方式...\n\n在网页目录下，可以上传一个 `.htaccess` 文件。\n\n这个有技巧，有的系统不方便创建和操作（比如 Mac 和 linux 会隐藏，Windows 下貌似是非法文件），可以直接创建一个 `htaccess` 文件，上传到 ftp 后，再进行改名。\n\n## 访问地址 301，302 跳转\n\n比如我可以配置凡是访问 `/about` 路径，直接访问 `aboutme/about.php`\n\n```\nRedirect permanent about aboutme/about.php\norder deny,allow\n```\n\n## 根据主机头访问不同目录\n\n这才是这篇文章的重点。\n\n我希望用户访问 `yukapril.com` 后，访问 `yukapril_com` 目录；\n\n访问 `my.yukapril.com` 后，访问 `my_yukapril_com` 目录。\n\n```\nRewriteEngine on\n\nRewriteCond %{HTTP_HOST} yukapril.com\nRewriteCond %{REQUEST_URI} !^/yukapril_com\nRewriteRule ^(.*)$ /yukapril_com/$1\n\nRewriteCond %{HTTP_HOST} my.yukapril.com\nRewriteCond %{REQUEST_URI} !^/my_yukapril_com\nRewriteRule ^(.*)$ /my_yukapril_com/$1\n\norder deny,allow\n```\n\n每配置一个域名，复制三行就行了。\n\n`.htaccess` 还有很多玩法，可以自行搜索看看～\n\n## 小问题\n\n按照上面这么配置，也会有一些体验上的问题。\n\n比如，你的网站有链接 `http://yukapril.com/2018/01/01.html`，此时如果你访问 `http://yukapril.com/2018` 那么肯定是 403 错误（Forbidden）。\n\n此时因为我是静态页面，没有进行错误处理，所以错误消息会提示 `The requested URL /yukapril_com/2018/ was not found on this server.`\n\n这个我就不会直接配置了。\n\n一般虚拟主机商支持配置一个通用的错误页面，你的各个域名，如果相同错误码，错误页面也相同，那就好办。直接配置下就行了。但是如果不同的域名要求错误页不同，这个需要变换思路解决。\n\n变相的解决方案是，在每个域名对应目录里面，再次添加 `.htaccess` 文件。\n\n大致写法如下：\n\n```\nErrorDocument 403 /403.html\nErrorDocument 404 /404.html\norder deny,allow\n```","slug":"2018-2018-01-19-apache-htaccess","published":1,"updated":"2019-07-18T17:19:07.141Z","comments":1,"photos":[],"link":"","_id":"cjy8y72sa003gs21du4tlrf4l","content":"<p>apache 下的空间，其实很容易实现一个目录下，绑定多个网站域名。</p>\n<a id=\"more\"></a>\n\n<p>这都要说到想当初，在阿里云域名转入后，提示了一个广告，允许低价购买共享虚拟主机，这个阿里云的空间一直就保留着。现在续费大概也就是每年 60 块左右。虽然是垃圾配置，也不能弄 https，但是国内访问速度绝对一流，做个博客还是很适合的。</p>\n<p>本身虚拟主机是 apache + php 的方案，也带有 mySql，但是我还是用了 jekyll 静态页面博客。这么说就远了…回归主题。</p>\n<h2 id=\"如何配置\"><a href=\"#如何配置\" class=\"headerlink\" title=\"如何配置\"></a>如何配置</h2><p>首先要能通过 ftp 连接到虚拟主机，因为不是 vps 机器，通过 ftp 是我们和虚拟主机唯一的通讯方式…</p>\n<p>在网页目录下，可以上传一个 <code>.htaccess</code> 文件。</p>\n<p>这个有技巧，有的系统不方便创建和操作（比如 Mac 和 linux 会隐藏，Windows 下貌似是非法文件），可以直接创建一个 <code>htaccess</code> 文件，上传到 ftp 后，再进行改名。</p>\n<h2 id=\"访问地址-301，302-跳转\"><a href=\"#访问地址-301，302-跳转\" class=\"headerlink\" title=\"访问地址 301，302 跳转\"></a>访问地址 301，302 跳转</h2><p>比如我可以配置凡是访问 <code>/about</code> 路径，直接访问 <code>aboutme/about.php</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redirect permanent about aboutme/about.php</span><br><span class=\"line\">order deny,allow</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"根据主机头访问不同目录\"><a href=\"#根据主机头访问不同目录\" class=\"headerlink\" title=\"根据主机头访问不同目录\"></a>根据主机头访问不同目录</h2><p>这才是这篇文章的重点。</p>\n<p>我希望用户访问 <code>yukapril.com</code> 后，访问 <code>yukapril_com</code> 目录；</p>\n<p>访问 <code>my.yukapril.com</code> 后，访问 <code>my_yukapril_com</code> 目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RewriteEngine on</span><br><span class=\"line\"></span><br><span class=\"line\">RewriteCond %&#123;HTTP_HOST&#125; yukapril.com</span><br><span class=\"line\">RewriteCond %&#123;REQUEST_URI&#125; !^/yukapril_com</span><br><span class=\"line\">RewriteRule ^(.*)$ /yukapril_com/$1</span><br><span class=\"line\"></span><br><span class=\"line\">RewriteCond %&#123;HTTP_HOST&#125; my.yukapril.com</span><br><span class=\"line\">RewriteCond %&#123;REQUEST_URI&#125; !^/my_yukapril_com</span><br><span class=\"line\">RewriteRule ^(.*)$ /my_yukapril_com/$1</span><br><span class=\"line\"></span><br><span class=\"line\">order deny,allow</span><br></pre></td></tr></table></figure>\n\n<p>每配置一个域名，复制三行就行了。</p>\n<p><code>.htaccess</code> 还有很多玩法，可以自行搜索看看～</p>\n<h2 id=\"小问题\"><a href=\"#小问题\" class=\"headerlink\" title=\"小问题\"></a>小问题</h2><p>按照上面这么配置，也会有一些体验上的问题。</p>\n<p>比如，你的网站有链接 <code>http://yukapril.com/2018/01/01.html</code>，此时如果你访问 <code>http://yukapril.com/2018</code> 那么肯定是 403 错误（Forbidden）。</p>\n<p>此时因为我是静态页面，没有进行错误处理，所以错误消息会提示 <code>The requested URL /yukapril_com/2018/ was not found on this server.</code></p>\n<p>这个我就不会直接配置了。</p>\n<p>一般虚拟主机商支持配置一个通用的错误页面，你的各个域名，如果相同错误码，错误页面也相同，那就好办。直接配置下就行了。但是如果不同的域名要求错误页不同，这个需要变换思路解决。</p>\n<p>变相的解决方案是，在每个域名对应目录里面，再次添加 <code>.htaccess</code> 文件。</p>\n<p>大致写法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ErrorDocument 403 /403.html</span><br><span class=\"line\">ErrorDocument 404 /404.html</span><br><span class=\"line\">order deny,allow</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>apache 下的空间，其实很容易实现一个目录下，绑定多个网站域名。</p>","more":"<p>这都要说到想当初，在阿里云域名转入后，提示了一个广告，允许低价购买共享虚拟主机，这个阿里云的空间一直就保留着。现在续费大概也就是每年 60 块左右。虽然是垃圾配置，也不能弄 https，但是国内访问速度绝对一流，做个博客还是很适合的。</p>\n<p>本身虚拟主机是 apache + php 的方案，也带有 mySql，但是我还是用了 jekyll 静态页面博客。这么说就远了…回归主题。</p>\n<h2 id=\"如何配置\"><a href=\"#如何配置\" class=\"headerlink\" title=\"如何配置\"></a>如何配置</h2><p>首先要能通过 ftp 连接到虚拟主机，因为不是 vps 机器，通过 ftp 是我们和虚拟主机唯一的通讯方式…</p>\n<p>在网页目录下，可以上传一个 <code>.htaccess</code> 文件。</p>\n<p>这个有技巧，有的系统不方便创建和操作（比如 Mac 和 linux 会隐藏，Windows 下貌似是非法文件），可以直接创建一个 <code>htaccess</code> 文件，上传到 ftp 后，再进行改名。</p>\n<h2 id=\"访问地址-301，302-跳转\"><a href=\"#访问地址-301，302-跳转\" class=\"headerlink\" title=\"访问地址 301，302 跳转\"></a>访问地址 301，302 跳转</h2><p>比如我可以配置凡是访问 <code>/about</code> 路径，直接访问 <code>aboutme/about.php</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redirect permanent about aboutme/about.php</span><br><span class=\"line\">order deny,allow</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"根据主机头访问不同目录\"><a href=\"#根据主机头访问不同目录\" class=\"headerlink\" title=\"根据主机头访问不同目录\"></a>根据主机头访问不同目录</h2><p>这才是这篇文章的重点。</p>\n<p>我希望用户访问 <code>yukapril.com</code> 后，访问 <code>yukapril_com</code> 目录；</p>\n<p>访问 <code>my.yukapril.com</code> 后，访问 <code>my_yukapril_com</code> 目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RewriteEngine on</span><br><span class=\"line\"></span><br><span class=\"line\">RewriteCond %&#123;HTTP_HOST&#125; yukapril.com</span><br><span class=\"line\">RewriteCond %&#123;REQUEST_URI&#125; !^/yukapril_com</span><br><span class=\"line\">RewriteRule ^(.*)$ /yukapril_com/$1</span><br><span class=\"line\"></span><br><span class=\"line\">RewriteCond %&#123;HTTP_HOST&#125; my.yukapril.com</span><br><span class=\"line\">RewriteCond %&#123;REQUEST_URI&#125; !^/my_yukapril_com</span><br><span class=\"line\">RewriteRule ^(.*)$ /my_yukapril_com/$1</span><br><span class=\"line\"></span><br><span class=\"line\">order deny,allow</span><br></pre></td></tr></table></figure>\n\n<p>每配置一个域名，复制三行就行了。</p>\n<p><code>.htaccess</code> 还有很多玩法，可以自行搜索看看～</p>\n<h2 id=\"小问题\"><a href=\"#小问题\" class=\"headerlink\" title=\"小问题\"></a>小问题</h2><p>按照上面这么配置，也会有一些体验上的问题。</p>\n<p>比如，你的网站有链接 <code>http://yukapril.com/2018/01/01.html</code>，此时如果你访问 <code>http://yukapril.com/2018</code> 那么肯定是 403 错误（Forbidden）。</p>\n<p>此时因为我是静态页面，没有进行错误处理，所以错误消息会提示 <code>The requested URL /yukapril_com/2018/ was not found on this server.</code></p>\n<p>这个我就不会直接配置了。</p>\n<p>一般虚拟主机商支持配置一个通用的错误页面，你的各个域名，如果相同错误码，错误页面也相同，那就好办。直接配置下就行了。但是如果不同的域名要求错误页不同，这个需要变换思路解决。</p>\n<p>变相的解决方案是，在每个域名对应目录里面，再次添加 <code>.htaccess</code> 文件。</p>\n<p>大致写法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ErrorDocument 403 /403.html</span><br><span class=\"line\">ErrorDocument 404 /404.html</span><br><span class=\"line\">order deny,allow</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"使用 nodejs 发送邮件","date":"2018-01-20T22:50:00.000Z","_content":"\n一直打算用 nodejs 做一些服务类功能，比如说定时抓取资料什么的，当拿到数据后，就需要进行通知我们。\n\n<!-- more -->\n\n比较简单的方案是，之际准备一个账号，用这个账号给自己发邮件。\n\nnodejs 实现比较简单，主要依赖 `nodemailer` 这个包。\n\n大概例子如下：\n\n```js\nconst nodemailer = require('nodemailer')\n\nconst mailTransport = nodemailer.createTransport({\n    host: 'smtp.qq.com', \n    secureConnection: true, \n    auth: {\n        user: 'abcd@foxmail.com',\n        pass: '123456'\n    }\n})\n\nconst options = {\n    from: '\"yukapril\" <fake@qq.com>',\n    to: '\"JasonLee\" <someone@163.com>',\n    cc: ''\n    bcc: ''\n    subject: 'test',\n    text: 'test text',\n    html: '<h1>test test</h1>'\n};\n\nmailTransport.sendMail(options, (err, msg) => {\n    if (err) {\n        console.log(err)\n        return\n    }\n    console.log(msg)\n})\n```\n\n其中：\n\n`mailTransport.host` 邮件 smtp 服务器地址\n\n`mailTransport.secureConnection` 表示使用 SSL 方式连接\n\n`mailTransport.auth` 邮箱账号密码，如果是网易 QQ 等邮箱，可能需要使用授权码替代密码\n\n`options.from` 对方显示的发件人（可以和上面的账号不同）\n\n`options.to` 收件人\n\n`options.cc` 抄送\n\n`options.bcc` 密送\n\n支持多种附件，如果是图片附件，可以设置sid，在正文中可以直接引用。\n\n","source":"_posts/2018/2018-01-20-node-mail.md","raw":"---\nlayout: post\ntitle: \"使用 nodejs 发送邮件\"\ndate: 2018-01-20 22:50:00 GMT+0000\ncategories: [前端]\ntags:  [node, mail, nodemailer]\n---\n\n一直打算用 nodejs 做一些服务类功能，比如说定时抓取资料什么的，当拿到数据后，就需要进行通知我们。\n\n<!-- more -->\n\n比较简单的方案是，之际准备一个账号，用这个账号给自己发邮件。\n\nnodejs 实现比较简单，主要依赖 `nodemailer` 这个包。\n\n大概例子如下：\n\n```js\nconst nodemailer = require('nodemailer')\n\nconst mailTransport = nodemailer.createTransport({\n    host: 'smtp.qq.com', \n    secureConnection: true, \n    auth: {\n        user: 'abcd@foxmail.com',\n        pass: '123456'\n    }\n})\n\nconst options = {\n    from: '\"yukapril\" <fake@qq.com>',\n    to: '\"JasonLee\" <someone@163.com>',\n    cc: ''\n    bcc: ''\n    subject: 'test',\n    text: 'test text',\n    html: '<h1>test test</h1>'\n};\n\nmailTransport.sendMail(options, (err, msg) => {\n    if (err) {\n        console.log(err)\n        return\n    }\n    console.log(msg)\n})\n```\n\n其中：\n\n`mailTransport.host` 邮件 smtp 服务器地址\n\n`mailTransport.secureConnection` 表示使用 SSL 方式连接\n\n`mailTransport.auth` 邮箱账号密码，如果是网易 QQ 等邮箱，可能需要使用授权码替代密码\n\n`options.from` 对方显示的发件人（可以和上面的账号不同）\n\n`options.to` 收件人\n\n`options.cc` 抄送\n\n`options.bcc` 密送\n\n支持多种附件，如果是图片附件，可以设置sid，在正文中可以直接引用。\n\n","slug":"2018-2018-01-20-node-mail","published":1,"updated":"2019-07-18T17:19:07.134Z","comments":1,"photos":[],"link":"","_id":"cjy8y72sb003is21dfmkq9qbh","content":"<p>一直打算用 nodejs 做一些服务类功能，比如说定时抓取资料什么的，当拿到数据后，就需要进行通知我们。</p>\n<a id=\"more\"></a>\n\n<p>比较简单的方案是，之际准备一个账号，用这个账号给自己发邮件。</p>\n<p>nodejs 实现比较简单，主要依赖 <code>nodemailer</code> 这个包。</p>\n<p>大概例子如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> nodemailer = <span class=\"built_in\">require</span>(<span class=\"string\">'nodemailer'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mailTransport = nodemailer.createTransport(&#123;</span><br><span class=\"line\">    host: <span class=\"string\">'smtp.qq.com'</span>, </span><br><span class=\"line\">    secureConnection: <span class=\"literal\">true</span>, </span><br><span class=\"line\">    auth: &#123;</span><br><span class=\"line\">        user: <span class=\"string\">'abcd@foxmail.com'</span>,</span><br><span class=\"line\">        pass: <span class=\"string\">'123456'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">from</span>: <span class=\"string\">'\"yukapril\" &lt;fake@qq.com&gt;'</span>,</span><br><span class=\"line\">    to: <span class=\"string\">'\"JasonLee\" &lt;someone@163.com&gt;'</span>,</span><br><span class=\"line\">    cc: <span class=\"string\">''</span></span><br><span class=\"line\">    bcc: <span class=\"string\">''</span></span><br><span class=\"line\">    subject: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">    text: <span class=\"string\">'test text'</span>,</span><br><span class=\"line\">    html: <span class=\"string\">'&lt;h1&gt;test test&lt;/h1&gt;'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">mailTransport.sendMail(options, (err, msg) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(msg)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>其中：</p>\n<p><code>mailTransport.host</code> 邮件 smtp 服务器地址</p>\n<p><code>mailTransport.secureConnection</code> 表示使用 SSL 方式连接</p>\n<p><code>mailTransport.auth</code> 邮箱账号密码，如果是网易 QQ 等邮箱，可能需要使用授权码替代密码</p>\n<p><code>options.from</code> 对方显示的发件人（可以和上面的账号不同）</p>\n<p><code>options.to</code> 收件人</p>\n<p><code>options.cc</code> 抄送</p>\n<p><code>options.bcc</code> 密送</p>\n<p>支持多种附件，如果是图片附件，可以设置sid，在正文中可以直接引用。</p>\n","site":{"data":{}},"excerpt":"<p>一直打算用 nodejs 做一些服务类功能，比如说定时抓取资料什么的，当拿到数据后，就需要进行通知我们。</p>","more":"<p>比较简单的方案是，之际准备一个账号，用这个账号给自己发邮件。</p>\n<p>nodejs 实现比较简单，主要依赖 <code>nodemailer</code> 这个包。</p>\n<p>大概例子如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> nodemailer = <span class=\"built_in\">require</span>(<span class=\"string\">'nodemailer'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mailTransport = nodemailer.createTransport(&#123;</span><br><span class=\"line\">    host: <span class=\"string\">'smtp.qq.com'</span>, </span><br><span class=\"line\">    secureConnection: <span class=\"literal\">true</span>, </span><br><span class=\"line\">    auth: &#123;</span><br><span class=\"line\">        user: <span class=\"string\">'abcd@foxmail.com'</span>,</span><br><span class=\"line\">        pass: <span class=\"string\">'123456'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">from</span>: <span class=\"string\">'\"yukapril\" &lt;fake@qq.com&gt;'</span>,</span><br><span class=\"line\">    to: <span class=\"string\">'\"JasonLee\" &lt;someone@163.com&gt;'</span>,</span><br><span class=\"line\">    cc: <span class=\"string\">''</span></span><br><span class=\"line\">    bcc: <span class=\"string\">''</span></span><br><span class=\"line\">    subject: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">    text: <span class=\"string\">'test text'</span>,</span><br><span class=\"line\">    html: <span class=\"string\">'&lt;h1&gt;test test&lt;/h1&gt;'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">mailTransport.sendMail(options, (err, msg) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(msg)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>其中：</p>\n<p><code>mailTransport.host</code> 邮件 smtp 服务器地址</p>\n<p><code>mailTransport.secureConnection</code> 表示使用 SSL 方式连接</p>\n<p><code>mailTransport.auth</code> 邮箱账号密码，如果是网易 QQ 等邮箱，可能需要使用授权码替代密码</p>\n<p><code>options.from</code> 对方显示的发件人（可以和上面的账号不同）</p>\n<p><code>options.to</code> 收件人</p>\n<p><code>options.cc</code> 抄送</p>\n<p><code>options.bcc</code> 密送</p>\n<p>支持多种附件，如果是图片附件，可以设置sid，在正文中可以直接引用。</p>"},{"layout":"post","title":"(a ==1 && a== 2 && a==3) 能为 true 吗？","date":"2018-01-21T22:40:00.000Z","_content":"\nstackoverflow 上看到一道题 [Can (a ==1 && a== 2 && a==3) ever evaluate to true?](https://stackoverflow.com/questions/48270127/can-a-1-a-2-a-3-ever-evaluate-to-true)\n\n<!-- more -->\n\n题目大致是：\n\n```js\n// TODO\n\nif(a == 1 && a == 2 && a == 3) {\n  console.log('Hello World!');\n}\n```\n\n## 解答\n\n这道题稍有点经验，并不难。\n\n> 主要是单年网易前端微专业有考过 `toString` 的题目。我被坑过...\n\n答案简单明了：\n\n```js\nvar a = {\n  n: 0,\n  valueOf: function() {\n    return ++this.n\n  }\n}\n\nif(a == 1 && a == 2 && a == 3) {\n  console.log('Hello World!');\n}\n```\n\n> 当然，用 `valueOf` `toString` 都是可以的。\n\n看了下别人的回复，基本上主流都是这个思路，写法稍有不同而已。\n\n## 其他的解法\n\n### 对象法\n\n```js\nvar val = 0;\nObject.defineProperty(window, 'a', {\n  get: function() {\n    return ++val;\n  }\n});\nif (a == 1 && a == 2 && a == 3) {\n  console.log('yay');\n}\n```\n\n和上面一样，也很容易想到，尤其是现在 MVVM 框架遍地开花的时代，就是书写量感觉有点大...还有个我自认为经常拼错的单词。\n\n还有一种 ES6 的写法，这个我没在全局 window 上用过，没想到用 `with` 处理，所以\b也很喜欢：\n\n```js\nvar i = 0;\n\nwith({\n  get a() {\n    return ++i;\n  }\n}) {\n  if (a == 1 && a == 2 && a == 3)\n    console.log(\"wohoo\");\n}\n```\n\n### 数组法\n\n```js\na = [1,2,3];\na.join = a.shift;\nconsole.log(a == 1 && a == 2 && a == 3);\n```\n\n方法清新，只不过是不用字符串和对象实现了，换成了数组。其实思路也是大同小异，不过很有创意。\n\n### 编码法\n\n> 以下方案，都是编码障眼法\n\n我自认为这个是最流氓的写法：\n\n```js\nvar aﾠ = 1;\nvar a = 2;\nvar ﾠa = 3;\nif(aﾠ == 1 && a == 2 && ﾠa == 3) {\n    console.log(\"Why hello there!\")\n}\n```\n\n简言之，你看着是一个变量 `a`，其实是三个变量，就是编码不同而已，长得和 `a` 一样。\n\n虽然我知道这种写法，但是自己不会写...具体可以看 SOF 上的解答，因为我觉得没用，所以也不打算去了解学习。\n\n你以为这么写就完了？还有更变态的：\n\n```js\nvar a = 1;\nvar ﾠ1 = a;\nvar ﾠ2 = a;\nvar ﾠ3 = a;\nconsole.log( a ==ﾠ1 && a ==ﾠ2 && a ==ﾠ3 );\n```\n\n山不转水转，数字正常来讲是不能当作变量名字的，但是...你懂的...\n\n如果到这里就算完了，那怎么行？\n\n```js\nvar a = 9;\n\nif‌(a==1 && a== 2 && a==3)\n{\n    document.write(\"<h1>Yes, it is possible!😎</h1>\")\n}\n\nfunction if‌(){return true;}\n```\n\n流氓耍到底...看到这个解法时候，我真的是...\b😂\n\n这个一样，是特殊的字符 `if`，否则正常是不让重写保留词汇的...\n\n由于 js 不能操作双等号，所以就不粘贴了。如果是 Ruby，竟然还可以定义双等号...\n\n\n## 最完美答案\n\n这个答案\b我认为是最完美的，可惜 SOF 赞同只有\b几十票...可惜了。\n\n```js\na = 100000000000000000\nif (a == a+1 && a == a+2 && a == a+3){\n  console.log(\"Precision loss!\");\n}\n```\n\n","source":"_posts/2018/2018-01-21-js-if-eq.md","raw":"---\nlayout: post\ntitle: \"(a ==1 && a== 2 && a==3) 能为 true 吗？\"\ndate: 2018-01-21 22:40:00 GMT+0000\ncategories: [前端]\ntags:  [js, if, equal]\n---\n\nstackoverflow 上看到一道题 [Can (a ==1 && a== 2 && a==3) ever evaluate to true?](https://stackoverflow.com/questions/48270127/can-a-1-a-2-a-3-ever-evaluate-to-true)\n\n<!-- more -->\n\n题目大致是：\n\n```js\n// TODO\n\nif(a == 1 && a == 2 && a == 3) {\n  console.log('Hello World!');\n}\n```\n\n## 解答\n\n这道题稍有点经验，并不难。\n\n> 主要是单年网易前端微专业有考过 `toString` 的题目。我被坑过...\n\n答案简单明了：\n\n```js\nvar a = {\n  n: 0,\n  valueOf: function() {\n    return ++this.n\n  }\n}\n\nif(a == 1 && a == 2 && a == 3) {\n  console.log('Hello World!');\n}\n```\n\n> 当然，用 `valueOf` `toString` 都是可以的。\n\n看了下别人的回复，基本上主流都是这个思路，写法稍有不同而已。\n\n## 其他的解法\n\n### 对象法\n\n```js\nvar val = 0;\nObject.defineProperty(window, 'a', {\n  get: function() {\n    return ++val;\n  }\n});\nif (a == 1 && a == 2 && a == 3) {\n  console.log('yay');\n}\n```\n\n和上面一样，也很容易想到，尤其是现在 MVVM 框架遍地开花的时代，就是书写量感觉有点大...还有个我自认为经常拼错的单词。\n\n还有一种 ES6 的写法，这个我没在全局 window 上用过，没想到用 `with` 处理，所以\b也很喜欢：\n\n```js\nvar i = 0;\n\nwith({\n  get a() {\n    return ++i;\n  }\n}) {\n  if (a == 1 && a == 2 && a == 3)\n    console.log(\"wohoo\");\n}\n```\n\n### 数组法\n\n```js\na = [1,2,3];\na.join = a.shift;\nconsole.log(a == 1 && a == 2 && a == 3);\n```\n\n方法清新，只不过是不用字符串和对象实现了，换成了数组。其实思路也是大同小异，不过很有创意。\n\n### 编码法\n\n> 以下方案，都是编码障眼法\n\n我自认为这个是最流氓的写法：\n\n```js\nvar aﾠ = 1;\nvar a = 2;\nvar ﾠa = 3;\nif(aﾠ == 1 && a == 2 && ﾠa == 3) {\n    console.log(\"Why hello there!\")\n}\n```\n\n简言之，你看着是一个变量 `a`，其实是三个变量，就是编码不同而已，长得和 `a` 一样。\n\n虽然我知道这种写法，但是自己不会写...具体可以看 SOF 上的解答，因为我觉得没用，所以也不打算去了解学习。\n\n你以为这么写就完了？还有更变态的：\n\n```js\nvar a = 1;\nvar ﾠ1 = a;\nvar ﾠ2 = a;\nvar ﾠ3 = a;\nconsole.log( a ==ﾠ1 && a ==ﾠ2 && a ==ﾠ3 );\n```\n\n山不转水转，数字正常来讲是不能当作变量名字的，但是...你懂的...\n\n如果到这里就算完了，那怎么行？\n\n```js\nvar a = 9;\n\nif‌(a==1 && a== 2 && a==3)\n{\n    document.write(\"<h1>Yes, it is possible!😎</h1>\")\n}\n\nfunction if‌(){return true;}\n```\n\n流氓耍到底...看到这个解法时候，我真的是...\b😂\n\n这个一样，是特殊的字符 `if`，否则正常是不让重写保留词汇的...\n\n由于 js 不能操作双等号，所以就不粘贴了。如果是 Ruby，竟然还可以定义双等号...\n\n\n## 最完美答案\n\n这个答案\b我认为是最完美的，可惜 SOF 赞同只有\b几十票...可惜了。\n\n```js\na = 100000000000000000\nif (a == a+1 && a == a+2 && a == a+3){\n  console.log(\"Precision loss!\");\n}\n```\n\n","slug":"2018-2018-01-21-js-if-eq","published":1,"updated":"2019-07-18T17:19:07.224Z","comments":1,"photos":[],"link":"","_id":"cjy8y72sc003ls21d4zbjlye7","content":"<p>stackoverflow 上看到一道题 <a href=\"https://stackoverflow.com/questions/48270127/can-a-1-a-2-a-3-ever-evaluate-to-true\" target=\"_blank\" rel=\"noopener\">Can (a ==1 &amp;&amp; a== 2 &amp;&amp; a==3) ever evaluate to true?</a></p>\n<a id=\"more\"></a>\n\n<p>题目大致是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TODO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World!'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><p>这道题稍有点经验，并不难。</p>\n<blockquote>\n<p>主要是单年网易前端微专业有考过 <code>toString</code> 的题目。我被坑过…</p>\n</blockquote>\n<p>答案简单明了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">  n: <span class=\"number\">0</span>,</span><br><span class=\"line\">  valueOf: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ++<span class=\"keyword\">this</span>.n</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World!'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>当然，用 <code>valueOf</code> <code>toString</code> 都是可以的。</p>\n</blockquote>\n<p>看了下别人的回复，基本上主流都是这个思路，写法稍有不同而已。</p>\n<h2 id=\"其他的解法\"><a href=\"#其他的解法\" class=\"headerlink\" title=\"其他的解法\"></a>其他的解法</h2><h3 id=\"对象法\"><a href=\"#对象法\" class=\"headerlink\" title=\"对象法\"></a>对象法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">window</span>, <span class=\"string\">'a'</span>, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: function() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ++val;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'yay'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>和上面一样，也很容易想到，尤其是现在 MVVM 框架遍地开花的时代，就是书写量感觉有点大…还有个我自认为经常拼错的单词。</p>\n<p>还有一种 ES6 的写法，这个我没在全局 window 上用过，没想到用 <code>with</code> 处理，所以\b也很喜欢：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span>(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> a() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ++i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"wohoo\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数组法\"><a href=\"#数组法\" class=\"headerlink\" title=\"数组法\"></a>数组法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">a.join = a.shift;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n<p>方法清新，只不过是不用字符串和对象实现了，换成了数组。其实思路也是大同小异，不过很有创意。</p>\n<h3 id=\"编码法\"><a href=\"#编码法\" class=\"headerlink\" title=\"编码法\"></a>编码法</h3><blockquote>\n<p>以下方案，都是编码障眼法</p>\n</blockquote>\n<p>我自认为这个是最流氓的写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> aﾠ = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ﾠa = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(aﾠ == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; ﾠa == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Why hello there!\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简言之，你看着是一个变量 <code>a</code>，其实是三个变量，就是编码不同而已，长得和 <code>a</code> 一样。</p>\n<p>虽然我知道这种写法，但是自己不会写…具体可以看 SOF 上的解答，因为我觉得没用，所以也不打算去了解学习。</p>\n<p>你以为这么写就完了？还有更变态的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ﾠ<span class=\"number\">1</span> = a;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ﾠ<span class=\"number\">2</span> = a;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ﾠ<span class=\"number\">3</span> = a;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( a ==ﾠ<span class=\"number\">1</span> &amp;&amp; a ==ﾠ<span class=\"number\">2</span> &amp;&amp; a ==ﾠ<span class=\"number\">3</span> );</span><br></pre></td></tr></table></figure>\n\n<p>山不转水转，数字正常来讲是不能当作变量名字的，但是…你懂的…</p>\n<p>如果到这里就算完了，那怎么行？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>‌(a==<span class=\"number\">1</span> &amp;&amp; a== <span class=\"number\">2</span> &amp;&amp; a==<span class=\"number\">3</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;h1&gt;Yes, it is possible!😎&lt;/h1&gt;\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">if</span>‌(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>流氓耍到底…看到这个解法时候，我真的是…\b😂</p>\n<p>这个一样，是特殊的字符 <code>if</code>，否则正常是不让重写保留词汇的…</p>\n<p>由于 js 不能操作双等号，所以就不粘贴了。如果是 Ruby，竟然还可以定义双等号…</p>\n<h2 id=\"最完美答案\"><a href=\"#最完美答案\" class=\"headerlink\" title=\"最完美答案\"></a>最完美答案</h2><p>这个答案\b我认为是最完美的，可惜 SOF 赞同只有\b几十票…可惜了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">100000000000000000</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a == a+<span class=\"number\">1</span> &amp;&amp; a == a+<span class=\"number\">2</span> &amp;&amp; a == a+<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Precision loss!\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>stackoverflow 上看到一道题 <a href=\"https://stackoverflow.com/questions/48270127/can-a-1-a-2-a-3-ever-evaluate-to-true\" target=\"_blank\" rel=\"noopener\">Can (a ==1 &amp;&amp; a== 2 &amp;&amp; a==3) ever evaluate to true?</a></p>","more":"<p>题目大致是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TODO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World!'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><p>这道题稍有点经验，并不难。</p>\n<blockquote>\n<p>主要是单年网易前端微专业有考过 <code>toString</code> 的题目。我被坑过…</p>\n</blockquote>\n<p>答案简单明了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">  n: <span class=\"number\">0</span>,</span><br><span class=\"line\">  valueOf: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ++<span class=\"keyword\">this</span>.n</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World!'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>当然，用 <code>valueOf</code> <code>toString</code> 都是可以的。</p>\n</blockquote>\n<p>看了下别人的回复，基本上主流都是这个思路，写法稍有不同而已。</p>\n<h2 id=\"其他的解法\"><a href=\"#其他的解法\" class=\"headerlink\" title=\"其他的解法\"></a>其他的解法</h2><h3 id=\"对象法\"><a href=\"#对象法\" class=\"headerlink\" title=\"对象法\"></a>对象法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">window</span>, <span class=\"string\">'a'</span>, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: function() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ++val;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'yay'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>和上面一样，也很容易想到，尤其是现在 MVVM 框架遍地开花的时代，就是书写量感觉有点大…还有个我自认为经常拼错的单词。</p>\n<p>还有一种 ES6 的写法，这个我没在全局 window 上用过，没想到用 <code>with</code> 处理，所以\b也很喜欢：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span>(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> a() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ++i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"wohoo\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数组法\"><a href=\"#数组法\" class=\"headerlink\" title=\"数组法\"></a>数组法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">a.join = a.shift;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n<p>方法清新，只不过是不用字符串和对象实现了，换成了数组。其实思路也是大同小异，不过很有创意。</p>\n<h3 id=\"编码法\"><a href=\"#编码法\" class=\"headerlink\" title=\"编码法\"></a>编码法</h3><blockquote>\n<p>以下方案，都是编码障眼法</p>\n</blockquote>\n<p>我自认为这个是最流氓的写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> aﾠ = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ﾠa = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(aﾠ == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; ﾠa == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Why hello there!\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简言之，你看着是一个变量 <code>a</code>，其实是三个变量，就是编码不同而已，长得和 <code>a</code> 一样。</p>\n<p>虽然我知道这种写法，但是自己不会写…具体可以看 SOF 上的解答，因为我觉得没用，所以也不打算去了解学习。</p>\n<p>你以为这么写就完了？还有更变态的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ﾠ<span class=\"number\">1</span> = a;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ﾠ<span class=\"number\">2</span> = a;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ﾠ<span class=\"number\">3</span> = a;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( a ==ﾠ<span class=\"number\">1</span> &amp;&amp; a ==ﾠ<span class=\"number\">2</span> &amp;&amp; a ==ﾠ<span class=\"number\">3</span> );</span><br></pre></td></tr></table></figure>\n\n<p>山不转水转，数字正常来讲是不能当作变量名字的，但是…你懂的…</p>\n<p>如果到这里就算完了，那怎么行？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>‌(a==<span class=\"number\">1</span> &amp;&amp; a== <span class=\"number\">2</span> &amp;&amp; a==<span class=\"number\">3</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;h1&gt;Yes, it is possible!😎&lt;/h1&gt;\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">if</span>‌(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>流氓耍到底…看到这个解法时候，我真的是…\b😂</p>\n<p>这个一样，是特殊的字符 <code>if</code>，否则正常是不让重写保留词汇的…</p>\n<p>由于 js 不能操作双等号，所以就不粘贴了。如果是 Ruby，竟然还可以定义双等号…</p>\n<h2 id=\"最完美答案\"><a href=\"#最完美答案\" class=\"headerlink\" title=\"最完美答案\"></a>最完美答案</h2><p>这个答案\b我认为是最完美的，可惜 SOF 赞同只有\b几十票…可惜了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">100000000000000000</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a == a+<span class=\"number\">1</span> &amp;&amp; a == a+<span class=\"number\">2</span> &amp;&amp; a == a+<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Precision loss!\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"通过 js 让元素失去焦点","date":"2018-01-29T21:10:00.000Z","_content":"\n今天做项目，遇到一个需求。点击输入框获取焦点，按下回车后，执行搜索，失去焦点。\n\n<!-- more -->\n\n## 为什么会有这样的需求\n\n> 以下内容，不考虑部分输入法等兼容性问题\n\n项目大致要求是这样子的：\n\n* 页面提供搜索框，同时提供搜索历史方便直接选择；\n* 输入内容后，按回车，自动进行搜索，结果显示在下方区域。同时历史记录隐藏；\n* 再次进行输入内容时候，搜索结果移除，继续显示搜索记录提供方便选择。\n\n## 问题点\n\n梳理需求后，其实可以简单理解整个流程，用一个状态进行表示：\n\n> 搜索框获得焦点 => 显示历史记录\n>\n> 搜索框失去焦点 => 显示搜索结果\n\n这个状态改变的规则为：\n\n> 搜索框输入完毕（回车） => 搜索框失去焦点\n>\n> 搜索框被点击 => 搜索框获得焦点\n\n## 第一版代码\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>test</title>\n  <style>\n    * {\n      margin: 0;\n      padding: 0;\n      font-size: 16px;\n    }\n\n    h1 {\n      font-size: 18px;\n    }\n\n    .wrapper {\n      margin: 8px;\n    }\n\n    .search {\n      width: 100%;\n      border: 0;\n      border-bottom: 1px solid #333;\n      outline: none;\n    }\n  </style>\n</head>\n\n<body>\n  <div class=\"wrapper\">\n    <h1>搜索：</h1>\n    <input class=\"search\" id=\"J_Search\" type=\"search\" autocomplete=\"off\">\n  </div>\n\n  <div class=\"wrapper\" id=\"J_History\">\n    <h1>搜索历史：</h1>\n    <div>历史 bala bala...</div>\n  </div>\n\n  <div class=\"wrapper\" id=\"J_Result\">\n    <h1>搜索结果：</h1>\n    <div>结果 bala bala...</div>\n  </div>\n\n  <script>\n    let $search = document.querySelector('#J_Search')\n    let $history = document.querySelector('#J_History')\n    let $result = document.querySelector('#J_Result')\n\n    // 搜索框数据提交\n    const searchSubmit = word => {\n      $history.style.display = 'none'\n      $result.style.display = 'block'\n    }\n\n    // 搜索框获得焦点\n    $search.addEventListener('focus', () => {\n      $history.style.display = 'block'\n      $result.style.display = 'none'\n    })\n\n    // 搜索框输入\n    $search.addEventListener('keyup', e => {\n      if (e.keyCode === 13) {\n        // 判断按回车键\n        searchSubmit(e.target.value)\n      }\n    })\n\n    // 默认显示形态\n    $search.focus()\n  </script>\n</body>\n\n</html>\n```\n\n整体逻辑没问题，唯独就是，输入完毕提交后，输入框不会失去焦点，也就无法通过点击再次出发 `focus` 事件了。\n\n## 第二版调整\n\n考虑到要让输入框失去焦点，采用增加一个元素，并让其获得焦点即可。\n\n但是增加的元素要有一些要求：\n\n* 这个元素能获得焦点，那就得是控件元素\n* 这个元素必须在页面内，还必须得显示，否则不能获得焦点\n\n综合这两点，我选择 `input-radio` 控件，比较小巧不明显，而且不会触发移动端的输入法，同时，只能定位到屏幕外侧。\n\n```js\n// new\n// 失去焦点元素\nconst createBlurElment = () => {\n  let $input = document.createElement('input')\n  $input.type = 'radio'\n  $input.style.position = 'absolute'\n  $input.style.top = '-1000px'\n  $input.style.height = '0'\n  document.body.appendChild($input)\n  return $input\n}\n\nlet $search = document.querySelector('#J_Search')\nlet $history = document.querySelector('#J_History')\nlet $result = document.querySelector('#J_Result')\n// new\nlet $blurElement = createBlurElment()\n\n// 搜索框数据提交\nconst searchSubmit = word => {\n  $history.style.display = 'none'\n  $result.style.display = 'block'\n}\n\n// 搜索框获得焦点\n$search.addEventListener('focus', () => {\n  $history.style.display = 'block'\n  $result.style.display = 'none'\n})\n\n// 搜索框输入\n$search.addEventListener('keyup', e => {\n  if (e.keyCode === 13) {\n    // 判断按回车键\n    searchSubmit(e.target.value)\n    // new\n    $blurElement.focus()\n  }\n})\n\n// 默认显示形态\n$search.focus()\n```\n\n这样就曲线救国，通过 js 让指定元素失去焦点了。\n","source":"_posts/2018/2018-01-29-js-focus.md","raw":"---\nlayout: post\ntitle: \"通过 js 让元素失去焦点\"\ndate: 2018-01-29 21:10:00 GMT+0000\ncategories: [前端]\ntags:  [js, focus, blur]\n---\n\n今天做项目，遇到一个需求。点击输入框获取焦点，按下回车后，执行搜索，失去焦点。\n\n<!-- more -->\n\n## 为什么会有这样的需求\n\n> 以下内容，不考虑部分输入法等兼容性问题\n\n项目大致要求是这样子的：\n\n* 页面提供搜索框，同时提供搜索历史方便直接选择；\n* 输入内容后，按回车，自动进行搜索，结果显示在下方区域。同时历史记录隐藏；\n* 再次进行输入内容时候，搜索结果移除，继续显示搜索记录提供方便选择。\n\n## 问题点\n\n梳理需求后，其实可以简单理解整个流程，用一个状态进行表示：\n\n> 搜索框获得焦点 => 显示历史记录\n>\n> 搜索框失去焦点 => 显示搜索结果\n\n这个状态改变的规则为：\n\n> 搜索框输入完毕（回车） => 搜索框失去焦点\n>\n> 搜索框被点击 => 搜索框获得焦点\n\n## 第一版代码\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>test</title>\n  <style>\n    * {\n      margin: 0;\n      padding: 0;\n      font-size: 16px;\n    }\n\n    h1 {\n      font-size: 18px;\n    }\n\n    .wrapper {\n      margin: 8px;\n    }\n\n    .search {\n      width: 100%;\n      border: 0;\n      border-bottom: 1px solid #333;\n      outline: none;\n    }\n  </style>\n</head>\n\n<body>\n  <div class=\"wrapper\">\n    <h1>搜索：</h1>\n    <input class=\"search\" id=\"J_Search\" type=\"search\" autocomplete=\"off\">\n  </div>\n\n  <div class=\"wrapper\" id=\"J_History\">\n    <h1>搜索历史：</h1>\n    <div>历史 bala bala...</div>\n  </div>\n\n  <div class=\"wrapper\" id=\"J_Result\">\n    <h1>搜索结果：</h1>\n    <div>结果 bala bala...</div>\n  </div>\n\n  <script>\n    let $search = document.querySelector('#J_Search')\n    let $history = document.querySelector('#J_History')\n    let $result = document.querySelector('#J_Result')\n\n    // 搜索框数据提交\n    const searchSubmit = word => {\n      $history.style.display = 'none'\n      $result.style.display = 'block'\n    }\n\n    // 搜索框获得焦点\n    $search.addEventListener('focus', () => {\n      $history.style.display = 'block'\n      $result.style.display = 'none'\n    })\n\n    // 搜索框输入\n    $search.addEventListener('keyup', e => {\n      if (e.keyCode === 13) {\n        // 判断按回车键\n        searchSubmit(e.target.value)\n      }\n    })\n\n    // 默认显示形态\n    $search.focus()\n  </script>\n</body>\n\n</html>\n```\n\n整体逻辑没问题，唯独就是，输入完毕提交后，输入框不会失去焦点，也就无法通过点击再次出发 `focus` 事件了。\n\n## 第二版调整\n\n考虑到要让输入框失去焦点，采用增加一个元素，并让其获得焦点即可。\n\n但是增加的元素要有一些要求：\n\n* 这个元素能获得焦点，那就得是控件元素\n* 这个元素必须在页面内，还必须得显示，否则不能获得焦点\n\n综合这两点，我选择 `input-radio` 控件，比较小巧不明显，而且不会触发移动端的输入法，同时，只能定位到屏幕外侧。\n\n```js\n// new\n// 失去焦点元素\nconst createBlurElment = () => {\n  let $input = document.createElement('input')\n  $input.type = 'radio'\n  $input.style.position = 'absolute'\n  $input.style.top = '-1000px'\n  $input.style.height = '0'\n  document.body.appendChild($input)\n  return $input\n}\n\nlet $search = document.querySelector('#J_Search')\nlet $history = document.querySelector('#J_History')\nlet $result = document.querySelector('#J_Result')\n// new\nlet $blurElement = createBlurElment()\n\n// 搜索框数据提交\nconst searchSubmit = word => {\n  $history.style.display = 'none'\n  $result.style.display = 'block'\n}\n\n// 搜索框获得焦点\n$search.addEventListener('focus', () => {\n  $history.style.display = 'block'\n  $result.style.display = 'none'\n})\n\n// 搜索框输入\n$search.addEventListener('keyup', e => {\n  if (e.keyCode === 13) {\n    // 判断按回车键\n    searchSubmit(e.target.value)\n    // new\n    $blurElement.focus()\n  }\n})\n\n// 默认显示形态\n$search.focus()\n```\n\n这样就曲线救国，通过 js 让指定元素失去焦点了。\n","slug":"2018-2018-01-29-js-focus","published":1,"updated":"2019-07-18T17:19:07.232Z","comments":1,"photos":[],"link":"","_id":"cjy8y72sd003ns21ddtiertzl","content":"<p>今天做项目，遇到一个需求。点击输入框获取焦点，按下回车后，执行搜索，失去焦点。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"为什么会有这样的需求\"><a href=\"#为什么会有这样的需求\" class=\"headerlink\" title=\"为什么会有这样的需求\"></a>为什么会有这样的需求</h2><blockquote>\n<p>以下内容，不考虑部分输入法等兼容性问题</p>\n</blockquote>\n<p>项目大致要求是这样子的：</p>\n<ul>\n<li>页面提供搜索框，同时提供搜索历史方便直接选择；</li>\n<li>输入内容后，按回车，自动进行搜索，结果显示在下方区域。同时历史记录隐藏；</li>\n<li>再次进行输入内容时候，搜索结果移除，继续显示搜索记录提供方便选择。</li>\n</ul>\n<h2 id=\"问题点\"><a href=\"#问题点\" class=\"headerlink\" title=\"问题点\"></a>问题点</h2><p>梳理需求后，其实可以简单理解整个流程，用一个状态进行表示：</p>\n<blockquote>\n<p>搜索框获得焦点 =&gt; 显示历史记录</p>\n<p>搜索框失去焦点 =&gt; 显示搜索结果</p>\n</blockquote>\n<p>这个状态改变的规则为：</p>\n<blockquote>\n<p>搜索框输入完毕（回车） =&gt; 搜索框失去焦点</p>\n<p>搜索框被点击 =&gt; 搜索框获得焦点</p>\n</blockquote>\n<h2 id=\"第一版代码\"><a href=\"#第一版代码\" class=\"headerlink\" title=\"第一版代码\"></a>第一版代码</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    * &#123;</span><br><span class=\"line\">      margin: 0;</span><br><span class=\"line\">      padding: 0;</span><br><span class=\"line\">      font-size: 16px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    h1 &#123;</span><br><span class=\"line\">      font-size: 18px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .wrapper &#123;</span><br><span class=\"line\">      margin: 8px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .search &#123;</span><br><span class=\"line\">      width: 100%;</span><br><span class=\"line\">      border: 0;</span><br><span class=\"line\">      border-bottom: 1px solid #333;</span><br><span class=\"line\">      outline: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>搜索：<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Search\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"search\"</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">\"off\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_History\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>搜索历史：<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>历史 bala bala...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Result\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>搜索结果：<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>结果 bala bala...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> $search = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Search'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> $history = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_History'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> $result = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Result'</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 搜索框数据提交</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> searchSubmit = <span class=\"function\"><span class=\"params\">word</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      $history.style.display = <span class=\"string\">'none'</span></span></span><br><span class=\"line\"><span class=\"javascript\">      $result.style.display = <span class=\"string\">'block'</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 搜索框获得焦点</span></span></span><br><span class=\"line\"><span class=\"javascript\">    $search.addEventListener(<span class=\"string\">'focus'</span>, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      $history.style.display = <span class=\"string\">'block'</span></span></span><br><span class=\"line\"><span class=\"javascript\">      $result.style.display = <span class=\"string\">'none'</span></span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 搜索框输入</span></span></span><br><span class=\"line\"><span class=\"javascript\">    $search.addEventListener(<span class=\"string\">'keyup'</span>, e =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">if</span> (e.keyCode === <span class=\"number\">13</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 判断按回车键</span></span></span><br><span class=\"line\">        searchSubmit(e.target.value)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 默认显示形态</span></span></span><br><span class=\"line\">    $search.focus()</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>整体逻辑没问题，唯独就是，输入完毕提交后，输入框不会失去焦点，也就无法通过点击再次出发 <code>focus</code> 事件了。</p>\n<h2 id=\"第二版调整\"><a href=\"#第二版调整\" class=\"headerlink\" title=\"第二版调整\"></a>第二版调整</h2><p>考虑到要让输入框失去焦点，采用增加一个元素，并让其获得焦点即可。</p>\n<p>但是增加的元素要有一些要求：</p>\n<ul>\n<li>这个元素能获得焦点，那就得是控件元素</li>\n<li>这个元素必须在页面内，还必须得显示，否则不能获得焦点</li>\n</ul>\n<p>综合这两点，我选择 <code>input-radio</code> 控件，比较小巧不明显，而且不会触发移动端的输入法，同时，只能定位到屏幕外侧。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// new</span></span><br><span class=\"line\"><span class=\"comment\">// 失去焦点元素</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> createBlurElment = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> $input = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'input'</span>)</span><br><span class=\"line\">  $input.type = <span class=\"string\">'radio'</span></span><br><span class=\"line\">  $input.style.position = <span class=\"string\">'absolute'</span></span><br><span class=\"line\">  $input.style.top = <span class=\"string\">'-1000px'</span></span><br><span class=\"line\">  $input.style.height = <span class=\"string\">'0'</span></span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild($input)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> $input</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> $search = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Search'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> $history = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_History'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> $result = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Result'</span>)</span><br><span class=\"line\"><span class=\"comment\">// new</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> $blurElement = createBlurElment()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 搜索框数据提交</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> searchSubmit = <span class=\"function\"><span class=\"params\">word</span> =&gt;</span> &#123;</span><br><span class=\"line\">  $history.style.display = <span class=\"string\">'none'</span></span><br><span class=\"line\">  $result.style.display = <span class=\"string\">'block'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 搜索框获得焦点</span></span><br><span class=\"line\">$search.addEventListener(<span class=\"string\">'focus'</span>, () =&gt; &#123;</span><br><span class=\"line\">  $history.style.display = <span class=\"string\">'block'</span></span><br><span class=\"line\">  $result.style.display = <span class=\"string\">'none'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 搜索框输入</span></span><br><span class=\"line\">$search.addEventListener(<span class=\"string\">'keyup'</span>, e =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.keyCode === <span class=\"number\">13</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断按回车键</span></span><br><span class=\"line\">    searchSubmit(e.target.value)</span><br><span class=\"line\">    <span class=\"comment\">// new</span></span><br><span class=\"line\">    $blurElement.focus()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 默认显示形态</span></span><br><span class=\"line\">$search.focus()</span><br></pre></td></tr></table></figure>\n\n<p>这样就曲线救国，通过 js 让指定元素失去焦点了。</p>\n","site":{"data":{}},"excerpt":"<p>今天做项目，遇到一个需求。点击输入框获取焦点，按下回车后，执行搜索，失去焦点。</p>","more":"<h2 id=\"为什么会有这样的需求\"><a href=\"#为什么会有这样的需求\" class=\"headerlink\" title=\"为什么会有这样的需求\"></a>为什么会有这样的需求</h2><blockquote>\n<p>以下内容，不考虑部分输入法等兼容性问题</p>\n</blockquote>\n<p>项目大致要求是这样子的：</p>\n<ul>\n<li>页面提供搜索框，同时提供搜索历史方便直接选择；</li>\n<li>输入内容后，按回车，自动进行搜索，结果显示在下方区域。同时历史记录隐藏；</li>\n<li>再次进行输入内容时候，搜索结果移除，继续显示搜索记录提供方便选择。</li>\n</ul>\n<h2 id=\"问题点\"><a href=\"#问题点\" class=\"headerlink\" title=\"问题点\"></a>问题点</h2><p>梳理需求后，其实可以简单理解整个流程，用一个状态进行表示：</p>\n<blockquote>\n<p>搜索框获得焦点 =&gt; 显示历史记录</p>\n<p>搜索框失去焦点 =&gt; 显示搜索结果</p>\n</blockquote>\n<p>这个状态改变的规则为：</p>\n<blockquote>\n<p>搜索框输入完毕（回车） =&gt; 搜索框失去焦点</p>\n<p>搜索框被点击 =&gt; 搜索框获得焦点</p>\n</blockquote>\n<h2 id=\"第一版代码\"><a href=\"#第一版代码\" class=\"headerlink\" title=\"第一版代码\"></a>第一版代码</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    * &#123;</span><br><span class=\"line\">      margin: 0;</span><br><span class=\"line\">      padding: 0;</span><br><span class=\"line\">      font-size: 16px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    h1 &#123;</span><br><span class=\"line\">      font-size: 18px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .wrapper &#123;</span><br><span class=\"line\">      margin: 8px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .search &#123;</span><br><span class=\"line\">      width: 100%;</span><br><span class=\"line\">      border: 0;</span><br><span class=\"line\">      border-bottom: 1px solid #333;</span><br><span class=\"line\">      outline: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>搜索：<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Search\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"search\"</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">\"off\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_History\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>搜索历史：<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>历史 bala bala...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Result\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>搜索结果：<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>结果 bala bala...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> $search = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Search'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> $history = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_History'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> $result = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Result'</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 搜索框数据提交</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> searchSubmit = <span class=\"function\"><span class=\"params\">word</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      $history.style.display = <span class=\"string\">'none'</span></span></span><br><span class=\"line\"><span class=\"javascript\">      $result.style.display = <span class=\"string\">'block'</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 搜索框获得焦点</span></span></span><br><span class=\"line\"><span class=\"javascript\">    $search.addEventListener(<span class=\"string\">'focus'</span>, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      $history.style.display = <span class=\"string\">'block'</span></span></span><br><span class=\"line\"><span class=\"javascript\">      $result.style.display = <span class=\"string\">'none'</span></span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 搜索框输入</span></span></span><br><span class=\"line\"><span class=\"javascript\">    $search.addEventListener(<span class=\"string\">'keyup'</span>, e =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">if</span> (e.keyCode === <span class=\"number\">13</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 判断按回车键</span></span></span><br><span class=\"line\">        searchSubmit(e.target.value)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 默认显示形态</span></span></span><br><span class=\"line\">    $search.focus()</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>整体逻辑没问题，唯独就是，输入完毕提交后，输入框不会失去焦点，也就无法通过点击再次出发 <code>focus</code> 事件了。</p>\n<h2 id=\"第二版调整\"><a href=\"#第二版调整\" class=\"headerlink\" title=\"第二版调整\"></a>第二版调整</h2><p>考虑到要让输入框失去焦点，采用增加一个元素，并让其获得焦点即可。</p>\n<p>但是增加的元素要有一些要求：</p>\n<ul>\n<li>这个元素能获得焦点，那就得是控件元素</li>\n<li>这个元素必须在页面内，还必须得显示，否则不能获得焦点</li>\n</ul>\n<p>综合这两点，我选择 <code>input-radio</code> 控件，比较小巧不明显，而且不会触发移动端的输入法，同时，只能定位到屏幕外侧。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// new</span></span><br><span class=\"line\"><span class=\"comment\">// 失去焦点元素</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> createBlurElment = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> $input = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'input'</span>)</span><br><span class=\"line\">  $input.type = <span class=\"string\">'radio'</span></span><br><span class=\"line\">  $input.style.position = <span class=\"string\">'absolute'</span></span><br><span class=\"line\">  $input.style.top = <span class=\"string\">'-1000px'</span></span><br><span class=\"line\">  $input.style.height = <span class=\"string\">'0'</span></span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild($input)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> $input</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> $search = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Search'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> $history = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_History'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> $result = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Result'</span>)</span><br><span class=\"line\"><span class=\"comment\">// new</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> $blurElement = createBlurElment()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 搜索框数据提交</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> searchSubmit = <span class=\"function\"><span class=\"params\">word</span> =&gt;</span> &#123;</span><br><span class=\"line\">  $history.style.display = <span class=\"string\">'none'</span></span><br><span class=\"line\">  $result.style.display = <span class=\"string\">'block'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 搜索框获得焦点</span></span><br><span class=\"line\">$search.addEventListener(<span class=\"string\">'focus'</span>, () =&gt; &#123;</span><br><span class=\"line\">  $history.style.display = <span class=\"string\">'block'</span></span><br><span class=\"line\">  $result.style.display = <span class=\"string\">'none'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 搜索框输入</span></span><br><span class=\"line\">$search.addEventListener(<span class=\"string\">'keyup'</span>, e =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.keyCode === <span class=\"number\">13</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断按回车键</span></span><br><span class=\"line\">    searchSubmit(e.target.value)</span><br><span class=\"line\">    <span class=\"comment\">// new</span></span><br><span class=\"line\">    $blurElement.focus()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 默认显示形态</span></span><br><span class=\"line\">$search.focus()</span><br></pre></td></tr></table></figure>\n\n<p>这样就曲线救国，通过 js 让指定元素失去焦点了。</p>"},{"layout":"post","title":"使用 webpack 编译 less 后 z-index 值改变处理","date":"2018-02-10T17:10:00.000Z","_content":"\n在一个老项目中新增加了功能，使用 webpack 编译后，发现其 `z-index` 被改变了，原本有的组件设置类似为 999 的都被优化为 1～9 了。看来得在插件上找问题。\n\n老项目仅仅是用 webpack 进行打包，同时使用了 less 进行开发。首先可以判断不是 less 转码的问题，否则 less 就太乱来了。\n\n剩下就是在js 中完成 css 的抽取，以及 css 的压缩优化。\n\n<!-- more -->\n\n## 问题处理\n\n重点需要关注 css 优化部分，使用的是 `optimize-css-assets-webpack-plugin` 插件，插件内部调用 `cssnano` 处理器。\n\n项目编译配置如下：\n\n```js\nlet OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin')\n// ...\n\nnew OptimizeCssAssetsPlugin({\n    assetNameRegExp: /\\.css$/g,\n    cssProcessor: require('cssnano'),\n    cssProcessorOptions: {\n        discardComments: {removeAll: true},\n        autoprefixer: {add: true, browsers: ['last 2 versions']},\n        reduceIdents: false\n     },\n    canPrint: true\n})\n```\n\n查阅 [optimize-css-assets-webpack-plugin](https://github.com/NMFR/optimize-css-assets-webpack-plugin) 简陋的文档：\n\n![image](https://cdn0.yukapril.com/blog/2018-02-10-webpack-less.png-wm.black)\n\n\n意思是说，啥都没做，只是把 `cssProcessorOptions` 的配置传给处理器 `cssProcessor` 而已。\n\n再查阅 [cssnano](http://cssnano.co/guides/optimisations/) 文档：\n\n可以看到，默认情况下，`autoprefixer` `postcss-discard-unused` `postcss-merge-idents` `postcss-reduce-idents` `postcss-zindex` 都是不开启的，但是在项目中莫名其妙默认开启了。\n\n其中 `autoprefixer` 确实需要，所以进行了配置。`postcss-discard-unused` 和 `postcss-merge-idents` 没有什么危害，也就没有注意到。\n\n但是曾经遇到过 `@keyframes` 样式被改名的情况（效果参见[这里](http://cssnano.co/optimisations/reduceidents/)），所以特意进行配置 `false` 了。\n\n所以这次还应该进行配置，增加一条：\n\n```js\nnew OptimizeCssAssetsPlugin({\n    assetNameRegExp: /\\.css$/g,\n    cssProcessor: require('cssnano'),\n    cssProcessorOptions: {\n        discardComments: {removeAll: true},\n        autoprefixer: {add: true, browsers: ['last 2 versions']},\n        reduceIdents: false,\n        zindex:false\n     },\n    canPrint: true\n})\n```\n\n这样问题就解决了。\n\n## 后记\n\n仔细检查了下，项目中使用的 `cssnano` 是 3.10.0 版本。也就是说，v3 系列默认都是开启的，文档看的是 v4 的。可以参考这个 [issue](https://github.com/ben-eb/cssnano/issues/358)。\n\n同时，3.10.0 源码中也有注意到：\n\n```js\n// Prevent PostCSS from throwing when safe is defined\nif (options.safe === true) {\n    options.isSafe = true;\n    options.safe = null;\n}\n\nconst safe = options.isSafe;\n```\n\n```js\nopts = assign({},\n    defaultOptions[plugin],\n    safe ? safeOptions[plugin] : null,\n    opts\n);\n```\n\n如果在参数里面加上 `safe/isSafe` 字段，也可以解决此问题。`safe` 是老版本遗留下来的字段，`isSafe`是新字段而已。","source":"_posts/2018/2018-02-10-less-zindex.md","raw":"---\nlayout: post\ntitle: \"使用 webpack 编译 less 后 z-index 值改变处理\"\ndate: 2018-02-10 17:10:00 GMT+0000\ncategories: [前端]\ntags:  [webpack, less, OptimizeCssAssetsPlugin, cssnano]\n---\n\n在一个老项目中新增加了功能，使用 webpack 编译后，发现其 `z-index` 被改变了，原本有的组件设置类似为 999 的都被优化为 1～9 了。看来得在插件上找问题。\n\n老项目仅仅是用 webpack 进行打包，同时使用了 less 进行开发。首先可以判断不是 less 转码的问题，否则 less 就太乱来了。\n\n剩下就是在js 中完成 css 的抽取，以及 css 的压缩优化。\n\n<!-- more -->\n\n## 问题处理\n\n重点需要关注 css 优化部分，使用的是 `optimize-css-assets-webpack-plugin` 插件，插件内部调用 `cssnano` 处理器。\n\n项目编译配置如下：\n\n```js\nlet OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin')\n// ...\n\nnew OptimizeCssAssetsPlugin({\n    assetNameRegExp: /\\.css$/g,\n    cssProcessor: require('cssnano'),\n    cssProcessorOptions: {\n        discardComments: {removeAll: true},\n        autoprefixer: {add: true, browsers: ['last 2 versions']},\n        reduceIdents: false\n     },\n    canPrint: true\n})\n```\n\n查阅 [optimize-css-assets-webpack-plugin](https://github.com/NMFR/optimize-css-assets-webpack-plugin) 简陋的文档：\n\n![image](https://cdn0.yukapril.com/blog/2018-02-10-webpack-less.png-wm.black)\n\n\n意思是说，啥都没做，只是把 `cssProcessorOptions` 的配置传给处理器 `cssProcessor` 而已。\n\n再查阅 [cssnano](http://cssnano.co/guides/optimisations/) 文档：\n\n可以看到，默认情况下，`autoprefixer` `postcss-discard-unused` `postcss-merge-idents` `postcss-reduce-idents` `postcss-zindex` 都是不开启的，但是在项目中莫名其妙默认开启了。\n\n其中 `autoprefixer` 确实需要，所以进行了配置。`postcss-discard-unused` 和 `postcss-merge-idents` 没有什么危害，也就没有注意到。\n\n但是曾经遇到过 `@keyframes` 样式被改名的情况（效果参见[这里](http://cssnano.co/optimisations/reduceidents/)），所以特意进行配置 `false` 了。\n\n所以这次还应该进行配置，增加一条：\n\n```js\nnew OptimizeCssAssetsPlugin({\n    assetNameRegExp: /\\.css$/g,\n    cssProcessor: require('cssnano'),\n    cssProcessorOptions: {\n        discardComments: {removeAll: true},\n        autoprefixer: {add: true, browsers: ['last 2 versions']},\n        reduceIdents: false,\n        zindex:false\n     },\n    canPrint: true\n})\n```\n\n这样问题就解决了。\n\n## 后记\n\n仔细检查了下，项目中使用的 `cssnano` 是 3.10.0 版本。也就是说，v3 系列默认都是开启的，文档看的是 v4 的。可以参考这个 [issue](https://github.com/ben-eb/cssnano/issues/358)。\n\n同时，3.10.0 源码中也有注意到：\n\n```js\n// Prevent PostCSS from throwing when safe is defined\nif (options.safe === true) {\n    options.isSafe = true;\n    options.safe = null;\n}\n\nconst safe = options.isSafe;\n```\n\n```js\nopts = assign({},\n    defaultOptions[plugin],\n    safe ? safeOptions[plugin] : null,\n    opts\n);\n```\n\n如果在参数里面加上 `safe/isSafe` 字段，也可以解决此问题。`safe` 是老版本遗留下来的字段，`isSafe`是新字段而已。","slug":"2018-2018-02-10-less-zindex","published":1,"updated":"2019-07-18T17:19:07.295Z","comments":1,"photos":[],"link":"","_id":"cjy8y72sf003qs21dw9ps6g5d","content":"<p>在一个老项目中新增加了功能，使用 webpack 编译后，发现其 <code>z-index</code> 被改变了，原本有的组件设置类似为 999 的都被优化为 1～9 了。看来得在插件上找问题。</p>\n<p>老项目仅仅是用 webpack 进行打包，同时使用了 less 进行开发。首先可以判断不是 less 转码的问题，否则 less 就太乱来了。</p>\n<p>剩下就是在js 中完成 css 的抽取，以及 css 的压缩优化。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"问题处理\"><a href=\"#问题处理\" class=\"headerlink\" title=\"问题处理\"></a>问题处理</h2><p>重点需要关注 css 优化部分，使用的是 <code>optimize-css-assets-webpack-plugin</code> 插件，插件内部调用 <code>cssnano</code> 处理器。</p>\n<p>项目编译配置如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> OptimizeCssAssetsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'optimize-css-assets-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> OptimizeCssAssetsPlugin(&#123;</span><br><span class=\"line\">    assetNameRegExp: <span class=\"regexp\">/\\.css$/g</span>,</span><br><span class=\"line\">    cssProcessor: <span class=\"built_in\">require</span>(<span class=\"string\">'cssnano'</span>),</span><br><span class=\"line\">    cssProcessorOptions: &#123;</span><br><span class=\"line\">        discardComments: &#123;<span class=\"attr\">removeAll</span>: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">        autoprefixer: &#123;<span class=\"attr\">add</span>: <span class=\"literal\">true</span>, <span class=\"attr\">browsers</span>: [<span class=\"string\">'last 2 versions'</span>]&#125;,</span><br><span class=\"line\">        reduceIdents: <span class=\"literal\">false</span></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">    canPrint: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>查阅 <a href=\"https://github.com/NMFR/optimize-css-assets-webpack-plugin\" target=\"_blank\" rel=\"noopener\">optimize-css-assets-webpack-plugin</a> 简陋的文档：</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-02-10-webpack-less.png-wm.black\" alt=\"image\"></p>\n<p>意思是说，啥都没做，只是把 <code>cssProcessorOptions</code> 的配置传给处理器 <code>cssProcessor</code> 而已。</p>\n<p>再查阅 <a href=\"http://cssnano.co/guides/optimisations/\" target=\"_blank\" rel=\"noopener\">cssnano</a> 文档：</p>\n<p>可以看到，默认情况下，<code>autoprefixer</code> <code>postcss-discard-unused</code> <code>postcss-merge-idents</code> <code>postcss-reduce-idents</code> <code>postcss-zindex</code> 都是不开启的，但是在项目中莫名其妙默认开启了。</p>\n<p>其中 <code>autoprefixer</code> 确实需要，所以进行了配置。<code>postcss-discard-unused</code> 和 <code>postcss-merge-idents</code> 没有什么危害，也就没有注意到。</p>\n<p>但是曾经遇到过 <code>@keyframes</code> 样式被改名的情况（效果参见<a href=\"http://cssnano.co/optimisations/reduceidents/\" target=\"_blank\" rel=\"noopener\">这里</a>），所以特意进行配置 <code>false</code> 了。</p>\n<p>所以这次还应该进行配置，增加一条：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> OptimizeCssAssetsPlugin(&#123;</span><br><span class=\"line\">    assetNameRegExp: <span class=\"regexp\">/\\.css$/g</span>,</span><br><span class=\"line\">    cssProcessor: <span class=\"built_in\">require</span>(<span class=\"string\">'cssnano'</span>),</span><br><span class=\"line\">    cssProcessorOptions: &#123;</span><br><span class=\"line\">        discardComments: &#123;<span class=\"attr\">removeAll</span>: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">        autoprefixer: &#123;<span class=\"attr\">add</span>: <span class=\"literal\">true</span>, <span class=\"attr\">browsers</span>: [<span class=\"string\">'last 2 versions'</span>]&#125;,</span><br><span class=\"line\">        reduceIdents: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        zindex:<span class=\"literal\">false</span></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">    canPrint: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这样问题就解决了。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>仔细检查了下，项目中使用的 <code>cssnano</code> 是 3.10.0 版本。也就是说，v3 系列默认都是开启的，文档看的是 v4 的。可以参考这个 <a href=\"https://github.com/ben-eb/cssnano/issues/358\" target=\"_blank\" rel=\"noopener\">issue</a>。</p>\n<p>同时，3.10.0 源码中也有注意到：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Prevent PostCSS from throwing when safe is defined</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (options.safe === <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    options.isSafe = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    options.safe = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> safe = options.isSafe;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opts = assign(&#123;&#125;,</span><br><span class=\"line\">    defaultOptions[plugin],</span><br><span class=\"line\">    safe ? safeOptions[plugin] : <span class=\"literal\">null</span>,</span><br><span class=\"line\">    opts</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>如果在参数里面加上 <code>safe/isSafe</code> 字段，也可以解决此问题。<code>safe</code> 是老版本遗留下来的字段，<code>isSafe</code>是新字段而已。</p>\n","site":{"data":{}},"excerpt":"<p>在一个老项目中新增加了功能，使用 webpack 编译后，发现其 <code>z-index</code> 被改变了，原本有的组件设置类似为 999 的都被优化为 1～9 了。看来得在插件上找问题。</p>\n<p>老项目仅仅是用 webpack 进行打包，同时使用了 less 进行开发。首先可以判断不是 less 转码的问题，否则 less 就太乱来了。</p>\n<p>剩下就是在js 中完成 css 的抽取，以及 css 的压缩优化。</p>","more":"<h2 id=\"问题处理\"><a href=\"#问题处理\" class=\"headerlink\" title=\"问题处理\"></a>问题处理</h2><p>重点需要关注 css 优化部分，使用的是 <code>optimize-css-assets-webpack-plugin</code> 插件，插件内部调用 <code>cssnano</code> 处理器。</p>\n<p>项目编译配置如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> OptimizeCssAssetsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'optimize-css-assets-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> OptimizeCssAssetsPlugin(&#123;</span><br><span class=\"line\">    assetNameRegExp: <span class=\"regexp\">/\\.css$/g</span>,</span><br><span class=\"line\">    cssProcessor: <span class=\"built_in\">require</span>(<span class=\"string\">'cssnano'</span>),</span><br><span class=\"line\">    cssProcessorOptions: &#123;</span><br><span class=\"line\">        discardComments: &#123;<span class=\"attr\">removeAll</span>: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">        autoprefixer: &#123;<span class=\"attr\">add</span>: <span class=\"literal\">true</span>, <span class=\"attr\">browsers</span>: [<span class=\"string\">'last 2 versions'</span>]&#125;,</span><br><span class=\"line\">        reduceIdents: <span class=\"literal\">false</span></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">    canPrint: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>查阅 <a href=\"https://github.com/NMFR/optimize-css-assets-webpack-plugin\" target=\"_blank\" rel=\"noopener\">optimize-css-assets-webpack-plugin</a> 简陋的文档：</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-02-10-webpack-less.png-wm.black\" alt=\"image\"></p>\n<p>意思是说，啥都没做，只是把 <code>cssProcessorOptions</code> 的配置传给处理器 <code>cssProcessor</code> 而已。</p>\n<p>再查阅 <a href=\"http://cssnano.co/guides/optimisations/\" target=\"_blank\" rel=\"noopener\">cssnano</a> 文档：</p>\n<p>可以看到，默认情况下，<code>autoprefixer</code> <code>postcss-discard-unused</code> <code>postcss-merge-idents</code> <code>postcss-reduce-idents</code> <code>postcss-zindex</code> 都是不开启的，但是在项目中莫名其妙默认开启了。</p>\n<p>其中 <code>autoprefixer</code> 确实需要，所以进行了配置。<code>postcss-discard-unused</code> 和 <code>postcss-merge-idents</code> 没有什么危害，也就没有注意到。</p>\n<p>但是曾经遇到过 <code>@keyframes</code> 样式被改名的情况（效果参见<a href=\"http://cssnano.co/optimisations/reduceidents/\" target=\"_blank\" rel=\"noopener\">这里</a>），所以特意进行配置 <code>false</code> 了。</p>\n<p>所以这次还应该进行配置，增加一条：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> OptimizeCssAssetsPlugin(&#123;</span><br><span class=\"line\">    assetNameRegExp: <span class=\"regexp\">/\\.css$/g</span>,</span><br><span class=\"line\">    cssProcessor: <span class=\"built_in\">require</span>(<span class=\"string\">'cssnano'</span>),</span><br><span class=\"line\">    cssProcessorOptions: &#123;</span><br><span class=\"line\">        discardComments: &#123;<span class=\"attr\">removeAll</span>: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">        autoprefixer: &#123;<span class=\"attr\">add</span>: <span class=\"literal\">true</span>, <span class=\"attr\">browsers</span>: [<span class=\"string\">'last 2 versions'</span>]&#125;,</span><br><span class=\"line\">        reduceIdents: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        zindex:<span class=\"literal\">false</span></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">    canPrint: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这样问题就解决了。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>仔细检查了下，项目中使用的 <code>cssnano</code> 是 3.10.0 版本。也就是说，v3 系列默认都是开启的，文档看的是 v4 的。可以参考这个 <a href=\"https://github.com/ben-eb/cssnano/issues/358\" target=\"_blank\" rel=\"noopener\">issue</a>。</p>\n<p>同时，3.10.0 源码中也有注意到：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Prevent PostCSS from throwing when safe is defined</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (options.safe === <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    options.isSafe = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    options.safe = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> safe = options.isSafe;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opts = assign(&#123;&#125;,</span><br><span class=\"line\">    defaultOptions[plugin],</span><br><span class=\"line\">    safe ? safeOptions[plugin] : <span class=\"literal\">null</span>,</span><br><span class=\"line\">    opts</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>如果在参数里面加上 <code>safe/isSafe</code> 字段，也可以解决此问题。<code>safe</code> 是老版本遗留下来的字段，<code>isSafe</code>是新字段而已。</p>"},{"layout":"post","title":"再次体验 ubuntu","date":"2018-02-05T12:10:00.000Z","_content":"\n昨天开始重新拾起 ubuntu，再次尝试使用 ubuntu作为开发机器。\n\n<!-- more -->\n\n## 查询下系统版本\n\n```bash\ncat /etc/issue\n```\n\n发现是 ubuntu 17.10，新版本不是说不好，但是就我的现状实力来讲，还是用稳定版 LTS 吧。\n\n> 在服务器上用 17.04 发现，很多源已经不再继续提供了，导致没办法装软件...所以还是 LTS 比较省心。\n\n换回 ubuntu 16.04后，发现笔记本 wifi 不正常，就是特别慢，发现 ping 值都特别高，但是插入有线网络就正常了。这个自己也是上网随便摸索，按照 bcm43xx系列，瞎捣鼓的，目前感觉速度上去了，但是貌似还会复发。\n\n![image](https://cdn0.yukapril.com/blog/2018-02-05-ubuntu.png-wm.white)\n\n## 稍微装了个主题和图标\n\n```bash\nsudo add-apt-repository ppa:noobslab/themes\nsudo add-apt-repository ppa:noobslab/icons\nsudo apt-get update\nsudo apt-get install flatabulous-theme\nsudo apt-get install ultra-flat-icons\n\nsudo apt-get install unity-tweak-tool\n```\n\n装上了一个字体，但是还没用到。后续计划下载思源黑体（恩，下载中...1.6G...）\n\n```bash\nsudo apt-get install fonts-wqy-microhei\n```\n\n## 安装软件\n\n软件上，开发常用的都可以比较方便的安装上。要么是直接下载 deb 安装，要么就是添加 ppa 源后直接 apt 安装。\n\n> InteliJ 系列\n>\n> VS code\n>\n> sublime\n>\n> filezilla\n\n连接服务器也方便了，直接 ssh 就行了。如果像我懒得敲命令，我用 chrome 插件实现（Termius）。\n\n![image](https://cdn0.yukapril.com/blog/2018-02-05-ubuntu-2.png-wm.white)\n\n各种开发环境的话...本身就是 linux，和服务器一样，啥都能直接用...\n\n浏览器的话，自带 firefox，安装 chrome，可以使用国内的镜像什么的。\n\n听音乐的话，有网易云音乐。不过我不听音乐～\n\n看视频，有mpv 播放器。\n\n下载，基本上就靠浏览器和 wget 了。还可以选择 aria2，我还没有尝试。\n\n对了，项目图片，可以用 GIMP 打开。项目 pdf，一般用 chrome 直接看。\n\n## 小结\n\n整体来说，我认为日常使用是没问题的。除了公司项目需要特殊的 vpn 不太好解决，其他都没问题，娱乐来说，也不会太守影响。反正我也不玩游戏。\n\n最蛋疼的问题，基本上就是需要解决驱动问题，比如显卡驱动和 wifi 网卡驱动。我记得 nvidia 显卡想当年不能换成闭源的那个 test 驱动，否则会花屏。现在也一样不敢换。网卡驱动一般都是大问题，要么支持，要么非常难解决。\n\n输入法的话，我就凑合用自带的了，输入没问题就行，没那么讲究。计划装个搜狗试试看。","source":"_posts/2018/2018-02-05-ubuntu.md","raw":"---\nlayout: post\ntitle: \"再次体验 ubuntu\"\ndate: 2018-02-05 12:10:00 GMT+0000\ncategories: [随笔]\ntags:  [ubuntu]\n---\n\n昨天开始重新拾起 ubuntu，再次尝试使用 ubuntu作为开发机器。\n\n<!-- more -->\n\n## 查询下系统版本\n\n```bash\ncat /etc/issue\n```\n\n发现是 ubuntu 17.10，新版本不是说不好，但是就我的现状实力来讲，还是用稳定版 LTS 吧。\n\n> 在服务器上用 17.04 发现，很多源已经不再继续提供了，导致没办法装软件...所以还是 LTS 比较省心。\n\n换回 ubuntu 16.04后，发现笔记本 wifi 不正常，就是特别慢，发现 ping 值都特别高，但是插入有线网络就正常了。这个自己也是上网随便摸索，按照 bcm43xx系列，瞎捣鼓的，目前感觉速度上去了，但是貌似还会复发。\n\n![image](https://cdn0.yukapril.com/blog/2018-02-05-ubuntu.png-wm.white)\n\n## 稍微装了个主题和图标\n\n```bash\nsudo add-apt-repository ppa:noobslab/themes\nsudo add-apt-repository ppa:noobslab/icons\nsudo apt-get update\nsudo apt-get install flatabulous-theme\nsudo apt-get install ultra-flat-icons\n\nsudo apt-get install unity-tweak-tool\n```\n\n装上了一个字体，但是还没用到。后续计划下载思源黑体（恩，下载中...1.6G...）\n\n```bash\nsudo apt-get install fonts-wqy-microhei\n```\n\n## 安装软件\n\n软件上，开发常用的都可以比较方便的安装上。要么是直接下载 deb 安装，要么就是添加 ppa 源后直接 apt 安装。\n\n> InteliJ 系列\n>\n> VS code\n>\n> sublime\n>\n> filezilla\n\n连接服务器也方便了，直接 ssh 就行了。如果像我懒得敲命令，我用 chrome 插件实现（Termius）。\n\n![image](https://cdn0.yukapril.com/blog/2018-02-05-ubuntu-2.png-wm.white)\n\n各种开发环境的话...本身就是 linux，和服务器一样，啥都能直接用...\n\n浏览器的话，自带 firefox，安装 chrome，可以使用国内的镜像什么的。\n\n听音乐的话，有网易云音乐。不过我不听音乐～\n\n看视频，有mpv 播放器。\n\n下载，基本上就靠浏览器和 wget 了。还可以选择 aria2，我还没有尝试。\n\n对了，项目图片，可以用 GIMP 打开。项目 pdf，一般用 chrome 直接看。\n\n## 小结\n\n整体来说，我认为日常使用是没问题的。除了公司项目需要特殊的 vpn 不太好解决，其他都没问题，娱乐来说，也不会太守影响。反正我也不玩游戏。\n\n最蛋疼的问题，基本上就是需要解决驱动问题，比如显卡驱动和 wifi 网卡驱动。我记得 nvidia 显卡想当年不能换成闭源的那个 test 驱动，否则会花屏。现在也一样不敢换。网卡驱动一般都是大问题，要么支持，要么非常难解决。\n\n输入法的话，我就凑合用自带的了，输入没问题就行，没那么讲究。计划装个搜狗试试看。","slug":"2018-2018-02-05-ubuntu","published":1,"updated":"2019-07-18T17:19:07.037Z","comments":1,"photos":[],"link":"","_id":"cjy8y72sg003ts21di6kggmgy","content":"<p>昨天开始重新拾起 ubuntu，再次尝试使用 ubuntu作为开发机器。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"查询下系统版本\"><a href=\"#查询下系统版本\" class=\"headerlink\" title=\"查询下系统版本\"></a>查询下系统版本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/issue</span><br></pre></td></tr></table></figure>\n\n<p>发现是 ubuntu 17.10，新版本不是说不好，但是就我的现状实力来讲，还是用稳定版 LTS 吧。</p>\n<blockquote>\n<p>在服务器上用 17.04 发现，很多源已经不再继续提供了，导致没办法装软件…所以还是 LTS 比较省心。</p>\n</blockquote>\n<p>换回 ubuntu 16.04后，发现笔记本 wifi 不正常，就是特别慢，发现 ping 值都特别高，但是插入有线网络就正常了。这个自己也是上网随便摸索，按照 bcm43xx系列，瞎捣鼓的，目前感觉速度上去了，但是貌似还会复发。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-02-05-ubuntu.png-wm.white\" alt=\"image\"></p>\n<h2 id=\"稍微装了个主题和图标\"><a href=\"#稍微装了个主题和图标\" class=\"headerlink\" title=\"稍微装了个主题和图标\"></a>稍微装了个主题和图标</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:noobslab/themes</span><br><span class=\"line\">sudo add-apt-repository ppa:noobslab/icons</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install flatabulous-theme</span><br><span class=\"line\">sudo apt-get install ultra-flat-icons</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install unity-tweak-tool</span><br></pre></td></tr></table></figure>\n\n<p>装上了一个字体，但是还没用到。后续计划下载思源黑体（恩，下载中…1.6G…）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install fonts-wqy-microhei</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装软件\"><a href=\"#安装软件\" class=\"headerlink\" title=\"安装软件\"></a>安装软件</h2><p>软件上，开发常用的都可以比较方便的安装上。要么是直接下载 deb 安装，要么就是添加 ppa 源后直接 apt 安装。</p>\n<blockquote>\n<p>InteliJ 系列</p>\n<p>VS code</p>\n<p>sublime</p>\n<p>filezilla</p>\n</blockquote>\n<p>连接服务器也方便了，直接 ssh 就行了。如果像我懒得敲命令，我用 chrome 插件实现（Termius）。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-02-05-ubuntu-2.png-wm.white\" alt=\"image\"></p>\n<p>各种开发环境的话…本身就是 linux，和服务器一样，啥都能直接用…</p>\n<p>浏览器的话，自带 firefox，安装 chrome，可以使用国内的镜像什么的。</p>\n<p>听音乐的话，有网易云音乐。不过我不听音乐～</p>\n<p>看视频，有mpv 播放器。</p>\n<p>下载，基本上就靠浏览器和 wget 了。还可以选择 aria2，我还没有尝试。</p>\n<p>对了，项目图片，可以用 GIMP 打开。项目 pdf，一般用 chrome 直接看。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>整体来说，我认为日常使用是没问题的。除了公司项目需要特殊的 vpn 不太好解决，其他都没问题，娱乐来说，也不会太守影响。反正我也不玩游戏。</p>\n<p>最蛋疼的问题，基本上就是需要解决驱动问题，比如显卡驱动和 wifi 网卡驱动。我记得 nvidia 显卡想当年不能换成闭源的那个 test 驱动，否则会花屏。现在也一样不敢换。网卡驱动一般都是大问题，要么支持，要么非常难解决。</p>\n<p>输入法的话，我就凑合用自带的了，输入没问题就行，没那么讲究。计划装个搜狗试试看。</p>\n","site":{"data":{}},"excerpt":"<p>昨天开始重新拾起 ubuntu，再次尝试使用 ubuntu作为开发机器。</p>","more":"<h2 id=\"查询下系统版本\"><a href=\"#查询下系统版本\" class=\"headerlink\" title=\"查询下系统版本\"></a>查询下系统版本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/issue</span><br></pre></td></tr></table></figure>\n\n<p>发现是 ubuntu 17.10，新版本不是说不好，但是就我的现状实力来讲，还是用稳定版 LTS 吧。</p>\n<blockquote>\n<p>在服务器上用 17.04 发现，很多源已经不再继续提供了，导致没办法装软件…所以还是 LTS 比较省心。</p>\n</blockquote>\n<p>换回 ubuntu 16.04后，发现笔记本 wifi 不正常，就是特别慢，发现 ping 值都特别高，但是插入有线网络就正常了。这个自己也是上网随便摸索，按照 bcm43xx系列，瞎捣鼓的，目前感觉速度上去了，但是貌似还会复发。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-02-05-ubuntu.png-wm.white\" alt=\"image\"></p>\n<h2 id=\"稍微装了个主题和图标\"><a href=\"#稍微装了个主题和图标\" class=\"headerlink\" title=\"稍微装了个主题和图标\"></a>稍微装了个主题和图标</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:noobslab/themes</span><br><span class=\"line\">sudo add-apt-repository ppa:noobslab/icons</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install flatabulous-theme</span><br><span class=\"line\">sudo apt-get install ultra-flat-icons</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install unity-tweak-tool</span><br></pre></td></tr></table></figure>\n\n<p>装上了一个字体，但是还没用到。后续计划下载思源黑体（恩，下载中…1.6G…）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install fonts-wqy-microhei</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装软件\"><a href=\"#安装软件\" class=\"headerlink\" title=\"安装软件\"></a>安装软件</h2><p>软件上，开发常用的都可以比较方便的安装上。要么是直接下载 deb 安装，要么就是添加 ppa 源后直接 apt 安装。</p>\n<blockquote>\n<p>InteliJ 系列</p>\n<p>VS code</p>\n<p>sublime</p>\n<p>filezilla</p>\n</blockquote>\n<p>连接服务器也方便了，直接 ssh 就行了。如果像我懒得敲命令，我用 chrome 插件实现（Termius）。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-02-05-ubuntu-2.png-wm.white\" alt=\"image\"></p>\n<p>各种开发环境的话…本身就是 linux，和服务器一样，啥都能直接用…</p>\n<p>浏览器的话，自带 firefox，安装 chrome，可以使用国内的镜像什么的。</p>\n<p>听音乐的话，有网易云音乐。不过我不听音乐～</p>\n<p>看视频，有mpv 播放器。</p>\n<p>下载，基本上就靠浏览器和 wget 了。还可以选择 aria2，我还没有尝试。</p>\n<p>对了，项目图片，可以用 GIMP 打开。项目 pdf，一般用 chrome 直接看。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>整体来说，我认为日常使用是没问题的。除了公司项目需要特殊的 vpn 不太好解决，其他都没问题，娱乐来说，也不会太守影响。反正我也不玩游戏。</p>\n<p>最蛋疼的问题，基本上就是需要解决驱动问题，比如显卡驱动和 wifi 网卡驱动。我记得 nvidia 显卡想当年不能换成闭源的那个 test 驱动，否则会花屏。现在也一样不敢换。网卡驱动一般都是大问题，要么支持，要么非常难解决。</p>\n<p>输入法的话，我就凑合用自带的了，输入没问题就行，没那么讲究。计划装个搜狗试试看。</p>"},{"layout":"post","title":"这一年——2017年的小结","date":"2018-02-14T23:13:00.000Z","_content":"\n看着很多人都在写总结，感觉自己不写一点，很落伍。\n\n<!-- more -->\n\n在一个多月前，我还翻看到了 2016 年的总结，几张色彩斑斓的卡片，讲述着一年中的感受。当时还在想着 2017 年卡片是什么样子。\n\n2017 年发生的事情太多，自己也懒了。\n\n还是多说说技术吧，我认为这些有价值。最后再写写吐槽。\n\n## 2017 年当时的计划\n\n### 买键盘\n\n嗯，一把也没买。这回没得说了。\n\n2017年计划就这些。\n\n## 说说技术\n\n### 公司前端工程化\n\n真的太想说，太有感受。一个团队从手工作坊终于提升到了工程化，开始可以压缩代码，按 ES6 来书写了。还完成了 jsp 的页面的压缩，现在感觉真的不一样了。\n\n### 公司技术升级\n\n项目全力支撑移动端，逐步摒弃了 `jQuery`，引入了 `Vue`。虽然我更倾向 `React`，但是团队需要更快上手的技术。\n\n### 更多的学习 webpack\n\n我认为应该叫做学习，虽然是在自己研究项目架构。主要是 MPA 多页面方向上。涉及了源码编译，环境配置等，目前还在非常缓慢进行中。\n\n## 学习过程\n\n### 更多的学习\n\n争取每天都阅读一些新的知识，订阅了一些网站博客，学到了很多的知识和思路，还有一些很有趣的东西。有一些比较好的内容，已经放到 [收藏集](http://collection.yukapril.com) 中了。\n\n### linux 学习\n\n特意买了一个 vutlr VPS 服务器，自己争取做些东西，好好用用。比如 [收藏集](http://collection.yukapril.com)，就是放在这台服务器上。\n\n> 收藏集的实现\n>\n> 简单说来，直接用 jekyll 写文章，发布到 github 上面。通过 webhook 钩子，每次 push 会自动推送到服务器上面。\n> \n> 服务器直接用 nodejs 起了服务器，内容就是拉取 github 代码，之后编译，最后放到指定目录。该目录 nginx 为静态进行部署。\n\n年底时候，再次把老的笔记本安装上 Ubuntu，逐步去适应和使用它。有时候，感觉 linux 还是非常便利的。\n\n> 驱动除外，下载功能除外\n\n## 其他方面\n\n### 支持同行\n\n嗯。是这样的。\n\n包括买书，买各个网站的课堂 / 分享 / live 等。还有知识星球等付费学习网站。除了买书，还有个别内容还是很不错的，其他的都很水...算作支持同行吧。\n\n过节期间，计划支持下掘金小书，同行得互相捧～\n\n## 2018 年计划\n\n继续保持学习的尽头，不能落伍。计划方向也比较广：\n\n* 保持 `webpack` 学习，这个太复杂了，经常要学习深入，而且还要出了 4.0 版，其实我是期望它不升级，全靠手配置挺好的\n* 把买的 `Vue` 书籍看完。嗯，还有两本不到，需要加油。期望圈子里面不要有人再出书了，忙的看不过来\n* 好好学用 linux，未来要取代 windows\n* 保持关注 `React`，在自己可能的项目上，着手开始用用试试\n* 多用 `lodash`，挺好的一个库自己总是不用\n* 去了解一些动画类的知识，比如学习 `PixiJS`\n* 关注 IOT，主要是提前学习一些 GPIO 的知识，为 2019 到来的树莓派 4 做准备\n* 有机会的话，了解 `golang`，还有 `RxJS`\n* 如果不忙，多玩一会 codewars ... 看样子实现不了。每年都是过节前后能有几天时间在上面放松...\n\n多写一点东西，虽然可能只能嘴上说说：\n\n* 写写技术博客，目前还有几个非常小课题可以写\n* 想写一点迷你 js 库，比如数组扩展等\n\n总之，保持一颗好奇的心，去把玩～至于键盘，可能还会搁置，用了笔记本，独立键盘利用率太低。\n\n## 吐槽\n\n本想玩玩树莓派，考量了很久，最后还是轻言放弃了。这玩意的系统不就是我的 linux 笔记本么...估计我也不会用 GPIO 做些什么。同样的，js 语言的 RUFF 也一样不想买了。\n\n这一年没烧键盘，尤其是迷你啦，忍住了。用了笔记本后，觉得公司的 IKBC F108 还凑合。要不真的觉得 F108 挺烂的，再也不想买 IKBC 了。\n\n但是呢，又觉得 POKER 系列不错，主要是因为可以编程吧。或许能有用。但是键盘小，可能自己真不习惯。还是大众的迷你啦感觉通俗～\n","source":"_posts/2018/2018-02-14-summary.md","raw":"---\nlayout: post\ntitle: \"这一年——2017年的小结\"\ndate: 2018-02-14 23:13:00 GMT+0000\ncategories: [随笔]\ntags:  []\n---\n\n看着很多人都在写总结，感觉自己不写一点，很落伍。\n\n<!-- more -->\n\n在一个多月前，我还翻看到了 2016 年的总结，几张色彩斑斓的卡片，讲述着一年中的感受。当时还在想着 2017 年卡片是什么样子。\n\n2017 年发生的事情太多，自己也懒了。\n\n还是多说说技术吧，我认为这些有价值。最后再写写吐槽。\n\n## 2017 年当时的计划\n\n### 买键盘\n\n嗯，一把也没买。这回没得说了。\n\n2017年计划就这些。\n\n## 说说技术\n\n### 公司前端工程化\n\n真的太想说，太有感受。一个团队从手工作坊终于提升到了工程化，开始可以压缩代码，按 ES6 来书写了。还完成了 jsp 的页面的压缩，现在感觉真的不一样了。\n\n### 公司技术升级\n\n项目全力支撑移动端，逐步摒弃了 `jQuery`，引入了 `Vue`。虽然我更倾向 `React`，但是团队需要更快上手的技术。\n\n### 更多的学习 webpack\n\n我认为应该叫做学习，虽然是在自己研究项目架构。主要是 MPA 多页面方向上。涉及了源码编译，环境配置等，目前还在非常缓慢进行中。\n\n## 学习过程\n\n### 更多的学习\n\n争取每天都阅读一些新的知识，订阅了一些网站博客，学到了很多的知识和思路，还有一些很有趣的东西。有一些比较好的内容，已经放到 [收藏集](http://collection.yukapril.com) 中了。\n\n### linux 学习\n\n特意买了一个 vutlr VPS 服务器，自己争取做些东西，好好用用。比如 [收藏集](http://collection.yukapril.com)，就是放在这台服务器上。\n\n> 收藏集的实现\n>\n> 简单说来，直接用 jekyll 写文章，发布到 github 上面。通过 webhook 钩子，每次 push 会自动推送到服务器上面。\n> \n> 服务器直接用 nodejs 起了服务器，内容就是拉取 github 代码，之后编译，最后放到指定目录。该目录 nginx 为静态进行部署。\n\n年底时候，再次把老的笔记本安装上 Ubuntu，逐步去适应和使用它。有时候，感觉 linux 还是非常便利的。\n\n> 驱动除外，下载功能除外\n\n## 其他方面\n\n### 支持同行\n\n嗯。是这样的。\n\n包括买书，买各个网站的课堂 / 分享 / live 等。还有知识星球等付费学习网站。除了买书，还有个别内容还是很不错的，其他的都很水...算作支持同行吧。\n\n过节期间，计划支持下掘金小书，同行得互相捧～\n\n## 2018 年计划\n\n继续保持学习的尽头，不能落伍。计划方向也比较广：\n\n* 保持 `webpack` 学习，这个太复杂了，经常要学习深入，而且还要出了 4.0 版，其实我是期望它不升级，全靠手配置挺好的\n* 把买的 `Vue` 书籍看完。嗯，还有两本不到，需要加油。期望圈子里面不要有人再出书了，忙的看不过来\n* 好好学用 linux，未来要取代 windows\n* 保持关注 `React`，在自己可能的项目上，着手开始用用试试\n* 多用 `lodash`，挺好的一个库自己总是不用\n* 去了解一些动画类的知识，比如学习 `PixiJS`\n* 关注 IOT，主要是提前学习一些 GPIO 的知识，为 2019 到来的树莓派 4 做准备\n* 有机会的话，了解 `golang`，还有 `RxJS`\n* 如果不忙，多玩一会 codewars ... 看样子实现不了。每年都是过节前后能有几天时间在上面放松...\n\n多写一点东西，虽然可能只能嘴上说说：\n\n* 写写技术博客，目前还有几个非常小课题可以写\n* 想写一点迷你 js 库，比如数组扩展等\n\n总之，保持一颗好奇的心，去把玩～至于键盘，可能还会搁置，用了笔记本，独立键盘利用率太低。\n\n## 吐槽\n\n本想玩玩树莓派，考量了很久，最后还是轻言放弃了。这玩意的系统不就是我的 linux 笔记本么...估计我也不会用 GPIO 做些什么。同样的，js 语言的 RUFF 也一样不想买了。\n\n这一年没烧键盘，尤其是迷你啦，忍住了。用了笔记本后，觉得公司的 IKBC F108 还凑合。要不真的觉得 F108 挺烂的，再也不想买 IKBC 了。\n\n但是呢，又觉得 POKER 系列不错，主要是因为可以编程吧。或许能有用。但是键盘小，可能自己真不习惯。还是大众的迷你啦感觉通俗～\n","slug":"2018-2018-02-14-summary","published":1,"updated":"2019-07-18T17:19:07.312Z","comments":1,"photos":[],"link":"","_id":"cjy8y72sh003xs21d3j4extmw","content":"<p>看着很多人都在写总结，感觉自己不写一点，很落伍。</p>\n<a id=\"more\"></a>\n\n<p>在一个多月前，我还翻看到了 2016 年的总结，几张色彩斑斓的卡片，讲述着一年中的感受。当时还在想着 2017 年卡片是什么样子。</p>\n<p>2017 年发生的事情太多，自己也懒了。</p>\n<p>还是多说说技术吧，我认为这些有价值。最后再写写吐槽。</p>\n<h2 id=\"2017-年当时的计划\"><a href=\"#2017-年当时的计划\" class=\"headerlink\" title=\"2017 年当时的计划\"></a>2017 年当时的计划</h2><h3 id=\"买键盘\"><a href=\"#买键盘\" class=\"headerlink\" title=\"买键盘\"></a>买键盘</h3><p>嗯，一把也没买。这回没得说了。</p>\n<p>2017年计划就这些。</p>\n<h2 id=\"说说技术\"><a href=\"#说说技术\" class=\"headerlink\" title=\"说说技术\"></a>说说技术</h2><h3 id=\"公司前端工程化\"><a href=\"#公司前端工程化\" class=\"headerlink\" title=\"公司前端工程化\"></a>公司前端工程化</h3><p>真的太想说，太有感受。一个团队从手工作坊终于提升到了工程化，开始可以压缩代码，按 ES6 来书写了。还完成了 jsp 的页面的压缩，现在感觉真的不一样了。</p>\n<h3 id=\"公司技术升级\"><a href=\"#公司技术升级\" class=\"headerlink\" title=\"公司技术升级\"></a>公司技术升级</h3><p>项目全力支撑移动端，逐步摒弃了 <code>jQuery</code>，引入了 <code>Vue</code>。虽然我更倾向 <code>React</code>，但是团队需要更快上手的技术。</p>\n<h3 id=\"更多的学习-webpack\"><a href=\"#更多的学习-webpack\" class=\"headerlink\" title=\"更多的学习 webpack\"></a>更多的学习 webpack</h3><p>我认为应该叫做学习，虽然是在自己研究项目架构。主要是 MPA 多页面方向上。涉及了源码编译，环境配置等，目前还在非常缓慢进行中。</p>\n<h2 id=\"学习过程\"><a href=\"#学习过程\" class=\"headerlink\" title=\"学习过程\"></a>学习过程</h2><h3 id=\"更多的学习\"><a href=\"#更多的学习\" class=\"headerlink\" title=\"更多的学习\"></a>更多的学习</h3><p>争取每天都阅读一些新的知识，订阅了一些网站博客，学到了很多的知识和思路，还有一些很有趣的东西。有一些比较好的内容，已经放到 <a href=\"http://collection.yukapril.com\" target=\"_blank\" rel=\"noopener\">收藏集</a> 中了。</p>\n<h3 id=\"linux-学习\"><a href=\"#linux-学习\" class=\"headerlink\" title=\"linux 学习\"></a>linux 学习</h3><p>特意买了一个 vutlr VPS 服务器，自己争取做些东西，好好用用。比如 <a href=\"http://collection.yukapril.com\" target=\"_blank\" rel=\"noopener\">收藏集</a>，就是放在这台服务器上。</p>\n<blockquote>\n<p>收藏集的实现</p>\n<p>简单说来，直接用 jekyll 写文章，发布到 github 上面。通过 webhook 钩子，每次 push 会自动推送到服务器上面。</p>\n<p>服务器直接用 nodejs 起了服务器，内容就是拉取 github 代码，之后编译，最后放到指定目录。该目录 nginx 为静态进行部署。</p>\n</blockquote>\n<p>年底时候，再次把老的笔记本安装上 Ubuntu，逐步去适应和使用它。有时候，感觉 linux 还是非常便利的。</p>\n<blockquote>\n<p>驱动除外，下载功能除外</p>\n</blockquote>\n<h2 id=\"其他方面\"><a href=\"#其他方面\" class=\"headerlink\" title=\"其他方面\"></a>其他方面</h2><h3 id=\"支持同行\"><a href=\"#支持同行\" class=\"headerlink\" title=\"支持同行\"></a>支持同行</h3><p>嗯。是这样的。</p>\n<p>包括买书，买各个网站的课堂 / 分享 / live 等。还有知识星球等付费学习网站。除了买书，还有个别内容还是很不错的，其他的都很水…算作支持同行吧。</p>\n<p>过节期间，计划支持下掘金小书，同行得互相捧～</p>\n<h2 id=\"2018-年计划\"><a href=\"#2018-年计划\" class=\"headerlink\" title=\"2018 年计划\"></a>2018 年计划</h2><p>继续保持学习的尽头，不能落伍。计划方向也比较广：</p>\n<ul>\n<li>保持 <code>webpack</code> 学习，这个太复杂了，经常要学习深入，而且还要出了 4.0 版，其实我是期望它不升级，全靠手配置挺好的</li>\n<li>把买的 <code>Vue</code> 书籍看完。嗯，还有两本不到，需要加油。期望圈子里面不要有人再出书了，忙的看不过来</li>\n<li>好好学用 linux，未来要取代 windows</li>\n<li>保持关注 <code>React</code>，在自己可能的项目上，着手开始用用试试</li>\n<li>多用 <code>lodash</code>，挺好的一个库自己总是不用</li>\n<li>去了解一些动画类的知识，比如学习 <code>PixiJS</code></li>\n<li>关注 IOT，主要是提前学习一些 GPIO 的知识，为 2019 到来的树莓派 4 做准备</li>\n<li>有机会的话，了解 <code>golang</code>，还有 <code>RxJS</code></li>\n<li>如果不忙，多玩一会 codewars … 看样子实现不了。每年都是过节前后能有几天时间在上面放松…</li>\n</ul>\n<p>多写一点东西，虽然可能只能嘴上说说：</p>\n<ul>\n<li>写写技术博客，目前还有几个非常小课题可以写</li>\n<li>想写一点迷你 js 库，比如数组扩展等</li>\n</ul>\n<p>总之，保持一颗好奇的心，去把玩～至于键盘，可能还会搁置，用了笔记本，独立键盘利用率太低。</p>\n<h2 id=\"吐槽\"><a href=\"#吐槽\" class=\"headerlink\" title=\"吐槽\"></a>吐槽</h2><p>本想玩玩树莓派，考量了很久，最后还是轻言放弃了。这玩意的系统不就是我的 linux 笔记本么…估计我也不会用 GPIO 做些什么。同样的，js 语言的 RUFF 也一样不想买了。</p>\n<p>这一年没烧键盘，尤其是迷你啦，忍住了。用了笔记本后，觉得公司的 IKBC F108 还凑合。要不真的觉得 F108 挺烂的，再也不想买 IKBC 了。</p>\n<p>但是呢，又觉得 POKER 系列不错，主要是因为可以编程吧。或许能有用。但是键盘小，可能自己真不习惯。还是大众的迷你啦感觉通俗～</p>\n","site":{"data":{}},"excerpt":"<p>看着很多人都在写总结，感觉自己不写一点，很落伍。</p>","more":"<p>在一个多月前，我还翻看到了 2016 年的总结，几张色彩斑斓的卡片，讲述着一年中的感受。当时还在想着 2017 年卡片是什么样子。</p>\n<p>2017 年发生的事情太多，自己也懒了。</p>\n<p>还是多说说技术吧，我认为这些有价值。最后再写写吐槽。</p>\n<h2 id=\"2017-年当时的计划\"><a href=\"#2017-年当时的计划\" class=\"headerlink\" title=\"2017 年当时的计划\"></a>2017 年当时的计划</h2><h3 id=\"买键盘\"><a href=\"#买键盘\" class=\"headerlink\" title=\"买键盘\"></a>买键盘</h3><p>嗯，一把也没买。这回没得说了。</p>\n<p>2017年计划就这些。</p>\n<h2 id=\"说说技术\"><a href=\"#说说技术\" class=\"headerlink\" title=\"说说技术\"></a>说说技术</h2><h3 id=\"公司前端工程化\"><a href=\"#公司前端工程化\" class=\"headerlink\" title=\"公司前端工程化\"></a>公司前端工程化</h3><p>真的太想说，太有感受。一个团队从手工作坊终于提升到了工程化，开始可以压缩代码，按 ES6 来书写了。还完成了 jsp 的页面的压缩，现在感觉真的不一样了。</p>\n<h3 id=\"公司技术升级\"><a href=\"#公司技术升级\" class=\"headerlink\" title=\"公司技术升级\"></a>公司技术升级</h3><p>项目全力支撑移动端，逐步摒弃了 <code>jQuery</code>，引入了 <code>Vue</code>。虽然我更倾向 <code>React</code>，但是团队需要更快上手的技术。</p>\n<h3 id=\"更多的学习-webpack\"><a href=\"#更多的学习-webpack\" class=\"headerlink\" title=\"更多的学习 webpack\"></a>更多的学习 webpack</h3><p>我认为应该叫做学习，虽然是在自己研究项目架构。主要是 MPA 多页面方向上。涉及了源码编译，环境配置等，目前还在非常缓慢进行中。</p>\n<h2 id=\"学习过程\"><a href=\"#学习过程\" class=\"headerlink\" title=\"学习过程\"></a>学习过程</h2><h3 id=\"更多的学习\"><a href=\"#更多的学习\" class=\"headerlink\" title=\"更多的学习\"></a>更多的学习</h3><p>争取每天都阅读一些新的知识，订阅了一些网站博客，学到了很多的知识和思路，还有一些很有趣的东西。有一些比较好的内容，已经放到 <a href=\"http://collection.yukapril.com\" target=\"_blank\" rel=\"noopener\">收藏集</a> 中了。</p>\n<h3 id=\"linux-学习\"><a href=\"#linux-学习\" class=\"headerlink\" title=\"linux 学习\"></a>linux 学习</h3><p>特意买了一个 vutlr VPS 服务器，自己争取做些东西，好好用用。比如 <a href=\"http://collection.yukapril.com\" target=\"_blank\" rel=\"noopener\">收藏集</a>，就是放在这台服务器上。</p>\n<blockquote>\n<p>收藏集的实现</p>\n<p>简单说来，直接用 jekyll 写文章，发布到 github 上面。通过 webhook 钩子，每次 push 会自动推送到服务器上面。</p>\n<p>服务器直接用 nodejs 起了服务器，内容就是拉取 github 代码，之后编译，最后放到指定目录。该目录 nginx 为静态进行部署。</p>\n</blockquote>\n<p>年底时候，再次把老的笔记本安装上 Ubuntu，逐步去适应和使用它。有时候，感觉 linux 还是非常便利的。</p>\n<blockquote>\n<p>驱动除外，下载功能除外</p>\n</blockquote>\n<h2 id=\"其他方面\"><a href=\"#其他方面\" class=\"headerlink\" title=\"其他方面\"></a>其他方面</h2><h3 id=\"支持同行\"><a href=\"#支持同行\" class=\"headerlink\" title=\"支持同行\"></a>支持同行</h3><p>嗯。是这样的。</p>\n<p>包括买书，买各个网站的课堂 / 分享 / live 等。还有知识星球等付费学习网站。除了买书，还有个别内容还是很不错的，其他的都很水…算作支持同行吧。</p>\n<p>过节期间，计划支持下掘金小书，同行得互相捧～</p>\n<h2 id=\"2018-年计划\"><a href=\"#2018-年计划\" class=\"headerlink\" title=\"2018 年计划\"></a>2018 年计划</h2><p>继续保持学习的尽头，不能落伍。计划方向也比较广：</p>\n<ul>\n<li>保持 <code>webpack</code> 学习，这个太复杂了，经常要学习深入，而且还要出了 4.0 版，其实我是期望它不升级，全靠手配置挺好的</li>\n<li>把买的 <code>Vue</code> 书籍看完。嗯，还有两本不到，需要加油。期望圈子里面不要有人再出书了，忙的看不过来</li>\n<li>好好学用 linux，未来要取代 windows</li>\n<li>保持关注 <code>React</code>，在自己可能的项目上，着手开始用用试试</li>\n<li>多用 <code>lodash</code>，挺好的一个库自己总是不用</li>\n<li>去了解一些动画类的知识，比如学习 <code>PixiJS</code></li>\n<li>关注 IOT，主要是提前学习一些 GPIO 的知识，为 2019 到来的树莓派 4 做准备</li>\n<li>有机会的话，了解 <code>golang</code>，还有 <code>RxJS</code></li>\n<li>如果不忙，多玩一会 codewars … 看样子实现不了。每年都是过节前后能有几天时间在上面放松…</li>\n</ul>\n<p>多写一点东西，虽然可能只能嘴上说说：</p>\n<ul>\n<li>写写技术博客，目前还有几个非常小课题可以写</li>\n<li>想写一点迷你 js 库，比如数组扩展等</li>\n</ul>\n<p>总之，保持一颗好奇的心，去把玩～至于键盘，可能还会搁置，用了笔记本，独立键盘利用率太低。</p>\n<h2 id=\"吐槽\"><a href=\"#吐槽\" class=\"headerlink\" title=\"吐槽\"></a>吐槽</h2><p>本想玩玩树莓派，考量了很久，最后还是轻言放弃了。这玩意的系统不就是我的 linux 笔记本么…估计我也不会用 GPIO 做些什么。同样的，js 语言的 RUFF 也一样不想买了。</p>\n<p>这一年没烧键盘，尤其是迷你啦，忍住了。用了笔记本后，觉得公司的 IKBC F108 还凑合。要不真的觉得 F108 挺烂的，再也不想买 IKBC 了。</p>\n<p>但是呢，又觉得 POKER 系列不错，主要是因为可以编程吧。或许能有用。但是键盘小，可能自己真不习惯。还是大众的迷你啦感觉通俗～</p>"},{"layout":"post","title":"cdn 入门","date":"2018-03-11T18:51:00.000Z","_content":"\n抽空好好研究了下 cdn，算是小有收获。\n\n在研究期间，接触了阿里云，腾讯云，七牛云。这三个都很好，不过阿里云是需要付费才能使用的，腾讯云和七牛云都有免费额度。在协议上，基本上 https 流量都是收费服务。此外，七牛云可能有些特殊，它的对象存储域名访问是和 cdn  绑定的，所以一开始我也绕了很大的弯路。\n\n这里，我只讨论 cdn，先不考虑对象存储。\n\n<!-- more -->\n\n## cdn 是什么\n\n维基百科对其的定义是：\n\n> 内容分发网络（英语：Content delivery network或Content distribution network，缩写：CDN）是指一种通过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、视频、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。\n\n简单来说，就是提供数据分发的服务器。你有一个数据要分享，只需要交给它，它可以帮你完成分享给多人的过程。\n\n一般的，cdn 服务商都会在国内部署大量节点。每个用户访问 cdn 域名时候，会自动匹配离他最近的节点（速度最快）。\n\n比如，你有一个文件想要分享，但是你的服务器在北方地区，南方地区访问很慢，此时需要 cdn 支撑。把你的文件交给 cdn，由它负责快速的分享给朋友们。而且，一般 cdn 默认提供默认的 http 和 https 域名供使用，也可以自定义域名使用。\n\n## cdn 简单原理\n\n上面已经说到，cdn 厂商会在各个地区增加节点，让用户直接连接最近的节点，起到加速作用。\n\n具体的加速流程也很简单：\n\n假设网站地址 yukapril.com，部署在北京，期望访问 cdn.yukapril.com 进行加速。\n\n配置好以后，东北用户 A 访问 cdn.yukapril.com 资源，自动路由到最近的东北节点。此时东北节点没有需要的资源，只好访问网站 yukapril.com 先获取一下（这个过程叫做**回源**），再分发给用户。\n\n此时 A 用户感觉速度不一定快，还可能变慢了，因为原本 A 用户可以直接访问北京的服务器，现在由东北的一个节点服务器负责代理传输数据了，这个过程可能快可能慢。\n\n之后，东北用户 B 在访问 cdn.yukapril.com 相同资源后，由于东北节点存在当前资源，所以直接返回了，用户 B 感觉速度快多了。\n\n> cdn 没有相应数据的时候，就会回源查询。\n>\n> 每个资源都有自己的缓存时间，超过这个时间，cdn 也会进行回源查询。\n\n所以，cdn 解决的是相同地区第二次几以后访问的速度。除了第一此外，其余访问均可以通过 cdn 缓存进行处理，减少了服务器出口带宽压力。\n\n**所以，常见的场景是：**\n\n- 你的服务器访问比较慢，比如服务器在国外，或者国内距离客户很远。\n- 你的服务器带宽很小，出口流量不能支持多人同时访问，比如是 1M 带宽主机。\n- 服务器没办法配置 https（ssl），比如是虚拟主机，此时用 cdn 做 https 代理。\n\n## 使用 cdn 的流程\n\n在服务云厂商注册后，建议查看下具体的 cdn 自费，不同厂商计费方式都可能有一定出入。\n\n一般来讲，cdn 计费主要有包含：用户访问 cdn产生的上下行流量费，以及 cdn 访问你的服务器的回源费用。不同服务商可能会有免费策略。\n\n这里不考虑任何费用问题，只考虑如何接入和使用 cdn。主要需要三点：\n\n* 域名接入\n* 配置回源地址\n* 配置加速内容的策略\n\n这三点有的厂商在第一步时候就进行配置，也有在后续流程或者详细设置中配置的。\n\n## 具体实践\n\n下文以七牛云为例子进行配置\n\n假设原域名是 `yukapril.com` 服务器在国外，访问慢。你希望对中国用户进行提速，提速 cdn 域名为 `cdn.yukapril.com`\n\n> 图片供参考，内容以实际为准。\n\n![img](https://cdn0.yukapril.com/blog/2018-03-11-cdn.png-wm.white)\n\n* 加速域名：就是填写加速后的域名，这里我填写 `cdn.yukapril.com`\n\n* 通信协议：一般就是 http，如果你需要 https 也可以。这里配置 https 后，需要添加证书，可以是在 cdn 厂商购买（可能有免费证书），也可以是自己已有的证书。这里配置 https，不限制源站必须也是 https，所以这样配置 cdn 可以起到对源站 http 协议进行一次加密传输的效果。**此外注意查看 https 计费**。\n\n* 源站配置：\n\n  * 基础设置，一般使用源站域名或者 IP 地址，而且有的厂商支持多域名多 IP 方案。后续文章我会说到对象存储，届时可以选择云存储。\n  * 源站域名：就是 cdn 没有资源的时候，去哪里获取。此处就是填写自己的网站。\n  * 回源 HOST：这个需要说下，cdn 没有资源的时候，会去“源站域名”的网站获取，但是请求数据需要有主机头。如果不填写，默认是用 cdn 地址代替。鉴于省事，所以回源 HOST 就和“源站域名”一致，这样源站服务器不需要额外配置主机头（域名绑定）。详细说明见下文。\n  * 源站测试：这个好像只有七牛云有，需要确保你的服务器有一个测试文件而已\n* 缓存配置：主要进行控制每个路径、资源的缓存策略，不同厂商不同。基本上常用“遵循源站”，如果源站没有缓存策略，这里必须配置，否则每个资源都不缓存，cdn 没有起到作用。\n\n\n> 回源 HOST\n>\n> 一个服务器的一个端口，可以配置多个主机头，不同的主机头可以对应不同的网站。主机头相当于一个访问网站的标志。\n>\n> 访问 yukapril.com 服务器 80 端口，但是主机头是 cdn.yukapril.com。此时就要额外配置主机头 cdn.yukapril.com，否则服务器找对了，但是没有对应主机头信息，也不能访问网站。\n\n配置好以后，会给出一个 CNAME 地址，要求把 cdn 域名（cdn.yukapril.com）配置到此上面。\n\n之后就是稍微等待下，一般不会很久。访问 cdn 资源后，直接可以显示原来的内容。如果查阅自己的服务器日志，应该只有第一次的访问记录。\n\n## cdn 缓存的刷新\n\ncdn 数据一旦缓存，除了缓存到期，否则就不会在回源查询了。如果我们的资源有了问题，更新后，此时 cdn 还是老数据...\n\n这时候就需要对 cdn 缓存进行刷新了。目前所有的厂商都支持 cdn 缓存刷新功能，但是刷新频率都有限制。\n\n刷新上，支持资源文件级别的精准刷新，也支持目录级的刷新。基本上刷新后半分钟左右都可以见效。\n\n## cdn 与前端的结合\n\ncdn 可以支持全站 cdn 和部分资源 cdn 两种形式。\n\n全站 cdn 就是所有流量都走 cdn，其中包括访问页面等。这样配置时候，需要注意缓存配置，页面不缓存，其他静态资源视情况而定；对于地址参数上，需要注意不能忽略。而且，可以把 cdn 地址配置成主站域名，把源地址配置为其他域名。\n\n部分资源走 cdn 比较主流，仅仅是对图片 css，js 文件进行 cdn 加速。一般还会和对象存储进行结合。主要问题在于 js 资源发送 ajax 会跨站，此时需要对接口进行 CORS 处理。这就需要后端进行一些配置了。\n","source":"_posts/2018/2018-03-11-cdn.md","raw":"---\nlayout: post\ntitle: \"cdn 入门\"\ndate: 2018-03-11 18:51:00 GMT+0000\ncategories: [前端]\ntags:  [cdn]\n---\n\n抽空好好研究了下 cdn，算是小有收获。\n\n在研究期间，接触了阿里云，腾讯云，七牛云。这三个都很好，不过阿里云是需要付费才能使用的，腾讯云和七牛云都有免费额度。在协议上，基本上 https 流量都是收费服务。此外，七牛云可能有些特殊，它的对象存储域名访问是和 cdn  绑定的，所以一开始我也绕了很大的弯路。\n\n这里，我只讨论 cdn，先不考虑对象存储。\n\n<!-- more -->\n\n## cdn 是什么\n\n维基百科对其的定义是：\n\n> 内容分发网络（英语：Content delivery network或Content distribution network，缩写：CDN）是指一种通过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、视频、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。\n\n简单来说，就是提供数据分发的服务器。你有一个数据要分享，只需要交给它，它可以帮你完成分享给多人的过程。\n\n一般的，cdn 服务商都会在国内部署大量节点。每个用户访问 cdn 域名时候，会自动匹配离他最近的节点（速度最快）。\n\n比如，你有一个文件想要分享，但是你的服务器在北方地区，南方地区访问很慢，此时需要 cdn 支撑。把你的文件交给 cdn，由它负责快速的分享给朋友们。而且，一般 cdn 默认提供默认的 http 和 https 域名供使用，也可以自定义域名使用。\n\n## cdn 简单原理\n\n上面已经说到，cdn 厂商会在各个地区增加节点，让用户直接连接最近的节点，起到加速作用。\n\n具体的加速流程也很简单：\n\n假设网站地址 yukapril.com，部署在北京，期望访问 cdn.yukapril.com 进行加速。\n\n配置好以后，东北用户 A 访问 cdn.yukapril.com 资源，自动路由到最近的东北节点。此时东北节点没有需要的资源，只好访问网站 yukapril.com 先获取一下（这个过程叫做**回源**），再分发给用户。\n\n此时 A 用户感觉速度不一定快，还可能变慢了，因为原本 A 用户可以直接访问北京的服务器，现在由东北的一个节点服务器负责代理传输数据了，这个过程可能快可能慢。\n\n之后，东北用户 B 在访问 cdn.yukapril.com 相同资源后，由于东北节点存在当前资源，所以直接返回了，用户 B 感觉速度快多了。\n\n> cdn 没有相应数据的时候，就会回源查询。\n>\n> 每个资源都有自己的缓存时间，超过这个时间，cdn 也会进行回源查询。\n\n所以，cdn 解决的是相同地区第二次几以后访问的速度。除了第一此外，其余访问均可以通过 cdn 缓存进行处理，减少了服务器出口带宽压力。\n\n**所以，常见的场景是：**\n\n- 你的服务器访问比较慢，比如服务器在国外，或者国内距离客户很远。\n- 你的服务器带宽很小，出口流量不能支持多人同时访问，比如是 1M 带宽主机。\n- 服务器没办法配置 https（ssl），比如是虚拟主机，此时用 cdn 做 https 代理。\n\n## 使用 cdn 的流程\n\n在服务云厂商注册后，建议查看下具体的 cdn 自费，不同厂商计费方式都可能有一定出入。\n\n一般来讲，cdn 计费主要有包含：用户访问 cdn产生的上下行流量费，以及 cdn 访问你的服务器的回源费用。不同服务商可能会有免费策略。\n\n这里不考虑任何费用问题，只考虑如何接入和使用 cdn。主要需要三点：\n\n* 域名接入\n* 配置回源地址\n* 配置加速内容的策略\n\n这三点有的厂商在第一步时候就进行配置，也有在后续流程或者详细设置中配置的。\n\n## 具体实践\n\n下文以七牛云为例子进行配置\n\n假设原域名是 `yukapril.com` 服务器在国外，访问慢。你希望对中国用户进行提速，提速 cdn 域名为 `cdn.yukapril.com`\n\n> 图片供参考，内容以实际为准。\n\n![img](https://cdn0.yukapril.com/blog/2018-03-11-cdn.png-wm.white)\n\n* 加速域名：就是填写加速后的域名，这里我填写 `cdn.yukapril.com`\n\n* 通信协议：一般就是 http，如果你需要 https 也可以。这里配置 https 后，需要添加证书，可以是在 cdn 厂商购买（可能有免费证书），也可以是自己已有的证书。这里配置 https，不限制源站必须也是 https，所以这样配置 cdn 可以起到对源站 http 协议进行一次加密传输的效果。**此外注意查看 https 计费**。\n\n* 源站配置：\n\n  * 基础设置，一般使用源站域名或者 IP 地址，而且有的厂商支持多域名多 IP 方案。后续文章我会说到对象存储，届时可以选择云存储。\n  * 源站域名：就是 cdn 没有资源的时候，去哪里获取。此处就是填写自己的网站。\n  * 回源 HOST：这个需要说下，cdn 没有资源的时候，会去“源站域名”的网站获取，但是请求数据需要有主机头。如果不填写，默认是用 cdn 地址代替。鉴于省事，所以回源 HOST 就和“源站域名”一致，这样源站服务器不需要额外配置主机头（域名绑定）。详细说明见下文。\n  * 源站测试：这个好像只有七牛云有，需要确保你的服务器有一个测试文件而已\n* 缓存配置：主要进行控制每个路径、资源的缓存策略，不同厂商不同。基本上常用“遵循源站”，如果源站没有缓存策略，这里必须配置，否则每个资源都不缓存，cdn 没有起到作用。\n\n\n> 回源 HOST\n>\n> 一个服务器的一个端口，可以配置多个主机头，不同的主机头可以对应不同的网站。主机头相当于一个访问网站的标志。\n>\n> 访问 yukapril.com 服务器 80 端口，但是主机头是 cdn.yukapril.com。此时就要额外配置主机头 cdn.yukapril.com，否则服务器找对了，但是没有对应主机头信息，也不能访问网站。\n\n配置好以后，会给出一个 CNAME 地址，要求把 cdn 域名（cdn.yukapril.com）配置到此上面。\n\n之后就是稍微等待下，一般不会很久。访问 cdn 资源后，直接可以显示原来的内容。如果查阅自己的服务器日志，应该只有第一次的访问记录。\n\n## cdn 缓存的刷新\n\ncdn 数据一旦缓存，除了缓存到期，否则就不会在回源查询了。如果我们的资源有了问题，更新后，此时 cdn 还是老数据...\n\n这时候就需要对 cdn 缓存进行刷新了。目前所有的厂商都支持 cdn 缓存刷新功能，但是刷新频率都有限制。\n\n刷新上，支持资源文件级别的精准刷新，也支持目录级的刷新。基本上刷新后半分钟左右都可以见效。\n\n## cdn 与前端的结合\n\ncdn 可以支持全站 cdn 和部分资源 cdn 两种形式。\n\n全站 cdn 就是所有流量都走 cdn，其中包括访问页面等。这样配置时候，需要注意缓存配置，页面不缓存，其他静态资源视情况而定；对于地址参数上，需要注意不能忽略。而且，可以把 cdn 地址配置成主站域名，把源地址配置为其他域名。\n\n部分资源走 cdn 比较主流，仅仅是对图片 css，js 文件进行 cdn 加速。一般还会和对象存储进行结合。主要问题在于 js 资源发送 ajax 会跨站，此时需要对接口进行 CORS 处理。这就需要后端进行一些配置了。\n","slug":"2018-2018-03-11-cdn","published":1,"updated":"2019-07-18T17:19:07.228Z","comments":1,"photos":[],"link":"","_id":"cjy8y72si0040s21dgeqsxk0x","content":"<p>抽空好好研究了下 cdn，算是小有收获。</p>\n<p>在研究期间，接触了阿里云，腾讯云，七牛云。这三个都很好，不过阿里云是需要付费才能使用的，腾讯云和七牛云都有免费额度。在协议上，基本上 https 流量都是收费服务。此外，七牛云可能有些特殊，它的对象存储域名访问是和 cdn  绑定的，所以一开始我也绕了很大的弯路。</p>\n<p>这里，我只讨论 cdn，先不考虑对象存储。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"cdn-是什么\"><a href=\"#cdn-是什么\" class=\"headerlink\" title=\"cdn 是什么\"></a>cdn 是什么</h2><p>维基百科对其的定义是：</p>\n<blockquote>\n<p>内容分发网络（英语：Content delivery network或Content distribution network，缩写：CDN）是指一种通过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、视频、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。</p>\n</blockquote>\n<p>简单来说，就是提供数据分发的服务器。你有一个数据要分享，只需要交给它，它可以帮你完成分享给多人的过程。</p>\n<p>一般的，cdn 服务商都会在国内部署大量节点。每个用户访问 cdn 域名时候，会自动匹配离他最近的节点（速度最快）。</p>\n<p>比如，你有一个文件想要分享，但是你的服务器在北方地区，南方地区访问很慢，此时需要 cdn 支撑。把你的文件交给 cdn，由它负责快速的分享给朋友们。而且，一般 cdn 默认提供默认的 http 和 https 域名供使用，也可以自定义域名使用。</p>\n<h2 id=\"cdn-简单原理\"><a href=\"#cdn-简单原理\" class=\"headerlink\" title=\"cdn 简单原理\"></a>cdn 简单原理</h2><p>上面已经说到，cdn 厂商会在各个地区增加节点，让用户直接连接最近的节点，起到加速作用。</p>\n<p>具体的加速流程也很简单：</p>\n<p>假设网站地址 yukapril.com，部署在北京，期望访问 cdn.yukapril.com 进行加速。</p>\n<p>配置好以后，东北用户 A 访问 cdn.yukapril.com 资源，自动路由到最近的东北节点。此时东北节点没有需要的资源，只好访问网站 yukapril.com 先获取一下（这个过程叫做<strong>回源</strong>），再分发给用户。</p>\n<p>此时 A 用户感觉速度不一定快，还可能变慢了，因为原本 A 用户可以直接访问北京的服务器，现在由东北的一个节点服务器负责代理传输数据了，这个过程可能快可能慢。</p>\n<p>之后，东北用户 B 在访问 cdn.yukapril.com 相同资源后，由于东北节点存在当前资源，所以直接返回了，用户 B 感觉速度快多了。</p>\n<blockquote>\n<p>cdn 没有相应数据的时候，就会回源查询。</p>\n<p>每个资源都有自己的缓存时间，超过这个时间，cdn 也会进行回源查询。</p>\n</blockquote>\n<p>所以，cdn 解决的是相同地区第二次几以后访问的速度。除了第一此外，其余访问均可以通过 cdn 缓存进行处理，减少了服务器出口带宽压力。</p>\n<p><strong>所以，常见的场景是：</strong></p>\n<ul>\n<li>你的服务器访问比较慢，比如服务器在国外，或者国内距离客户很远。</li>\n<li>你的服务器带宽很小，出口流量不能支持多人同时访问，比如是 1M 带宽主机。</li>\n<li>服务器没办法配置 https（ssl），比如是虚拟主机，此时用 cdn 做 https 代理。</li>\n</ul>\n<h2 id=\"使用-cdn-的流程\"><a href=\"#使用-cdn-的流程\" class=\"headerlink\" title=\"使用 cdn 的流程\"></a>使用 cdn 的流程</h2><p>在服务云厂商注册后，建议查看下具体的 cdn 自费，不同厂商计费方式都可能有一定出入。</p>\n<p>一般来讲，cdn 计费主要有包含：用户访问 cdn产生的上下行流量费，以及 cdn 访问你的服务器的回源费用。不同服务商可能会有免费策略。</p>\n<p>这里不考虑任何费用问题，只考虑如何接入和使用 cdn。主要需要三点：</p>\n<ul>\n<li>域名接入</li>\n<li>配置回源地址</li>\n<li>配置加速内容的策略</li>\n</ul>\n<p>这三点有的厂商在第一步时候就进行配置，也有在后续流程或者详细设置中配置的。</p>\n<h2 id=\"具体实践\"><a href=\"#具体实践\" class=\"headerlink\" title=\"具体实践\"></a>具体实践</h2><p>下文以七牛云为例子进行配置</p>\n<p>假设原域名是 <code>yukapril.com</code> 服务器在国外，访问慢。你希望对中国用户进行提速，提速 cdn 域名为 <code>cdn.yukapril.com</code></p>\n<blockquote>\n<p>图片供参考，内容以实际为准。</p>\n</blockquote>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-03-11-cdn.png-wm.white\" alt=\"img\"></p>\n<ul>\n<li><p>加速域名：就是填写加速后的域名，这里我填写 <code>cdn.yukapril.com</code></p>\n</li>\n<li><p>通信协议：一般就是 http，如果你需要 https 也可以。这里配置 https 后，需要添加证书，可以是在 cdn 厂商购买（可能有免费证书），也可以是自己已有的证书。这里配置 https，不限制源站必须也是 https，所以这样配置 cdn 可以起到对源站 http 协议进行一次加密传输的效果。<strong>此外注意查看 https 计费</strong>。</p>\n</li>\n<li><p>源站配置：</p>\n<ul>\n<li>基础设置，一般使用源站域名或者 IP 地址，而且有的厂商支持多域名多 IP 方案。后续文章我会说到对象存储，届时可以选择云存储。</li>\n<li>源站域名：就是 cdn 没有资源的时候，去哪里获取。此处就是填写自己的网站。</li>\n<li>回源 HOST：这个需要说下，cdn 没有资源的时候，会去“源站域名”的网站获取，但是请求数据需要有主机头。如果不填写，默认是用 cdn 地址代替。鉴于省事，所以回源 HOST 就和“源站域名”一致，这样源站服务器不需要额外配置主机头（域名绑定）。详细说明见下文。</li>\n<li>源站测试：这个好像只有七牛云有，需要确保你的服务器有一个测试文件而已</li>\n</ul>\n</li>\n<li><p>缓存配置：主要进行控制每个路径、资源的缓存策略，不同厂商不同。基本上常用“遵循源站”，如果源站没有缓存策略，这里必须配置，否则每个资源都不缓存，cdn 没有起到作用。</p>\n</li>\n</ul>\n<blockquote>\n<p>回源 HOST</p>\n<p>一个服务器的一个端口，可以配置多个主机头，不同的主机头可以对应不同的网站。主机头相当于一个访问网站的标志。</p>\n<p>访问 yukapril.com 服务器 80 端口，但是主机头是 cdn.yukapril.com。此时就要额外配置主机头 cdn.yukapril.com，否则服务器找对了，但是没有对应主机头信息，也不能访问网站。</p>\n</blockquote>\n<p>配置好以后，会给出一个 CNAME 地址，要求把 cdn 域名（cdn.yukapril.com）配置到此上面。</p>\n<p>之后就是稍微等待下，一般不会很久。访问 cdn 资源后，直接可以显示原来的内容。如果查阅自己的服务器日志，应该只有第一次的访问记录。</p>\n<h2 id=\"cdn-缓存的刷新\"><a href=\"#cdn-缓存的刷新\" class=\"headerlink\" title=\"cdn 缓存的刷新\"></a>cdn 缓存的刷新</h2><p>cdn 数据一旦缓存，除了缓存到期，否则就不会在回源查询了。如果我们的资源有了问题，更新后，此时 cdn 还是老数据…</p>\n<p>这时候就需要对 cdn 缓存进行刷新了。目前所有的厂商都支持 cdn 缓存刷新功能，但是刷新频率都有限制。</p>\n<p>刷新上，支持资源文件级别的精准刷新，也支持目录级的刷新。基本上刷新后半分钟左右都可以见效。</p>\n<h2 id=\"cdn-与前端的结合\"><a href=\"#cdn-与前端的结合\" class=\"headerlink\" title=\"cdn 与前端的结合\"></a>cdn 与前端的结合</h2><p>cdn 可以支持全站 cdn 和部分资源 cdn 两种形式。</p>\n<p>全站 cdn 就是所有流量都走 cdn，其中包括访问页面等。这样配置时候，需要注意缓存配置，页面不缓存，其他静态资源视情况而定；对于地址参数上，需要注意不能忽略。而且，可以把 cdn 地址配置成主站域名，把源地址配置为其他域名。</p>\n<p>部分资源走 cdn 比较主流，仅仅是对图片 css，js 文件进行 cdn 加速。一般还会和对象存储进行结合。主要问题在于 js 资源发送 ajax 会跨站，此时需要对接口进行 CORS 处理。这就需要后端进行一些配置了。</p>\n","site":{"data":{}},"excerpt":"<p>抽空好好研究了下 cdn，算是小有收获。</p>\n<p>在研究期间，接触了阿里云，腾讯云，七牛云。这三个都很好，不过阿里云是需要付费才能使用的，腾讯云和七牛云都有免费额度。在协议上，基本上 https 流量都是收费服务。此外，七牛云可能有些特殊，它的对象存储域名访问是和 cdn  绑定的，所以一开始我也绕了很大的弯路。</p>\n<p>这里，我只讨论 cdn，先不考虑对象存储。</p>","more":"<h2 id=\"cdn-是什么\"><a href=\"#cdn-是什么\" class=\"headerlink\" title=\"cdn 是什么\"></a>cdn 是什么</h2><p>维基百科对其的定义是：</p>\n<blockquote>\n<p>内容分发网络（英语：Content delivery network或Content distribution network，缩写：CDN）是指一种通过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、视频、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。</p>\n</blockquote>\n<p>简单来说，就是提供数据分发的服务器。你有一个数据要分享，只需要交给它，它可以帮你完成分享给多人的过程。</p>\n<p>一般的，cdn 服务商都会在国内部署大量节点。每个用户访问 cdn 域名时候，会自动匹配离他最近的节点（速度最快）。</p>\n<p>比如，你有一个文件想要分享，但是你的服务器在北方地区，南方地区访问很慢，此时需要 cdn 支撑。把你的文件交给 cdn，由它负责快速的分享给朋友们。而且，一般 cdn 默认提供默认的 http 和 https 域名供使用，也可以自定义域名使用。</p>\n<h2 id=\"cdn-简单原理\"><a href=\"#cdn-简单原理\" class=\"headerlink\" title=\"cdn 简单原理\"></a>cdn 简单原理</h2><p>上面已经说到，cdn 厂商会在各个地区增加节点，让用户直接连接最近的节点，起到加速作用。</p>\n<p>具体的加速流程也很简单：</p>\n<p>假设网站地址 yukapril.com，部署在北京，期望访问 cdn.yukapril.com 进行加速。</p>\n<p>配置好以后，东北用户 A 访问 cdn.yukapril.com 资源，自动路由到最近的东北节点。此时东北节点没有需要的资源，只好访问网站 yukapril.com 先获取一下（这个过程叫做<strong>回源</strong>），再分发给用户。</p>\n<p>此时 A 用户感觉速度不一定快，还可能变慢了，因为原本 A 用户可以直接访问北京的服务器，现在由东北的一个节点服务器负责代理传输数据了，这个过程可能快可能慢。</p>\n<p>之后，东北用户 B 在访问 cdn.yukapril.com 相同资源后，由于东北节点存在当前资源，所以直接返回了，用户 B 感觉速度快多了。</p>\n<blockquote>\n<p>cdn 没有相应数据的时候，就会回源查询。</p>\n<p>每个资源都有自己的缓存时间，超过这个时间，cdn 也会进行回源查询。</p>\n</blockquote>\n<p>所以，cdn 解决的是相同地区第二次几以后访问的速度。除了第一此外，其余访问均可以通过 cdn 缓存进行处理，减少了服务器出口带宽压力。</p>\n<p><strong>所以，常见的场景是：</strong></p>\n<ul>\n<li>你的服务器访问比较慢，比如服务器在国外，或者国内距离客户很远。</li>\n<li>你的服务器带宽很小，出口流量不能支持多人同时访问，比如是 1M 带宽主机。</li>\n<li>服务器没办法配置 https（ssl），比如是虚拟主机，此时用 cdn 做 https 代理。</li>\n</ul>\n<h2 id=\"使用-cdn-的流程\"><a href=\"#使用-cdn-的流程\" class=\"headerlink\" title=\"使用 cdn 的流程\"></a>使用 cdn 的流程</h2><p>在服务云厂商注册后，建议查看下具体的 cdn 自费，不同厂商计费方式都可能有一定出入。</p>\n<p>一般来讲，cdn 计费主要有包含：用户访问 cdn产生的上下行流量费，以及 cdn 访问你的服务器的回源费用。不同服务商可能会有免费策略。</p>\n<p>这里不考虑任何费用问题，只考虑如何接入和使用 cdn。主要需要三点：</p>\n<ul>\n<li>域名接入</li>\n<li>配置回源地址</li>\n<li>配置加速内容的策略</li>\n</ul>\n<p>这三点有的厂商在第一步时候就进行配置，也有在后续流程或者详细设置中配置的。</p>\n<h2 id=\"具体实践\"><a href=\"#具体实践\" class=\"headerlink\" title=\"具体实践\"></a>具体实践</h2><p>下文以七牛云为例子进行配置</p>\n<p>假设原域名是 <code>yukapril.com</code> 服务器在国外，访问慢。你希望对中国用户进行提速，提速 cdn 域名为 <code>cdn.yukapril.com</code></p>\n<blockquote>\n<p>图片供参考，内容以实际为准。</p>\n</blockquote>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-03-11-cdn.png-wm.white\" alt=\"img\"></p>\n<ul>\n<li><p>加速域名：就是填写加速后的域名，这里我填写 <code>cdn.yukapril.com</code></p>\n</li>\n<li><p>通信协议：一般就是 http，如果你需要 https 也可以。这里配置 https 后，需要添加证书，可以是在 cdn 厂商购买（可能有免费证书），也可以是自己已有的证书。这里配置 https，不限制源站必须也是 https，所以这样配置 cdn 可以起到对源站 http 协议进行一次加密传输的效果。<strong>此外注意查看 https 计费</strong>。</p>\n</li>\n<li><p>源站配置：</p>\n<ul>\n<li>基础设置，一般使用源站域名或者 IP 地址，而且有的厂商支持多域名多 IP 方案。后续文章我会说到对象存储，届时可以选择云存储。</li>\n<li>源站域名：就是 cdn 没有资源的时候，去哪里获取。此处就是填写自己的网站。</li>\n<li>回源 HOST：这个需要说下，cdn 没有资源的时候，会去“源站域名”的网站获取，但是请求数据需要有主机头。如果不填写，默认是用 cdn 地址代替。鉴于省事，所以回源 HOST 就和“源站域名”一致，这样源站服务器不需要额外配置主机头（域名绑定）。详细说明见下文。</li>\n<li>源站测试：这个好像只有七牛云有，需要确保你的服务器有一个测试文件而已</li>\n</ul>\n</li>\n<li><p>缓存配置：主要进行控制每个路径、资源的缓存策略，不同厂商不同。基本上常用“遵循源站”，如果源站没有缓存策略，这里必须配置，否则每个资源都不缓存，cdn 没有起到作用。</p>\n</li>\n</ul>\n<blockquote>\n<p>回源 HOST</p>\n<p>一个服务器的一个端口，可以配置多个主机头，不同的主机头可以对应不同的网站。主机头相当于一个访问网站的标志。</p>\n<p>访问 yukapril.com 服务器 80 端口，但是主机头是 cdn.yukapril.com。此时就要额外配置主机头 cdn.yukapril.com，否则服务器找对了，但是没有对应主机头信息，也不能访问网站。</p>\n</blockquote>\n<p>配置好以后，会给出一个 CNAME 地址，要求把 cdn 域名（cdn.yukapril.com）配置到此上面。</p>\n<p>之后就是稍微等待下，一般不会很久。访问 cdn 资源后，直接可以显示原来的内容。如果查阅自己的服务器日志，应该只有第一次的访问记录。</p>\n<h2 id=\"cdn-缓存的刷新\"><a href=\"#cdn-缓存的刷新\" class=\"headerlink\" title=\"cdn 缓存的刷新\"></a>cdn 缓存的刷新</h2><p>cdn 数据一旦缓存，除了缓存到期，否则就不会在回源查询了。如果我们的资源有了问题，更新后，此时 cdn 还是老数据…</p>\n<p>这时候就需要对 cdn 缓存进行刷新了。目前所有的厂商都支持 cdn 缓存刷新功能，但是刷新频率都有限制。</p>\n<p>刷新上，支持资源文件级别的精准刷新，也支持目录级的刷新。基本上刷新后半分钟左右都可以见效。</p>\n<h2 id=\"cdn-与前端的结合\"><a href=\"#cdn-与前端的结合\" class=\"headerlink\" title=\"cdn 与前端的结合\"></a>cdn 与前端的结合</h2><p>cdn 可以支持全站 cdn 和部分资源 cdn 两种形式。</p>\n<p>全站 cdn 就是所有流量都走 cdn，其中包括访问页面等。这样配置时候，需要注意缓存配置，页面不缓存，其他静态资源视情况而定；对于地址参数上，需要注意不能忽略。而且，可以把 cdn 地址配置成主站域名，把源地址配置为其他域名。</p>\n<p>部分资源走 cdn 比较主流，仅仅是对图片 css，js 文件进行 cdn 加速。一般还会和对象存储进行结合。主要问题在于 js 资源发送 ajax 会跨站，此时需要对接口进行 CORS 处理。这就需要后端进行一些配置了。</p>"},{"layout":"post","title":"对象存储 入门","date":"2018-03-24T23:26:00.000Z","_content":"\n上一次写了一些 cdn 的使用心得，这次继续。我觉得，为了省钱，或者能找个免费的静态空间，有必要补充写一篇「对象存储」的文章。\n\n这次主要是文字说明，不会图文并茂的具体讲如何配置对象存储，只会说原因，以及大致配置注意点。\n\n<!-- more -->\n\n## 什么是对象存储\n\n这次不引用别人的说法。我自己说说理解。\n\n对象存储就是服务商提供的网络存储空间，可以简单理解为 FTP 空间。\n\n但它同时提供加密访问，可以保证你公司的私有文件，外人不能直接访问到。这就是第一种用法，加密访问。\n\n此外，还有一种用法。随着技术发展，基本上每家服务商都提供静态文件托管功能，就是你直接上传静态页面，稍作配置，就可以变成静态服务器，外网就可以访问了。当然，你如果不想手动上传，可以使用回源功能，当访问的资源找不到，会自动回源到你的服务器进行抓取。\n\n但是对象存储是固定服务器位置，比如在青岛。虽然速度还可以，但是想要各个地区都实现极速访问，还是得和 cdn 联系起来。\n\n## 各个平台的说明\n\n和 cdn 差不多，各个平台功能上差异不大。目前我发现七牛只能给一个测试用的域名（各种限制），其他的服务商都会给他们自己提供的域名。七牛只能配合 cdn 来配置自己的域名。\n\n费用上，对象存储主要收取存储费，按空间计算。同时还有流量费，请求次数费。如果配置了回源，那么还有回源费。反正计算点很多。阿里云对象存储还要区分服务器位置，不同位置要购买不同套餐（流量包等）。\n\n由于曾经的无知，给同事带去过小的灾难，所以关于费用上，我不多说了，请自行研究斟酌。\n\n## 如何搭配使用\n\n或许你开始糊涂了，没关系，这里确实很烦人。我把常见的想法列举下，讨论他们的特点。嗯，有的方案不是不行，是不好。\n\n我们以架设一个静态网站为目的，实际考虑下。\n\n### 方案一：自己不准备服务器，直接把静态网站放到对象存储上，让用户绑定域名访问？\n\n这样最省钱，直接上传静态网站到对象存储上，配上自己的域名，OK 了。\n\n**优点：**非常省钱。\n\n**缺点：**修改网站需要重新上传，各地访问速度一般。\n\n### 方案二：自己不准备服务器，直接把静态网站放到对象存储上，再配合 cdn 加速访问？\n\n比上面的方案多花一点钱，但是速度问题解决了。不过要考虑刷新 cdn 缓存问题。\n\n**优点：**比较省钱，访问速度快。\n\n**缺点：**修改网站需要重新上传，cdn 缓存处理。\n\n\n### 方案三：自己准备服务器，直接配合 cdn 加速访问？\n\n自己有独立服务器，开销大一些了。直接配上了 cdn，成本再次提升。当然访问速度非常快了。每次更新静态网站，也需要考虑刷新 cdn 缓存。\n\n**优点：**成本最高，访问速度快。自己通过脚本等方式上传管理好自己的服务器，不用每次去服务商那里上传。\n\n**缺点：**这是最贵的方案，还需要 cdn 缓存处理。\n\n### 方案四：自己准备服务器，配置对象存储（回源到自己服务器），再配置 cdn（回源到对象存储），加速访问？\n\n这个方案比起上一个，中途还绕路对象存储了，太麻烦了。但为什么有这么复杂的方案呢？这必须和速度以及价格联系着说。\n\n简单说来，方案三，cdn 默认配置的缓存失效后，会自动回源访问。这个费用较高。而且速度慢。\n\n但如果让 cdn 访问服务商对象存储服务，价格较低。速度快。\n\n假设你的服务器在北京，非常烂，每个资源需要 0.1 秒。国内 cdn 有 100 个节点，缓存为1天。假设一周内，所有文件不做任何修改。\n\n那么方案三，一周回源你服务器次数：100 * 7 = 700 次。全国 100 个节点，都访问你的破服务器，每次 0.1 秒，700 次，70 秒浪费了。\n\n换成方案四：你服务器在北京，你购买对象存储一定也选择北京。一周回源对象存储次数：100 * 7 = 700 次。对象存储回源你的服务器，只需要 1 次，浪费了 0.1 秒。由于对象存储在北京是非常好的机房，速度快。全国 100 个节点回源北京的对象存储服务器，需要浪费 700 * 0.01 = 7 秒。\n\n一个是 70 秒，一个是 7.1 秒。不言而喻。\n\n而且对象存储回源服务器只需要 1 次，所以只需要考虑 cdn 回源到对象存储的费用。这个费用略低于 cdn 回源你的服务器费用。虽然对象存储有存储费等额外费用，但是这套方案仍有价格优势。\n\n## 如何选定方案\n\n上面的四个方案，都是可行的，但各有利弊。\n\n| # | 自己准备服务器 | 对象存储维护 | cdn 额外维护 | 费用 |\n|--|--|--|--|--|\n| 方案一 | X | √ | X | 低 |\n| 方案二 | X | √ | √ | 一般 |\n| 方案三 | √ | X | √ | 最高 |\n| 方案四 | √ | √ | √ | 比较高 |\n\n* 如果速度要求不高，不用选择 cdn。对象存储速度也还好。\n* 如果希望网站走 https，那么必须用 cdn，cdn 可以起到代理作用。\n* 自己是否假设服务器，主要看网站。比如你是 PHP 网站，但是可以静态化啊，所以如果你希望自己手动静态化，可以直接把静态网站放到对象存储上面。否则就用对象存储回源。\n\n## 如何进行配置\n\n这个配置没那么复杂，简单说说就好。\n\n存储类型：默认选择标准存储就好。低频存储和归档存储主要是给公司业务加密访问备档使用的。\n\n读写权限：公共读（私有写）。就是说读取不要权限，写入需要权限。\n\n静态页面 / 默认首页设置：需要开启。\n\n回源设置：配置好你的源服务器。同时还支持 CORS 跨站处理。\n","source":"_posts/2018/2018-03-24-bucket.md","raw":"---\nlayout: post\ntitle: \"对象存储 入门\"\ndate: 2018-03-24 23:26:00 GMT+0000\ncategories: [前端]\ntags:  [cdn, 对象存储, COS, OSS]\n---\n\n上一次写了一些 cdn 的使用心得，这次继续。我觉得，为了省钱，或者能找个免费的静态空间，有必要补充写一篇「对象存储」的文章。\n\n这次主要是文字说明，不会图文并茂的具体讲如何配置对象存储，只会说原因，以及大致配置注意点。\n\n<!-- more -->\n\n## 什么是对象存储\n\n这次不引用别人的说法。我自己说说理解。\n\n对象存储就是服务商提供的网络存储空间，可以简单理解为 FTP 空间。\n\n但它同时提供加密访问，可以保证你公司的私有文件，外人不能直接访问到。这就是第一种用法，加密访问。\n\n此外，还有一种用法。随着技术发展，基本上每家服务商都提供静态文件托管功能，就是你直接上传静态页面，稍作配置，就可以变成静态服务器，外网就可以访问了。当然，你如果不想手动上传，可以使用回源功能，当访问的资源找不到，会自动回源到你的服务器进行抓取。\n\n但是对象存储是固定服务器位置，比如在青岛。虽然速度还可以，但是想要各个地区都实现极速访问，还是得和 cdn 联系起来。\n\n## 各个平台的说明\n\n和 cdn 差不多，各个平台功能上差异不大。目前我发现七牛只能给一个测试用的域名（各种限制），其他的服务商都会给他们自己提供的域名。七牛只能配合 cdn 来配置自己的域名。\n\n费用上，对象存储主要收取存储费，按空间计算。同时还有流量费，请求次数费。如果配置了回源，那么还有回源费。反正计算点很多。阿里云对象存储还要区分服务器位置，不同位置要购买不同套餐（流量包等）。\n\n由于曾经的无知，给同事带去过小的灾难，所以关于费用上，我不多说了，请自行研究斟酌。\n\n## 如何搭配使用\n\n或许你开始糊涂了，没关系，这里确实很烦人。我把常见的想法列举下，讨论他们的特点。嗯，有的方案不是不行，是不好。\n\n我们以架设一个静态网站为目的，实际考虑下。\n\n### 方案一：自己不准备服务器，直接把静态网站放到对象存储上，让用户绑定域名访问？\n\n这样最省钱，直接上传静态网站到对象存储上，配上自己的域名，OK 了。\n\n**优点：**非常省钱。\n\n**缺点：**修改网站需要重新上传，各地访问速度一般。\n\n### 方案二：自己不准备服务器，直接把静态网站放到对象存储上，再配合 cdn 加速访问？\n\n比上面的方案多花一点钱，但是速度问题解决了。不过要考虑刷新 cdn 缓存问题。\n\n**优点：**比较省钱，访问速度快。\n\n**缺点：**修改网站需要重新上传，cdn 缓存处理。\n\n\n### 方案三：自己准备服务器，直接配合 cdn 加速访问？\n\n自己有独立服务器，开销大一些了。直接配上了 cdn，成本再次提升。当然访问速度非常快了。每次更新静态网站，也需要考虑刷新 cdn 缓存。\n\n**优点：**成本最高，访问速度快。自己通过脚本等方式上传管理好自己的服务器，不用每次去服务商那里上传。\n\n**缺点：**这是最贵的方案，还需要 cdn 缓存处理。\n\n### 方案四：自己准备服务器，配置对象存储（回源到自己服务器），再配置 cdn（回源到对象存储），加速访问？\n\n这个方案比起上一个，中途还绕路对象存储了，太麻烦了。但为什么有这么复杂的方案呢？这必须和速度以及价格联系着说。\n\n简单说来，方案三，cdn 默认配置的缓存失效后，会自动回源访问。这个费用较高。而且速度慢。\n\n但如果让 cdn 访问服务商对象存储服务，价格较低。速度快。\n\n假设你的服务器在北京，非常烂，每个资源需要 0.1 秒。国内 cdn 有 100 个节点，缓存为1天。假设一周内，所有文件不做任何修改。\n\n那么方案三，一周回源你服务器次数：100 * 7 = 700 次。全国 100 个节点，都访问你的破服务器，每次 0.1 秒，700 次，70 秒浪费了。\n\n换成方案四：你服务器在北京，你购买对象存储一定也选择北京。一周回源对象存储次数：100 * 7 = 700 次。对象存储回源你的服务器，只需要 1 次，浪费了 0.1 秒。由于对象存储在北京是非常好的机房，速度快。全国 100 个节点回源北京的对象存储服务器，需要浪费 700 * 0.01 = 7 秒。\n\n一个是 70 秒，一个是 7.1 秒。不言而喻。\n\n而且对象存储回源服务器只需要 1 次，所以只需要考虑 cdn 回源到对象存储的费用。这个费用略低于 cdn 回源你的服务器费用。虽然对象存储有存储费等额外费用，但是这套方案仍有价格优势。\n\n## 如何选定方案\n\n上面的四个方案，都是可行的，但各有利弊。\n\n| # | 自己准备服务器 | 对象存储维护 | cdn 额外维护 | 费用 |\n|--|--|--|--|--|\n| 方案一 | X | √ | X | 低 |\n| 方案二 | X | √ | √ | 一般 |\n| 方案三 | √ | X | √ | 最高 |\n| 方案四 | √ | √ | √ | 比较高 |\n\n* 如果速度要求不高，不用选择 cdn。对象存储速度也还好。\n* 如果希望网站走 https，那么必须用 cdn，cdn 可以起到代理作用。\n* 自己是否假设服务器，主要看网站。比如你是 PHP 网站，但是可以静态化啊，所以如果你希望自己手动静态化，可以直接把静态网站放到对象存储上面。否则就用对象存储回源。\n\n## 如何进行配置\n\n这个配置没那么复杂，简单说说就好。\n\n存储类型：默认选择标准存储就好。低频存储和归档存储主要是给公司业务加密访问备档使用的。\n\n读写权限：公共读（私有写）。就是说读取不要权限，写入需要权限。\n\n静态页面 / 默认首页设置：需要开启。\n\n回源设置：配置好你的源服务器。同时还支持 CORS 跨站处理。\n","slug":"2018-2018-03-24-bucket","published":1,"updated":"2019-07-18T17:19:07.261Z","comments":1,"photos":[],"link":"","_id":"cjy8y72sj0043s21d4e93jwiy","content":"<p>上一次写了一些 cdn 的使用心得，这次继续。我觉得，为了省钱，或者能找个免费的静态空间，有必要补充写一篇「对象存储」的文章。</p>\n<p>这次主要是文字说明，不会图文并茂的具体讲如何配置对象存储，只会说原因，以及大致配置注意点。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"什么是对象存储\"><a href=\"#什么是对象存储\" class=\"headerlink\" title=\"什么是对象存储\"></a>什么是对象存储</h2><p>这次不引用别人的说法。我自己说说理解。</p>\n<p>对象存储就是服务商提供的网络存储空间，可以简单理解为 FTP 空间。</p>\n<p>但它同时提供加密访问，可以保证你公司的私有文件，外人不能直接访问到。这就是第一种用法，加密访问。</p>\n<p>此外，还有一种用法。随着技术发展，基本上每家服务商都提供静态文件托管功能，就是你直接上传静态页面，稍作配置，就可以变成静态服务器，外网就可以访问了。当然，你如果不想手动上传，可以使用回源功能，当访问的资源找不到，会自动回源到你的服务器进行抓取。</p>\n<p>但是对象存储是固定服务器位置，比如在青岛。虽然速度还可以，但是想要各个地区都实现极速访问，还是得和 cdn 联系起来。</p>\n<h2 id=\"各个平台的说明\"><a href=\"#各个平台的说明\" class=\"headerlink\" title=\"各个平台的说明\"></a>各个平台的说明</h2><p>和 cdn 差不多，各个平台功能上差异不大。目前我发现七牛只能给一个测试用的域名（各种限制），其他的服务商都会给他们自己提供的域名。七牛只能配合 cdn 来配置自己的域名。</p>\n<p>费用上，对象存储主要收取存储费，按空间计算。同时还有流量费，请求次数费。如果配置了回源，那么还有回源费。反正计算点很多。阿里云对象存储还要区分服务器位置，不同位置要购买不同套餐（流量包等）。</p>\n<p>由于曾经的无知，给同事带去过小的灾难，所以关于费用上，我不多说了，请自行研究斟酌。</p>\n<h2 id=\"如何搭配使用\"><a href=\"#如何搭配使用\" class=\"headerlink\" title=\"如何搭配使用\"></a>如何搭配使用</h2><p>或许你开始糊涂了，没关系，这里确实很烦人。我把常见的想法列举下，讨论他们的特点。嗯，有的方案不是不行，是不好。</p>\n<p>我们以架设一个静态网站为目的，实际考虑下。</p>\n<h3 id=\"方案一：自己不准备服务器，直接把静态网站放到对象存储上，让用户绑定域名访问？\"><a href=\"#方案一：自己不准备服务器，直接把静态网站放到对象存储上，让用户绑定域名访问？\" class=\"headerlink\" title=\"方案一：自己不准备服务器，直接把静态网站放到对象存储上，让用户绑定域名访问？\"></a>方案一：自己不准备服务器，直接把静态网站放到对象存储上，让用户绑定域名访问？</h3><p>这样最省钱，直接上传静态网站到对象存储上，配上自己的域名，OK 了。</p>\n<p><strong>优点：</strong>非常省钱。</p>\n<p><strong>缺点：</strong>修改网站需要重新上传，各地访问速度一般。</p>\n<h3 id=\"方案二：自己不准备服务器，直接把静态网站放到对象存储上，再配合-cdn-加速访问？\"><a href=\"#方案二：自己不准备服务器，直接把静态网站放到对象存储上，再配合-cdn-加速访问？\" class=\"headerlink\" title=\"方案二：自己不准备服务器，直接把静态网站放到对象存储上，再配合 cdn 加速访问？\"></a>方案二：自己不准备服务器，直接把静态网站放到对象存储上，再配合 cdn 加速访问？</h3><p>比上面的方案多花一点钱，但是速度问题解决了。不过要考虑刷新 cdn 缓存问题。</p>\n<p><strong>优点：</strong>比较省钱，访问速度快。</p>\n<p><strong>缺点：</strong>修改网站需要重新上传，cdn 缓存处理。</p>\n<h3 id=\"方案三：自己准备服务器，直接配合-cdn-加速访问？\"><a href=\"#方案三：自己准备服务器，直接配合-cdn-加速访问？\" class=\"headerlink\" title=\"方案三：自己准备服务器，直接配合 cdn 加速访问？\"></a>方案三：自己准备服务器，直接配合 cdn 加速访问？</h3><p>自己有独立服务器，开销大一些了。直接配上了 cdn，成本再次提升。当然访问速度非常快了。每次更新静态网站，也需要考虑刷新 cdn 缓存。</p>\n<p><strong>优点：</strong>成本最高，访问速度快。自己通过脚本等方式上传管理好自己的服务器，不用每次去服务商那里上传。</p>\n<p><strong>缺点：</strong>这是最贵的方案，还需要 cdn 缓存处理。</p>\n<h3 id=\"方案四：自己准备服务器，配置对象存储（回源到自己服务器），再配置-cdn（回源到对象存储），加速访问？\"><a href=\"#方案四：自己准备服务器，配置对象存储（回源到自己服务器），再配置-cdn（回源到对象存储），加速访问？\" class=\"headerlink\" title=\"方案四：自己准备服务器，配置对象存储（回源到自己服务器），再配置 cdn（回源到对象存储），加速访问？\"></a>方案四：自己准备服务器，配置对象存储（回源到自己服务器），再配置 cdn（回源到对象存储），加速访问？</h3><p>这个方案比起上一个，中途还绕路对象存储了，太麻烦了。但为什么有这么复杂的方案呢？这必须和速度以及价格联系着说。</p>\n<p>简单说来，方案三，cdn 默认配置的缓存失效后，会自动回源访问。这个费用较高。而且速度慢。</p>\n<p>但如果让 cdn 访问服务商对象存储服务，价格较低。速度快。</p>\n<p>假设你的服务器在北京，非常烂，每个资源需要 0.1 秒。国内 cdn 有 100 个节点，缓存为1天。假设一周内，所有文件不做任何修改。</p>\n<p>那么方案三，一周回源你服务器次数：100 * 7 = 700 次。全国 100 个节点，都访问你的破服务器，每次 0.1 秒，700 次，70 秒浪费了。</p>\n<p>换成方案四：你服务器在北京，你购买对象存储一定也选择北京。一周回源对象存储次数：100 * 7 = 700 次。对象存储回源你的服务器，只需要 1 次，浪费了 0.1 秒。由于对象存储在北京是非常好的机房，速度快。全国 100 个节点回源北京的对象存储服务器，需要浪费 700 * 0.01 = 7 秒。</p>\n<p>一个是 70 秒，一个是 7.1 秒。不言而喻。</p>\n<p>而且对象存储回源服务器只需要 1 次，所以只需要考虑 cdn 回源到对象存储的费用。这个费用略低于 cdn 回源你的服务器费用。虽然对象存储有存储费等额外费用，但是这套方案仍有价格优势。</p>\n<h2 id=\"如何选定方案\"><a href=\"#如何选定方案\" class=\"headerlink\" title=\"如何选定方案\"></a>如何选定方案</h2><p>上面的四个方案，都是可行的，但各有利弊。</p>\n<table>\n<thead>\n<tr>\n<th>#</th>\n<th>自己准备服务器</th>\n<th>对象存储维护</th>\n<th>cdn 额外维护</th>\n<th>费用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>方案一</td>\n<td>X</td>\n<td>√</td>\n<td>X</td>\n<td>低</td>\n</tr>\n<tr>\n<td>方案二</td>\n<td>X</td>\n<td>√</td>\n<td>√</td>\n<td>一般</td>\n</tr>\n<tr>\n<td>方案三</td>\n<td>√</td>\n<td>X</td>\n<td>√</td>\n<td>最高</td>\n</tr>\n<tr>\n<td>方案四</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>比较高</td>\n</tr>\n</tbody></table>\n<ul>\n<li>如果速度要求不高，不用选择 cdn。对象存储速度也还好。</li>\n<li>如果希望网站走 https，那么必须用 cdn，cdn 可以起到代理作用。</li>\n<li>自己是否假设服务器，主要看网站。比如你是 PHP 网站，但是可以静态化啊，所以如果你希望自己手动静态化，可以直接把静态网站放到对象存储上面。否则就用对象存储回源。</li>\n</ul>\n<h2 id=\"如何进行配置\"><a href=\"#如何进行配置\" class=\"headerlink\" title=\"如何进行配置\"></a>如何进行配置</h2><p>这个配置没那么复杂，简单说说就好。</p>\n<p>存储类型：默认选择标准存储就好。低频存储和归档存储主要是给公司业务加密访问备档使用的。</p>\n<p>读写权限：公共读（私有写）。就是说读取不要权限，写入需要权限。</p>\n<p>静态页面 / 默认首页设置：需要开启。</p>\n<p>回源设置：配置好你的源服务器。同时还支持 CORS 跨站处理。</p>\n","site":{"data":{}},"excerpt":"<p>上一次写了一些 cdn 的使用心得，这次继续。我觉得，为了省钱，或者能找个免费的静态空间，有必要补充写一篇「对象存储」的文章。</p>\n<p>这次主要是文字说明，不会图文并茂的具体讲如何配置对象存储，只会说原因，以及大致配置注意点。</p>","more":"<h2 id=\"什么是对象存储\"><a href=\"#什么是对象存储\" class=\"headerlink\" title=\"什么是对象存储\"></a>什么是对象存储</h2><p>这次不引用别人的说法。我自己说说理解。</p>\n<p>对象存储就是服务商提供的网络存储空间，可以简单理解为 FTP 空间。</p>\n<p>但它同时提供加密访问，可以保证你公司的私有文件，外人不能直接访问到。这就是第一种用法，加密访问。</p>\n<p>此外，还有一种用法。随着技术发展，基本上每家服务商都提供静态文件托管功能，就是你直接上传静态页面，稍作配置，就可以变成静态服务器，外网就可以访问了。当然，你如果不想手动上传，可以使用回源功能，当访问的资源找不到，会自动回源到你的服务器进行抓取。</p>\n<p>但是对象存储是固定服务器位置，比如在青岛。虽然速度还可以，但是想要各个地区都实现极速访问，还是得和 cdn 联系起来。</p>\n<h2 id=\"各个平台的说明\"><a href=\"#各个平台的说明\" class=\"headerlink\" title=\"各个平台的说明\"></a>各个平台的说明</h2><p>和 cdn 差不多，各个平台功能上差异不大。目前我发现七牛只能给一个测试用的域名（各种限制），其他的服务商都会给他们自己提供的域名。七牛只能配合 cdn 来配置自己的域名。</p>\n<p>费用上，对象存储主要收取存储费，按空间计算。同时还有流量费，请求次数费。如果配置了回源，那么还有回源费。反正计算点很多。阿里云对象存储还要区分服务器位置，不同位置要购买不同套餐（流量包等）。</p>\n<p>由于曾经的无知，给同事带去过小的灾难，所以关于费用上，我不多说了，请自行研究斟酌。</p>\n<h2 id=\"如何搭配使用\"><a href=\"#如何搭配使用\" class=\"headerlink\" title=\"如何搭配使用\"></a>如何搭配使用</h2><p>或许你开始糊涂了，没关系，这里确实很烦人。我把常见的想法列举下，讨论他们的特点。嗯，有的方案不是不行，是不好。</p>\n<p>我们以架设一个静态网站为目的，实际考虑下。</p>\n<h3 id=\"方案一：自己不准备服务器，直接把静态网站放到对象存储上，让用户绑定域名访问？\"><a href=\"#方案一：自己不准备服务器，直接把静态网站放到对象存储上，让用户绑定域名访问？\" class=\"headerlink\" title=\"方案一：自己不准备服务器，直接把静态网站放到对象存储上，让用户绑定域名访问？\"></a>方案一：自己不准备服务器，直接把静态网站放到对象存储上，让用户绑定域名访问？</h3><p>这样最省钱，直接上传静态网站到对象存储上，配上自己的域名，OK 了。</p>\n<p><strong>优点：</strong>非常省钱。</p>\n<p><strong>缺点：</strong>修改网站需要重新上传，各地访问速度一般。</p>\n<h3 id=\"方案二：自己不准备服务器，直接把静态网站放到对象存储上，再配合-cdn-加速访问？\"><a href=\"#方案二：自己不准备服务器，直接把静态网站放到对象存储上，再配合-cdn-加速访问？\" class=\"headerlink\" title=\"方案二：自己不准备服务器，直接把静态网站放到对象存储上，再配合 cdn 加速访问？\"></a>方案二：自己不准备服务器，直接把静态网站放到对象存储上，再配合 cdn 加速访问？</h3><p>比上面的方案多花一点钱，但是速度问题解决了。不过要考虑刷新 cdn 缓存问题。</p>\n<p><strong>优点：</strong>比较省钱，访问速度快。</p>\n<p><strong>缺点：</strong>修改网站需要重新上传，cdn 缓存处理。</p>\n<h3 id=\"方案三：自己准备服务器，直接配合-cdn-加速访问？\"><a href=\"#方案三：自己准备服务器，直接配合-cdn-加速访问？\" class=\"headerlink\" title=\"方案三：自己准备服务器，直接配合 cdn 加速访问？\"></a>方案三：自己准备服务器，直接配合 cdn 加速访问？</h3><p>自己有独立服务器，开销大一些了。直接配上了 cdn，成本再次提升。当然访问速度非常快了。每次更新静态网站，也需要考虑刷新 cdn 缓存。</p>\n<p><strong>优点：</strong>成本最高，访问速度快。自己通过脚本等方式上传管理好自己的服务器，不用每次去服务商那里上传。</p>\n<p><strong>缺点：</strong>这是最贵的方案，还需要 cdn 缓存处理。</p>\n<h3 id=\"方案四：自己准备服务器，配置对象存储（回源到自己服务器），再配置-cdn（回源到对象存储），加速访问？\"><a href=\"#方案四：自己准备服务器，配置对象存储（回源到自己服务器），再配置-cdn（回源到对象存储），加速访问？\" class=\"headerlink\" title=\"方案四：自己准备服务器，配置对象存储（回源到自己服务器），再配置 cdn（回源到对象存储），加速访问？\"></a>方案四：自己准备服务器，配置对象存储（回源到自己服务器），再配置 cdn（回源到对象存储），加速访问？</h3><p>这个方案比起上一个，中途还绕路对象存储了，太麻烦了。但为什么有这么复杂的方案呢？这必须和速度以及价格联系着说。</p>\n<p>简单说来，方案三，cdn 默认配置的缓存失效后，会自动回源访问。这个费用较高。而且速度慢。</p>\n<p>但如果让 cdn 访问服务商对象存储服务，价格较低。速度快。</p>\n<p>假设你的服务器在北京，非常烂，每个资源需要 0.1 秒。国内 cdn 有 100 个节点，缓存为1天。假设一周内，所有文件不做任何修改。</p>\n<p>那么方案三，一周回源你服务器次数：100 * 7 = 700 次。全国 100 个节点，都访问你的破服务器，每次 0.1 秒，700 次，70 秒浪费了。</p>\n<p>换成方案四：你服务器在北京，你购买对象存储一定也选择北京。一周回源对象存储次数：100 * 7 = 700 次。对象存储回源你的服务器，只需要 1 次，浪费了 0.1 秒。由于对象存储在北京是非常好的机房，速度快。全国 100 个节点回源北京的对象存储服务器，需要浪费 700 * 0.01 = 7 秒。</p>\n<p>一个是 70 秒，一个是 7.1 秒。不言而喻。</p>\n<p>而且对象存储回源服务器只需要 1 次，所以只需要考虑 cdn 回源到对象存储的费用。这个费用略低于 cdn 回源你的服务器费用。虽然对象存储有存储费等额外费用，但是这套方案仍有价格优势。</p>\n<h2 id=\"如何选定方案\"><a href=\"#如何选定方案\" class=\"headerlink\" title=\"如何选定方案\"></a>如何选定方案</h2><p>上面的四个方案，都是可行的，但各有利弊。</p>\n<table>\n<thead>\n<tr>\n<th>#</th>\n<th>自己准备服务器</th>\n<th>对象存储维护</th>\n<th>cdn 额外维护</th>\n<th>费用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>方案一</td>\n<td>X</td>\n<td>√</td>\n<td>X</td>\n<td>低</td>\n</tr>\n<tr>\n<td>方案二</td>\n<td>X</td>\n<td>√</td>\n<td>√</td>\n<td>一般</td>\n</tr>\n<tr>\n<td>方案三</td>\n<td>√</td>\n<td>X</td>\n<td>√</td>\n<td>最高</td>\n</tr>\n<tr>\n<td>方案四</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>比较高</td>\n</tr>\n</tbody></table>\n<ul>\n<li>如果速度要求不高，不用选择 cdn。对象存储速度也还好。</li>\n<li>如果希望网站走 https，那么必须用 cdn，cdn 可以起到代理作用。</li>\n<li>自己是否假设服务器，主要看网站。比如你是 PHP 网站，但是可以静态化啊，所以如果你希望自己手动静态化，可以直接把静态网站放到对象存储上面。否则就用对象存储回源。</li>\n</ul>\n<h2 id=\"如何进行配置\"><a href=\"#如何进行配置\" class=\"headerlink\" title=\"如何进行配置\"></a>如何进行配置</h2><p>这个配置没那么复杂，简单说说就好。</p>\n<p>存储类型：默认选择标准存储就好。低频存储和归档存储主要是给公司业务加密访问备档使用的。</p>\n<p>读写权限：公共读（私有写）。就是说读取不要权限，写入需要权限。</p>\n<p>静态页面 / 默认首页设置：需要开启。</p>\n<p>回源设置：配置好你的源服务器。同时还支持 CORS 跨站处理。</p>"},{"layout":"post","title":"JS 自定义事件","date":"2018-03-27T00:21:00.000Z","_content":"\n今天在写代码时候，遇到两个组件关联的情况，最终通过 js 自定义事件进行了解决。\n\n<!-- more -->\n\n## 场景简单复现\n\n当时的情况比较复杂。大致是使用Vue-elementUI封装了input组件，自己封装了表单元素读取与写入组件。input 组件有相应验证功能，如果是用户输入，那么没有任何问题。如果是通过自己封装的表单操作组件，直接写入input 的 value，那么没办法触发 input 的 `input` `change` 事件，也就没办法进行监控了。\n\n把这个场景简单复原一下。\n\n一个组件是输入框组件，有一个验证功能。\n\n一个组件是表单修改数据组件，负责修改 input 的值。\n\n```html\n<form id=\"J_Form\" action=\"javascript:void 0\">\n    <input id=\"J_Input\" name=\"age\" value=\"18\" />\n    <button id=\"J_Btn\">修改 input 值为200</button>\n</form>\n\n<script>\n    const checkInputValue = el => {\n        el.addEventListener('change', e => {\n            console.log('触发 change:', e.target.value)\n        })\n        el.addEventListener('input', e => {\n            console.log('触发 input:', e.target.value)\n        })\n    }\n\n    const formInputSetter = (form, name, value) => {\n        form.elements[name].value = value\n    }\n</script>\n\n<script>\n    const $input = document.querySelector('#J_Input')\n    const $btn = document.querySelector('#J_Btn')\n    const $form = document.querySelector('#J_Form')\n\n    checkInputValue($input)\n\n    $btn.addEventListener('click', () => {\n        formInputSetter($form, 'age', 200)\n    })\n</script>\n```\n\n代码比较简单，无需多解释。\n\n为什么不触发 `change` `input` 事件呢？\n\n首先说 `change` 事件，要想触发它，必须是 input 元素值变化了，并且从焦点状态变为非焦点状态。\n\n在说下 `input` 事件，这个简单，必须是用户键盘敲击输入，类似 keypress 等事件。\n\n很明显的，通过 js 修改 value 值，不在这两个事件范围内。\n\n## 通过自定义事件解决\n\n对此，我考虑采用自定义事件，实现广播。让第二个组件修改数值后，广播给第一个组件。\n\n> 为什么不模拟广播 `change` 事件呢？主要是项目中 `change` 事件还有其他作用，如果此时模拟，会导致误触发。所以自定义一个事件来实现。\n\n知道了原理，那么解决起来也很简单：\n\n```html\n<form id=\"J_Form\" action=\"javascript:void 0\">\n    <input id=\"J_Input\" name=\"age\" value=\"18\" />\n    <button id=\"J_Btn\">修改 input 值为200</button>\n</form>\n\n<script>\n    const checkInputValue = el => {\n        el.addEventListener('change', e => {\n            console.log('触发 change:', e.target.value)\n        })\n        el.addEventListener('input', e => {\n            console.log('触发 input:', e.target.value)\n        })\n\n        // 增加自定义事件接收\n        el.addEventListener('push', e => {\n            console.log('触发 push:', e)\n        })\n    }\n\n    const formInputSetter = (form, name, value) => {\n        form.elements[name].value = value\n    }\n</script>\n\n<script>\n    const $input = document.querySelector('#J_Input')\n    const $btn = document.querySelector('#J_Btn')\n    const $form = document.querySelector('#J_Form')\n\n    checkInputValue($input)\n\n    $btn.addEventListener('click', () => {\n        formInputSetter($form, 'age', 200)\n\n        // 创建并分发自定义事件\n        let event = new CustomEvent('push', { detail: { k1: 'a', k2: 'b' } })\n        $input.dispatchEvent(event)\n    })\n</script>\n```\n\n通过 `new CustomEvent` 创建自定义事件，在进行接收就可以处理了。\n\n这里要注意一点：自定义事件的传参，只能定义到 `detail` 上，其他字段不能写入。接收的时候，也是 `e.detail` 进行接收。\n\n== EOF ===","source":"_posts/2018/2018-03-26-event.md","raw":"---\nlayout: post\ntitle: \"JS 自定义事件\"\ndate: 2018-03-27 00:21:00 GMT+0000\ncategories: [前端]\ntags:  [CustomEvent]\n---\n\n今天在写代码时候，遇到两个组件关联的情况，最终通过 js 自定义事件进行了解决。\n\n<!-- more -->\n\n## 场景简单复现\n\n当时的情况比较复杂。大致是使用Vue-elementUI封装了input组件，自己封装了表单元素读取与写入组件。input 组件有相应验证功能，如果是用户输入，那么没有任何问题。如果是通过自己封装的表单操作组件，直接写入input 的 value，那么没办法触发 input 的 `input` `change` 事件，也就没办法进行监控了。\n\n把这个场景简单复原一下。\n\n一个组件是输入框组件，有一个验证功能。\n\n一个组件是表单修改数据组件，负责修改 input 的值。\n\n```html\n<form id=\"J_Form\" action=\"javascript:void 0\">\n    <input id=\"J_Input\" name=\"age\" value=\"18\" />\n    <button id=\"J_Btn\">修改 input 值为200</button>\n</form>\n\n<script>\n    const checkInputValue = el => {\n        el.addEventListener('change', e => {\n            console.log('触发 change:', e.target.value)\n        })\n        el.addEventListener('input', e => {\n            console.log('触发 input:', e.target.value)\n        })\n    }\n\n    const formInputSetter = (form, name, value) => {\n        form.elements[name].value = value\n    }\n</script>\n\n<script>\n    const $input = document.querySelector('#J_Input')\n    const $btn = document.querySelector('#J_Btn')\n    const $form = document.querySelector('#J_Form')\n\n    checkInputValue($input)\n\n    $btn.addEventListener('click', () => {\n        formInputSetter($form, 'age', 200)\n    })\n</script>\n```\n\n代码比较简单，无需多解释。\n\n为什么不触发 `change` `input` 事件呢？\n\n首先说 `change` 事件，要想触发它，必须是 input 元素值变化了，并且从焦点状态变为非焦点状态。\n\n在说下 `input` 事件，这个简单，必须是用户键盘敲击输入，类似 keypress 等事件。\n\n很明显的，通过 js 修改 value 值，不在这两个事件范围内。\n\n## 通过自定义事件解决\n\n对此，我考虑采用自定义事件，实现广播。让第二个组件修改数值后，广播给第一个组件。\n\n> 为什么不模拟广播 `change` 事件呢？主要是项目中 `change` 事件还有其他作用，如果此时模拟，会导致误触发。所以自定义一个事件来实现。\n\n知道了原理，那么解决起来也很简单：\n\n```html\n<form id=\"J_Form\" action=\"javascript:void 0\">\n    <input id=\"J_Input\" name=\"age\" value=\"18\" />\n    <button id=\"J_Btn\">修改 input 值为200</button>\n</form>\n\n<script>\n    const checkInputValue = el => {\n        el.addEventListener('change', e => {\n            console.log('触发 change:', e.target.value)\n        })\n        el.addEventListener('input', e => {\n            console.log('触发 input:', e.target.value)\n        })\n\n        // 增加自定义事件接收\n        el.addEventListener('push', e => {\n            console.log('触发 push:', e)\n        })\n    }\n\n    const formInputSetter = (form, name, value) => {\n        form.elements[name].value = value\n    }\n</script>\n\n<script>\n    const $input = document.querySelector('#J_Input')\n    const $btn = document.querySelector('#J_Btn')\n    const $form = document.querySelector('#J_Form')\n\n    checkInputValue($input)\n\n    $btn.addEventListener('click', () => {\n        formInputSetter($form, 'age', 200)\n\n        // 创建并分发自定义事件\n        let event = new CustomEvent('push', { detail: { k1: 'a', k2: 'b' } })\n        $input.dispatchEvent(event)\n    })\n</script>\n```\n\n通过 `new CustomEvent` 创建自定义事件，在进行接收就可以处理了。\n\n这里要注意一点：自定义事件的传参，只能定义到 `detail` 上，其他字段不能写入。接收的时候，也是 `e.detail` 进行接收。\n\n== EOF ===","slug":"2018-2018-03-26-event","published":1,"updated":"2019-07-18T17:19:07.077Z","comments":1,"photos":[],"link":"","_id":"cjy8y72sl0047s21d1ndxe7kz","content":"<p>今天在写代码时候，遇到两个组件关联的情况，最终通过 js 自定义事件进行了解决。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"场景简单复现\"><a href=\"#场景简单复现\" class=\"headerlink\" title=\"场景简单复现\"></a>场景简单复现</h2><p>当时的情况比较复杂。大致是使用Vue-elementUI封装了input组件，自己封装了表单元素读取与写入组件。input 组件有相应验证功能，如果是用户输入，那么没有任何问题。如果是通过自己封装的表单操作组件，直接写入input 的 value，那么没办法触发 input 的 <code>input</code> <code>change</code> 事件，也就没办法进行监控了。</p>\n<p>把这个场景简单复原一下。</p>\n<p>一个组件是输入框组件，有一个验证功能。</p>\n<p>一个组件是表单修改数据组件，负责修改 input 的值。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Form\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"javascript:void 0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Input\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"18\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Btn\"</span>&gt;</span>修改 input 值为200<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> checkInputValue = <span class=\"function\"><span class=\"params\">el</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el.addEventListener(<span class=\"string\">'change'</span>, e =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发 change:'</span>, e.target.value)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"javascript\">        el.addEventListener(<span class=\"string\">'input'</span>, e =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发 input:'</span>, e.target.value)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> formInputSetter = <span class=\"function\">(<span class=\"params\">form, name, value</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\">        form.elements[name].value = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> $input = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Input'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> $btn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Btn'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> $form = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Form'</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    checkInputValue($input)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    $btn.addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        formInputSetter($form, <span class=\"string\">'age'</span>, <span class=\"number\">200</span>)</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>代码比较简单，无需多解释。</p>\n<p>为什么不触发 <code>change</code> <code>input</code> 事件呢？</p>\n<p>首先说 <code>change</code> 事件，要想触发它，必须是 input 元素值变化了，并且从焦点状态变为非焦点状态。</p>\n<p>在说下 <code>input</code> 事件，这个简单，必须是用户键盘敲击输入，类似 keypress 等事件。</p>\n<p>很明显的，通过 js 修改 value 值，不在这两个事件范围内。</p>\n<h2 id=\"通过自定义事件解决\"><a href=\"#通过自定义事件解决\" class=\"headerlink\" title=\"通过自定义事件解决\"></a>通过自定义事件解决</h2><p>对此，我考虑采用自定义事件，实现广播。让第二个组件修改数值后，广播给第一个组件。</p>\n<blockquote>\n<p>为什么不模拟广播 <code>change</code> 事件呢？主要是项目中 <code>change</code> 事件还有其他作用，如果此时模拟，会导致误触发。所以自定义一个事件来实现。</p>\n</blockquote>\n<p>知道了原理，那么解决起来也很简单：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Form\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"javascript:void 0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Input\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"18\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Btn\"</span>&gt;</span>修改 input 值为200<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> checkInputValue = <span class=\"function\"><span class=\"params\">el</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el.addEventListener(<span class=\"string\">'change'</span>, e =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发 change:'</span>, e.target.value)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"javascript\">        el.addEventListener(<span class=\"string\">'input'</span>, e =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发 input:'</span>, e.target.value)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 增加自定义事件接收</span></span></span><br><span class=\"line\"><span class=\"javascript\">        el.addEventListener(<span class=\"string\">'push'</span>, e =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发 push:'</span>, e)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> formInputSetter = <span class=\"function\">(<span class=\"params\">form, name, value</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\">        form.elements[name].value = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> $input = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Input'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> $btn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Btn'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> $form = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Form'</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    checkInputValue($input)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    $btn.addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        formInputSetter($form, <span class=\"string\">'age'</span>, <span class=\"number\">200</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 创建并分发自定义事件</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> event = <span class=\"keyword\">new</span> CustomEvent(<span class=\"string\">'push'</span>, &#123; <span class=\"attr\">detail</span>: &#123; <span class=\"attr\">k1</span>: <span class=\"string\">'a'</span>, <span class=\"attr\">k2</span>: <span class=\"string\">'b'</span> &#125; &#125;)</span></span><br><span class=\"line\">        $input.dispatchEvent(event)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过 <code>new CustomEvent</code> 创建自定义事件，在进行接收就可以处理了。</p>\n<p>这里要注意一点：自定义事件的传参，只能定义到 <code>detail</code> 上，其他字段不能写入。接收的时候，也是 <code>e.detail</code> 进行接收。</p>\n<p>== EOF ===</p>\n","site":{"data":{}},"excerpt":"<p>今天在写代码时候，遇到两个组件关联的情况，最终通过 js 自定义事件进行了解决。</p>","more":"<h2 id=\"场景简单复现\"><a href=\"#场景简单复现\" class=\"headerlink\" title=\"场景简单复现\"></a>场景简单复现</h2><p>当时的情况比较复杂。大致是使用Vue-elementUI封装了input组件，自己封装了表单元素读取与写入组件。input 组件有相应验证功能，如果是用户输入，那么没有任何问题。如果是通过自己封装的表单操作组件，直接写入input 的 value，那么没办法触发 input 的 <code>input</code> <code>change</code> 事件，也就没办法进行监控了。</p>\n<p>把这个场景简单复原一下。</p>\n<p>一个组件是输入框组件，有一个验证功能。</p>\n<p>一个组件是表单修改数据组件，负责修改 input 的值。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Form\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"javascript:void 0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Input\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"18\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Btn\"</span>&gt;</span>修改 input 值为200<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> checkInputValue = <span class=\"function\"><span class=\"params\">el</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el.addEventListener(<span class=\"string\">'change'</span>, e =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发 change:'</span>, e.target.value)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"javascript\">        el.addEventListener(<span class=\"string\">'input'</span>, e =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发 input:'</span>, e.target.value)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> formInputSetter = <span class=\"function\">(<span class=\"params\">form, name, value</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\">        form.elements[name].value = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> $input = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Input'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> $btn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Btn'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> $form = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Form'</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    checkInputValue($input)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    $btn.addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        formInputSetter($form, <span class=\"string\">'age'</span>, <span class=\"number\">200</span>)</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>代码比较简单，无需多解释。</p>\n<p>为什么不触发 <code>change</code> <code>input</code> 事件呢？</p>\n<p>首先说 <code>change</code> 事件，要想触发它，必须是 input 元素值变化了，并且从焦点状态变为非焦点状态。</p>\n<p>在说下 <code>input</code> 事件，这个简单，必须是用户键盘敲击输入，类似 keypress 等事件。</p>\n<p>很明显的，通过 js 修改 value 值，不在这两个事件范围内。</p>\n<h2 id=\"通过自定义事件解决\"><a href=\"#通过自定义事件解决\" class=\"headerlink\" title=\"通过自定义事件解决\"></a>通过自定义事件解决</h2><p>对此，我考虑采用自定义事件，实现广播。让第二个组件修改数值后，广播给第一个组件。</p>\n<blockquote>\n<p>为什么不模拟广播 <code>change</code> 事件呢？主要是项目中 <code>change</code> 事件还有其他作用，如果此时模拟，会导致误触发。所以自定义一个事件来实现。</p>\n</blockquote>\n<p>知道了原理，那么解决起来也很简单：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Form\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"javascript:void 0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Input\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"18\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Btn\"</span>&gt;</span>修改 input 值为200<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> checkInputValue = <span class=\"function\"><span class=\"params\">el</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el.addEventListener(<span class=\"string\">'change'</span>, e =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发 change:'</span>, e.target.value)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"javascript\">        el.addEventListener(<span class=\"string\">'input'</span>, e =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发 input:'</span>, e.target.value)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 增加自定义事件接收</span></span></span><br><span class=\"line\"><span class=\"javascript\">        el.addEventListener(<span class=\"string\">'push'</span>, e =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发 push:'</span>, e)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> formInputSetter = <span class=\"function\">(<span class=\"params\">form, name, value</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\">        form.elements[name].value = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> $input = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Input'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> $btn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Btn'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> $form = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Form'</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    checkInputValue($input)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    $btn.addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        formInputSetter($form, <span class=\"string\">'age'</span>, <span class=\"number\">200</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 创建并分发自定义事件</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> event = <span class=\"keyword\">new</span> CustomEvent(<span class=\"string\">'push'</span>, &#123; <span class=\"attr\">detail</span>: &#123; <span class=\"attr\">k1</span>: <span class=\"string\">'a'</span>, <span class=\"attr\">k2</span>: <span class=\"string\">'b'</span> &#125; &#125;)</span></span><br><span class=\"line\">        $input.dispatchEvent(event)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过 <code>new CustomEvent</code> 创建自定义事件，在进行接收就可以处理了。</p>\n<p>这里要注意一点：自定义事件的传参，只能定义到 <code>detail</code> 上，其他字段不能写入。接收的时候，也是 <code>e.detail</code> 进行接收。</p>\n<p>== EOF ===</p>"},{"layout":"post","title":"cdn 对象存储应用实战——博客的搭建","date":"2018-04-06T16:19:00.000Z","_content":"\n嗯，终于写到实战应用了。这次用自己的亲身经历说说 cdn 和对象存储在个人博客中的的应用。\n\n感兴趣的话，可以看看之前的两篇文章，分别说了《cdn 入门》和《对象存储入门》。\n\n<!-- more -->\n\n> 特殊要说明的是，中国大陆域名建议备案，否则可能无法启用 cdn 或者解析服务。\n>\n> 而备案可能需要大陆购买虚拟主机（空间）来协助，中国大陆有了空间，那还整啥 cdn？其实果真如此，意义不是特别大，除非为了 https 访问。\n>\n> 所以以上，有可能导致鸡生蛋蛋生鸡的问题...\n>\n> 本文不考虑域名备案等问题。默认按已备案，服务均可用情况讨论。\n>\n> 同样的，静态博客和动态博客也不讨论好坏，各有千秋。\n\n## 个人博客的常见方案\n\n个人自建博客，一般从博客系统、架设、域名上，常见方案不过几种。\n\n**博客系统**\n\n* 使用动态类技术实现（wordpress ghost 等）\n* 使用静态系统（hexo jekyll 手写页面等）\n\n**发布环境**\n\n* 云主机（虚拟主机）\n* 自己架设 VPS 等\n* github pages （gitlab pages，coding pages）等\n\n**域名**\n\n* 使用 github pages 默认域名\n* 自己的域名\n\n### 常见方案\n\n综合上面的集中方式，一般技术类博客常见方案有：\n\n1. 使用静态博客系统，部署到 github pages 上。有域名的话，还会自己配置上域名。\n\n    优点：不花钱部署，不考虑流量。访问速度慢。\n\n    缺点：绑定自己域名，没办法 https。不绑定域名，默认域名不够个性。\n\n2. 使用静态或者动态博客系统，部署到廉价虚拟主机上。同时配置自己的域名。\n\n    优点：比如阿里云曾经的廉价共享虚拟主机，成本低，速度快，流量有限制，但一般都够用。\n\n    缺点：绑定自己域名，没办法 https。\n\n> 由于自己有 vps 的话，默认你能力较强，基本上就可以参考之前的文章配置上 cdn 来提速了。本文不再考虑这种情况。\n\n通过上面两种方案，可以看出，除了静态动态博客不一样外，主要问题在于：\n\n1. 用了 github pages，速度慢。\n\n2. 都不能配置上 https。\n\n本文就是针对这两个问题，来说明如何处理个人博客速度问题和 https 访问问题。\n\n## 针对 github pages 等静态网站国内化、cdn 处理\n\n本操作，主要是把国外的网站内容转移到国内，方便后续进行 cdn。当然，转移到国内后，也可以直接配置域名，当作 http 网站直接访问。这样等同于你有了一台国内的静态网站的服务器。\n\n> 真实案例：本博客的 [收藏集](https://collection.yukapril.com) 栏目。网址：[http://collection.yukapril.com](https://collection.yukapril.com)\n\n这个栏目采用了静态博客（jekyll）+ github pages 部署方式。并绑定域名。\n\n因为 github pages 国内访问慢，所以直接 cdn 加速就比较吃亏，首次回源各地区都很慢。所以，需要在国内架设服务器进行回源使用。\n\n1. 首先要对其开通对象存储功能，用于在国内充当本地服务器。\n\n    这里多说一句，貌似腾讯云不能访问 github pages 网站。我曾经没有回源成功。\n\n2. 在对象存储里面，配置回源（镜像），内容为 github pages 网址。\n    \n    **这里需要注意：github pages 访问必须是域名形式，不能是域名后面带有路径的形式（比如 `http://yukapril.github.io/collection`）。因为这两种形式，生成的页面资源路径是不同的。**\n    \n    你可以用默认的github pages 自己用户名创建一个，或者绑定一个自己的随意域名（这个域名起到过渡作用，不会被用户访问）。\n    \n    同时，配置上默认首页（静态网站）功能为开启。\n\n    好了，到这里国外的资源，已经复制到国内一份了。\n    \n3. 通过 cdn 部署域名。\n\n    如果你期望 https 访问，那么需要自己准备 ssl 证书。当然，很多服务商提供免费一年的服务。不过我还是建议自己单独去申请，因为我发现服务商要么限制只能申请一个，要么就是申请速度很慢。\n\n    > 申请 ssl 的话，可以到这里免费申请：[https://freessl.org/](https://freessl.org/)。\n\n    下面来配置我们自己的域名。\n\n    找到 cdn 栏目。增加一条我们希望最终访问的域名记录。\n\n    源站类型选择 “对象存储”。之后选择相应的源站就好。\n\n    业务类型选择 “全站加速” 或者 “静态加速”。\n\n    缓存时间建议选择长一点。因为修改文件后，我一般是通过手动触发缓存刷新形式。如果你懒的这么做，可以设置短一点，它失效后会自动刷新。\n\n    如果有 ssl 密钥，那么直接上传配置好就可以。\n\n    最后配置好 cname，等待生效后就可以访问了。\n\n    至此，我们的网站就配置完成了。如果是 https 访问，注意关注计费。我了解到国内服务商都没有针对 https 免费免流量的情况。\n\n## 针对虚拟主机 cdn 加速处理\n\n如果你的是动态博客，不论是否国内外，都不能带上对象存储，否则每次都要手动清理对象存储的缓存，比较麻烦。\n\n如果你的是静态博客，但是在国内，也不需要带上对象存储，因为带上了意义不大。\n\n综上，就有这一套直接上 cdn 的方案。\n\n1. 首先，确保你的博客域名，是一个无关域名。如果能 IP 访问的话，无所谓。\n\n    这一步要保证你的博客可以通过备用域名进行连接，或者 IP 进行连接。到时候让 cdn 回源使用。\n\n    如果你没有办法通过独立 IP 访问，要配置备用域名，因为主域名一会要配置给 cdn 来用。\n\n2. 直接开通 cdn。\n\n    > 同样的，如果需要 https 访问，请参考上文先去获取证书。\n\n    下面来配置我们自己的域名。\n\n    找到 cdn 栏目。增加一条我们希望最终访问的域名记录。\n\n    源站类型选择 IP 或者 “源站域名”。\n\n    注意调整下回源 HOST：如果是 IP 回源，而且你的 IP 不是独立 IP，或者需要通过主机头进行区分的话。此时注意配置好回源主机头。建议采用第一步的备用域名，这样省事。当然也可以在主机上加一条 cdn 加速域名的主机绑定记录。\n\n    业务类型选择 “全站加速” 或者 “静态加速”。\n\n    缓存时间建议选择长一点。因为修改文件后，我一般是通过手动触发缓存刷新形式。如果你懒的这么做，可以设置短一点，它失效后会自动刷新。\n\n    如果有 ssl 密钥，那么直接上传配置好就可以。\n\n    最后配置好 cname，等待生效后就可以访问了。\n\n## 注意点\n\n1. 你如果配置了根域名（比如 `abc.com`），那就是根域名配置了 cname，此时根域名不能配置 mx 邮箱解析了（即不能分配 `test@abc.com` 这种形式的邮箱）。需要二选一。所以建议考虑使用 `www.abc.com` 这种域名配置 cdn。\n\n2. 注意观察缓存命中率。一般静态博客命中率应该比较高，全部缓存后，理论应该为 100%。一般也应该 80% 以上。当然前提是缓存后才有效。\n\n3. 自己访问 cdn 域名试试看，一般 cdn 厂商都会有特殊文件头返回。\n\n    比如阿里云，是 `x-cache: HIT ...`。确保第二次访问后，有 `HIT` 字样。\n\n    > 查阅主要有两种方式\n    >\n    > 1. 使用 `curl -I https://abc.com` 来检查。\n    >\n    > 2. 使用浏览器，开发者模式，关闭缓存（否则可能返回200 from cache，304 not modified），访问网站，查看 `network` 面板的访问记录。","source":"_posts/2018/2018-04-06-cdn.md","raw":"---\nlayout: post\ntitle: \"cdn 对象存储应用实战——博客的搭建\"\ndate: 2018-04-06 16:19:00 GMT+0000\ncategories: [前端]\ntags:  [cdn,blog]\n---\n\n嗯，终于写到实战应用了。这次用自己的亲身经历说说 cdn 和对象存储在个人博客中的的应用。\n\n感兴趣的话，可以看看之前的两篇文章，分别说了《cdn 入门》和《对象存储入门》。\n\n<!-- more -->\n\n> 特殊要说明的是，中国大陆域名建议备案，否则可能无法启用 cdn 或者解析服务。\n>\n> 而备案可能需要大陆购买虚拟主机（空间）来协助，中国大陆有了空间，那还整啥 cdn？其实果真如此，意义不是特别大，除非为了 https 访问。\n>\n> 所以以上，有可能导致鸡生蛋蛋生鸡的问题...\n>\n> 本文不考虑域名备案等问题。默认按已备案，服务均可用情况讨论。\n>\n> 同样的，静态博客和动态博客也不讨论好坏，各有千秋。\n\n## 个人博客的常见方案\n\n个人自建博客，一般从博客系统、架设、域名上，常见方案不过几种。\n\n**博客系统**\n\n* 使用动态类技术实现（wordpress ghost 等）\n* 使用静态系统（hexo jekyll 手写页面等）\n\n**发布环境**\n\n* 云主机（虚拟主机）\n* 自己架设 VPS 等\n* github pages （gitlab pages，coding pages）等\n\n**域名**\n\n* 使用 github pages 默认域名\n* 自己的域名\n\n### 常见方案\n\n综合上面的集中方式，一般技术类博客常见方案有：\n\n1. 使用静态博客系统，部署到 github pages 上。有域名的话，还会自己配置上域名。\n\n    优点：不花钱部署，不考虑流量。访问速度慢。\n\n    缺点：绑定自己域名，没办法 https。不绑定域名，默认域名不够个性。\n\n2. 使用静态或者动态博客系统，部署到廉价虚拟主机上。同时配置自己的域名。\n\n    优点：比如阿里云曾经的廉价共享虚拟主机，成本低，速度快，流量有限制，但一般都够用。\n\n    缺点：绑定自己域名，没办法 https。\n\n> 由于自己有 vps 的话，默认你能力较强，基本上就可以参考之前的文章配置上 cdn 来提速了。本文不再考虑这种情况。\n\n通过上面两种方案，可以看出，除了静态动态博客不一样外，主要问题在于：\n\n1. 用了 github pages，速度慢。\n\n2. 都不能配置上 https。\n\n本文就是针对这两个问题，来说明如何处理个人博客速度问题和 https 访问问题。\n\n## 针对 github pages 等静态网站国内化、cdn 处理\n\n本操作，主要是把国外的网站内容转移到国内，方便后续进行 cdn。当然，转移到国内后，也可以直接配置域名，当作 http 网站直接访问。这样等同于你有了一台国内的静态网站的服务器。\n\n> 真实案例：本博客的 [收藏集](https://collection.yukapril.com) 栏目。网址：[http://collection.yukapril.com](https://collection.yukapril.com)\n\n这个栏目采用了静态博客（jekyll）+ github pages 部署方式。并绑定域名。\n\n因为 github pages 国内访问慢，所以直接 cdn 加速就比较吃亏，首次回源各地区都很慢。所以，需要在国内架设服务器进行回源使用。\n\n1. 首先要对其开通对象存储功能，用于在国内充当本地服务器。\n\n    这里多说一句，貌似腾讯云不能访问 github pages 网站。我曾经没有回源成功。\n\n2. 在对象存储里面，配置回源（镜像），内容为 github pages 网址。\n    \n    **这里需要注意：github pages 访问必须是域名形式，不能是域名后面带有路径的形式（比如 `http://yukapril.github.io/collection`）。因为这两种形式，生成的页面资源路径是不同的。**\n    \n    你可以用默认的github pages 自己用户名创建一个，或者绑定一个自己的随意域名（这个域名起到过渡作用，不会被用户访问）。\n    \n    同时，配置上默认首页（静态网站）功能为开启。\n\n    好了，到这里国外的资源，已经复制到国内一份了。\n    \n3. 通过 cdn 部署域名。\n\n    如果你期望 https 访问，那么需要自己准备 ssl 证书。当然，很多服务商提供免费一年的服务。不过我还是建议自己单独去申请，因为我发现服务商要么限制只能申请一个，要么就是申请速度很慢。\n\n    > 申请 ssl 的话，可以到这里免费申请：[https://freessl.org/](https://freessl.org/)。\n\n    下面来配置我们自己的域名。\n\n    找到 cdn 栏目。增加一条我们希望最终访问的域名记录。\n\n    源站类型选择 “对象存储”。之后选择相应的源站就好。\n\n    业务类型选择 “全站加速” 或者 “静态加速”。\n\n    缓存时间建议选择长一点。因为修改文件后，我一般是通过手动触发缓存刷新形式。如果你懒的这么做，可以设置短一点，它失效后会自动刷新。\n\n    如果有 ssl 密钥，那么直接上传配置好就可以。\n\n    最后配置好 cname，等待生效后就可以访问了。\n\n    至此，我们的网站就配置完成了。如果是 https 访问，注意关注计费。我了解到国内服务商都没有针对 https 免费免流量的情况。\n\n## 针对虚拟主机 cdn 加速处理\n\n如果你的是动态博客，不论是否国内外，都不能带上对象存储，否则每次都要手动清理对象存储的缓存，比较麻烦。\n\n如果你的是静态博客，但是在国内，也不需要带上对象存储，因为带上了意义不大。\n\n综上，就有这一套直接上 cdn 的方案。\n\n1. 首先，确保你的博客域名，是一个无关域名。如果能 IP 访问的话，无所谓。\n\n    这一步要保证你的博客可以通过备用域名进行连接，或者 IP 进行连接。到时候让 cdn 回源使用。\n\n    如果你没有办法通过独立 IP 访问，要配置备用域名，因为主域名一会要配置给 cdn 来用。\n\n2. 直接开通 cdn。\n\n    > 同样的，如果需要 https 访问，请参考上文先去获取证书。\n\n    下面来配置我们自己的域名。\n\n    找到 cdn 栏目。增加一条我们希望最终访问的域名记录。\n\n    源站类型选择 IP 或者 “源站域名”。\n\n    注意调整下回源 HOST：如果是 IP 回源，而且你的 IP 不是独立 IP，或者需要通过主机头进行区分的话。此时注意配置好回源主机头。建议采用第一步的备用域名，这样省事。当然也可以在主机上加一条 cdn 加速域名的主机绑定记录。\n\n    业务类型选择 “全站加速” 或者 “静态加速”。\n\n    缓存时间建议选择长一点。因为修改文件后，我一般是通过手动触发缓存刷新形式。如果你懒的这么做，可以设置短一点，它失效后会自动刷新。\n\n    如果有 ssl 密钥，那么直接上传配置好就可以。\n\n    最后配置好 cname，等待生效后就可以访问了。\n\n## 注意点\n\n1. 你如果配置了根域名（比如 `abc.com`），那就是根域名配置了 cname，此时根域名不能配置 mx 邮箱解析了（即不能分配 `test@abc.com` 这种形式的邮箱）。需要二选一。所以建议考虑使用 `www.abc.com` 这种域名配置 cdn。\n\n2. 注意观察缓存命中率。一般静态博客命中率应该比较高，全部缓存后，理论应该为 100%。一般也应该 80% 以上。当然前提是缓存后才有效。\n\n3. 自己访问 cdn 域名试试看，一般 cdn 厂商都会有特殊文件头返回。\n\n    比如阿里云，是 `x-cache: HIT ...`。确保第二次访问后，有 `HIT` 字样。\n\n    > 查阅主要有两种方式\n    >\n    > 1. 使用 `curl -I https://abc.com` 来检查。\n    >\n    > 2. 使用浏览器，开发者模式，关闭缓存（否则可能返回200 from cache，304 not modified），访问网站，查看 `network` 面板的访问记录。","slug":"2018-2018-04-06-cdn","published":1,"updated":"2019-07-18T17:19:07.269Z","comments":1,"photos":[],"link":"","_id":"cjy8y72sm0049s21dpe2g2brj","content":"<p>嗯，终于写到实战应用了。这次用自己的亲身经历说说 cdn 和对象存储在个人博客中的的应用。</p>\n<p>感兴趣的话，可以看看之前的两篇文章，分别说了《cdn 入门》和《对象存储入门》。</p>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>特殊要说明的是，中国大陆域名建议备案，否则可能无法启用 cdn 或者解析服务。</p>\n<p>而备案可能需要大陆购买虚拟主机（空间）来协助，中国大陆有了空间，那还整啥 cdn？其实果真如此，意义不是特别大，除非为了 https 访问。</p>\n<p>所以以上，有可能导致鸡生蛋蛋生鸡的问题…</p>\n<p>本文不考虑域名备案等问题。默认按已备案，服务均可用情况讨论。</p>\n<p>同样的，静态博客和动态博客也不讨论好坏，各有千秋。</p>\n</blockquote>\n<h2 id=\"个人博客的常见方案\"><a href=\"#个人博客的常见方案\" class=\"headerlink\" title=\"个人博客的常见方案\"></a>个人博客的常见方案</h2><p>个人自建博客，一般从博客系统、架设、域名上，常见方案不过几种。</p>\n<p><strong>博客系统</strong></p>\n<ul>\n<li>使用动态类技术实现（wordpress ghost 等）</li>\n<li>使用静态系统（hexo jekyll 手写页面等）</li>\n</ul>\n<p><strong>发布环境</strong></p>\n<ul>\n<li>云主机（虚拟主机）</li>\n<li>自己架设 VPS 等</li>\n<li>github pages （gitlab pages，coding pages）等</li>\n</ul>\n<p><strong>域名</strong></p>\n<ul>\n<li>使用 github pages 默认域名</li>\n<li>自己的域名</li>\n</ul>\n<h3 id=\"常见方案\"><a href=\"#常见方案\" class=\"headerlink\" title=\"常见方案\"></a>常见方案</h3><p>综合上面的集中方式，一般技术类博客常见方案有：</p>\n<ol>\n<li><p>使用静态博客系统，部署到 github pages 上。有域名的话，还会自己配置上域名。</p>\n<p> 优点：不花钱部署，不考虑流量。访问速度慢。</p>\n<p> 缺点：绑定自己域名，没办法 https。不绑定域名，默认域名不够个性。</p>\n</li>\n<li><p>使用静态或者动态博客系统，部署到廉价虚拟主机上。同时配置自己的域名。</p>\n<p> 优点：比如阿里云曾经的廉价共享虚拟主机，成本低，速度快，流量有限制，但一般都够用。</p>\n<p> 缺点：绑定自己域名，没办法 https。</p>\n</li>\n</ol>\n<blockquote>\n<p>由于自己有 vps 的话，默认你能力较强，基本上就可以参考之前的文章配置上 cdn 来提速了。本文不再考虑这种情况。</p>\n</blockquote>\n<p>通过上面两种方案，可以看出，除了静态动态博客不一样外，主要问题在于：</p>\n<ol>\n<li><p>用了 github pages，速度慢。</p>\n</li>\n<li><p>都不能配置上 https。</p>\n</li>\n</ol>\n<p>本文就是针对这两个问题，来说明如何处理个人博客速度问题和 https 访问问题。</p>\n<h2 id=\"针对-github-pages-等静态网站国内化、cdn-处理\"><a href=\"#针对-github-pages-等静态网站国内化、cdn-处理\" class=\"headerlink\" title=\"针对 github pages 等静态网站国内化、cdn 处理\"></a>针对 github pages 等静态网站国内化、cdn 处理</h2><p>本操作，主要是把国外的网站内容转移到国内，方便后续进行 cdn。当然，转移到国内后，也可以直接配置域名，当作 http 网站直接访问。这样等同于你有了一台国内的静态网站的服务器。</p>\n<blockquote>\n<p>真实案例：本博客的 <a href=\"https://collection.yukapril.com\" target=\"_blank\" rel=\"noopener\">收藏集</a> 栏目。网址：<a href=\"https://collection.yukapril.com\" target=\"_blank\" rel=\"noopener\">http://collection.yukapril.com</a></p>\n</blockquote>\n<p>这个栏目采用了静态博客（jekyll）+ github pages 部署方式。并绑定域名。</p>\n<p>因为 github pages 国内访问慢，所以直接 cdn 加速就比较吃亏，首次回源各地区都很慢。所以，需要在国内架设服务器进行回源使用。</p>\n<ol>\n<li><p>首先要对其开通对象存储功能，用于在国内充当本地服务器。</p>\n<p> 这里多说一句，貌似腾讯云不能访问 github pages 网站。我曾经没有回源成功。</p>\n</li>\n<li><p>在对象存储里面，配置回源（镜像），内容为 github pages 网址。</p>\n<p> <strong>这里需要注意：github pages 访问必须是域名形式，不能是域名后面带有路径的形式（比如 <code>http://yukapril.github.io/collection</code>）。因为这两种形式，生成的页面资源路径是不同的。</strong></p>\n<p> 你可以用默认的github pages 自己用户名创建一个，或者绑定一个自己的随意域名（这个域名起到过渡作用，不会被用户访问）。</p>\n<p> 同时，配置上默认首页（静态网站）功能为开启。</p>\n<p> 好了，到这里国外的资源，已经复制到国内一份了。</p>\n</li>\n<li><p>通过 cdn 部署域名。</p>\n<p> 如果你期望 https 访问，那么需要自己准备 ssl 证书。当然，很多服务商提供免费一年的服务。不过我还是建议自己单独去申请，因为我发现服务商要么限制只能申请一个，要么就是申请速度很慢。</p>\n<blockquote>\n<p>申请 ssl 的话，可以到这里免费申请：<a href=\"https://freessl.org/\" target=\"_blank\" rel=\"noopener\">https://freessl.org/</a>。</p>\n</blockquote>\n<p> 下面来配置我们自己的域名。</p>\n<p> 找到 cdn 栏目。增加一条我们希望最终访问的域名记录。</p>\n<p> 源站类型选择 “对象存储”。之后选择相应的源站就好。</p>\n<p> 业务类型选择 “全站加速” 或者 “静态加速”。</p>\n<p> 缓存时间建议选择长一点。因为修改文件后，我一般是通过手动触发缓存刷新形式。如果你懒的这么做，可以设置短一点，它失效后会自动刷新。</p>\n<p> 如果有 ssl 密钥，那么直接上传配置好就可以。</p>\n<p> 最后配置好 cname，等待生效后就可以访问了。</p>\n<p> 至此，我们的网站就配置完成了。如果是 https 访问，注意关注计费。我了解到国内服务商都没有针对 https 免费免流量的情况。</p>\n</li>\n</ol>\n<h2 id=\"针对虚拟主机-cdn-加速处理\"><a href=\"#针对虚拟主机-cdn-加速处理\" class=\"headerlink\" title=\"针对虚拟主机 cdn 加速处理\"></a>针对虚拟主机 cdn 加速处理</h2><p>如果你的是动态博客，不论是否国内外，都不能带上对象存储，否则每次都要手动清理对象存储的缓存，比较麻烦。</p>\n<p>如果你的是静态博客，但是在国内，也不需要带上对象存储，因为带上了意义不大。</p>\n<p>综上，就有这一套直接上 cdn 的方案。</p>\n<ol>\n<li><p>首先，确保你的博客域名，是一个无关域名。如果能 IP 访问的话，无所谓。</p>\n<p> 这一步要保证你的博客可以通过备用域名进行连接，或者 IP 进行连接。到时候让 cdn 回源使用。</p>\n<p> 如果你没有办法通过独立 IP 访问，要配置备用域名，因为主域名一会要配置给 cdn 来用。</p>\n</li>\n<li><p>直接开通 cdn。</p>\n<blockquote>\n<p>同样的，如果需要 https 访问，请参考上文先去获取证书。</p>\n</blockquote>\n<p> 下面来配置我们自己的域名。</p>\n<p> 找到 cdn 栏目。增加一条我们希望最终访问的域名记录。</p>\n<p> 源站类型选择 IP 或者 “源站域名”。</p>\n<p> 注意调整下回源 HOST：如果是 IP 回源，而且你的 IP 不是独立 IP，或者需要通过主机头进行区分的话。此时注意配置好回源主机头。建议采用第一步的备用域名，这样省事。当然也可以在主机上加一条 cdn 加速域名的主机绑定记录。</p>\n<p> 业务类型选择 “全站加速” 或者 “静态加速”。</p>\n<p> 缓存时间建议选择长一点。因为修改文件后，我一般是通过手动触发缓存刷新形式。如果你懒的这么做，可以设置短一点，它失效后会自动刷新。</p>\n<p> 如果有 ssl 密钥，那么直接上传配置好就可以。</p>\n<p> 最后配置好 cname，等待生效后就可以访问了。</p>\n</li>\n</ol>\n<h2 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h2><ol>\n<li><p>你如果配置了根域名（比如 <code>abc.com</code>），那就是根域名配置了 cname，此时根域名不能配置 mx 邮箱解析了（即不能分配 <code>test@abc.com</code> 这种形式的邮箱）。需要二选一。所以建议考虑使用 <code>www.abc.com</code> 这种域名配置 cdn。</p>\n</li>\n<li><p>注意观察缓存命中率。一般静态博客命中率应该比较高，全部缓存后，理论应该为 100%。一般也应该 80% 以上。当然前提是缓存后才有效。</p>\n</li>\n<li><p>自己访问 cdn 域名试试看，一般 cdn 厂商都会有特殊文件头返回。</p>\n<p> 比如阿里云，是 <code>x-cache: HIT ...</code>。确保第二次访问后，有 <code>HIT</code> 字样。</p>\n<blockquote>\n<p>查阅主要有两种方式</p>\n<ol>\n<li><p>使用 <code>curl -I https://abc.com</code> 来检查。</p>\n</li>\n<li><p>使用浏览器，开发者模式，关闭缓存（否则可能返回200 from cache，304 not modified），访问网站，查看 <code>network</code> 面板的访问记录。</p>\n</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>嗯，终于写到实战应用了。这次用自己的亲身经历说说 cdn 和对象存储在个人博客中的的应用。</p>\n<p>感兴趣的话，可以看看之前的两篇文章，分别说了《cdn 入门》和《对象存储入门》。</p>","more":"<blockquote>\n<p>特殊要说明的是，中国大陆域名建议备案，否则可能无法启用 cdn 或者解析服务。</p>\n<p>而备案可能需要大陆购买虚拟主机（空间）来协助，中国大陆有了空间，那还整啥 cdn？其实果真如此，意义不是特别大，除非为了 https 访问。</p>\n<p>所以以上，有可能导致鸡生蛋蛋生鸡的问题…</p>\n<p>本文不考虑域名备案等问题。默认按已备案，服务均可用情况讨论。</p>\n<p>同样的，静态博客和动态博客也不讨论好坏，各有千秋。</p>\n</blockquote>\n<h2 id=\"个人博客的常见方案\"><a href=\"#个人博客的常见方案\" class=\"headerlink\" title=\"个人博客的常见方案\"></a>个人博客的常见方案</h2><p>个人自建博客，一般从博客系统、架设、域名上，常见方案不过几种。</p>\n<p><strong>博客系统</strong></p>\n<ul>\n<li>使用动态类技术实现（wordpress ghost 等）</li>\n<li>使用静态系统（hexo jekyll 手写页面等）</li>\n</ul>\n<p><strong>发布环境</strong></p>\n<ul>\n<li>云主机（虚拟主机）</li>\n<li>自己架设 VPS 等</li>\n<li>github pages （gitlab pages，coding pages）等</li>\n</ul>\n<p><strong>域名</strong></p>\n<ul>\n<li>使用 github pages 默认域名</li>\n<li>自己的域名</li>\n</ul>\n<h3 id=\"常见方案\"><a href=\"#常见方案\" class=\"headerlink\" title=\"常见方案\"></a>常见方案</h3><p>综合上面的集中方式，一般技术类博客常见方案有：</p>\n<ol>\n<li><p>使用静态博客系统，部署到 github pages 上。有域名的话，还会自己配置上域名。</p>\n<p> 优点：不花钱部署，不考虑流量。访问速度慢。</p>\n<p> 缺点：绑定自己域名，没办法 https。不绑定域名，默认域名不够个性。</p>\n</li>\n<li><p>使用静态或者动态博客系统，部署到廉价虚拟主机上。同时配置自己的域名。</p>\n<p> 优点：比如阿里云曾经的廉价共享虚拟主机，成本低，速度快，流量有限制，但一般都够用。</p>\n<p> 缺点：绑定自己域名，没办法 https。</p>\n</li>\n</ol>\n<blockquote>\n<p>由于自己有 vps 的话，默认你能力较强，基本上就可以参考之前的文章配置上 cdn 来提速了。本文不再考虑这种情况。</p>\n</blockquote>\n<p>通过上面两种方案，可以看出，除了静态动态博客不一样外，主要问题在于：</p>\n<ol>\n<li><p>用了 github pages，速度慢。</p>\n</li>\n<li><p>都不能配置上 https。</p>\n</li>\n</ol>\n<p>本文就是针对这两个问题，来说明如何处理个人博客速度问题和 https 访问问题。</p>\n<h2 id=\"针对-github-pages-等静态网站国内化、cdn-处理\"><a href=\"#针对-github-pages-等静态网站国内化、cdn-处理\" class=\"headerlink\" title=\"针对 github pages 等静态网站国内化、cdn 处理\"></a>针对 github pages 等静态网站国内化、cdn 处理</h2><p>本操作，主要是把国外的网站内容转移到国内，方便后续进行 cdn。当然，转移到国内后，也可以直接配置域名，当作 http 网站直接访问。这样等同于你有了一台国内的静态网站的服务器。</p>\n<blockquote>\n<p>真实案例：本博客的 <a href=\"https://collection.yukapril.com\" target=\"_blank\" rel=\"noopener\">收藏集</a> 栏目。网址：<a href=\"https://collection.yukapril.com\" target=\"_blank\" rel=\"noopener\">http://collection.yukapril.com</a></p>\n</blockquote>\n<p>这个栏目采用了静态博客（jekyll）+ github pages 部署方式。并绑定域名。</p>\n<p>因为 github pages 国内访问慢，所以直接 cdn 加速就比较吃亏，首次回源各地区都很慢。所以，需要在国内架设服务器进行回源使用。</p>\n<ol>\n<li><p>首先要对其开通对象存储功能，用于在国内充当本地服务器。</p>\n<p> 这里多说一句，貌似腾讯云不能访问 github pages 网站。我曾经没有回源成功。</p>\n</li>\n<li><p>在对象存储里面，配置回源（镜像），内容为 github pages 网址。</p>\n<p> <strong>这里需要注意：github pages 访问必须是域名形式，不能是域名后面带有路径的形式（比如 <code>http://yukapril.github.io/collection</code>）。因为这两种形式，生成的页面资源路径是不同的。</strong></p>\n<p> 你可以用默认的github pages 自己用户名创建一个，或者绑定一个自己的随意域名（这个域名起到过渡作用，不会被用户访问）。</p>\n<p> 同时，配置上默认首页（静态网站）功能为开启。</p>\n<p> 好了，到这里国外的资源，已经复制到国内一份了。</p>\n</li>\n<li><p>通过 cdn 部署域名。</p>\n<p> 如果你期望 https 访问，那么需要自己准备 ssl 证书。当然，很多服务商提供免费一年的服务。不过我还是建议自己单独去申请，因为我发现服务商要么限制只能申请一个，要么就是申请速度很慢。</p>\n<blockquote>\n<p>申请 ssl 的话，可以到这里免费申请：<a href=\"https://freessl.org/\" target=\"_blank\" rel=\"noopener\">https://freessl.org/</a>。</p>\n</blockquote>\n<p> 下面来配置我们自己的域名。</p>\n<p> 找到 cdn 栏目。增加一条我们希望最终访问的域名记录。</p>\n<p> 源站类型选择 “对象存储”。之后选择相应的源站就好。</p>\n<p> 业务类型选择 “全站加速” 或者 “静态加速”。</p>\n<p> 缓存时间建议选择长一点。因为修改文件后，我一般是通过手动触发缓存刷新形式。如果你懒的这么做，可以设置短一点，它失效后会自动刷新。</p>\n<p> 如果有 ssl 密钥，那么直接上传配置好就可以。</p>\n<p> 最后配置好 cname，等待生效后就可以访问了。</p>\n<p> 至此，我们的网站就配置完成了。如果是 https 访问，注意关注计费。我了解到国内服务商都没有针对 https 免费免流量的情况。</p>\n</li>\n</ol>\n<h2 id=\"针对虚拟主机-cdn-加速处理\"><a href=\"#针对虚拟主机-cdn-加速处理\" class=\"headerlink\" title=\"针对虚拟主机 cdn 加速处理\"></a>针对虚拟主机 cdn 加速处理</h2><p>如果你的是动态博客，不论是否国内外，都不能带上对象存储，否则每次都要手动清理对象存储的缓存，比较麻烦。</p>\n<p>如果你的是静态博客，但是在国内，也不需要带上对象存储，因为带上了意义不大。</p>\n<p>综上，就有这一套直接上 cdn 的方案。</p>\n<ol>\n<li><p>首先，确保你的博客域名，是一个无关域名。如果能 IP 访问的话，无所谓。</p>\n<p> 这一步要保证你的博客可以通过备用域名进行连接，或者 IP 进行连接。到时候让 cdn 回源使用。</p>\n<p> 如果你没有办法通过独立 IP 访问，要配置备用域名，因为主域名一会要配置给 cdn 来用。</p>\n</li>\n<li><p>直接开通 cdn。</p>\n<blockquote>\n<p>同样的，如果需要 https 访问，请参考上文先去获取证书。</p>\n</blockquote>\n<p> 下面来配置我们自己的域名。</p>\n<p> 找到 cdn 栏目。增加一条我们希望最终访问的域名记录。</p>\n<p> 源站类型选择 IP 或者 “源站域名”。</p>\n<p> 注意调整下回源 HOST：如果是 IP 回源，而且你的 IP 不是独立 IP，或者需要通过主机头进行区分的话。此时注意配置好回源主机头。建议采用第一步的备用域名，这样省事。当然也可以在主机上加一条 cdn 加速域名的主机绑定记录。</p>\n<p> 业务类型选择 “全站加速” 或者 “静态加速”。</p>\n<p> 缓存时间建议选择长一点。因为修改文件后，我一般是通过手动触发缓存刷新形式。如果你懒的这么做，可以设置短一点，它失效后会自动刷新。</p>\n<p> 如果有 ssl 密钥，那么直接上传配置好就可以。</p>\n<p> 最后配置好 cname，等待生效后就可以访问了。</p>\n</li>\n</ol>\n<h2 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h2><ol>\n<li><p>你如果配置了根域名（比如 <code>abc.com</code>），那就是根域名配置了 cname，此时根域名不能配置 mx 邮箱解析了（即不能分配 <code>test@abc.com</code> 这种形式的邮箱）。需要二选一。所以建议考虑使用 <code>www.abc.com</code> 这种域名配置 cdn。</p>\n</li>\n<li><p>注意观察缓存命中率。一般静态博客命中率应该比较高，全部缓存后，理论应该为 100%。一般也应该 80% 以上。当然前提是缓存后才有效。</p>\n</li>\n<li><p>自己访问 cdn 域名试试看，一般 cdn 厂商都会有特殊文件头返回。</p>\n<p> 比如阿里云，是 <code>x-cache: HIT ...</code>。确保第二次访问后，有 <code>HIT</code> 字样。</p>\n<blockquote>\n<p>查阅主要有两种方式</p>\n<ol>\n<li><p>使用 <code>curl -I https://abc.com</code> 来检查。</p>\n</li>\n<li><p>使用浏览器，开发者模式，关闭缓存（否则可能返回200 from cache，304 not modified），访问网站，查看 <code>network</code> 面板的访问记录。</p>\n</li>\n</ol>\n</blockquote>\n</li>\n</ol>"},{"layout":"post","title":"ajax 请求数据返回 302 的情况","date":"2018-05-09T23:45:00.000Z","_content":"\n今天遇到了一个奇葩问题，和同事有一些争论。内容大致是页面通过 ajax 发出请求，结果接口没能返回 json，返回了一个 302 页面，此时页面是否会直接进行跳转。\n\n本来这个问题不难，很明显的，通过 ajax 的请求，不论发生什么都不会跳转走。但是是否会再次自动发送请求呢？\n\n<!-- more -->\n\n服务端代码如下：\n\n```js\nconst Koa = require('koa')\nconst serve = require('koa-static')\nvar Router = require('koa-router')\nconst app = new Koa()\nvar router = new Router()\n\nrouter.get('/302', (ctx, next) => {\n    ctx.status = 302\n    ctx.redirect('/r.html')\n    next()\n})\n\napp.use(router.routes())\n   .use(router.allowedMethods())\n   .use(serve('public'))\n\napp.listen(3000)\n```\n\n页面代码如下：\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>ajax</title>\n</head>\n\n<body>\n    <script src=\"https://cdn.staticfile.org/jquery/1.12.4/jquery.min.js\"></script>\n    <script src=\"https://cdn.staticfile.org/axios/0.15.3/axios.min.js\"></script>\n    <script>\n        $.ajax({\n            url: 'http://localhost:3000/302',\n            dataType: 'json',\n            success: function (data, xhr) {\n                console.log('success', data, xhr)\n            },\n            error: function (xhr) {\n                console.log('err', xhr)\n            }\n        })\n\n        // axios.get('http://localhost:3000/302')\n    </script>\n</body>\n</html>\n```\n\n不论使用 jQuery 还是 axios，结果都是一样的。\n\n1. 页面发出请求，结果是返回了 302 页面。\n2. 如上文，jQuery 由于没办法按照 json 解析，所以进入了 error。如果不是定死 json，那么也可能进入 success 的。\n3. ajax 自动实现了 302，重新请求了新的地址。302 跳转的次数貌似有限制，jQuery 大概是限制 10 次左右，超过就不会在跳转了。axios 好像可以自己配置次数。\n4. 页面也的确没有跳转走。\n\n","source":"_posts/2018/2018-05-09-ajax-302.md","raw":"---\nlayout: post\ntitle: \"ajax 请求数据返回 302 的情况\"\ndate: 2018-05-09 23:45:00 GMT+0000\ncategories: [前端]\ntags:  [jquery,axios,ajax]\n---\n\n今天遇到了一个奇葩问题，和同事有一些争论。内容大致是页面通过 ajax 发出请求，结果接口没能返回 json，返回了一个 302 页面，此时页面是否会直接进行跳转。\n\n本来这个问题不难，很明显的，通过 ajax 的请求，不论发生什么都不会跳转走。但是是否会再次自动发送请求呢？\n\n<!-- more -->\n\n服务端代码如下：\n\n```js\nconst Koa = require('koa')\nconst serve = require('koa-static')\nvar Router = require('koa-router')\nconst app = new Koa()\nvar router = new Router()\n\nrouter.get('/302', (ctx, next) => {\n    ctx.status = 302\n    ctx.redirect('/r.html')\n    next()\n})\n\napp.use(router.routes())\n   .use(router.allowedMethods())\n   .use(serve('public'))\n\napp.listen(3000)\n```\n\n页面代码如下：\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>ajax</title>\n</head>\n\n<body>\n    <script src=\"https://cdn.staticfile.org/jquery/1.12.4/jquery.min.js\"></script>\n    <script src=\"https://cdn.staticfile.org/axios/0.15.3/axios.min.js\"></script>\n    <script>\n        $.ajax({\n            url: 'http://localhost:3000/302',\n            dataType: 'json',\n            success: function (data, xhr) {\n                console.log('success', data, xhr)\n            },\n            error: function (xhr) {\n                console.log('err', xhr)\n            }\n        })\n\n        // axios.get('http://localhost:3000/302')\n    </script>\n</body>\n</html>\n```\n\n不论使用 jQuery 还是 axios，结果都是一样的。\n\n1. 页面发出请求，结果是返回了 302 页面。\n2. 如上文，jQuery 由于没办法按照 json 解析，所以进入了 error。如果不是定死 json，那么也可能进入 success 的。\n3. ajax 自动实现了 302，重新请求了新的地址。302 跳转的次数貌似有限制，jQuery 大概是限制 10 次左右，超过就不会在跳转了。axios 好像可以自己配置次数。\n4. 页面也的确没有跳转走。\n\n","slug":"2018-2018-05-09-ajax-302","published":1,"updated":"2019-07-18T17:19:07.204Z","comments":1,"photos":[],"link":"","_id":"cjy8y72sn004cs21dl99nnygq","content":"<p>今天遇到了一个奇葩问题，和同事有一些争论。内容大致是页面通过 ajax 发出请求，结果接口没能返回 json，返回了一个 302 页面，此时页面是否会直接进行跳转。</p>\n<p>本来这个问题不难，很明显的，通过 ajax 的请求，不论发生什么都不会跳转走。但是是否会再次自动发送请求呢？</p>\n<a id=\"more\"></a>\n\n<p>服务端代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> serve = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> Router()</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/302'</span>, (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    ctx.status = <span class=\"number\">302</span></span><br><span class=\"line\">    ctx.redirect(<span class=\"string\">'/r.html'</span>)</span><br><span class=\"line\">    next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(router.routes())</span><br><span class=\"line\">   .use(router.allowedMethods())</span><br><span class=\"line\">   .use(serve(<span class=\"string\">'public'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>页面代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>ajax<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.staticfile.org/jquery/1.12.4/jquery.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.staticfile.org/axios/0.15.3/axios.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">        $.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            url: <span class=\"string\">'http://localhost:3000/302'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            dataType: <span class=\"string\">'json'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data, xhr</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'success'</span>, data, xhr)</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"javascript\">            error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">xhr</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'err'</span>, xhr)</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// axios.get('http://localhost:3000/302')</span></span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>不论使用 jQuery 还是 axios，结果都是一样的。</p>\n<ol>\n<li>页面发出请求，结果是返回了 302 页面。</li>\n<li>如上文，jQuery 由于没办法按照 json 解析，所以进入了 error。如果不是定死 json，那么也可能进入 success 的。</li>\n<li>ajax 自动实现了 302，重新请求了新的地址。302 跳转的次数貌似有限制，jQuery 大概是限制 10 次左右，超过就不会在跳转了。axios 好像可以自己配置次数。</li>\n<li>页面也的确没有跳转走。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>今天遇到了一个奇葩问题，和同事有一些争论。内容大致是页面通过 ajax 发出请求，结果接口没能返回 json，返回了一个 302 页面，此时页面是否会直接进行跳转。</p>\n<p>本来这个问题不难，很明显的，通过 ajax 的请求，不论发生什么都不会跳转走。但是是否会再次自动发送请求呢？</p>","more":"<p>服务端代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> serve = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> Router()</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/302'</span>, (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    ctx.status = <span class=\"number\">302</span></span><br><span class=\"line\">    ctx.redirect(<span class=\"string\">'/r.html'</span>)</span><br><span class=\"line\">    next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(router.routes())</span><br><span class=\"line\">   .use(router.allowedMethods())</span><br><span class=\"line\">   .use(serve(<span class=\"string\">'public'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>页面代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>ajax<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.staticfile.org/jquery/1.12.4/jquery.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.staticfile.org/axios/0.15.3/axios.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">        $.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            url: <span class=\"string\">'http://localhost:3000/302'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            dataType: <span class=\"string\">'json'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data, xhr</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'success'</span>, data, xhr)</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"javascript\">            error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">xhr</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'err'</span>, xhr)</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// axios.get('http://localhost:3000/302')</span></span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>不论使用 jQuery 还是 axios，结果都是一样的。</p>\n<ol>\n<li>页面发出请求，结果是返回了 302 页面。</li>\n<li>如上文，jQuery 由于没办法按照 json 解析，所以进入了 error。如果不是定死 json，那么也可能进入 success 的。</li>\n<li>ajax 自动实现了 302，重新请求了新的地址。302 跳转的次数貌似有限制，jQuery 大概是限制 10 次左右，超过就不会在跳转了。axios 好像可以自己配置次数。</li>\n<li>页面也的确没有跳转走。</li>\n</ol>"},{"layout":"post","title":"重装 macOS","date":"2018-06-20T23:46:00.000Z","_content":"\n最近觉得 mac 垃圾文件太多了，也懒得清理，就找了了些重装 macOS 的资料，整理下写成文章。\n\n<!-- more -->\n\n## 下载 MacOS\n\n访问 [https://support.apple.com/zh-cn/HT201475](https://support.apple.com/zh-cn/HT201475)，下载最新的系统。\n\n目前最新的是 High Sierra，地址为 [http://appstore.com/mac/macoshighsierra](http://appstore.com/mac/macoshighsierra)，此地址会跳转 App Store，如果你已经下载过了，就不用重新下载了。\n\nHigh Sierra 系统大概是 5.23G。\n\n## 将系统写入启动 U 盘\n\n> 参考文章：[https://support.apple.com/zh-cn/HT201372](https://support.apple.com/zh-cn/HT201372)\n\n这一步需要敲命令，不过非常简单。\n\n1. 前提：你的 U 盘，不少于 12G。这个容量是苹果给出的。我用的16G的。\n\n2. 首先确保你的 U 盘卷标为 `SYS`，如果不是的话，下面的 `SYS` 需要替换成你的 U 盘卷标。\n\n3. 建议用全大写单词，减少错误出现。\n\n    > 修改卷标的方法\n    >\n    > Mac 系统，插入 U 盘，桌面会出现图标。点击图标，按 `回车` 键。修改后，按 `回车` 键确认。\n\n4. 打开 `终端`，根据你的系统，参考上面的文章，敲命令。我的是 High Sierra，命令如下：\n\n    ```bash\n    sudo /Applications/Install\\ macOS\\ High\\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/SYS --applicationpath /Applications/Install\\ macOS\\ High\\ Sierra.app\n    ```\n    \n    > 如果按照原文操作，提示错误：\n    >\n    > ```bash\n    > /Volumes/MyVolume is not a valid volume mount point.\n    > ```\n    > \n    > 则表示找不到 `MyVolume` 的 U 盘，可能是你名称不对，也可能是系统给你改名了，比如改成了 `MyVolume 1`。（可以到 `/Volumes/` 目录检查下）\n    > \n    > 建议重新改个全大写的单词，重新插拔 U 盘就可以了。\n\n5. 上一步之后，会要求输入系统密码（密码输入时候不会有任何提示），输入完成，回车确认。\n6. 当提示 `If you wish to continue type (Y) then press return: ` 时候，输入 `Y`，并且 `回车`。\n7. 等待，我大概等了5分钟（和 U 盘速度有关）。\n8. 直到出现以下内容，就算完成了：\n\n    ```bash\n    Erasing Disk: 0%... 10%... 20%... 30%...100%...\n    Copying installer files to disk...\n    Copy complete.\n    Making disk bootable...\n    Copying boot files...\n    Copy complete.\n    Done.\n    ```\n\n**安装盘制作完毕。**\n\n## 安装系统\n\n1. 插好 U 盘\n2. 重启 Mac 电脑，重启时候按住 `option` 键，直到看到硬盘选择的界面，选择 `Install MacOS` 这个，需要点击下方的箭头：\n    ![img](https://cdn0.yukapril.com/blog/2018-06-20-install-macos-1.JPG-wm.white)\n3.  之后会询问安装到哪里，因为只有一块硬盘（第二个是插入的 U 盘），所以默认选择第一个就行，点击 `安装` \n    ![img](https://cdn0.yukapril.com/blog/2018-06-20-install-macos-2.JPG-wm.white)\n4. 进入实用工具界面，由于我是打算清空硬盘所有内容，再安装。所以先进入 `磁盘工具`，格式化整块硬盘：\n    ![img](https://cdn0.yukapril.com/blog/2018-06-20-install-macos-3.JPG-wm.white)\n5. 选择硬盘后，点击 `抹掉`，可以选择格式。建议选择区分大小写，这样和 linux 是一致的。至于加密与否，我觉得无所谓吧。默认是 `加密（不区分大小写）`：\n    ![img](https://cdn0.yukapril.com/blog/2018-06-20-install-macos-4.JPG-wm.white)\n6. 最后返回到第四步的实用工具页，选择 `安装 macOS` 就好了。剩下的就没什么可说的了：\n    ![img](https://cdn0.yukapril.com/blog/2018-06-20-install-macos-5.JPG-wm.white)\n\n## 小结\n\n我一直以为 macOS 很稳定，所以重装做的也非常复杂。其实跟着步骤操作，比起 Windows 可能还要更简单。\n\n唯独的问题就是你必须有一个正常运行的 macOS 系统来制作第一步的启动盘。\n\n其实启动盘可以不提前做，据说可以安装时候自动下载，不过这么大的容量，估计网络安装会非常慢。大部分人都不推荐这么做，除非真的 mac 已经启动不了了吧。","source":"_posts/2018/2018-06-20-install-macos.md","raw":"---\nlayout: post\ntitle: \"重装 macOS\"\ndate: 2018-06-20 23:46:00 GMT+0000\ncategories: [随笔]\ntags:  [macOS]\n---\n\n最近觉得 mac 垃圾文件太多了，也懒得清理，就找了了些重装 macOS 的资料，整理下写成文章。\n\n<!-- more -->\n\n## 下载 MacOS\n\n访问 [https://support.apple.com/zh-cn/HT201475](https://support.apple.com/zh-cn/HT201475)，下载最新的系统。\n\n目前最新的是 High Sierra，地址为 [http://appstore.com/mac/macoshighsierra](http://appstore.com/mac/macoshighsierra)，此地址会跳转 App Store，如果你已经下载过了，就不用重新下载了。\n\nHigh Sierra 系统大概是 5.23G。\n\n## 将系统写入启动 U 盘\n\n> 参考文章：[https://support.apple.com/zh-cn/HT201372](https://support.apple.com/zh-cn/HT201372)\n\n这一步需要敲命令，不过非常简单。\n\n1. 前提：你的 U 盘，不少于 12G。这个容量是苹果给出的。我用的16G的。\n\n2. 首先确保你的 U 盘卷标为 `SYS`，如果不是的话，下面的 `SYS` 需要替换成你的 U 盘卷标。\n\n3. 建议用全大写单词，减少错误出现。\n\n    > 修改卷标的方法\n    >\n    > Mac 系统，插入 U 盘，桌面会出现图标。点击图标，按 `回车` 键。修改后，按 `回车` 键确认。\n\n4. 打开 `终端`，根据你的系统，参考上面的文章，敲命令。我的是 High Sierra，命令如下：\n\n    ```bash\n    sudo /Applications/Install\\ macOS\\ High\\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/SYS --applicationpath /Applications/Install\\ macOS\\ High\\ Sierra.app\n    ```\n    \n    > 如果按照原文操作，提示错误：\n    >\n    > ```bash\n    > /Volumes/MyVolume is not a valid volume mount point.\n    > ```\n    > \n    > 则表示找不到 `MyVolume` 的 U 盘，可能是你名称不对，也可能是系统给你改名了，比如改成了 `MyVolume 1`。（可以到 `/Volumes/` 目录检查下）\n    > \n    > 建议重新改个全大写的单词，重新插拔 U 盘就可以了。\n\n5. 上一步之后，会要求输入系统密码（密码输入时候不会有任何提示），输入完成，回车确认。\n6. 当提示 `If you wish to continue type (Y) then press return: ` 时候，输入 `Y`，并且 `回车`。\n7. 等待，我大概等了5分钟（和 U 盘速度有关）。\n8. 直到出现以下内容，就算完成了：\n\n    ```bash\n    Erasing Disk: 0%... 10%... 20%... 30%...100%...\n    Copying installer files to disk...\n    Copy complete.\n    Making disk bootable...\n    Copying boot files...\n    Copy complete.\n    Done.\n    ```\n\n**安装盘制作完毕。**\n\n## 安装系统\n\n1. 插好 U 盘\n2. 重启 Mac 电脑，重启时候按住 `option` 键，直到看到硬盘选择的界面，选择 `Install MacOS` 这个，需要点击下方的箭头：\n    ![img](https://cdn0.yukapril.com/blog/2018-06-20-install-macos-1.JPG-wm.white)\n3.  之后会询问安装到哪里，因为只有一块硬盘（第二个是插入的 U 盘），所以默认选择第一个就行，点击 `安装` \n    ![img](https://cdn0.yukapril.com/blog/2018-06-20-install-macos-2.JPG-wm.white)\n4. 进入实用工具界面，由于我是打算清空硬盘所有内容，再安装。所以先进入 `磁盘工具`，格式化整块硬盘：\n    ![img](https://cdn0.yukapril.com/blog/2018-06-20-install-macos-3.JPG-wm.white)\n5. 选择硬盘后，点击 `抹掉`，可以选择格式。建议选择区分大小写，这样和 linux 是一致的。至于加密与否，我觉得无所谓吧。默认是 `加密（不区分大小写）`：\n    ![img](https://cdn0.yukapril.com/blog/2018-06-20-install-macos-4.JPG-wm.white)\n6. 最后返回到第四步的实用工具页，选择 `安装 macOS` 就好了。剩下的就没什么可说的了：\n    ![img](https://cdn0.yukapril.com/blog/2018-06-20-install-macos-5.JPG-wm.white)\n\n## 小结\n\n我一直以为 macOS 很稳定，所以重装做的也非常复杂。其实跟着步骤操作，比起 Windows 可能还要更简单。\n\n唯独的问题就是你必须有一个正常运行的 macOS 系统来制作第一步的启动盘。\n\n其实启动盘可以不提前做，据说可以安装时候自动下载，不过这么大的容量，估计网络安装会非常慢。大部分人都不推荐这么做，除非真的 mac 已经启动不了了吧。","slug":"2018-2018-06-20-install-macos","published":1,"updated":"2019-07-18T17:19:07.253Z","comments":1,"photos":[],"link":"","_id":"cjy8y72so004fs21dr0tflsc8","content":"<p>最近觉得 mac 垃圾文件太多了，也懒得清理，就找了了些重装 macOS 的资料，整理下写成文章。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"下载-MacOS\"><a href=\"#下载-MacOS\" class=\"headerlink\" title=\"下载 MacOS\"></a>下载 MacOS</h2><p>访问 <a href=\"https://support.apple.com/zh-cn/HT201475\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/zh-cn/HT201475</a>，下载最新的系统。</p>\n<p>目前最新的是 High Sierra，地址为 <a href=\"http://appstore.com/mac/macoshighsierra\" target=\"_blank\" rel=\"noopener\">http://appstore.com/mac/macoshighsierra</a>，此地址会跳转 App Store，如果你已经下载过了，就不用重新下载了。</p>\n<p>High Sierra 系统大概是 5.23G。</p>\n<h2 id=\"将系统写入启动-U-盘\"><a href=\"#将系统写入启动-U-盘\" class=\"headerlink\" title=\"将系统写入启动 U 盘\"></a>将系统写入启动 U 盘</h2><blockquote>\n<p>参考文章：<a href=\"https://support.apple.com/zh-cn/HT201372\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/zh-cn/HT201372</a></p>\n</blockquote>\n<p>这一步需要敲命令，不过非常简单。</p>\n<ol>\n<li><p>前提：你的 U 盘，不少于 12G。这个容量是苹果给出的。我用的16G的。</p>\n</li>\n<li><p>首先确保你的 U 盘卷标为 <code>SYS</code>，如果不是的话，下面的 <code>SYS</code> 需要替换成你的 U 盘卷标。</p>\n</li>\n<li><p>建议用全大写单词，减少错误出现。</p>\n<blockquote>\n<p>修改卷标的方法</p>\n<p>Mac 系统，插入 U 盘，桌面会出现图标。点击图标，按 <code>回车</code> 键。修改后，按 <code>回车</code> 键确认。</p>\n</blockquote>\n</li>\n<li><p>打开 <code>终端</code>，根据你的系统，参考上面的文章，敲命令。我的是 High Sierra，命令如下：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /Applications/Install\\ macOS\\ High\\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/SYS --applicationpath /Applications/Install\\ macOS\\ High\\ Sierra.app</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<pre><code>&gt; 如果按照原文操作，提示错误：\n&gt;\n&gt; <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; /Volumes/MyVolume is not a valid volume mount point.</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n\n&gt; \n&gt; 则表示找不到 `MyVolume` 的 U 盘，可能是你名称不对，也可能是系统给你改名了，比如改成了 `MyVolume 1`。（可以到 `/Volumes/` 目录检查下）\n&gt; \n&gt; 建议重新改个全大写的单词，重新插拔 U 盘就可以了。</code></pre><ol start=\"5\">\n<li><p>上一步之后，会要求输入系统密码（密码输入时候不会有任何提示），输入完成，回车确认。</p>\n</li>\n<li><p>当提示 <code>If you wish to continue type (Y) then press return:</code> 时候，输入 <code>Y</code>，并且 <code>回车</code>。</p>\n</li>\n<li><p>等待，我大概等了5分钟（和 U 盘速度有关）。</p>\n</li>\n<li><p>直到出现以下内容，就算完成了：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Erasing Disk: 0%... 10%... 20%... 30%...100%...</span><br><span class=\"line\">Copying installer files to disk...</span><br><span class=\"line\">Copy complete.</span><br><span class=\"line\">Making disk bootable...</span><br><span class=\"line\">Copying boot files...</span><br><span class=\"line\">Copy complete.</span><br><span class=\"line\">Done.</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p><strong>安装盘制作完毕。</strong></p>\n<h2 id=\"安装系统\"><a href=\"#安装系统\" class=\"headerlink\" title=\"安装系统\"></a>安装系统</h2><ol>\n<li>插好 U 盘</li>\n<li>重启 Mac 电脑，重启时候按住 <code>option</code> 键，直到看到硬盘选择的界面，选择 <code>Install MacOS</code> 这个，需要点击下方的箭头：<br> <img src=\"https://cdn0.yukapril.com/blog/2018-06-20-install-macos-1.JPG-wm.white\" alt=\"img\"></li>\n<li>之后会询问安装到哪里，因为只有一块硬盘（第二个是插入的 U 盘），所以默认选择第一个就行，点击 <code>安装</code><br><img src=\"https://cdn0.yukapril.com/blog/2018-06-20-install-macos-2.JPG-wm.white\" alt=\"img\"></li>\n<li>进入实用工具界面，由于我是打算清空硬盘所有内容，再安装。所以先进入 <code>磁盘工具</code>，格式化整块硬盘：<br> <img src=\"https://cdn0.yukapril.com/blog/2018-06-20-install-macos-3.JPG-wm.white\" alt=\"img\"></li>\n<li>选择硬盘后，点击 <code>抹掉</code>，可以选择格式。建议选择区分大小写，这样和 linux 是一致的。至于加密与否，我觉得无所谓吧。默认是 <code>加密（不区分大小写）</code>：<br> <img src=\"https://cdn0.yukapril.com/blog/2018-06-20-install-macos-4.JPG-wm.white\" alt=\"img\"></li>\n<li>最后返回到第四步的实用工具页，选择 <code>安装 macOS</code> 就好了。剩下的就没什么可说的了：<br> <img src=\"https://cdn0.yukapril.com/blog/2018-06-20-install-macos-5.JPG-wm.white\" alt=\"img\"></li>\n</ol>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>我一直以为 macOS 很稳定，所以重装做的也非常复杂。其实跟着步骤操作，比起 Windows 可能还要更简单。</p>\n<p>唯独的问题就是你必须有一个正常运行的 macOS 系统来制作第一步的启动盘。</p>\n<p>其实启动盘可以不提前做，据说可以安装时候自动下载，不过这么大的容量，估计网络安装会非常慢。大部分人都不推荐这么做，除非真的 mac 已经启动不了了吧。</p>\n","site":{"data":{}},"excerpt":"<p>最近觉得 mac 垃圾文件太多了，也懒得清理，就找了了些重装 macOS 的资料，整理下写成文章。</p>","more":"<h2 id=\"下载-MacOS\"><a href=\"#下载-MacOS\" class=\"headerlink\" title=\"下载 MacOS\"></a>下载 MacOS</h2><p>访问 <a href=\"https://support.apple.com/zh-cn/HT201475\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/zh-cn/HT201475</a>，下载最新的系统。</p>\n<p>目前最新的是 High Sierra，地址为 <a href=\"http://appstore.com/mac/macoshighsierra\" target=\"_blank\" rel=\"noopener\">http://appstore.com/mac/macoshighsierra</a>，此地址会跳转 App Store，如果你已经下载过了，就不用重新下载了。</p>\n<p>High Sierra 系统大概是 5.23G。</p>\n<h2 id=\"将系统写入启动-U-盘\"><a href=\"#将系统写入启动-U-盘\" class=\"headerlink\" title=\"将系统写入启动 U 盘\"></a>将系统写入启动 U 盘</h2><blockquote>\n<p>参考文章：<a href=\"https://support.apple.com/zh-cn/HT201372\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/zh-cn/HT201372</a></p>\n</blockquote>\n<p>这一步需要敲命令，不过非常简单。</p>\n<ol>\n<li><p>前提：你的 U 盘，不少于 12G。这个容量是苹果给出的。我用的16G的。</p>\n</li>\n<li><p>首先确保你的 U 盘卷标为 <code>SYS</code>，如果不是的话，下面的 <code>SYS</code> 需要替换成你的 U 盘卷标。</p>\n</li>\n<li><p>建议用全大写单词，减少错误出现。</p>\n<blockquote>\n<p>修改卷标的方法</p>\n<p>Mac 系统，插入 U 盘，桌面会出现图标。点击图标，按 <code>回车</code> 键。修改后，按 <code>回车</code> 键确认。</p>\n</blockquote>\n</li>\n<li><p>打开 <code>终端</code>，根据你的系统，参考上面的文章，敲命令。我的是 High Sierra，命令如下：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /Applications/Install\\ macOS\\ High\\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/SYS --applicationpath /Applications/Install\\ macOS\\ High\\ Sierra.app</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<pre><code>&gt; 如果按照原文操作，提示错误：\n&gt;\n&gt; <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; /Volumes/MyVolume is not a valid volume mount point.</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n\n&gt; \n&gt; 则表示找不到 `MyVolume` 的 U 盘，可能是你名称不对，也可能是系统给你改名了，比如改成了 `MyVolume 1`。（可以到 `/Volumes/` 目录检查下）\n&gt; \n&gt; 建议重新改个全大写的单词，重新插拔 U 盘就可以了。</code></pre><ol start=\"5\">\n<li><p>上一步之后，会要求输入系统密码（密码输入时候不会有任何提示），输入完成，回车确认。</p>\n</li>\n<li><p>当提示 <code>If you wish to continue type (Y) then press return:</code> 时候，输入 <code>Y</code>，并且 <code>回车</code>。</p>\n</li>\n<li><p>等待，我大概等了5分钟（和 U 盘速度有关）。</p>\n</li>\n<li><p>直到出现以下内容，就算完成了：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Erasing Disk: 0%... 10%... 20%... 30%...100%...</span><br><span class=\"line\">Copying installer files to disk...</span><br><span class=\"line\">Copy complete.</span><br><span class=\"line\">Making disk bootable...</span><br><span class=\"line\">Copying boot files...</span><br><span class=\"line\">Copy complete.</span><br><span class=\"line\">Done.</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p><strong>安装盘制作完毕。</strong></p>\n<h2 id=\"安装系统\"><a href=\"#安装系统\" class=\"headerlink\" title=\"安装系统\"></a>安装系统</h2><ol>\n<li>插好 U 盘</li>\n<li>重启 Mac 电脑，重启时候按住 <code>option</code> 键，直到看到硬盘选择的界面，选择 <code>Install MacOS</code> 这个，需要点击下方的箭头：<br> <img src=\"https://cdn0.yukapril.com/blog/2018-06-20-install-macos-1.JPG-wm.white\" alt=\"img\"></li>\n<li>之后会询问安装到哪里，因为只有一块硬盘（第二个是插入的 U 盘），所以默认选择第一个就行，点击 <code>安装</code><br><img src=\"https://cdn0.yukapril.com/blog/2018-06-20-install-macos-2.JPG-wm.white\" alt=\"img\"></li>\n<li>进入实用工具界面，由于我是打算清空硬盘所有内容，再安装。所以先进入 <code>磁盘工具</code>，格式化整块硬盘：<br> <img src=\"https://cdn0.yukapril.com/blog/2018-06-20-install-macos-3.JPG-wm.white\" alt=\"img\"></li>\n<li>选择硬盘后，点击 <code>抹掉</code>，可以选择格式。建议选择区分大小写，这样和 linux 是一致的。至于加密与否，我觉得无所谓吧。默认是 <code>加密（不区分大小写）</code>：<br> <img src=\"https://cdn0.yukapril.com/blog/2018-06-20-install-macos-4.JPG-wm.white\" alt=\"img\"></li>\n<li>最后返回到第四步的实用工具页，选择 <code>安装 macOS</code> 就好了。剩下的就没什么可说的了：<br> <img src=\"https://cdn0.yukapril.com/blog/2018-06-20-install-macos-5.JPG-wm.white\" alt=\"img\"></li>\n</ol>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>我一直以为 macOS 很稳定，所以重装做的也非常复杂。其实跟着步骤操作，比起 Windows 可能还要更简单。</p>\n<p>唯独的问题就是你必须有一个正常运行的 macOS 系统来制作第一步的启动盘。</p>\n<p>其实启动盘可以不提前做，据说可以安装时候自动下载，不过这么大的容量，估计网络安装会非常慢。大部分人都不推荐这么做，除非真的 mac 已经启动不了了吧。</p>"},{"layout":"post","title":"js 数组扁平化与反扁平化处理（下）","date":"2018-06-28T00:24:00.000Z","_content":"\n上一次我们写了一个函数，将扁平化的数组转为非扁平化。这次我们继续，将上次最终的结果，进行扁平化处理。\n\n<!-- more -->\n\n首先准备出上次的最终结果，作为需要处理的数据：\n\n```js\nconst unflattenedArr = [\n    {\n        \"id\": 1,\n        \"text\": \"A\",\n        \"children\": [\n            {\"id\": 4, \"text\": \"A1\"},\n            {\"id\": 5, \"text\": \"A2\"}\n        ]\n    },\n    {\n        \"id\": 2,\n        \"text\": \"B\",\n        \"children\": [\n            {\n                \"id\": 6,\n                \"text\": \"B1\"\n            },\n            {\n                \"id\": 7,\n                \"text\": \"B2\",\n                \"children\": [\n                    {\"id\": 8, \"text\": \"B21\"},\n                    {\"id\": 9, \"text\": \"B22\"}\n                ]\n            }\n        ]\n    },\n    {\n        \"id\": 3,\n        \"text\": \"C\"\n    }\n]\n```\n\n想把复杂的结构扁平化，就是一层一层递归输出。写法还算简单：\n\n```js\nconst flatten = arr => {\n    let unflattenedArr = JSON.parse(JSON.stringify(arr))\n    let ret = []\n    // 循环遍历\n    unflattenedArr.forEach(item => {\n        // 直接放置到存储数组中\n        let obj = {\n            id: item.id,\n            text: item.text\n        }\n        ret.push(obj)\n\n        // 如果存在子节点，还需要递归遍历\n        if (item.children) {\n            let temp = flatten(item.children)\n            // 将子节点数据合并到存储数组中\n            ret = [...ret, ...temp]\n        }\n    })\n    return ret\n}\nlet flattenedArr = flatten(unflattenedArr)\nconsole.log('unflattenedArr:', unflattenedArr)\nconsole.log('flattenedArr:', flattenedArr)\n```\n\n通过这么处理，所有的节点都可以扁平化了。但是有个问题，没有父节点 `pid` 信息，这个需要再补充。\n\n每次递归时候，必须带上父节点信息，否则怎么知道属于那个节点呢？所以函数签名（参数）也需要改造下：\n\n```js\n----    const flatten = arr => {\n++++    const flatten = (arr, pid) => {\n            let unflattenedArr = JSON.parse(JSON.stringify(arr))\n            let ret = []\n            // 循环遍历\n            unflattenedArr.forEach(item => {\n                // 直接放置到存储数组中\n                let obj = {\n                    id: item.id,\n                    text: item.text\n                }\n++++            if (pid) obj.pid = pid\n                ret.push(obj)\n\n                // 如果存在子节点，还需要递归遍历\n                if (item.children) {\n----                let temp = flatten(item.children)\n++++                let temp = flatten(item.children, item.id)\n                    // 将子节点数据合并到存储数组中\n                    ret = [...ret, ...temp]\n                }\n            })\n            return ret\n        }\n\n        let flattenedArr = flatten(unflattenedArr)\n        console.log('unflattenedArr:', unflattenedArr)\n        console.log('flattenedArr:', flattenedArr)\n```\n\n这样就搞定了。\n\n本文代码见此：[Github](https://github.com/yukapril/learning/blob/master/array-flattened/flattened.html)\n","source":"_posts/2018/2018-06-28-array-flattened.md","raw":"---\nlayout: post\ntitle: js 数组扁平化与反扁平化处理（下）\ndate: 2018-06-28 00:24:00 GMT+0000\ncategories: [前端]\ntags:  [扁平化]\n---\n\n上一次我们写了一个函数，将扁平化的数组转为非扁平化。这次我们继续，将上次最终的结果，进行扁平化处理。\n\n<!-- more -->\n\n首先准备出上次的最终结果，作为需要处理的数据：\n\n```js\nconst unflattenedArr = [\n    {\n        \"id\": 1,\n        \"text\": \"A\",\n        \"children\": [\n            {\"id\": 4, \"text\": \"A1\"},\n            {\"id\": 5, \"text\": \"A2\"}\n        ]\n    },\n    {\n        \"id\": 2,\n        \"text\": \"B\",\n        \"children\": [\n            {\n                \"id\": 6,\n                \"text\": \"B1\"\n            },\n            {\n                \"id\": 7,\n                \"text\": \"B2\",\n                \"children\": [\n                    {\"id\": 8, \"text\": \"B21\"},\n                    {\"id\": 9, \"text\": \"B22\"}\n                ]\n            }\n        ]\n    },\n    {\n        \"id\": 3,\n        \"text\": \"C\"\n    }\n]\n```\n\n想把复杂的结构扁平化，就是一层一层递归输出。写法还算简单：\n\n```js\nconst flatten = arr => {\n    let unflattenedArr = JSON.parse(JSON.stringify(arr))\n    let ret = []\n    // 循环遍历\n    unflattenedArr.forEach(item => {\n        // 直接放置到存储数组中\n        let obj = {\n            id: item.id,\n            text: item.text\n        }\n        ret.push(obj)\n\n        // 如果存在子节点，还需要递归遍历\n        if (item.children) {\n            let temp = flatten(item.children)\n            // 将子节点数据合并到存储数组中\n            ret = [...ret, ...temp]\n        }\n    })\n    return ret\n}\nlet flattenedArr = flatten(unflattenedArr)\nconsole.log('unflattenedArr:', unflattenedArr)\nconsole.log('flattenedArr:', flattenedArr)\n```\n\n通过这么处理，所有的节点都可以扁平化了。但是有个问题，没有父节点 `pid` 信息，这个需要再补充。\n\n每次递归时候，必须带上父节点信息，否则怎么知道属于那个节点呢？所以函数签名（参数）也需要改造下：\n\n```js\n----    const flatten = arr => {\n++++    const flatten = (arr, pid) => {\n            let unflattenedArr = JSON.parse(JSON.stringify(arr))\n            let ret = []\n            // 循环遍历\n            unflattenedArr.forEach(item => {\n                // 直接放置到存储数组中\n                let obj = {\n                    id: item.id,\n                    text: item.text\n                }\n++++            if (pid) obj.pid = pid\n                ret.push(obj)\n\n                // 如果存在子节点，还需要递归遍历\n                if (item.children) {\n----                let temp = flatten(item.children)\n++++                let temp = flatten(item.children, item.id)\n                    // 将子节点数据合并到存储数组中\n                    ret = [...ret, ...temp]\n                }\n            })\n            return ret\n        }\n\n        let flattenedArr = flatten(unflattenedArr)\n        console.log('unflattenedArr:', unflattenedArr)\n        console.log('flattenedArr:', flattenedArr)\n```\n\n这样就搞定了。\n\n本文代码见此：[Github](https://github.com/yukapril/learning/blob/master/array-flattened/flattened.html)\n","slug":"2018-2018-06-28-array-flattened","published":1,"updated":"2019-07-18T17:19:07.009Z","comments":1,"photos":[],"link":"","_id":"cjy8y72sq004js21dwrj1t1hk","content":"<p>上一次我们写了一个函数，将扁平化的数组转为非扁平化。这次我们继续，将上次最终的结果，进行扁平化处理。</p>\n<a id=\"more\"></a>\n\n<p>首先准备出上次的最终结果，作为需要处理的数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unflattenedArr = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"A\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"children\"</span>: [</span><br><span class=\"line\">            &#123;<span class=\"string\">\"id\"</span>: <span class=\"number\">4</span>, <span class=\"string\">\"text\"</span>: <span class=\"string\">\"A1\"</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"string\">\"id\"</span>: <span class=\"number\">5</span>, <span class=\"string\">\"text\"</span>: <span class=\"string\">\"A2\"</span>&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"children\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"number\">6</span>,</span><br><span class=\"line\">                <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B1\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B2\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"children\"</span>: [</span><br><span class=\"line\">                    &#123;<span class=\"string\">\"id\"</span>: <span class=\"number\">8</span>, <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B21\"</span>&#125;,</span><br><span class=\"line\">                    &#123;<span class=\"string\">\"id\"</span>: <span class=\"number\">9</span>, <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B22\"</span>&#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"C\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>想把复杂的结构扁平化，就是一层一层递归输出。写法还算简单：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> flatten = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> unflattenedArr = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(arr))</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ret = []</span><br><span class=\"line\">    <span class=\"comment\">// 循环遍历</span></span><br><span class=\"line\">    unflattenedArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 直接放置到存储数组中</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">            id: item.id,</span><br><span class=\"line\">            text: item.text</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ret.push(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果存在子节点，还需要递归遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.children) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = flatten(item.children)</span><br><span class=\"line\">            <span class=\"comment\">// 将子节点数据合并到存储数组中</span></span><br><span class=\"line\">            ret = [...ret, ...temp]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> flattenedArr = flatten(unflattenedArr)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'unflattenedArr:'</span>, unflattenedArr)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'flattenedArr:'</span>, flattenedArr)</span><br></pre></td></tr></table></figure>\n\n<p>通过这么处理，所有的节点都可以扁平化了。但是有个问题，没有父节点 <code>pid</code> 信息，这个需要再补充。</p>\n<p>每次递归时候，必须带上父节点信息，否则怎么知道属于那个节点呢？所以函数签名（参数）也需要改造下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">----    <span class=\"keyword\">const</span> flatten = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">++++    <span class=\"keyword\">const</span> flatten = <span class=\"function\">(<span class=\"params\">arr, pid</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> unflattenedArr = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(arr))</span><br><span class=\"line\">            <span class=\"keyword\">let</span> ret = []</span><br><span class=\"line\">            <span class=\"comment\">// 循环遍历</span></span><br><span class=\"line\">            unflattenedArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 直接放置到存储数组中</span></span><br><span class=\"line\">                <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">                    id: item.id,</span><br><span class=\"line\">                    text: item.text</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">++++            <span class=\"keyword\">if</span> (pid) obj.pid = pid</span><br><span class=\"line\">                ret.push(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 如果存在子节点，还需要递归遍历</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (item.children) &#123;</span><br><span class=\"line\">----                <span class=\"keyword\">let</span> temp = flatten(item.children)</span><br><span class=\"line\">++++                <span class=\"keyword\">let</span> temp = flatten(item.children, item.id)</span><br><span class=\"line\">                    <span class=\"comment\">// 将子节点数据合并到存储数组中</span></span><br><span class=\"line\">                    ret = [...ret, ...temp]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> flattenedArr = flatten(unflattenedArr)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'unflattenedArr:'</span>, unflattenedArr)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'flattenedArr:'</span>, flattenedArr)</span><br></pre></td></tr></table></figure>\n\n<p>这样就搞定了。</p>\n<p>本文代码见此：<a href=\"https://github.com/yukapril/learning/blob/master/array-flattened/flattened.html\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n","site":{"data":{}},"excerpt":"<p>上一次我们写了一个函数，将扁平化的数组转为非扁平化。这次我们继续，将上次最终的结果，进行扁平化处理。</p>","more":"<p>首先准备出上次的最终结果，作为需要处理的数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unflattenedArr = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"A\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"children\"</span>: [</span><br><span class=\"line\">            &#123;<span class=\"string\">\"id\"</span>: <span class=\"number\">4</span>, <span class=\"string\">\"text\"</span>: <span class=\"string\">\"A1\"</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"string\">\"id\"</span>: <span class=\"number\">5</span>, <span class=\"string\">\"text\"</span>: <span class=\"string\">\"A2\"</span>&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"children\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"number\">6</span>,</span><br><span class=\"line\">                <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B1\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B2\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"children\"</span>: [</span><br><span class=\"line\">                    &#123;<span class=\"string\">\"id\"</span>: <span class=\"number\">8</span>, <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B21\"</span>&#125;,</span><br><span class=\"line\">                    &#123;<span class=\"string\">\"id\"</span>: <span class=\"number\">9</span>, <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B22\"</span>&#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"C\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>想把复杂的结构扁平化，就是一层一层递归输出。写法还算简单：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> flatten = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> unflattenedArr = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(arr))</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ret = []</span><br><span class=\"line\">    <span class=\"comment\">// 循环遍历</span></span><br><span class=\"line\">    unflattenedArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 直接放置到存储数组中</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">            id: item.id,</span><br><span class=\"line\">            text: item.text</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ret.push(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果存在子节点，还需要递归遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.children) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = flatten(item.children)</span><br><span class=\"line\">            <span class=\"comment\">// 将子节点数据合并到存储数组中</span></span><br><span class=\"line\">            ret = [...ret, ...temp]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> flattenedArr = flatten(unflattenedArr)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'unflattenedArr:'</span>, unflattenedArr)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'flattenedArr:'</span>, flattenedArr)</span><br></pre></td></tr></table></figure>\n\n<p>通过这么处理，所有的节点都可以扁平化了。但是有个问题，没有父节点 <code>pid</code> 信息，这个需要再补充。</p>\n<p>每次递归时候，必须带上父节点信息，否则怎么知道属于那个节点呢？所以函数签名（参数）也需要改造下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">----    <span class=\"keyword\">const</span> flatten = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">++++    <span class=\"keyword\">const</span> flatten = <span class=\"function\">(<span class=\"params\">arr, pid</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> unflattenedArr = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(arr))</span><br><span class=\"line\">            <span class=\"keyword\">let</span> ret = []</span><br><span class=\"line\">            <span class=\"comment\">// 循环遍历</span></span><br><span class=\"line\">            unflattenedArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 直接放置到存储数组中</span></span><br><span class=\"line\">                <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">                    id: item.id,</span><br><span class=\"line\">                    text: item.text</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">++++            <span class=\"keyword\">if</span> (pid) obj.pid = pid</span><br><span class=\"line\">                ret.push(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 如果存在子节点，还需要递归遍历</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (item.children) &#123;</span><br><span class=\"line\">----                <span class=\"keyword\">let</span> temp = flatten(item.children)</span><br><span class=\"line\">++++                <span class=\"keyword\">let</span> temp = flatten(item.children, item.id)</span><br><span class=\"line\">                    <span class=\"comment\">// 将子节点数据合并到存储数组中</span></span><br><span class=\"line\">                    ret = [...ret, ...temp]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> flattenedArr = flatten(unflattenedArr)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'unflattenedArr:'</span>, unflattenedArr)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'flattenedArr:'</span>, flattenedArr)</span><br></pre></td></tr></table></figure>\n\n<p>这样就搞定了。</p>\n<p>本文代码见此：<a href=\"https://github.com/yukapril/learning/blob/master/array-flattened/flattened.html\" target=\"_blank\" rel=\"noopener\">Github</a></p>"},{"layout":"post","title":"入手水银灯","date":"2018-06-27T00:45:00.000Z","_content":"\n两周前突然起兴，下载了 Bilibili 客户端，真的，我之前竟然没有用过、下载过，仅仅听说过。软件非常好用，而且喜欢的动漫也可以看到，比如这次的正文《蔷薇少女》。\n\n在粗略看过一次后，决定去买一个人偶玩玩，就去了很久之前买东西的平台（030buy / 萌购）。\n\n<!-- more -->\n\n最终考虑多种方面，决定买了 [SRDX ローゼンメイデン・トロイメント 水銀燈 (宮沢模型限定バージョン)](https://www.amazon.co.jp/%E3%82%BF%E3%82%AB%E3%83%A9%E3%83%88%E3%83%9F%E3%83%BC%E3%82%A2%E3%83%BC%E3%83%84-TAKARATOMY-A-R-T-S-%E3%83%AD%E3%83%BC%E3%82%BC%E3%83%B3%E3%83%A1%E3%82%A4%E3%83%87%E3%83%B3%E3%83%BB%E3%83%88%E3%83%AD%E3%82%A4%E3%83%A1%E3%83%B3%E3%83%88-%E5%AE%AE%E6%B2%A2%E6%A8%A1%E5%9E%8B%E9%99%90%E5%AE%9A%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3/dp/B000L93VII/ref=olp_product_details/356-6202642-6081623?_encoding=UTF8&me=)。至于为什么选择这个，不是重点～\n\n不过还是要说下：\n\n**一是价格**\n\n这个模型貌似 2007 年出的，当时价格大致是不到 300 RMB，现在最少要将近 600 RMB了。\n\n**二是款型**\n\n这款水银灯造型（坐在十字架上）有 `宮沢模型限定` 和 `普通版` 两种，因为我也没买过普通版，所以下面描述可能不准确。\n\n通过图片来看，普通版表情不同，手持物品不同，腿部不能活动。\n\n而限定版，除此外，有两个表情，可拆卸羽翼，5组领结。\n\n当然，普通版价格有绝对优势。\n\n## 快递\n\n上文提到了代购平台，我就不重复了。没必要反复广告。说说费用和快递速度吧。\n\n| 类目                 | 价格              | 备注       |\n| -------------------- | ----------------- | ---------- |\n| 本体                 | 591 元（9800 円） |            |\n| 日本运费             | 0 元              | 亚马逊包邮 |\n| 代购费               | 19 元（300 円）   |            |\n| 国际运费（直发中国） | 119 元（1960 円） |            |\n\n**总计花费：729 元。**\n\n关于代购购买后，发给我的方式，有多种方案：\n\n* 直发：直接从日本发给我，有 EMS、AIR、SAL、海运等。我当时看 EMS最快（2-5天），SAL大致8-15天，价格没有便宜太多。海运的速度就算了，也不便宜。\n* 团发：分为快团和普团。快团大致10-15天到国内，普团估计要20-30天。费用上好像快团70-80吧，普团50-60。但是，这个只是到国内中转站，还需要顺丰/圆通/韵达之类的快递送给你，所以成本至少还需要加上10-20块。\n\n当时忘了截图了，太可惜了。只能凭印象写一点。\n\n所以，即便是不着急（30天），估计从日本到自己收到运费也需要 70 块左右。选择速度快的 EMS 还是有优势的。\n\n来，看看 EMS 到底有多快。\n\n| 时间             | 星期|内容                     |\n| ---------------- | ---- |------------------------|\n| 2018.06.23 21:07 |周六| 引受 |\n| 2018.06.24 15:20 |周日| 国際交換局から発送 |\n| 2018.06.25 04:00 |周一| 国際交換局に到着 |\n| 2018.06.25 04:07 | 周一 |到着交換局で保留 |\n| 2018.06.25 13:31 | 周一 |国際交換局から発送 |\n| 2018.06.25 13:31 | 周一 |税関から受領 |\n| 2018.06.25 18:03 | 周一 |投递 |\n| 2018.06.25 18:39 | 周一 |过了下班点，没人收，第二天再投递 |\n| 2018.06.26 10:52 | 周二 |收到 |\n\n总的来说，符合正常实效。周六发件，周日上飞机，周一到中国，顺利的话上午中午就能收到（周六如果能赶上飞机的话），这次由于过了下班点，所以隔了一天。\n\n这次比起之前代购要快多了，之前 EMS 很快，但是代购很磨蹭。\n\n所以，价格差不太多情况下，还是 EMS 好使。\n\n\n## 开箱图\n\n开箱图不做任何图片修整。\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-1.JPG-wm.white)\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-2.JPG-wm.white)\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-3.JPG-wm.white)\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-4.JPG-wm.white)\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-5.JPG-wm.white)\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-6.JPG-wm.white)\n\n嗯，没错，是中国制造的，运到日本后，又让我买回来了。我掏了两次运费...\n\n开箱我从来不整理的，是什么样子就是啥样子。此外夹带一份回执明信片。\n\n打开盒子后，蝴蝶结弄翻了，我也忘记调整回去了。\n\n**下面说点重要的：**\n\n可能是新品，但估计被拆封过。\n\n包装盒变形倒没什么，如果真是10年前的产物，也算保存完好了。\n\n外面的纸盒和里面的塑料盒，均出现二次胶条痕迹。外包装一处，内包装一处。\n\n内包装塑料盒，侧边有一处 2 公分左右开口，撕裂。\n\n\n\n## 摆拍\n\n为了拍照，特意去超市买了养乐多。\n\n默认状态下，本体不带羽翼、领结、手花，需要自己安装。拍照表情为默认表情。\n\n~~羽翼我觉得可能有防呆设计，插不反。但是没测试过（因为做工感觉差的让我震惊）。~~ 羽翼插口做工不佳，安装时候需要注意方向。\n\n手花不是很稳，轻微力量即可碰掉。\n\n右手的角度可调节。左手一样可以。\n\n两条腿方向和角度均可调节。\n\n腰部角度可以调节，可拆卸外套的裙子部分。\n\n水银灯裙撑后面有平台，可以坐在上面，但是不稳定，需要同时配合黑色裙摆支撑，裙摆对应位置有棱角。\n\n加装羽翼后，羽翼还可以实现纵轴方向上的支撑。\n\n**所以这个 `宮沢模型限定` 版，能实现的最稳定的位置就是紧贴纵轴，和宣传图一致。** 至于普通版，宣传图是距离纵轴有一定距离的。\n\n~~当然离开纵轴正常摆放也没有问题。~~ **此款由于下半身比较重，会前倾，需要依靠羽翼协助支撑。**\n\n最后，我把它放到了显示器左上角，这个角度比较好。显示器略厚于十字架摆台，依然可以靠裙撑协助支撑，显示器常规左右调整角度，并不会掉下来。\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-7.JPG-wm.white)\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-8.JPG-wm.white)\n","source":"_posts/2018/2018-06-26-suigintou.md","raw":"---\nlayout: post\ntitle: 入手水银灯\ndate: 2018-06-27 00:45:00 GMT+0000\ncategories: [随笔]\ntags:  [蔷薇少女,水银灯]\n---\n\n两周前突然起兴，下载了 Bilibili 客户端，真的，我之前竟然没有用过、下载过，仅仅听说过。软件非常好用，而且喜欢的动漫也可以看到，比如这次的正文《蔷薇少女》。\n\n在粗略看过一次后，决定去买一个人偶玩玩，就去了很久之前买东西的平台（030buy / 萌购）。\n\n<!-- more -->\n\n最终考虑多种方面，决定买了 [SRDX ローゼンメイデン・トロイメント 水銀燈 (宮沢模型限定バージョン)](https://www.amazon.co.jp/%E3%82%BF%E3%82%AB%E3%83%A9%E3%83%88%E3%83%9F%E3%83%BC%E3%82%A2%E3%83%BC%E3%83%84-TAKARATOMY-A-R-T-S-%E3%83%AD%E3%83%BC%E3%82%BC%E3%83%B3%E3%83%A1%E3%82%A4%E3%83%87%E3%83%B3%E3%83%BB%E3%83%88%E3%83%AD%E3%82%A4%E3%83%A1%E3%83%B3%E3%83%88-%E5%AE%AE%E6%B2%A2%E6%A8%A1%E5%9E%8B%E9%99%90%E5%AE%9A%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3/dp/B000L93VII/ref=olp_product_details/356-6202642-6081623?_encoding=UTF8&me=)。至于为什么选择这个，不是重点～\n\n不过还是要说下：\n\n**一是价格**\n\n这个模型貌似 2007 年出的，当时价格大致是不到 300 RMB，现在最少要将近 600 RMB了。\n\n**二是款型**\n\n这款水银灯造型（坐在十字架上）有 `宮沢模型限定` 和 `普通版` 两种，因为我也没买过普通版，所以下面描述可能不准确。\n\n通过图片来看，普通版表情不同，手持物品不同，腿部不能活动。\n\n而限定版，除此外，有两个表情，可拆卸羽翼，5组领结。\n\n当然，普通版价格有绝对优势。\n\n## 快递\n\n上文提到了代购平台，我就不重复了。没必要反复广告。说说费用和快递速度吧。\n\n| 类目                 | 价格              | 备注       |\n| -------------------- | ----------------- | ---------- |\n| 本体                 | 591 元（9800 円） |            |\n| 日本运费             | 0 元              | 亚马逊包邮 |\n| 代购费               | 19 元（300 円）   |            |\n| 国际运费（直发中国） | 119 元（1960 円） |            |\n\n**总计花费：729 元。**\n\n关于代购购买后，发给我的方式，有多种方案：\n\n* 直发：直接从日本发给我，有 EMS、AIR、SAL、海运等。我当时看 EMS最快（2-5天），SAL大致8-15天，价格没有便宜太多。海运的速度就算了，也不便宜。\n* 团发：分为快团和普团。快团大致10-15天到国内，普团估计要20-30天。费用上好像快团70-80吧，普团50-60。但是，这个只是到国内中转站，还需要顺丰/圆通/韵达之类的快递送给你，所以成本至少还需要加上10-20块。\n\n当时忘了截图了，太可惜了。只能凭印象写一点。\n\n所以，即便是不着急（30天），估计从日本到自己收到运费也需要 70 块左右。选择速度快的 EMS 还是有优势的。\n\n来，看看 EMS 到底有多快。\n\n| 时间             | 星期|内容                     |\n| ---------------- | ---- |------------------------|\n| 2018.06.23 21:07 |周六| 引受 |\n| 2018.06.24 15:20 |周日| 国際交換局から発送 |\n| 2018.06.25 04:00 |周一| 国際交換局に到着 |\n| 2018.06.25 04:07 | 周一 |到着交換局で保留 |\n| 2018.06.25 13:31 | 周一 |国際交換局から発送 |\n| 2018.06.25 13:31 | 周一 |税関から受領 |\n| 2018.06.25 18:03 | 周一 |投递 |\n| 2018.06.25 18:39 | 周一 |过了下班点，没人收，第二天再投递 |\n| 2018.06.26 10:52 | 周二 |收到 |\n\n总的来说，符合正常实效。周六发件，周日上飞机，周一到中国，顺利的话上午中午就能收到（周六如果能赶上飞机的话），这次由于过了下班点，所以隔了一天。\n\n这次比起之前代购要快多了，之前 EMS 很快，但是代购很磨蹭。\n\n所以，价格差不太多情况下，还是 EMS 好使。\n\n\n## 开箱图\n\n开箱图不做任何图片修整。\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-1.JPG-wm.white)\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-2.JPG-wm.white)\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-3.JPG-wm.white)\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-4.JPG-wm.white)\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-5.JPG-wm.white)\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-6.JPG-wm.white)\n\n嗯，没错，是中国制造的，运到日本后，又让我买回来了。我掏了两次运费...\n\n开箱我从来不整理的，是什么样子就是啥样子。此外夹带一份回执明信片。\n\n打开盒子后，蝴蝶结弄翻了，我也忘记调整回去了。\n\n**下面说点重要的：**\n\n可能是新品，但估计被拆封过。\n\n包装盒变形倒没什么，如果真是10年前的产物，也算保存完好了。\n\n外面的纸盒和里面的塑料盒，均出现二次胶条痕迹。外包装一处，内包装一处。\n\n内包装塑料盒，侧边有一处 2 公分左右开口，撕裂。\n\n\n\n## 摆拍\n\n为了拍照，特意去超市买了养乐多。\n\n默认状态下，本体不带羽翼、领结、手花，需要自己安装。拍照表情为默认表情。\n\n~~羽翼我觉得可能有防呆设计，插不反。但是没测试过（因为做工感觉差的让我震惊）。~~ 羽翼插口做工不佳，安装时候需要注意方向。\n\n手花不是很稳，轻微力量即可碰掉。\n\n右手的角度可调节。左手一样可以。\n\n两条腿方向和角度均可调节。\n\n腰部角度可以调节，可拆卸外套的裙子部分。\n\n水银灯裙撑后面有平台，可以坐在上面，但是不稳定，需要同时配合黑色裙摆支撑，裙摆对应位置有棱角。\n\n加装羽翼后，羽翼还可以实现纵轴方向上的支撑。\n\n**所以这个 `宮沢模型限定` 版，能实现的最稳定的位置就是紧贴纵轴，和宣传图一致。** 至于普通版，宣传图是距离纵轴有一定距离的。\n\n~~当然离开纵轴正常摆放也没有问题。~~ **此款由于下半身比较重，会前倾，需要依靠羽翼协助支撑。**\n\n最后，我把它放到了显示器左上角，这个角度比较好。显示器略厚于十字架摆台，依然可以靠裙撑协助支撑，显示器常规左右调整角度，并不会掉下来。\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-7.JPG-wm.white)\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-8.JPG-wm.white)\n","slug":"2018-2018-06-26-suigintou","published":1,"updated":"2019-07-18T17:19:07.284Z","comments":1,"photos":[],"link":"","_id":"cjy8y72sr004ms21d7n9yj9i5","content":"<p>两周前突然起兴，下载了 Bilibili 客户端，真的，我之前竟然没有用过、下载过，仅仅听说过。软件非常好用，而且喜欢的动漫也可以看到，比如这次的正文《蔷薇少女》。</p>\n<p>在粗略看过一次后，决定去买一个人偶玩玩，就去了很久之前买东西的平台（030buy / 萌购）。</p>\n<a id=\"more\"></a>\n\n<p>最终考虑多种方面，决定买了 <a href=\"https://www.amazon.co.jp/%E3%82%BF%E3%82%AB%E3%83%A9%E3%83%88%E3%83%9F%E3%83%BC%E3%82%A2%E3%83%BC%E3%83%84-TAKARATOMY-A-R-T-S-%E3%83%AD%E3%83%BC%E3%82%BC%E3%83%B3%E3%83%A1%E3%82%A4%E3%83%87%E3%83%B3%E3%83%BB%E3%83%88%E3%83%AD%E3%82%A4%E3%83%A1%E3%83%B3%E3%83%88-%E5%AE%AE%E6%B2%A2%E6%A8%A1%E5%9E%8B%E9%99%90%E5%AE%9A%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3/dp/B000L93VII/ref=olp_product_details/356-6202642-6081623?_encoding=UTF8&me=\" target=\"_blank\" rel=\"noopener\">SRDX ローゼンメイデン・トロイメント 水銀燈 (宮沢模型限定バージョン)</a>。至于为什么选择这个，不是重点～</p>\n<p>不过还是要说下：</p>\n<p><strong>一是价格</strong></p>\n<p>这个模型貌似 2007 年出的，当时价格大致是不到 300 RMB，现在最少要将近 600 RMB了。</p>\n<p><strong>二是款型</strong></p>\n<p>这款水银灯造型（坐在十字架上）有 <code>宮沢模型限定</code> 和 <code>普通版</code> 两种，因为我也没买过普通版，所以下面描述可能不准确。</p>\n<p>通过图片来看，普通版表情不同，手持物品不同，腿部不能活动。</p>\n<p>而限定版，除此外，有两个表情，可拆卸羽翼，5组领结。</p>\n<p>当然，普通版价格有绝对优势。</p>\n<h2 id=\"快递\"><a href=\"#快递\" class=\"headerlink\" title=\"快递\"></a>快递</h2><p>上文提到了代购平台，我就不重复了。没必要反复广告。说说费用和快递速度吧。</p>\n<table>\n<thead>\n<tr>\n<th>类目</th>\n<th>价格</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>本体</td>\n<td>591 元（9800 円）</td>\n<td></td>\n</tr>\n<tr>\n<td>日本运费</td>\n<td>0 元</td>\n<td>亚马逊包邮</td>\n</tr>\n<tr>\n<td>代购费</td>\n<td>19 元（300 円）</td>\n<td></td>\n</tr>\n<tr>\n<td>国际运费（直发中国）</td>\n<td>119 元（1960 円）</td>\n<td></td>\n</tr>\n</tbody></table>\n<p><strong>总计花费：729 元。</strong></p>\n<p>关于代购购买后，发给我的方式，有多种方案：</p>\n<ul>\n<li>直发：直接从日本发给我，有 EMS、AIR、SAL、海运等。我当时看 EMS最快（2-5天），SAL大致8-15天，价格没有便宜太多。海运的速度就算了，也不便宜。</li>\n<li>团发：分为快团和普团。快团大致10-15天到国内，普团估计要20-30天。费用上好像快团70-80吧，普团50-60。但是，这个只是到国内中转站，还需要顺丰/圆通/韵达之类的快递送给你，所以成本至少还需要加上10-20块。</li>\n</ul>\n<p>当时忘了截图了，太可惜了。只能凭印象写一点。</p>\n<p>所以，即便是不着急（30天），估计从日本到自己收到运费也需要 70 块左右。选择速度快的 EMS 还是有优势的。</p>\n<p>来，看看 EMS 到底有多快。</p>\n<table>\n<thead>\n<tr>\n<th>时间</th>\n<th>星期</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2018.06.23 21:07</td>\n<td>周六</td>\n<td>引受</td>\n</tr>\n<tr>\n<td>2018.06.24 15:20</td>\n<td>周日</td>\n<td>国際交換局から発送</td>\n</tr>\n<tr>\n<td>2018.06.25 04:00</td>\n<td>周一</td>\n<td>国際交換局に到着</td>\n</tr>\n<tr>\n<td>2018.06.25 04:07</td>\n<td>周一</td>\n<td>到着交換局で保留</td>\n</tr>\n<tr>\n<td>2018.06.25 13:31</td>\n<td>周一</td>\n<td>国際交換局から発送</td>\n</tr>\n<tr>\n<td>2018.06.25 13:31</td>\n<td>周一</td>\n<td>税関から受領</td>\n</tr>\n<tr>\n<td>2018.06.25 18:03</td>\n<td>周一</td>\n<td>投递</td>\n</tr>\n<tr>\n<td>2018.06.25 18:39</td>\n<td>周一</td>\n<td>过了下班点，没人收，第二天再投递</td>\n</tr>\n<tr>\n<td>2018.06.26 10:52</td>\n<td>周二</td>\n<td>收到</td>\n</tr>\n</tbody></table>\n<p>总的来说，符合正常实效。周六发件，周日上飞机，周一到中国，顺利的话上午中午就能收到（周六如果能赶上飞机的话），这次由于过了下班点，所以隔了一天。</p>\n<p>这次比起之前代购要快多了，之前 EMS 很快，但是代购很磨蹭。</p>\n<p>所以，价格差不太多情况下，还是 EMS 好使。</p>\n<h2 id=\"开箱图\"><a href=\"#开箱图\" class=\"headerlink\" title=\"开箱图\"></a>开箱图</h2><p>开箱图不做任何图片修整。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-1.JPG-wm.white\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-2.JPG-wm.white\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-3.JPG-wm.white\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-4.JPG-wm.white\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-5.JPG-wm.white\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-6.JPG-wm.white\" alt=\"img\"></p>\n<p>嗯，没错，是中国制造的，运到日本后，又让我买回来了。我掏了两次运费…</p>\n<p>开箱我从来不整理的，是什么样子就是啥样子。此外夹带一份回执明信片。</p>\n<p>打开盒子后，蝴蝶结弄翻了，我也忘记调整回去了。</p>\n<p><strong>下面说点重要的：</strong></p>\n<p>可能是新品，但估计被拆封过。</p>\n<p>包装盒变形倒没什么，如果真是10年前的产物，也算保存完好了。</p>\n<p>外面的纸盒和里面的塑料盒，均出现二次胶条痕迹。外包装一处，内包装一处。</p>\n<p>内包装塑料盒，侧边有一处 2 公分左右开口，撕裂。</p>\n<h2 id=\"摆拍\"><a href=\"#摆拍\" class=\"headerlink\" title=\"摆拍\"></a>摆拍</h2><p>为了拍照，特意去超市买了养乐多。</p>\n<p>默认状态下，本体不带羽翼、领结、手花，需要自己安装。拍照表情为默认表情。</p>\n<p><del>羽翼我觉得可能有防呆设计，插不反。但是没测试过（因为做工感觉差的让我震惊）。</del> 羽翼插口做工不佳，安装时候需要注意方向。</p>\n<p>手花不是很稳，轻微力量即可碰掉。</p>\n<p>右手的角度可调节。左手一样可以。</p>\n<p>两条腿方向和角度均可调节。</p>\n<p>腰部角度可以调节，可拆卸外套的裙子部分。</p>\n<p>水银灯裙撑后面有平台，可以坐在上面，但是不稳定，需要同时配合黑色裙摆支撑，裙摆对应位置有棱角。</p>\n<p>加装羽翼后，羽翼还可以实现纵轴方向上的支撑。</p>\n<p><strong>所以这个 <code>宮沢模型限定</code> 版，能实现的最稳定的位置就是紧贴纵轴，和宣传图一致。</strong> 至于普通版，宣传图是距离纵轴有一定距离的。</p>\n<p><del>当然离开纵轴正常摆放也没有问题。</del> <strong>此款由于下半身比较重，会前倾，需要依靠羽翼协助支撑。</strong></p>\n<p>最后，我把它放到了显示器左上角，这个角度比较好。显示器略厚于十字架摆台，依然可以靠裙撑协助支撑，显示器常规左右调整角度，并不会掉下来。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-7.JPG-wm.white\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-8.JPG-wm.white\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"<p>两周前突然起兴，下载了 Bilibili 客户端，真的，我之前竟然没有用过、下载过，仅仅听说过。软件非常好用，而且喜欢的动漫也可以看到，比如这次的正文《蔷薇少女》。</p>\n<p>在粗略看过一次后，决定去买一个人偶玩玩，就去了很久之前买东西的平台（030buy / 萌购）。</p>","more":"<p>最终考虑多种方面，决定买了 <a href=\"https://www.amazon.co.jp/%E3%82%BF%E3%82%AB%E3%83%A9%E3%83%88%E3%83%9F%E3%83%BC%E3%82%A2%E3%83%BC%E3%83%84-TAKARATOMY-A-R-T-S-%E3%83%AD%E3%83%BC%E3%82%BC%E3%83%B3%E3%83%A1%E3%82%A4%E3%83%87%E3%83%B3%E3%83%BB%E3%83%88%E3%83%AD%E3%82%A4%E3%83%A1%E3%83%B3%E3%83%88-%E5%AE%AE%E6%B2%A2%E6%A8%A1%E5%9E%8B%E9%99%90%E5%AE%9A%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3/dp/B000L93VII/ref=olp_product_details/356-6202642-6081623?_encoding=UTF8&me=\" target=\"_blank\" rel=\"noopener\">SRDX ローゼンメイデン・トロイメント 水銀燈 (宮沢模型限定バージョン)</a>。至于为什么选择这个，不是重点～</p>\n<p>不过还是要说下：</p>\n<p><strong>一是价格</strong></p>\n<p>这个模型貌似 2007 年出的，当时价格大致是不到 300 RMB，现在最少要将近 600 RMB了。</p>\n<p><strong>二是款型</strong></p>\n<p>这款水银灯造型（坐在十字架上）有 <code>宮沢模型限定</code> 和 <code>普通版</code> 两种，因为我也没买过普通版，所以下面描述可能不准确。</p>\n<p>通过图片来看，普通版表情不同，手持物品不同，腿部不能活动。</p>\n<p>而限定版，除此外，有两个表情，可拆卸羽翼，5组领结。</p>\n<p>当然，普通版价格有绝对优势。</p>\n<h2 id=\"快递\"><a href=\"#快递\" class=\"headerlink\" title=\"快递\"></a>快递</h2><p>上文提到了代购平台，我就不重复了。没必要反复广告。说说费用和快递速度吧。</p>\n<table>\n<thead>\n<tr>\n<th>类目</th>\n<th>价格</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>本体</td>\n<td>591 元（9800 円）</td>\n<td></td>\n</tr>\n<tr>\n<td>日本运费</td>\n<td>0 元</td>\n<td>亚马逊包邮</td>\n</tr>\n<tr>\n<td>代购费</td>\n<td>19 元（300 円）</td>\n<td></td>\n</tr>\n<tr>\n<td>国际运费（直发中国）</td>\n<td>119 元（1960 円）</td>\n<td></td>\n</tr>\n</tbody></table>\n<p><strong>总计花费：729 元。</strong></p>\n<p>关于代购购买后，发给我的方式，有多种方案：</p>\n<ul>\n<li>直发：直接从日本发给我，有 EMS、AIR、SAL、海运等。我当时看 EMS最快（2-5天），SAL大致8-15天，价格没有便宜太多。海运的速度就算了，也不便宜。</li>\n<li>团发：分为快团和普团。快团大致10-15天到国内，普团估计要20-30天。费用上好像快团70-80吧，普团50-60。但是，这个只是到国内中转站，还需要顺丰/圆通/韵达之类的快递送给你，所以成本至少还需要加上10-20块。</li>\n</ul>\n<p>当时忘了截图了，太可惜了。只能凭印象写一点。</p>\n<p>所以，即便是不着急（30天），估计从日本到自己收到运费也需要 70 块左右。选择速度快的 EMS 还是有优势的。</p>\n<p>来，看看 EMS 到底有多快。</p>\n<table>\n<thead>\n<tr>\n<th>时间</th>\n<th>星期</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2018.06.23 21:07</td>\n<td>周六</td>\n<td>引受</td>\n</tr>\n<tr>\n<td>2018.06.24 15:20</td>\n<td>周日</td>\n<td>国際交換局から発送</td>\n</tr>\n<tr>\n<td>2018.06.25 04:00</td>\n<td>周一</td>\n<td>国際交換局に到着</td>\n</tr>\n<tr>\n<td>2018.06.25 04:07</td>\n<td>周一</td>\n<td>到着交換局で保留</td>\n</tr>\n<tr>\n<td>2018.06.25 13:31</td>\n<td>周一</td>\n<td>国際交換局から発送</td>\n</tr>\n<tr>\n<td>2018.06.25 13:31</td>\n<td>周一</td>\n<td>税関から受領</td>\n</tr>\n<tr>\n<td>2018.06.25 18:03</td>\n<td>周一</td>\n<td>投递</td>\n</tr>\n<tr>\n<td>2018.06.25 18:39</td>\n<td>周一</td>\n<td>过了下班点，没人收，第二天再投递</td>\n</tr>\n<tr>\n<td>2018.06.26 10:52</td>\n<td>周二</td>\n<td>收到</td>\n</tr>\n</tbody></table>\n<p>总的来说，符合正常实效。周六发件，周日上飞机，周一到中国，顺利的话上午中午就能收到（周六如果能赶上飞机的话），这次由于过了下班点，所以隔了一天。</p>\n<p>这次比起之前代购要快多了，之前 EMS 很快，但是代购很磨蹭。</p>\n<p>所以，价格差不太多情况下，还是 EMS 好使。</p>\n<h2 id=\"开箱图\"><a href=\"#开箱图\" class=\"headerlink\" title=\"开箱图\"></a>开箱图</h2><p>开箱图不做任何图片修整。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-1.JPG-wm.white\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-2.JPG-wm.white\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-3.JPG-wm.white\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-4.JPG-wm.white\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-5.JPG-wm.white\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-6.JPG-wm.white\" alt=\"img\"></p>\n<p>嗯，没错，是中国制造的，运到日本后，又让我买回来了。我掏了两次运费…</p>\n<p>开箱我从来不整理的，是什么样子就是啥样子。此外夹带一份回执明信片。</p>\n<p>打开盒子后，蝴蝶结弄翻了，我也忘记调整回去了。</p>\n<p><strong>下面说点重要的：</strong></p>\n<p>可能是新品，但估计被拆封过。</p>\n<p>包装盒变形倒没什么，如果真是10年前的产物，也算保存完好了。</p>\n<p>外面的纸盒和里面的塑料盒，均出现二次胶条痕迹。外包装一处，内包装一处。</p>\n<p>内包装塑料盒，侧边有一处 2 公分左右开口，撕裂。</p>\n<h2 id=\"摆拍\"><a href=\"#摆拍\" class=\"headerlink\" title=\"摆拍\"></a>摆拍</h2><p>为了拍照，特意去超市买了养乐多。</p>\n<p>默认状态下，本体不带羽翼、领结、手花，需要自己安装。拍照表情为默认表情。</p>\n<p><del>羽翼我觉得可能有防呆设计，插不反。但是没测试过（因为做工感觉差的让我震惊）。</del> 羽翼插口做工不佳，安装时候需要注意方向。</p>\n<p>手花不是很稳，轻微力量即可碰掉。</p>\n<p>右手的角度可调节。左手一样可以。</p>\n<p>两条腿方向和角度均可调节。</p>\n<p>腰部角度可以调节，可拆卸外套的裙子部分。</p>\n<p>水银灯裙撑后面有平台，可以坐在上面，但是不稳定，需要同时配合黑色裙摆支撑，裙摆对应位置有棱角。</p>\n<p>加装羽翼后，羽翼还可以实现纵轴方向上的支撑。</p>\n<p><strong>所以这个 <code>宮沢模型限定</code> 版，能实现的最稳定的位置就是紧贴纵轴，和宣传图一致。</strong> 至于普通版，宣传图是距离纵轴有一定距离的。</p>\n<p><del>当然离开纵轴正常摆放也没有问题。</del> <strong>此款由于下半身比较重，会前倾，需要依靠羽翼协助支撑。</strong></p>\n<p>最后，我把它放到了显示器左上角，这个角度比较好。显示器略厚于十字架摆台，依然可以靠裙撑协助支撑，显示器常规左右调整角度，并不会掉下来。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-7.JPG-wm.white\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-8.JPG-wm.white\" alt=\"img\"></p>"},{"layout":"post","title":"移除自动启动的 Adobe Creative Cloud","date":"2018-07-02T21:03:00.000Z","_content":"\n自从安装了新版 adobe cc 套件，就被默认安装了 Creative Cloud。这玩意装了也就算了，可还是自启动。而且 Mac 下，还不能通过用户管理-开机启动里面关闭掉。\n\n往上一查被它困扰的人还挺多的，也有不少解决方案。\n\n<!-- more -->\n\n其中最简单的，就属于安装官方卸载程序了。\n\n**第一步**，去官网下载 [卸载 Creative Cloud 桌面应用程序](https://helpx.adobe.com/cn/creative-cloud/help/uninstall-creative-cloud-desktop-app.html)，Windows 和 Mac 都有。\n\n**第二步**，运行此软件，选择卸载就可以了，没有复杂的步骤。\n\n--EOF--","source":"_posts/2018/2018-07-02-adobe-creative-cloud.md","raw":"---\nlayout: post\ntitle: 移除自动启动的 Adobe Creative Cloud \ndate: 2018-07-02 21:03:00 GMT+0000\ncategories: [随笔]\ntags:  []\n---\n\n自从安装了新版 adobe cc 套件，就被默认安装了 Creative Cloud。这玩意装了也就算了，可还是自启动。而且 Mac 下，还不能通过用户管理-开机启动里面关闭掉。\n\n往上一查被它困扰的人还挺多的，也有不少解决方案。\n\n<!-- more -->\n\n其中最简单的，就属于安装官方卸载程序了。\n\n**第一步**，去官网下载 [卸载 Creative Cloud 桌面应用程序](https://helpx.adobe.com/cn/creative-cloud/help/uninstall-creative-cloud-desktop-app.html)，Windows 和 Mac 都有。\n\n**第二步**，运行此软件，选择卸载就可以了，没有复杂的步骤。\n\n--EOF--","slug":"2018-2018-07-02-adobe-creative-cloud","published":1,"updated":"2019-07-18T17:19:07.044Z","comments":1,"photos":[],"link":"","_id":"cjy8y72ss004ps21dzjvyf0b6","content":"<p>自从安装了新版 adobe cc 套件，就被默认安装了 Creative Cloud。这玩意装了也就算了，可还是自启动。而且 Mac 下，还不能通过用户管理-开机启动里面关闭掉。</p>\n<p>往上一查被它困扰的人还挺多的，也有不少解决方案。</p>\n<a id=\"more\"></a>\n\n<p>其中最简单的，就属于安装官方卸载程序了。</p>\n<p><strong>第一步</strong>，去官网下载 <a href=\"https://helpx.adobe.com/cn/creative-cloud/help/uninstall-creative-cloud-desktop-app.html\" target=\"_blank\" rel=\"noopener\">卸载 Creative Cloud 桌面应用程序</a>，Windows 和 Mac 都有。</p>\n<p><strong>第二步</strong>，运行此软件，选择卸载就可以了，没有复杂的步骤。</p>\n<p>–EOF–</p>\n","site":{"data":{}},"excerpt":"<p>自从安装了新版 adobe cc 套件，就被默认安装了 Creative Cloud。这玩意装了也就算了，可还是自启动。而且 Mac 下，还不能通过用户管理-开机启动里面关闭掉。</p>\n<p>往上一查被它困扰的人还挺多的，也有不少解决方案。</p>","more":"<p>其中最简单的，就属于安装官方卸载程序了。</p>\n<p><strong>第一步</strong>，去官网下载 <a href=\"https://helpx.adobe.com/cn/creative-cloud/help/uninstall-creative-cloud-desktop-app.html\" target=\"_blank\" rel=\"noopener\">卸载 Creative Cloud 桌面应用程序</a>，Windows 和 Mac 都有。</p>\n<p><strong>第二步</strong>，运行此软件，选择卸载就可以了，没有复杂的步骤。</p>\n<p>–EOF–</p>"},{"layout":"post","title":"cloudcone ubuntu 绑定添加 IPv6 方法","date":"2018-09-11T21:40:00.000Z","_content":"\n在 cloudcone 中买了一个 ubuntu VPS，发现支持送不少的 IPv6 地址。正好最近需要用到，就打算直接来使用。\n\n结果发现 ping6 不通。尴尬...\n\n<!-- more -->\n\n找了一些资料，说的比较复杂，基本上都是说通过安装代理工具，让不支持 IPv6 的机器通过第三方代理的方式获取 IP。\n\n但我的这个是本身有，自己却用不了啊。\n\n查了半天，其实解决很简单，只需要在系统中绑定 IPv6 的地址就好了，就这么简单。\n\n编辑 `/etc/network/interfaces` 文件：\n\n默认应该是下面这样子，只有 IPv4 的地址：\n\n```\n# Generated by SolusVM\n\n auto lo\n  iface lo inet loopback\n\n auto eth0\n  iface eth0 inet static\n   address 173.82.xx.xx\n   gateway 173.82.xx.xx\n   netmask 255.255.255.0\n   dns-nameservers 8.8.8.8 8.8.4.4\n```\n\n只需要在后面增加上 IPv6 的信息就好了：\n\n```\n# Generated by SolusVM\n\n auto lo\n  iface lo inet loopback\n\n auto eth0\n  iface eth0 inet static\n   address 173.82.243.11\n   gateway 173.82.243.1\n   netmask 255.255.255.0\n   dns-nameservers 8.8.8.8 8.8.4.4\n\n+ iface eth0 inet6 static\n+  address 2607:f130::xx:xx\n+  netmask 64\n+  gateway 2607:f130::xx:xx\n```\n\n之后，可以查看下网络信息\n\n```\nifconfig\n```\n\n应该可以看到刚刚配置好的 IPv6 信息。\n\n之后，通过 `ping6` 再测试下：\n\n```\nping6 ipv6.google.com\n```\n\n可以看到正常回复了：\n\n```\n64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=6 ttl=58 time=0.717 ms\n64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=7 ttl=58 time=0.704 ms\n64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=8 ttl=58 time=1.52 ms\n64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=9 ttl=58 time=0.783 ms\n64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=10 ttl=58 time=0.633 ms\n64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=11 ttl=58 time=0.638 ms\n64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=12 ttl=58 time=0.784 ms\n```\n\n--END--\n","source":"_posts/2018/2018-09-11-ubuntu-ipv6.md","raw":"---\nlayout: post\ntitle: cloudcone ubuntu 绑定添加 IPv6 方法\ndate: 2018-09-11 21:40:00 GMT+0000\ncategories: [代码]\ntags:  [cloudcone,ubuntu,ipv6,配置]\n---\n\n在 cloudcone 中买了一个 ubuntu VPS，发现支持送不少的 IPv6 地址。正好最近需要用到，就打算直接来使用。\n\n结果发现 ping6 不通。尴尬...\n\n<!-- more -->\n\n找了一些资料，说的比较复杂，基本上都是说通过安装代理工具，让不支持 IPv6 的机器通过第三方代理的方式获取 IP。\n\n但我的这个是本身有，自己却用不了啊。\n\n查了半天，其实解决很简单，只需要在系统中绑定 IPv6 的地址就好了，就这么简单。\n\n编辑 `/etc/network/interfaces` 文件：\n\n默认应该是下面这样子，只有 IPv4 的地址：\n\n```\n# Generated by SolusVM\n\n auto lo\n  iface lo inet loopback\n\n auto eth0\n  iface eth0 inet static\n   address 173.82.xx.xx\n   gateway 173.82.xx.xx\n   netmask 255.255.255.0\n   dns-nameservers 8.8.8.8 8.8.4.4\n```\n\n只需要在后面增加上 IPv6 的信息就好了：\n\n```\n# Generated by SolusVM\n\n auto lo\n  iface lo inet loopback\n\n auto eth0\n  iface eth0 inet static\n   address 173.82.243.11\n   gateway 173.82.243.1\n   netmask 255.255.255.0\n   dns-nameservers 8.8.8.8 8.8.4.4\n\n+ iface eth0 inet6 static\n+  address 2607:f130::xx:xx\n+  netmask 64\n+  gateway 2607:f130::xx:xx\n```\n\n之后，可以查看下网络信息\n\n```\nifconfig\n```\n\n应该可以看到刚刚配置好的 IPv6 信息。\n\n之后，通过 `ping6` 再测试下：\n\n```\nping6 ipv6.google.com\n```\n\n可以看到正常回复了：\n\n```\n64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=6 ttl=58 time=0.717 ms\n64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=7 ttl=58 time=0.704 ms\n64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=8 ttl=58 time=1.52 ms\n64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=9 ttl=58 time=0.783 ms\n64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=10 ttl=58 time=0.633 ms\n64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=11 ttl=58 time=0.638 ms\n64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=12 ttl=58 time=0.784 ms\n```\n\n--END--\n","slug":"2018-2018-09-11-ubuntu-ipv6","published":1,"updated":"2019-07-18T17:19:07.021Z","comments":1,"photos":[],"link":"","_id":"cjy8y72su004rs21det1o063u","content":"<p>在 cloudcone 中买了一个 ubuntu VPS，发现支持送不少的 IPv6 地址。正好最近需要用到，就打算直接来使用。</p>\n<p>结果发现 ping6 不通。尴尬…</p>\n<a id=\"more\"></a>\n\n<p>找了一些资料，说的比较复杂，基本上都是说通过安装代理工具，让不支持 IPv6 的机器通过第三方代理的方式获取 IP。</p>\n<p>但我的这个是本身有，自己却用不了啊。</p>\n<p>查了半天，其实解决很简单，只需要在系统中绑定 IPv6 的地址就好了，就这么简单。</p>\n<p>编辑 <code>/etc/network/interfaces</code> 文件：</p>\n<p>默认应该是下面这样子，只有 IPv4 的地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Generated by SolusVM</span><br><span class=\"line\"></span><br><span class=\"line\"> auto lo</span><br><span class=\"line\">  iface lo inet loopback</span><br><span class=\"line\"></span><br><span class=\"line\"> auto eth0</span><br><span class=\"line\">  iface eth0 inet static</span><br><span class=\"line\">   address 173.82.xx.xx</span><br><span class=\"line\">   gateway 173.82.xx.xx</span><br><span class=\"line\">   netmask 255.255.255.0</span><br><span class=\"line\">   dns-nameservers 8.8.8.8 8.8.4.4</span><br></pre></td></tr></table></figure>\n\n<p>只需要在后面增加上 IPv6 的信息就好了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Generated by SolusVM</span><br><span class=\"line\"></span><br><span class=\"line\"> auto lo</span><br><span class=\"line\">  iface lo inet loopback</span><br><span class=\"line\"></span><br><span class=\"line\"> auto eth0</span><br><span class=\"line\">  iface eth0 inet static</span><br><span class=\"line\">   address 173.82.243.11</span><br><span class=\"line\">   gateway 173.82.243.1</span><br><span class=\"line\">   netmask 255.255.255.0</span><br><span class=\"line\">   dns-nameservers 8.8.8.8 8.8.4.4</span><br><span class=\"line\"></span><br><span class=\"line\">+ iface eth0 inet6 static</span><br><span class=\"line\">+  address 2607:f130::xx:xx</span><br><span class=\"line\">+  netmask 64</span><br><span class=\"line\">+  gateway 2607:f130::xx:xx</span><br></pre></td></tr></table></figure>\n\n<p>之后，可以查看下网络信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br></pre></td></tr></table></figure>\n\n<p>应该可以看到刚刚配置好的 IPv6 信息。</p>\n<p>之后，通过 <code>ping6</code> 再测试下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping6 ipv6.google.com</span><br></pre></td></tr></table></figure>\n\n<p>可以看到正常回复了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=6 ttl=58 time=0.717 ms</span><br><span class=\"line\">64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=7 ttl=58 time=0.704 ms</span><br><span class=\"line\">64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=8 ttl=58 time=1.52 ms</span><br><span class=\"line\">64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=9 ttl=58 time=0.783 ms</span><br><span class=\"line\">64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=10 ttl=58 time=0.633 ms</span><br><span class=\"line\">64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=11 ttl=58 time=0.638 ms</span><br><span class=\"line\">64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=12 ttl=58 time=0.784 ms</span><br></pre></td></tr></table></figure>\n\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>在 cloudcone 中买了一个 ubuntu VPS，发现支持送不少的 IPv6 地址。正好最近需要用到，就打算直接来使用。</p>\n<p>结果发现 ping6 不通。尴尬…</p>","more":"<p>找了一些资料，说的比较复杂，基本上都是说通过安装代理工具，让不支持 IPv6 的机器通过第三方代理的方式获取 IP。</p>\n<p>但我的这个是本身有，自己却用不了啊。</p>\n<p>查了半天，其实解决很简单，只需要在系统中绑定 IPv6 的地址就好了，就这么简单。</p>\n<p>编辑 <code>/etc/network/interfaces</code> 文件：</p>\n<p>默认应该是下面这样子，只有 IPv4 的地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Generated by SolusVM</span><br><span class=\"line\"></span><br><span class=\"line\"> auto lo</span><br><span class=\"line\">  iface lo inet loopback</span><br><span class=\"line\"></span><br><span class=\"line\"> auto eth0</span><br><span class=\"line\">  iface eth0 inet static</span><br><span class=\"line\">   address 173.82.xx.xx</span><br><span class=\"line\">   gateway 173.82.xx.xx</span><br><span class=\"line\">   netmask 255.255.255.0</span><br><span class=\"line\">   dns-nameservers 8.8.8.8 8.8.4.4</span><br></pre></td></tr></table></figure>\n\n<p>只需要在后面增加上 IPv6 的信息就好了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Generated by SolusVM</span><br><span class=\"line\"></span><br><span class=\"line\"> auto lo</span><br><span class=\"line\">  iface lo inet loopback</span><br><span class=\"line\"></span><br><span class=\"line\"> auto eth0</span><br><span class=\"line\">  iface eth0 inet static</span><br><span class=\"line\">   address 173.82.243.11</span><br><span class=\"line\">   gateway 173.82.243.1</span><br><span class=\"line\">   netmask 255.255.255.0</span><br><span class=\"line\">   dns-nameservers 8.8.8.8 8.8.4.4</span><br><span class=\"line\"></span><br><span class=\"line\">+ iface eth0 inet6 static</span><br><span class=\"line\">+  address 2607:f130::xx:xx</span><br><span class=\"line\">+  netmask 64</span><br><span class=\"line\">+  gateway 2607:f130::xx:xx</span><br></pre></td></tr></table></figure>\n\n<p>之后，可以查看下网络信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br></pre></td></tr></table></figure>\n\n<p>应该可以看到刚刚配置好的 IPv6 信息。</p>\n<p>之后，通过 <code>ping6</code> 再测试下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping6 ipv6.google.com</span><br></pre></td></tr></table></figure>\n\n<p>可以看到正常回复了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=6 ttl=58 time=0.717 ms</span><br><span class=\"line\">64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=7 ttl=58 time=0.704 ms</span><br><span class=\"line\">64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=8 ttl=58 time=1.52 ms</span><br><span class=\"line\">64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=9 ttl=58 time=0.783 ms</span><br><span class=\"line\">64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=10 ttl=58 time=0.633 ms</span><br><span class=\"line\">64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=11 ttl=58 time=0.638 ms</span><br><span class=\"line\">64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=12 ttl=58 time=0.784 ms</span><br></pre></td></tr></table></figure>\n\n<p>–END–</p>"},{"layout":"post","title":"管理 hosts 的软件","date":"2018-08-28T23:17:00.000Z","_content":"\n公司网络调整之后，外网就不能直接访问内网数据了。需要试用 VPN 访问后，在配置对应的 hosts 解析才可以。\n\n内网还分两套测试环境，这就涉及反复调整 hosts。所以，我也就找了些能管理 hosts 的软件。\n\n<!-- more -->\n\n## iHosts （Mac）\n![img](https://cdn0.yukapril.com/blog/2018-08-28-hosts-iHosts.png-wm.black)\n\n这个是个原生软件，只有 Mac 下才有。默认只提供4个节点（配置）。如图，我用了两个了。此外，我特意截图到了状态栏，他要切换配置选项，需要在这里点击，主程序里面是不行的。\n\n优点：简单，速度快，支持分组，好用。\n\n缺点：只能写四个配置，多了要收费。而且不支持 url 形式的 hosts，比如为了某些需求要同步互联网上的 hosts，它就不行了。\n\n不过如果不是特别重度用户，我觉得还是不错的。\n\n官网：[https://h.ihosts.toolinbox.net/cn](https://h.ihosts.toolinbox.net/cn)\n\n## SwitchHosts (全平台)\n![img](https://cdn0.yukapril.com/blog/2018-08-28-hosts-SwitchHosts.png-wm.black)\n\n这个软件其实就是前端工具，通过 Electron 打包，所以就没有所谓的平台概念了，Windows Mac Linux 均可以。而且开源免费。\n\n虽然是打包的网页软件，但是在 Mac 下速度还是很快的，Windows 下面速度我觉得有点卡。不过好在功能非常强大，主界面可以完成所有操作，包括上面 iHosts 提到的配置切换，主页面可以操作，同样状态栏一样可以！而且支持添加 url 类型的 hosts，还可以设置更新频率。简直完美！\n\n优点：界面漂亮，支持 url 类型 hosts。支持分组，功能强大。\n\n缺点：我在 Windows 下运行有点卡。\n\n官网：[https://oldj.github.io/SwitchHosts](https://oldj.github.io/SwitchHosts)\n\n## Hozz (全平台)\n![img](https://cdn0.yukapril.com/blog/2018-08-28-hosts-Hozz.png-wm.black)\n\n这个软件和上一个一样，都是通过 Electron 打包的，任意平台都可以运行。页面简单漂亮，也支持 url 形式 hosts，貌似还很有名气。\n\n由于 Mac 下需要额外配置权限，还有下载完毕后仍然要更新，而且还更新不下来，所以我觉得 Mac 就不推荐了。\n\n优点：界面漂亮，支持 url 类型 hosts，功能简单。\n\n缺点：功能虽然简单，但是可配置能力比较单一。在我看来，Mac 下体验较差。\n\n官网：[https://blog.zhangruipeng.me/Hozz](https://blog.zhangruipeng.me/Hozz)\n","source":"_posts/2018/2018-08-28-hosts.md","raw":"---\nlayout: post\ntitle: 管理 hosts 的软件 \ndate: 2018-08-28 23:17:00 GMT+0000\ncategories: [软件]\ntags:  [hosts, iHosts, SwitchHosts, Hozz]\n---\n\n公司网络调整之后，外网就不能直接访问内网数据了。需要试用 VPN 访问后，在配置对应的 hosts 解析才可以。\n\n内网还分两套测试环境，这就涉及反复调整 hosts。所以，我也就找了些能管理 hosts 的软件。\n\n<!-- more -->\n\n## iHosts （Mac）\n![img](https://cdn0.yukapril.com/blog/2018-08-28-hosts-iHosts.png-wm.black)\n\n这个是个原生软件，只有 Mac 下才有。默认只提供4个节点（配置）。如图，我用了两个了。此外，我特意截图到了状态栏，他要切换配置选项，需要在这里点击，主程序里面是不行的。\n\n优点：简单，速度快，支持分组，好用。\n\n缺点：只能写四个配置，多了要收费。而且不支持 url 形式的 hosts，比如为了某些需求要同步互联网上的 hosts，它就不行了。\n\n不过如果不是特别重度用户，我觉得还是不错的。\n\n官网：[https://h.ihosts.toolinbox.net/cn](https://h.ihosts.toolinbox.net/cn)\n\n## SwitchHosts (全平台)\n![img](https://cdn0.yukapril.com/blog/2018-08-28-hosts-SwitchHosts.png-wm.black)\n\n这个软件其实就是前端工具，通过 Electron 打包，所以就没有所谓的平台概念了，Windows Mac Linux 均可以。而且开源免费。\n\n虽然是打包的网页软件，但是在 Mac 下速度还是很快的，Windows 下面速度我觉得有点卡。不过好在功能非常强大，主界面可以完成所有操作，包括上面 iHosts 提到的配置切换，主页面可以操作，同样状态栏一样可以！而且支持添加 url 类型的 hosts，还可以设置更新频率。简直完美！\n\n优点：界面漂亮，支持 url 类型 hosts。支持分组，功能强大。\n\n缺点：我在 Windows 下运行有点卡。\n\n官网：[https://oldj.github.io/SwitchHosts](https://oldj.github.io/SwitchHosts)\n\n## Hozz (全平台)\n![img](https://cdn0.yukapril.com/blog/2018-08-28-hosts-Hozz.png-wm.black)\n\n这个软件和上一个一样，都是通过 Electron 打包的，任意平台都可以运行。页面简单漂亮，也支持 url 形式 hosts，貌似还很有名气。\n\n由于 Mac 下需要额外配置权限，还有下载完毕后仍然要更新，而且还更新不下来，所以我觉得 Mac 就不推荐了。\n\n优点：界面漂亮，支持 url 类型 hosts，功能简单。\n\n缺点：功能虽然简单，但是可配置能力比较单一。在我看来，Mac 下体验较差。\n\n官网：[https://blog.zhangruipeng.me/Hozz](https://blog.zhangruipeng.me/Hozz)\n","slug":"2018-2018-08-28-hosts","published":1,"updated":"2019-07-18T17:19:07.183Z","comments":1,"photos":[],"link":"","_id":"cjy8y72sv004ts21dcsgsqxhu","content":"<p>公司网络调整之后，外网就不能直接访问内网数据了。需要试用 VPN 访问后，在配置对应的 hosts 解析才可以。</p>\n<p>内网还分两套测试环境，这就涉及反复调整 hosts。所以，我也就找了些能管理 hosts 的软件。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"iHosts-（Mac）\"><a href=\"#iHosts-（Mac）\" class=\"headerlink\" title=\"iHosts （Mac）\"></a>iHosts （Mac）</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-08-28-hosts-iHosts.png-wm.black\" alt=\"img\"></p>\n<p>这个是个原生软件，只有 Mac 下才有。默认只提供4个节点（配置）。如图，我用了两个了。此外，我特意截图到了状态栏，他要切换配置选项，需要在这里点击，主程序里面是不行的。</p>\n<p>优点：简单，速度快，支持分组，好用。</p>\n<p>缺点：只能写四个配置，多了要收费。而且不支持 url 形式的 hosts，比如为了某些需求要同步互联网上的 hosts，它就不行了。</p>\n<p>不过如果不是特别重度用户，我觉得还是不错的。</p>\n<p>官网：<a href=\"https://h.ihosts.toolinbox.net/cn\" target=\"_blank\" rel=\"noopener\">https://h.ihosts.toolinbox.net/cn</a></p>\n<h2 id=\"SwitchHosts-全平台\"><a href=\"#SwitchHosts-全平台\" class=\"headerlink\" title=\"SwitchHosts (全平台)\"></a>SwitchHosts (全平台)</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-08-28-hosts-SwitchHosts.png-wm.black\" alt=\"img\"></p>\n<p>这个软件其实就是前端工具，通过 Electron 打包，所以就没有所谓的平台概念了，Windows Mac Linux 均可以。而且开源免费。</p>\n<p>虽然是打包的网页软件，但是在 Mac 下速度还是很快的，Windows 下面速度我觉得有点卡。不过好在功能非常强大，主界面可以完成所有操作，包括上面 iHosts 提到的配置切换，主页面可以操作，同样状态栏一样可以！而且支持添加 url 类型的 hosts，还可以设置更新频率。简直完美！</p>\n<p>优点：界面漂亮，支持 url 类型 hosts。支持分组，功能强大。</p>\n<p>缺点：我在 Windows 下运行有点卡。</p>\n<p>官网：<a href=\"https://oldj.github.io/SwitchHosts\" target=\"_blank\" rel=\"noopener\">https://oldj.github.io/SwitchHosts</a></p>\n<h2 id=\"Hozz-全平台\"><a href=\"#Hozz-全平台\" class=\"headerlink\" title=\"Hozz (全平台)\"></a>Hozz (全平台)</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-08-28-hosts-Hozz.png-wm.black\" alt=\"img\"></p>\n<p>这个软件和上一个一样，都是通过 Electron 打包的，任意平台都可以运行。页面简单漂亮，也支持 url 形式 hosts，貌似还很有名气。</p>\n<p>由于 Mac 下需要额外配置权限，还有下载完毕后仍然要更新，而且还更新不下来，所以我觉得 Mac 就不推荐了。</p>\n<p>优点：界面漂亮，支持 url 类型 hosts，功能简单。</p>\n<p>缺点：功能虽然简单，但是可配置能力比较单一。在我看来，Mac 下体验较差。</p>\n<p>官网：<a href=\"https://blog.zhangruipeng.me/Hozz\" target=\"_blank\" rel=\"noopener\">https://blog.zhangruipeng.me/Hozz</a></p>\n","site":{"data":{}},"excerpt":"<p>公司网络调整之后，外网就不能直接访问内网数据了。需要试用 VPN 访问后，在配置对应的 hosts 解析才可以。</p>\n<p>内网还分两套测试环境，这就涉及反复调整 hosts。所以，我也就找了些能管理 hosts 的软件。</p>","more":"<h2 id=\"iHosts-（Mac）\"><a href=\"#iHosts-（Mac）\" class=\"headerlink\" title=\"iHosts （Mac）\"></a>iHosts （Mac）</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-08-28-hosts-iHosts.png-wm.black\" alt=\"img\"></p>\n<p>这个是个原生软件，只有 Mac 下才有。默认只提供4个节点（配置）。如图，我用了两个了。此外，我特意截图到了状态栏，他要切换配置选项，需要在这里点击，主程序里面是不行的。</p>\n<p>优点：简单，速度快，支持分组，好用。</p>\n<p>缺点：只能写四个配置，多了要收费。而且不支持 url 形式的 hosts，比如为了某些需求要同步互联网上的 hosts，它就不行了。</p>\n<p>不过如果不是特别重度用户，我觉得还是不错的。</p>\n<p>官网：<a href=\"https://h.ihosts.toolinbox.net/cn\" target=\"_blank\" rel=\"noopener\">https://h.ihosts.toolinbox.net/cn</a></p>\n<h2 id=\"SwitchHosts-全平台\"><a href=\"#SwitchHosts-全平台\" class=\"headerlink\" title=\"SwitchHosts (全平台)\"></a>SwitchHosts (全平台)</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-08-28-hosts-SwitchHosts.png-wm.black\" alt=\"img\"></p>\n<p>这个软件其实就是前端工具，通过 Electron 打包，所以就没有所谓的平台概念了，Windows Mac Linux 均可以。而且开源免费。</p>\n<p>虽然是打包的网页软件，但是在 Mac 下速度还是很快的，Windows 下面速度我觉得有点卡。不过好在功能非常强大，主界面可以完成所有操作，包括上面 iHosts 提到的配置切换，主页面可以操作，同样状态栏一样可以！而且支持添加 url 类型的 hosts，还可以设置更新频率。简直完美！</p>\n<p>优点：界面漂亮，支持 url 类型 hosts。支持分组，功能强大。</p>\n<p>缺点：我在 Windows 下运行有点卡。</p>\n<p>官网：<a href=\"https://oldj.github.io/SwitchHosts\" target=\"_blank\" rel=\"noopener\">https://oldj.github.io/SwitchHosts</a></p>\n<h2 id=\"Hozz-全平台\"><a href=\"#Hozz-全平台\" class=\"headerlink\" title=\"Hozz (全平台)\"></a>Hozz (全平台)</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-08-28-hosts-Hozz.png-wm.black\" alt=\"img\"></p>\n<p>这个软件和上一个一样，都是通过 Electron 打包的，任意平台都可以运行。页面简单漂亮，也支持 url 形式 hosts，貌似还很有名气。</p>\n<p>由于 Mac 下需要额外配置权限，还有下载完毕后仍然要更新，而且还更新不下来，所以我觉得 Mac 就不推荐了。</p>\n<p>优点：界面漂亮，支持 url 类型 hosts，功能简单。</p>\n<p>缺点：功能虽然简单，但是可配置能力比较单一。在我看来，Mac 下体验较差。</p>\n<p>官网：<a href=\"https://blog.zhangruipeng.me/Hozz\" target=\"_blank\" rel=\"noopener\">https://blog.zhangruipeng.me/Hozz</a></p>"},{"layout":"post","title":"git 常用命令小结","date":"2018-09-12T21:58:00.000Z","_content":"\n用了一段时间，把 git 的常规命令熟悉了一遍，稍微整理出来，方便后续查阅。\n\n<!-- more -->\n\n## git 配置\n> 全局配置文件位置：`~/.gitconfig` 或 `~/.config/git/config` 文件\n> 项目配置文件位置：`.git/config`\n\n```bash\ngit config --global user.name \"John Doe\"\ngit config --global user.email johndoe@example.com\n\n# 配置默认编辑器\ngit config --global core.editor emacs \n# 检查配置信息\ngit config --list\n```\n\n## 远程仓库\n```bash\n# 罗列远程仓库名（默认只有origin一个）\ngit remote\n# 详细罗列远程仓库\ngit remote -v\n# 查看远程仓库分支信息\ngit remote show origin\n# 远程仓库重命名\ngit remote rename pb paul\n# 移除远程仓库\ngit remote rm pb\n# 添加远程仓库\ngit remote add pb https://github.com/paulboone/ticgit\n# 拉取远程仓库\ngit fetch # git fetch origin\n# 推送远程仓库\ngit push # git push origin master\n```\n\n## 仓库建立\n```bash\n# 获取远程仓库代码\ngit clone git://git.kernel.org/pub/scm/git/git.git\n# 本地初始化仓库\ngit init\n```\n\n## 追踪文件\n```bash\n# 追踪所有文件\ngit add . \n# 追踪单一文件\ngit add aa.txt\n# 取消文件追踪\ngit reset HEAD aa.txt\n```\n\n## 文件还原\n```bash\n# 将文件还愿至上次提交状态\ngit checkout -- aa.txt\n```\n\n## 代码提交\n```bash\n# 默认提交，要求填写提交消息\ngit commit \n# 带有消息的提交\ngit commit -m \"fix bugs\"\n# 将所有修改的文件进行追踪并提交\ngit commit -am \"fix bugs\"\n```\n\n## 代码状态\n```bash\n# 默认格式\ngit status\n# 紧凑格式\ngit status -s # --short\n```\n\n## 代码比较\n```bash\n# 查看尚未暂存的文件更新了哪些部分\ngit diff\n# 查看已暂存的将要添加到下次提交里的内容\ngit diff --staged # 或 --cached\n# 检查要提交的代码\ngit diff --check\n```\n\n## 提交历史\n```bash\n# 默认格式\ngit log\n# 附带上每次修改的具体内容\ngit log -p\n# 控制输出条数\ngit log -5\n# 每条记录显示总结\ngit log --stat\n# 显示效果（一行）\ngit log --pretty=oneline # 或 git log --oneline\n# 显示图表\ngit log --graph\n# 查阅某条记录详情\ngit show 300b5c\n\n# 查看master分支，但不含feature1 分支\n# 分支顺序无所谓\ngit log master ^feature1 # 支持多个分支\ngit log master not feature1 # 支持多个分支\ngit log master feature1.. # 只能两个分支\n```\n\n## 撤销操作\n```bash\n# 追加文件提交或修改上次提交消息\ngit commit --amend\n```\n\n## 移除文件\n```bash\ngit rm aa.txt\n# 如果该文件在暂存区，则需要加参数 -f\ngit rm -f aa.txt\n# 如果仅仅是取消追踪\ngit rm --cached aa.txt\n```\n\n## 打标签\n```bash\n# 列出标签\ngit tag\n# 列出标签（过滤）\ngit tag -l 'v1.8.5*' # --list\n# 打轻量标签\ngit tag v1.4\n# 打附注标签\ngit tag -a v1.4 -m 'my version 1.4' # --annotate\n# 打附注标签（指定提交）\ngit tag -a v1.2 9fceb02\n# 显示标签详情\ngit show v1.4\n\n# 推送标签\ngit push origin v1.5\n# 推送所有标签\ngit push origin --tags\n```\n\n## 分支操作\n```bash\n# 查看分支\ngit branch\n# 查看分支（带有最后提交）\ngit branch -v\n# 查看那些分支已经合并到主干（带有星号）\ngit branch --merged\n# 查看那些分支未合并到主干\ngit branch --no-merged\n# 切换分支\ngit checkout test\n# 创建并切换到分支\ngit checkout -b test \n# 创建并切换到分支（相当于下面两条命令）\ngit branch test\ngit checkout test\n# 删除分支\ngit branch -d test\n# 强行删除分支（如果分支代码没有被合并）\ngit branch -D test\n```\n\n## 变基\n```bash\n# 切换到需要变基分支\ngit checkout experiment\n# 执行变基，提取特征\ngit rebase master\n# 回到主干\ngit checkout master\n# 代码合并\ngit merge experiment\n\n# 或者\ngit rebase master experiment\ngit checkout master\ngit merge experiment\n```\n\n## 代码合并\n```bash\n# 将其他分支代码合并到当前分支\ngit merge test\n# 退出合并\ngit merge --abort\n```\n\n## 储藏\n```bash\n# 储藏（追踪的代码）\ngit stash\n# 储藏（追踪和未追踪的代码）\ngit stash -u\n# 查看储藏记录\ngit stash list\n# 提取最近一个储藏（储藏被删除）\ngit stash pop \n# 提取最近一个储藏（储藏不被删除）\ngit stash apply\n# 提取指定储藏（储藏不被删除）\ngit stash apply stash@{2}\n# 删除指定储藏\ngit stash drop stash@{0}\n# 把储藏保存为分支\ngit stash branch stash-test\n```\n\n## 查阅操作记录\n```bash\ngit reflog\n```\n\n## 版本写法\n```bash\n# 当前最新提交\ngit show HEAD\n# 上一次提交\ngit show HEAD~1\ngit show HEAD^\n# 上两次提交\ngit show HEAD~2\ngit show HEAD^^\n# 第一次提交\ngit show HEAD@{1}\n```\n\n## 打包\n```bash\n# 项目打包\ngit bundle create repo.bundle HEAD master\n```\n\n--END--\n","source":"_posts/2018/2018-09-12-git.md","raw":"---\nlayout: post\ntitle: git 常用命令小结\ndate: 2018-09-12 21:58:00 GMT+0000\ncategories: [代码]\ntags:  [git]\n---\n\n用了一段时间，把 git 的常规命令熟悉了一遍，稍微整理出来，方便后续查阅。\n\n<!-- more -->\n\n## git 配置\n> 全局配置文件位置：`~/.gitconfig` 或 `~/.config/git/config` 文件\n> 项目配置文件位置：`.git/config`\n\n```bash\ngit config --global user.name \"John Doe\"\ngit config --global user.email johndoe@example.com\n\n# 配置默认编辑器\ngit config --global core.editor emacs \n# 检查配置信息\ngit config --list\n```\n\n## 远程仓库\n```bash\n# 罗列远程仓库名（默认只有origin一个）\ngit remote\n# 详细罗列远程仓库\ngit remote -v\n# 查看远程仓库分支信息\ngit remote show origin\n# 远程仓库重命名\ngit remote rename pb paul\n# 移除远程仓库\ngit remote rm pb\n# 添加远程仓库\ngit remote add pb https://github.com/paulboone/ticgit\n# 拉取远程仓库\ngit fetch # git fetch origin\n# 推送远程仓库\ngit push # git push origin master\n```\n\n## 仓库建立\n```bash\n# 获取远程仓库代码\ngit clone git://git.kernel.org/pub/scm/git/git.git\n# 本地初始化仓库\ngit init\n```\n\n## 追踪文件\n```bash\n# 追踪所有文件\ngit add . \n# 追踪单一文件\ngit add aa.txt\n# 取消文件追踪\ngit reset HEAD aa.txt\n```\n\n## 文件还原\n```bash\n# 将文件还愿至上次提交状态\ngit checkout -- aa.txt\n```\n\n## 代码提交\n```bash\n# 默认提交，要求填写提交消息\ngit commit \n# 带有消息的提交\ngit commit -m \"fix bugs\"\n# 将所有修改的文件进行追踪并提交\ngit commit -am \"fix bugs\"\n```\n\n## 代码状态\n```bash\n# 默认格式\ngit status\n# 紧凑格式\ngit status -s # --short\n```\n\n## 代码比较\n```bash\n# 查看尚未暂存的文件更新了哪些部分\ngit diff\n# 查看已暂存的将要添加到下次提交里的内容\ngit diff --staged # 或 --cached\n# 检查要提交的代码\ngit diff --check\n```\n\n## 提交历史\n```bash\n# 默认格式\ngit log\n# 附带上每次修改的具体内容\ngit log -p\n# 控制输出条数\ngit log -5\n# 每条记录显示总结\ngit log --stat\n# 显示效果（一行）\ngit log --pretty=oneline # 或 git log --oneline\n# 显示图表\ngit log --graph\n# 查阅某条记录详情\ngit show 300b5c\n\n# 查看master分支，但不含feature1 分支\n# 分支顺序无所谓\ngit log master ^feature1 # 支持多个分支\ngit log master not feature1 # 支持多个分支\ngit log master feature1.. # 只能两个分支\n```\n\n## 撤销操作\n```bash\n# 追加文件提交或修改上次提交消息\ngit commit --amend\n```\n\n## 移除文件\n```bash\ngit rm aa.txt\n# 如果该文件在暂存区，则需要加参数 -f\ngit rm -f aa.txt\n# 如果仅仅是取消追踪\ngit rm --cached aa.txt\n```\n\n## 打标签\n```bash\n# 列出标签\ngit tag\n# 列出标签（过滤）\ngit tag -l 'v1.8.5*' # --list\n# 打轻量标签\ngit tag v1.4\n# 打附注标签\ngit tag -a v1.4 -m 'my version 1.4' # --annotate\n# 打附注标签（指定提交）\ngit tag -a v1.2 9fceb02\n# 显示标签详情\ngit show v1.4\n\n# 推送标签\ngit push origin v1.5\n# 推送所有标签\ngit push origin --tags\n```\n\n## 分支操作\n```bash\n# 查看分支\ngit branch\n# 查看分支（带有最后提交）\ngit branch -v\n# 查看那些分支已经合并到主干（带有星号）\ngit branch --merged\n# 查看那些分支未合并到主干\ngit branch --no-merged\n# 切换分支\ngit checkout test\n# 创建并切换到分支\ngit checkout -b test \n# 创建并切换到分支（相当于下面两条命令）\ngit branch test\ngit checkout test\n# 删除分支\ngit branch -d test\n# 强行删除分支（如果分支代码没有被合并）\ngit branch -D test\n```\n\n## 变基\n```bash\n# 切换到需要变基分支\ngit checkout experiment\n# 执行变基，提取特征\ngit rebase master\n# 回到主干\ngit checkout master\n# 代码合并\ngit merge experiment\n\n# 或者\ngit rebase master experiment\ngit checkout master\ngit merge experiment\n```\n\n## 代码合并\n```bash\n# 将其他分支代码合并到当前分支\ngit merge test\n# 退出合并\ngit merge --abort\n```\n\n## 储藏\n```bash\n# 储藏（追踪的代码）\ngit stash\n# 储藏（追踪和未追踪的代码）\ngit stash -u\n# 查看储藏记录\ngit stash list\n# 提取最近一个储藏（储藏被删除）\ngit stash pop \n# 提取最近一个储藏（储藏不被删除）\ngit stash apply\n# 提取指定储藏（储藏不被删除）\ngit stash apply stash@{2}\n# 删除指定储藏\ngit stash drop stash@{0}\n# 把储藏保存为分支\ngit stash branch stash-test\n```\n\n## 查阅操作记录\n```bash\ngit reflog\n```\n\n## 版本写法\n```bash\n# 当前最新提交\ngit show HEAD\n# 上一次提交\ngit show HEAD~1\ngit show HEAD^\n# 上两次提交\ngit show HEAD~2\ngit show HEAD^^\n# 第一次提交\ngit show HEAD@{1}\n```\n\n## 打包\n```bash\n# 项目打包\ngit bundle create repo.bundle HEAD master\n```\n\n--END--\n","slug":"2018-2018-09-12-git","published":1,"updated":"2019-07-18T17:19:07.320Z","comments":1,"photos":[],"link":"","_id":"cjy8y72sx004xs21dgd61u1jv","content":"<p>用了一段时间，把 git 的常规命令熟悉了一遍，稍微整理出来，方便后续查阅。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"git-配置\"><a href=\"#git-配置\" class=\"headerlink\" title=\"git 配置\"></a>git 配置</h2><blockquote>\n<p>全局配置文件位置：<code>~/.gitconfig</code> 或 <code>~/.config/git/config</code> 文件<br>项目配置文件位置：<code>.git/config</code></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">\"John Doe\"</span></span><br><span class=\"line\">git config --global user.email johndoe@example.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置默认编辑器</span></span><br><span class=\"line\">git config --global core.editor emacs </span><br><span class=\"line\"><span class=\"comment\"># 检查配置信息</span></span><br><span class=\"line\">git config --list</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 罗列远程仓库名（默认只有origin一个）</span></span><br><span class=\"line\">git remote</span><br><span class=\"line\"><span class=\"comment\"># 详细罗列远程仓库</span></span><br><span class=\"line\">git remote -v</span><br><span class=\"line\"><span class=\"comment\"># 查看远程仓库分支信息</span></span><br><span class=\"line\">git remote show origin</span><br><span class=\"line\"><span class=\"comment\"># 远程仓库重命名</span></span><br><span class=\"line\">git remote rename pb paul</span><br><span class=\"line\"><span class=\"comment\"># 移除远程仓库</span></span><br><span class=\"line\">git remote rm pb</span><br><span class=\"line\"><span class=\"comment\"># 添加远程仓库</span></span><br><span class=\"line\">git remote add pb https://github.com/paulboone/ticgit</span><br><span class=\"line\"><span class=\"comment\"># 拉取远程仓库</span></span><br><span class=\"line\">git fetch <span class=\"comment\"># git fetch origin</span></span><br><span class=\"line\"><span class=\"comment\"># 推送远程仓库</span></span><br><span class=\"line\">git push <span class=\"comment\"># git push origin master</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"仓库建立\"><a href=\"#仓库建立\" class=\"headerlink\" title=\"仓库建立\"></a>仓库建立</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取远程仓库代码</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> git://git.kernel.org/pub/scm/git/git.git</span><br><span class=\"line\"><span class=\"comment\"># 本地初始化仓库</span></span><br><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"追踪文件\"><a href=\"#追踪文件\" class=\"headerlink\" title=\"追踪文件\"></a>追踪文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 追踪所有文件</span></span><br><span class=\"line\">git add . </span><br><span class=\"line\"><span class=\"comment\"># 追踪单一文件</span></span><br><span class=\"line\">git add aa.txt</span><br><span class=\"line\"><span class=\"comment\"># 取消文件追踪</span></span><br><span class=\"line\">git reset HEAD aa.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件还原\"><a href=\"#文件还原\" class=\"headerlink\" title=\"文件还原\"></a>文件还原</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将文件还愿至上次提交状态</span></span><br><span class=\"line\">git checkout -- aa.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码提交\"><a href=\"#代码提交\" class=\"headerlink\" title=\"代码提交\"></a>代码提交</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认提交，要求填写提交消息</span></span><br><span class=\"line\">git commit </span><br><span class=\"line\"><span class=\"comment\"># 带有消息的提交</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"fix bugs\"</span></span><br><span class=\"line\"><span class=\"comment\"># 将所有修改的文件进行追踪并提交</span></span><br><span class=\"line\">git commit -am <span class=\"string\">\"fix bugs\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码状态\"><a href=\"#代码状态\" class=\"headerlink\" title=\"代码状态\"></a>代码状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认格式</span></span><br><span class=\"line\">git status</span><br><span class=\"line\"><span class=\"comment\"># 紧凑格式</span></span><br><span class=\"line\">git status -s <span class=\"comment\"># --short</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码比较\"><a href=\"#代码比较\" class=\"headerlink\" title=\"代码比较\"></a>代码比较</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看尚未暂存的文件更新了哪些部分</span></span><br><span class=\"line\">git diff</span><br><span class=\"line\"><span class=\"comment\"># 查看已暂存的将要添加到下次提交里的内容</span></span><br><span class=\"line\">git diff --staged <span class=\"comment\"># 或 --cached</span></span><br><span class=\"line\"><span class=\"comment\"># 检查要提交的代码</span></span><br><span class=\"line\">git diff --check</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"提交历史\"><a href=\"#提交历史\" class=\"headerlink\" title=\"提交历史\"></a>提交历史</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认格式</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span></span><br><span class=\"line\"><span class=\"comment\"># 附带上每次修改的具体内容</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -p</span><br><span class=\"line\"><span class=\"comment\"># 控制输出条数</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -5</span><br><span class=\"line\"><span class=\"comment\"># 每条记录显示总结</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span></span><br><span class=\"line\"><span class=\"comment\"># 显示效果（一行）</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --pretty=oneline <span class=\"comment\"># 或 git log --oneline</span></span><br><span class=\"line\"><span class=\"comment\"># 显示图表</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --graph</span><br><span class=\"line\"><span class=\"comment\"># 查阅某条记录详情</span></span><br><span class=\"line\">git show 300b5c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看master分支，但不含feature1 分支</span></span><br><span class=\"line\"><span class=\"comment\"># 分支顺序无所谓</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> master ^feature1 <span class=\"comment\"># 支持多个分支</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> master not feature1 <span class=\"comment\"># 支持多个分支</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> master feature1.. <span class=\"comment\"># 只能两个分支</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"撤销操作\"><a href=\"#撤销操作\" class=\"headerlink\" title=\"撤销操作\"></a>撤销操作</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 追加文件提交或修改上次提交消息</span></span><br><span class=\"line\">git commit --amend</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"移除文件\"><a href=\"#移除文件\" class=\"headerlink\" title=\"移除文件\"></a>移除文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm aa.txt</span><br><span class=\"line\"><span class=\"comment\"># 如果该文件在暂存区，则需要加参数 -f</span></span><br><span class=\"line\">git rm -f aa.txt</span><br><span class=\"line\"><span class=\"comment\"># 如果仅仅是取消追踪</span></span><br><span class=\"line\">git rm --cached aa.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打标签\"><a href=\"#打标签\" class=\"headerlink\" title=\"打标签\"></a>打标签</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出标签</span></span><br><span class=\"line\">git tag</span><br><span class=\"line\"><span class=\"comment\"># 列出标签（过滤）</span></span><br><span class=\"line\">git tag -l <span class=\"string\">'v1.8.5*'</span> <span class=\"comment\"># --list</span></span><br><span class=\"line\"><span class=\"comment\"># 打轻量标签</span></span><br><span class=\"line\">git tag v1.4</span><br><span class=\"line\"><span class=\"comment\"># 打附注标签</span></span><br><span class=\"line\">git tag -a v1.4 -m <span class=\"string\">'my version 1.4'</span> <span class=\"comment\"># --annotate</span></span><br><span class=\"line\"><span class=\"comment\"># 打附注标签（指定提交）</span></span><br><span class=\"line\">git tag -a v1.2 9fceb02</span><br><span class=\"line\"><span class=\"comment\"># 显示标签详情</span></span><br><span class=\"line\">git show v1.4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送标签</span></span><br><span class=\"line\">git push origin v1.5</span><br><span class=\"line\"><span class=\"comment\"># 推送所有标签</span></span><br><span class=\"line\">git push origin --tags</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分支操作\"><a href=\"#分支操作\" class=\"headerlink\" title=\"分支操作\"></a>分支操作</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看分支</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\"><span class=\"comment\"># 查看分支（带有最后提交）</span></span><br><span class=\"line\">git branch -v</span><br><span class=\"line\"><span class=\"comment\"># 查看那些分支已经合并到主干（带有星号）</span></span><br><span class=\"line\">git branch --merged</span><br><span class=\"line\"><span class=\"comment\"># 查看那些分支未合并到主干</span></span><br><span class=\"line\">git branch --no-merged</span><br><span class=\"line\"><span class=\"comment\"># 切换分支</span></span><br><span class=\"line\">git checkout <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\"># 创建并切换到分支</span></span><br><span class=\"line\">git checkout -b <span class=\"built_in\">test</span> </span><br><span class=\"line\"><span class=\"comment\"># 创建并切换到分支（相当于下面两条命令）</span></span><br><span class=\"line\">git branch <span class=\"built_in\">test</span></span><br><span class=\"line\">git checkout <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\"># 删除分支</span></span><br><span class=\"line\">git branch -d <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\"># 强行删除分支（如果分支代码没有被合并）</span></span><br><span class=\"line\">git branch -D <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变基\"><a href=\"#变基\" class=\"headerlink\" title=\"变基\"></a>变基</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换到需要变基分支</span></span><br><span class=\"line\">git checkout experiment</span><br><span class=\"line\"><span class=\"comment\"># 执行变基，提取特征</span></span><br><span class=\"line\">git rebase master</span><br><span class=\"line\"><span class=\"comment\"># 回到主干</span></span><br><span class=\"line\">git checkout master</span><br><span class=\"line\"><span class=\"comment\"># 代码合并</span></span><br><span class=\"line\">git merge experiment</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">git rebase master experiment</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge experiment</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码合并\"><a href=\"#代码合并\" class=\"headerlink\" title=\"代码合并\"></a>代码合并</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将其他分支代码合并到当前分支</span></span><br><span class=\"line\">git merge <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\"># 退出合并</span></span><br><span class=\"line\">git merge --abort</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"储藏\"><a href=\"#储藏\" class=\"headerlink\" title=\"储藏\"></a>储藏</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 储藏（追踪的代码）</span></span><br><span class=\"line\">git stash</span><br><span class=\"line\"><span class=\"comment\"># 储藏（追踪和未追踪的代码）</span></span><br><span class=\"line\">git stash -u</span><br><span class=\"line\"><span class=\"comment\"># 查看储藏记录</span></span><br><span class=\"line\">git stash list</span><br><span class=\"line\"><span class=\"comment\"># 提取最近一个储藏（储藏被删除）</span></span><br><span class=\"line\">git stash pop </span><br><span class=\"line\"><span class=\"comment\"># 提取最近一个储藏（储藏不被删除）</span></span><br><span class=\"line\">git stash apply</span><br><span class=\"line\"><span class=\"comment\"># 提取指定储藏（储藏不被删除）</span></span><br><span class=\"line\">git stash apply stash@&#123;2&#125;</span><br><span class=\"line\"><span class=\"comment\"># 删除指定储藏</span></span><br><span class=\"line\">git stash drop stash@&#123;0&#125;</span><br><span class=\"line\"><span class=\"comment\"># 把储藏保存为分支</span></span><br><span class=\"line\">git stash branch stash-test</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查阅操作记录\"><a href=\"#查阅操作记录\" class=\"headerlink\" title=\"查阅操作记录\"></a>查阅操作记录</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"版本写法\"><a href=\"#版本写法\" class=\"headerlink\" title=\"版本写法\"></a>版本写法</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 当前最新提交</span></span><br><span class=\"line\">git show HEAD</span><br><span class=\"line\"><span class=\"comment\"># 上一次提交</span></span><br><span class=\"line\">git show HEAD~1</span><br><span class=\"line\">git show HEAD^</span><br><span class=\"line\"><span class=\"comment\"># 上两次提交</span></span><br><span class=\"line\">git show HEAD~2</span><br><span class=\"line\">git show HEAD^^</span><br><span class=\"line\"><span class=\"comment\"># 第一次提交</span></span><br><span class=\"line\">git show HEAD@&#123;1&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 项目打包</span></span><br><span class=\"line\">git bundle create repo.bundle HEAD master</span><br></pre></td></tr></table></figure>\n\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>用了一段时间，把 git 的常规命令熟悉了一遍，稍微整理出来，方便后续查阅。</p>","more":"<h2 id=\"git-配置\"><a href=\"#git-配置\" class=\"headerlink\" title=\"git 配置\"></a>git 配置</h2><blockquote>\n<p>全局配置文件位置：<code>~/.gitconfig</code> 或 <code>~/.config/git/config</code> 文件<br>项目配置文件位置：<code>.git/config</code></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">\"John Doe\"</span></span><br><span class=\"line\">git config --global user.email johndoe@example.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置默认编辑器</span></span><br><span class=\"line\">git config --global core.editor emacs </span><br><span class=\"line\"><span class=\"comment\"># 检查配置信息</span></span><br><span class=\"line\">git config --list</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 罗列远程仓库名（默认只有origin一个）</span></span><br><span class=\"line\">git remote</span><br><span class=\"line\"><span class=\"comment\"># 详细罗列远程仓库</span></span><br><span class=\"line\">git remote -v</span><br><span class=\"line\"><span class=\"comment\"># 查看远程仓库分支信息</span></span><br><span class=\"line\">git remote show origin</span><br><span class=\"line\"><span class=\"comment\"># 远程仓库重命名</span></span><br><span class=\"line\">git remote rename pb paul</span><br><span class=\"line\"><span class=\"comment\"># 移除远程仓库</span></span><br><span class=\"line\">git remote rm pb</span><br><span class=\"line\"><span class=\"comment\"># 添加远程仓库</span></span><br><span class=\"line\">git remote add pb https://github.com/paulboone/ticgit</span><br><span class=\"line\"><span class=\"comment\"># 拉取远程仓库</span></span><br><span class=\"line\">git fetch <span class=\"comment\"># git fetch origin</span></span><br><span class=\"line\"><span class=\"comment\"># 推送远程仓库</span></span><br><span class=\"line\">git push <span class=\"comment\"># git push origin master</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"仓库建立\"><a href=\"#仓库建立\" class=\"headerlink\" title=\"仓库建立\"></a>仓库建立</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取远程仓库代码</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> git://git.kernel.org/pub/scm/git/git.git</span><br><span class=\"line\"><span class=\"comment\"># 本地初始化仓库</span></span><br><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"追踪文件\"><a href=\"#追踪文件\" class=\"headerlink\" title=\"追踪文件\"></a>追踪文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 追踪所有文件</span></span><br><span class=\"line\">git add . </span><br><span class=\"line\"><span class=\"comment\"># 追踪单一文件</span></span><br><span class=\"line\">git add aa.txt</span><br><span class=\"line\"><span class=\"comment\"># 取消文件追踪</span></span><br><span class=\"line\">git reset HEAD aa.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件还原\"><a href=\"#文件还原\" class=\"headerlink\" title=\"文件还原\"></a>文件还原</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将文件还愿至上次提交状态</span></span><br><span class=\"line\">git checkout -- aa.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码提交\"><a href=\"#代码提交\" class=\"headerlink\" title=\"代码提交\"></a>代码提交</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认提交，要求填写提交消息</span></span><br><span class=\"line\">git commit </span><br><span class=\"line\"><span class=\"comment\"># 带有消息的提交</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"fix bugs\"</span></span><br><span class=\"line\"><span class=\"comment\"># 将所有修改的文件进行追踪并提交</span></span><br><span class=\"line\">git commit -am <span class=\"string\">\"fix bugs\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码状态\"><a href=\"#代码状态\" class=\"headerlink\" title=\"代码状态\"></a>代码状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认格式</span></span><br><span class=\"line\">git status</span><br><span class=\"line\"><span class=\"comment\"># 紧凑格式</span></span><br><span class=\"line\">git status -s <span class=\"comment\"># --short</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码比较\"><a href=\"#代码比较\" class=\"headerlink\" title=\"代码比较\"></a>代码比较</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看尚未暂存的文件更新了哪些部分</span></span><br><span class=\"line\">git diff</span><br><span class=\"line\"><span class=\"comment\"># 查看已暂存的将要添加到下次提交里的内容</span></span><br><span class=\"line\">git diff --staged <span class=\"comment\"># 或 --cached</span></span><br><span class=\"line\"><span class=\"comment\"># 检查要提交的代码</span></span><br><span class=\"line\">git diff --check</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"提交历史\"><a href=\"#提交历史\" class=\"headerlink\" title=\"提交历史\"></a>提交历史</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认格式</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span></span><br><span class=\"line\"><span class=\"comment\"># 附带上每次修改的具体内容</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -p</span><br><span class=\"line\"><span class=\"comment\"># 控制输出条数</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -5</span><br><span class=\"line\"><span class=\"comment\"># 每条记录显示总结</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span></span><br><span class=\"line\"><span class=\"comment\"># 显示效果（一行）</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --pretty=oneline <span class=\"comment\"># 或 git log --oneline</span></span><br><span class=\"line\"><span class=\"comment\"># 显示图表</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --graph</span><br><span class=\"line\"><span class=\"comment\"># 查阅某条记录详情</span></span><br><span class=\"line\">git show 300b5c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看master分支，但不含feature1 分支</span></span><br><span class=\"line\"><span class=\"comment\"># 分支顺序无所谓</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> master ^feature1 <span class=\"comment\"># 支持多个分支</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> master not feature1 <span class=\"comment\"># 支持多个分支</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> master feature1.. <span class=\"comment\"># 只能两个分支</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"撤销操作\"><a href=\"#撤销操作\" class=\"headerlink\" title=\"撤销操作\"></a>撤销操作</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 追加文件提交或修改上次提交消息</span></span><br><span class=\"line\">git commit --amend</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"移除文件\"><a href=\"#移除文件\" class=\"headerlink\" title=\"移除文件\"></a>移除文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm aa.txt</span><br><span class=\"line\"><span class=\"comment\"># 如果该文件在暂存区，则需要加参数 -f</span></span><br><span class=\"line\">git rm -f aa.txt</span><br><span class=\"line\"><span class=\"comment\"># 如果仅仅是取消追踪</span></span><br><span class=\"line\">git rm --cached aa.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打标签\"><a href=\"#打标签\" class=\"headerlink\" title=\"打标签\"></a>打标签</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出标签</span></span><br><span class=\"line\">git tag</span><br><span class=\"line\"><span class=\"comment\"># 列出标签（过滤）</span></span><br><span class=\"line\">git tag -l <span class=\"string\">'v1.8.5*'</span> <span class=\"comment\"># --list</span></span><br><span class=\"line\"><span class=\"comment\"># 打轻量标签</span></span><br><span class=\"line\">git tag v1.4</span><br><span class=\"line\"><span class=\"comment\"># 打附注标签</span></span><br><span class=\"line\">git tag -a v1.4 -m <span class=\"string\">'my version 1.4'</span> <span class=\"comment\"># --annotate</span></span><br><span class=\"line\"><span class=\"comment\"># 打附注标签（指定提交）</span></span><br><span class=\"line\">git tag -a v1.2 9fceb02</span><br><span class=\"line\"><span class=\"comment\"># 显示标签详情</span></span><br><span class=\"line\">git show v1.4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送标签</span></span><br><span class=\"line\">git push origin v1.5</span><br><span class=\"line\"><span class=\"comment\"># 推送所有标签</span></span><br><span class=\"line\">git push origin --tags</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分支操作\"><a href=\"#分支操作\" class=\"headerlink\" title=\"分支操作\"></a>分支操作</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看分支</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\"><span class=\"comment\"># 查看分支（带有最后提交）</span></span><br><span class=\"line\">git branch -v</span><br><span class=\"line\"><span class=\"comment\"># 查看那些分支已经合并到主干（带有星号）</span></span><br><span class=\"line\">git branch --merged</span><br><span class=\"line\"><span class=\"comment\"># 查看那些分支未合并到主干</span></span><br><span class=\"line\">git branch --no-merged</span><br><span class=\"line\"><span class=\"comment\"># 切换分支</span></span><br><span class=\"line\">git checkout <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\"># 创建并切换到分支</span></span><br><span class=\"line\">git checkout -b <span class=\"built_in\">test</span> </span><br><span class=\"line\"><span class=\"comment\"># 创建并切换到分支（相当于下面两条命令）</span></span><br><span class=\"line\">git branch <span class=\"built_in\">test</span></span><br><span class=\"line\">git checkout <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\"># 删除分支</span></span><br><span class=\"line\">git branch -d <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\"># 强行删除分支（如果分支代码没有被合并）</span></span><br><span class=\"line\">git branch -D <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变基\"><a href=\"#变基\" class=\"headerlink\" title=\"变基\"></a>变基</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换到需要变基分支</span></span><br><span class=\"line\">git checkout experiment</span><br><span class=\"line\"><span class=\"comment\"># 执行变基，提取特征</span></span><br><span class=\"line\">git rebase master</span><br><span class=\"line\"><span class=\"comment\"># 回到主干</span></span><br><span class=\"line\">git checkout master</span><br><span class=\"line\"><span class=\"comment\"># 代码合并</span></span><br><span class=\"line\">git merge experiment</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">git rebase master experiment</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge experiment</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码合并\"><a href=\"#代码合并\" class=\"headerlink\" title=\"代码合并\"></a>代码合并</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将其他分支代码合并到当前分支</span></span><br><span class=\"line\">git merge <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\"># 退出合并</span></span><br><span class=\"line\">git merge --abort</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"储藏\"><a href=\"#储藏\" class=\"headerlink\" title=\"储藏\"></a>储藏</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 储藏（追踪的代码）</span></span><br><span class=\"line\">git stash</span><br><span class=\"line\"><span class=\"comment\"># 储藏（追踪和未追踪的代码）</span></span><br><span class=\"line\">git stash -u</span><br><span class=\"line\"><span class=\"comment\"># 查看储藏记录</span></span><br><span class=\"line\">git stash list</span><br><span class=\"line\"><span class=\"comment\"># 提取最近一个储藏（储藏被删除）</span></span><br><span class=\"line\">git stash pop </span><br><span class=\"line\"><span class=\"comment\"># 提取最近一个储藏（储藏不被删除）</span></span><br><span class=\"line\">git stash apply</span><br><span class=\"line\"><span class=\"comment\"># 提取指定储藏（储藏不被删除）</span></span><br><span class=\"line\">git stash apply stash@&#123;2&#125;</span><br><span class=\"line\"><span class=\"comment\"># 删除指定储藏</span></span><br><span class=\"line\">git stash drop stash@&#123;0&#125;</span><br><span class=\"line\"><span class=\"comment\"># 把储藏保存为分支</span></span><br><span class=\"line\">git stash branch stash-test</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查阅操作记录\"><a href=\"#查阅操作记录\" class=\"headerlink\" title=\"查阅操作记录\"></a>查阅操作记录</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"版本写法\"><a href=\"#版本写法\" class=\"headerlink\" title=\"版本写法\"></a>版本写法</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 当前最新提交</span></span><br><span class=\"line\">git show HEAD</span><br><span class=\"line\"><span class=\"comment\"># 上一次提交</span></span><br><span class=\"line\">git show HEAD~1</span><br><span class=\"line\">git show HEAD^</span><br><span class=\"line\"><span class=\"comment\"># 上两次提交</span></span><br><span class=\"line\">git show HEAD~2</span><br><span class=\"line\">git show HEAD^^</span><br><span class=\"line\"><span class=\"comment\"># 第一次提交</span></span><br><span class=\"line\">git show HEAD@&#123;1&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 项目打包</span></span><br><span class=\"line\">git bundle create repo.bundle HEAD master</span><br></pre></td></tr></table></figure>\n\n<p>–END–</p>"},{"layout":"post","title":"入手明基 ScreenBar Plus 台灯","date":"2018-10-21T14:15:00.000Z","_content":"\n十一期间正好看到一则推荐（还真不是广告），就去天猫逛了下，觉得正合适。对于明基这个品牌，算是早有耳闻了，做工优秀，外观漂亮，关键是上档次。嗯，是非常实用。\n\n一直没有下手买台面台灯，一方面公司还能凑合有点灯光，家里也还凑合用大灯。这不赶巧，公司的管灯坏了1根，一直没人修，最后没几天不知啥情况，剩余的两根也坏了。我的工位一到下午四点就变成了夜间模式。\n\n<!-- more -->\n\n就这样，十一最后两天之内，陆续买了两个明基 Screen Plus 灯管。是的，他就是个灯管而已～\n\n此外，明基最出名的台灯系列，应该是 WiT。可能说名字你不清楚，但是如果看过晒办公桌台灯或是推荐台灯啥的文章，估计你能见到过，大弧形设计非常有特色。当然，这个系列也有落地灯。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-1.jpg-wm.white)\n\n## ScreenBar 系列\n\n按照我的惯例，先说说这个系列的产品情况。\n\n明基的显示器挂灯，目前有两款。老款的 ScreenBar 和新款的 ScreenBar Plus。这两款通过对比参数来看，除了操控方式不同外，灯体参数是完全一致的。但是新款支持自动感应功能，意味着可以一键 “AUTO” 解决光线问题。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-2.jpg-wm.white)\n\n老款 ScreenBar 操作按键在灯管中间。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-3.jpg-wm.white)\n\n而新款 ScreenBar Plus 是在电线上额外增加一个控制器。\n\n价格上，新款在 1000 元左右。老款稍微便宜 100 元左右。如果想买的话，建议买新款。老款按键在灯体上，对于大尺寸显示器（27寸）我是坐着够不到开关的。所以多一个控制器，更方便，而且带有自动感应灯光功能。\n\n## ScreenBar Plus 开箱\n\n买的东西最怕开箱。拍照太差劲，千元灯瞬间变成百元灯。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-4.jpg-wm.white)\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-5.jpg-wm.white)\n\n包装很紧，很难拽出来。背面有安装和使用说明，嗯，操作太简单了，所以根本不需要额外纸张说明。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-6.jpg-wm.white)\n\n新款 ScreenBar Plus 包含 3 大件：主灯体、灯架、带有电线的控制器。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-7.jpg-wm.white)\n\n主灯体特写。宽度 45 厘米。LED 贴片暖色/冷色交替安装。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-8.jpg-wm.white)\n\n灯架部分。配重比起灯体算是很沉了。要紧紧的挂在显示器上。前面需要卡住显示器 6 毫米左右。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-9.jpg-wm.white)\n\n控制器特写。使用 USB 供电。我的三星显示器带有 USB，直接插上就行。不带的显示器可以找个带有 USB 的插座插上。据说不能使用延长线，怕电力不足。\n\n买回来在旋钮上带有一个卡片，应该是防止搬运期间发生摩擦吧。自己可以拽出来。\n\n## ScreenBar Plus 上手\n\n由于灯体宽度已经达到了 45 厘米，所以只要你的显示器是21寸以上，基本上都不会比灯体窄。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-10.jpg-wm.white)\n\n我的三星 27 寸显示器效果\n\n挂件需要卡在显示器前面，所以为了保证卡子不遮挡屏幕，上部屏幕边框至少要有 6 毫米左右。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-11.jpg-wm.white)\n\n中间部分特写\n\n同时官方说显示器的厚度要在 1-3 厘米，但是看网上说，0.5 厘米显示器也可以的。所以我估计正常的显示器，厚度是不需要考虑的。\n\n由于仅仅是挂在中间，所以曲面显示器也不会有问题。\n\n还是要重申下。如果是带有摄像头的显示器，比如 iMac，建议关注下尺寸。前面他需要下沉 6 毫米左右。iMac 是正好的。\n\n### 操作\n\nScreenBar Plus 操作起来，非常简单。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-12.jpg-wm.white)\n\n控制器能按能显示的就这么几个：中间大旋钮，左右两个按钮，以及 2 个指示灯和一个顶部光线感应器。\n\n**开关机**\n\n直接按大旋钮。\n\n**自动模式**\n\n直接按左侧的自动调节按钮，自动模式下，按钮会有绿色边提示。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-13.gif-wm.white)\n\n调节过程中，我的感觉是光线逐步变化到最大亮度再到最小亮度，最后再变化到合适的亮度（使得桌面达到 500lx）。整个过程需要 1.5 秒左右。\n\n最上面拍的图片，拍照的照片不知道是否是色温问题，比较偏向树叶绿，实际效果比较偏向嫩绿（亮绿色），感觉带有些黄色那种绿色。\n\n**手动模式**\n\n通过按右侧的模式切换按钮，在亮度调节/色温调节切换，同时指示灯也会改变。再旋转大旋钮，调整当前的亮度/色温。\n\n只要通过大旋钮调整了亮度/色温，自动模式即被取消。\n\n## 这些天的短暂体验\n\n精巧的控制器摆放在桌面上，整洁的桌面显得有了一丝灵动，犹如一个高科技摆放在桌面上。按钮按下清脆，中间旋钮的拉丝质感也不错，旋动旋钮阻尼也比较有力道，同时按下力度（总开关功能）也不小。\n\n使用上也非常方便。使用的时候直接伸手按下大旋钮，因为是默认记录上次操作，所以不需要额外操作了。如果上次关闭前是自动模式，这次开启后，还会进行一次自动调光。\n\n不过，自动调光还是手动功能。比如当前光线一般，你开启了自动调光，他进行配置一次。一会，你关闭的其他光源，ScreenBar Plus 是不会再次帮你自动调光的，需要你按“自动调节”按钮。这个问题主要在白天长期开启的时候，上午自然光线弱，中午光线强，下午又弱了。\n\n光线上正如宣传所说，不刺眼。不像有些工作灯，要么太高直接看到灯光，要么通过显示器反光到眼睛里。它的光线沿屏幕洒下来，不会造成反光。同时也和屏幕高度差不多，即使将照射角度调整到最大，也不会照射到眼睛。这个情况当然要有限制条件，那大概就是坐姿比较正确，同时显示器在 30 寸以内左右。如果显示器高 1 米，那么怎么能不直接看到灯光呢？\n\n自从有了 ScreenBar Plus，感觉幸福感大大提升。有次，晚上一个人在办公室角落使用的时候，感觉特别安静和温馨~","source":"_posts/2018/2018-10-21-benq-screenbar-plus.md","raw":"---\nlayout: post\ntitle: 入手明基 ScreenBar Plus 台灯\ndate: 2018-10-21 14:15:00 GMT+0000\ncategories: [外设]\ntags:  [benq,screenbar]\n---\n\n十一期间正好看到一则推荐（还真不是广告），就去天猫逛了下，觉得正合适。对于明基这个品牌，算是早有耳闻了，做工优秀，外观漂亮，关键是上档次。嗯，是非常实用。\n\n一直没有下手买台面台灯，一方面公司还能凑合有点灯光，家里也还凑合用大灯。这不赶巧，公司的管灯坏了1根，一直没人修，最后没几天不知啥情况，剩余的两根也坏了。我的工位一到下午四点就变成了夜间模式。\n\n<!-- more -->\n\n就这样，十一最后两天之内，陆续买了两个明基 Screen Plus 灯管。是的，他就是个灯管而已～\n\n此外，明基最出名的台灯系列，应该是 WiT。可能说名字你不清楚，但是如果看过晒办公桌台灯或是推荐台灯啥的文章，估计你能见到过，大弧形设计非常有特色。当然，这个系列也有落地灯。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-1.jpg-wm.white)\n\n## ScreenBar 系列\n\n按照我的惯例，先说说这个系列的产品情况。\n\n明基的显示器挂灯，目前有两款。老款的 ScreenBar 和新款的 ScreenBar Plus。这两款通过对比参数来看，除了操控方式不同外，灯体参数是完全一致的。但是新款支持自动感应功能，意味着可以一键 “AUTO” 解决光线问题。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-2.jpg-wm.white)\n\n老款 ScreenBar 操作按键在灯管中间。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-3.jpg-wm.white)\n\n而新款 ScreenBar Plus 是在电线上额外增加一个控制器。\n\n价格上，新款在 1000 元左右。老款稍微便宜 100 元左右。如果想买的话，建议买新款。老款按键在灯体上，对于大尺寸显示器（27寸）我是坐着够不到开关的。所以多一个控制器，更方便，而且带有自动感应灯光功能。\n\n## ScreenBar Plus 开箱\n\n买的东西最怕开箱。拍照太差劲，千元灯瞬间变成百元灯。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-4.jpg-wm.white)\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-5.jpg-wm.white)\n\n包装很紧，很难拽出来。背面有安装和使用说明，嗯，操作太简单了，所以根本不需要额外纸张说明。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-6.jpg-wm.white)\n\n新款 ScreenBar Plus 包含 3 大件：主灯体、灯架、带有电线的控制器。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-7.jpg-wm.white)\n\n主灯体特写。宽度 45 厘米。LED 贴片暖色/冷色交替安装。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-8.jpg-wm.white)\n\n灯架部分。配重比起灯体算是很沉了。要紧紧的挂在显示器上。前面需要卡住显示器 6 毫米左右。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-9.jpg-wm.white)\n\n控制器特写。使用 USB 供电。我的三星显示器带有 USB，直接插上就行。不带的显示器可以找个带有 USB 的插座插上。据说不能使用延长线，怕电力不足。\n\n买回来在旋钮上带有一个卡片，应该是防止搬运期间发生摩擦吧。自己可以拽出来。\n\n## ScreenBar Plus 上手\n\n由于灯体宽度已经达到了 45 厘米，所以只要你的显示器是21寸以上，基本上都不会比灯体窄。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-10.jpg-wm.white)\n\n我的三星 27 寸显示器效果\n\n挂件需要卡在显示器前面，所以为了保证卡子不遮挡屏幕，上部屏幕边框至少要有 6 毫米左右。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-11.jpg-wm.white)\n\n中间部分特写\n\n同时官方说显示器的厚度要在 1-3 厘米，但是看网上说，0.5 厘米显示器也可以的。所以我估计正常的显示器，厚度是不需要考虑的。\n\n由于仅仅是挂在中间，所以曲面显示器也不会有问题。\n\n还是要重申下。如果是带有摄像头的显示器，比如 iMac，建议关注下尺寸。前面他需要下沉 6 毫米左右。iMac 是正好的。\n\n### 操作\n\nScreenBar Plus 操作起来，非常简单。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-12.jpg-wm.white)\n\n控制器能按能显示的就这么几个：中间大旋钮，左右两个按钮，以及 2 个指示灯和一个顶部光线感应器。\n\n**开关机**\n\n直接按大旋钮。\n\n**自动模式**\n\n直接按左侧的自动调节按钮，自动模式下，按钮会有绿色边提示。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-13.gif-wm.white)\n\n调节过程中，我的感觉是光线逐步变化到最大亮度再到最小亮度，最后再变化到合适的亮度（使得桌面达到 500lx）。整个过程需要 1.5 秒左右。\n\n最上面拍的图片，拍照的照片不知道是否是色温问题，比较偏向树叶绿，实际效果比较偏向嫩绿（亮绿色），感觉带有些黄色那种绿色。\n\n**手动模式**\n\n通过按右侧的模式切换按钮，在亮度调节/色温调节切换，同时指示灯也会改变。再旋转大旋钮，调整当前的亮度/色温。\n\n只要通过大旋钮调整了亮度/色温，自动模式即被取消。\n\n## 这些天的短暂体验\n\n精巧的控制器摆放在桌面上，整洁的桌面显得有了一丝灵动，犹如一个高科技摆放在桌面上。按钮按下清脆，中间旋钮的拉丝质感也不错，旋动旋钮阻尼也比较有力道，同时按下力度（总开关功能）也不小。\n\n使用上也非常方便。使用的时候直接伸手按下大旋钮，因为是默认记录上次操作，所以不需要额外操作了。如果上次关闭前是自动模式，这次开启后，还会进行一次自动调光。\n\n不过，自动调光还是手动功能。比如当前光线一般，你开启了自动调光，他进行配置一次。一会，你关闭的其他光源，ScreenBar Plus 是不会再次帮你自动调光的，需要你按“自动调节”按钮。这个问题主要在白天长期开启的时候，上午自然光线弱，中午光线强，下午又弱了。\n\n光线上正如宣传所说，不刺眼。不像有些工作灯，要么太高直接看到灯光，要么通过显示器反光到眼睛里。它的光线沿屏幕洒下来，不会造成反光。同时也和屏幕高度差不多，即使将照射角度调整到最大，也不会照射到眼睛。这个情况当然要有限制条件，那大概就是坐姿比较正确，同时显示器在 30 寸以内左右。如果显示器高 1 米，那么怎么能不直接看到灯光呢？\n\n自从有了 ScreenBar Plus，感觉幸福感大大提升。有次，晚上一个人在办公室角落使用的时候，感觉特别安静和温馨~","slug":"2018-2018-10-21-benq-screenbar-plus","published":1,"updated":"2019-07-18T17:19:07.104Z","comments":1,"photos":[],"link":"","_id":"cjy8y72t10050s21d5tcklmoq","content":"<p>十一期间正好看到一则推荐（还真不是广告），就去天猫逛了下，觉得正合适。对于明基这个品牌，算是早有耳闻了，做工优秀，外观漂亮，关键是上档次。嗯，是非常实用。</p>\n<p>一直没有下手买台面台灯，一方面公司还能凑合有点灯光，家里也还凑合用大灯。这不赶巧，公司的管灯坏了1根，一直没人修，最后没几天不知啥情况，剩余的两根也坏了。我的工位一到下午四点就变成了夜间模式。</p>\n<a id=\"more\"></a>\n\n<p>就这样，十一最后两天之内，陆续买了两个明基 Screen Plus 灯管。是的，他就是个灯管而已～</p>\n<p>此外，明基最出名的台灯系列，应该是 WiT。可能说名字你不清楚，但是如果看过晒办公桌台灯或是推荐台灯啥的文章，估计你能见到过，大弧形设计非常有特色。当然，这个系列也有落地灯。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-1.jpg-wm.white\" alt=\"img\"></p>\n<h2 id=\"ScreenBar-系列\"><a href=\"#ScreenBar-系列\" class=\"headerlink\" title=\"ScreenBar 系列\"></a>ScreenBar 系列</h2><p>按照我的惯例，先说说这个系列的产品情况。</p>\n<p>明基的显示器挂灯，目前有两款。老款的 ScreenBar 和新款的 ScreenBar Plus。这两款通过对比参数来看，除了操控方式不同外，灯体参数是完全一致的。但是新款支持自动感应功能，意味着可以一键 “AUTO” 解决光线问题。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-2.jpg-wm.white\" alt=\"img\"></p>\n<p>老款 ScreenBar 操作按键在灯管中间。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-3.jpg-wm.white\" alt=\"img\"></p>\n<p>而新款 ScreenBar Plus 是在电线上额外增加一个控制器。</p>\n<p>价格上，新款在 1000 元左右。老款稍微便宜 100 元左右。如果想买的话，建议买新款。老款按键在灯体上，对于大尺寸显示器（27寸）我是坐着够不到开关的。所以多一个控制器，更方便，而且带有自动感应灯光功能。</p>\n<h2 id=\"ScreenBar-Plus-开箱\"><a href=\"#ScreenBar-Plus-开箱\" class=\"headerlink\" title=\"ScreenBar Plus 开箱\"></a>ScreenBar Plus 开箱</h2><p>买的东西最怕开箱。拍照太差劲，千元灯瞬间变成百元灯。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-4.jpg-wm.white\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-5.jpg-wm.white\" alt=\"img\"></p>\n<p>包装很紧，很难拽出来。背面有安装和使用说明，嗯，操作太简单了，所以根本不需要额外纸张说明。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-6.jpg-wm.white\" alt=\"img\"></p>\n<p>新款 ScreenBar Plus 包含 3 大件：主灯体、灯架、带有电线的控制器。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-7.jpg-wm.white\" alt=\"img\"></p>\n<p>主灯体特写。宽度 45 厘米。LED 贴片暖色/冷色交替安装。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-8.jpg-wm.white\" alt=\"img\"></p>\n<p>灯架部分。配重比起灯体算是很沉了。要紧紧的挂在显示器上。前面需要卡住显示器 6 毫米左右。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-9.jpg-wm.white\" alt=\"img\"></p>\n<p>控制器特写。使用 USB 供电。我的三星显示器带有 USB，直接插上就行。不带的显示器可以找个带有 USB 的插座插上。据说不能使用延长线，怕电力不足。</p>\n<p>买回来在旋钮上带有一个卡片，应该是防止搬运期间发生摩擦吧。自己可以拽出来。</p>\n<h2 id=\"ScreenBar-Plus-上手\"><a href=\"#ScreenBar-Plus-上手\" class=\"headerlink\" title=\"ScreenBar Plus 上手\"></a>ScreenBar Plus 上手</h2><p>由于灯体宽度已经达到了 45 厘米，所以只要你的显示器是21寸以上，基本上都不会比灯体窄。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-10.jpg-wm.white\" alt=\"img\"></p>\n<p>我的三星 27 寸显示器效果</p>\n<p>挂件需要卡在显示器前面，所以为了保证卡子不遮挡屏幕，上部屏幕边框至少要有 6 毫米左右。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-11.jpg-wm.white\" alt=\"img\"></p>\n<p>中间部分特写</p>\n<p>同时官方说显示器的厚度要在 1-3 厘米，但是看网上说，0.5 厘米显示器也可以的。所以我估计正常的显示器，厚度是不需要考虑的。</p>\n<p>由于仅仅是挂在中间，所以曲面显示器也不会有问题。</p>\n<p>还是要重申下。如果是带有摄像头的显示器，比如 iMac，建议关注下尺寸。前面他需要下沉 6 毫米左右。iMac 是正好的。</p>\n<h3 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h3><p>ScreenBar Plus 操作起来，非常简单。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-12.jpg-wm.white\" alt=\"img\"></p>\n<p>控制器能按能显示的就这么几个：中间大旋钮，左右两个按钮，以及 2 个指示灯和一个顶部光线感应器。</p>\n<p><strong>开关机</strong></p>\n<p>直接按大旋钮。</p>\n<p><strong>自动模式</strong></p>\n<p>直接按左侧的自动调节按钮，自动模式下，按钮会有绿色边提示。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-13.gif-wm.white\" alt=\"img\"></p>\n<p>调节过程中，我的感觉是光线逐步变化到最大亮度再到最小亮度，最后再变化到合适的亮度（使得桌面达到 500lx）。整个过程需要 1.5 秒左右。</p>\n<p>最上面拍的图片，拍照的照片不知道是否是色温问题，比较偏向树叶绿，实际效果比较偏向嫩绿（亮绿色），感觉带有些黄色那种绿色。</p>\n<p><strong>手动模式</strong></p>\n<p>通过按右侧的模式切换按钮，在亮度调节/色温调节切换，同时指示灯也会改变。再旋转大旋钮，调整当前的亮度/色温。</p>\n<p>只要通过大旋钮调整了亮度/色温，自动模式即被取消。</p>\n<h2 id=\"这些天的短暂体验\"><a href=\"#这些天的短暂体验\" class=\"headerlink\" title=\"这些天的短暂体验\"></a>这些天的短暂体验</h2><p>精巧的控制器摆放在桌面上，整洁的桌面显得有了一丝灵动，犹如一个高科技摆放在桌面上。按钮按下清脆，中间旋钮的拉丝质感也不错，旋动旋钮阻尼也比较有力道，同时按下力度（总开关功能）也不小。</p>\n<p>使用上也非常方便。使用的时候直接伸手按下大旋钮，因为是默认记录上次操作，所以不需要额外操作了。如果上次关闭前是自动模式，这次开启后，还会进行一次自动调光。</p>\n<p>不过，自动调光还是手动功能。比如当前光线一般，你开启了自动调光，他进行配置一次。一会，你关闭的其他光源，ScreenBar Plus 是不会再次帮你自动调光的，需要你按“自动调节”按钮。这个问题主要在白天长期开启的时候，上午自然光线弱，中午光线强，下午又弱了。</p>\n<p>光线上正如宣传所说，不刺眼。不像有些工作灯，要么太高直接看到灯光，要么通过显示器反光到眼睛里。它的光线沿屏幕洒下来，不会造成反光。同时也和屏幕高度差不多，即使将照射角度调整到最大，也不会照射到眼睛。这个情况当然要有限制条件，那大概就是坐姿比较正确，同时显示器在 30 寸以内左右。如果显示器高 1 米，那么怎么能不直接看到灯光呢？</p>\n<p>自从有了 ScreenBar Plus，感觉幸福感大大提升。有次，晚上一个人在办公室角落使用的时候，感觉特别安静和温馨~</p>\n","site":{"data":{}},"excerpt":"<p>十一期间正好看到一则推荐（还真不是广告），就去天猫逛了下，觉得正合适。对于明基这个品牌，算是早有耳闻了，做工优秀，外观漂亮，关键是上档次。嗯，是非常实用。</p>\n<p>一直没有下手买台面台灯，一方面公司还能凑合有点灯光，家里也还凑合用大灯。这不赶巧，公司的管灯坏了1根，一直没人修，最后没几天不知啥情况，剩余的两根也坏了。我的工位一到下午四点就变成了夜间模式。</p>","more":"<p>就这样，十一最后两天之内，陆续买了两个明基 Screen Plus 灯管。是的，他就是个灯管而已～</p>\n<p>此外，明基最出名的台灯系列，应该是 WiT。可能说名字你不清楚，但是如果看过晒办公桌台灯或是推荐台灯啥的文章，估计你能见到过，大弧形设计非常有特色。当然，这个系列也有落地灯。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-1.jpg-wm.white\" alt=\"img\"></p>\n<h2 id=\"ScreenBar-系列\"><a href=\"#ScreenBar-系列\" class=\"headerlink\" title=\"ScreenBar 系列\"></a>ScreenBar 系列</h2><p>按照我的惯例，先说说这个系列的产品情况。</p>\n<p>明基的显示器挂灯，目前有两款。老款的 ScreenBar 和新款的 ScreenBar Plus。这两款通过对比参数来看，除了操控方式不同外，灯体参数是完全一致的。但是新款支持自动感应功能，意味着可以一键 “AUTO” 解决光线问题。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-2.jpg-wm.white\" alt=\"img\"></p>\n<p>老款 ScreenBar 操作按键在灯管中间。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-3.jpg-wm.white\" alt=\"img\"></p>\n<p>而新款 ScreenBar Plus 是在电线上额外增加一个控制器。</p>\n<p>价格上，新款在 1000 元左右。老款稍微便宜 100 元左右。如果想买的话，建议买新款。老款按键在灯体上，对于大尺寸显示器（27寸）我是坐着够不到开关的。所以多一个控制器，更方便，而且带有自动感应灯光功能。</p>\n<h2 id=\"ScreenBar-Plus-开箱\"><a href=\"#ScreenBar-Plus-开箱\" class=\"headerlink\" title=\"ScreenBar Plus 开箱\"></a>ScreenBar Plus 开箱</h2><p>买的东西最怕开箱。拍照太差劲，千元灯瞬间变成百元灯。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-4.jpg-wm.white\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-5.jpg-wm.white\" alt=\"img\"></p>\n<p>包装很紧，很难拽出来。背面有安装和使用说明，嗯，操作太简单了，所以根本不需要额外纸张说明。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-6.jpg-wm.white\" alt=\"img\"></p>\n<p>新款 ScreenBar Plus 包含 3 大件：主灯体、灯架、带有电线的控制器。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-7.jpg-wm.white\" alt=\"img\"></p>\n<p>主灯体特写。宽度 45 厘米。LED 贴片暖色/冷色交替安装。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-8.jpg-wm.white\" alt=\"img\"></p>\n<p>灯架部分。配重比起灯体算是很沉了。要紧紧的挂在显示器上。前面需要卡住显示器 6 毫米左右。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-9.jpg-wm.white\" alt=\"img\"></p>\n<p>控制器特写。使用 USB 供电。我的三星显示器带有 USB，直接插上就行。不带的显示器可以找个带有 USB 的插座插上。据说不能使用延长线，怕电力不足。</p>\n<p>买回来在旋钮上带有一个卡片，应该是防止搬运期间发生摩擦吧。自己可以拽出来。</p>\n<h2 id=\"ScreenBar-Plus-上手\"><a href=\"#ScreenBar-Plus-上手\" class=\"headerlink\" title=\"ScreenBar Plus 上手\"></a>ScreenBar Plus 上手</h2><p>由于灯体宽度已经达到了 45 厘米，所以只要你的显示器是21寸以上，基本上都不会比灯体窄。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-10.jpg-wm.white\" alt=\"img\"></p>\n<p>我的三星 27 寸显示器效果</p>\n<p>挂件需要卡在显示器前面，所以为了保证卡子不遮挡屏幕，上部屏幕边框至少要有 6 毫米左右。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-11.jpg-wm.white\" alt=\"img\"></p>\n<p>中间部分特写</p>\n<p>同时官方说显示器的厚度要在 1-3 厘米，但是看网上说，0.5 厘米显示器也可以的。所以我估计正常的显示器，厚度是不需要考虑的。</p>\n<p>由于仅仅是挂在中间，所以曲面显示器也不会有问题。</p>\n<p>还是要重申下。如果是带有摄像头的显示器，比如 iMac，建议关注下尺寸。前面他需要下沉 6 毫米左右。iMac 是正好的。</p>\n<h3 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h3><p>ScreenBar Plus 操作起来，非常简单。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-12.jpg-wm.white\" alt=\"img\"></p>\n<p>控制器能按能显示的就这么几个：中间大旋钮，左右两个按钮，以及 2 个指示灯和一个顶部光线感应器。</p>\n<p><strong>开关机</strong></p>\n<p>直接按大旋钮。</p>\n<p><strong>自动模式</strong></p>\n<p>直接按左侧的自动调节按钮，自动模式下，按钮会有绿色边提示。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-13.gif-wm.white\" alt=\"img\"></p>\n<p>调节过程中，我的感觉是光线逐步变化到最大亮度再到最小亮度，最后再变化到合适的亮度（使得桌面达到 500lx）。整个过程需要 1.5 秒左右。</p>\n<p>最上面拍的图片，拍照的照片不知道是否是色温问题，比较偏向树叶绿，实际效果比较偏向嫩绿（亮绿色），感觉带有些黄色那种绿色。</p>\n<p><strong>手动模式</strong></p>\n<p>通过按右侧的模式切换按钮，在亮度调节/色温调节切换，同时指示灯也会改变。再旋转大旋钮，调整当前的亮度/色温。</p>\n<p>只要通过大旋钮调整了亮度/色温，自动模式即被取消。</p>\n<h2 id=\"这些天的短暂体验\"><a href=\"#这些天的短暂体验\" class=\"headerlink\" title=\"这些天的短暂体验\"></a>这些天的短暂体验</h2><p>精巧的控制器摆放在桌面上，整洁的桌面显得有了一丝灵动，犹如一个高科技摆放在桌面上。按钮按下清脆，中间旋钮的拉丝质感也不错，旋动旋钮阻尼也比较有力道，同时按下力度（总开关功能）也不小。</p>\n<p>使用上也非常方便。使用的时候直接伸手按下大旋钮，因为是默认记录上次操作，所以不需要额外操作了。如果上次关闭前是自动模式，这次开启后，还会进行一次自动调光。</p>\n<p>不过，自动调光还是手动功能。比如当前光线一般，你开启了自动调光，他进行配置一次。一会，你关闭的其他光源，ScreenBar Plus 是不会再次帮你自动调光的，需要你按“自动调节”按钮。这个问题主要在白天长期开启的时候，上午自然光线弱，中午光线强，下午又弱了。</p>\n<p>光线上正如宣传所说，不刺眼。不像有些工作灯，要么太高直接看到灯光，要么通过显示器反光到眼睛里。它的光线沿屏幕洒下来，不会造成反光。同时也和屏幕高度差不多，即使将照射角度调整到最大，也不会照射到眼睛。这个情况当然要有限制条件，那大概就是坐姿比较正确，同时显示器在 30 寸以内左右。如果显示器高 1 米，那么怎么能不直接看到灯光呢？</p>\n<p>自从有了 ScreenBar Plus，感觉幸福感大大提升。有次，晚上一个人在办公室角落使用的时候，感觉特别安静和温馨~</p>"},{"layout":"post","title":"webpack3 升级 4 采坑记","date":"2018-11-06T22:16:00.000Z","_content":"\n公司的项目，最早是用 ES6 写的，直接手写 webpack1 进行打包的。由于是 jsp 的页面，还做了单独的页面压缩，资源 hash 处理。后续也跟上了一些升级脚步，把webpack 逐步升级到 2，之后又是 3。现在看来也算是先见之明。\n\n在后续业务中，逐步使用了 vue，使用 vue 主要是考虑到能够通过 cdn 等形式直接引入项目，省去了 webpack 的配置工作。现在同一个项目，后续我决定采用 react 进行开发，对原有项目进行了 3 次重构，终于把老代码独立到一个文件夹了，未来 react 的新代码可以在单独的文件夹下开发。最终发包时候合并在一起。\n\n对于 react 我还是比较积极的，版本上从 16.5 直接更新到了 16.6。为了后续方便，也就筹划着把 webpack 升级到 4。\n\n<!-- more -->\n\n### webpack 升级\n\nwebpack 主包升级到 4之后，主要有一点，需要单独安装 `webpack-cli` 了。\n\n```\nyarn add -D webpack-cli\n```\n\n安装完毕之后，直接启动，果不然报错。\n\n### extract-text-webpack-plugin\n\n由于是夜里升级，当时没有相关记录。大致报错是 hooks 错误。\n\n这个处理 css 的插件，一直没有更新主版本，所以默认版本不能兼容 webpack4，需要安装 next 版本。\n\n```\nyarn add -D extract-text-webpack-plugin@next\n```\n\n### webpack 配置\n\n`webpack.optimize.CommonsChunkPlugin` 已经移除了，需要换成 `optimization.splitChunks`：\n\n```js\n{\n  optimization: {\n    splitChunks: {\n      chunks: 'all',\n      minChunks: 3,\n      name: 'commons'\n    }\n  }\n}\n```\n\n因为我们是手动往 jsp 页面插入资源文件，所以不方便用智能拆包。而且为了兼容之前的方案，就统一打包到 `commons.js` 中了。\n\n### 移除不再使用的东西\n\n`uglifyjs-webpack-plugin` 不在需要了，新版webpack 配置文件中，加入生产模式，自动压缩代码\n\n```js\n{\n  mode: 'production'\n}\n```\n\n同样的，不需要再设置 `ENV` 了：\n\n```js\nnew webpack.DefinePlugin({\n  'process.env': {\n    'NODE_ENV': JSON.stringify('production')\n  }\n})\n```\n\n还有一个不知道用途的插件，也被提示要求移除：\n\n```js\nnew webpack.optimize.AggressiveMergingPlugin()\n```\n\n### babel 系列\n\n之前 babel 的包，是这样子风格的 `babel-core`，新包已经变成 `@babel/core` 了。改成了私有前缀下的子包形式了。\n\n所以，需要重新安装包：\n\n```\nyarn add -D @babel/core @babel/preset-env @babel/preset-react\n```\n\n由于我用了 react 的一个实验性质语法，原本用的 stage-0，新版 babel 不再支持 stage-0 这种包了。所以需要改为手动安装。\n\nbabel 提供了一个工具， `npx babel-update`，但是这个工具没能成功修复 `package.json` 文件，仅仅在控制台回显了那些行需要删除，需要新增那些行。\n\npresets 写法也有一点变化，不能简写了。最后 webpack 配置文件中规则如下：\n```js\n{\n  test: /\\.jsx?$/,\n  exclude: /node_modules/,\n  use: [{\n    loader: 'babel-loader',\n    query: {\n      presets: [\n        ['@babel/preset-env', { 'modules': false }],\n        '@babel/preset-react',\n      ],\n      plugins: [\n        '@babel/plugin-proposal-class-properties'\n      ]\n    }\n  }]\n}\n```\n\n\n### 自动 polyfill\n\n最后，我发现了了一个好东西。浏览器访问资源，自动根据 useragent 返回需要的 polyfill。\n\n项目地址：[https://polyfill.io](https://polyfill.io)\n\n这样所有资源都不需要关系 polyfill 了。\n\n### 后续的开发思考\n\n所有的重量级资源，均采用 cdn 等形式引入，不再进行 webpack 打包了。这样自己打包速度快，也省去了引用资源增加导致 `commons.js` 变化。\n\n配置大致如下：\n\n```js\n{\n  externals: {\n    react: 'React',\n    'react-dom': 'ReactDOM'\n  }\n}\n```\n\n当然如果是 lodash 之类的，可以按功能进行 tree shake 的，还是可以打包到 `commons.js` 中的。\n\n--END--\n\n","source":"_posts/2018/2018-11-06-webpack.md","raw":"---\nlayout: post\ntitle: webpack3 升级 4 采坑记\ndate: 2018-11-06 22:16:00 GMT+0000\ncategories: [前端]\ntags:  [webpack,babel,react]\n---\n\n公司的项目，最早是用 ES6 写的，直接手写 webpack1 进行打包的。由于是 jsp 的页面，还做了单独的页面压缩，资源 hash 处理。后续也跟上了一些升级脚步，把webpack 逐步升级到 2，之后又是 3。现在看来也算是先见之明。\n\n在后续业务中，逐步使用了 vue，使用 vue 主要是考虑到能够通过 cdn 等形式直接引入项目，省去了 webpack 的配置工作。现在同一个项目，后续我决定采用 react 进行开发，对原有项目进行了 3 次重构，终于把老代码独立到一个文件夹了，未来 react 的新代码可以在单独的文件夹下开发。最终发包时候合并在一起。\n\n对于 react 我还是比较积极的，版本上从 16.5 直接更新到了 16.6。为了后续方便，也就筹划着把 webpack 升级到 4。\n\n<!-- more -->\n\n### webpack 升级\n\nwebpack 主包升级到 4之后，主要有一点，需要单独安装 `webpack-cli` 了。\n\n```\nyarn add -D webpack-cli\n```\n\n安装完毕之后，直接启动，果不然报错。\n\n### extract-text-webpack-plugin\n\n由于是夜里升级，当时没有相关记录。大致报错是 hooks 错误。\n\n这个处理 css 的插件，一直没有更新主版本，所以默认版本不能兼容 webpack4，需要安装 next 版本。\n\n```\nyarn add -D extract-text-webpack-plugin@next\n```\n\n### webpack 配置\n\n`webpack.optimize.CommonsChunkPlugin` 已经移除了，需要换成 `optimization.splitChunks`：\n\n```js\n{\n  optimization: {\n    splitChunks: {\n      chunks: 'all',\n      minChunks: 3,\n      name: 'commons'\n    }\n  }\n}\n```\n\n因为我们是手动往 jsp 页面插入资源文件，所以不方便用智能拆包。而且为了兼容之前的方案，就统一打包到 `commons.js` 中了。\n\n### 移除不再使用的东西\n\n`uglifyjs-webpack-plugin` 不在需要了，新版webpack 配置文件中，加入生产模式，自动压缩代码\n\n```js\n{\n  mode: 'production'\n}\n```\n\n同样的，不需要再设置 `ENV` 了：\n\n```js\nnew webpack.DefinePlugin({\n  'process.env': {\n    'NODE_ENV': JSON.stringify('production')\n  }\n})\n```\n\n还有一个不知道用途的插件，也被提示要求移除：\n\n```js\nnew webpack.optimize.AggressiveMergingPlugin()\n```\n\n### babel 系列\n\n之前 babel 的包，是这样子风格的 `babel-core`，新包已经变成 `@babel/core` 了。改成了私有前缀下的子包形式了。\n\n所以，需要重新安装包：\n\n```\nyarn add -D @babel/core @babel/preset-env @babel/preset-react\n```\n\n由于我用了 react 的一个实验性质语法，原本用的 stage-0，新版 babel 不再支持 stage-0 这种包了。所以需要改为手动安装。\n\nbabel 提供了一个工具， `npx babel-update`，但是这个工具没能成功修复 `package.json` 文件，仅仅在控制台回显了那些行需要删除，需要新增那些行。\n\npresets 写法也有一点变化，不能简写了。最后 webpack 配置文件中规则如下：\n```js\n{\n  test: /\\.jsx?$/,\n  exclude: /node_modules/,\n  use: [{\n    loader: 'babel-loader',\n    query: {\n      presets: [\n        ['@babel/preset-env', { 'modules': false }],\n        '@babel/preset-react',\n      ],\n      plugins: [\n        '@babel/plugin-proposal-class-properties'\n      ]\n    }\n  }]\n}\n```\n\n\n### 自动 polyfill\n\n最后，我发现了了一个好东西。浏览器访问资源，自动根据 useragent 返回需要的 polyfill。\n\n项目地址：[https://polyfill.io](https://polyfill.io)\n\n这样所有资源都不需要关系 polyfill 了。\n\n### 后续的开发思考\n\n所有的重量级资源，均采用 cdn 等形式引入，不再进行 webpack 打包了。这样自己打包速度快，也省去了引用资源增加导致 `commons.js` 变化。\n\n配置大致如下：\n\n```js\n{\n  externals: {\n    react: 'React',\n    'react-dom': 'ReactDOM'\n  }\n}\n```\n\n当然如果是 lodash 之类的，可以按功能进行 tree shake 的，还是可以打包到 `commons.js` 中的。\n\n--END--\n\n","slug":"2018-2018-11-06-webpack","published":1,"updated":"2019-07-18T17:19:07.272Z","comments":1,"photos":[],"link":"","_id":"cjy8y72t50054s21d66lsy01m","content":"<p>公司的项目，最早是用 ES6 写的，直接手写 webpack1 进行打包的。由于是 jsp 的页面，还做了单独的页面压缩，资源 hash 处理。后续也跟上了一些升级脚步，把webpack 逐步升级到 2，之后又是 3。现在看来也算是先见之明。</p>\n<p>在后续业务中，逐步使用了 vue，使用 vue 主要是考虑到能够通过 cdn 等形式直接引入项目，省去了 webpack 的配置工作。现在同一个项目，后续我决定采用 react 进行开发，对原有项目进行了 3 次重构，终于把老代码独立到一个文件夹了，未来 react 的新代码可以在单独的文件夹下开发。最终发包时候合并在一起。</p>\n<p>对于 react 我还是比较积极的，版本上从 16.5 直接更新到了 16.6。为了后续方便，也就筹划着把 webpack 升级到 4。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"webpack-升级\"><a href=\"#webpack-升级\" class=\"headerlink\" title=\"webpack 升级\"></a>webpack 升级</h3><p>webpack 主包升级到 4之后，主要有一点，需要单独安装 <code>webpack-cli</code> 了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add -D webpack-cli</span><br></pre></td></tr></table></figure>\n\n<p>安装完毕之后，直接启动，果不然报错。</p>\n<h3 id=\"extract-text-webpack-plugin\"><a href=\"#extract-text-webpack-plugin\" class=\"headerlink\" title=\"extract-text-webpack-plugin\"></a>extract-text-webpack-plugin</h3><p>由于是夜里升级，当时没有相关记录。大致报错是 hooks 错误。</p>\n<p>这个处理 css 的插件，一直没有更新主版本，所以默认版本不能兼容 webpack4，需要安装 next 版本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add -D extract-text-webpack-plugin@next</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"webpack-配置\"><a href=\"#webpack-配置\" class=\"headerlink\" title=\"webpack 配置\"></a>webpack 配置</h3><p><code>webpack.optimize.CommonsChunkPlugin</code> 已经移除了，需要换成 <code>optimization.splitChunks</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      chunks: <span class=\"string\">'all'</span>,</span><br><span class=\"line\">      minChunks: <span class=\"number\">3</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'commons'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为我们是手动往 jsp 页面插入资源文件，所以不方便用智能拆包。而且为了兼容之前的方案，就统一打包到 <code>commons.js</code> 中了。</p>\n<h3 id=\"移除不再使用的东西\"><a href=\"#移除不再使用的东西\" class=\"headerlink\" title=\"移除不再使用的东西\"></a>移除不再使用的东西</h3><p><code>uglifyjs-webpack-plugin</code> 不在需要了，新版webpack 配置文件中，加入生产模式，自动压缩代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'production'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同样的，不需要再设置 <code>ENV</code> 了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">  <span class=\"string\">'process.env'</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">'NODE_ENV'</span>: <span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">'production'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>还有一个不知道用途的插件，也被提示要求移除：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> webpack.optimize.AggressiveMergingPlugin()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"babel-系列\"><a href=\"#babel-系列\" class=\"headerlink\" title=\"babel 系列\"></a>babel 系列</h3><p>之前 babel 的包，是这样子风格的 <code>babel-core</code>，新包已经变成 <code>@babel/core</code> 了。改成了私有前缀下的子包形式了。</p>\n<p>所以，需要重新安装包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add -D @babel/core @babel/preset-env @babel/preset-react</span><br></pre></td></tr></table></figure>\n\n<p>由于我用了 react 的一个实验性质语法，原本用的 stage-0，新版 babel 不再支持 stage-0 这种包了。所以需要改为手动安装。</p>\n<p>babel 提供了一个工具， <code>npx babel-update</code>，但是这个工具没能成功修复 <code>package.json</code> 文件，仅仅在控制台回显了那些行需要删除，需要新增那些行。</p>\n<p>presets 写法也有一点变化，不能简写了。最后 webpack 配置文件中规则如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: <span class=\"regexp\">/\\.jsx?$/</span>,</span><br><span class=\"line\">  exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">  use: [&#123;</span><br><span class=\"line\">    loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">    query: &#123;</span><br><span class=\"line\">      presets: [</span><br><span class=\"line\">        [<span class=\"string\">'@babel/preset-env'</span>, &#123; <span class=\"string\">'modules'</span>: <span class=\"literal\">false</span> &#125;],</span><br><span class=\"line\">        <span class=\"string\">'@babel/preset-react'</span>,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      plugins: [</span><br><span class=\"line\">        <span class=\"string\">'@babel/plugin-proposal-class-properties'</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自动-polyfill\"><a href=\"#自动-polyfill\" class=\"headerlink\" title=\"自动 polyfill\"></a>自动 polyfill</h3><p>最后，我发现了了一个好东西。浏览器访问资源，自动根据 useragent 返回需要的 polyfill。</p>\n<p>项目地址：<a href=\"https://polyfill.io\" target=\"_blank\" rel=\"noopener\">https://polyfill.io</a></p>\n<p>这样所有资源都不需要关系 polyfill 了。</p>\n<h3 id=\"后续的开发思考\"><a href=\"#后续的开发思考\" class=\"headerlink\" title=\"后续的开发思考\"></a>后续的开发思考</h3><p>所有的重量级资源，均采用 cdn 等形式引入，不再进行 webpack 打包了。这样自己打包速度快，也省去了引用资源增加导致 <code>commons.js</code> 变化。</p>\n<p>配置大致如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  externals: &#123;</span><br><span class=\"line\">    react: <span class=\"string\">'React'</span>,</span><br><span class=\"line\">    <span class=\"string\">'react-dom'</span>: <span class=\"string\">'ReactDOM'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然如果是 lodash 之类的，可以按功能进行 tree shake 的，还是可以打包到 <code>commons.js</code> 中的。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>公司的项目，最早是用 ES6 写的，直接手写 webpack1 进行打包的。由于是 jsp 的页面，还做了单独的页面压缩，资源 hash 处理。后续也跟上了一些升级脚步，把webpack 逐步升级到 2，之后又是 3。现在看来也算是先见之明。</p>\n<p>在后续业务中，逐步使用了 vue，使用 vue 主要是考虑到能够通过 cdn 等形式直接引入项目，省去了 webpack 的配置工作。现在同一个项目，后续我决定采用 react 进行开发，对原有项目进行了 3 次重构，终于把老代码独立到一个文件夹了，未来 react 的新代码可以在单独的文件夹下开发。最终发包时候合并在一起。</p>\n<p>对于 react 我还是比较积极的，版本上从 16.5 直接更新到了 16.6。为了后续方便，也就筹划着把 webpack 升级到 4。</p>","more":"<h3 id=\"webpack-升级\"><a href=\"#webpack-升级\" class=\"headerlink\" title=\"webpack 升级\"></a>webpack 升级</h3><p>webpack 主包升级到 4之后，主要有一点，需要单独安装 <code>webpack-cli</code> 了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add -D webpack-cli</span><br></pre></td></tr></table></figure>\n\n<p>安装完毕之后，直接启动，果不然报错。</p>\n<h3 id=\"extract-text-webpack-plugin\"><a href=\"#extract-text-webpack-plugin\" class=\"headerlink\" title=\"extract-text-webpack-plugin\"></a>extract-text-webpack-plugin</h3><p>由于是夜里升级，当时没有相关记录。大致报错是 hooks 错误。</p>\n<p>这个处理 css 的插件，一直没有更新主版本，所以默认版本不能兼容 webpack4，需要安装 next 版本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add -D extract-text-webpack-plugin@next</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"webpack-配置\"><a href=\"#webpack-配置\" class=\"headerlink\" title=\"webpack 配置\"></a>webpack 配置</h3><p><code>webpack.optimize.CommonsChunkPlugin</code> 已经移除了，需要换成 <code>optimization.splitChunks</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      chunks: <span class=\"string\">'all'</span>,</span><br><span class=\"line\">      minChunks: <span class=\"number\">3</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'commons'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为我们是手动往 jsp 页面插入资源文件，所以不方便用智能拆包。而且为了兼容之前的方案，就统一打包到 <code>commons.js</code> 中了。</p>\n<h3 id=\"移除不再使用的东西\"><a href=\"#移除不再使用的东西\" class=\"headerlink\" title=\"移除不再使用的东西\"></a>移除不再使用的东西</h3><p><code>uglifyjs-webpack-plugin</code> 不在需要了，新版webpack 配置文件中，加入生产模式，自动压缩代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'production'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同样的，不需要再设置 <code>ENV</code> 了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">  <span class=\"string\">'process.env'</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">'NODE_ENV'</span>: <span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">'production'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>还有一个不知道用途的插件，也被提示要求移除：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> webpack.optimize.AggressiveMergingPlugin()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"babel-系列\"><a href=\"#babel-系列\" class=\"headerlink\" title=\"babel 系列\"></a>babel 系列</h3><p>之前 babel 的包，是这样子风格的 <code>babel-core</code>，新包已经变成 <code>@babel/core</code> 了。改成了私有前缀下的子包形式了。</p>\n<p>所以，需要重新安装包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add -D @babel/core @babel/preset-env @babel/preset-react</span><br></pre></td></tr></table></figure>\n\n<p>由于我用了 react 的一个实验性质语法，原本用的 stage-0，新版 babel 不再支持 stage-0 这种包了。所以需要改为手动安装。</p>\n<p>babel 提供了一个工具， <code>npx babel-update</code>，但是这个工具没能成功修复 <code>package.json</code> 文件，仅仅在控制台回显了那些行需要删除，需要新增那些行。</p>\n<p>presets 写法也有一点变化，不能简写了。最后 webpack 配置文件中规则如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: <span class=\"regexp\">/\\.jsx?$/</span>,</span><br><span class=\"line\">  exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">  use: [&#123;</span><br><span class=\"line\">    loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">    query: &#123;</span><br><span class=\"line\">      presets: [</span><br><span class=\"line\">        [<span class=\"string\">'@babel/preset-env'</span>, &#123; <span class=\"string\">'modules'</span>: <span class=\"literal\">false</span> &#125;],</span><br><span class=\"line\">        <span class=\"string\">'@babel/preset-react'</span>,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      plugins: [</span><br><span class=\"line\">        <span class=\"string\">'@babel/plugin-proposal-class-properties'</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自动-polyfill\"><a href=\"#自动-polyfill\" class=\"headerlink\" title=\"自动 polyfill\"></a>自动 polyfill</h3><p>最后，我发现了了一个好东西。浏览器访问资源，自动根据 useragent 返回需要的 polyfill。</p>\n<p>项目地址：<a href=\"https://polyfill.io\" target=\"_blank\" rel=\"noopener\">https://polyfill.io</a></p>\n<p>这样所有资源都不需要关系 polyfill 了。</p>\n<h3 id=\"后续的开发思考\"><a href=\"#后续的开发思考\" class=\"headerlink\" title=\"后续的开发思考\"></a>后续的开发思考</h3><p>所有的重量级资源，均采用 cdn 等形式引入，不再进行 webpack 打包了。这样自己打包速度快，也省去了引用资源增加导致 <code>commons.js</code> 变化。</p>\n<p>配置大致如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  externals: &#123;</span><br><span class=\"line\">    react: <span class=\"string\">'React'</span>,</span><br><span class=\"line\">    <span class=\"string\">'react-dom'</span>: <span class=\"string\">'ReactDOM'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然如果是 lodash 之类的，可以按功能进行 tree shake 的，还是可以打包到 <code>commons.js</code> 中的。</p>\n<p>–END–</p>"},{"layout":"post","title":"iOS safari 后退 js 不执行的问题","date":"2018-11-21T21:36:00.000Z","_content":"\n今天偶遇一个问题：iOS 10 safari 浏览器中，后退后，页面 js 没有运行。\n\n之前也遇到过这个问题，因为加入风控的代码，就好了。就没有深究。这次发现，风控的代码不好使了😂。也可能是这次 iOS 版本问题，之前没有测试过 iOS 10 系统。\n\n<!-- more -->\n\n网上搜索之，整理方案如下：\n\n```js\nwindow.onpageshow = function (e) {\n  var isIos = function () {\n    var ua = window.navigator.userAgent\n    return /iphone|ipad|ipod/i.test(ua)\n  }\n  if (isIos() && e.persisted) {\n    window.location.reload(true)\n  }\n}\n```\n\n简单来说，通过监听 `pageshow` 事件，判断 `event.persisted` 当前页面是否是读取缓存，来决定是否进行刷新。上面代码放置在公共 js 里，全站后退问题均可解决。\n\n不过这样做有个小问题，页面先进行了后退，显示了历史数据，然后 js 执行了页面刷新，看到了浏览器进度条。由于服务器及网络原因，需要几秒时间。\n\n这个刷新动作能不能优化呢？我认为还是有空间的。比如有的页面，明确就是需要刷新某一个接口数据即可。\n\n那么我们可以对其进行调整，比如执行全局方法 `historyBack`，根据返回值来决定是否进行全页面刷新。\n\n```js\n// 全局代码\nwindow.onpageshow = function (e) {\n  var isIos = function () {\n    var ua = window.navigator.userAgent\n    return /iphone|ipad|ipod/i.test(ua)\n  }\n  if (isIos() && e.persisted) {\n    var cb = window.historyBack\n    if(typeof cb === 'function') {\n      if(cb()) {\n        window.location.reload(true)        \n      }\n    } else {\n      window.location.reload(true)\n    }\n  }\n}\n```\n\n```js\n// 页面代码\nvar page = {\n  getData: function() {\n    ajax().then(function(json){\n      this.render(json)\n    })\n  },\n  render: function(){},\n  init: function(){ this.getData() }\n}\npage.init()\n\nwindow.historyBack = function() {\n  page.getData()\n  return false // 阻止全局刷新\n}\n```\n这样是我目前能想到的比较好的处理方法。可以全局配置默认强制刷新代码，每个页面也支持自定义刷新方案。代码量还不算太多。\n\n--END--\n","source":"_posts/2018/2018-11-21-ios-history-back.md","raw":"---\nlayout: post\ntitle: iOS safari 后退 js 不执行的问题\ndate: 2018-11-21 21:36:00 GMT+0000\ncategories: [前端]\ntags:  [ios, safari, history, 后退]\n---\n\n今天偶遇一个问题：iOS 10 safari 浏览器中，后退后，页面 js 没有运行。\n\n之前也遇到过这个问题，因为加入风控的代码，就好了。就没有深究。这次发现，风控的代码不好使了😂。也可能是这次 iOS 版本问题，之前没有测试过 iOS 10 系统。\n\n<!-- more -->\n\n网上搜索之，整理方案如下：\n\n```js\nwindow.onpageshow = function (e) {\n  var isIos = function () {\n    var ua = window.navigator.userAgent\n    return /iphone|ipad|ipod/i.test(ua)\n  }\n  if (isIos() && e.persisted) {\n    window.location.reload(true)\n  }\n}\n```\n\n简单来说，通过监听 `pageshow` 事件，判断 `event.persisted` 当前页面是否是读取缓存，来决定是否进行刷新。上面代码放置在公共 js 里，全站后退问题均可解决。\n\n不过这样做有个小问题，页面先进行了后退，显示了历史数据，然后 js 执行了页面刷新，看到了浏览器进度条。由于服务器及网络原因，需要几秒时间。\n\n这个刷新动作能不能优化呢？我认为还是有空间的。比如有的页面，明确就是需要刷新某一个接口数据即可。\n\n那么我们可以对其进行调整，比如执行全局方法 `historyBack`，根据返回值来决定是否进行全页面刷新。\n\n```js\n// 全局代码\nwindow.onpageshow = function (e) {\n  var isIos = function () {\n    var ua = window.navigator.userAgent\n    return /iphone|ipad|ipod/i.test(ua)\n  }\n  if (isIos() && e.persisted) {\n    var cb = window.historyBack\n    if(typeof cb === 'function') {\n      if(cb()) {\n        window.location.reload(true)        \n      }\n    } else {\n      window.location.reload(true)\n    }\n  }\n}\n```\n\n```js\n// 页面代码\nvar page = {\n  getData: function() {\n    ajax().then(function(json){\n      this.render(json)\n    })\n  },\n  render: function(){},\n  init: function(){ this.getData() }\n}\npage.init()\n\nwindow.historyBack = function() {\n  page.getData()\n  return false // 阻止全局刷新\n}\n```\n这样是我目前能想到的比较好的处理方法。可以全局配置默认强制刷新代码，每个页面也支持自定义刷新方案。代码量还不算太多。\n\n--END--\n","slug":"2018-2018-11-21-ios-history-back","published":1,"updated":"2019-07-18T17:19:07.073Z","comments":1,"photos":[],"link":"","_id":"cjy8y72t60056s21dod7wy34w","content":"<p>今天偶遇一个问题：iOS 10 safari 浏览器中，后退后，页面 js 没有运行。</p>\n<p>之前也遇到过这个问题，因为加入风控的代码，就好了。就没有深究。这次发现，风控的代码不好使了😂。也可能是这次 iOS 版本问题，之前没有测试过 iOS 10 系统。</p>\n<a id=\"more\"></a>\n\n<p>网上搜索之，整理方案如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onpageshow = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> isIos = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ua = <span class=\"built_in\">window</span>.navigator.userAgent</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"regexp\">/iphone|ipad|ipod/i</span>.test(ua)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isIos() &amp;&amp; e.persisted) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.location.reload(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单来说，通过监听 <code>pageshow</code> 事件，判断 <code>event.persisted</code> 当前页面是否是读取缓存，来决定是否进行刷新。上面代码放置在公共 js 里，全站后退问题均可解决。</p>\n<p>不过这样做有个小问题，页面先进行了后退，显示了历史数据，然后 js 执行了页面刷新，看到了浏览器进度条。由于服务器及网络原因，需要几秒时间。</p>\n<p>这个刷新动作能不能优化呢？我认为还是有空间的。比如有的页面，明确就是需要刷新某一个接口数据即可。</p>\n<p>那么我们可以对其进行调整，比如执行全局方法 <code>historyBack</code>，根据返回值来决定是否进行全页面刷新。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全局代码</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onpageshow = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> isIos = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ua = <span class=\"built_in\">window</span>.navigator.userAgent</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"regexp\">/iphone|ipad|ipod/i</span>.test(ua)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isIos() &amp;&amp; e.persisted) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cb = <span class=\"built_in\">window</span>.historyBack</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> cb === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(cb()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.location.reload(<span class=\"literal\">true</span>)        </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.location.reload(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 页面代码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> page = &#123;</span><br><span class=\"line\">  getData: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    ajax().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.render(json)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</span><br><span class=\"line\">  init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">this</span>.getData() &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">page.init()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.historyBack = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  page.getData()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"comment\">// 阻止全局刷新</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样是我目前能想到的比较好的处理方法。可以全局配置默认强制刷新代码，每个页面也支持自定义刷新方案。代码量还不算太多。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>今天偶遇一个问题：iOS 10 safari 浏览器中，后退后，页面 js 没有运行。</p>\n<p>之前也遇到过这个问题，因为加入风控的代码，就好了。就没有深究。这次发现，风控的代码不好使了😂。也可能是这次 iOS 版本问题，之前没有测试过 iOS 10 系统。</p>","more":"<p>网上搜索之，整理方案如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onpageshow = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> isIos = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ua = <span class=\"built_in\">window</span>.navigator.userAgent</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"regexp\">/iphone|ipad|ipod/i</span>.test(ua)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isIos() &amp;&amp; e.persisted) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.location.reload(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单来说，通过监听 <code>pageshow</code> 事件，判断 <code>event.persisted</code> 当前页面是否是读取缓存，来决定是否进行刷新。上面代码放置在公共 js 里，全站后退问题均可解决。</p>\n<p>不过这样做有个小问题，页面先进行了后退，显示了历史数据，然后 js 执行了页面刷新，看到了浏览器进度条。由于服务器及网络原因，需要几秒时间。</p>\n<p>这个刷新动作能不能优化呢？我认为还是有空间的。比如有的页面，明确就是需要刷新某一个接口数据即可。</p>\n<p>那么我们可以对其进行调整，比如执行全局方法 <code>historyBack</code>，根据返回值来决定是否进行全页面刷新。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全局代码</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onpageshow = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> isIos = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ua = <span class=\"built_in\">window</span>.navigator.userAgent</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"regexp\">/iphone|ipad|ipod/i</span>.test(ua)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isIos() &amp;&amp; e.persisted) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cb = <span class=\"built_in\">window</span>.historyBack</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> cb === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(cb()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.location.reload(<span class=\"literal\">true</span>)        </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.location.reload(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 页面代码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> page = &#123;</span><br><span class=\"line\">  getData: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    ajax().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.render(json)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</span><br><span class=\"line\">  init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">this</span>.getData() &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">page.init()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.historyBack = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  page.getData()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"comment\">// 阻止全局刷新</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样是我目前能想到的比较好的处理方法。可以全局配置默认强制刷新代码，每个页面也支持自定义刷新方案。代码量还不算太多。</p>\n<p>–END–</p>"},{"layout":"post","title":"Yarn的安装与升级","date":"2018-11-18T13:06:00.000Z","_content":"\n平时在 windows 和 MacOS 下做开发，需要在两个系统中安装 yarn，可是每次 windows 都可以方便的更新，而 MacOS 却难难升级。特此记录下升级方案。\n\n<!-- more -->\n\n## windows \n\nwindows 比较容易，不论安装还是升级，都可以直接下载 MSI 安装包即可。\n\n官网下载地址：\n\n```\nhttps://yarnpkg.com/latest.msi\n```\n\n也可以访问 github releases 页，下载地址：\n\n```\nhttps://github.com/yarnpkg/yarn/releases\n```\n\n## macOS\n\n苹果看似容易，其实还是很难安装和更新的。\n\n最简单的方法，直接通过 brew 安装：\n\n```\nbrew install yarn\n```\n\n由于一些原因，速度非常慢，需要切换源。而且我发现安装的包可能不是最新版。\n\n所以比较推荐脚本安装：\n\n```\ncurl -o- -L https://yarnpkg.com/install.sh | bash\n```\n\n这样安装，每次都可以保证是最新包。\n\n同样的，建议每次安装新包，不要使用 brew 进行升级。\n\n## Debian / Ubuntu\n\n基于 Debian 的 linux 也比较方便，直接输入命令：\n\n```\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\n```\n\n之后即可安装：\n\n```\nsudo apt-get update && sudo apt-get install yarn\n```\n\n反正记住不使用 apt 进行安装就好，apt 安装的版本不是最新版，我目测和 MacOS 版本 brew 安装的差不多。\n\n--END--","source":"_posts/2018/2018-11-18-yarn.md","raw":"---\nlayout: post\ntitle: Yarn的安装与升级\ndate: 2018-11-18 13:06:00 GMT+0000\ncategories: [前端]\ntags:  [yarn]\n---\n\n平时在 windows 和 MacOS 下做开发，需要在两个系统中安装 yarn，可是每次 windows 都可以方便的更新，而 MacOS 却难难升级。特此记录下升级方案。\n\n<!-- more -->\n\n## windows \n\nwindows 比较容易，不论安装还是升级，都可以直接下载 MSI 安装包即可。\n\n官网下载地址：\n\n```\nhttps://yarnpkg.com/latest.msi\n```\n\n也可以访问 github releases 页，下载地址：\n\n```\nhttps://github.com/yarnpkg/yarn/releases\n```\n\n## macOS\n\n苹果看似容易，其实还是很难安装和更新的。\n\n最简单的方法，直接通过 brew 安装：\n\n```\nbrew install yarn\n```\n\n由于一些原因，速度非常慢，需要切换源。而且我发现安装的包可能不是最新版。\n\n所以比较推荐脚本安装：\n\n```\ncurl -o- -L https://yarnpkg.com/install.sh | bash\n```\n\n这样安装，每次都可以保证是最新包。\n\n同样的，建议每次安装新包，不要使用 brew 进行升级。\n\n## Debian / Ubuntu\n\n基于 Debian 的 linux 也比较方便，直接输入命令：\n\n```\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\n```\n\n之后即可安装：\n\n```\nsudo apt-get update && sudo apt-get install yarn\n```\n\n反正记住不使用 apt 进行安装就好，apt 安装的版本不是最新版，我目测和 MacOS 版本 brew 安装的差不多。\n\n--END--","slug":"2018-2018-11-18-yarn","published":1,"updated":"2019-07-18T17:19:07.117Z","comments":1,"photos":[],"link":"","_id":"cjy8y72t80059s21d0bjcry70","content":"<p>平时在 windows 和 MacOS 下做开发，需要在两个系统中安装 yarn，可是每次 windows 都可以方便的更新，而 MacOS 却难难升级。特此记录下升级方案。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h2><p>windows 比较容易，不论安装还是升级，都可以直接下载 MSI 安装包即可。</p>\n<p>官网下载地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://yarnpkg.com/latest.msi</span><br></pre></td></tr></table></figure>\n\n<p>也可以访问 github releases 页，下载地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/yarnpkg/yarn/releases</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"macOS\"><a href=\"#macOS\" class=\"headerlink\" title=\"macOS\"></a>macOS</h2><p>苹果看似容易，其实还是很难安装和更新的。</p>\n<p>最简单的方法，直接通过 brew 安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install yarn</span><br></pre></td></tr></table></figure>\n\n<p>由于一些原因，速度非常慢，需要切换源。而且我发现安装的包可能不是最新版。</p>\n<p>所以比较推荐脚本安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- -L https://yarnpkg.com/install.sh | bash</span><br></pre></td></tr></table></figure>\n\n<p>这样安装，每次都可以保证是最新包。</p>\n<p>同样的，建议每次安装新包，不要使用 brew 进行升级。</p>\n<h2 id=\"Debian-Ubuntu\"><a href=\"#Debian-Ubuntu\" class=\"headerlink\" title=\"Debian / Ubuntu\"></a>Debian / Ubuntu</h2><p>基于 Debian 的 linux 也比较方便，直接输入命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -</span><br><span class=\"line\">echo &quot;deb https://dl.yarnpkg.com/debian/ stable main&quot; | sudo tee /etc/apt/sources.list.d/yarn.list</span><br></pre></td></tr></table></figure>\n\n<p>之后即可安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update &amp;&amp; sudo apt-get install yarn</span><br></pre></td></tr></table></figure>\n\n<p>反正记住不使用 apt 进行安装就好，apt 安装的版本不是最新版，我目测和 MacOS 版本 brew 安装的差不多。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>平时在 windows 和 MacOS 下做开发，需要在两个系统中安装 yarn，可是每次 windows 都可以方便的更新，而 MacOS 却难难升级。特此记录下升级方案。</p>","more":"<h2 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h2><p>windows 比较容易，不论安装还是升级，都可以直接下载 MSI 安装包即可。</p>\n<p>官网下载地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://yarnpkg.com/latest.msi</span><br></pre></td></tr></table></figure>\n\n<p>也可以访问 github releases 页，下载地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/yarnpkg/yarn/releases</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"macOS\"><a href=\"#macOS\" class=\"headerlink\" title=\"macOS\"></a>macOS</h2><p>苹果看似容易，其实还是很难安装和更新的。</p>\n<p>最简单的方法，直接通过 brew 安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install yarn</span><br></pre></td></tr></table></figure>\n\n<p>由于一些原因，速度非常慢，需要切换源。而且我发现安装的包可能不是最新版。</p>\n<p>所以比较推荐脚本安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- -L https://yarnpkg.com/install.sh | bash</span><br></pre></td></tr></table></figure>\n\n<p>这样安装，每次都可以保证是最新包。</p>\n<p>同样的，建议每次安装新包，不要使用 brew 进行升级。</p>\n<h2 id=\"Debian-Ubuntu\"><a href=\"#Debian-Ubuntu\" class=\"headerlink\" title=\"Debian / Ubuntu\"></a>Debian / Ubuntu</h2><p>基于 Debian 的 linux 也比较方便，直接输入命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -</span><br><span class=\"line\">echo &quot;deb https://dl.yarnpkg.com/debian/ stable main&quot; | sudo tee /etc/apt/sources.list.d/yarn.list</span><br></pre></td></tr></table></figure>\n\n<p>之后即可安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update &amp;&amp; sudo apt-get install yarn</span><br></pre></td></tr></table></figure>\n\n<p>反正记住不使用 apt 进行安装就好，apt 安装的版本不是最新版，我目测和 MacOS 版本 brew 安装的差不多。</p>\n<p>–END–</p>"},{"layout":"post","title":"mac 下的剪贴板增强工具","date":"2018-11-30T23:03:00.000Z","_content":"\n不知为何，突然想起了很久以前用过的一个剪贴板历史记录工具。找了半天，才查到了名字，下载使用。不过我发现它这些年都没有更新，也就顺势找了找类似的软件。\n\n那就做一个入门了解下吧。\n\n<!-- more -->\n\n## 1Clipboard\n\n![1Clipboard](https://cdn0.yukapril.com/blog/2018-11-30-paste-1clipboard-1.png-wm.black)\n\n\n官网：[http://1clipboard.io](http://1clipboard.io)\n\n1Clipboard 首先是免费，据说和大名鼎鼎的 1password 是一家公司开发的。质量上还是不错的。\n\n每次复制后，会自动存到列表里。可以对剪贴板内容进行 star 收藏，但是只有一个收藏分组。默认快捷键可以激活列表，貌似需要鼠标点击才能复制。\n\n![1Clipboard](https://cdn0.yukapril.com/blog/2018-11-30-paste-1clipboard-2.png-wm.black)\n\n体验挺好的，我觉得适合作为剪贴板历史查看工具，而且支持图片等复制。\n\n优点：\n\n* 免费\n* 支持图片等内容\n* 支持搜索\n* 支持 windows 和 macOS\n* 记录内容无上限*\n\n缺点：\n\n* 基于 electron 技术，前端打包的应用。尺寸较大。极个别时候可能监听不到复制（因为用得多才遇到这个问题）\n* 只能快捷键到查看列表，数字快捷到选中，最后还需要 <kbd>Command</kbd> + <kbd>V</kbd> 进行粘贴到内容区域，略显繁琐\n* 不能同步（至少这些年我没成功过）\n* 记录内容无上限*\n\n适合：\n\n如果你平时拿它用来记录剪贴板内容，那么我认为非常适合。比如群里面发过来的一段内容（比如接口文档），暂时用不到（一会再用），可以先复制起来。到时候直接在 1Clipboard 里面查看下就好。\n\n但是作为频繁复制粘贴来说，快捷键稍微繁琐了点。必须选中后，在手动粘贴一次，而不是自动贴到内容区域。\n\n至于记录内容长度，他是没有限制的，也就是说，要么一条条手动删除，要么把重要的收藏，剩余全部清除。没办法进行删除一周以前这种操作。\n\n最后，他利用 google 同步，先不说咱们国内能不能访问，就算能访问到，我一样没成功过（登录成功，软件没有识别登录）。\n\n## Clipy \n\n![Clipy](https://cdn0.yukapril.com/blog/2018-11-30-paste-clipy-1.png-wm.black)\n\n官网：[https://clipy-app.com](https://clipy-app.com)\n\ngithub：[https://github.com/Clipy/Clipy](https://github.com/Clipy/Clipy)\n\n开源的软件，据说基于一个很有名的剪贴板工具改进出来的。非常好用。\n\n![Clipy](https://cdn0.yukapril.com/blog/2018-11-30-paste-clipy-2.png-wm.black)\n\n优点：\n* 开源\n* 速度快\n* 按三次按键完成粘贴，或者一次快捷键加一次鼠标\n* 可以多栏目进行收藏\n\n缺点：\n* 只支持文本格式\n* 不能搜索\n\n适合：\n\n如果你只需要文本格式剪贴板增强，那么直接选择它就没错了。除了不支持图片等复杂格式外，风格大众化，常用功能都有，还免费。没有理由不选择。\n\n## Paste \n\n![Paste](https://cdn0.yukapril.com/blog/2018-11-30-paste-paste-1.jpg-wm.black)\n\n官网： [https://pasteapp.me](https://pasteapp.me)\n\n费用：¥14.99 / ¥98\n\n剪贴板增强工具里面，收费软件里面非常出名，一般经常叫做 Paste 2。\n\n确实质量很高，尤其是使用体验上面，可以算是目前剪贴板增强工具里颜值最高的。\n\n![Paste](https://cdn0.yukapril.com/blog/2018-11-30-paste-paste-2.png-wm.black)\n\n优点：\n* 界面最漂亮\n* 支持图片等多种格式\n* 长文本内容预览效果极佳\n* 按两次按键完成粘贴，或者一次快捷键加一次鼠标\n* 可以多栏目进行收藏\n* 支持搜索\n* 可以手机端同步\n\n缺点：\n* 效果太好看，有时候会卡\n* 在屏幕下面显示，13寸笔记本只能显示不到6个栏目\n\n适合：\n\n如果愿意花钱的话，非常适合使用。我稍微使用了下，就习惯了它的操作。虽然听网上有人说快捷键位置设计很变态，但我觉得还是挺舒服的。比起这篇文章里的其他 APP，我觉得快捷键最好记。\n\n支持的格式非常多，基本上都能复制显示出来，显示效果也非常好。Paste 支持试用，如果你的机器不卡，剪贴板要求较高一点，建议花钱买这个 APP。\n\n## iPaste\n\n![iPaste](https://cdn0.yukapril.com/blog/2018-11-30-paste-ipaste-1.jpg-wm.black)\n\niPaste 免费下载使用，高级功能收费。费用 ¥50。免费版本只能记录3条，不支持分组收藏。\n\n因为免费版功能相对薄弱，我也没买，但是感觉和免费的 Clipy 差不太多。唯独 iPaste 可以支持图片等复杂的格式。使用上，也没办法进行2步粘贴。不知道是卡还是什么原因，操作不是很顺畅，还需要手动 <kbd>Command</kbd> + <kbd>V</kbd>，而且还需要鼠标在点选一下内容区域...好尴尬...\n\n## pin\n\n![pin](https://cdn0.yukapril.com/blog/2018-11-30-paste-pin-1.png-wm.black)\n\n官网： [http://ioszen.com/pin](http://ioszen.com/pin)\n\n\n价格：¥30文本支持拖拽操作Pin - 剪贴板扩展\n\niOS 上非常有名的剪贴板增强工具，推出了 macOS 版本。和 iOS 功能类似，主要提供扩展能力。操作上，我学了很久才会使用...\n\n和 iOS 类似，首先要复制的信息，然后打开动作面板（<kbd>Ctrl</kbd> + <kbd>Command</kbd> + <kbd>X</kbd>）然后选择你要的动作。\n\n这个动作默认提供了不少，但是有价值的却不太多。主要都是搜索、打开之类，而且看样子没有人维护，也就是没办法去找需要的动作，不像 iOS 的 pin 维护那么勤快。\n\n功能上也比较中规中矩，默认列表和 1Clipboard 类似，还不能分组收藏。同时它提供 Clipy 风格的鼠标跟随展示，方便进行粘贴。和免费的 Clipy 一样，他也处理不了图片之类的内容，最多是帮你复制图片的地址。\n\n非要说特色的话就是能够和 iOS 同步，iOS 端 pin能力还不错。但是 Paste iOS 端可是免费的啊（并且苹果 macOS 和 iOS 系统本身就可以同步剪切板）。只不过 Paste 98 元一套，它的套装大概是 48 元，而且移动端 pin 确实功能还是可以的。\n\n所以 pin 真心不太推荐，除非是已经购买了移动端 pin，并且对“动作”非常依赖，否则我更建议换成 Paste。\n\n## 小结\n\n本次体验来看，如果你基本上没有啥需求，就是希望收集剪贴板历史记录，推荐 1Clipboard（免费）。\n\n如果希望能提升复制粘贴效率，平时主要是文字之类，可以先用用 Clipy（免费）。\n\n如果不满足于此，那么建议花钱买 Paste（98元）。\n\n其余的 APP，我觉得没那么顺手，但是你也可以下载试试。或许符合你的胃口。\n\n如果希望 macOS 和iOS 能进行同步，如果用的次数很少，建议用系统自带的复制粘贴。当然也可以 QQ、微信 什么的。或者买了 Paste 的也可以使用它的同步。\n\n总之建议先免费，看看自己是不是有这个需求，需求多了再根据自己的实际情况考虑转向收费。\n\n--END--","source":"_posts/2018/2018-11-30-paste.md","raw":"---\nlayout: post\ntitle: mac 下的剪贴板增强工具\ndate: 2018-11-30 23:03:00 GMT+0000\ncategories: [软件]\ntags:  [1Clipboard,Clipy,Paste,iPaste,Pin]\n---\n\n不知为何，突然想起了很久以前用过的一个剪贴板历史记录工具。找了半天，才查到了名字，下载使用。不过我发现它这些年都没有更新，也就顺势找了找类似的软件。\n\n那就做一个入门了解下吧。\n\n<!-- more -->\n\n## 1Clipboard\n\n![1Clipboard](https://cdn0.yukapril.com/blog/2018-11-30-paste-1clipboard-1.png-wm.black)\n\n\n官网：[http://1clipboard.io](http://1clipboard.io)\n\n1Clipboard 首先是免费，据说和大名鼎鼎的 1password 是一家公司开发的。质量上还是不错的。\n\n每次复制后，会自动存到列表里。可以对剪贴板内容进行 star 收藏，但是只有一个收藏分组。默认快捷键可以激活列表，貌似需要鼠标点击才能复制。\n\n![1Clipboard](https://cdn0.yukapril.com/blog/2018-11-30-paste-1clipboard-2.png-wm.black)\n\n体验挺好的，我觉得适合作为剪贴板历史查看工具，而且支持图片等复制。\n\n优点：\n\n* 免费\n* 支持图片等内容\n* 支持搜索\n* 支持 windows 和 macOS\n* 记录内容无上限*\n\n缺点：\n\n* 基于 electron 技术，前端打包的应用。尺寸较大。极个别时候可能监听不到复制（因为用得多才遇到这个问题）\n* 只能快捷键到查看列表，数字快捷到选中，最后还需要 <kbd>Command</kbd> + <kbd>V</kbd> 进行粘贴到内容区域，略显繁琐\n* 不能同步（至少这些年我没成功过）\n* 记录内容无上限*\n\n适合：\n\n如果你平时拿它用来记录剪贴板内容，那么我认为非常适合。比如群里面发过来的一段内容（比如接口文档），暂时用不到（一会再用），可以先复制起来。到时候直接在 1Clipboard 里面查看下就好。\n\n但是作为频繁复制粘贴来说，快捷键稍微繁琐了点。必须选中后，在手动粘贴一次，而不是自动贴到内容区域。\n\n至于记录内容长度，他是没有限制的，也就是说，要么一条条手动删除，要么把重要的收藏，剩余全部清除。没办法进行删除一周以前这种操作。\n\n最后，他利用 google 同步，先不说咱们国内能不能访问，就算能访问到，我一样没成功过（登录成功，软件没有识别登录）。\n\n## Clipy \n\n![Clipy](https://cdn0.yukapril.com/blog/2018-11-30-paste-clipy-1.png-wm.black)\n\n官网：[https://clipy-app.com](https://clipy-app.com)\n\ngithub：[https://github.com/Clipy/Clipy](https://github.com/Clipy/Clipy)\n\n开源的软件，据说基于一个很有名的剪贴板工具改进出来的。非常好用。\n\n![Clipy](https://cdn0.yukapril.com/blog/2018-11-30-paste-clipy-2.png-wm.black)\n\n优点：\n* 开源\n* 速度快\n* 按三次按键完成粘贴，或者一次快捷键加一次鼠标\n* 可以多栏目进行收藏\n\n缺点：\n* 只支持文本格式\n* 不能搜索\n\n适合：\n\n如果你只需要文本格式剪贴板增强，那么直接选择它就没错了。除了不支持图片等复杂格式外，风格大众化，常用功能都有，还免费。没有理由不选择。\n\n## Paste \n\n![Paste](https://cdn0.yukapril.com/blog/2018-11-30-paste-paste-1.jpg-wm.black)\n\n官网： [https://pasteapp.me](https://pasteapp.me)\n\n费用：¥14.99 / ¥98\n\n剪贴板增强工具里面，收费软件里面非常出名，一般经常叫做 Paste 2。\n\n确实质量很高，尤其是使用体验上面，可以算是目前剪贴板增强工具里颜值最高的。\n\n![Paste](https://cdn0.yukapril.com/blog/2018-11-30-paste-paste-2.png-wm.black)\n\n优点：\n* 界面最漂亮\n* 支持图片等多种格式\n* 长文本内容预览效果极佳\n* 按两次按键完成粘贴，或者一次快捷键加一次鼠标\n* 可以多栏目进行收藏\n* 支持搜索\n* 可以手机端同步\n\n缺点：\n* 效果太好看，有时候会卡\n* 在屏幕下面显示，13寸笔记本只能显示不到6个栏目\n\n适合：\n\n如果愿意花钱的话，非常适合使用。我稍微使用了下，就习惯了它的操作。虽然听网上有人说快捷键位置设计很变态，但我觉得还是挺舒服的。比起这篇文章里的其他 APP，我觉得快捷键最好记。\n\n支持的格式非常多，基本上都能复制显示出来，显示效果也非常好。Paste 支持试用，如果你的机器不卡，剪贴板要求较高一点，建议花钱买这个 APP。\n\n## iPaste\n\n![iPaste](https://cdn0.yukapril.com/blog/2018-11-30-paste-ipaste-1.jpg-wm.black)\n\niPaste 免费下载使用，高级功能收费。费用 ¥50。免费版本只能记录3条，不支持分组收藏。\n\n因为免费版功能相对薄弱，我也没买，但是感觉和免费的 Clipy 差不太多。唯独 iPaste 可以支持图片等复杂的格式。使用上，也没办法进行2步粘贴。不知道是卡还是什么原因，操作不是很顺畅，还需要手动 <kbd>Command</kbd> + <kbd>V</kbd>，而且还需要鼠标在点选一下内容区域...好尴尬...\n\n## pin\n\n![pin](https://cdn0.yukapril.com/blog/2018-11-30-paste-pin-1.png-wm.black)\n\n官网： [http://ioszen.com/pin](http://ioszen.com/pin)\n\n\n价格：¥30文本支持拖拽操作Pin - 剪贴板扩展\n\niOS 上非常有名的剪贴板增强工具，推出了 macOS 版本。和 iOS 功能类似，主要提供扩展能力。操作上，我学了很久才会使用...\n\n和 iOS 类似，首先要复制的信息，然后打开动作面板（<kbd>Ctrl</kbd> + <kbd>Command</kbd> + <kbd>X</kbd>）然后选择你要的动作。\n\n这个动作默认提供了不少，但是有价值的却不太多。主要都是搜索、打开之类，而且看样子没有人维护，也就是没办法去找需要的动作，不像 iOS 的 pin 维护那么勤快。\n\n功能上也比较中规中矩，默认列表和 1Clipboard 类似，还不能分组收藏。同时它提供 Clipy 风格的鼠标跟随展示，方便进行粘贴。和免费的 Clipy 一样，他也处理不了图片之类的内容，最多是帮你复制图片的地址。\n\n非要说特色的话就是能够和 iOS 同步，iOS 端 pin能力还不错。但是 Paste iOS 端可是免费的啊（并且苹果 macOS 和 iOS 系统本身就可以同步剪切板）。只不过 Paste 98 元一套，它的套装大概是 48 元，而且移动端 pin 确实功能还是可以的。\n\n所以 pin 真心不太推荐，除非是已经购买了移动端 pin，并且对“动作”非常依赖，否则我更建议换成 Paste。\n\n## 小结\n\n本次体验来看，如果你基本上没有啥需求，就是希望收集剪贴板历史记录，推荐 1Clipboard（免费）。\n\n如果希望能提升复制粘贴效率，平时主要是文字之类，可以先用用 Clipy（免费）。\n\n如果不满足于此，那么建议花钱买 Paste（98元）。\n\n其余的 APP，我觉得没那么顺手，但是你也可以下载试试。或许符合你的胃口。\n\n如果希望 macOS 和iOS 能进行同步，如果用的次数很少，建议用系统自带的复制粘贴。当然也可以 QQ、微信 什么的。或者买了 Paste 的也可以使用它的同步。\n\n总之建议先免费，看看自己是不是有这个需求，需求多了再根据自己的实际情况考虑转向收费。\n\n--END--","slug":"2018-2018-11-30-paste","published":1,"updated":"2019-07-18T17:19:07.189Z","comments":1,"photos":[],"link":"","_id":"cjy8y72t9005cs21dy5mg0d9q","content":"<p>不知为何，突然想起了很久以前用过的一个剪贴板历史记录工具。找了半天，才查到了名字，下载使用。不过我发现它这些年都没有更新，也就顺势找了找类似的软件。</p>\n<p>那就做一个入门了解下吧。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"1Clipboard\"><a href=\"#1Clipboard\" class=\"headerlink\" title=\"1Clipboard\"></a>1Clipboard</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-1clipboard-1.png-wm.black\" alt=\"1Clipboard\"></p>\n<p>官网：<a href=\"http://1clipboard.io\" target=\"_blank\" rel=\"noopener\">http://1clipboard.io</a></p>\n<p>1Clipboard 首先是免费，据说和大名鼎鼎的 1password 是一家公司开发的。质量上还是不错的。</p>\n<p>每次复制后，会自动存到列表里。可以对剪贴板内容进行 star 收藏，但是只有一个收藏分组。默认快捷键可以激活列表，貌似需要鼠标点击才能复制。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-1clipboard-2.png-wm.black\" alt=\"1Clipboard\"></p>\n<p>体验挺好的，我觉得适合作为剪贴板历史查看工具，而且支持图片等复制。</p>\n<p>优点：</p>\n<ul>\n<li>免费</li>\n<li>支持图片等内容</li>\n<li>支持搜索</li>\n<li>支持 windows 和 macOS</li>\n<li>记录内容无上限*</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>基于 electron 技术，前端打包的应用。尺寸较大。极个别时候可能监听不到复制（因为用得多才遇到这个问题）</li>\n<li>只能快捷键到查看列表，数字快捷到选中，最后还需要 <kbd>Command</kbd> + <kbd>V</kbd> 进行粘贴到内容区域，略显繁琐</li>\n<li>不能同步（至少这些年我没成功过）</li>\n<li>记录内容无上限*</li>\n</ul>\n<p>适合：</p>\n<p>如果你平时拿它用来记录剪贴板内容，那么我认为非常适合。比如群里面发过来的一段内容（比如接口文档），暂时用不到（一会再用），可以先复制起来。到时候直接在 1Clipboard 里面查看下就好。</p>\n<p>但是作为频繁复制粘贴来说，快捷键稍微繁琐了点。必须选中后，在手动粘贴一次，而不是自动贴到内容区域。</p>\n<p>至于记录内容长度，他是没有限制的，也就是说，要么一条条手动删除，要么把重要的收藏，剩余全部清除。没办法进行删除一周以前这种操作。</p>\n<p>最后，他利用 google 同步，先不说咱们国内能不能访问，就算能访问到，我一样没成功过（登录成功，软件没有识别登录）。</p>\n<h2 id=\"Clipy\"><a href=\"#Clipy\" class=\"headerlink\" title=\"Clipy\"></a>Clipy</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-clipy-1.png-wm.black\" alt=\"Clipy\"></p>\n<p>官网：<a href=\"https://clipy-app.com\" target=\"_blank\" rel=\"noopener\">https://clipy-app.com</a></p>\n<p>github：<a href=\"https://github.com/Clipy/Clipy\" target=\"_blank\" rel=\"noopener\">https://github.com/Clipy/Clipy</a></p>\n<p>开源的软件，据说基于一个很有名的剪贴板工具改进出来的。非常好用。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-clipy-2.png-wm.black\" alt=\"Clipy\"></p>\n<p>优点：</p>\n<ul>\n<li>开源</li>\n<li>速度快</li>\n<li>按三次按键完成粘贴，或者一次快捷键加一次鼠标</li>\n<li>可以多栏目进行收藏</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>只支持文本格式</li>\n<li>不能搜索</li>\n</ul>\n<p>适合：</p>\n<p>如果你只需要文本格式剪贴板增强，那么直接选择它就没错了。除了不支持图片等复杂格式外，风格大众化，常用功能都有，还免费。没有理由不选择。</p>\n<h2 id=\"Paste\"><a href=\"#Paste\" class=\"headerlink\" title=\"Paste\"></a>Paste</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-paste-1.jpg-wm.black\" alt=\"Paste\"></p>\n<p>官网： <a href=\"https://pasteapp.me\" target=\"_blank\" rel=\"noopener\">https://pasteapp.me</a></p>\n<p>费用：¥14.99 / ¥98</p>\n<p>剪贴板增强工具里面，收费软件里面非常出名，一般经常叫做 Paste 2。</p>\n<p>确实质量很高，尤其是使用体验上面，可以算是目前剪贴板增强工具里颜值最高的。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-paste-2.png-wm.black\" alt=\"Paste\"></p>\n<p>优点：</p>\n<ul>\n<li>界面最漂亮</li>\n<li>支持图片等多种格式</li>\n<li>长文本内容预览效果极佳</li>\n<li>按两次按键完成粘贴，或者一次快捷键加一次鼠标</li>\n<li>可以多栏目进行收藏</li>\n<li>支持搜索</li>\n<li>可以手机端同步</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>效果太好看，有时候会卡</li>\n<li>在屏幕下面显示，13寸笔记本只能显示不到6个栏目</li>\n</ul>\n<p>适合：</p>\n<p>如果愿意花钱的话，非常适合使用。我稍微使用了下，就习惯了它的操作。虽然听网上有人说快捷键位置设计很变态，但我觉得还是挺舒服的。比起这篇文章里的其他 APP，我觉得快捷键最好记。</p>\n<p>支持的格式非常多，基本上都能复制显示出来，显示效果也非常好。Paste 支持试用，如果你的机器不卡，剪贴板要求较高一点，建议花钱买这个 APP。</p>\n<h2 id=\"iPaste\"><a href=\"#iPaste\" class=\"headerlink\" title=\"iPaste\"></a>iPaste</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-ipaste-1.jpg-wm.black\" alt=\"iPaste\"></p>\n<p>iPaste 免费下载使用，高级功能收费。费用 ¥50。免费版本只能记录3条，不支持分组收藏。</p>\n<p>因为免费版功能相对薄弱，我也没买，但是感觉和免费的 Clipy 差不太多。唯独 iPaste 可以支持图片等复杂的格式。使用上，也没办法进行2步粘贴。不知道是卡还是什么原因，操作不是很顺畅，还需要手动 <kbd>Command</kbd> + <kbd>V</kbd>，而且还需要鼠标在点选一下内容区域…好尴尬…</p>\n<h2 id=\"pin\"><a href=\"#pin\" class=\"headerlink\" title=\"pin\"></a>pin</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-pin-1.png-wm.black\" alt=\"pin\"></p>\n<p>官网： <a href=\"http://ioszen.com/pin\" target=\"_blank\" rel=\"noopener\">http://ioszen.com/pin</a></p>\n<p>价格：¥30文本支持拖拽操作Pin - 剪贴板扩展</p>\n<p>iOS 上非常有名的剪贴板增强工具，推出了 macOS 版本。和 iOS 功能类似，主要提供扩展能力。操作上，我学了很久才会使用…</p>\n<p>和 iOS 类似，首先要复制的信息，然后打开动作面板（<kbd>Ctrl</kbd> + <kbd>Command</kbd> + <kbd>X</kbd>）然后选择你要的动作。</p>\n<p>这个动作默认提供了不少，但是有价值的却不太多。主要都是搜索、打开之类，而且看样子没有人维护，也就是没办法去找需要的动作，不像 iOS 的 pin 维护那么勤快。</p>\n<p>功能上也比较中规中矩，默认列表和 1Clipboard 类似，还不能分组收藏。同时它提供 Clipy 风格的鼠标跟随展示，方便进行粘贴。和免费的 Clipy 一样，他也处理不了图片之类的内容，最多是帮你复制图片的地址。</p>\n<p>非要说特色的话就是能够和 iOS 同步，iOS 端 pin能力还不错。但是 Paste iOS 端可是免费的啊（并且苹果 macOS 和 iOS 系统本身就可以同步剪切板）。只不过 Paste 98 元一套，它的套装大概是 48 元，而且移动端 pin 确实功能还是可以的。</p>\n<p>所以 pin 真心不太推荐，除非是已经购买了移动端 pin，并且对“动作”非常依赖，否则我更建议换成 Paste。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本次体验来看，如果你基本上没有啥需求，就是希望收集剪贴板历史记录，推荐 1Clipboard（免费）。</p>\n<p>如果希望能提升复制粘贴效率，平时主要是文字之类，可以先用用 Clipy（免费）。</p>\n<p>如果不满足于此，那么建议花钱买 Paste（98元）。</p>\n<p>其余的 APP，我觉得没那么顺手，但是你也可以下载试试。或许符合你的胃口。</p>\n<p>如果希望 macOS 和iOS 能进行同步，如果用的次数很少，建议用系统自带的复制粘贴。当然也可以 QQ、微信 什么的。或者买了 Paste 的也可以使用它的同步。</p>\n<p>总之建议先免费，看看自己是不是有这个需求，需求多了再根据自己的实际情况考虑转向收费。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>不知为何，突然想起了很久以前用过的一个剪贴板历史记录工具。找了半天，才查到了名字，下载使用。不过我发现它这些年都没有更新，也就顺势找了找类似的软件。</p>\n<p>那就做一个入门了解下吧。</p>","more":"<h2 id=\"1Clipboard\"><a href=\"#1Clipboard\" class=\"headerlink\" title=\"1Clipboard\"></a>1Clipboard</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-1clipboard-1.png-wm.black\" alt=\"1Clipboard\"></p>\n<p>官网：<a href=\"http://1clipboard.io\" target=\"_blank\" rel=\"noopener\">http://1clipboard.io</a></p>\n<p>1Clipboard 首先是免费，据说和大名鼎鼎的 1password 是一家公司开发的。质量上还是不错的。</p>\n<p>每次复制后，会自动存到列表里。可以对剪贴板内容进行 star 收藏，但是只有一个收藏分组。默认快捷键可以激活列表，貌似需要鼠标点击才能复制。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-1clipboard-2.png-wm.black\" alt=\"1Clipboard\"></p>\n<p>体验挺好的，我觉得适合作为剪贴板历史查看工具，而且支持图片等复制。</p>\n<p>优点：</p>\n<ul>\n<li>免费</li>\n<li>支持图片等内容</li>\n<li>支持搜索</li>\n<li>支持 windows 和 macOS</li>\n<li>记录内容无上限*</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>基于 electron 技术，前端打包的应用。尺寸较大。极个别时候可能监听不到复制（因为用得多才遇到这个问题）</li>\n<li>只能快捷键到查看列表，数字快捷到选中，最后还需要 <kbd>Command</kbd> + <kbd>V</kbd> 进行粘贴到内容区域，略显繁琐</li>\n<li>不能同步（至少这些年我没成功过）</li>\n<li>记录内容无上限*</li>\n</ul>\n<p>适合：</p>\n<p>如果你平时拿它用来记录剪贴板内容，那么我认为非常适合。比如群里面发过来的一段内容（比如接口文档），暂时用不到（一会再用），可以先复制起来。到时候直接在 1Clipboard 里面查看下就好。</p>\n<p>但是作为频繁复制粘贴来说，快捷键稍微繁琐了点。必须选中后，在手动粘贴一次，而不是自动贴到内容区域。</p>\n<p>至于记录内容长度，他是没有限制的，也就是说，要么一条条手动删除，要么把重要的收藏，剩余全部清除。没办法进行删除一周以前这种操作。</p>\n<p>最后，他利用 google 同步，先不说咱们国内能不能访问，就算能访问到，我一样没成功过（登录成功，软件没有识别登录）。</p>\n<h2 id=\"Clipy\"><a href=\"#Clipy\" class=\"headerlink\" title=\"Clipy\"></a>Clipy</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-clipy-1.png-wm.black\" alt=\"Clipy\"></p>\n<p>官网：<a href=\"https://clipy-app.com\" target=\"_blank\" rel=\"noopener\">https://clipy-app.com</a></p>\n<p>github：<a href=\"https://github.com/Clipy/Clipy\" target=\"_blank\" rel=\"noopener\">https://github.com/Clipy/Clipy</a></p>\n<p>开源的软件，据说基于一个很有名的剪贴板工具改进出来的。非常好用。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-clipy-2.png-wm.black\" alt=\"Clipy\"></p>\n<p>优点：</p>\n<ul>\n<li>开源</li>\n<li>速度快</li>\n<li>按三次按键完成粘贴，或者一次快捷键加一次鼠标</li>\n<li>可以多栏目进行收藏</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>只支持文本格式</li>\n<li>不能搜索</li>\n</ul>\n<p>适合：</p>\n<p>如果你只需要文本格式剪贴板增强，那么直接选择它就没错了。除了不支持图片等复杂格式外，风格大众化，常用功能都有，还免费。没有理由不选择。</p>\n<h2 id=\"Paste\"><a href=\"#Paste\" class=\"headerlink\" title=\"Paste\"></a>Paste</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-paste-1.jpg-wm.black\" alt=\"Paste\"></p>\n<p>官网： <a href=\"https://pasteapp.me\" target=\"_blank\" rel=\"noopener\">https://pasteapp.me</a></p>\n<p>费用：¥14.99 / ¥98</p>\n<p>剪贴板增强工具里面，收费软件里面非常出名，一般经常叫做 Paste 2。</p>\n<p>确实质量很高，尤其是使用体验上面，可以算是目前剪贴板增强工具里颜值最高的。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-paste-2.png-wm.black\" alt=\"Paste\"></p>\n<p>优点：</p>\n<ul>\n<li>界面最漂亮</li>\n<li>支持图片等多种格式</li>\n<li>长文本内容预览效果极佳</li>\n<li>按两次按键完成粘贴，或者一次快捷键加一次鼠标</li>\n<li>可以多栏目进行收藏</li>\n<li>支持搜索</li>\n<li>可以手机端同步</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>效果太好看，有时候会卡</li>\n<li>在屏幕下面显示，13寸笔记本只能显示不到6个栏目</li>\n</ul>\n<p>适合：</p>\n<p>如果愿意花钱的话，非常适合使用。我稍微使用了下，就习惯了它的操作。虽然听网上有人说快捷键位置设计很变态，但我觉得还是挺舒服的。比起这篇文章里的其他 APP，我觉得快捷键最好记。</p>\n<p>支持的格式非常多，基本上都能复制显示出来，显示效果也非常好。Paste 支持试用，如果你的机器不卡，剪贴板要求较高一点，建议花钱买这个 APP。</p>\n<h2 id=\"iPaste\"><a href=\"#iPaste\" class=\"headerlink\" title=\"iPaste\"></a>iPaste</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-ipaste-1.jpg-wm.black\" alt=\"iPaste\"></p>\n<p>iPaste 免费下载使用，高级功能收费。费用 ¥50。免费版本只能记录3条，不支持分组收藏。</p>\n<p>因为免费版功能相对薄弱，我也没买，但是感觉和免费的 Clipy 差不太多。唯独 iPaste 可以支持图片等复杂的格式。使用上，也没办法进行2步粘贴。不知道是卡还是什么原因，操作不是很顺畅，还需要手动 <kbd>Command</kbd> + <kbd>V</kbd>，而且还需要鼠标在点选一下内容区域…好尴尬…</p>\n<h2 id=\"pin\"><a href=\"#pin\" class=\"headerlink\" title=\"pin\"></a>pin</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-pin-1.png-wm.black\" alt=\"pin\"></p>\n<p>官网： <a href=\"http://ioszen.com/pin\" target=\"_blank\" rel=\"noopener\">http://ioszen.com/pin</a></p>\n<p>价格：¥30文本支持拖拽操作Pin - 剪贴板扩展</p>\n<p>iOS 上非常有名的剪贴板增强工具，推出了 macOS 版本。和 iOS 功能类似，主要提供扩展能力。操作上，我学了很久才会使用…</p>\n<p>和 iOS 类似，首先要复制的信息，然后打开动作面板（<kbd>Ctrl</kbd> + <kbd>Command</kbd> + <kbd>X</kbd>）然后选择你要的动作。</p>\n<p>这个动作默认提供了不少，但是有价值的却不太多。主要都是搜索、打开之类，而且看样子没有人维护，也就是没办法去找需要的动作，不像 iOS 的 pin 维护那么勤快。</p>\n<p>功能上也比较中规中矩，默认列表和 1Clipboard 类似，还不能分组收藏。同时它提供 Clipy 风格的鼠标跟随展示，方便进行粘贴。和免费的 Clipy 一样，他也处理不了图片之类的内容，最多是帮你复制图片的地址。</p>\n<p>非要说特色的话就是能够和 iOS 同步，iOS 端 pin能力还不错。但是 Paste iOS 端可是免费的啊（并且苹果 macOS 和 iOS 系统本身就可以同步剪切板）。只不过 Paste 98 元一套，它的套装大概是 48 元，而且移动端 pin 确实功能还是可以的。</p>\n<p>所以 pin 真心不太推荐，除非是已经购买了移动端 pin，并且对“动作”非常依赖，否则我更建议换成 Paste。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本次体验来看，如果你基本上没有啥需求，就是希望收集剪贴板历史记录，推荐 1Clipboard（免费）。</p>\n<p>如果希望能提升复制粘贴效率，平时主要是文字之类，可以先用用 Clipy（免费）。</p>\n<p>如果不满足于此，那么建议花钱买 Paste（98元）。</p>\n<p>其余的 APP，我觉得没那么顺手，但是你也可以下载试试。或许符合你的胃口。</p>\n<p>如果希望 macOS 和iOS 能进行同步，如果用的次数很少，建议用系统自带的复制粘贴。当然也可以 QQ、微信 什么的。或者买了 Paste 的也可以使用它的同步。</p>\n<p>总之建议先免费，看看自己是不是有这个需求，需求多了再根据自己的实际情况考虑转向收费。</p>\n<p>–END–</p>"},{"layout":"post","title":"class 的 constructor 什么时候可以不写","date":"2018-12-30T18:38:00.000Z","_content":"最近写 React 项目时候，本来觉得自己清楚 `constructor` 的写法，但是还是发现不够清晰，特查询总结下。\n\n<!-- more -->\n\n首先必须说明的是，`constructor` 必须用在类方法里面，普通的 `function` 是没有的。\n\n## MDN 的 `constructor` 文档说明\n\n阅读 [MDN文档](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/constructor)，简单说来:\n\n* `constructor` 在类里面只能写一个，感觉像是废话...\n* 如果需要调用父类构造方法，必须写 `constructor`，因为 `super` 方法只能写在 `constructor` 里面。\n* 如果你不写 `constructor`，那么代码执行上会给你增加一个默认的 `constructor`。\n\n关于最后一条，默认构造函数，基类默认的 `constructor` 是：\n\n```js\nconstructor() {} // 就是啥都不干\n```\n\n派生类默认的 `constructor` 是：\n\n```js\nconstructor(...args) {\n  super(...args) // 用派生类实例的参数调用下基类构造函数\n}\n```\n\n可以说，如果你的类不需要特殊处理参数（与默认的构造函数一致），那么可以省略 `constructor`。\n\n## 基类\n\n先用一个简单的类来说：\n\n```js\nclass A {\n  constructor (x, y) {\n    this.x = x\n    this.y = y\n  }\n}\n```\n\n构造器主要完成了类的参数处理，此例子中将类的参数放到了实例上。由于需要处理数据，所以此时 `constructor` 必定不能省略。\n\n但是如果一个简单的类，不需要处理数据，比如：\n\n```js\nclass B {\n  constructor () {} // 可以不写\n  say () { \n    console.log('hello')\n  }\n}\n```\n\n这时候可以不写 `constructor` 了。\n\n## 派生类\n\n**例一，用一个 react 常用的风格来说明：**\n\n```js\nclass C extends A {\n  constructor (props) {\n    super(props) // 可以省略\n  }\n}\n```\n\n在派生类集成的过程中，可以使用 `super` 方法，我还真没遇到过不调用父类构造函数的情况...😓\n\n由于此时的 `constructor` 属于默认情形，所以也可以省略。\n\n**例二，再复杂一点的 react 例子：**\n\n```js\nclass C extends A {\n  constructor (props) {\n    super(props)\n    this.state = { val: '' }\n  }\n}\n```\n\n由于 `constructor` 中写了 state，没办法，此时必然不可以像上文一样省略。**但是**，这个例子可以改写成如下形式：\n\n```js\nclass C extends A {\n  constructor (props) {\n    super(props) // 此时可以省略\n  }\n  state = { val: '' }\n}\n```\n\n这样的话，`constructor` 又可以省略了。\n\n## 小结\n\n总之，一个很简单的原则，如果 `constructor` 是默认情况，那么就可以省略。其他时候不能省略。\n\n不省略的话，派生类写 `constructor` 的时候，必须要写 `super` 方法。而基类写 `constructor` 的时候绝对不能写 `super`（因为没有继承啊）。\n\n\n","source":"_posts/2018/2018-12-30-class-constructor.md","raw":"---\nlayout: post\ntitle: class 的 constructor 什么时候可以不写\ndate: 2018-12-30 18:38:00 GMT+0000\ncategories: [前端]\ntags:  [constructor]\n---\n最近写 React 项目时候，本来觉得自己清楚 `constructor` 的写法，但是还是发现不够清晰，特查询总结下。\n\n<!-- more -->\n\n首先必须说明的是，`constructor` 必须用在类方法里面，普通的 `function` 是没有的。\n\n## MDN 的 `constructor` 文档说明\n\n阅读 [MDN文档](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/constructor)，简单说来:\n\n* `constructor` 在类里面只能写一个，感觉像是废话...\n* 如果需要调用父类构造方法，必须写 `constructor`，因为 `super` 方法只能写在 `constructor` 里面。\n* 如果你不写 `constructor`，那么代码执行上会给你增加一个默认的 `constructor`。\n\n关于最后一条，默认构造函数，基类默认的 `constructor` 是：\n\n```js\nconstructor() {} // 就是啥都不干\n```\n\n派生类默认的 `constructor` 是：\n\n```js\nconstructor(...args) {\n  super(...args) // 用派生类实例的参数调用下基类构造函数\n}\n```\n\n可以说，如果你的类不需要特殊处理参数（与默认的构造函数一致），那么可以省略 `constructor`。\n\n## 基类\n\n先用一个简单的类来说：\n\n```js\nclass A {\n  constructor (x, y) {\n    this.x = x\n    this.y = y\n  }\n}\n```\n\n构造器主要完成了类的参数处理，此例子中将类的参数放到了实例上。由于需要处理数据，所以此时 `constructor` 必定不能省略。\n\n但是如果一个简单的类，不需要处理数据，比如：\n\n```js\nclass B {\n  constructor () {} // 可以不写\n  say () { \n    console.log('hello')\n  }\n}\n```\n\n这时候可以不写 `constructor` 了。\n\n## 派生类\n\n**例一，用一个 react 常用的风格来说明：**\n\n```js\nclass C extends A {\n  constructor (props) {\n    super(props) // 可以省略\n  }\n}\n```\n\n在派生类集成的过程中，可以使用 `super` 方法，我还真没遇到过不调用父类构造函数的情况...😓\n\n由于此时的 `constructor` 属于默认情形，所以也可以省略。\n\n**例二，再复杂一点的 react 例子：**\n\n```js\nclass C extends A {\n  constructor (props) {\n    super(props)\n    this.state = { val: '' }\n  }\n}\n```\n\n由于 `constructor` 中写了 state，没办法，此时必然不可以像上文一样省略。**但是**，这个例子可以改写成如下形式：\n\n```js\nclass C extends A {\n  constructor (props) {\n    super(props) // 此时可以省略\n  }\n  state = { val: '' }\n}\n```\n\n这样的话，`constructor` 又可以省略了。\n\n## 小结\n\n总之，一个很简单的原则，如果 `constructor` 是默认情况，那么就可以省略。其他时候不能省略。\n\n不省略的话，派生类写 `constructor` 的时候，必须要写 `super` 方法。而基类写 `constructor` 的时候绝对不能写 `super`（因为没有继承啊）。\n\n\n","slug":"2018-2018-12-30-class-constructor","published":1,"updated":"2019-07-18T17:19:07.148Z","comments":1,"photos":[],"link":"","_id":"cjy8y72ta005gs21d6jc64g60","content":"<p>最近写 React 项目时候，本来觉得自己清楚 <code>constructor</code> 的写法，但是还是发现不够清晰，特查询总结下。</p>\n<a id=\"more\"></a>\n\n<p>首先必须说明的是，<code>constructor</code> 必须用在类方法里面，普通的 <code>function</code> 是没有的。</p>\n<h2 id=\"MDN-的-constructor-文档说明\"><a href=\"#MDN-的-constructor-文档说明\" class=\"headerlink\" title=\"MDN 的 constructor 文档说明\"></a>MDN 的 <code>constructor</code> 文档说明</h2><p>阅读 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/constructor\" target=\"_blank\" rel=\"noopener\">MDN文档</a>，简单说来:</p>\n<ul>\n<li><code>constructor</code> 在类里面只能写一个，感觉像是废话…</li>\n<li>如果需要调用父类构造方法，必须写 <code>constructor</code>，因为 <code>super</code> 方法只能写在 <code>constructor</code> 里面。</li>\n<li>如果你不写 <code>constructor</code>，那么代码执行上会给你增加一个默认的 <code>constructor</code>。</li>\n</ul>\n<p>关于最后一条，默认构造函数，基类默认的 <code>constructor</code> 是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;&#125; <span class=\"comment\">// 就是啥都不干</span></span><br></pre></td></tr></table></figure>\n\n<p>派生类默认的 <code>constructor</code> 是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>(...args) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">super</span>(...args) <span class=\"comment\">// 用派生类实例的参数调用下基类构造函数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以说，如果你的类不需要特殊处理参数（与默认的构造函数一致），那么可以省略 <code>constructor</code>。</p>\n<h2 id=\"基类\"><a href=\"#基类\" class=\"headerlink\" title=\"基类\"></a>基类</h2><p>先用一个简单的类来说：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (x, y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>构造器主要完成了类的参数处理，此例子中将类的参数放到了实例上。由于需要处理数据，所以此时 <code>constructor</code> 必定不能省略。</p>\n<p>但是如果一个简单的类，不需要处理数据，比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;&#125; <span class=\"comment\">// 可以不写</span></span><br><span class=\"line\">  say () &#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时候可以不写 <code>constructor</code> 了。</p>\n<h2 id=\"派生类\"><a href=\"#派生类\" class=\"headerlink\" title=\"派生类\"></a>派生类</h2><p><strong>例一，用一个 react 常用的风格来说明：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props) <span class=\"comment\">// 可以省略</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在派生类集成的过程中，可以使用 <code>super</code> 方法，我还真没遇到过不调用父类构造函数的情况…😓</p>\n<p>由于此时的 <code>constructor</code> 属于默认情形，所以也可以省略。</p>\n<p><strong>例二，再复杂一点的 react 例子：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"attr\">val</span>: <span class=\"string\">''</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于 <code>constructor</code> 中写了 state，没办法，此时必然不可以像上文一样省略。<strong>但是</strong>，这个例子可以改写成如下形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props) <span class=\"comment\">// 此时可以省略</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  state = &#123; <span class=\"attr\">val</span>: <span class=\"string\">''</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样的话，<code>constructor</code> 又可以省略了。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>总之，一个很简单的原则，如果 <code>constructor</code> 是默认情况，那么就可以省略。其他时候不能省略。</p>\n<p>不省略的话，派生类写 <code>constructor</code> 的时候，必须要写 <code>super</code> 方法。而基类写 <code>constructor</code> 的时候绝对不能写 <code>super</code>（因为没有继承啊）。</p>\n","site":{"data":{}},"excerpt":"<p>最近写 React 项目时候，本来觉得自己清楚 <code>constructor</code> 的写法，但是还是发现不够清晰，特查询总结下。</p>","more":"<p>首先必须说明的是，<code>constructor</code> 必须用在类方法里面，普通的 <code>function</code> 是没有的。</p>\n<h2 id=\"MDN-的-constructor-文档说明\"><a href=\"#MDN-的-constructor-文档说明\" class=\"headerlink\" title=\"MDN 的 constructor 文档说明\"></a>MDN 的 <code>constructor</code> 文档说明</h2><p>阅读 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/constructor\" target=\"_blank\" rel=\"noopener\">MDN文档</a>，简单说来:</p>\n<ul>\n<li><code>constructor</code> 在类里面只能写一个，感觉像是废话…</li>\n<li>如果需要调用父类构造方法，必须写 <code>constructor</code>，因为 <code>super</code> 方法只能写在 <code>constructor</code> 里面。</li>\n<li>如果你不写 <code>constructor</code>，那么代码执行上会给你增加一个默认的 <code>constructor</code>。</li>\n</ul>\n<p>关于最后一条，默认构造函数，基类默认的 <code>constructor</code> 是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;&#125; <span class=\"comment\">// 就是啥都不干</span></span><br></pre></td></tr></table></figure>\n\n<p>派生类默认的 <code>constructor</code> 是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>(...args) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">super</span>(...args) <span class=\"comment\">// 用派生类实例的参数调用下基类构造函数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以说，如果你的类不需要特殊处理参数（与默认的构造函数一致），那么可以省略 <code>constructor</code>。</p>\n<h2 id=\"基类\"><a href=\"#基类\" class=\"headerlink\" title=\"基类\"></a>基类</h2><p>先用一个简单的类来说：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (x, y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>构造器主要完成了类的参数处理，此例子中将类的参数放到了实例上。由于需要处理数据，所以此时 <code>constructor</code> 必定不能省略。</p>\n<p>但是如果一个简单的类，不需要处理数据，比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;&#125; <span class=\"comment\">// 可以不写</span></span><br><span class=\"line\">  say () &#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时候可以不写 <code>constructor</code> 了。</p>\n<h2 id=\"派生类\"><a href=\"#派生类\" class=\"headerlink\" title=\"派生类\"></a>派生类</h2><p><strong>例一，用一个 react 常用的风格来说明：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props) <span class=\"comment\">// 可以省略</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在派生类集成的过程中，可以使用 <code>super</code> 方法，我还真没遇到过不调用父类构造函数的情况…😓</p>\n<p>由于此时的 <code>constructor</code> 属于默认情形，所以也可以省略。</p>\n<p><strong>例二，再复杂一点的 react 例子：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"attr\">val</span>: <span class=\"string\">''</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于 <code>constructor</code> 中写了 state，没办法，此时必然不可以像上文一样省略。<strong>但是</strong>，这个例子可以改写成如下形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props) <span class=\"comment\">// 此时可以省略</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  state = &#123; <span class=\"attr\">val</span>: <span class=\"string\">''</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样的话，<code>constructor</code> 又可以省略了。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>总之，一个很简单的原则，如果 <code>constructor</code> 是默认情况，那么就可以省略。其他时候不能省略。</p>\n<p>不省略的话，派生类写 <code>constructor</code> 的时候，必须要写 <code>super</code> 方法。而基类写 <code>constructor</code> 的时候绝对不能写 <code>super</code>（因为没有继承啊）。</p>"},{"layout":"post","title":"electron / electron-builer 踩坑记","date":"2019-02-16T16:13:00.000Z","_content":"\n最近在做一个 web server 工具，为了方便在 MacOS 和 Windows 上使用，采用了 electron 方案。\n\n实践中也遇到了不少小问题，在此记录下。\n\n<!-- more -->\n\n#### 启动程序出现白屏等待\n\n这个问题官网有解决方案，就是等待页面脚本执行完毕，再显示窗体。处理方法如下：\n\n```js\nconst win = new BrowserWindow({\n  width: 800,\n  height: 600,\n  resizable: false,\n  show: false // 默认不显示窗体\n})\nwin.loadFile('www/index.html')\nwin.once('ready-to-show', () => {\n  win.show() // 页面脚本都执行完毕后，再显示\n})\n```\n\n#### MacOS 关闭窗体，程序不退出\n\n程序很简单，就一个主界面，期望关闭窗体后，自动退出程序。问题表现为 MacOS 系统关闭窗体后，程序仍然在 dock 中显示，需要手动在退出。\n\n这个问题主要是因为 MacOS 程序默认都是 dock 驻留的，不像 Windows，默认窗体关闭后等同于程序退出。\n\n如果程序所有窗体都关闭，程序默认退出，那需要手动加入退出方法：\n\n```js\n// 主进程\napp.on('window-all-closed', () => {\n  app.quit()\n})\n```\n\n#### 菜单配置问题导致闪退\n\n把没用的菜单配置删除后，有的菜单栏目为空，此时闪退。问题大致情况如下：\n\n```js\n{\n  role: 'help',\n  submenu: [\n    // {\n    //   label: 'Learn More',\n    //   click () {}\n    // }\n  ]\n}\n```\n\n`help` 栏目下没有子菜单，此时会启动闪退。所以要么没有这个栏目，要么就要有子菜单。\n\n#### 程序中可以选中文字\n\n在程序中，应该不能用鼠标将里面的文字选中、复制啥的。这体验就太差了。修改方法也简单，css 根节点处理下就好：\n\n```css\n#app {\n    user-select: none;\n}\n```\n\n#### 减少包体积\n\n原本 electron 的主进程代码和页面 App 代码在同一级别目录下，这样共用 `package.json` 和 `node_modules`。但是打包时候会把 `node_modules` 打入程序中，页面只需要编译后的代码打包到程序中就行了，所以不调整目录结构的话，无形中 `node_modules` 太大了。\n\n调整结构如下：\n\n```\n├── electron     electron 程序代码\n├── www          页面编译后代码\n├── App          页面源码，编译到 www 目录\n│   ├── node_modules\n│   ├── package.json\n│   └── src\n├── build        electron-builder 资源目录\n├── dist         electron-builder 程序打包目录\n├── node_modules electron 的依赖\n└── package.json\n```\n\n最终输出到程序包中，只有：\n```js\n[\n  \"www/**/*\",\n  \"electron/*\",\n  \"package.json\",\n  \"node_modules\"\n]\n```\n\n目前我只能做到如此。因为 electron 没发现什么优化方法。😂\n\n#### 程序打包\n\n官方推荐了三种工具打包，`electron-packager` `electron-forge` `electron-builder`。官网说明[见此](http://electronjs.org/docs/tutorial/application-packaging)。\n\n曾经用过 `electron-packager`，大概是命令行打包，而且还只能打包当前系统的包。\n\n这次换了最流行的（star最多）的 `electron-builder`。发现 MacOS 下可以打所有系统的包，真挺方便的。\n\n\n唯独就是 linux 平台，问题稍多些。\n* linux 下的各种格式的包，程序图标我至今没成功过；\n* `二进制` 包和 linux 通用的 `appImage` 包，没什么问题，就是 `appImage` 稍大一点；\n* debian 系的 `deb` 包，要求 `package.json` 中 `author` 字段必须有 `name` 和 `email`。否则不能打包；\n* ubuntu 的 `snap` 包，好像需要签名，我就没弄；\n* redHat 系的 `rpm` 包，没打也没测试。\n\n针对 linux，我认为直接出 `二进制` 包和 linux 通用的 `appImage` 包就行了。基本上常见的系统都能覆盖到。\n\n如果要针对 ubuntu / linux Mint 处理，那么出 `deb` 包就好了。\n\n--END--\n\n\n\n\n","source":"_posts/2019/2019-02-16-electron.md","raw":"---\nlayout: post\ntitle: electron / electron-builer 踩坑记\ndate: 2019-02-16 16:13:00 GMT+0000\ncategories: [前端]\ntags:  [electron, electron-builder]\n---\n\n最近在做一个 web server 工具，为了方便在 MacOS 和 Windows 上使用，采用了 electron 方案。\n\n实践中也遇到了不少小问题，在此记录下。\n\n<!-- more -->\n\n#### 启动程序出现白屏等待\n\n这个问题官网有解决方案，就是等待页面脚本执行完毕，再显示窗体。处理方法如下：\n\n```js\nconst win = new BrowserWindow({\n  width: 800,\n  height: 600,\n  resizable: false,\n  show: false // 默认不显示窗体\n})\nwin.loadFile('www/index.html')\nwin.once('ready-to-show', () => {\n  win.show() // 页面脚本都执行完毕后，再显示\n})\n```\n\n#### MacOS 关闭窗体，程序不退出\n\n程序很简单，就一个主界面，期望关闭窗体后，自动退出程序。问题表现为 MacOS 系统关闭窗体后，程序仍然在 dock 中显示，需要手动在退出。\n\n这个问题主要是因为 MacOS 程序默认都是 dock 驻留的，不像 Windows，默认窗体关闭后等同于程序退出。\n\n如果程序所有窗体都关闭，程序默认退出，那需要手动加入退出方法：\n\n```js\n// 主进程\napp.on('window-all-closed', () => {\n  app.quit()\n})\n```\n\n#### 菜单配置问题导致闪退\n\n把没用的菜单配置删除后，有的菜单栏目为空，此时闪退。问题大致情况如下：\n\n```js\n{\n  role: 'help',\n  submenu: [\n    // {\n    //   label: 'Learn More',\n    //   click () {}\n    // }\n  ]\n}\n```\n\n`help` 栏目下没有子菜单，此时会启动闪退。所以要么没有这个栏目，要么就要有子菜单。\n\n#### 程序中可以选中文字\n\n在程序中，应该不能用鼠标将里面的文字选中、复制啥的。这体验就太差了。修改方法也简单，css 根节点处理下就好：\n\n```css\n#app {\n    user-select: none;\n}\n```\n\n#### 减少包体积\n\n原本 electron 的主进程代码和页面 App 代码在同一级别目录下，这样共用 `package.json` 和 `node_modules`。但是打包时候会把 `node_modules` 打入程序中，页面只需要编译后的代码打包到程序中就行了，所以不调整目录结构的话，无形中 `node_modules` 太大了。\n\n调整结构如下：\n\n```\n├── electron     electron 程序代码\n├── www          页面编译后代码\n├── App          页面源码，编译到 www 目录\n│   ├── node_modules\n│   ├── package.json\n│   └── src\n├── build        electron-builder 资源目录\n├── dist         electron-builder 程序打包目录\n├── node_modules electron 的依赖\n└── package.json\n```\n\n最终输出到程序包中，只有：\n```js\n[\n  \"www/**/*\",\n  \"electron/*\",\n  \"package.json\",\n  \"node_modules\"\n]\n```\n\n目前我只能做到如此。因为 electron 没发现什么优化方法。😂\n\n#### 程序打包\n\n官方推荐了三种工具打包，`electron-packager` `electron-forge` `electron-builder`。官网说明[见此](http://electronjs.org/docs/tutorial/application-packaging)。\n\n曾经用过 `electron-packager`，大概是命令行打包，而且还只能打包当前系统的包。\n\n这次换了最流行的（star最多）的 `electron-builder`。发现 MacOS 下可以打所有系统的包，真挺方便的。\n\n\n唯独就是 linux 平台，问题稍多些。\n* linux 下的各种格式的包，程序图标我至今没成功过；\n* `二进制` 包和 linux 通用的 `appImage` 包，没什么问题，就是 `appImage` 稍大一点；\n* debian 系的 `deb` 包，要求 `package.json` 中 `author` 字段必须有 `name` 和 `email`。否则不能打包；\n* ubuntu 的 `snap` 包，好像需要签名，我就没弄；\n* redHat 系的 `rpm` 包，没打也没测试。\n\n针对 linux，我认为直接出 `二进制` 包和 linux 通用的 `appImage` 包就行了。基本上常见的系统都能覆盖到。\n\n如果要针对 ubuntu / linux Mint 处理，那么出 `deb` 包就好了。\n\n--END--\n\n\n\n\n","slug":"2019-2019-02-16-electron","published":1,"updated":"2019-07-18T17:19:07.277Z","comments":1,"photos":[],"link":"","_id":"cjy8y72tc005js21detrxprub","content":"<p>最近在做一个 web server 工具，为了方便在 MacOS 和 Windows 上使用，采用了 electron 方案。</p>\n<p>实践中也遇到了不少小问题，在此记录下。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"启动程序出现白屏等待\"><a href=\"#启动程序出现白屏等待\" class=\"headerlink\" title=\"启动程序出现白屏等待\"></a>启动程序出现白屏等待</h4><p>这个问题官网有解决方案，就是等待页面脚本执行完毕，再显示窗体。处理方法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> win = <span class=\"keyword\">new</span> BrowserWindow(&#123;</span><br><span class=\"line\">  width: <span class=\"number\">800</span>,</span><br><span class=\"line\">  height: <span class=\"number\">600</span>,</span><br><span class=\"line\">  resizable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  show: <span class=\"literal\">false</span> <span class=\"comment\">// 默认不显示窗体</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">win.loadFile(<span class=\"string\">'www/index.html'</span>)</span><br><span class=\"line\">win.once(<span class=\"string\">'ready-to-show'</span>, () =&gt; &#123;</span><br><span class=\"line\">  win.show() <span class=\"comment\">// 页面脚本都执行完毕后，再显示</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MacOS-关闭窗体，程序不退出\"><a href=\"#MacOS-关闭窗体，程序不退出\" class=\"headerlink\" title=\"MacOS 关闭窗体，程序不退出\"></a>MacOS 关闭窗体，程序不退出</h4><p>程序很简单，就一个主界面，期望关闭窗体后，自动退出程序。问题表现为 MacOS 系统关闭窗体后，程序仍然在 dock 中显示，需要手动在退出。</p>\n<p>这个问题主要是因为 MacOS 程序默认都是 dock 驻留的，不像 Windows，默认窗体关闭后等同于程序退出。</p>\n<p>如果程序所有窗体都关闭，程序默认退出，那需要手动加入退出方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 主进程</span></span><br><span class=\"line\">app.on(<span class=\"string\">'window-all-closed'</span>, () =&gt; &#123;</span><br><span class=\"line\">  app.quit()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"菜单配置问题导致闪退\"><a href=\"#菜单配置问题导致闪退\" class=\"headerlink\" title=\"菜单配置问题导致闪退\"></a>菜单配置问题导致闪退</h4><p>把没用的菜单配置删除后，有的菜单栏目为空，此时闪退。问题大致情况如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  role: <span class=\"string\">'help'</span>,</span><br><span class=\"line\">  submenu: [</span><br><span class=\"line\">    <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   label: 'Learn More',</span></span><br><span class=\"line\">    <span class=\"comment\">//   click () &#123;&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>help</code> 栏目下没有子菜单，此时会启动闪退。所以要么没有这个栏目，要么就要有子菜单。</p>\n<h4 id=\"程序中可以选中文字\"><a href=\"#程序中可以选中文字\" class=\"headerlink\" title=\"程序中可以选中文字\"></a>程序中可以选中文字</h4><p>在程序中，应该不能用鼠标将里面的文字选中、复制啥的。这体验就太差了。修改方法也简单，css 根节点处理下就好：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#app</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">user-select</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"减少包体积\"><a href=\"#减少包体积\" class=\"headerlink\" title=\"减少包体积\"></a>减少包体积</h4><p>原本 electron 的主进程代码和页面 App 代码在同一级别目录下，这样共用 <code>package.json</code> 和 <code>node_modules</code>。但是打包时候会把 <code>node_modules</code> 打入程序中，页面只需要编译后的代码打包到程序中就行了，所以不调整目录结构的话，无形中 <code>node_modules</code> 太大了。</p>\n<p>调整结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── electron     electron 程序代码</span><br><span class=\"line\">├── www          页面编译后代码</span><br><span class=\"line\">├── App          页面源码，编译到 www 目录</span><br><span class=\"line\">│   ├── node_modules</span><br><span class=\"line\">│   ├── package.json</span><br><span class=\"line\">│   └── src</span><br><span class=\"line\">├── build        electron-builder 资源目录</span><br><span class=\"line\">├── dist         electron-builder 程序打包目录</span><br><span class=\"line\">├── node_modules electron 的依赖</span><br><span class=\"line\">└── package.json</span><br></pre></td></tr></table></figure>\n\n<p>最终输出到程序包中，只有：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  <span class=\"string\">\"www/**/*\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"electron/*\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"package.json\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"node_modules\"</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>目前我只能做到如此。因为 electron 没发现什么优化方法。😂</p>\n<h4 id=\"程序打包\"><a href=\"#程序打包\" class=\"headerlink\" title=\"程序打包\"></a>程序打包</h4><p>官方推荐了三种工具打包，<code>electron-packager</code> <code>electron-forge</code> <code>electron-builder</code>。官网说明<a href=\"http://electronjs.org/docs/tutorial/application-packaging\" target=\"_blank\" rel=\"noopener\">见此</a>。</p>\n<p>曾经用过 <code>electron-packager</code>，大概是命令行打包，而且还只能打包当前系统的包。</p>\n<p>这次换了最流行的（star最多）的 <code>electron-builder</code>。发现 MacOS 下可以打所有系统的包，真挺方便的。</p>\n<p>唯独就是 linux 平台，问题稍多些。</p>\n<ul>\n<li>linux 下的各种格式的包，程序图标我至今没成功过；</li>\n<li><code>二进制</code> 包和 linux 通用的 <code>appImage</code> 包，没什么问题，就是 <code>appImage</code> 稍大一点；</li>\n<li>debian 系的 <code>deb</code> 包，要求 <code>package.json</code> 中 <code>author</code> 字段必须有 <code>name</code> 和 <code>email</code>。否则不能打包；</li>\n<li>ubuntu 的 <code>snap</code> 包，好像需要签名，我就没弄；</li>\n<li>redHat 系的 <code>rpm</code> 包，没打也没测试。</li>\n</ul>\n<p>针对 linux，我认为直接出 <code>二进制</code> 包和 linux 通用的 <code>appImage</code> 包就行了。基本上常见的系统都能覆盖到。</p>\n<p>如果要针对 ubuntu / linux Mint 处理，那么出 <code>deb</code> 包就好了。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>最近在做一个 web server 工具，为了方便在 MacOS 和 Windows 上使用，采用了 electron 方案。</p>\n<p>实践中也遇到了不少小问题，在此记录下。</p>","more":"<h4 id=\"启动程序出现白屏等待\"><a href=\"#启动程序出现白屏等待\" class=\"headerlink\" title=\"启动程序出现白屏等待\"></a>启动程序出现白屏等待</h4><p>这个问题官网有解决方案，就是等待页面脚本执行完毕，再显示窗体。处理方法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> win = <span class=\"keyword\">new</span> BrowserWindow(&#123;</span><br><span class=\"line\">  width: <span class=\"number\">800</span>,</span><br><span class=\"line\">  height: <span class=\"number\">600</span>,</span><br><span class=\"line\">  resizable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  show: <span class=\"literal\">false</span> <span class=\"comment\">// 默认不显示窗体</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">win.loadFile(<span class=\"string\">'www/index.html'</span>)</span><br><span class=\"line\">win.once(<span class=\"string\">'ready-to-show'</span>, () =&gt; &#123;</span><br><span class=\"line\">  win.show() <span class=\"comment\">// 页面脚本都执行完毕后，再显示</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MacOS-关闭窗体，程序不退出\"><a href=\"#MacOS-关闭窗体，程序不退出\" class=\"headerlink\" title=\"MacOS 关闭窗体，程序不退出\"></a>MacOS 关闭窗体，程序不退出</h4><p>程序很简单，就一个主界面，期望关闭窗体后，自动退出程序。问题表现为 MacOS 系统关闭窗体后，程序仍然在 dock 中显示，需要手动在退出。</p>\n<p>这个问题主要是因为 MacOS 程序默认都是 dock 驻留的，不像 Windows，默认窗体关闭后等同于程序退出。</p>\n<p>如果程序所有窗体都关闭，程序默认退出，那需要手动加入退出方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 主进程</span></span><br><span class=\"line\">app.on(<span class=\"string\">'window-all-closed'</span>, () =&gt; &#123;</span><br><span class=\"line\">  app.quit()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"菜单配置问题导致闪退\"><a href=\"#菜单配置问题导致闪退\" class=\"headerlink\" title=\"菜单配置问题导致闪退\"></a>菜单配置问题导致闪退</h4><p>把没用的菜单配置删除后，有的菜单栏目为空，此时闪退。问题大致情况如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  role: <span class=\"string\">'help'</span>,</span><br><span class=\"line\">  submenu: [</span><br><span class=\"line\">    <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   label: 'Learn More',</span></span><br><span class=\"line\">    <span class=\"comment\">//   click () &#123;&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>help</code> 栏目下没有子菜单，此时会启动闪退。所以要么没有这个栏目，要么就要有子菜单。</p>\n<h4 id=\"程序中可以选中文字\"><a href=\"#程序中可以选中文字\" class=\"headerlink\" title=\"程序中可以选中文字\"></a>程序中可以选中文字</h4><p>在程序中，应该不能用鼠标将里面的文字选中、复制啥的。这体验就太差了。修改方法也简单，css 根节点处理下就好：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#app</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">user-select</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"减少包体积\"><a href=\"#减少包体积\" class=\"headerlink\" title=\"减少包体积\"></a>减少包体积</h4><p>原本 electron 的主进程代码和页面 App 代码在同一级别目录下，这样共用 <code>package.json</code> 和 <code>node_modules</code>。但是打包时候会把 <code>node_modules</code> 打入程序中，页面只需要编译后的代码打包到程序中就行了，所以不调整目录结构的话，无形中 <code>node_modules</code> 太大了。</p>\n<p>调整结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── electron     electron 程序代码</span><br><span class=\"line\">├── www          页面编译后代码</span><br><span class=\"line\">├── App          页面源码，编译到 www 目录</span><br><span class=\"line\">│   ├── node_modules</span><br><span class=\"line\">│   ├── package.json</span><br><span class=\"line\">│   └── src</span><br><span class=\"line\">├── build        electron-builder 资源目录</span><br><span class=\"line\">├── dist         electron-builder 程序打包目录</span><br><span class=\"line\">├── node_modules electron 的依赖</span><br><span class=\"line\">└── package.json</span><br></pre></td></tr></table></figure>\n\n<p>最终输出到程序包中，只有：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  <span class=\"string\">\"www/**/*\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"electron/*\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"package.json\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"node_modules\"</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>目前我只能做到如此。因为 electron 没发现什么优化方法。😂</p>\n<h4 id=\"程序打包\"><a href=\"#程序打包\" class=\"headerlink\" title=\"程序打包\"></a>程序打包</h4><p>官方推荐了三种工具打包，<code>electron-packager</code> <code>electron-forge</code> <code>electron-builder</code>。官网说明<a href=\"http://electronjs.org/docs/tutorial/application-packaging\" target=\"_blank\" rel=\"noopener\">见此</a>。</p>\n<p>曾经用过 <code>electron-packager</code>，大概是命令行打包，而且还只能打包当前系统的包。</p>\n<p>这次换了最流行的（star最多）的 <code>electron-builder</code>。发现 MacOS 下可以打所有系统的包，真挺方便的。</p>\n<p>唯独就是 linux 平台，问题稍多些。</p>\n<ul>\n<li>linux 下的各种格式的包，程序图标我至今没成功过；</li>\n<li><code>二进制</code> 包和 linux 通用的 <code>appImage</code> 包，没什么问题，就是 <code>appImage</code> 稍大一点；</li>\n<li>debian 系的 <code>deb</code> 包，要求 <code>package.json</code> 中 <code>author</code> 字段必须有 <code>name</code> 和 <code>email</code>。否则不能打包；</li>\n<li>ubuntu 的 <code>snap</code> 包，好像需要签名，我就没弄；</li>\n<li>redHat 系的 <code>rpm</code> 包，没打也没测试。</li>\n</ul>\n<p>针对 linux，我认为直接出 <code>二进制</code> 包和 linux 通用的 <code>appImage</code> 包就行了。基本上常见的系统都能覆盖到。</p>\n<p>如果要针对 ubuntu / linux Mint 处理，那么出 <code>deb</code> 包就好了。</p>\n<p>–END–</p>"},{"layout":"post","title":"Office 开发者子账号使用方法","date":"2019-04-10T23:09:00.000Z","_content":"\n新入手一个 Office 开发者账号，支持开通子账号，特将使用方法记录下。\n\n<!-- more -->\n\n## 风险提示\n\n使用子账号，母账号是可以看到内容数据的，比如 OneDrive 里面的内容。所以在子账号内不要上传隐私内容。\n\n虽然可以查阅，但是我一直不知道如何查阅，而且作为一个有道德的工程师，我是不会查阅我的子账号内容的。\n\n## 使用说明\n\n每个子账号，可以在 5 台设备上使用。设备包括 Windows / MacOS / iPhone / Android 等。\n\nOneDrive 容量为 5TB。\n\n## 下载\n\n访问 [https://products.office.com](https://products.office.com)，直接登录账号。首次登录的话，需要修改密码。\n\n打开页面后，点击右上角“安装Office”-“Office 365应用”，就可以完成下载了。\n\n![](https://cdn0.yukapril.com/blog/2019-04-10-office-e3-1.png-wm.black)\n\n## 安装\n\n下载好了直接安装就行。\n\n> Windows 和 MacOS 支持的软件不同。\n> \n> MacOS 只有 Word / Excel / PowerPoint / Outlook / OneNote / OneDrive。\n\n## 激活\n\n安装好后，启动任意一个软件。\n\n点击**选择激活**！点击**选择激活**！点击**选择激活**。重要的事情说三遍。不是点击登录。\n\n之后登录你的账号就好了。\n\n> Office 有激活功能，也有登录功能。\n> \n> 激活-就是为了产品激活\n> 登录-就是为了账号数据同步\n\n之后就可以在“关于”中，查看到激活结果。\n\n![](https://cdn0.yukapril.com/blog/2019-04-10-office-e3-2.png-wm.black)\n\n--END--","source":"_posts/2019/2019-04-10-office-e3.md","raw":"---\nlayout: post\ntitle: Office 开发者子账号使用方法\ndate: 2019-04-10 23:09:00 GMT+0000\ncategories: [软件]\ntags:  [office]\n---\n\n新入手一个 Office 开发者账号，支持开通子账号，特将使用方法记录下。\n\n<!-- more -->\n\n## 风险提示\n\n使用子账号，母账号是可以看到内容数据的，比如 OneDrive 里面的内容。所以在子账号内不要上传隐私内容。\n\n虽然可以查阅，但是我一直不知道如何查阅，而且作为一个有道德的工程师，我是不会查阅我的子账号内容的。\n\n## 使用说明\n\n每个子账号，可以在 5 台设备上使用。设备包括 Windows / MacOS / iPhone / Android 等。\n\nOneDrive 容量为 5TB。\n\n## 下载\n\n访问 [https://products.office.com](https://products.office.com)，直接登录账号。首次登录的话，需要修改密码。\n\n打开页面后，点击右上角“安装Office”-“Office 365应用”，就可以完成下载了。\n\n![](https://cdn0.yukapril.com/blog/2019-04-10-office-e3-1.png-wm.black)\n\n## 安装\n\n下载好了直接安装就行。\n\n> Windows 和 MacOS 支持的软件不同。\n> \n> MacOS 只有 Word / Excel / PowerPoint / Outlook / OneNote / OneDrive。\n\n## 激活\n\n安装好后，启动任意一个软件。\n\n点击**选择激活**！点击**选择激活**！点击**选择激活**。重要的事情说三遍。不是点击登录。\n\n之后登录你的账号就好了。\n\n> Office 有激活功能，也有登录功能。\n> \n> 激活-就是为了产品激活\n> 登录-就是为了账号数据同步\n\n之后就可以在“关于”中，查看到激活结果。\n\n![](https://cdn0.yukapril.com/blog/2019-04-10-office-e3-2.png-wm.black)\n\n--END--","slug":"2019-2019-04-10-office-e3","published":1,"updated":"2019-07-18T17:19:07.029Z","comments":1,"photos":[],"link":"","_id":"cjy8y72td005ms21dyuoieast","content":"<p>新入手一个 Office 开发者账号，支持开通子账号，特将使用方法记录下。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"风险提示\"><a href=\"#风险提示\" class=\"headerlink\" title=\"风险提示\"></a>风险提示</h2><p>使用子账号，母账号是可以看到内容数据的，比如 OneDrive 里面的内容。所以在子账号内不要上传隐私内容。</p>\n<p>虽然可以查阅，但是我一直不知道如何查阅，而且作为一个有道德的工程师，我是不会查阅我的子账号内容的。</p>\n<h2 id=\"使用说明\"><a href=\"#使用说明\" class=\"headerlink\" title=\"使用说明\"></a>使用说明</h2><p>每个子账号，可以在 5 台设备上使用。设备包括 Windows / MacOS / iPhone / Android 等。</p>\n<p>OneDrive 容量为 5TB。</p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>访问 <a href=\"https://products.office.com\" target=\"_blank\" rel=\"noopener\">https://products.office.com</a>，直接登录账号。首次登录的话，需要修改密码。</p>\n<p>打开页面后，点击右上角“安装Office”-“Office 365应用”，就可以完成下载了。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-04-10-office-e3-1.png-wm.black\" alt></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>下载好了直接安装就行。</p>\n<blockquote>\n<p>Windows 和 MacOS 支持的软件不同。</p>\n<p>MacOS 只有 Word / Excel / PowerPoint / Outlook / OneNote / OneDrive。</p>\n</blockquote>\n<h2 id=\"激活\"><a href=\"#激活\" class=\"headerlink\" title=\"激活\"></a>激活</h2><p>安装好后，启动任意一个软件。</p>\n<p>点击<strong>选择激活</strong>！点击<strong>选择激活</strong>！点击<strong>选择激活</strong>。重要的事情说三遍。不是点击登录。</p>\n<p>之后登录你的账号就好了。</p>\n<blockquote>\n<p>Office 有激活功能，也有登录功能。</p>\n<p>激活-就是为了产品激活<br>登录-就是为了账号数据同步</p>\n</blockquote>\n<p>之后就可以在“关于”中，查看到激活结果。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-04-10-office-e3-2.png-wm.black\" alt></p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>新入手一个 Office 开发者账号，支持开通子账号，特将使用方法记录下。</p>","more":"<h2 id=\"风险提示\"><a href=\"#风险提示\" class=\"headerlink\" title=\"风险提示\"></a>风险提示</h2><p>使用子账号，母账号是可以看到内容数据的，比如 OneDrive 里面的内容。所以在子账号内不要上传隐私内容。</p>\n<p>虽然可以查阅，但是我一直不知道如何查阅，而且作为一个有道德的工程师，我是不会查阅我的子账号内容的。</p>\n<h2 id=\"使用说明\"><a href=\"#使用说明\" class=\"headerlink\" title=\"使用说明\"></a>使用说明</h2><p>每个子账号，可以在 5 台设备上使用。设备包括 Windows / MacOS / iPhone / Android 等。</p>\n<p>OneDrive 容量为 5TB。</p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>访问 <a href=\"https://products.office.com\" target=\"_blank\" rel=\"noopener\">https://products.office.com</a>，直接登录账号。首次登录的话，需要修改密码。</p>\n<p>打开页面后，点击右上角“安装Office”-“Office 365应用”，就可以完成下载了。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-04-10-office-e3-1.png-wm.black\" alt></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>下载好了直接安装就行。</p>\n<blockquote>\n<p>Windows 和 MacOS 支持的软件不同。</p>\n<p>MacOS 只有 Word / Excel / PowerPoint / Outlook / OneNote / OneDrive。</p>\n</blockquote>\n<h2 id=\"激活\"><a href=\"#激活\" class=\"headerlink\" title=\"激活\"></a>激活</h2><p>安装好后，启动任意一个软件。</p>\n<p>点击<strong>选择激活</strong>！点击<strong>选择激活</strong>！点击<strong>选择激活</strong>。重要的事情说三遍。不是点击登录。</p>\n<p>之后登录你的账号就好了。</p>\n<blockquote>\n<p>Office 有激活功能，也有登录功能。</p>\n<p>激活-就是为了产品激活<br>登录-就是为了账号数据同步</p>\n</blockquote>\n<p>之后就可以在“关于”中，查看到激活结果。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-04-10-office-e3-2.png-wm.black\" alt></p>\n<p>–END–</p>"},{"layout":"post","title":"记一次 https CA 中间证书的问题处理","date":"2019-04-08T23:30:00.000Z","_content":"\n公司CDN切换到一家新的服务商，原本切换很简单，没想到在证书上，还是遇到了些问题，这里记录下。\n\n<!-- more -->\n\n## 证书\n\n说到证书，就有必要说下具体的涉及东西。\n\n一般申请网站证书，都会有三样东西：\n\n* 私钥，也就是密钥了，这个可以自己生成好，再去申请，也可以直接通过第三方直接生成\n* 公钥-域名证书，这个是针对你的域名的，公开的\n* 公钥-CA中间证书，这个可能不会提供，可以自己获取到\n\n其中私钥是不能泄露的，剩下的公钥，就是要公开的。密钥严格来讲，最好自己生成。\n\n>像我这么懒的人，一般都是选择浏览器自动生成CSR。\n\nCA证书就是颁发域名证书的机构，比如叫做B机构。B要想证明你的域名证书有效，就要提供自己的证书。同理，B甚至需要更高一级A机构来证明自己。这样CA中间证书可能不止一个。\n\n> CA中间证书，一般我见过的绝大部分都是一个就行了，偶尔遇到过两个的，超过两个的暂时没见过。\n\n其中公钥（域名证书、CA证书）可以合并，将所有的公钥按顺序拼接就好。所以如果你的公钥只有一个文件，可以打看看下，是不是有多个段落。一般拼接好的证书，叫做链式证书（full_chain）。\n\n**这里就要有个经验了，不知道为啥，拼接两个证书的时候，都是域名证书在上，CA证书在下。顺序反了的话，可能有兼容性问题，比如 nginx 不识别啥的。**\n\n证书存储上，我认为直接保存链式证书比较方便，因为域名证书和CA证书混在一起，你可能后续就分不清了。\n\n> 经验所谈，一般内容较长的是域名证书，短一点的是CA证书。你可以看下自己的证书，是不是如此。\n\n## 商用证书\n\n自己弄的免费证书和花钱买的还真可能不一样。比如 [FreeSSL](https://freessl.cn/) 免费生成的，最终都是这样的结果：\n\n![img](https://cdn0.yukapril.com/blog/2019-04-08-https-ssl-1.png-wm.black)\n\n区分好了私钥、以及公钥的域名证书和CA中间证书。而且格式pem rsa的，直接就可以使用。更方便的是，如果点击下载，还会帮你把域名证书和CA中间证书整合在一个文件。\n\n买的商用证书就不一样了，首先不知道是什么加密格式，私钥是不太一样的，同时配套给了一个密码（当时研究出来了，现在只有上帝知道）。而且还遇到了上文提到的，不提供CA证书。\n\n> 现在猜测应该是 pkcs 加密证书，因为解密后，就不想保留原有加密的内容了。\n\n对于一些常规的 CDN 或者服务器证书配置，好像还可以支持，但是大部分情况，都需要转换下。由于我司的证书年代久远，当时转换方法我也就记不得了。总之很多时候都靠猜和运气。\n\n## CA中间证书的获取\n\n对于一些厂商可能不提供CA中间证书，这个也不用怕，因为都是公开的证书，可以获取的。\n\n当时获取我司的签发机构证书忘记了如何操作的。现在查询了下，大概有两种方法。\n\n### 浏览器查看并导出法\n\n这个原本 chrome 也支持的，但是好像某一个版本之后功能改版了，就不能导出了。\n\n现在主流的方案都是用 Firefox 来导出。\n\n![img](https://cdn0.yukapril.com/blog/2019-04-08-https-ssl-2.png-wm.black)\n\n在访问的域名前，点击绿色标志，并选择右箭头的功能。之后选择 “更多信息”。\n\n![img](https://cdn0.yukapril.com/blog/2019-04-08-https-ssl-3.png-wm.black)\n\n弹出证书框后，选择“安全”选项卡，里面就有“查看证书”。证书查看器中，有“详细信息”选项卡，里面有“导出”功能。支持导出域名证书以及证书链。\n\n这个方法好处是非常直观，导出的也是我们常见的pem（也可以导出其他格式）。\n\n缺点也很明显，假如这个网站是中间跳转页，那么一瞬间就跳转走了，根本没办法点击是不是...你说气人不...\n\n### openssl 导出法\n\n这个方法我玩的不是很溜，仅仅是知道有这么个方法，供参考吧。\n\n安装工具类 `openssl` 之后，可以用命令查询证书。\n\n```\nopenssl s_client -connect host:port -showcerts\n```\n\n比如查询我的网站就是：\n\n```\nopenssl s_client -connect www.yukapril.com:443 -showcerts\n```\n\n可以返回\n\n```\nCONNECTED(00000005)\ndepth=2 C = US, O = DigiCert Inc, OU = www.digicert.com, CN = DigiCert Global Root CA\nverify return:1\ndepth=1 C = US, O = DigiCert Inc, OU = www.digicert.com, CN = Encryption Everywhere DV TLS CA - G1\nverify return:1\ndepth=0 CN = img.ucdl.pp.uc.cn\nverify return:1\n---\nCertificate chain\n 0 s:/CN=img.ucdl.pp.uc.cn\n   【注册时的邮箱】:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=Encryption Everywhere DV TLS CA - G1\n-----BEGIN CERTIFICATE-----\nMIIHJTCCBg2gAwIBAgIQDypRrHvTErPCp3dELPGfVDANBgkqhkiG9w0BAQsFADBu\n...省略...\n-----END CERTIFICATE-----\n 1 s:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=Encryption Everywhere DV TLS CA - G1\n   【注册时的邮箱】:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert Global Root CA\n-----BEGIN CERTIFICATE-----\nMIIEqjCCA5KgAwIBAgIQAnmsRYvBskWr+YBTzSybsTANBgkqhkiG9w0BAQsFADBh\n...省略...\n-----END CERTIFICATE-----\n---\nServer certificate\nsubject=/CN=img.ucdl.pp.uc.cn\nissuer=/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=Encryption Everywhere DV TLS CA - G1\n---\nNo client certificate CA names sent\nServer Temp Key: ECDH, X25519, 253 bits\n---\nSSL handshake has read 3647 bytes and written 285 bytes\n---\nNew, TLSv1/SSLv3, Cipher is ECDHE-RSA-CHACHA20-POLY1305\nServer public key is 2048 bit\nSecure Renegotiation IS supported\nCompression: NONE\nExpansion: NONE\nNo ALPN negotiated\nSSL-Session:\n    Protocol  : TLSv1.2\n    Cipher    : ECDHE-RSA-CHACHA20-POLY1305\n    Session-ID: 508935B5D7781D4F3ECD9FEC381D92F4AB0BFF3761F9197D2CDC4531602A3C70\n    Session-ID-ctx:\n    Master-Key: 2DADAC30A131BE41B218D22003A5A8FDF084FFB6BE78DFC8DE143F30C70672A81AD140D4586C43460404E95130FAED8A\n    TLS session ticket lifetime hint: 900 (seconds)\n    TLS session ticket:\n    0000 - c7 f3 15 16 ca 6f 94 ed-9e 9e 8e b7 f6 f1 53 b1   .....o........S.\n    0010 - 4b 1a d2 46 da ce de 85-80 18 d4 f2 76 f4 3a e8   K..F........v.:.\n    0020 - b5 a3 b1 0f ee 04 25 9d-e8 d0 c9 16 f4 6d 16 7c   ......%......m.|\n    0030 - a1 8f 53 3c bb 1d 61 c4-e3 74 a4 2d d5 5c 0e 27   ..S<..a..t.-.\\.'\n    0040 - af 72 b4 ee 0a 35 87 05-ae d5 99 db a8 9f be 1c   .r...5..........\n    0050 - f5 ff ff 1d 8b 5b e2 ef-f4 fc ba 2c c9 fb 9d 16   .....[.....,....\n    0060 - 77 ba 74 b8 65 14 a9 85-cd ec c8 99 98 c0 81 3a   w.t.e..........:\n    0070 - 22 c7 61 68 7c 51 bc d9-3b 3d 4d c3 12 e5 98 81   \".ah|Q..;=M.....\n    0080 - 4e d1 05 4d 38 8d b5 17-88 50 10 f2 df 64 d5 93   N..M8....P...d..\n    0090 - 2c 14 17 31 e2 40 b0 5e-6c 6b e6 e5 de 0a d1 a1   ,..1.@.^lk......\n\n    Start Time: 1554736914\n    Timeout   : 7200 (sec)\n    Verify return code: 0 (ok)\n---\n```\n\n可以看到其中 `Certificate chain` 有两条记录，就是域名证书和CA证书了。\n\n> 有时候返回的感觉不是常见的pem x509证书，比如我司的就是如此。这个就不知道如何处理了。但是采用火狐浏览器获取的，就是一定可以是常见的pem证书。所以还是推荐浏览器方案。\n\n--END--","source":"_posts/2019/2019-04-08-https-ssl.md","raw":"---\nlayout: post\ntitle: 记一次 https CA 中间证书的问题处理\ndate: 2019-04-08 23:30:00 GMT+0000\ncategories: [代码]\ntags:  [CA, https, cert]\n---\n\n公司CDN切换到一家新的服务商，原本切换很简单，没想到在证书上，还是遇到了些问题，这里记录下。\n\n<!-- more -->\n\n## 证书\n\n说到证书，就有必要说下具体的涉及东西。\n\n一般申请网站证书，都会有三样东西：\n\n* 私钥，也就是密钥了，这个可以自己生成好，再去申请，也可以直接通过第三方直接生成\n* 公钥-域名证书，这个是针对你的域名的，公开的\n* 公钥-CA中间证书，这个可能不会提供，可以自己获取到\n\n其中私钥是不能泄露的，剩下的公钥，就是要公开的。密钥严格来讲，最好自己生成。\n\n>像我这么懒的人，一般都是选择浏览器自动生成CSR。\n\nCA证书就是颁发域名证书的机构，比如叫做B机构。B要想证明你的域名证书有效，就要提供自己的证书。同理，B甚至需要更高一级A机构来证明自己。这样CA中间证书可能不止一个。\n\n> CA中间证书，一般我见过的绝大部分都是一个就行了，偶尔遇到过两个的，超过两个的暂时没见过。\n\n其中公钥（域名证书、CA证书）可以合并，将所有的公钥按顺序拼接就好。所以如果你的公钥只有一个文件，可以打看看下，是不是有多个段落。一般拼接好的证书，叫做链式证书（full_chain）。\n\n**这里就要有个经验了，不知道为啥，拼接两个证书的时候，都是域名证书在上，CA证书在下。顺序反了的话，可能有兼容性问题，比如 nginx 不识别啥的。**\n\n证书存储上，我认为直接保存链式证书比较方便，因为域名证书和CA证书混在一起，你可能后续就分不清了。\n\n> 经验所谈，一般内容较长的是域名证书，短一点的是CA证书。你可以看下自己的证书，是不是如此。\n\n## 商用证书\n\n自己弄的免费证书和花钱买的还真可能不一样。比如 [FreeSSL](https://freessl.cn/) 免费生成的，最终都是这样的结果：\n\n![img](https://cdn0.yukapril.com/blog/2019-04-08-https-ssl-1.png-wm.black)\n\n区分好了私钥、以及公钥的域名证书和CA中间证书。而且格式pem rsa的，直接就可以使用。更方便的是，如果点击下载，还会帮你把域名证书和CA中间证书整合在一个文件。\n\n买的商用证书就不一样了，首先不知道是什么加密格式，私钥是不太一样的，同时配套给了一个密码（当时研究出来了，现在只有上帝知道）。而且还遇到了上文提到的，不提供CA证书。\n\n> 现在猜测应该是 pkcs 加密证书，因为解密后，就不想保留原有加密的内容了。\n\n对于一些常规的 CDN 或者服务器证书配置，好像还可以支持，但是大部分情况，都需要转换下。由于我司的证书年代久远，当时转换方法我也就记不得了。总之很多时候都靠猜和运气。\n\n## CA中间证书的获取\n\n对于一些厂商可能不提供CA中间证书，这个也不用怕，因为都是公开的证书，可以获取的。\n\n当时获取我司的签发机构证书忘记了如何操作的。现在查询了下，大概有两种方法。\n\n### 浏览器查看并导出法\n\n这个原本 chrome 也支持的，但是好像某一个版本之后功能改版了，就不能导出了。\n\n现在主流的方案都是用 Firefox 来导出。\n\n![img](https://cdn0.yukapril.com/blog/2019-04-08-https-ssl-2.png-wm.black)\n\n在访问的域名前，点击绿色标志，并选择右箭头的功能。之后选择 “更多信息”。\n\n![img](https://cdn0.yukapril.com/blog/2019-04-08-https-ssl-3.png-wm.black)\n\n弹出证书框后，选择“安全”选项卡，里面就有“查看证书”。证书查看器中，有“详细信息”选项卡，里面有“导出”功能。支持导出域名证书以及证书链。\n\n这个方法好处是非常直观，导出的也是我们常见的pem（也可以导出其他格式）。\n\n缺点也很明显，假如这个网站是中间跳转页，那么一瞬间就跳转走了，根本没办法点击是不是...你说气人不...\n\n### openssl 导出法\n\n这个方法我玩的不是很溜，仅仅是知道有这么个方法，供参考吧。\n\n安装工具类 `openssl` 之后，可以用命令查询证书。\n\n```\nopenssl s_client -connect host:port -showcerts\n```\n\n比如查询我的网站就是：\n\n```\nopenssl s_client -connect www.yukapril.com:443 -showcerts\n```\n\n可以返回\n\n```\nCONNECTED(00000005)\ndepth=2 C = US, O = DigiCert Inc, OU = www.digicert.com, CN = DigiCert Global Root CA\nverify return:1\ndepth=1 C = US, O = DigiCert Inc, OU = www.digicert.com, CN = Encryption Everywhere DV TLS CA - G1\nverify return:1\ndepth=0 CN = img.ucdl.pp.uc.cn\nverify return:1\n---\nCertificate chain\n 0 s:/CN=img.ucdl.pp.uc.cn\n   【注册时的邮箱】:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=Encryption Everywhere DV TLS CA - G1\n-----BEGIN CERTIFICATE-----\nMIIHJTCCBg2gAwIBAgIQDypRrHvTErPCp3dELPGfVDANBgkqhkiG9w0BAQsFADBu\n...省略...\n-----END CERTIFICATE-----\n 1 s:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=Encryption Everywhere DV TLS CA - G1\n   【注册时的邮箱】:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert Global Root CA\n-----BEGIN CERTIFICATE-----\nMIIEqjCCA5KgAwIBAgIQAnmsRYvBskWr+YBTzSybsTANBgkqhkiG9w0BAQsFADBh\n...省略...\n-----END CERTIFICATE-----\n---\nServer certificate\nsubject=/CN=img.ucdl.pp.uc.cn\nissuer=/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=Encryption Everywhere DV TLS CA - G1\n---\nNo client certificate CA names sent\nServer Temp Key: ECDH, X25519, 253 bits\n---\nSSL handshake has read 3647 bytes and written 285 bytes\n---\nNew, TLSv1/SSLv3, Cipher is ECDHE-RSA-CHACHA20-POLY1305\nServer public key is 2048 bit\nSecure Renegotiation IS supported\nCompression: NONE\nExpansion: NONE\nNo ALPN negotiated\nSSL-Session:\n    Protocol  : TLSv1.2\n    Cipher    : ECDHE-RSA-CHACHA20-POLY1305\n    Session-ID: 508935B5D7781D4F3ECD9FEC381D92F4AB0BFF3761F9197D2CDC4531602A3C70\n    Session-ID-ctx:\n    Master-Key: 2DADAC30A131BE41B218D22003A5A8FDF084FFB6BE78DFC8DE143F30C70672A81AD140D4586C43460404E95130FAED8A\n    TLS session ticket lifetime hint: 900 (seconds)\n    TLS session ticket:\n    0000 - c7 f3 15 16 ca 6f 94 ed-9e 9e 8e b7 f6 f1 53 b1   .....o........S.\n    0010 - 4b 1a d2 46 da ce de 85-80 18 d4 f2 76 f4 3a e8   K..F........v.:.\n    0020 - b5 a3 b1 0f ee 04 25 9d-e8 d0 c9 16 f4 6d 16 7c   ......%......m.|\n    0030 - a1 8f 53 3c bb 1d 61 c4-e3 74 a4 2d d5 5c 0e 27   ..S<..a..t.-.\\.'\n    0040 - af 72 b4 ee 0a 35 87 05-ae d5 99 db a8 9f be 1c   .r...5..........\n    0050 - f5 ff ff 1d 8b 5b e2 ef-f4 fc ba 2c c9 fb 9d 16   .....[.....,....\n    0060 - 77 ba 74 b8 65 14 a9 85-cd ec c8 99 98 c0 81 3a   w.t.e..........:\n    0070 - 22 c7 61 68 7c 51 bc d9-3b 3d 4d c3 12 e5 98 81   \".ah|Q..;=M.....\n    0080 - 4e d1 05 4d 38 8d b5 17-88 50 10 f2 df 64 d5 93   N..M8....P...d..\n    0090 - 2c 14 17 31 e2 40 b0 5e-6c 6b e6 e5 de 0a d1 a1   ,..1.@.^lk......\n\n    Start Time: 1554736914\n    Timeout   : 7200 (sec)\n    Verify return code: 0 (ok)\n---\n```\n\n可以看到其中 `Certificate chain` 有两条记录，就是域名证书和CA证书了。\n\n> 有时候返回的感觉不是常见的pem x509证书，比如我司的就是如此。这个就不知道如何处理了。但是采用火狐浏览器获取的，就是一定可以是常见的pem证书。所以还是推荐浏览器方案。\n\n--END--","slug":"2019-2019-04-08-https-ssl","published":1,"updated":"2019-07-18T17:19:07.300Z","comments":1,"photos":[],"link":"","_id":"cjy8y72te005ps21d552qfvl0","content":"<p>公司CDN切换到一家新的服务商，原本切换很简单，没想到在证书上，还是遇到了些问题，这里记录下。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"证书\"><a href=\"#证书\" class=\"headerlink\" title=\"证书\"></a>证书</h2><p>说到证书，就有必要说下具体的涉及东西。</p>\n<p>一般申请网站证书，都会有三样东西：</p>\n<ul>\n<li>私钥，也就是密钥了，这个可以自己生成好，再去申请，也可以直接通过第三方直接生成</li>\n<li>公钥-域名证书，这个是针对你的域名的，公开的</li>\n<li>公钥-CA中间证书，这个可能不会提供，可以自己获取到</li>\n</ul>\n<p>其中私钥是不能泄露的，剩下的公钥，就是要公开的。密钥严格来讲，最好自己生成。</p>\n<blockquote>\n<p>像我这么懒的人，一般都是选择浏览器自动生成CSR。</p>\n</blockquote>\n<p>CA证书就是颁发域名证书的机构，比如叫做B机构。B要想证明你的域名证书有效，就要提供自己的证书。同理，B甚至需要更高一级A机构来证明自己。这样CA中间证书可能不止一个。</p>\n<blockquote>\n<p>CA中间证书，一般我见过的绝大部分都是一个就行了，偶尔遇到过两个的，超过两个的暂时没见过。</p>\n</blockquote>\n<p>其中公钥（域名证书、CA证书）可以合并，将所有的公钥按顺序拼接就好。所以如果你的公钥只有一个文件，可以打看看下，是不是有多个段落。一般拼接好的证书，叫做链式证书（full_chain）。</p>\n<p><strong>这里就要有个经验了，不知道为啥，拼接两个证书的时候，都是域名证书在上，CA证书在下。顺序反了的话，可能有兼容性问题，比如 nginx 不识别啥的。</strong></p>\n<p>证书存储上，我认为直接保存链式证书比较方便，因为域名证书和CA证书混在一起，你可能后续就分不清了。</p>\n<blockquote>\n<p>经验所谈，一般内容较长的是域名证书，短一点的是CA证书。你可以看下自己的证书，是不是如此。</p>\n</blockquote>\n<h2 id=\"商用证书\"><a href=\"#商用证书\" class=\"headerlink\" title=\"商用证书\"></a>商用证书</h2><p>自己弄的免费证书和花钱买的还真可能不一样。比如 <a href=\"https://freessl.cn/\" target=\"_blank\" rel=\"noopener\">FreeSSL</a> 免费生成的，最终都是这样的结果：</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-04-08-https-ssl-1.png-wm.black\" alt=\"img\"></p>\n<p>区分好了私钥、以及公钥的域名证书和CA中间证书。而且格式pem rsa的，直接就可以使用。更方便的是，如果点击下载，还会帮你把域名证书和CA中间证书整合在一个文件。</p>\n<p>买的商用证书就不一样了，首先不知道是什么加密格式，私钥是不太一样的，同时配套给了一个密码（当时研究出来了，现在只有上帝知道）。而且还遇到了上文提到的，不提供CA证书。</p>\n<blockquote>\n<p>现在猜测应该是 pkcs 加密证书，因为解密后，就不想保留原有加密的内容了。</p>\n</blockquote>\n<p>对于一些常规的 CDN 或者服务器证书配置，好像还可以支持，但是大部分情况，都需要转换下。由于我司的证书年代久远，当时转换方法我也就记不得了。总之很多时候都靠猜和运气。</p>\n<h2 id=\"CA中间证书的获取\"><a href=\"#CA中间证书的获取\" class=\"headerlink\" title=\"CA中间证书的获取\"></a>CA中间证书的获取</h2><p>对于一些厂商可能不提供CA中间证书，这个也不用怕，因为都是公开的证书，可以获取的。</p>\n<p>当时获取我司的签发机构证书忘记了如何操作的。现在查询了下，大概有两种方法。</p>\n<h3 id=\"浏览器查看并导出法\"><a href=\"#浏览器查看并导出法\" class=\"headerlink\" title=\"浏览器查看并导出法\"></a>浏览器查看并导出法</h3><p>这个原本 chrome 也支持的，但是好像某一个版本之后功能改版了，就不能导出了。</p>\n<p>现在主流的方案都是用 Firefox 来导出。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-04-08-https-ssl-2.png-wm.black\" alt=\"img\"></p>\n<p>在访问的域名前，点击绿色标志，并选择右箭头的功能。之后选择 “更多信息”。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-04-08-https-ssl-3.png-wm.black\" alt=\"img\"></p>\n<p>弹出证书框后，选择“安全”选项卡，里面就有“查看证书”。证书查看器中，有“详细信息”选项卡，里面有“导出”功能。支持导出域名证书以及证书链。</p>\n<p>这个方法好处是非常直观，导出的也是我们常见的pem（也可以导出其他格式）。</p>\n<p>缺点也很明显，假如这个网站是中间跳转页，那么一瞬间就跳转走了，根本没办法点击是不是…你说气人不…</p>\n<h3 id=\"openssl-导出法\"><a href=\"#openssl-导出法\" class=\"headerlink\" title=\"openssl 导出法\"></a>openssl 导出法</h3><p>这个方法我玩的不是很溜，仅仅是知道有这么个方法，供参考吧。</p>\n<p>安装工具类 <code>openssl</code> 之后，可以用命令查询证书。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl s_client -connect host:port -showcerts</span><br></pre></td></tr></table></figure>\n\n<p>比如查询我的网站就是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl s_client -connect www.yukapril.com:443 -showcerts</span><br></pre></td></tr></table></figure>\n\n<p>可以返回</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONNECTED(00000005)</span><br><span class=\"line\">depth=2 C = US, O = DigiCert Inc, OU = www.digicert.com, CN = DigiCert Global Root CA</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">depth=1 C = US, O = DigiCert Inc, OU = www.digicert.com, CN = Encryption Everywhere DV TLS CA - G1</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">depth=0 CN = img.ucdl.pp.uc.cn</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">---</span><br><span class=\"line\">Certificate chain</span><br><span class=\"line\"> 0 s:/CN=img.ucdl.pp.uc.cn</span><br><span class=\"line\">   【注册时的邮箱】:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=Encryption Everywhere DV TLS CA - G1</span><br><span class=\"line\">-----BEGIN CERTIFICATE-----</span><br><span class=\"line\">MIIHJTCCBg2gAwIBAgIQDypRrHvTErPCp3dELPGfVDANBgkqhkiG9w0BAQsFADBu</span><br><span class=\"line\">...省略...</span><br><span class=\"line\">-----END CERTIFICATE-----</span><br><span class=\"line\"> 1 s:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=Encryption Everywhere DV TLS CA - G1</span><br><span class=\"line\">   【注册时的邮箱】:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert Global Root CA</span><br><span class=\"line\">-----BEGIN CERTIFICATE-----</span><br><span class=\"line\">MIIEqjCCA5KgAwIBAgIQAnmsRYvBskWr+YBTzSybsTANBgkqhkiG9w0BAQsFADBh</span><br><span class=\"line\">...省略...</span><br><span class=\"line\">-----END CERTIFICATE-----</span><br><span class=\"line\">---</span><br><span class=\"line\">Server certificate</span><br><span class=\"line\">subject=/CN=img.ucdl.pp.uc.cn</span><br><span class=\"line\">issuer=/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=Encryption Everywhere DV TLS CA - G1</span><br><span class=\"line\">---</span><br><span class=\"line\">No client certificate CA names sent</span><br><span class=\"line\">Server Temp Key: ECDH, X25519, 253 bits</span><br><span class=\"line\">---</span><br><span class=\"line\">SSL handshake has read 3647 bytes and written 285 bytes</span><br><span class=\"line\">---</span><br><span class=\"line\">New, TLSv1/SSLv3, Cipher is ECDHE-RSA-CHACHA20-POLY1305</span><br><span class=\"line\">Server public key is 2048 bit</span><br><span class=\"line\">Secure Renegotiation IS supported</span><br><span class=\"line\">Compression: NONE</span><br><span class=\"line\">Expansion: NONE</span><br><span class=\"line\">No ALPN negotiated</span><br><span class=\"line\">SSL-Session:</span><br><span class=\"line\">    Protocol  : TLSv1.2</span><br><span class=\"line\">    Cipher    : ECDHE-RSA-CHACHA20-POLY1305</span><br><span class=\"line\">    Session-ID: 508935B5D7781D4F3ECD9FEC381D92F4AB0BFF3761F9197D2CDC4531602A3C70</span><br><span class=\"line\">    Session-ID-ctx:</span><br><span class=\"line\">    Master-Key: 2DADAC30A131BE41B218D22003A5A8FDF084FFB6BE78DFC8DE143F30C70672A81AD140D4586C43460404E95130FAED8A</span><br><span class=\"line\">    TLS session ticket lifetime hint: 900 (seconds)</span><br><span class=\"line\">    TLS session ticket:</span><br><span class=\"line\">    0000 - c7 f3 15 16 ca 6f 94 ed-9e 9e 8e b7 f6 f1 53 b1   .....o........S.</span><br><span class=\"line\">    0010 - 4b 1a d2 46 da ce de 85-80 18 d4 f2 76 f4 3a e8   K..F........v.:.</span><br><span class=\"line\">    0020 - b5 a3 b1 0f ee 04 25 9d-e8 d0 c9 16 f4 6d 16 7c   ......%......m.|</span><br><span class=\"line\">    0030 - a1 8f 53 3c bb 1d 61 c4-e3 74 a4 2d d5 5c 0e 27   ..S&lt;..a..t.-.\\.&apos;</span><br><span class=\"line\">    0040 - af 72 b4 ee 0a 35 87 05-ae d5 99 db a8 9f be 1c   .r...5..........</span><br><span class=\"line\">    0050 - f5 ff ff 1d 8b 5b e2 ef-f4 fc ba 2c c9 fb 9d 16   .....[.....,....</span><br><span class=\"line\">    0060 - 77 ba 74 b8 65 14 a9 85-cd ec c8 99 98 c0 81 3a   w.t.e..........:</span><br><span class=\"line\">    0070 - 22 c7 61 68 7c 51 bc d9-3b 3d 4d c3 12 e5 98 81   &quot;.ah|Q..;=M.....</span><br><span class=\"line\">    0080 - 4e d1 05 4d 38 8d b5 17-88 50 10 f2 df 64 d5 93   N..M8....P...d..</span><br><span class=\"line\">    0090 - 2c 14 17 31 e2 40 b0 5e-6c 6b e6 e5 de 0a d1 a1   ,..1.@.^lk......</span><br><span class=\"line\"></span><br><span class=\"line\">    Start Time: 1554736914</span><br><span class=\"line\">    Timeout   : 7200 (sec)</span><br><span class=\"line\">    Verify return code: 0 (ok)</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>可以看到其中 <code>Certificate chain</code> 有两条记录，就是域名证书和CA证书了。</p>\n<blockquote>\n<p>有时候返回的感觉不是常见的pem x509证书，比如我司的就是如此。这个就不知道如何处理了。但是采用火狐浏览器获取的，就是一定可以是常见的pem证书。所以还是推荐浏览器方案。</p>\n</blockquote>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>公司CDN切换到一家新的服务商，原本切换很简单，没想到在证书上，还是遇到了些问题，这里记录下。</p>","more":"<h2 id=\"证书\"><a href=\"#证书\" class=\"headerlink\" title=\"证书\"></a>证书</h2><p>说到证书，就有必要说下具体的涉及东西。</p>\n<p>一般申请网站证书，都会有三样东西：</p>\n<ul>\n<li>私钥，也就是密钥了，这个可以自己生成好，再去申请，也可以直接通过第三方直接生成</li>\n<li>公钥-域名证书，这个是针对你的域名的，公开的</li>\n<li>公钥-CA中间证书，这个可能不会提供，可以自己获取到</li>\n</ul>\n<p>其中私钥是不能泄露的，剩下的公钥，就是要公开的。密钥严格来讲，最好自己生成。</p>\n<blockquote>\n<p>像我这么懒的人，一般都是选择浏览器自动生成CSR。</p>\n</blockquote>\n<p>CA证书就是颁发域名证书的机构，比如叫做B机构。B要想证明你的域名证书有效，就要提供自己的证书。同理，B甚至需要更高一级A机构来证明自己。这样CA中间证书可能不止一个。</p>\n<blockquote>\n<p>CA中间证书，一般我见过的绝大部分都是一个就行了，偶尔遇到过两个的，超过两个的暂时没见过。</p>\n</blockquote>\n<p>其中公钥（域名证书、CA证书）可以合并，将所有的公钥按顺序拼接就好。所以如果你的公钥只有一个文件，可以打看看下，是不是有多个段落。一般拼接好的证书，叫做链式证书（full_chain）。</p>\n<p><strong>这里就要有个经验了，不知道为啥，拼接两个证书的时候，都是域名证书在上，CA证书在下。顺序反了的话，可能有兼容性问题，比如 nginx 不识别啥的。</strong></p>\n<p>证书存储上，我认为直接保存链式证书比较方便，因为域名证书和CA证书混在一起，你可能后续就分不清了。</p>\n<blockquote>\n<p>经验所谈，一般内容较长的是域名证书，短一点的是CA证书。你可以看下自己的证书，是不是如此。</p>\n</blockquote>\n<h2 id=\"商用证书\"><a href=\"#商用证书\" class=\"headerlink\" title=\"商用证书\"></a>商用证书</h2><p>自己弄的免费证书和花钱买的还真可能不一样。比如 <a href=\"https://freessl.cn/\" target=\"_blank\" rel=\"noopener\">FreeSSL</a> 免费生成的，最终都是这样的结果：</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-04-08-https-ssl-1.png-wm.black\" alt=\"img\"></p>\n<p>区分好了私钥、以及公钥的域名证书和CA中间证书。而且格式pem rsa的，直接就可以使用。更方便的是，如果点击下载，还会帮你把域名证书和CA中间证书整合在一个文件。</p>\n<p>买的商用证书就不一样了，首先不知道是什么加密格式，私钥是不太一样的，同时配套给了一个密码（当时研究出来了，现在只有上帝知道）。而且还遇到了上文提到的，不提供CA证书。</p>\n<blockquote>\n<p>现在猜测应该是 pkcs 加密证书，因为解密后，就不想保留原有加密的内容了。</p>\n</blockquote>\n<p>对于一些常规的 CDN 或者服务器证书配置，好像还可以支持，但是大部分情况，都需要转换下。由于我司的证书年代久远，当时转换方法我也就记不得了。总之很多时候都靠猜和运气。</p>\n<h2 id=\"CA中间证书的获取\"><a href=\"#CA中间证书的获取\" class=\"headerlink\" title=\"CA中间证书的获取\"></a>CA中间证书的获取</h2><p>对于一些厂商可能不提供CA中间证书，这个也不用怕，因为都是公开的证书，可以获取的。</p>\n<p>当时获取我司的签发机构证书忘记了如何操作的。现在查询了下，大概有两种方法。</p>\n<h3 id=\"浏览器查看并导出法\"><a href=\"#浏览器查看并导出法\" class=\"headerlink\" title=\"浏览器查看并导出法\"></a>浏览器查看并导出法</h3><p>这个原本 chrome 也支持的，但是好像某一个版本之后功能改版了，就不能导出了。</p>\n<p>现在主流的方案都是用 Firefox 来导出。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-04-08-https-ssl-2.png-wm.black\" alt=\"img\"></p>\n<p>在访问的域名前，点击绿色标志，并选择右箭头的功能。之后选择 “更多信息”。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-04-08-https-ssl-3.png-wm.black\" alt=\"img\"></p>\n<p>弹出证书框后，选择“安全”选项卡，里面就有“查看证书”。证书查看器中，有“详细信息”选项卡，里面有“导出”功能。支持导出域名证书以及证书链。</p>\n<p>这个方法好处是非常直观，导出的也是我们常见的pem（也可以导出其他格式）。</p>\n<p>缺点也很明显，假如这个网站是中间跳转页，那么一瞬间就跳转走了，根本没办法点击是不是…你说气人不…</p>\n<h3 id=\"openssl-导出法\"><a href=\"#openssl-导出法\" class=\"headerlink\" title=\"openssl 导出法\"></a>openssl 导出法</h3><p>这个方法我玩的不是很溜，仅仅是知道有这么个方法，供参考吧。</p>\n<p>安装工具类 <code>openssl</code> 之后，可以用命令查询证书。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl s_client -connect host:port -showcerts</span><br></pre></td></tr></table></figure>\n\n<p>比如查询我的网站就是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl s_client -connect www.yukapril.com:443 -showcerts</span><br></pre></td></tr></table></figure>\n\n<p>可以返回</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONNECTED(00000005)</span><br><span class=\"line\">depth=2 C = US, O = DigiCert Inc, OU = www.digicert.com, CN = DigiCert Global Root CA</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">depth=1 C = US, O = DigiCert Inc, OU = www.digicert.com, CN = Encryption Everywhere DV TLS CA - G1</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">depth=0 CN = img.ucdl.pp.uc.cn</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">---</span><br><span class=\"line\">Certificate chain</span><br><span class=\"line\"> 0 s:/CN=img.ucdl.pp.uc.cn</span><br><span class=\"line\">   【注册时的邮箱】:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=Encryption Everywhere DV TLS CA - G1</span><br><span class=\"line\">-----BEGIN CERTIFICATE-----</span><br><span class=\"line\">MIIHJTCCBg2gAwIBAgIQDypRrHvTErPCp3dELPGfVDANBgkqhkiG9w0BAQsFADBu</span><br><span class=\"line\">...省略...</span><br><span class=\"line\">-----END CERTIFICATE-----</span><br><span class=\"line\"> 1 s:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=Encryption Everywhere DV TLS CA - G1</span><br><span class=\"line\">   【注册时的邮箱】:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert Global Root CA</span><br><span class=\"line\">-----BEGIN CERTIFICATE-----</span><br><span class=\"line\">MIIEqjCCA5KgAwIBAgIQAnmsRYvBskWr+YBTzSybsTANBgkqhkiG9w0BAQsFADBh</span><br><span class=\"line\">...省略...</span><br><span class=\"line\">-----END CERTIFICATE-----</span><br><span class=\"line\">---</span><br><span class=\"line\">Server certificate</span><br><span class=\"line\">subject=/CN=img.ucdl.pp.uc.cn</span><br><span class=\"line\">issuer=/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=Encryption Everywhere DV TLS CA - G1</span><br><span class=\"line\">---</span><br><span class=\"line\">No client certificate CA names sent</span><br><span class=\"line\">Server Temp Key: ECDH, X25519, 253 bits</span><br><span class=\"line\">---</span><br><span class=\"line\">SSL handshake has read 3647 bytes and written 285 bytes</span><br><span class=\"line\">---</span><br><span class=\"line\">New, TLSv1/SSLv3, Cipher is ECDHE-RSA-CHACHA20-POLY1305</span><br><span class=\"line\">Server public key is 2048 bit</span><br><span class=\"line\">Secure Renegotiation IS supported</span><br><span class=\"line\">Compression: NONE</span><br><span class=\"line\">Expansion: NONE</span><br><span class=\"line\">No ALPN negotiated</span><br><span class=\"line\">SSL-Session:</span><br><span class=\"line\">    Protocol  : TLSv1.2</span><br><span class=\"line\">    Cipher    : ECDHE-RSA-CHACHA20-POLY1305</span><br><span class=\"line\">    Session-ID: 508935B5D7781D4F3ECD9FEC381D92F4AB0BFF3761F9197D2CDC4531602A3C70</span><br><span class=\"line\">    Session-ID-ctx:</span><br><span class=\"line\">    Master-Key: 2DADAC30A131BE41B218D22003A5A8FDF084FFB6BE78DFC8DE143F30C70672A81AD140D4586C43460404E95130FAED8A</span><br><span class=\"line\">    TLS session ticket lifetime hint: 900 (seconds)</span><br><span class=\"line\">    TLS session ticket:</span><br><span class=\"line\">    0000 - c7 f3 15 16 ca 6f 94 ed-9e 9e 8e b7 f6 f1 53 b1   .....o........S.</span><br><span class=\"line\">    0010 - 4b 1a d2 46 da ce de 85-80 18 d4 f2 76 f4 3a e8   K..F........v.:.</span><br><span class=\"line\">    0020 - b5 a3 b1 0f ee 04 25 9d-e8 d0 c9 16 f4 6d 16 7c   ......%......m.|</span><br><span class=\"line\">    0030 - a1 8f 53 3c bb 1d 61 c4-e3 74 a4 2d d5 5c 0e 27   ..S&lt;..a..t.-.\\.&apos;</span><br><span class=\"line\">    0040 - af 72 b4 ee 0a 35 87 05-ae d5 99 db a8 9f be 1c   .r...5..........</span><br><span class=\"line\">    0050 - f5 ff ff 1d 8b 5b e2 ef-f4 fc ba 2c c9 fb 9d 16   .....[.....,....</span><br><span class=\"line\">    0060 - 77 ba 74 b8 65 14 a9 85-cd ec c8 99 98 c0 81 3a   w.t.e..........:</span><br><span class=\"line\">    0070 - 22 c7 61 68 7c 51 bc d9-3b 3d 4d c3 12 e5 98 81   &quot;.ah|Q..;=M.....</span><br><span class=\"line\">    0080 - 4e d1 05 4d 38 8d b5 17-88 50 10 f2 df 64 d5 93   N..M8....P...d..</span><br><span class=\"line\">    0090 - 2c 14 17 31 e2 40 b0 5e-6c 6b e6 e5 de 0a d1 a1   ,..1.@.^lk......</span><br><span class=\"line\"></span><br><span class=\"line\">    Start Time: 1554736914</span><br><span class=\"line\">    Timeout   : 7200 (sec)</span><br><span class=\"line\">    Verify return code: 0 (ok)</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>可以看到其中 <code>Certificate chain</code> 有两条记录，就是域名证书和CA证书了。</p>\n<blockquote>\n<p>有时候返回的感觉不是常见的pem x509证书，比如我司的就是如此。这个就不知道如何处理了。但是采用火狐浏览器获取的，就是一定可以是常见的pem证书。所以还是推荐浏览器方案。</p>\n</blockquote>\n<p>–END–</p>"},{"layout":"post","title":"Learning Markdown","date":"2019-04-15T23:24:00.000Z","_content":"\n网上教程很多，自己整理一份最基础的功能，以及排版注意事项。\n\n<!-- more -->\n\n## 工具篇\n\n#### Typora\n\n* 免费 \n* Windows / MacOS / Linux\n* 纯 markdown 功能，没有标签管理能力\n* 全平台所见即所得，好用且免费，强烈推荐\n\n#### 有道云笔记\n\n* 免费 \n* Windows / MacOS / Linux\n* 太常见的工具，不多介绍了\n\n#### Bear熊掌记\n\n* 收费。免费可使用基础功能\n* 支持 MacOS\n* 支持文章标签等管理\n* 不是完美支持 markdown 语法，比较遗憾\n* 外观非常好看，很多人推荐，适合写作，不适合程序员\n\n#### mWeb\n* 收费\n* 支持 MacOS\n* 支持文章等管理，甚至是图片上传图床\n* 我认为是唯独一个可以一边写markdown一遍看效果，并且滚动不卡的APP\n\n#### 绝大部分编辑器\n\n都有 markdown 的原生支持或者插件支持。\n\n#### 专业的付费写作软件\n\nUlysses 等，因为收费太贵，所以没接触过。\n\n## 排版篇\n\n#### 1. 留空行\n\n写一行内容，后续一行要留空，否则会变成一行内容。\n\n**部分语法除外**。主要涉及多行块元素，不要留空。主要有：\n\n* 列表类(*/数字开头)\n* 表格\n* 引用\n\n例如：\n\n```\n这是第一行内容\n              --> 这行空着\n这是第二行内容\n```\n\n```\n* 无需列表项目1\n* 无需列表项目2   -->两行之间，不加空行\n```\n\n#### 2. 留空格\n\n行的块元素，一般要留空格，否则可能有的编辑器解析不了。但行内元素，不能加空格。\n\n例如：\n\n```\n* 这是列表元素\n> 这是引用内容\n# 这是大标题H1\n ^\n 这里都有一个空格\n```\n\n```\n**着重说明内容**\n ^\n 这里都没有空格\n```\n\n## 语法篇\n\n#### 标题\n\n可以定义 H1～H6 标题，一般常用：\n\n* H1 页面标题\n* H2 页面大栏目\n* H3-H4 子栏目\n\n例如：\n\n```\n# 这是H1\n\n## 这是H2 \n\n### 这是H3\n```\n\n一般现在常用上侧写法，可能你会看到如下写法，以下写法可能有的编辑器不能支持：\n\n```\n# 这是H1 #    --> 结尾和头部对称\n\n这是H1\n======       --> 使用等号或横线表示标题  \n```\n\n#### 链接\n\n```\n[我的博客](https://www.yukapril.com)\n```\n\n#### 图片\n\n```\n![LOGO](https://www.yukapril.com/logo.png)\n```\n\n中括号内为图片 alt 内容，可以不写。\n\n#### 文字效果\n\n```\n在这段内容中，*斜体*是这样的，**加粗**这么写，==高亮==效果和编辑器有关，~~删除线~~是这个效果。注意并不是所有编辑器都能支持以上效果。\n```\n\n效果就是：\n\n在这段内容中，*斜体*是这样的，**加粗**这么写，==高亮==效果和编辑器有关，~~删除线~~是这个效果。注意并不是所有编辑器都能支持以上效果。\n\n#### 引用\n\n```\n> 这里是需要引用的文本\n\n> 如果引用多行内容，\n> \n> 那么请注意，\n> \n> 可能需要这样写\n```\n\n有的编辑器引用的内容也要留有空行，但是引用符号不可省略。\n\n#### 分割线\n\n```\n====\n\n****\n```\n\n这两种都可以生成分割线，一般常见都是 4 个字符，但最少用 3 个字符也可以生效。\n\n区别上，可能用星号粗一些，等号窄一些。这要看编辑器自己的实现。有的编辑器不能识别等号写法。\n\n#### 代码块\n\n<pre><code>\n```js\nvar abc = ''\n```\n</code></pre>\n\n用三个反斜杠表示，后可以接语言类型，有的编辑器可以进行高亮显示。\n\n#### 行内代码\n\n```\n在一个项目中，我加入了 `var hmt = []` 这句代码解决了问题。\n```\n\n效果：\n\n在一个项目中，我加入了 `var hmt = []` 这句代码解决了问题。\n\n#### 列表\n\n```\n* 无序列表1\n  * 无序列表1.1\n  * 无序列表1.2\n* 无序列表2\n\n1. 有序列表1\n2. 有序列表2\n```\n\n无序列表，可以用星号 `*`，也可以用短线 `-`，还可以用 `+`。\n\n有序列表需要使用数字后跟英文句号 `.`，而且**数字无所谓多少，都是从 1 开始排序**。\n\n#### 代办事项\n\n```\n- [ ] 未完成事项\n- [x] 已完成事项\n```\n\n代办事项，可以用星号 `*`，也可以用短线 `-`。选中项目，中括号内有个 `x`。\n\n#### 表格\n\n| 列1（默认左对齐） | 列2（左对齐） | 列3（右对齐） | 列4（居中对齐） |\n| --- | :-- | --: | :--: |\n| 文字 | 文字 | 文字 | 文字 |\n| 文字 | 文字 | 文字 | 文字 |\n\n第一行为行标题，第二行为对齐方式，后续为每一行内容。对齐方式中的符号，至少有三个字符（可以无限加入短线 `-`）。\n\n对齐方式：\n\n* `:--` 代表左对齐\n* `--:` 代表右对齐\n* `:--:`代表居中对齐\n\n\n#### 不常用功能\n\n由于不常用，我也不太会。\n\n比如脚注。\n\n#### 图表、TOC、LaTeX 公式等其他功能\n\n这些功能属于扩展功能，需要 markdown 编辑器额外实现（或引入相关功能插件），由于编辑器实现方式不同，故没有特别统一的写法。\n\n唯独 `LaTeX 公式` 比较统一，只要是编辑器支持，基本上写法都差不太多。\n\n#### HTML 兼容语法\n\n由于 markdown 兼容 HTML 语法，所以完全可以在 markdown 中写 HTML。😀\n\n## 参考\n\n[Daring Fireball: Markdown Syntax Documentation](https://daringfireball.net/projects/markdown/syntax)","source":"_posts/2019/2019-04-15-learning-markdown.md","raw":"---\nlayout: post\ntitle: Learning Markdown\ndate: 2019-04-15 23:24:00 GMT+0000\ncategories: [代码]\ntags:  [markdown]\n---\n\n网上教程很多，自己整理一份最基础的功能，以及排版注意事项。\n\n<!-- more -->\n\n## 工具篇\n\n#### Typora\n\n* 免费 \n* Windows / MacOS / Linux\n* 纯 markdown 功能，没有标签管理能力\n* 全平台所见即所得，好用且免费，强烈推荐\n\n#### 有道云笔记\n\n* 免费 \n* Windows / MacOS / Linux\n* 太常见的工具，不多介绍了\n\n#### Bear熊掌记\n\n* 收费。免费可使用基础功能\n* 支持 MacOS\n* 支持文章标签等管理\n* 不是完美支持 markdown 语法，比较遗憾\n* 外观非常好看，很多人推荐，适合写作，不适合程序员\n\n#### mWeb\n* 收费\n* 支持 MacOS\n* 支持文章等管理，甚至是图片上传图床\n* 我认为是唯独一个可以一边写markdown一遍看效果，并且滚动不卡的APP\n\n#### 绝大部分编辑器\n\n都有 markdown 的原生支持或者插件支持。\n\n#### 专业的付费写作软件\n\nUlysses 等，因为收费太贵，所以没接触过。\n\n## 排版篇\n\n#### 1. 留空行\n\n写一行内容，后续一行要留空，否则会变成一行内容。\n\n**部分语法除外**。主要涉及多行块元素，不要留空。主要有：\n\n* 列表类(*/数字开头)\n* 表格\n* 引用\n\n例如：\n\n```\n这是第一行内容\n              --> 这行空着\n这是第二行内容\n```\n\n```\n* 无需列表项目1\n* 无需列表项目2   -->两行之间，不加空行\n```\n\n#### 2. 留空格\n\n行的块元素，一般要留空格，否则可能有的编辑器解析不了。但行内元素，不能加空格。\n\n例如：\n\n```\n* 这是列表元素\n> 这是引用内容\n# 这是大标题H1\n ^\n 这里都有一个空格\n```\n\n```\n**着重说明内容**\n ^\n 这里都没有空格\n```\n\n## 语法篇\n\n#### 标题\n\n可以定义 H1～H6 标题，一般常用：\n\n* H1 页面标题\n* H2 页面大栏目\n* H3-H4 子栏目\n\n例如：\n\n```\n# 这是H1\n\n## 这是H2 \n\n### 这是H3\n```\n\n一般现在常用上侧写法，可能你会看到如下写法，以下写法可能有的编辑器不能支持：\n\n```\n# 这是H1 #    --> 结尾和头部对称\n\n这是H1\n======       --> 使用等号或横线表示标题  \n```\n\n#### 链接\n\n```\n[我的博客](https://www.yukapril.com)\n```\n\n#### 图片\n\n```\n![LOGO](https://www.yukapril.com/logo.png)\n```\n\n中括号内为图片 alt 内容，可以不写。\n\n#### 文字效果\n\n```\n在这段内容中，*斜体*是这样的，**加粗**这么写，==高亮==效果和编辑器有关，~~删除线~~是这个效果。注意并不是所有编辑器都能支持以上效果。\n```\n\n效果就是：\n\n在这段内容中，*斜体*是这样的，**加粗**这么写，==高亮==效果和编辑器有关，~~删除线~~是这个效果。注意并不是所有编辑器都能支持以上效果。\n\n#### 引用\n\n```\n> 这里是需要引用的文本\n\n> 如果引用多行内容，\n> \n> 那么请注意，\n> \n> 可能需要这样写\n```\n\n有的编辑器引用的内容也要留有空行，但是引用符号不可省略。\n\n#### 分割线\n\n```\n====\n\n****\n```\n\n这两种都可以生成分割线，一般常见都是 4 个字符，但最少用 3 个字符也可以生效。\n\n区别上，可能用星号粗一些，等号窄一些。这要看编辑器自己的实现。有的编辑器不能识别等号写法。\n\n#### 代码块\n\n<pre><code>\n```js\nvar abc = ''\n```\n</code></pre>\n\n用三个反斜杠表示，后可以接语言类型，有的编辑器可以进行高亮显示。\n\n#### 行内代码\n\n```\n在一个项目中，我加入了 `var hmt = []` 这句代码解决了问题。\n```\n\n效果：\n\n在一个项目中，我加入了 `var hmt = []` 这句代码解决了问题。\n\n#### 列表\n\n```\n* 无序列表1\n  * 无序列表1.1\n  * 无序列表1.2\n* 无序列表2\n\n1. 有序列表1\n2. 有序列表2\n```\n\n无序列表，可以用星号 `*`，也可以用短线 `-`，还可以用 `+`。\n\n有序列表需要使用数字后跟英文句号 `.`，而且**数字无所谓多少，都是从 1 开始排序**。\n\n#### 代办事项\n\n```\n- [ ] 未完成事项\n- [x] 已完成事项\n```\n\n代办事项，可以用星号 `*`，也可以用短线 `-`。选中项目，中括号内有个 `x`。\n\n#### 表格\n\n| 列1（默认左对齐） | 列2（左对齐） | 列3（右对齐） | 列4（居中对齐） |\n| --- | :-- | --: | :--: |\n| 文字 | 文字 | 文字 | 文字 |\n| 文字 | 文字 | 文字 | 文字 |\n\n第一行为行标题，第二行为对齐方式，后续为每一行内容。对齐方式中的符号，至少有三个字符（可以无限加入短线 `-`）。\n\n对齐方式：\n\n* `:--` 代表左对齐\n* `--:` 代表右对齐\n* `:--:`代表居中对齐\n\n\n#### 不常用功能\n\n由于不常用，我也不太会。\n\n比如脚注。\n\n#### 图表、TOC、LaTeX 公式等其他功能\n\n这些功能属于扩展功能，需要 markdown 编辑器额外实现（或引入相关功能插件），由于编辑器实现方式不同，故没有特别统一的写法。\n\n唯独 `LaTeX 公式` 比较统一，只要是编辑器支持，基本上写法都差不太多。\n\n#### HTML 兼容语法\n\n由于 markdown 兼容 HTML 语法，所以完全可以在 markdown 中写 HTML。😀\n\n## 参考\n\n[Daring Fireball: Markdown Syntax Documentation](https://daringfireball.net/projects/markdown/syntax)","slug":"2019-2019-04-15-learning-markdown","published":1,"updated":"2019-07-18T17:19:07.328Z","comments":1,"photos":[],"link":"","_id":"cjy8y72tf005ss21dhgt5fstu","content":"<p>网上教程很多，自己整理一份最基础的功能，以及排版注意事项。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"工具篇\"><a href=\"#工具篇\" class=\"headerlink\" title=\"工具篇\"></a>工具篇</h2><h4 id=\"Typora\"><a href=\"#Typora\" class=\"headerlink\" title=\"Typora\"></a>Typora</h4><ul>\n<li>免费 </li>\n<li>Windows / MacOS / Linux</li>\n<li>纯 markdown 功能，没有标签管理能力</li>\n<li>全平台所见即所得，好用且免费，强烈推荐</li>\n</ul>\n<h4 id=\"有道云笔记\"><a href=\"#有道云笔记\" class=\"headerlink\" title=\"有道云笔记\"></a>有道云笔记</h4><ul>\n<li>免费 </li>\n<li>Windows / MacOS / Linux</li>\n<li>太常见的工具，不多介绍了</li>\n</ul>\n<h4 id=\"Bear熊掌记\"><a href=\"#Bear熊掌记\" class=\"headerlink\" title=\"Bear熊掌记\"></a>Bear熊掌记</h4><ul>\n<li>收费。免费可使用基础功能</li>\n<li>支持 MacOS</li>\n<li>支持文章标签等管理</li>\n<li>不是完美支持 markdown 语法，比较遗憾</li>\n<li>外观非常好看，很多人推荐，适合写作，不适合程序员</li>\n</ul>\n<h4 id=\"mWeb\"><a href=\"#mWeb\" class=\"headerlink\" title=\"mWeb\"></a>mWeb</h4><ul>\n<li>收费</li>\n<li>支持 MacOS</li>\n<li>支持文章等管理，甚至是图片上传图床</li>\n<li>我认为是唯独一个可以一边写markdown一遍看效果，并且滚动不卡的APP</li>\n</ul>\n<h4 id=\"绝大部分编辑器\"><a href=\"#绝大部分编辑器\" class=\"headerlink\" title=\"绝大部分编辑器\"></a>绝大部分编辑器</h4><p>都有 markdown 的原生支持或者插件支持。</p>\n<h4 id=\"专业的付费写作软件\"><a href=\"#专业的付费写作软件\" class=\"headerlink\" title=\"专业的付费写作软件\"></a>专业的付费写作软件</h4><p>Ulysses 等，因为收费太贵，所以没接触过。</p>\n<h2 id=\"排版篇\"><a href=\"#排版篇\" class=\"headerlink\" title=\"排版篇\"></a>排版篇</h2><h4 id=\"1-留空行\"><a href=\"#1-留空行\" class=\"headerlink\" title=\"1. 留空行\"></a>1. 留空行</h4><p>写一行内容，后续一行要留空，否则会变成一行内容。</p>\n<p><strong>部分语法除外</strong>。主要涉及多行块元素，不要留空。主要有：</p>\n<ul>\n<li>列表类(*/数字开头)</li>\n<li>表格</li>\n<li>引用</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是第一行内容</span><br><span class=\"line\">              --&gt; 这行空着</span><br><span class=\"line\">这是第二行内容</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 无需列表项目1</span><br><span class=\"line\">* 无需列表项目2   --&gt;两行之间，不加空行</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-留空格\"><a href=\"#2-留空格\" class=\"headerlink\" title=\"2. 留空格\"></a>2. 留空格</h4><p>行的块元素，一般要留空格，否则可能有的编辑器解析不了。但行内元素，不能加空格。</p>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 这是列表元素</span><br><span class=\"line\">&gt; 这是引用内容</span><br><span class=\"line\"># 这是大标题H1</span><br><span class=\"line\"> ^</span><br><span class=\"line\"> 这里都有一个空格</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**着重说明内容**</span><br><span class=\"line\"> ^</span><br><span class=\"line\"> 这里都没有空格</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"语法篇\"><a href=\"#语法篇\" class=\"headerlink\" title=\"语法篇\"></a>语法篇</h2><h4 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h4><p>可以定义 H1～H6 标题，一般常用：</p>\n<ul>\n<li>H1 页面标题</li>\n<li>H2 页面大栏目</li>\n<li>H3-H4 子栏目</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这是H1</span><br><span class=\"line\"></span><br><span class=\"line\">## 这是H2 </span><br><span class=\"line\"></span><br><span class=\"line\">### 这是H3</span><br></pre></td></tr></table></figure>\n\n<p>一般现在常用上侧写法，可能你会看到如下写法，以下写法可能有的编辑器不能支持：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这是H1 #    --&gt; 结尾和头部对称</span><br><span class=\"line\"></span><br><span class=\"line\">这是H1</span><br><span class=\"line\">======       --&gt; 使用等号或横线表示标题</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[我的博客](https://www.yukapril.com)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![LOGO](https://www.yukapril.com/logo.png)</span><br></pre></td></tr></table></figure>\n\n<p>中括号内为图片 alt 内容，可以不写。</p>\n<h4 id=\"文字效果\"><a href=\"#文字效果\" class=\"headerlink\" title=\"文字效果\"></a>文字效果</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在这段内容中，*斜体*是这样的，**加粗**这么写，==高亮==效果和编辑器有关，~~删除线~~是这个效果。注意并不是所有编辑器都能支持以上效果。</span><br></pre></td></tr></table></figure>\n\n<p>效果就是：</p>\n<p>在这段内容中，<em>斜体</em>是这样的，<strong>加粗</strong>这么写，==高亮==效果和编辑器有关，<del>删除线</del>是这个效果。注意并不是所有编辑器都能支持以上效果。</p>\n<h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 这里是需要引用的文本</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 如果引用多行内容，</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt; 那么请注意，</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt; 可能需要这样写</span><br></pre></td></tr></table></figure>\n\n<p>有的编辑器引用的内容也要留有空行，但是引用符号不可省略。</p>\n<h4 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">====</span><br><span class=\"line\"></span><br><span class=\"line\">****</span><br></pre></td></tr></table></figure>\n\n<p>这两种都可以生成分割线，一般常见都是 4 个字符，但最少用 3 个字符也可以生效。</p>\n<p>区别上，可能用星号粗一些，等号窄一些。这要看编辑器自己的实现。有的编辑器不能识别等号写法。</p>\n<h4 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><pre><code>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> abc = <span class=\"string\">''</span></span><br></pre></td></tr></table></figure>\n\n</code></pre>\n\n<p>用三个反斜杠表示，后可以接语言类型，有的编辑器可以进行高亮显示。</p>\n<h4 id=\"行内代码\"><a href=\"#行内代码\" class=\"headerlink\" title=\"行内代码\"></a>行内代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在一个项目中，我加入了 `var hmt = []` 这句代码解决了问题。</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p>在一个项目中，我加入了 <code>var hmt = []</code> 这句代码解决了问题。</p>\n<h4 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 无序列表1</span><br><span class=\"line\">  * 无序列表1.1</span><br><span class=\"line\">  * 无序列表1.2</span><br><span class=\"line\">* 无序列表2</span><br><span class=\"line\"></span><br><span class=\"line\">1. 有序列表1</span><br><span class=\"line\">2. 有序列表2</span><br></pre></td></tr></table></figure>\n\n<p>无序列表，可以用星号 <code>*</code>，也可以用短线 <code>-</code>，还可以用 <code>+</code>。</p>\n<p>有序列表需要使用数字后跟英文句号 <code>.</code>，而且<strong>数字无所谓多少，都是从 1 开始排序</strong>。</p>\n<h4 id=\"代办事项\"><a href=\"#代办事项\" class=\"headerlink\" title=\"代办事项\"></a>代办事项</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- [ ] 未完成事项</span><br><span class=\"line\">- [x] 已完成事项</span><br></pre></td></tr></table></figure>\n\n<p>代办事项，可以用星号 <code>*</code>，也可以用短线 <code>-</code>。选中项目，中括号内有个 <code>x</code>。</p>\n<h4 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h4><table>\n<thead>\n<tr>\n<th>列1（默认左对齐）</th>\n<th align=\"left\">列2（左对齐）</th>\n<th align=\"right\">列3（右对齐）</th>\n<th align=\"center\">列4（居中对齐）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>文字</td>\n<td align=\"left\">文字</td>\n<td align=\"right\">文字</td>\n<td align=\"center\">文字</td>\n</tr>\n<tr>\n<td>文字</td>\n<td align=\"left\">文字</td>\n<td align=\"right\">文字</td>\n<td align=\"center\">文字</td>\n</tr>\n</tbody></table>\n<p>第一行为行标题，第二行为对齐方式，后续为每一行内容。对齐方式中的符号，至少有三个字符（可以无限加入短线 <code>-</code>）。</p>\n<p>对齐方式：</p>\n<ul>\n<li><code>:--</code> 代表左对齐</li>\n<li><code>--:</code> 代表右对齐</li>\n<li><code>:--:</code>代表居中对齐</li>\n</ul>\n<h4 id=\"不常用功能\"><a href=\"#不常用功能\" class=\"headerlink\" title=\"不常用功能\"></a>不常用功能</h4><p>由于不常用，我也不太会。</p>\n<p>比如脚注。</p>\n<h4 id=\"图表、TOC、LaTeX-公式等其他功能\"><a href=\"#图表、TOC、LaTeX-公式等其他功能\" class=\"headerlink\" title=\"图表、TOC、LaTeX 公式等其他功能\"></a>图表、TOC、LaTeX 公式等其他功能</h4><p>这些功能属于扩展功能，需要 markdown 编辑器额外实现（或引入相关功能插件），由于编辑器实现方式不同，故没有特别统一的写法。</p>\n<p>唯独 <code>LaTeX 公式</code> 比较统一，只要是编辑器支持，基本上写法都差不太多。</p>\n<h4 id=\"HTML-兼容语法\"><a href=\"#HTML-兼容语法\" class=\"headerlink\" title=\"HTML 兼容语法\"></a>HTML 兼容语法</h4><p>由于 markdown 兼容 HTML 语法，所以完全可以在 markdown 中写 HTML。😀</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://daringfireball.net/projects/markdown/syntax\" target=\"_blank\" rel=\"noopener\">Daring Fireball: Markdown Syntax Documentation</a></p>\n","site":{"data":{}},"excerpt":"<p>网上教程很多，自己整理一份最基础的功能，以及排版注意事项。</p>","more":"<h2 id=\"工具篇\"><a href=\"#工具篇\" class=\"headerlink\" title=\"工具篇\"></a>工具篇</h2><h4 id=\"Typora\"><a href=\"#Typora\" class=\"headerlink\" title=\"Typora\"></a>Typora</h4><ul>\n<li>免费 </li>\n<li>Windows / MacOS / Linux</li>\n<li>纯 markdown 功能，没有标签管理能力</li>\n<li>全平台所见即所得，好用且免费，强烈推荐</li>\n</ul>\n<h4 id=\"有道云笔记\"><a href=\"#有道云笔记\" class=\"headerlink\" title=\"有道云笔记\"></a>有道云笔记</h4><ul>\n<li>免费 </li>\n<li>Windows / MacOS / Linux</li>\n<li>太常见的工具，不多介绍了</li>\n</ul>\n<h4 id=\"Bear熊掌记\"><a href=\"#Bear熊掌记\" class=\"headerlink\" title=\"Bear熊掌记\"></a>Bear熊掌记</h4><ul>\n<li>收费。免费可使用基础功能</li>\n<li>支持 MacOS</li>\n<li>支持文章标签等管理</li>\n<li>不是完美支持 markdown 语法，比较遗憾</li>\n<li>外观非常好看，很多人推荐，适合写作，不适合程序员</li>\n</ul>\n<h4 id=\"mWeb\"><a href=\"#mWeb\" class=\"headerlink\" title=\"mWeb\"></a>mWeb</h4><ul>\n<li>收费</li>\n<li>支持 MacOS</li>\n<li>支持文章等管理，甚至是图片上传图床</li>\n<li>我认为是唯独一个可以一边写markdown一遍看效果，并且滚动不卡的APP</li>\n</ul>\n<h4 id=\"绝大部分编辑器\"><a href=\"#绝大部分编辑器\" class=\"headerlink\" title=\"绝大部分编辑器\"></a>绝大部分编辑器</h4><p>都有 markdown 的原生支持或者插件支持。</p>\n<h4 id=\"专业的付费写作软件\"><a href=\"#专业的付费写作软件\" class=\"headerlink\" title=\"专业的付费写作软件\"></a>专业的付费写作软件</h4><p>Ulysses 等，因为收费太贵，所以没接触过。</p>\n<h2 id=\"排版篇\"><a href=\"#排版篇\" class=\"headerlink\" title=\"排版篇\"></a>排版篇</h2><h4 id=\"1-留空行\"><a href=\"#1-留空行\" class=\"headerlink\" title=\"1. 留空行\"></a>1. 留空行</h4><p>写一行内容，后续一行要留空，否则会变成一行内容。</p>\n<p><strong>部分语法除外</strong>。主要涉及多行块元素，不要留空。主要有：</p>\n<ul>\n<li>列表类(*/数字开头)</li>\n<li>表格</li>\n<li>引用</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是第一行内容</span><br><span class=\"line\">              --&gt; 这行空着</span><br><span class=\"line\">这是第二行内容</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 无需列表项目1</span><br><span class=\"line\">* 无需列表项目2   --&gt;两行之间，不加空行</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-留空格\"><a href=\"#2-留空格\" class=\"headerlink\" title=\"2. 留空格\"></a>2. 留空格</h4><p>行的块元素，一般要留空格，否则可能有的编辑器解析不了。但行内元素，不能加空格。</p>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 这是列表元素</span><br><span class=\"line\">&gt; 这是引用内容</span><br><span class=\"line\"># 这是大标题H1</span><br><span class=\"line\"> ^</span><br><span class=\"line\"> 这里都有一个空格</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**着重说明内容**</span><br><span class=\"line\"> ^</span><br><span class=\"line\"> 这里都没有空格</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"语法篇\"><a href=\"#语法篇\" class=\"headerlink\" title=\"语法篇\"></a>语法篇</h2><h4 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h4><p>可以定义 H1～H6 标题，一般常用：</p>\n<ul>\n<li>H1 页面标题</li>\n<li>H2 页面大栏目</li>\n<li>H3-H4 子栏目</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这是H1</span><br><span class=\"line\"></span><br><span class=\"line\">## 这是H2 </span><br><span class=\"line\"></span><br><span class=\"line\">### 这是H3</span><br></pre></td></tr></table></figure>\n\n<p>一般现在常用上侧写法，可能你会看到如下写法，以下写法可能有的编辑器不能支持：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这是H1 #    --&gt; 结尾和头部对称</span><br><span class=\"line\"></span><br><span class=\"line\">这是H1</span><br><span class=\"line\">======       --&gt; 使用等号或横线表示标题</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[我的博客](https://www.yukapril.com)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![LOGO](https://www.yukapril.com/logo.png)</span><br></pre></td></tr></table></figure>\n\n<p>中括号内为图片 alt 内容，可以不写。</p>\n<h4 id=\"文字效果\"><a href=\"#文字效果\" class=\"headerlink\" title=\"文字效果\"></a>文字效果</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在这段内容中，*斜体*是这样的，**加粗**这么写，==高亮==效果和编辑器有关，~~删除线~~是这个效果。注意并不是所有编辑器都能支持以上效果。</span><br></pre></td></tr></table></figure>\n\n<p>效果就是：</p>\n<p>在这段内容中，<em>斜体</em>是这样的，<strong>加粗</strong>这么写，==高亮==效果和编辑器有关，<del>删除线</del>是这个效果。注意并不是所有编辑器都能支持以上效果。</p>\n<h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 这里是需要引用的文本</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 如果引用多行内容，</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt; 那么请注意，</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt; 可能需要这样写</span><br></pre></td></tr></table></figure>\n\n<p>有的编辑器引用的内容也要留有空行，但是引用符号不可省略。</p>\n<h4 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">====</span><br><span class=\"line\"></span><br><span class=\"line\">****</span><br></pre></td></tr></table></figure>\n\n<p>这两种都可以生成分割线，一般常见都是 4 个字符，但最少用 3 个字符也可以生效。</p>\n<p>区别上，可能用星号粗一些，等号窄一些。这要看编辑器自己的实现。有的编辑器不能识别等号写法。</p>\n<h4 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><pre><code>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> abc = <span class=\"string\">''</span></span><br></pre></td></tr></table></figure>\n\n</code></pre>\n\n<p>用三个反斜杠表示，后可以接语言类型，有的编辑器可以进行高亮显示。</p>\n<h4 id=\"行内代码\"><a href=\"#行内代码\" class=\"headerlink\" title=\"行内代码\"></a>行内代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在一个项目中，我加入了 `var hmt = []` 这句代码解决了问题。</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p>在一个项目中，我加入了 <code>var hmt = []</code> 这句代码解决了问题。</p>\n<h4 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 无序列表1</span><br><span class=\"line\">  * 无序列表1.1</span><br><span class=\"line\">  * 无序列表1.2</span><br><span class=\"line\">* 无序列表2</span><br><span class=\"line\"></span><br><span class=\"line\">1. 有序列表1</span><br><span class=\"line\">2. 有序列表2</span><br></pre></td></tr></table></figure>\n\n<p>无序列表，可以用星号 <code>*</code>，也可以用短线 <code>-</code>，还可以用 <code>+</code>。</p>\n<p>有序列表需要使用数字后跟英文句号 <code>.</code>，而且<strong>数字无所谓多少，都是从 1 开始排序</strong>。</p>\n<h4 id=\"代办事项\"><a href=\"#代办事项\" class=\"headerlink\" title=\"代办事项\"></a>代办事项</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- [ ] 未完成事项</span><br><span class=\"line\">- [x] 已完成事项</span><br></pre></td></tr></table></figure>\n\n<p>代办事项，可以用星号 <code>*</code>，也可以用短线 <code>-</code>。选中项目，中括号内有个 <code>x</code>。</p>\n<h4 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h4><table>\n<thead>\n<tr>\n<th>列1（默认左对齐）</th>\n<th align=\"left\">列2（左对齐）</th>\n<th align=\"right\">列3（右对齐）</th>\n<th align=\"center\">列4（居中对齐）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>文字</td>\n<td align=\"left\">文字</td>\n<td align=\"right\">文字</td>\n<td align=\"center\">文字</td>\n</tr>\n<tr>\n<td>文字</td>\n<td align=\"left\">文字</td>\n<td align=\"right\">文字</td>\n<td align=\"center\">文字</td>\n</tr>\n</tbody></table>\n<p>第一行为行标题，第二行为对齐方式，后续为每一行内容。对齐方式中的符号，至少有三个字符（可以无限加入短线 <code>-</code>）。</p>\n<p>对齐方式：</p>\n<ul>\n<li><code>:--</code> 代表左对齐</li>\n<li><code>--:</code> 代表右对齐</li>\n<li><code>:--:</code>代表居中对齐</li>\n</ul>\n<h4 id=\"不常用功能\"><a href=\"#不常用功能\" class=\"headerlink\" title=\"不常用功能\"></a>不常用功能</h4><p>由于不常用，我也不太会。</p>\n<p>比如脚注。</p>\n<h4 id=\"图表、TOC、LaTeX-公式等其他功能\"><a href=\"#图表、TOC、LaTeX-公式等其他功能\" class=\"headerlink\" title=\"图表、TOC、LaTeX 公式等其他功能\"></a>图表、TOC、LaTeX 公式等其他功能</h4><p>这些功能属于扩展功能，需要 markdown 编辑器额外实现（或引入相关功能插件），由于编辑器实现方式不同，故没有特别统一的写法。</p>\n<p>唯独 <code>LaTeX 公式</code> 比较统一，只要是编辑器支持，基本上写法都差不太多。</p>\n<h4 id=\"HTML-兼容语法\"><a href=\"#HTML-兼容语法\" class=\"headerlink\" title=\"HTML 兼容语法\"></a>HTML 兼容语法</h4><p>由于 markdown 兼容 HTML 语法，所以完全可以在 markdown 中写 HTML。😀</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://daringfireball.net/projects/markdown/syntax\" target=\"_blank\" rel=\"noopener\">Daring Fireball: Markdown Syntax Documentation</a></p>"},{"layout":"post","title":"node npm入门","date":"2016-12-01T10:18:00.000Z","_content":"\n这篇文章，主要介绍了npm的各种使用方法，从如何创建配置文件、安装、全局安装、项目安装、卸载组件、启动脚本等。\n\n<!-- more -->\n\n> 其实一直想好好总结下，把学过的东西认真的整理一遍，同时，也希望能在整理过程中，去学习更细致的使用。就这样，我开始进行各种工具的入门了。\n\n## 安装node npm\n\n安装node：建议直接访问[官网](https://nodejs.org)，下载合适的安装包。这样安装的好处是，不需要处理任何环境变量等。\n\n安装好node后，会自动带有npm。也就是说npm也安装好了。\n\n启动终端/命令控制台，输入\n\n* `node -v` : 可以看到当前安装node的版本号，比如v6.2.1\n\n* `npm -v` : 可以看到当前安装npm的版本号，比如3.9.3\n\n如果没有出现版本号，那么，请重新安装。\n\n## 使用node\n\nnode是一个运行环境，我们可以写代码在这个环境里运行。\n\n如果仅仅是调试个别代码，或者说是测试下而已，可以在终端/命令控制台，输入`node`，之后会出现一个`>`符号，此时就可以写代码了。实时显示。\n\n不过一般我们都是把代码写到文件里，在进行执行。\n\n比如，我在`/Users/yukapril`下新建了一个`test.js`文件，写上一句代码：\n\n```js\nconsole.log('hello world!');\n```\n\n之后，我们执行\n\n```bash\ncd /Users/yukapril #进入文件目录\nnode test.js\n```\n这样，我们在我们可以看到结果，返回了一句话`hello world!`。\n\n那node有什么用呢？\n\n我们可以编写一些有用的代码，比如说，删除某个目录下的文件，再将某个目录下的文件拷贝一份过来等等。\n\n反正有强大的语法，无所不能！具体写法，可以参见[API](https://nodejs.org/docs/latest/api/)。\n\n这么做的人不是很多，因为在npm上面，有很多已经写好的工具包了。\n\nnpm？npm是工具，是帮我们找到需要的工具包的工具。可以简单理解为下载工具。\n\n## 使用npm\n\n#### 创建`package.json`文件\n\n使用npm，就要创建配置文件。我相信大部分人都见过`package.json`文件。那么这个文件是如何生成的呢？\n\n除了我们复制一个已有的`package.json`文件，我们是可以用npm进行生成的。\n\n方法是进入项目目录后，执行`npm init`。他会询问你一些问题，来协助生成`package.json`文件。内容如下：\n\n```\nPress ^C at any time to quit.\nname: (test) \nversion: (1.0.0) \ndescription: \nentry point: (test.js) \ntest command: \ngit repository: \nkeywords: \nauthor: \nlicense: (ISC) \nAbout to write to /Users/yukapril/test/package.json:\n\n{\n  \"name\": \"test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"test.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n\n\nIs this ok? (yes) yes\n```\n\n一开始，先会询问项目名字，版本等。你可以直接按回车，使用默认值（即括号内的值）。\n\n最后，他会让你确认生成的json是否合你意，确认请输入`yes`即可。\n\n我一般都是使用默认值，有问题的话，再去`package.json`中修改。\n\n#### 安装依赖包\n\n假设，我们要做一个基于`express`框架的服务器端程序。\n\n* 我们可以在全局安装 `npm install -g express`\n\n* 也可以在项目中安装 `npm install express`\n\n这两种方式的区别：\n\n* 全局安装：在任何一个目录下，都可以直接使用`express`。\n\n* 项目安装：只能在当前项目使用`express`，不在项目目录下，无法使用。会将代码写到`node_modules`目录下。\n\n* 都不改`package.json`文件\n\n除了个别通用性很强的工具（比如`webpack`或者`gulp`），我个人不建议全局安装任何软件工具，因为你可以方便的使用，但是分享给别人的代码中，是不带有此工具的，所以可能是不能运行的。\n\n使用项目安装工具的话，建议使用以下两个参数：\n\n* `npm install express -save` : 项目安装express，同时修改`package.json`的依赖（`dependencies`字段）\n\n* `npm install express -save-dev` : 项目安装express，同时修改`package.json`的开发依赖（`devDependencies`字段）\n\n**这样写的好处是**：安装了那些依赖工具，会在`package.json`中体现出来。如果将项目分享给别人，可以清晰的看到，并安装。\n\n**这两种写法的区别是**：如果是普通依赖，那么说明这个依赖包的代码会最终体现到我们的程序中，如果是开发依赖，那么仅仅在开发过程中需要，最终的程序代码中不含有此依赖。\n\n举个例子说明：我们要基于`express`框架，开发一个网站。开发过程中，要使用`eslint`对代码质量进行测试，同时要使用`karma`做测试用例。那么，`express`就是项目普通依赖，`eslint`和`karma`就是开发依赖。\n\n不过不必担心，这两种依赖并不是严格区分，比如你把上面的例子的三个依赖，全部安装到普通依赖，或者开发依赖，在**本地调试**仍然可以正常启动或编译。因为不论是什么依赖，都是安装为目的。但是可能在服务器上无法运行，因为有的服务器配置上，默认只会安装普通依赖！他认为开发依赖是不需要的！\n\n#### 删除依赖包\n\n有了安装，就要有删除。其实为了省事，可以直接找到已经安装的包，拖拽到回收站。但是windows下，由于文件路径/文件名等原因，可能这样无法删除。\n\n如果想手动删除目录，那么要先确认安装在了哪里：\n\n* `npm root -g` : 获取全局安装路径，返回比如`/usr/local/lib/node_modules`的路径\n\n* `npm root` : 获取当前项目安装的路径，返回比如`/Users/yukapril/test/node_modules`的路径，需要注意的是，如果当前项目没有`package.json` `node_modules`目录，也会有一个返回值，这一点我也不能理解，可能是说，如果需要安装包的话，应该是那个目录。\n\n如果想检查当前项目安装了那些包，使用 `npm list`，我基本上没用过。\n\n删除一个依赖包，也很简单，不过要区分是全局删除，还是项目删除。\n\n* `npm uninstall express -g` : 全局删除依赖\n\n* `npm uninstall express` : 项目删除依赖\n\n#### 批量安装依赖包\n\n还有这种情况，你从网上下载了一个项目，或者要启动别人的项目。项目为了节省空间，一般都不会带有`node_modules`目录的。这时候，就需要你按照`package.json`文件中的依赖，进行安装了。\n\n方法很简单：`npm install`即可。\n\n#### 其他命令\n\n更新一个依赖包，`npm update express`，这个命令我很少用，一般在出现问题时候可能会用到。\n\n## 使用npm srcipts\n\n在使用`npm init`创建的`package.json`，默认如下：\n\n```json\n{\n  \"name\": \"test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"test.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n我们可以在`scripts`字段下，增加我们需要的命令。\n\n比如，以后会用到的`webpack`，项目安装后，即可以使用命令`webpack main.js app.js`执行操作了。我们增加到`build`命令上。\n\n```json\n{\n  \"name\": \"test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"test.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"webpack main.js app.js\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n这样，我们就可以使用`npm run build`来执行对应命令了。\n\n所有的`scripts`下的命令，都可以用`npm run xxx`来执行。\n\n但是有两个特殊命令，有简写方法，他们是：\n\n* `npm run start` : 简写为`npm start`\n\n* `npm run test` : 简写为`npm test`\n\n可能是这两个命令使用率太高，所以有简写方法。\n\n## npm scripts 高级一点的用法\n\n比如我们要做多件事，可以这样来写：\n\n```json\n{\n  \"name\": \"test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"test.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"webpack main.js app.js\",\n    \"build2\": \"webpack other.js app2.js\",\n    \"task1\": \"npm run build & npm run build2\",\n    \"task2\": \"cd test && mkdir abc\",\n    \"show-name\": \"echo npm_package_name\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n其中`task1`和`task2`主要差别在中间的`&`上。一个`&`表示两个任务是并行的，两个`&`表示先执行第一个，成功后执行第二个。\n\n如果要获取`package.json`配置文件内容使用呢？\n\n* 在`srcipts`中，可以使用`npm_package_`前缀来获取`package.json`中的字段值。\n\n    比如：`npm_package_name` `npm_package_scripts_test`。\n\n    由于`scripts`里面是bash脚本，所以只能使用bash语法。不支持js语法的。\n\n* 在项目代码中，要读取`package.json`中的`name`字段，那么怎么来处理？只能使用常规的读取文件方案。\n\n```js\nvar package = require('./package.json');\nconsole.log('项目名：', package.name);\n```\n\n\n## 小结\n\nnpm语法，其中`init` `install` `run`为重点\n\n* `npm init` : 创建`package.json` \n\n* `npm install` : 根据`package.json`安装依赖\n\n* `npm install -g some-package` : 全局安装包\n\n* `npm install some-package` : 项目安装包 \n\n* `npm install some-package -save` : 项目安装包，并更新`package.json`的普通依赖\n\n* `npm install some-package -save-dev` : 项目安装包，并更新`package.json`的开发依赖 \n\n* `npm root -g` : 获取npm依赖包全局安装路径\n\n* `npm root` : 获取npm依赖包项目安装路径 \n\n* `npm list` : 列出当前项目的依赖包\n\n* `npm uninstall some-package -g` : 全局删除依赖包\n\n* `npm uninstall some-package` : 项目删除依赖包\n\n* `npm update some-package` : 更新依赖包\n\n* `npm run some-scripts` : 执行制定脚本","source":"_posts/2016/2016-12-01-npm-introduction.md","raw":"---\nlayout: post\ntitle: \"node npm入门\"\ndate: 2016-12-01 10:18:00 GMT+0000\ncategories: [前端]\ntags:  [node,npm]\n---\n\n这篇文章，主要介绍了npm的各种使用方法，从如何创建配置文件、安装、全局安装、项目安装、卸载组件、启动脚本等。\n\n<!-- more -->\n\n> 其实一直想好好总结下，把学过的东西认真的整理一遍，同时，也希望能在整理过程中，去学习更细致的使用。就这样，我开始进行各种工具的入门了。\n\n## 安装node npm\n\n安装node：建议直接访问[官网](https://nodejs.org)，下载合适的安装包。这样安装的好处是，不需要处理任何环境变量等。\n\n安装好node后，会自动带有npm。也就是说npm也安装好了。\n\n启动终端/命令控制台，输入\n\n* `node -v` : 可以看到当前安装node的版本号，比如v6.2.1\n\n* `npm -v` : 可以看到当前安装npm的版本号，比如3.9.3\n\n如果没有出现版本号，那么，请重新安装。\n\n## 使用node\n\nnode是一个运行环境，我们可以写代码在这个环境里运行。\n\n如果仅仅是调试个别代码，或者说是测试下而已，可以在终端/命令控制台，输入`node`，之后会出现一个`>`符号，此时就可以写代码了。实时显示。\n\n不过一般我们都是把代码写到文件里，在进行执行。\n\n比如，我在`/Users/yukapril`下新建了一个`test.js`文件，写上一句代码：\n\n```js\nconsole.log('hello world!');\n```\n\n之后，我们执行\n\n```bash\ncd /Users/yukapril #进入文件目录\nnode test.js\n```\n这样，我们在我们可以看到结果，返回了一句话`hello world!`。\n\n那node有什么用呢？\n\n我们可以编写一些有用的代码，比如说，删除某个目录下的文件，再将某个目录下的文件拷贝一份过来等等。\n\n反正有强大的语法，无所不能！具体写法，可以参见[API](https://nodejs.org/docs/latest/api/)。\n\n这么做的人不是很多，因为在npm上面，有很多已经写好的工具包了。\n\nnpm？npm是工具，是帮我们找到需要的工具包的工具。可以简单理解为下载工具。\n\n## 使用npm\n\n#### 创建`package.json`文件\n\n使用npm，就要创建配置文件。我相信大部分人都见过`package.json`文件。那么这个文件是如何生成的呢？\n\n除了我们复制一个已有的`package.json`文件，我们是可以用npm进行生成的。\n\n方法是进入项目目录后，执行`npm init`。他会询问你一些问题，来协助生成`package.json`文件。内容如下：\n\n```\nPress ^C at any time to quit.\nname: (test) \nversion: (1.0.0) \ndescription: \nentry point: (test.js) \ntest command: \ngit repository: \nkeywords: \nauthor: \nlicense: (ISC) \nAbout to write to /Users/yukapril/test/package.json:\n\n{\n  \"name\": \"test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"test.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n\n\nIs this ok? (yes) yes\n```\n\n一开始，先会询问项目名字，版本等。你可以直接按回车，使用默认值（即括号内的值）。\n\n最后，他会让你确认生成的json是否合你意，确认请输入`yes`即可。\n\n我一般都是使用默认值，有问题的话，再去`package.json`中修改。\n\n#### 安装依赖包\n\n假设，我们要做一个基于`express`框架的服务器端程序。\n\n* 我们可以在全局安装 `npm install -g express`\n\n* 也可以在项目中安装 `npm install express`\n\n这两种方式的区别：\n\n* 全局安装：在任何一个目录下，都可以直接使用`express`。\n\n* 项目安装：只能在当前项目使用`express`，不在项目目录下，无法使用。会将代码写到`node_modules`目录下。\n\n* 都不改`package.json`文件\n\n除了个别通用性很强的工具（比如`webpack`或者`gulp`），我个人不建议全局安装任何软件工具，因为你可以方便的使用，但是分享给别人的代码中，是不带有此工具的，所以可能是不能运行的。\n\n使用项目安装工具的话，建议使用以下两个参数：\n\n* `npm install express -save` : 项目安装express，同时修改`package.json`的依赖（`dependencies`字段）\n\n* `npm install express -save-dev` : 项目安装express，同时修改`package.json`的开发依赖（`devDependencies`字段）\n\n**这样写的好处是**：安装了那些依赖工具，会在`package.json`中体现出来。如果将项目分享给别人，可以清晰的看到，并安装。\n\n**这两种写法的区别是**：如果是普通依赖，那么说明这个依赖包的代码会最终体现到我们的程序中，如果是开发依赖，那么仅仅在开发过程中需要，最终的程序代码中不含有此依赖。\n\n举个例子说明：我们要基于`express`框架，开发一个网站。开发过程中，要使用`eslint`对代码质量进行测试，同时要使用`karma`做测试用例。那么，`express`就是项目普通依赖，`eslint`和`karma`就是开发依赖。\n\n不过不必担心，这两种依赖并不是严格区分，比如你把上面的例子的三个依赖，全部安装到普通依赖，或者开发依赖，在**本地调试**仍然可以正常启动或编译。因为不论是什么依赖，都是安装为目的。但是可能在服务器上无法运行，因为有的服务器配置上，默认只会安装普通依赖！他认为开发依赖是不需要的！\n\n#### 删除依赖包\n\n有了安装，就要有删除。其实为了省事，可以直接找到已经安装的包，拖拽到回收站。但是windows下，由于文件路径/文件名等原因，可能这样无法删除。\n\n如果想手动删除目录，那么要先确认安装在了哪里：\n\n* `npm root -g` : 获取全局安装路径，返回比如`/usr/local/lib/node_modules`的路径\n\n* `npm root` : 获取当前项目安装的路径，返回比如`/Users/yukapril/test/node_modules`的路径，需要注意的是，如果当前项目没有`package.json` `node_modules`目录，也会有一个返回值，这一点我也不能理解，可能是说，如果需要安装包的话，应该是那个目录。\n\n如果想检查当前项目安装了那些包，使用 `npm list`，我基本上没用过。\n\n删除一个依赖包，也很简单，不过要区分是全局删除，还是项目删除。\n\n* `npm uninstall express -g` : 全局删除依赖\n\n* `npm uninstall express` : 项目删除依赖\n\n#### 批量安装依赖包\n\n还有这种情况，你从网上下载了一个项目，或者要启动别人的项目。项目为了节省空间，一般都不会带有`node_modules`目录的。这时候，就需要你按照`package.json`文件中的依赖，进行安装了。\n\n方法很简单：`npm install`即可。\n\n#### 其他命令\n\n更新一个依赖包，`npm update express`，这个命令我很少用，一般在出现问题时候可能会用到。\n\n## 使用npm srcipts\n\n在使用`npm init`创建的`package.json`，默认如下：\n\n```json\n{\n  \"name\": \"test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"test.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n我们可以在`scripts`字段下，增加我们需要的命令。\n\n比如，以后会用到的`webpack`，项目安装后，即可以使用命令`webpack main.js app.js`执行操作了。我们增加到`build`命令上。\n\n```json\n{\n  \"name\": \"test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"test.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"webpack main.js app.js\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n这样，我们就可以使用`npm run build`来执行对应命令了。\n\n所有的`scripts`下的命令，都可以用`npm run xxx`来执行。\n\n但是有两个特殊命令，有简写方法，他们是：\n\n* `npm run start` : 简写为`npm start`\n\n* `npm run test` : 简写为`npm test`\n\n可能是这两个命令使用率太高，所以有简写方法。\n\n## npm scripts 高级一点的用法\n\n比如我们要做多件事，可以这样来写：\n\n```json\n{\n  \"name\": \"test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"test.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"webpack main.js app.js\",\n    \"build2\": \"webpack other.js app2.js\",\n    \"task1\": \"npm run build & npm run build2\",\n    \"task2\": \"cd test && mkdir abc\",\n    \"show-name\": \"echo npm_package_name\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n其中`task1`和`task2`主要差别在中间的`&`上。一个`&`表示两个任务是并行的，两个`&`表示先执行第一个，成功后执行第二个。\n\n如果要获取`package.json`配置文件内容使用呢？\n\n* 在`srcipts`中，可以使用`npm_package_`前缀来获取`package.json`中的字段值。\n\n    比如：`npm_package_name` `npm_package_scripts_test`。\n\n    由于`scripts`里面是bash脚本，所以只能使用bash语法。不支持js语法的。\n\n* 在项目代码中，要读取`package.json`中的`name`字段，那么怎么来处理？只能使用常规的读取文件方案。\n\n```js\nvar package = require('./package.json');\nconsole.log('项目名：', package.name);\n```\n\n\n## 小结\n\nnpm语法，其中`init` `install` `run`为重点\n\n* `npm init` : 创建`package.json` \n\n* `npm install` : 根据`package.json`安装依赖\n\n* `npm install -g some-package` : 全局安装包\n\n* `npm install some-package` : 项目安装包 \n\n* `npm install some-package -save` : 项目安装包，并更新`package.json`的普通依赖\n\n* `npm install some-package -save-dev` : 项目安装包，并更新`package.json`的开发依赖 \n\n* `npm root -g` : 获取npm依赖包全局安装路径\n\n* `npm root` : 获取npm依赖包项目安装路径 \n\n* `npm list` : 列出当前项目的依赖包\n\n* `npm uninstall some-package -g` : 全局删除依赖包\n\n* `npm uninstall some-package` : 项目删除依赖包\n\n* `npm update some-package` : 更新依赖包\n\n* `npm run some-scripts` : 执行制定脚本","slug":"2016-2016-12-01-npm-introduction","published":1,"updated":"2019-07-18T17:19:07.061Z","comments":1,"photos":[],"link":"","_id":"cjy8y72us00bts21dykm3x56c","content":"<p>这篇文章，主要介绍了npm的各种使用方法，从如何创建配置文件、安装、全局安装、项目安装、卸载组件、启动脚本等。</p>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>其实一直想好好总结下，把学过的东西认真的整理一遍，同时，也希望能在整理过程中，去学习更细致的使用。就这样，我开始进行各种工具的入门了。</p>\n</blockquote>\n<h2 id=\"安装node-npm\"><a href=\"#安装node-npm\" class=\"headerlink\" title=\"安装node npm\"></a>安装node npm</h2><p>安装node：建议直接访问<a href=\"https://nodejs.org\" target=\"_blank\" rel=\"noopener\">官网</a>，下载合适的安装包。这样安装的好处是，不需要处理任何环境变量等。</p>\n<p>安装好node后，会自动带有npm。也就是说npm也安装好了。</p>\n<p>启动终端/命令控制台，输入</p>\n<ul>\n<li><p><code>node -v</code> : 可以看到当前安装node的版本号，比如v6.2.1</p>\n</li>\n<li><p><code>npm -v</code> : 可以看到当前安装npm的版本号，比如3.9.3</p>\n</li>\n</ul>\n<p>如果没有出现版本号，那么，请重新安装。</p>\n<h2 id=\"使用node\"><a href=\"#使用node\" class=\"headerlink\" title=\"使用node\"></a>使用node</h2><p>node是一个运行环境，我们可以写代码在这个环境里运行。</p>\n<p>如果仅仅是调试个别代码，或者说是测试下而已，可以在终端/命令控制台，输入<code>node</code>，之后会出现一个<code>&gt;</code>符号，此时就可以写代码了。实时显示。</p>\n<p>不过一般我们都是把代码写到文件里，在进行执行。</p>\n<p>比如，我在<code>/Users/yukapril</code>下新建了一个<code>test.js</code>文件，写上一句代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world!'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>之后，我们执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /Users/yukapril <span class=\"comment\">#进入文件目录</span></span><br><span class=\"line\">node test.js</span><br></pre></td></tr></table></figure>\n\n<p>这样，我们在我们可以看到结果，返回了一句话<code>hello world!</code>。</p>\n<p>那node有什么用呢？</p>\n<p>我们可以编写一些有用的代码，比如说，删除某个目录下的文件，再将某个目录下的文件拷贝一份过来等等。</p>\n<p>反正有强大的语法，无所不能！具体写法，可以参见<a href=\"https://nodejs.org/docs/latest/api/\" target=\"_blank\" rel=\"noopener\">API</a>。</p>\n<p>这么做的人不是很多，因为在npm上面，有很多已经写好的工具包了。</p>\n<p>npm？npm是工具，是帮我们找到需要的工具包的工具。可以简单理解为下载工具。</p>\n<h2 id=\"使用npm\"><a href=\"#使用npm\" class=\"headerlink\" title=\"使用npm\"></a>使用npm</h2><h4 id=\"创建package-json文件\"><a href=\"#创建package-json文件\" class=\"headerlink\" title=\"创建package.json文件\"></a>创建<code>package.json</code>文件</h4><p>使用npm，就要创建配置文件。我相信大部分人都见过<code>package.json</code>文件。那么这个文件是如何生成的呢？</p>\n<p>除了我们复制一个已有的<code>package.json</code>文件，我们是可以用npm进行生成的。</p>\n<p>方法是进入项目目录后，执行<code>npm init</code>。他会询问你一些问题，来协助生成<code>package.json</code>文件。内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Press ^C at any time to quit.</span><br><span class=\"line\">name: (test) </span><br><span class=\"line\">version: (1.0.0) </span><br><span class=\"line\">description: </span><br><span class=\"line\">entry point: (test.js) </span><br><span class=\"line\">test command: </span><br><span class=\"line\">git repository: </span><br><span class=\"line\">keywords: </span><br><span class=\"line\">author: </span><br><span class=\"line\">license: (ISC) </span><br><span class=\"line\">About to write to /Users/yukapril/test/package.json:</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;test&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;test.js&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;author&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Is this ok? (yes) yes</span><br></pre></td></tr></table></figure>\n\n<p>一开始，先会询问项目名字，版本等。你可以直接按回车，使用默认值（即括号内的值）。</p>\n<p>最后，他会让你确认生成的json是否合你意，确认请输入<code>yes</code>即可。</p>\n<p>我一般都是使用默认值，有问题的话，再去<code>package.json</code>中修改。</p>\n<h4 id=\"安装依赖包\"><a href=\"#安装依赖包\" class=\"headerlink\" title=\"安装依赖包\"></a>安装依赖包</h4><p>假设，我们要做一个基于<code>express</code>框架的服务器端程序。</p>\n<ul>\n<li><p>我们可以在全局安装 <code>npm install -g express</code></p>\n</li>\n<li><p>也可以在项目中安装 <code>npm install express</code></p>\n</li>\n</ul>\n<p>这两种方式的区别：</p>\n<ul>\n<li><p>全局安装：在任何一个目录下，都可以直接使用<code>express</code>。</p>\n</li>\n<li><p>项目安装：只能在当前项目使用<code>express</code>，不在项目目录下，无法使用。会将代码写到<code>node_modules</code>目录下。</p>\n</li>\n<li><p>都不改<code>package.json</code>文件</p>\n</li>\n</ul>\n<p>除了个别通用性很强的工具（比如<code>webpack</code>或者<code>gulp</code>），我个人不建议全局安装任何软件工具，因为你可以方便的使用，但是分享给别人的代码中，是不带有此工具的，所以可能是不能运行的。</p>\n<p>使用项目安装工具的话，建议使用以下两个参数：</p>\n<ul>\n<li><p><code>npm install express -save</code> : 项目安装express，同时修改<code>package.json</code>的依赖（<code>dependencies</code>字段）</p>\n</li>\n<li><p><code>npm install express -save-dev</code> : 项目安装express，同时修改<code>package.json</code>的开发依赖（<code>devDependencies</code>字段）</p>\n</li>\n</ul>\n<p><strong>这样写的好处是</strong>：安装了那些依赖工具，会在<code>package.json</code>中体现出来。如果将项目分享给别人，可以清晰的看到，并安装。</p>\n<p><strong>这两种写法的区别是</strong>：如果是普通依赖，那么说明这个依赖包的代码会最终体现到我们的程序中，如果是开发依赖，那么仅仅在开发过程中需要，最终的程序代码中不含有此依赖。</p>\n<p>举个例子说明：我们要基于<code>express</code>框架，开发一个网站。开发过程中，要使用<code>eslint</code>对代码质量进行测试，同时要使用<code>karma</code>做测试用例。那么，<code>express</code>就是项目普通依赖，<code>eslint</code>和<code>karma</code>就是开发依赖。</p>\n<p>不过不必担心，这两种依赖并不是严格区分，比如你把上面的例子的三个依赖，全部安装到普通依赖，或者开发依赖，在<strong>本地调试</strong>仍然可以正常启动或编译。因为不论是什么依赖，都是安装为目的。但是可能在服务器上无法运行，因为有的服务器配置上，默认只会安装普通依赖！他认为开发依赖是不需要的！</p>\n<h4 id=\"删除依赖包\"><a href=\"#删除依赖包\" class=\"headerlink\" title=\"删除依赖包\"></a>删除依赖包</h4><p>有了安装，就要有删除。其实为了省事，可以直接找到已经安装的包，拖拽到回收站。但是windows下，由于文件路径/文件名等原因，可能这样无法删除。</p>\n<p>如果想手动删除目录，那么要先确认安装在了哪里：</p>\n<ul>\n<li><p><code>npm root -g</code> : 获取全局安装路径，返回比如<code>/usr/local/lib/node_modules</code>的路径</p>\n</li>\n<li><p><code>npm root</code> : 获取当前项目安装的路径，返回比如<code>/Users/yukapril/test/node_modules</code>的路径，需要注意的是，如果当前项目没有<code>package.json</code> <code>node_modules</code>目录，也会有一个返回值，这一点我也不能理解，可能是说，如果需要安装包的话，应该是那个目录。</p>\n</li>\n</ul>\n<p>如果想检查当前项目安装了那些包，使用 <code>npm list</code>，我基本上没用过。</p>\n<p>删除一个依赖包，也很简单，不过要区分是全局删除，还是项目删除。</p>\n<ul>\n<li><p><code>npm uninstall express -g</code> : 全局删除依赖</p>\n</li>\n<li><p><code>npm uninstall express</code> : 项目删除依赖</p>\n</li>\n</ul>\n<h4 id=\"批量安装依赖包\"><a href=\"#批量安装依赖包\" class=\"headerlink\" title=\"批量安装依赖包\"></a>批量安装依赖包</h4><p>还有这种情况，你从网上下载了一个项目，或者要启动别人的项目。项目为了节省空间，一般都不会带有<code>node_modules</code>目录的。这时候，就需要你按照<code>package.json</code>文件中的依赖，进行安装了。</p>\n<p>方法很简单：<code>npm install</code>即可。</p>\n<h4 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h4><p>更新一个依赖包，<code>npm update express</code>，这个命令我很少用，一般在出现问题时候可能会用到。</p>\n<h2 id=\"使用npm-srcipts\"><a href=\"#使用npm-srcipts\" class=\"headerlink\" title=\"使用npm srcipts\"></a>使用npm srcipts</h2><p>在使用<code>npm init</code>创建的<code>package.json</code>，默认如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"test\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"test.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以在<code>scripts</code>字段下，增加我们需要的命令。</p>\n<p>比如，以后会用到的<code>webpack</code>，项目安装后，即可以使用命令<code>webpack main.js app.js</code>执行操作了。我们增加到<code>build</code>命令上。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"test\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"test.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"webpack main.js app.js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样，我们就可以使用<code>npm run build</code>来执行对应命令了。</p>\n<p>所有的<code>scripts</code>下的命令，都可以用<code>npm run xxx</code>来执行。</p>\n<p>但是有两个特殊命令，有简写方法，他们是：</p>\n<ul>\n<li><p><code>npm run start</code> : 简写为<code>npm start</code></p>\n</li>\n<li><p><code>npm run test</code> : 简写为<code>npm test</code></p>\n</li>\n</ul>\n<p>可能是这两个命令使用率太高，所以有简写方法。</p>\n<h2 id=\"npm-scripts-高级一点的用法\"><a href=\"#npm-scripts-高级一点的用法\" class=\"headerlink\" title=\"npm scripts 高级一点的用法\"></a>npm scripts 高级一点的用法</h2><p>比如我们要做多件事，可以这样来写：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"test\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"test.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"webpack main.js app.js\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build2\"</span>: <span class=\"string\">\"webpack other.js app2.js\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"task1\"</span>: <span class=\"string\">\"npm run build &amp; npm run build2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"task2\"</span>: <span class=\"string\">\"cd test &amp;&amp; mkdir abc\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"show-name\"</span>: <span class=\"string\">\"echo npm_package_name\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>task1</code>和<code>task2</code>主要差别在中间的<code>&amp;</code>上。一个<code>&amp;</code>表示两个任务是并行的，两个<code>&amp;</code>表示先执行第一个，成功后执行第二个。</p>\n<p>如果要获取<code>package.json</code>配置文件内容使用呢？</p>\n<ul>\n<li><p>在<code>srcipts</code>中，可以使用<code>npm_package_</code>前缀来获取<code>package.json</code>中的字段值。</p>\n<p>  比如：<code>npm_package_name</code> <code>npm_package_scripts_test</code>。</p>\n<p>  由于<code>scripts</code>里面是bash脚本，所以只能使用bash语法。不支持js语法的。</p>\n</li>\n<li><p>在项目代码中，要读取<code>package.json</code>中的<code>name</code>字段，那么怎么来处理？只能使用常规的读取文件方案。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> package = <span class=\"built_in\">require</span>(<span class=\"string\">'./package.json'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'项目名：'</span>, package.name);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>npm语法，其中<code>init</code> <code>install</code> <code>run</code>为重点</p>\n<ul>\n<li><p><code>npm init</code> : 创建<code>package.json</code> </p>\n</li>\n<li><p><code>npm install</code> : 根据<code>package.json</code>安装依赖</p>\n</li>\n<li><p><code>npm install -g some-package</code> : 全局安装包</p>\n</li>\n<li><p><code>npm install some-package</code> : 项目安装包 </p>\n</li>\n<li><p><code>npm install some-package -save</code> : 项目安装包，并更新<code>package.json</code>的普通依赖</p>\n</li>\n<li><p><code>npm install some-package -save-dev</code> : 项目安装包，并更新<code>package.json</code>的开发依赖 </p>\n</li>\n<li><p><code>npm root -g</code> : 获取npm依赖包全局安装路径</p>\n</li>\n<li><p><code>npm root</code> : 获取npm依赖包项目安装路径 </p>\n</li>\n<li><p><code>npm list</code> : 列出当前项目的依赖包</p>\n</li>\n<li><p><code>npm uninstall some-package -g</code> : 全局删除依赖包</p>\n</li>\n<li><p><code>npm uninstall some-package</code> : 项目删除依赖包</p>\n</li>\n<li><p><code>npm update some-package</code> : 更新依赖包</p>\n</li>\n<li><p><code>npm run some-scripts</code> : 执行制定脚本</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>这篇文章，主要介绍了npm的各种使用方法，从如何创建配置文件、安装、全局安装、项目安装、卸载组件、启动脚本等。</p>","more":"<blockquote>\n<p>其实一直想好好总结下，把学过的东西认真的整理一遍，同时，也希望能在整理过程中，去学习更细致的使用。就这样，我开始进行各种工具的入门了。</p>\n</blockquote>\n<h2 id=\"安装node-npm\"><a href=\"#安装node-npm\" class=\"headerlink\" title=\"安装node npm\"></a>安装node npm</h2><p>安装node：建议直接访问<a href=\"https://nodejs.org\" target=\"_blank\" rel=\"noopener\">官网</a>，下载合适的安装包。这样安装的好处是，不需要处理任何环境变量等。</p>\n<p>安装好node后，会自动带有npm。也就是说npm也安装好了。</p>\n<p>启动终端/命令控制台，输入</p>\n<ul>\n<li><p><code>node -v</code> : 可以看到当前安装node的版本号，比如v6.2.1</p>\n</li>\n<li><p><code>npm -v</code> : 可以看到当前安装npm的版本号，比如3.9.3</p>\n</li>\n</ul>\n<p>如果没有出现版本号，那么，请重新安装。</p>\n<h2 id=\"使用node\"><a href=\"#使用node\" class=\"headerlink\" title=\"使用node\"></a>使用node</h2><p>node是一个运行环境，我们可以写代码在这个环境里运行。</p>\n<p>如果仅仅是调试个别代码，或者说是测试下而已，可以在终端/命令控制台，输入<code>node</code>，之后会出现一个<code>&gt;</code>符号，此时就可以写代码了。实时显示。</p>\n<p>不过一般我们都是把代码写到文件里，在进行执行。</p>\n<p>比如，我在<code>/Users/yukapril</code>下新建了一个<code>test.js</code>文件，写上一句代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world!'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>之后，我们执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /Users/yukapril <span class=\"comment\">#进入文件目录</span></span><br><span class=\"line\">node test.js</span><br></pre></td></tr></table></figure>\n\n<p>这样，我们在我们可以看到结果，返回了一句话<code>hello world!</code>。</p>\n<p>那node有什么用呢？</p>\n<p>我们可以编写一些有用的代码，比如说，删除某个目录下的文件，再将某个目录下的文件拷贝一份过来等等。</p>\n<p>反正有强大的语法，无所不能！具体写法，可以参见<a href=\"https://nodejs.org/docs/latest/api/\" target=\"_blank\" rel=\"noopener\">API</a>。</p>\n<p>这么做的人不是很多，因为在npm上面，有很多已经写好的工具包了。</p>\n<p>npm？npm是工具，是帮我们找到需要的工具包的工具。可以简单理解为下载工具。</p>\n<h2 id=\"使用npm\"><a href=\"#使用npm\" class=\"headerlink\" title=\"使用npm\"></a>使用npm</h2><h4 id=\"创建package-json文件\"><a href=\"#创建package-json文件\" class=\"headerlink\" title=\"创建package.json文件\"></a>创建<code>package.json</code>文件</h4><p>使用npm，就要创建配置文件。我相信大部分人都见过<code>package.json</code>文件。那么这个文件是如何生成的呢？</p>\n<p>除了我们复制一个已有的<code>package.json</code>文件，我们是可以用npm进行生成的。</p>\n<p>方法是进入项目目录后，执行<code>npm init</code>。他会询问你一些问题，来协助生成<code>package.json</code>文件。内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Press ^C at any time to quit.</span><br><span class=\"line\">name: (test) </span><br><span class=\"line\">version: (1.0.0) </span><br><span class=\"line\">description: </span><br><span class=\"line\">entry point: (test.js) </span><br><span class=\"line\">test command: </span><br><span class=\"line\">git repository: </span><br><span class=\"line\">keywords: </span><br><span class=\"line\">author: </span><br><span class=\"line\">license: (ISC) </span><br><span class=\"line\">About to write to /Users/yukapril/test/package.json:</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;test&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;test.js&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;author&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Is this ok? (yes) yes</span><br></pre></td></tr></table></figure>\n\n<p>一开始，先会询问项目名字，版本等。你可以直接按回车，使用默认值（即括号内的值）。</p>\n<p>最后，他会让你确认生成的json是否合你意，确认请输入<code>yes</code>即可。</p>\n<p>我一般都是使用默认值，有问题的话，再去<code>package.json</code>中修改。</p>\n<h4 id=\"安装依赖包\"><a href=\"#安装依赖包\" class=\"headerlink\" title=\"安装依赖包\"></a>安装依赖包</h4><p>假设，我们要做一个基于<code>express</code>框架的服务器端程序。</p>\n<ul>\n<li><p>我们可以在全局安装 <code>npm install -g express</code></p>\n</li>\n<li><p>也可以在项目中安装 <code>npm install express</code></p>\n</li>\n</ul>\n<p>这两种方式的区别：</p>\n<ul>\n<li><p>全局安装：在任何一个目录下，都可以直接使用<code>express</code>。</p>\n</li>\n<li><p>项目安装：只能在当前项目使用<code>express</code>，不在项目目录下，无法使用。会将代码写到<code>node_modules</code>目录下。</p>\n</li>\n<li><p>都不改<code>package.json</code>文件</p>\n</li>\n</ul>\n<p>除了个别通用性很强的工具（比如<code>webpack</code>或者<code>gulp</code>），我个人不建议全局安装任何软件工具，因为你可以方便的使用，但是分享给别人的代码中，是不带有此工具的，所以可能是不能运行的。</p>\n<p>使用项目安装工具的话，建议使用以下两个参数：</p>\n<ul>\n<li><p><code>npm install express -save</code> : 项目安装express，同时修改<code>package.json</code>的依赖（<code>dependencies</code>字段）</p>\n</li>\n<li><p><code>npm install express -save-dev</code> : 项目安装express，同时修改<code>package.json</code>的开发依赖（<code>devDependencies</code>字段）</p>\n</li>\n</ul>\n<p><strong>这样写的好处是</strong>：安装了那些依赖工具，会在<code>package.json</code>中体现出来。如果将项目分享给别人，可以清晰的看到，并安装。</p>\n<p><strong>这两种写法的区别是</strong>：如果是普通依赖，那么说明这个依赖包的代码会最终体现到我们的程序中，如果是开发依赖，那么仅仅在开发过程中需要，最终的程序代码中不含有此依赖。</p>\n<p>举个例子说明：我们要基于<code>express</code>框架，开发一个网站。开发过程中，要使用<code>eslint</code>对代码质量进行测试，同时要使用<code>karma</code>做测试用例。那么，<code>express</code>就是项目普通依赖，<code>eslint</code>和<code>karma</code>就是开发依赖。</p>\n<p>不过不必担心，这两种依赖并不是严格区分，比如你把上面的例子的三个依赖，全部安装到普通依赖，或者开发依赖，在<strong>本地调试</strong>仍然可以正常启动或编译。因为不论是什么依赖，都是安装为目的。但是可能在服务器上无法运行，因为有的服务器配置上，默认只会安装普通依赖！他认为开发依赖是不需要的！</p>\n<h4 id=\"删除依赖包\"><a href=\"#删除依赖包\" class=\"headerlink\" title=\"删除依赖包\"></a>删除依赖包</h4><p>有了安装，就要有删除。其实为了省事，可以直接找到已经安装的包，拖拽到回收站。但是windows下，由于文件路径/文件名等原因，可能这样无法删除。</p>\n<p>如果想手动删除目录，那么要先确认安装在了哪里：</p>\n<ul>\n<li><p><code>npm root -g</code> : 获取全局安装路径，返回比如<code>/usr/local/lib/node_modules</code>的路径</p>\n</li>\n<li><p><code>npm root</code> : 获取当前项目安装的路径，返回比如<code>/Users/yukapril/test/node_modules</code>的路径，需要注意的是，如果当前项目没有<code>package.json</code> <code>node_modules</code>目录，也会有一个返回值，这一点我也不能理解，可能是说，如果需要安装包的话，应该是那个目录。</p>\n</li>\n</ul>\n<p>如果想检查当前项目安装了那些包，使用 <code>npm list</code>，我基本上没用过。</p>\n<p>删除一个依赖包，也很简单，不过要区分是全局删除，还是项目删除。</p>\n<ul>\n<li><p><code>npm uninstall express -g</code> : 全局删除依赖</p>\n</li>\n<li><p><code>npm uninstall express</code> : 项目删除依赖</p>\n</li>\n</ul>\n<h4 id=\"批量安装依赖包\"><a href=\"#批量安装依赖包\" class=\"headerlink\" title=\"批量安装依赖包\"></a>批量安装依赖包</h4><p>还有这种情况，你从网上下载了一个项目，或者要启动别人的项目。项目为了节省空间，一般都不会带有<code>node_modules</code>目录的。这时候，就需要你按照<code>package.json</code>文件中的依赖，进行安装了。</p>\n<p>方法很简单：<code>npm install</code>即可。</p>\n<h4 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h4><p>更新一个依赖包，<code>npm update express</code>，这个命令我很少用，一般在出现问题时候可能会用到。</p>\n<h2 id=\"使用npm-srcipts\"><a href=\"#使用npm-srcipts\" class=\"headerlink\" title=\"使用npm srcipts\"></a>使用npm srcipts</h2><p>在使用<code>npm init</code>创建的<code>package.json</code>，默认如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"test\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"test.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以在<code>scripts</code>字段下，增加我们需要的命令。</p>\n<p>比如，以后会用到的<code>webpack</code>，项目安装后，即可以使用命令<code>webpack main.js app.js</code>执行操作了。我们增加到<code>build</code>命令上。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"test\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"test.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"webpack main.js app.js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样，我们就可以使用<code>npm run build</code>来执行对应命令了。</p>\n<p>所有的<code>scripts</code>下的命令，都可以用<code>npm run xxx</code>来执行。</p>\n<p>但是有两个特殊命令，有简写方法，他们是：</p>\n<ul>\n<li><p><code>npm run start</code> : 简写为<code>npm start</code></p>\n</li>\n<li><p><code>npm run test</code> : 简写为<code>npm test</code></p>\n</li>\n</ul>\n<p>可能是这两个命令使用率太高，所以有简写方法。</p>\n<h2 id=\"npm-scripts-高级一点的用法\"><a href=\"#npm-scripts-高级一点的用法\" class=\"headerlink\" title=\"npm scripts 高级一点的用法\"></a>npm scripts 高级一点的用法</h2><p>比如我们要做多件事，可以这样来写：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"test\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"test.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"webpack main.js app.js\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build2\"</span>: <span class=\"string\">\"webpack other.js app2.js\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"task1\"</span>: <span class=\"string\">\"npm run build &amp; npm run build2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"task2\"</span>: <span class=\"string\">\"cd test &amp;&amp; mkdir abc\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"show-name\"</span>: <span class=\"string\">\"echo npm_package_name\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>task1</code>和<code>task2</code>主要差别在中间的<code>&amp;</code>上。一个<code>&amp;</code>表示两个任务是并行的，两个<code>&amp;</code>表示先执行第一个，成功后执行第二个。</p>\n<p>如果要获取<code>package.json</code>配置文件内容使用呢？</p>\n<ul>\n<li><p>在<code>srcipts</code>中，可以使用<code>npm_package_</code>前缀来获取<code>package.json</code>中的字段值。</p>\n<p>  比如：<code>npm_package_name</code> <code>npm_package_scripts_test</code>。</p>\n<p>  由于<code>scripts</code>里面是bash脚本，所以只能使用bash语法。不支持js语法的。</p>\n</li>\n<li><p>在项目代码中，要读取<code>package.json</code>中的<code>name</code>字段，那么怎么来处理？只能使用常规的读取文件方案。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> package = <span class=\"built_in\">require</span>(<span class=\"string\">'./package.json'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'项目名：'</span>, package.name);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>npm语法，其中<code>init</code> <code>install</code> <code>run</code>为重点</p>\n<ul>\n<li><p><code>npm init</code> : 创建<code>package.json</code> </p>\n</li>\n<li><p><code>npm install</code> : 根据<code>package.json</code>安装依赖</p>\n</li>\n<li><p><code>npm install -g some-package</code> : 全局安装包</p>\n</li>\n<li><p><code>npm install some-package</code> : 项目安装包 </p>\n</li>\n<li><p><code>npm install some-package -save</code> : 项目安装包，并更新<code>package.json</code>的普通依赖</p>\n</li>\n<li><p><code>npm install some-package -save-dev</code> : 项目安装包，并更新<code>package.json</code>的开发依赖 </p>\n</li>\n<li><p><code>npm root -g</code> : 获取npm依赖包全局安装路径</p>\n</li>\n<li><p><code>npm root</code> : 获取npm依赖包项目安装路径 </p>\n</li>\n<li><p><code>npm list</code> : 列出当前项目的依赖包</p>\n</li>\n<li><p><code>npm uninstall some-package -g</code> : 全局删除依赖包</p>\n</li>\n<li><p><code>npm uninstall some-package</code> : 项目删除依赖包</p>\n</li>\n<li><p><code>npm update some-package</code> : 更新依赖包</p>\n</li>\n<li><p><code>npm run some-scripts</code> : 执行制定脚本</p>\n</li>\n</ul>"},{"layout":"post","title":"webpack入门-1","date":"2017-01-06T00:37:00.000Z","_content":"\n花了很多时间，于研究webpack，结果发现很多项目开始转到webpack2或者rollup了，这叫一个尴尬。\n\n不过学习下webpack1也没什么坏处，至少可以比较平稳的升级webpack2。\n\nwebpack配置参数太多了...真心太多了，还有多种配置方法，太灵活，这也导致它非常难，网上有的资料都不匹配，没办法四处借鉴来用。故此，还是自己摸索着来吧。\n\n<!-- more -->\n\n## webpack是什么\n\n我的简单理解就是，将多个分散的文件（模块），打包成为一个或者指定形式的文件。\n\n比如说：有一个文件`main.js`，依赖`A.js` `B.js`，如果要想用`main.js`我们就需要对其进行打包（打包为`bundle.js`）。通过webpack打包，会自动把`A.js` `B.js`的代码打包到`bundle.js`。\n\nwebpack自带有一些插件，也有第三方的组件，所以支持的功能比较多，也比较复杂。我通过一些配置文件，来介绍一些常用的用法写法。\n\n## wepack 准备说明\n\n首先要安装webpack。安装有两种方案：\n\n全局安装：`npm install -g webpack`\n\n项目安装：`npm install -save-dev wepack`\n\n启动终端/命令行，找到当前项目的路径，进入项目。\n\n如果是全局安装，那么之后可以直接输入`webpack ...`这样来进行使用。\n\n如果是项目安装，可以在`package.json`中的`scripts`字段中定义命令，之后执行`npm run 命令`来进行操作。\n\n为了省事，**本系列文章**是按照**全局安装**来使用的。\n\n还是那句话，也可以不用全局安装。可以`package.json`中的`scripts`中配置如下代码，来通过`npm run webpack`使用。\n\n```json\n{\n    \"scripts\": {\n        \"webpack\": \"webpack\"\n    }\n}\n```\n\n## 所有例子的代码位置\n\n可以访问 [github](https://github.com/yukapril/learning/tree/master/webpack-demo) 进行查阅。\n\n## DEMO0 - 入门\n\n第一个最简单的打包例子。\n\n在`demo0`下，建立`src`文件夹\n\n新建一个`say.js`，有两个方法，但是仅仅导出了一个。\n\n```js\nvar fn = function (msg) {\n    console.log('hello, ' + msg + '!');\n};\n\nvar otherFn = function () {\n    console.log('this is another function!');\n};\n\nmodule.exports = fn;\n```\n\n再新建一个`main.js`\n```js\nvar say = require('./say.js');\n\nsay('world');\n```\n\n例子很简单，公用方法文件`say.js`，被`main.js`调用。\n\n#### 请注意\n\n引入的文件（模块），如果是npm安装的，那么代码执行过程中，会有路径处理，能找到这个依赖包，例如写`require('react')`即可；\n \n但是是自己写的文件（模块）的话，要写成`require('./say.js')`（可以省略扩展名），注意当前目录要加入`./`。否则找不到文件。下文会有如何建立别名的方法。\n\n#### 原因是这样的\n\n`require`默认的工作路径，拿本例来说，不是`/webpack-demo/demo0`，而是`/webpack-demo/demo0/node_modules`。在这个目录里面，存在结构`react/index.js`，或者存在`react/package.json`文件，此文件中，定义了`main`入口文件。\n\n这样的话，你直接写`require('react')`，就是读取 `/webpack-demo/demo0/node_modules/react/index.js` （因为没有指定文件，所以读取默认文件`index.js`），所以是OK的。\n\n所以，如果是我们自己的模块，并没有在`node_modules`下的，直接写`require('say.js')`就会找不到。要写成当前目录`require('./say.js')`。\n\n了解完路径问题，我们回到例子，接下来进行webpack打包。\n\n#### webpack打包\n\n启动终端/命令行，首先进入目录：`cd demo0`\n\n用webpack进行编译：`webpack src/main.js build/app.js`，第一个参数是入口文件，第二个参数是打包后文件\n\n之后可以发现，多了一个`build`目录，同时也有了我们要的`app.js`文件\n\n剩下的事情，就是编写`index.html`，并查看效果了。\n\n#### 重要的说明\n\n请仔细查看编译后的`app.js`文件。在源文件`say.js`中，我故意加入了没有用到的函数`otherFn`，在编译后的最终文件内，是**存在**这个函数的。\n\n通过实验，不管用这种ES5风格，还是ES6风格，只要文件内有的东西，都会被编译到最终文件，不论是否被引用。这个是webpack1的问题，好在webpack2已经加入Tree-shaking技术来解决这个问题了。\n\n## DEMO1 - 使用配置文件webpack.config.js\n\n这回，我们不再使用直接敲命令来控制webpack打包了，而是将要打包的东西，放到配置文件里。\n\n我们复制一份`src`目录，到`demo1`目录下。这样，最终的打包后结果会是相同的。\n\n我们在`demo1`下，建立一个`webpack.config.js`文件，这个是默认的配置文件名。\n\n除此外，还有其他的一些名字也是默认名。但是`webpack.config.js`是最流行的写法。\n\n```js\nconsole.log('当前dirname:', __dirname);\n\nmodule.exports = {\n    // 入口文件配置\n    entry: './src/main.js',\n    // 文件导出的配置\n    output: {\n        path: './build',\n        filename: 'app.js'\n    },\n    resolve: {\n        // 当require的模块找不到时，添加这些后缀再次查找\n        extentions: ['js']\n    }\n}\n```\n\n这里面，我们第一句打印出当前的工作环境目录，这个以后会用得到，可以注意下。\n\n之后，导出了一个配置对象。这个对象里面，有入口文件`entry`、打包文件`output` 和特殊查找处理`resolve`。其中，**入口文件和打包文件是必须的**，否则webpack不知道入口和出口啊。这两个配置太好理解了，我就不描述了。`resolve`下文再讲。\n\n这里一样需要注意，当前目录请写上`./`。\n\n之后，我们进入工作目录`cd demo1`，并执行`webpack`即可。\n\n如果你的配置文件不是默认名，那么需要这样执行`webpack --config somename.js`，就是指定配置文件。\n\n执行后，会看到当前dirname路径，因为例子比较简单，不会报错。\n\n如果写的比较复杂，报错了，怎么查看详情？请加参数执行打包：`webpack --display-error-details`，这样打包一旦遇到错误，会有错误信息。**所有的命令参数，都是两条横线开头的。**\n\n#### resolve是什么\n\n它相当于一个变通处理，**基本上都是在解决代码中引用部分`require` `import`文件的问题**。\n\n这里，用到了扩展名`extentions`参数，我们加入了`['js']`处理方案。意思是，针对引用的文件，自动尝试匹配扩展名。\n\n> 这里的数组值，可以写不带扩展名的`js`，也可以写成带有扩展名的`.js`，当然，还可以写 `.config.js` 这样的双重扩展名\n>\n>  一般你见到的，都是这样写的：`extensions: ['', '.jsx', '.js']`，会用一个空串开头。我个人认为没什么意义。\n\n加入扩展名参数后，在我们的代码文件里，一旦有`require`(或者ES6的`import`)，默认会优先找当前文件。找不到，会自动加入我们配置的扩展名`js`。\n\n比如`main.js`中的`require('./say.js')`，默认去找当前目录下的`say.js`，结果找到了，OK。\n\n如果我们写成`require('./say')`，默认去找当前目录下的`say`，找不到！只好按配置的`extentions`顺序增加扩展名，再去找`say.js` `say/index.js`等，直到找到为止。\n\n所以，一旦我们在`resolve`中配置了`extentions`，就可以在代码引用环节省去对应的扩展名了。这个简写方案，非常常见。\n\n## DEMO2 - resolve的alias参数 [官网API](http://webpack.github.io/docs/configuration.html#resolve-alias)\n\n这里，我们在提一个参数`alias`。\n\n接上一个DEMO1，复制一份为DEMO2。\n\n这次项目不一样了，我们要用到很多自己写的模块，这个例子中，我新加入了`take.js` `watch.js`文件，并和`say.js`一起放到了`modules`目录下，而且是按照分类和版本号存放。\n\n结构为：\n\n```\nmodules/say/1.0/say.js\nmodules/take/1.2/take.js\nmodules/watch/2.0/watch.js\n```\n\n在引用的文件`main.js`中，我们希望这么写：\n\n```js\nvar say = require('say');\nvar take = require('take');\nvar watch = require('watch');\n\nsay('world');\ntake();\nwatch();\n```\n\n**注意**，我们希望这里把`say` `take` `watch`定义了为别名，没有路径概念。\n\n这样好处是，就可以写模块的同事自己专心写模块，而写`main.js`的同事只需要关心引入对应模块就行了，不需要关心具体的版本和路径。至于别名的处理，只需要有一个人每次负责修改`webpack.config.js`就可以了。\n\n配置文件，需要修改成这样：\n\n```js\nconsole.log('当前dirname:', __dirname);\n\nmodule.exports = {\n    // 入口文件配置\n    entry: './src/main.js',\n    // 文件导出的配置\n    output: {\n        path: './build',\n        filename: 'app.js'\n    },\n    resolve: {\n        // 当require的模块找不到时，添加这些后缀再次查找\n        extentions: ['js'],\n        // 建立require别名\n        alias: {\n            'say': './modules/say/1.0/say',\n            'take': './modules/take/1.2/take',\n            'watch': './modules/watch/2.0/watch'\n        }\n    }\n}\n```\n\n这样写之后，在`main.js`中，当遇到`require('say')`的时候，相当于变成了`require('./modules/say/1.0/say')`。这就是别名的作用。\n\n## DEMO3 - resolve的更多参数（root）[官网API](http://webpack.github.io/docs/configuration.html#resolve-root)\n\n`resolve.root`，用的人应该很少。这里仅做介绍。\n\n现在来个特殊的例子。我们在demo2中，写过一些公共方法，也写了一个调用的`main.js`。另一个开发小组，知道我们的公共方法了，觉得很好，也想使用，但是他们不希望自己去维护公共方法。怎么办？\n\n让require的默认路径设置为demo2的模块路径呗~\n\n他们的`main.js`是这样的：\n\n```js\nvar say = require('say');\n\nsay('onather');\n```\n\n`webpack.config.js`需要这样配置：\n\n```js\nvar path = require('path');\n\nvar rootPath = path.resolve('../demo2/src/modules');\nconsole.log('当前rootPath:',rootPath);\n\nmodule.exports = {\n    // 入口文件配置\n    entry: './src/main.js',\n    // 文件导出的配置\n    output: {\n        path: './build',\n        filename: 'app.js'\n    },\n    resolve: {\n        // 当require的模块找不到时，添加这些后缀再次查找\n        extentions: ['js'],\n        // 修改require默认的路径，默认是在./node_modules下，现在修改到demo2/src/modules下\n        root: rootPath,\n        // 建立require别名\n        alias: {\n            'say': 'say/1.0/say'\n        }\n    }\n}\n```\n\n#### 要说明注意的点\n\n* 开头引入了`path`，这个是`node`自带模块。`path.resolve`可以将参数拼接，组成绝对路径。\n* `resolve.root`的值，可以是字符串，也可以是数组。数组相当于多个路径，一个一个查找\n* `resolve.root`**只支持绝对路径**，相对路径不行的\n* 由于我们使用`root`修改了`require`处理依赖的工作路径，即不在当前运行的路径了，修改成为了`/webpack-demo/demo2/src/modules`，所以在`alias`里，也不能是`./`开头了，而应该直接写成 `say/1.0/say`，和上文中的`react`例子相同。如果继续使用`./`开头会自动在demo3目录下查找\n\n## 小结\n\n这篇文章，介绍了如何webpack入门，以及最基础的配置。\n\n配置里面，要有 `entry` `output`。\n\n处理代码中`require`的问题，可以配置`resolve`来解决。这里面有扩展名`extentions`和别名`alias`。常用的就这两个，其他方法我很少见别人用。\n\n还提及到了，如果打包出错，想看错误信息，这样执行：`webpack --display-error-details`。","source":"_posts/2017/2017-01-06-webpack-1.md","raw":"---\nlayout: post\ntitle: \"webpack入门-1\"\ndate: 2017-01-06 00:37:00 GMT+0000\ncategories: [前端]\ntags:  [webpack]\n---\n\n花了很多时间，于研究webpack，结果发现很多项目开始转到webpack2或者rollup了，这叫一个尴尬。\n\n不过学习下webpack1也没什么坏处，至少可以比较平稳的升级webpack2。\n\nwebpack配置参数太多了...真心太多了，还有多种配置方法，太灵活，这也导致它非常难，网上有的资料都不匹配，没办法四处借鉴来用。故此，还是自己摸索着来吧。\n\n<!-- more -->\n\n## webpack是什么\n\n我的简单理解就是，将多个分散的文件（模块），打包成为一个或者指定形式的文件。\n\n比如说：有一个文件`main.js`，依赖`A.js` `B.js`，如果要想用`main.js`我们就需要对其进行打包（打包为`bundle.js`）。通过webpack打包，会自动把`A.js` `B.js`的代码打包到`bundle.js`。\n\nwebpack自带有一些插件，也有第三方的组件，所以支持的功能比较多，也比较复杂。我通过一些配置文件，来介绍一些常用的用法写法。\n\n## wepack 准备说明\n\n首先要安装webpack。安装有两种方案：\n\n全局安装：`npm install -g webpack`\n\n项目安装：`npm install -save-dev wepack`\n\n启动终端/命令行，找到当前项目的路径，进入项目。\n\n如果是全局安装，那么之后可以直接输入`webpack ...`这样来进行使用。\n\n如果是项目安装，可以在`package.json`中的`scripts`字段中定义命令，之后执行`npm run 命令`来进行操作。\n\n为了省事，**本系列文章**是按照**全局安装**来使用的。\n\n还是那句话，也可以不用全局安装。可以`package.json`中的`scripts`中配置如下代码，来通过`npm run webpack`使用。\n\n```json\n{\n    \"scripts\": {\n        \"webpack\": \"webpack\"\n    }\n}\n```\n\n## 所有例子的代码位置\n\n可以访问 [github](https://github.com/yukapril/learning/tree/master/webpack-demo) 进行查阅。\n\n## DEMO0 - 入门\n\n第一个最简单的打包例子。\n\n在`demo0`下，建立`src`文件夹\n\n新建一个`say.js`，有两个方法，但是仅仅导出了一个。\n\n```js\nvar fn = function (msg) {\n    console.log('hello, ' + msg + '!');\n};\n\nvar otherFn = function () {\n    console.log('this is another function!');\n};\n\nmodule.exports = fn;\n```\n\n再新建一个`main.js`\n```js\nvar say = require('./say.js');\n\nsay('world');\n```\n\n例子很简单，公用方法文件`say.js`，被`main.js`调用。\n\n#### 请注意\n\n引入的文件（模块），如果是npm安装的，那么代码执行过程中，会有路径处理，能找到这个依赖包，例如写`require('react')`即可；\n \n但是是自己写的文件（模块）的话，要写成`require('./say.js')`（可以省略扩展名），注意当前目录要加入`./`。否则找不到文件。下文会有如何建立别名的方法。\n\n#### 原因是这样的\n\n`require`默认的工作路径，拿本例来说，不是`/webpack-demo/demo0`，而是`/webpack-demo/demo0/node_modules`。在这个目录里面，存在结构`react/index.js`，或者存在`react/package.json`文件，此文件中，定义了`main`入口文件。\n\n这样的话，你直接写`require('react')`，就是读取 `/webpack-demo/demo0/node_modules/react/index.js` （因为没有指定文件，所以读取默认文件`index.js`），所以是OK的。\n\n所以，如果是我们自己的模块，并没有在`node_modules`下的，直接写`require('say.js')`就会找不到。要写成当前目录`require('./say.js')`。\n\n了解完路径问题，我们回到例子，接下来进行webpack打包。\n\n#### webpack打包\n\n启动终端/命令行，首先进入目录：`cd demo0`\n\n用webpack进行编译：`webpack src/main.js build/app.js`，第一个参数是入口文件，第二个参数是打包后文件\n\n之后可以发现，多了一个`build`目录，同时也有了我们要的`app.js`文件\n\n剩下的事情，就是编写`index.html`，并查看效果了。\n\n#### 重要的说明\n\n请仔细查看编译后的`app.js`文件。在源文件`say.js`中，我故意加入了没有用到的函数`otherFn`，在编译后的最终文件内，是**存在**这个函数的。\n\n通过实验，不管用这种ES5风格，还是ES6风格，只要文件内有的东西，都会被编译到最终文件，不论是否被引用。这个是webpack1的问题，好在webpack2已经加入Tree-shaking技术来解决这个问题了。\n\n## DEMO1 - 使用配置文件webpack.config.js\n\n这回，我们不再使用直接敲命令来控制webpack打包了，而是将要打包的东西，放到配置文件里。\n\n我们复制一份`src`目录，到`demo1`目录下。这样，最终的打包后结果会是相同的。\n\n我们在`demo1`下，建立一个`webpack.config.js`文件，这个是默认的配置文件名。\n\n除此外，还有其他的一些名字也是默认名。但是`webpack.config.js`是最流行的写法。\n\n```js\nconsole.log('当前dirname:', __dirname);\n\nmodule.exports = {\n    // 入口文件配置\n    entry: './src/main.js',\n    // 文件导出的配置\n    output: {\n        path: './build',\n        filename: 'app.js'\n    },\n    resolve: {\n        // 当require的模块找不到时，添加这些后缀再次查找\n        extentions: ['js']\n    }\n}\n```\n\n这里面，我们第一句打印出当前的工作环境目录，这个以后会用得到，可以注意下。\n\n之后，导出了一个配置对象。这个对象里面，有入口文件`entry`、打包文件`output` 和特殊查找处理`resolve`。其中，**入口文件和打包文件是必须的**，否则webpack不知道入口和出口啊。这两个配置太好理解了，我就不描述了。`resolve`下文再讲。\n\n这里一样需要注意，当前目录请写上`./`。\n\n之后，我们进入工作目录`cd demo1`，并执行`webpack`即可。\n\n如果你的配置文件不是默认名，那么需要这样执行`webpack --config somename.js`，就是指定配置文件。\n\n执行后，会看到当前dirname路径，因为例子比较简单，不会报错。\n\n如果写的比较复杂，报错了，怎么查看详情？请加参数执行打包：`webpack --display-error-details`，这样打包一旦遇到错误，会有错误信息。**所有的命令参数，都是两条横线开头的。**\n\n#### resolve是什么\n\n它相当于一个变通处理，**基本上都是在解决代码中引用部分`require` `import`文件的问题**。\n\n这里，用到了扩展名`extentions`参数，我们加入了`['js']`处理方案。意思是，针对引用的文件，自动尝试匹配扩展名。\n\n> 这里的数组值，可以写不带扩展名的`js`，也可以写成带有扩展名的`.js`，当然，还可以写 `.config.js` 这样的双重扩展名\n>\n>  一般你见到的，都是这样写的：`extensions: ['', '.jsx', '.js']`，会用一个空串开头。我个人认为没什么意义。\n\n加入扩展名参数后，在我们的代码文件里，一旦有`require`(或者ES6的`import`)，默认会优先找当前文件。找不到，会自动加入我们配置的扩展名`js`。\n\n比如`main.js`中的`require('./say.js')`，默认去找当前目录下的`say.js`，结果找到了，OK。\n\n如果我们写成`require('./say')`，默认去找当前目录下的`say`，找不到！只好按配置的`extentions`顺序增加扩展名，再去找`say.js` `say/index.js`等，直到找到为止。\n\n所以，一旦我们在`resolve`中配置了`extentions`，就可以在代码引用环节省去对应的扩展名了。这个简写方案，非常常见。\n\n## DEMO2 - resolve的alias参数 [官网API](http://webpack.github.io/docs/configuration.html#resolve-alias)\n\n这里，我们在提一个参数`alias`。\n\n接上一个DEMO1，复制一份为DEMO2。\n\n这次项目不一样了，我们要用到很多自己写的模块，这个例子中，我新加入了`take.js` `watch.js`文件，并和`say.js`一起放到了`modules`目录下，而且是按照分类和版本号存放。\n\n结构为：\n\n```\nmodules/say/1.0/say.js\nmodules/take/1.2/take.js\nmodules/watch/2.0/watch.js\n```\n\n在引用的文件`main.js`中，我们希望这么写：\n\n```js\nvar say = require('say');\nvar take = require('take');\nvar watch = require('watch');\n\nsay('world');\ntake();\nwatch();\n```\n\n**注意**，我们希望这里把`say` `take` `watch`定义了为别名，没有路径概念。\n\n这样好处是，就可以写模块的同事自己专心写模块，而写`main.js`的同事只需要关心引入对应模块就行了，不需要关心具体的版本和路径。至于别名的处理，只需要有一个人每次负责修改`webpack.config.js`就可以了。\n\n配置文件，需要修改成这样：\n\n```js\nconsole.log('当前dirname:', __dirname);\n\nmodule.exports = {\n    // 入口文件配置\n    entry: './src/main.js',\n    // 文件导出的配置\n    output: {\n        path: './build',\n        filename: 'app.js'\n    },\n    resolve: {\n        // 当require的模块找不到时，添加这些后缀再次查找\n        extentions: ['js'],\n        // 建立require别名\n        alias: {\n            'say': './modules/say/1.0/say',\n            'take': './modules/take/1.2/take',\n            'watch': './modules/watch/2.0/watch'\n        }\n    }\n}\n```\n\n这样写之后，在`main.js`中，当遇到`require('say')`的时候，相当于变成了`require('./modules/say/1.0/say')`。这就是别名的作用。\n\n## DEMO3 - resolve的更多参数（root）[官网API](http://webpack.github.io/docs/configuration.html#resolve-root)\n\n`resolve.root`，用的人应该很少。这里仅做介绍。\n\n现在来个特殊的例子。我们在demo2中，写过一些公共方法，也写了一个调用的`main.js`。另一个开发小组，知道我们的公共方法了，觉得很好，也想使用，但是他们不希望自己去维护公共方法。怎么办？\n\n让require的默认路径设置为demo2的模块路径呗~\n\n他们的`main.js`是这样的：\n\n```js\nvar say = require('say');\n\nsay('onather');\n```\n\n`webpack.config.js`需要这样配置：\n\n```js\nvar path = require('path');\n\nvar rootPath = path.resolve('../demo2/src/modules');\nconsole.log('当前rootPath:',rootPath);\n\nmodule.exports = {\n    // 入口文件配置\n    entry: './src/main.js',\n    // 文件导出的配置\n    output: {\n        path: './build',\n        filename: 'app.js'\n    },\n    resolve: {\n        // 当require的模块找不到时，添加这些后缀再次查找\n        extentions: ['js'],\n        // 修改require默认的路径，默认是在./node_modules下，现在修改到demo2/src/modules下\n        root: rootPath,\n        // 建立require别名\n        alias: {\n            'say': 'say/1.0/say'\n        }\n    }\n}\n```\n\n#### 要说明注意的点\n\n* 开头引入了`path`，这个是`node`自带模块。`path.resolve`可以将参数拼接，组成绝对路径。\n* `resolve.root`的值，可以是字符串，也可以是数组。数组相当于多个路径，一个一个查找\n* `resolve.root`**只支持绝对路径**，相对路径不行的\n* 由于我们使用`root`修改了`require`处理依赖的工作路径，即不在当前运行的路径了，修改成为了`/webpack-demo/demo2/src/modules`，所以在`alias`里，也不能是`./`开头了，而应该直接写成 `say/1.0/say`，和上文中的`react`例子相同。如果继续使用`./`开头会自动在demo3目录下查找\n\n## 小结\n\n这篇文章，介绍了如何webpack入门，以及最基础的配置。\n\n配置里面，要有 `entry` `output`。\n\n处理代码中`require`的问题，可以配置`resolve`来解决。这里面有扩展名`extentions`和别名`alias`。常用的就这两个，其他方法我很少见别人用。\n\n还提及到了，如果打包出错，想看错误信息，这样执行：`webpack --display-error-details`。","slug":"2017-2017-01-06-webpack-1","published":1,"updated":"2019-07-18T17:19:07.096Z","comments":1,"photos":[],"link":"","_id":"cjy8y72ut00bus21dp2otlhos","content":"<p>花了很多时间，于研究webpack，结果发现很多项目开始转到webpack2或者rollup了，这叫一个尴尬。</p>\n<p>不过学习下webpack1也没什么坏处，至少可以比较平稳的升级webpack2。</p>\n<p>webpack配置参数太多了…真心太多了，还有多种配置方法，太灵活，这也导致它非常难，网上有的资料都不匹配，没办法四处借鉴来用。故此，还是自己摸索着来吧。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"webpack是什么\"><a href=\"#webpack是什么\" class=\"headerlink\" title=\"webpack是什么\"></a>webpack是什么</h2><p>我的简单理解就是，将多个分散的文件（模块），打包成为一个或者指定形式的文件。</p>\n<p>比如说：有一个文件<code>main.js</code>，依赖<code>A.js</code> <code>B.js</code>，如果要想用<code>main.js</code>我们就需要对其进行打包（打包为<code>bundle.js</code>）。通过webpack打包，会自动把<code>A.js</code> <code>B.js</code>的代码打包到<code>bundle.js</code>。</p>\n<p>webpack自带有一些插件，也有第三方的组件，所以支持的功能比较多，也比较复杂。我通过一些配置文件，来介绍一些常用的用法写法。</p>\n<h2 id=\"wepack-准备说明\"><a href=\"#wepack-准备说明\" class=\"headerlink\" title=\"wepack 准备说明\"></a>wepack 准备说明</h2><p>首先要安装webpack。安装有两种方案：</p>\n<p>全局安装：<code>npm install -g webpack</code></p>\n<p>项目安装：<code>npm install -save-dev wepack</code></p>\n<p>启动终端/命令行，找到当前项目的路径，进入项目。</p>\n<p>如果是全局安装，那么之后可以直接输入<code>webpack ...</code>这样来进行使用。</p>\n<p>如果是项目安装，可以在<code>package.json</code>中的<code>scripts</code>字段中定义命令，之后执行<code>npm run 命令</code>来进行操作。</p>\n<p>为了省事，<strong>本系列文章</strong>是按照<strong>全局安装</strong>来使用的。</p>\n<p>还是那句话，也可以不用全局安装。可以<code>package.json</code>中的<code>scripts</code>中配置如下代码，来通过<code>npm run webpack</code>使用。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"webpack\"</span>: <span class=\"string\">\"webpack\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"所有例子的代码位置\"><a href=\"#所有例子的代码位置\" class=\"headerlink\" title=\"所有例子的代码位置\"></a>所有例子的代码位置</h2><p>可以访问 <a href=\"https://github.com/yukapril/learning/tree/master/webpack-demo\" target=\"_blank\" rel=\"noopener\">github</a> 进行查阅。</p>\n<h2 id=\"DEMO0-入门\"><a href=\"#DEMO0-入门\" class=\"headerlink\" title=\"DEMO0 - 入门\"></a>DEMO0 - 入门</h2><p>第一个最简单的打包例子。</p>\n<p>在<code>demo0</code>下，建立<code>src</code>文件夹</p>\n<p>新建一个<code>say.js</code>，有两个方法，但是仅仅导出了一个。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello, '</span> + msg + <span class=\"string\">'!'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> otherFn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is another function!'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = fn;</span><br></pre></td></tr></table></figure>\n\n<p>再新建一个<code>main.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> say = <span class=\"built_in\">require</span>(<span class=\"string\">'./say.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">say(<span class=\"string\">'world'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>例子很简单，公用方法文件<code>say.js</code>，被<code>main.js</code>调用。</p>\n<h4 id=\"请注意\"><a href=\"#请注意\" class=\"headerlink\" title=\"请注意\"></a>请注意</h4><p>引入的文件（模块），如果是npm安装的，那么代码执行过程中，会有路径处理，能找到这个依赖包，例如写<code>require(&#39;react&#39;)</code>即可；</p>\n<p>但是是自己写的文件（模块）的话，要写成<code>require(&#39;./say.js&#39;)</code>（可以省略扩展名），注意当前目录要加入<code>./</code>。否则找不到文件。下文会有如何建立别名的方法。</p>\n<h4 id=\"原因是这样的\"><a href=\"#原因是这样的\" class=\"headerlink\" title=\"原因是这样的\"></a>原因是这样的</h4><p><code>require</code>默认的工作路径，拿本例来说，不是<code>/webpack-demo/demo0</code>，而是<code>/webpack-demo/demo0/node_modules</code>。在这个目录里面，存在结构<code>react/index.js</code>，或者存在<code>react/package.json</code>文件，此文件中，定义了<code>main</code>入口文件。</p>\n<p>这样的话，你直接写<code>require(&#39;react&#39;)</code>，就是读取 <code>/webpack-demo/demo0/node_modules/react/index.js</code> （因为没有指定文件，所以读取默认文件<code>index.js</code>），所以是OK的。</p>\n<p>所以，如果是我们自己的模块，并没有在<code>node_modules</code>下的，直接写<code>require(&#39;say.js&#39;)</code>就会找不到。要写成当前目录<code>require(&#39;./say.js&#39;)</code>。</p>\n<p>了解完路径问题，我们回到例子，接下来进行webpack打包。</p>\n<h4 id=\"webpack打包\"><a href=\"#webpack打包\" class=\"headerlink\" title=\"webpack打包\"></a>webpack打包</h4><p>启动终端/命令行，首先进入目录：<code>cd demo0</code></p>\n<p>用webpack进行编译：<code>webpack src/main.js build/app.js</code>，第一个参数是入口文件，第二个参数是打包后文件</p>\n<p>之后可以发现，多了一个<code>build</code>目录，同时也有了我们要的<code>app.js</code>文件</p>\n<p>剩下的事情，就是编写<code>index.html</code>，并查看效果了。</p>\n<h4 id=\"重要的说明\"><a href=\"#重要的说明\" class=\"headerlink\" title=\"重要的说明\"></a>重要的说明</h4><p>请仔细查看编译后的<code>app.js</code>文件。在源文件<code>say.js</code>中，我故意加入了没有用到的函数<code>otherFn</code>，在编译后的最终文件内，是<strong>存在</strong>这个函数的。</p>\n<p>通过实验，不管用这种ES5风格，还是ES6风格，只要文件内有的东西，都会被编译到最终文件，不论是否被引用。这个是webpack1的问题，好在webpack2已经加入Tree-shaking技术来解决这个问题了。</p>\n<h2 id=\"DEMO1-使用配置文件webpack-config-js\"><a href=\"#DEMO1-使用配置文件webpack-config-js\" class=\"headerlink\" title=\"DEMO1 - 使用配置文件webpack.config.js\"></a>DEMO1 - 使用配置文件webpack.config.js</h2><p>这回，我们不再使用直接敲命令来控制webpack打包了，而是将要打包的东西，放到配置文件里。</p>\n<p>我们复制一份<code>src</code>目录，到<code>demo1</code>目录下。这样，最终的打包后结果会是相同的。</p>\n<p>我们在<code>demo1</code>下，建立一个<code>webpack.config.js</code>文件，这个是默认的配置文件名。</p>\n<p>除此外，还有其他的一些名字也是默认名。但是<code>webpack.config.js</code>是最流行的写法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'当前dirname:'</span>, __dirname);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口文件配置</span></span><br><span class=\"line\">    entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 文件导出的配置</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'./build'</span>,</span><br><span class=\"line\">        filename: <span class=\"string\">'app.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当require的模块找不到时，添加这些后缀再次查找</span></span><br><span class=\"line\">        extentions: [<span class=\"string\">'js'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里面，我们第一句打印出当前的工作环境目录，这个以后会用得到，可以注意下。</p>\n<p>之后，导出了一个配置对象。这个对象里面，有入口文件<code>entry</code>、打包文件<code>output</code> 和特殊查找处理<code>resolve</code>。其中，<strong>入口文件和打包文件是必须的</strong>，否则webpack不知道入口和出口啊。这两个配置太好理解了，我就不描述了。<code>resolve</code>下文再讲。</p>\n<p>这里一样需要注意，当前目录请写上<code>./</code>。</p>\n<p>之后，我们进入工作目录<code>cd demo1</code>，并执行<code>webpack</code>即可。</p>\n<p>如果你的配置文件不是默认名，那么需要这样执行<code>webpack --config somename.js</code>，就是指定配置文件。</p>\n<p>执行后，会看到当前dirname路径，因为例子比较简单，不会报错。</p>\n<p>如果写的比较复杂，报错了，怎么查看详情？请加参数执行打包：<code>webpack --display-error-details</code>，这样打包一旦遇到错误，会有错误信息。<strong>所有的命令参数，都是两条横线开头的。</strong></p>\n<h4 id=\"resolve是什么\"><a href=\"#resolve是什么\" class=\"headerlink\" title=\"resolve是什么\"></a>resolve是什么</h4><p>它相当于一个变通处理，<strong>基本上都是在解决代码中引用部分<code>require</code> <code>import</code>文件的问题</strong>。</p>\n<p>这里，用到了扩展名<code>extentions</code>参数，我们加入了<code>[&#39;js&#39;]</code>处理方案。意思是，针对引用的文件，自动尝试匹配扩展名。</p>\n<blockquote>\n<p>这里的数组值，可以写不带扩展名的<code>js</code>，也可以写成带有扩展名的<code>.js</code>，当然，还可以写 <code>.config.js</code> 这样的双重扩展名</p>\n<p> 一般你见到的，都是这样写的：<code>extensions: [&#39;&#39;, &#39;.jsx&#39;, &#39;.js&#39;]</code>，会用一个空串开头。我个人认为没什么意义。</p>\n</blockquote>\n<p>加入扩展名参数后，在我们的代码文件里，一旦有<code>require</code>(或者ES6的<code>import</code>)，默认会优先找当前文件。找不到，会自动加入我们配置的扩展名<code>js</code>。</p>\n<p>比如<code>main.js</code>中的<code>require(&#39;./say.js&#39;)</code>，默认去找当前目录下的<code>say.js</code>，结果找到了，OK。</p>\n<p>如果我们写成<code>require(&#39;./say&#39;)</code>，默认去找当前目录下的<code>say</code>，找不到！只好按配置的<code>extentions</code>顺序增加扩展名，再去找<code>say.js</code> <code>say/index.js</code>等，直到找到为止。</p>\n<p>所以，一旦我们在<code>resolve</code>中配置了<code>extentions</code>，就可以在代码引用环节省去对应的扩展名了。这个简写方案，非常常见。</p>\n<h2 id=\"DEMO2-resolve的alias参数-官网API\"><a href=\"#DEMO2-resolve的alias参数-官网API\" class=\"headerlink\" title=\"DEMO2 - resolve的alias参数 官网API\"></a>DEMO2 - resolve的alias参数 <a href=\"http://webpack.github.io/docs/configuration.html#resolve-alias\" target=\"_blank\" rel=\"noopener\">官网API</a></h2><p>这里，我们在提一个参数<code>alias</code>。</p>\n<p>接上一个DEMO1，复制一份为DEMO2。</p>\n<p>这次项目不一样了，我们要用到很多自己写的模块，这个例子中，我新加入了<code>take.js</code> <code>watch.js</code>文件，并和<code>say.js</code>一起放到了<code>modules</code>目录下，而且是按照分类和版本号存放。</p>\n<p>结构为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modules/say/1.0/say.js</span><br><span class=\"line\">modules/take/1.2/take.js</span><br><span class=\"line\">modules/watch/2.0/watch.js</span><br></pre></td></tr></table></figure>\n\n<p>在引用的文件<code>main.js</code>中，我们希望这么写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> say = <span class=\"built_in\">require</span>(<span class=\"string\">'say'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> take = <span class=\"built_in\">require</span>(<span class=\"string\">'take'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> watch = <span class=\"built_in\">require</span>(<span class=\"string\">'watch'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">say(<span class=\"string\">'world'</span>);</span><br><span class=\"line\">take();</span><br><span class=\"line\">watch();</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>，我们希望这里把<code>say</code> <code>take</code> <code>watch</code>定义了为别名，没有路径概念。</p>\n<p>这样好处是，就可以写模块的同事自己专心写模块，而写<code>main.js</code>的同事只需要关心引入对应模块就行了，不需要关心具体的版本和路径。至于别名的处理，只需要有一个人每次负责修改<code>webpack.config.js</code>就可以了。</p>\n<p>配置文件，需要修改成这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'当前dirname:'</span>, __dirname);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口文件配置</span></span><br><span class=\"line\">    entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 文件导出的配置</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'./build'</span>,</span><br><span class=\"line\">        filename: <span class=\"string\">'app.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当require的模块找不到时，添加这些后缀再次查找</span></span><br><span class=\"line\">        extentions: [<span class=\"string\">'js'</span>],</span><br><span class=\"line\">        <span class=\"comment\">// 建立require别名</span></span><br><span class=\"line\">        alias: &#123;</span><br><span class=\"line\">            <span class=\"string\">'say'</span>: <span class=\"string\">'./modules/say/1.0/say'</span>,</span><br><span class=\"line\">            <span class=\"string\">'take'</span>: <span class=\"string\">'./modules/take/1.2/take'</span>,</span><br><span class=\"line\">            <span class=\"string\">'watch'</span>: <span class=\"string\">'./modules/watch/2.0/watch'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样写之后，在<code>main.js</code>中，当遇到<code>require(&#39;say&#39;)</code>的时候，相当于变成了<code>require(&#39;./modules/say/1.0/say&#39;)</code>。这就是别名的作用。</p>\n<h2 id=\"DEMO3-resolve的更多参数（root）官网API\"><a href=\"#DEMO3-resolve的更多参数（root）官网API\" class=\"headerlink\" title=\"DEMO3 - resolve的更多参数（root）官网API\"></a>DEMO3 - resolve的更多参数（root）<a href=\"http://webpack.github.io/docs/configuration.html#resolve-root\" target=\"_blank\" rel=\"noopener\">官网API</a></h2><p><code>resolve.root</code>，用的人应该很少。这里仅做介绍。</p>\n<p>现在来个特殊的例子。我们在demo2中，写过一些公共方法，也写了一个调用的<code>main.js</code>。另一个开发小组，知道我们的公共方法了，觉得很好，也想使用，但是他们不希望自己去维护公共方法。怎么办？</p>\n<p>让require的默认路径设置为demo2的模块路径呗~</p>\n<p>他们的<code>main.js</code>是这样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> say = <span class=\"built_in\">require</span>(<span class=\"string\">'say'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">say(<span class=\"string\">'onather'</span>);</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack.config.js</code>需要这样配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> rootPath = path.resolve(<span class=\"string\">'../demo2/src/modules'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'当前rootPath:'</span>,rootPath);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口文件配置</span></span><br><span class=\"line\">    entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 文件导出的配置</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'./build'</span>,</span><br><span class=\"line\">        filename: <span class=\"string\">'app.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当require的模块找不到时，添加这些后缀再次查找</span></span><br><span class=\"line\">        extentions: [<span class=\"string\">'js'</span>],</span><br><span class=\"line\">        <span class=\"comment\">// 修改require默认的路径，默认是在./node_modules下，现在修改到demo2/src/modules下</span></span><br><span class=\"line\">        root: rootPath,</span><br><span class=\"line\">        <span class=\"comment\">// 建立require别名</span></span><br><span class=\"line\">        alias: &#123;</span><br><span class=\"line\">            <span class=\"string\">'say'</span>: <span class=\"string\">'say/1.0/say'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"要说明注意的点\"><a href=\"#要说明注意的点\" class=\"headerlink\" title=\"要说明注意的点\"></a>要说明注意的点</h4><ul>\n<li>开头引入了<code>path</code>，这个是<code>node</code>自带模块。<code>path.resolve</code>可以将参数拼接，组成绝对路径。</li>\n<li><code>resolve.root</code>的值，可以是字符串，也可以是数组。数组相当于多个路径，一个一个查找</li>\n<li><code>resolve.root</code><strong>只支持绝对路径</strong>，相对路径不行的</li>\n<li>由于我们使用<code>root</code>修改了<code>require</code>处理依赖的工作路径，即不在当前运行的路径了，修改成为了<code>/webpack-demo/demo2/src/modules</code>，所以在<code>alias</code>里，也不能是<code>./</code>开头了，而应该直接写成 <code>say/1.0/say</code>，和上文中的<code>react</code>例子相同。如果继续使用<code>./</code>开头会自动在demo3目录下查找</li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>这篇文章，介绍了如何webpack入门，以及最基础的配置。</p>\n<p>配置里面，要有 <code>entry</code> <code>output</code>。</p>\n<p>处理代码中<code>require</code>的问题，可以配置<code>resolve</code>来解决。这里面有扩展名<code>extentions</code>和别名<code>alias</code>。常用的就这两个，其他方法我很少见别人用。</p>\n<p>还提及到了，如果打包出错，想看错误信息，这样执行：<code>webpack --display-error-details</code>。</p>\n","site":{"data":{}},"excerpt":"<p>花了很多时间，于研究webpack，结果发现很多项目开始转到webpack2或者rollup了，这叫一个尴尬。</p>\n<p>不过学习下webpack1也没什么坏处，至少可以比较平稳的升级webpack2。</p>\n<p>webpack配置参数太多了…真心太多了，还有多种配置方法，太灵活，这也导致它非常难，网上有的资料都不匹配，没办法四处借鉴来用。故此，还是自己摸索着来吧。</p>","more":"<h2 id=\"webpack是什么\"><a href=\"#webpack是什么\" class=\"headerlink\" title=\"webpack是什么\"></a>webpack是什么</h2><p>我的简单理解就是，将多个分散的文件（模块），打包成为一个或者指定形式的文件。</p>\n<p>比如说：有一个文件<code>main.js</code>，依赖<code>A.js</code> <code>B.js</code>，如果要想用<code>main.js</code>我们就需要对其进行打包（打包为<code>bundle.js</code>）。通过webpack打包，会自动把<code>A.js</code> <code>B.js</code>的代码打包到<code>bundle.js</code>。</p>\n<p>webpack自带有一些插件，也有第三方的组件，所以支持的功能比较多，也比较复杂。我通过一些配置文件，来介绍一些常用的用法写法。</p>\n<h2 id=\"wepack-准备说明\"><a href=\"#wepack-准备说明\" class=\"headerlink\" title=\"wepack 准备说明\"></a>wepack 准备说明</h2><p>首先要安装webpack。安装有两种方案：</p>\n<p>全局安装：<code>npm install -g webpack</code></p>\n<p>项目安装：<code>npm install -save-dev wepack</code></p>\n<p>启动终端/命令行，找到当前项目的路径，进入项目。</p>\n<p>如果是全局安装，那么之后可以直接输入<code>webpack ...</code>这样来进行使用。</p>\n<p>如果是项目安装，可以在<code>package.json</code>中的<code>scripts</code>字段中定义命令，之后执行<code>npm run 命令</code>来进行操作。</p>\n<p>为了省事，<strong>本系列文章</strong>是按照<strong>全局安装</strong>来使用的。</p>\n<p>还是那句话，也可以不用全局安装。可以<code>package.json</code>中的<code>scripts</code>中配置如下代码，来通过<code>npm run webpack</code>使用。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"webpack\"</span>: <span class=\"string\">\"webpack\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"所有例子的代码位置\"><a href=\"#所有例子的代码位置\" class=\"headerlink\" title=\"所有例子的代码位置\"></a>所有例子的代码位置</h2><p>可以访问 <a href=\"https://github.com/yukapril/learning/tree/master/webpack-demo\" target=\"_blank\" rel=\"noopener\">github</a> 进行查阅。</p>\n<h2 id=\"DEMO0-入门\"><a href=\"#DEMO0-入门\" class=\"headerlink\" title=\"DEMO0 - 入门\"></a>DEMO0 - 入门</h2><p>第一个最简单的打包例子。</p>\n<p>在<code>demo0</code>下，建立<code>src</code>文件夹</p>\n<p>新建一个<code>say.js</code>，有两个方法，但是仅仅导出了一个。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello, '</span> + msg + <span class=\"string\">'!'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> otherFn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is another function!'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = fn;</span><br></pre></td></tr></table></figure>\n\n<p>再新建一个<code>main.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> say = <span class=\"built_in\">require</span>(<span class=\"string\">'./say.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">say(<span class=\"string\">'world'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>例子很简单，公用方法文件<code>say.js</code>，被<code>main.js</code>调用。</p>\n<h4 id=\"请注意\"><a href=\"#请注意\" class=\"headerlink\" title=\"请注意\"></a>请注意</h4><p>引入的文件（模块），如果是npm安装的，那么代码执行过程中，会有路径处理，能找到这个依赖包，例如写<code>require(&#39;react&#39;)</code>即可；</p>\n<p>但是是自己写的文件（模块）的话，要写成<code>require(&#39;./say.js&#39;)</code>（可以省略扩展名），注意当前目录要加入<code>./</code>。否则找不到文件。下文会有如何建立别名的方法。</p>\n<h4 id=\"原因是这样的\"><a href=\"#原因是这样的\" class=\"headerlink\" title=\"原因是这样的\"></a>原因是这样的</h4><p><code>require</code>默认的工作路径，拿本例来说，不是<code>/webpack-demo/demo0</code>，而是<code>/webpack-demo/demo0/node_modules</code>。在这个目录里面，存在结构<code>react/index.js</code>，或者存在<code>react/package.json</code>文件，此文件中，定义了<code>main</code>入口文件。</p>\n<p>这样的话，你直接写<code>require(&#39;react&#39;)</code>，就是读取 <code>/webpack-demo/demo0/node_modules/react/index.js</code> （因为没有指定文件，所以读取默认文件<code>index.js</code>），所以是OK的。</p>\n<p>所以，如果是我们自己的模块，并没有在<code>node_modules</code>下的，直接写<code>require(&#39;say.js&#39;)</code>就会找不到。要写成当前目录<code>require(&#39;./say.js&#39;)</code>。</p>\n<p>了解完路径问题，我们回到例子，接下来进行webpack打包。</p>\n<h4 id=\"webpack打包\"><a href=\"#webpack打包\" class=\"headerlink\" title=\"webpack打包\"></a>webpack打包</h4><p>启动终端/命令行，首先进入目录：<code>cd demo0</code></p>\n<p>用webpack进行编译：<code>webpack src/main.js build/app.js</code>，第一个参数是入口文件，第二个参数是打包后文件</p>\n<p>之后可以发现，多了一个<code>build</code>目录，同时也有了我们要的<code>app.js</code>文件</p>\n<p>剩下的事情，就是编写<code>index.html</code>，并查看效果了。</p>\n<h4 id=\"重要的说明\"><a href=\"#重要的说明\" class=\"headerlink\" title=\"重要的说明\"></a>重要的说明</h4><p>请仔细查看编译后的<code>app.js</code>文件。在源文件<code>say.js</code>中，我故意加入了没有用到的函数<code>otherFn</code>，在编译后的最终文件内，是<strong>存在</strong>这个函数的。</p>\n<p>通过实验，不管用这种ES5风格，还是ES6风格，只要文件内有的东西，都会被编译到最终文件，不论是否被引用。这个是webpack1的问题，好在webpack2已经加入Tree-shaking技术来解决这个问题了。</p>\n<h2 id=\"DEMO1-使用配置文件webpack-config-js\"><a href=\"#DEMO1-使用配置文件webpack-config-js\" class=\"headerlink\" title=\"DEMO1 - 使用配置文件webpack.config.js\"></a>DEMO1 - 使用配置文件webpack.config.js</h2><p>这回，我们不再使用直接敲命令来控制webpack打包了，而是将要打包的东西，放到配置文件里。</p>\n<p>我们复制一份<code>src</code>目录，到<code>demo1</code>目录下。这样，最终的打包后结果会是相同的。</p>\n<p>我们在<code>demo1</code>下，建立一个<code>webpack.config.js</code>文件，这个是默认的配置文件名。</p>\n<p>除此外，还有其他的一些名字也是默认名。但是<code>webpack.config.js</code>是最流行的写法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'当前dirname:'</span>, __dirname);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口文件配置</span></span><br><span class=\"line\">    entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 文件导出的配置</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'./build'</span>,</span><br><span class=\"line\">        filename: <span class=\"string\">'app.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当require的模块找不到时，添加这些后缀再次查找</span></span><br><span class=\"line\">        extentions: [<span class=\"string\">'js'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里面，我们第一句打印出当前的工作环境目录，这个以后会用得到，可以注意下。</p>\n<p>之后，导出了一个配置对象。这个对象里面，有入口文件<code>entry</code>、打包文件<code>output</code> 和特殊查找处理<code>resolve</code>。其中，<strong>入口文件和打包文件是必须的</strong>，否则webpack不知道入口和出口啊。这两个配置太好理解了，我就不描述了。<code>resolve</code>下文再讲。</p>\n<p>这里一样需要注意，当前目录请写上<code>./</code>。</p>\n<p>之后，我们进入工作目录<code>cd demo1</code>，并执行<code>webpack</code>即可。</p>\n<p>如果你的配置文件不是默认名，那么需要这样执行<code>webpack --config somename.js</code>，就是指定配置文件。</p>\n<p>执行后，会看到当前dirname路径，因为例子比较简单，不会报错。</p>\n<p>如果写的比较复杂，报错了，怎么查看详情？请加参数执行打包：<code>webpack --display-error-details</code>，这样打包一旦遇到错误，会有错误信息。<strong>所有的命令参数，都是两条横线开头的。</strong></p>\n<h4 id=\"resolve是什么\"><a href=\"#resolve是什么\" class=\"headerlink\" title=\"resolve是什么\"></a>resolve是什么</h4><p>它相当于一个变通处理，<strong>基本上都是在解决代码中引用部分<code>require</code> <code>import</code>文件的问题</strong>。</p>\n<p>这里，用到了扩展名<code>extentions</code>参数，我们加入了<code>[&#39;js&#39;]</code>处理方案。意思是，针对引用的文件，自动尝试匹配扩展名。</p>\n<blockquote>\n<p>这里的数组值，可以写不带扩展名的<code>js</code>，也可以写成带有扩展名的<code>.js</code>，当然，还可以写 <code>.config.js</code> 这样的双重扩展名</p>\n<p> 一般你见到的，都是这样写的：<code>extensions: [&#39;&#39;, &#39;.jsx&#39;, &#39;.js&#39;]</code>，会用一个空串开头。我个人认为没什么意义。</p>\n</blockquote>\n<p>加入扩展名参数后，在我们的代码文件里，一旦有<code>require</code>(或者ES6的<code>import</code>)，默认会优先找当前文件。找不到，会自动加入我们配置的扩展名<code>js</code>。</p>\n<p>比如<code>main.js</code>中的<code>require(&#39;./say.js&#39;)</code>，默认去找当前目录下的<code>say.js</code>，结果找到了，OK。</p>\n<p>如果我们写成<code>require(&#39;./say&#39;)</code>，默认去找当前目录下的<code>say</code>，找不到！只好按配置的<code>extentions</code>顺序增加扩展名，再去找<code>say.js</code> <code>say/index.js</code>等，直到找到为止。</p>\n<p>所以，一旦我们在<code>resolve</code>中配置了<code>extentions</code>，就可以在代码引用环节省去对应的扩展名了。这个简写方案，非常常见。</p>\n<h2 id=\"DEMO2-resolve的alias参数-官网API\"><a href=\"#DEMO2-resolve的alias参数-官网API\" class=\"headerlink\" title=\"DEMO2 - resolve的alias参数 官网API\"></a>DEMO2 - resolve的alias参数 <a href=\"http://webpack.github.io/docs/configuration.html#resolve-alias\" target=\"_blank\" rel=\"noopener\">官网API</a></h2><p>这里，我们在提一个参数<code>alias</code>。</p>\n<p>接上一个DEMO1，复制一份为DEMO2。</p>\n<p>这次项目不一样了，我们要用到很多自己写的模块，这个例子中，我新加入了<code>take.js</code> <code>watch.js</code>文件，并和<code>say.js</code>一起放到了<code>modules</code>目录下，而且是按照分类和版本号存放。</p>\n<p>结构为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modules/say/1.0/say.js</span><br><span class=\"line\">modules/take/1.2/take.js</span><br><span class=\"line\">modules/watch/2.0/watch.js</span><br></pre></td></tr></table></figure>\n\n<p>在引用的文件<code>main.js</code>中，我们希望这么写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> say = <span class=\"built_in\">require</span>(<span class=\"string\">'say'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> take = <span class=\"built_in\">require</span>(<span class=\"string\">'take'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> watch = <span class=\"built_in\">require</span>(<span class=\"string\">'watch'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">say(<span class=\"string\">'world'</span>);</span><br><span class=\"line\">take();</span><br><span class=\"line\">watch();</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>，我们希望这里把<code>say</code> <code>take</code> <code>watch</code>定义了为别名，没有路径概念。</p>\n<p>这样好处是，就可以写模块的同事自己专心写模块，而写<code>main.js</code>的同事只需要关心引入对应模块就行了，不需要关心具体的版本和路径。至于别名的处理，只需要有一个人每次负责修改<code>webpack.config.js</code>就可以了。</p>\n<p>配置文件，需要修改成这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'当前dirname:'</span>, __dirname);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口文件配置</span></span><br><span class=\"line\">    entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 文件导出的配置</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'./build'</span>,</span><br><span class=\"line\">        filename: <span class=\"string\">'app.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当require的模块找不到时，添加这些后缀再次查找</span></span><br><span class=\"line\">        extentions: [<span class=\"string\">'js'</span>],</span><br><span class=\"line\">        <span class=\"comment\">// 建立require别名</span></span><br><span class=\"line\">        alias: &#123;</span><br><span class=\"line\">            <span class=\"string\">'say'</span>: <span class=\"string\">'./modules/say/1.0/say'</span>,</span><br><span class=\"line\">            <span class=\"string\">'take'</span>: <span class=\"string\">'./modules/take/1.2/take'</span>,</span><br><span class=\"line\">            <span class=\"string\">'watch'</span>: <span class=\"string\">'./modules/watch/2.0/watch'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样写之后，在<code>main.js</code>中，当遇到<code>require(&#39;say&#39;)</code>的时候，相当于变成了<code>require(&#39;./modules/say/1.0/say&#39;)</code>。这就是别名的作用。</p>\n<h2 id=\"DEMO3-resolve的更多参数（root）官网API\"><a href=\"#DEMO3-resolve的更多参数（root）官网API\" class=\"headerlink\" title=\"DEMO3 - resolve的更多参数（root）官网API\"></a>DEMO3 - resolve的更多参数（root）<a href=\"http://webpack.github.io/docs/configuration.html#resolve-root\" target=\"_blank\" rel=\"noopener\">官网API</a></h2><p><code>resolve.root</code>，用的人应该很少。这里仅做介绍。</p>\n<p>现在来个特殊的例子。我们在demo2中，写过一些公共方法，也写了一个调用的<code>main.js</code>。另一个开发小组，知道我们的公共方法了，觉得很好，也想使用，但是他们不希望自己去维护公共方法。怎么办？</p>\n<p>让require的默认路径设置为demo2的模块路径呗~</p>\n<p>他们的<code>main.js</code>是这样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> say = <span class=\"built_in\">require</span>(<span class=\"string\">'say'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">say(<span class=\"string\">'onather'</span>);</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack.config.js</code>需要这样配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> rootPath = path.resolve(<span class=\"string\">'../demo2/src/modules'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'当前rootPath:'</span>,rootPath);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口文件配置</span></span><br><span class=\"line\">    entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 文件导出的配置</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'./build'</span>,</span><br><span class=\"line\">        filename: <span class=\"string\">'app.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当require的模块找不到时，添加这些后缀再次查找</span></span><br><span class=\"line\">        extentions: [<span class=\"string\">'js'</span>],</span><br><span class=\"line\">        <span class=\"comment\">// 修改require默认的路径，默认是在./node_modules下，现在修改到demo2/src/modules下</span></span><br><span class=\"line\">        root: rootPath,</span><br><span class=\"line\">        <span class=\"comment\">// 建立require别名</span></span><br><span class=\"line\">        alias: &#123;</span><br><span class=\"line\">            <span class=\"string\">'say'</span>: <span class=\"string\">'say/1.0/say'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"要说明注意的点\"><a href=\"#要说明注意的点\" class=\"headerlink\" title=\"要说明注意的点\"></a>要说明注意的点</h4><ul>\n<li>开头引入了<code>path</code>，这个是<code>node</code>自带模块。<code>path.resolve</code>可以将参数拼接，组成绝对路径。</li>\n<li><code>resolve.root</code>的值，可以是字符串，也可以是数组。数组相当于多个路径，一个一个查找</li>\n<li><code>resolve.root</code><strong>只支持绝对路径</strong>，相对路径不行的</li>\n<li>由于我们使用<code>root</code>修改了<code>require</code>处理依赖的工作路径，即不在当前运行的路径了，修改成为了<code>/webpack-demo/demo2/src/modules</code>，所以在<code>alias</code>里，也不能是<code>./</code>开头了，而应该直接写成 <code>say/1.0/say</code>，和上文中的<code>react</code>例子相同。如果继续使用<code>./</code>开头会自动在demo3目录下查找</li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>这篇文章，介绍了如何webpack入门，以及最基础的配置。</p>\n<p>配置里面，要有 <code>entry</code> <code>output</code>。</p>\n<p>处理代码中<code>require</code>的问题，可以配置<code>resolve</code>来解决。这里面有扩展名<code>extentions</code>和别名<code>alias</code>。常用的就这两个，其他方法我很少见别人用。</p>\n<p>还提及到了，如果打包出错，想看错误信息，这样执行：<code>webpack --display-error-details</code>。</p>"},{"layout":"post","title":"webpack入门-2","date":"2017-01-19T22:50:00.000Z","_content":"\n这次，研究一些稍微复杂一点的。\n\n<!-- more -->\n\n之前的操作，我们都是用ES5语法写的，打包直接进行合并/压缩就可以了。仅仅是让`webpack`负责处理代码`require`依赖而已。\n\n> 代码合并例子可以体现，但是代码压缩之前的例子里面是没有的。\n\n我们平时接触的项目，会远远比这复杂。\n\n比如你写angular2，那么它使用`typescript`，React呢，它用`JSX`，或者，你更喜欢原生的代码，使用ES6来书写。\n\n不仅如此，CSS也有很多“变种”，比如说`LESS`、`SASS`等。\n\n再或者，你希望仅仅书写\n\n```css\ntransition: all 2s;\n```\n\n但是最终代码希望是\n\n```css\n-webkit-transition: all 2s;\n-moz-transition: all 2s;\ntransition: all 2s;\n```\n\n这样子，自动帮你补全兼容处理。\n\n这时候，就需要对**源代码进行加工**，加工完之后，变成普通ES5代码或者CSS之后，在进行之前的打包工作。\n\n这就是`webpack`的`loaders`。\n\n## 所有例子的代码位置\n\n可以访问 [github](https://github.com/yukapril/learning/tree/master/webpack-demo) 进行查阅。\n\n## DEMO4 体验一次loaders\n\n首先创建项目工程，建立`demo4`目录\n\n建立一个`./src/mian.js`文件：\n\n```js\nvar hello = () => {\n    console.log('hello loaders!');\n};\n\n```\n我们写一句最简单的ES6语法——箭头函数。这样，打包之后，我们可以直接查看生成的JS就可以了，都不用镶嵌到html中在浏览器中查看效果~怎么样？岂不是很简单？\n\n下面，我们要做的事情是，配置`webpack.config.js`，越简单越好！\n\n我们在原有的基础上，进行精简。之后，再试试我们的`loaders`功能。\n\n等等！我们要把我们写的`./src/main.js`先转换为普通的ES5代码，才能使用我们之前的配置方案。\n\n这时候，需要引入其他组件了，根据经验，将ES6转换为ES5，大家用的比较多的是 `babel` 。我们需要用 `npm` 安装它。如果你不会用`npm`，请先查阅最基础的文章。\n\n首先在我们的`demo4`项目里，\n\n* 创建npm配置文件：`npm init`，使用默认参数即可\n* 安装babel插件：`npm install -save-dev babel-core babel-preset-es2015`\n* 安装webpack的babel适配器：`npm install -save-dev babel-loader`\n\n其中，`babel-core`是babel的核心文件，它可以对JS进行转码。但是转成什么呢，我们需要`babel-preset-es2015`，即ES5代码。\n\n为什么还要安装`babel-loader`呢？因为`babel`自己是一个独立的工具，可以直接运行的。我们想在 `webpack` 中应用它，就需要对它做兼容处理，`babel-loader` 就是这个兼容器，相当于连接桥。`webpack`下基本上所有的loaders（可以理解为工具/连接桥），都是`xxx-loader`这种形式的。\n\n恩，就这些，搞定了。检查下你的`package.json`文件，是不是和下面的很类似，应该不缺少任何一行！当然，版本号可以和我的有出入。\n\n```json\n{\n  \"name\": \"demo4\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"webpack.config.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"babel-core\": \"^6.21.0\",\n    \"babel-loader\": \"^6.2.10\",\n    \"babel-preset-es2015\": \"^6.18.0\"\n  }\n}\n```\n\n接下来，我们来写webpack配置文件`webpack.config.js`：\n\n```js\nmodule.exports = {\n    // 入口文件配置\n    entry: './src/main.js',\n    // 文件导出的配置\n    output: {\n        path: './build',\n        filename: 'app.js'\n    },\n    module: {\n        loaders: [{\n            test: /\\.js$/,\n            loader: 'babel-loader'\n        }]\n    },\n    babel: {\n        presets: ['es2015']\n    }\n}\n```\n\n`loaders`是一个数组，因为它可以配置多种处理器。每一种处理器，是一个对象。\n\n处理器对象要包括`test`字段，用正则或者路径进行匹配要处理的文件，比如上面这个，匹配所有`.js`结尾的文件。匹配成功后，会用`loader`内的处理器进行处理。我们这里用`babel-loader`。\n\n`loader`需要说明的是：\n\n* 它可以是字符串，也可以直接是数组。如果是字符串，使用`!`进行分割。\n* 它的插件默认都是`xxx-loader`形式，可以简写为`xxx`。比如上面的例子简写是`loader: 'babel'`。\n* 如果是多个loader，那么处理顺序是**从右往左**。例如 `loader: 'aaa!bbb!ccc'` ，那么相当于先进行 `ccc-loader` 处理，之后是 `bbb-loader` ，最后是 `aaa-loader` 。\n\n`babel`需要有自己的配置文件。我们可以在根目录下创建一个`.babelrc`的json文件，或者在上面的文件内配置`babel`字段。甚至还有其他的配置方法（比如在当前处理器对象中，加入`query`字段），反正条条大路通罗马。\n\n具体的插件如何配置，需要参考插件的文档。\n\n好了，不需要在进行其他配置了，我们直接当前目录下执行webpack命令就可以了：`webpack`\n\n程序自动生成了`./build/app.js`。我们只需要打开查看最后一点点代码：\n\n```js\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n    'use strict';\n\n    var hello = function hello() {\n        console.log('hello loaders!');\n    };\n\n/***/ }\n/******/ ]);\n```\n\n你看，babel已经帮我们把ES6转化为ES5了！多么神奇！\n\n\n## loaders的include和exclude参数\n\n这个参数我也查过一些文档，就是说在处理时候包含/排除那些规则的文件，但是目前没有测试成功具体的用法。网络上也没查到有什么特殊的用意。\n\n网上都是这么用的：\n\n```js\n{\n    module: {\n        loaders: [{\n            test: /\\.js$/,\n            loader: 'babel-loader',\n            include: [\n                path.resolve(__dirname, \"app/src\"),\n                path.resolve(__dirname, \"app/test\")\n            ],\n            exclude: /node_modules/\n        }]\n    }\n}\n```\n\n曾经测试过，加入`exclude`后确实管用，可以让打出来的包更小（但是不会差别很大），但是原因还不详。\n\n## DEMO5 编写自己的loader\n\n这次，我们自己简单的实现一个loader，来熟悉下loader的处理流程。\n\n这里，我不做过多的扩展字段说明，可以参考例子代码中的注释。\n\n新建一个目录，叫做demo5。入口文件 `./src/main.js` 如下：由于我们不打算加入babel，所以处理不了ES6语法，我们这次试用ES5的语法。\n\n```js\nvar someComponent = require('./some-component');\nvar foo = function () {\n    console.log('hi');\n};\nfoo();\nsomeComponent();\n```\n\n引用的文件`./src/some-component.js` 如下：\n\n```js\nmodule.exports = function(){\n    console.log('this is some-component');\n};\n```\n\n现在，我们做两个loader，这样可以更清楚的看到它的处理流程。第一个是针对当前处理的文件，通过注释的形式，给当前代码段加入文件名和版本号，第二个更简单，直接在当前代码段最前面加上 `'ususe strict'` 标志。\n\n先要写好 `webpack.config.js`文件：\n\n```js\nvar path = require('path');\n\nmodule.exports = {\n    entry: './src/main.js',\n    output: {\n        path: './build',\n        filename: 'app.js'\n    },\n    resolve: {\n        extentions: ['js']\n    },\n    module: {\n        loaders: [{\n            test: /\\.js$/,\n            loader: [path.resolve(__dirname, './strict-loader'), path.resolve(__dirname, './comment-loader')].join('!'),\n            //自有loader需要使用绝对路径，否则代码中的require部分后的代码，将无法找到！\n        }]\n    },\n    commentLoader: {\n        str: 'v1.0'\n    }\n}\n\n```\n\n这里要注意的是：\n\n* 引用的每个loader，需要使用绝对路径，这里我用 `path.resolve` 来解决。使用相对路径，require会找不到的！\n* loader如果是字符串或者数组，一定是从右往左写的。\n* `commnetLoader`字段，我们稍后学习在loader里面进行读取使用。相当于是loader的参数。\n\n#### 给代码段加入文件名和版本号注释\n\n我们就在根目录建立`./comment-loader.js`文件：\n\n```js\nconst path = require('path');\n\nmodule.exports = function (source) {\n    console.log('====进入comment模块====');\n    console.log(source);\n    console.log('======================');\n\n    var param = this.options['commentLoader'] || {};\n    var str = param.str || '';\n    var file = path.parse(this.resourcePath);\n    var ret = '\\n//--------' + file.base + ' ' + str + '--------\\n' + source + '\\n//------------------------';\n\n    //return ret;//同步模式，单参数返回（只能返回处理后的代码）\n    //this.callback(null, ret, null); //同步模式，多参数返回，第一个参数不详，第二个为处理后的代码，第三个参数为map\n    var cb = this.async();//异步模式，调用async函数\n\n    setTimeout(() => {\n        cb(null, ret, null);\n    }, 2000);\n\n};\n```\n\n**解释说明**\n\n所有的loader可以接收两个参数，分别为 `source` `map`，第一个是当前的源代码，第二个是sourceMap。第二个一般用不到，这里我们省略。\n\n当前环境内的 `this` ，比较复杂，是webpack提供的一些方法。\n\n通过打印 `source` 参数，我们可以看到内容如下：\n\n```\n====进入comment模块====\nvar someComponent = require('./some-component');\nvar foo = function () {\n    console.log('hi');\n};\nfoo();\nsomeComponent();\n======================\n\n====进入comment模块====\nmodule.exports = function(){\n    console.log('this is some-component');\n};\n======================\n```\n\n可以看到，访问了几个符合条件的文件，就要被执行几次。而参数 `source` 就是单纯的文件内容而已。\n\n之后，我发现 `this.options` 内包含了整个`webpack.config.js`内容，故直接采用 `var param = this.options['commentLoader'] || {};` 方式获取 `commentLoader` 字段内容，当然做了兼容处理，如果不存在则默认配置一个对象。\n\n下文也是， `var str = param.str || ''` ，读取 `param.str`字段，不存在则为空。\n\n通过测试发现， `this.resourcePath` 可以获得当前正在处理的文件路径。我使用NodeJS的 `path.parse` 进行解析。下文就可以直接用 `file.base` 来获得文件名了。\n\n最后，进行返回数据。\n\nloader返回数据的三种方案：\n\n* 代码是同步模式，可以最后直接返回，比如例子可以写成： `return ret;`。这个很明显有个缺陷，那就是：只能返回一个代码字符串！最上面说了，可以传入2个参数，那么第二个map参数呢？这个方法解决不了。\n* 代码是同步模式，可以解决直接 `return` 的单参数问题： `this.callback(null, ret, null)` 。第一个参数不详，第二个为处理后的代码，第三个参数为map。\n* 代码是异步模式，首先需要在同步代码中，调用 `var cb = this.async()` 。之后就可以在异步中调用 `cb()` 了。参数和同步模式一样的。\n\n上面的例子，为异步模式，意思为延时两秒后，进行回调。\n\n这个看懂之后，就好办了。我们来写`./strict-loader.js`文件：\n\n```js\nmodule.exports = function (source) {\n    console.log('====进入strict模块====');\n    console.log( source);\n    console.log('======================');\n    return '\\'use strict\\';\\n' + source;\n};\n```\n\n这个就不解释了。\n\n最终，我们执行webpack，首先看看终端中的显示内容：\n\n```\n====进入comment模块====\nvar someComponent = require('./some-component');\nvar foo = function () {\n    console.log('hi');\n};\nfoo();\nsomeComponent();\n======================\n====进入strict模块====\n\n//--------main.js v1.0--------\nvar someComponent = require('./some-component');\nvar foo = function () {\n    console.log('hi');\n};\nfoo();\nsomeComponent();\n//------------------------\n======================\n\n\n====进入comment模块====\nmodule.exports = function(){\n    console.log('this is some-component');\n};\n======================\n====进入strict模块====\n\n//--------some-component.js v1.0--------\nmodule.exports = function(){\n    console.log('this is some-component');\n};\n//------------------------\n======================\n```\n\n可以很清晰的看到，从入口开始，遇到一个符合条件的文件，开始进入loader处理。首先将源码带入 `comment-loader` ，之后将输出的代码带入 `strict-loader`。这样完成一个文件之后，在进行下一个文件。\n\n再看看最终生成的代码：\n\n```js\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t//--------main.js v1.0--------\n\tvar someComponent = __webpack_require__(1);\n\tvar foo = function () {\n\t    console.log('hi');\n\t};\n\tfoo();\n\tsomeComponent();\n\t//------------------------\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\t//--------some-component.js v1.0--------\n\tmodule.exports = function(){\n\t    console.log('this is some-component');\n\t};\n\t//------------------------\n\n/***/ }\n/******/ ]);\n```\n\n也是非常符合预期的。每个代码模块标有文件名和版本号，最上面还有严格模式标签。\n\n完成。","source":"_posts/2017/2017-01-19-webpack-2.md","raw":"---\nlayout: post\ntitle: \"webpack入门-2\"\ndate: 2017-01-19 22:50:00 GMT+0000\ncategories: [前端]\ntags:  [webpack]\n---\n\n这次，研究一些稍微复杂一点的。\n\n<!-- more -->\n\n之前的操作，我们都是用ES5语法写的，打包直接进行合并/压缩就可以了。仅仅是让`webpack`负责处理代码`require`依赖而已。\n\n> 代码合并例子可以体现，但是代码压缩之前的例子里面是没有的。\n\n我们平时接触的项目，会远远比这复杂。\n\n比如你写angular2，那么它使用`typescript`，React呢，它用`JSX`，或者，你更喜欢原生的代码，使用ES6来书写。\n\n不仅如此，CSS也有很多“变种”，比如说`LESS`、`SASS`等。\n\n再或者，你希望仅仅书写\n\n```css\ntransition: all 2s;\n```\n\n但是最终代码希望是\n\n```css\n-webkit-transition: all 2s;\n-moz-transition: all 2s;\ntransition: all 2s;\n```\n\n这样子，自动帮你补全兼容处理。\n\n这时候，就需要对**源代码进行加工**，加工完之后，变成普通ES5代码或者CSS之后，在进行之前的打包工作。\n\n这就是`webpack`的`loaders`。\n\n## 所有例子的代码位置\n\n可以访问 [github](https://github.com/yukapril/learning/tree/master/webpack-demo) 进行查阅。\n\n## DEMO4 体验一次loaders\n\n首先创建项目工程，建立`demo4`目录\n\n建立一个`./src/mian.js`文件：\n\n```js\nvar hello = () => {\n    console.log('hello loaders!');\n};\n\n```\n我们写一句最简单的ES6语法——箭头函数。这样，打包之后，我们可以直接查看生成的JS就可以了，都不用镶嵌到html中在浏览器中查看效果~怎么样？岂不是很简单？\n\n下面，我们要做的事情是，配置`webpack.config.js`，越简单越好！\n\n我们在原有的基础上，进行精简。之后，再试试我们的`loaders`功能。\n\n等等！我们要把我们写的`./src/main.js`先转换为普通的ES5代码，才能使用我们之前的配置方案。\n\n这时候，需要引入其他组件了，根据经验，将ES6转换为ES5，大家用的比较多的是 `babel` 。我们需要用 `npm` 安装它。如果你不会用`npm`，请先查阅最基础的文章。\n\n首先在我们的`demo4`项目里，\n\n* 创建npm配置文件：`npm init`，使用默认参数即可\n* 安装babel插件：`npm install -save-dev babel-core babel-preset-es2015`\n* 安装webpack的babel适配器：`npm install -save-dev babel-loader`\n\n其中，`babel-core`是babel的核心文件，它可以对JS进行转码。但是转成什么呢，我们需要`babel-preset-es2015`，即ES5代码。\n\n为什么还要安装`babel-loader`呢？因为`babel`自己是一个独立的工具，可以直接运行的。我们想在 `webpack` 中应用它，就需要对它做兼容处理，`babel-loader` 就是这个兼容器，相当于连接桥。`webpack`下基本上所有的loaders（可以理解为工具/连接桥），都是`xxx-loader`这种形式的。\n\n恩，就这些，搞定了。检查下你的`package.json`文件，是不是和下面的很类似，应该不缺少任何一行！当然，版本号可以和我的有出入。\n\n```json\n{\n  \"name\": \"demo4\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"webpack.config.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"babel-core\": \"^6.21.0\",\n    \"babel-loader\": \"^6.2.10\",\n    \"babel-preset-es2015\": \"^6.18.0\"\n  }\n}\n```\n\n接下来，我们来写webpack配置文件`webpack.config.js`：\n\n```js\nmodule.exports = {\n    // 入口文件配置\n    entry: './src/main.js',\n    // 文件导出的配置\n    output: {\n        path: './build',\n        filename: 'app.js'\n    },\n    module: {\n        loaders: [{\n            test: /\\.js$/,\n            loader: 'babel-loader'\n        }]\n    },\n    babel: {\n        presets: ['es2015']\n    }\n}\n```\n\n`loaders`是一个数组，因为它可以配置多种处理器。每一种处理器，是一个对象。\n\n处理器对象要包括`test`字段，用正则或者路径进行匹配要处理的文件，比如上面这个，匹配所有`.js`结尾的文件。匹配成功后，会用`loader`内的处理器进行处理。我们这里用`babel-loader`。\n\n`loader`需要说明的是：\n\n* 它可以是字符串，也可以直接是数组。如果是字符串，使用`!`进行分割。\n* 它的插件默认都是`xxx-loader`形式，可以简写为`xxx`。比如上面的例子简写是`loader: 'babel'`。\n* 如果是多个loader，那么处理顺序是**从右往左**。例如 `loader: 'aaa!bbb!ccc'` ，那么相当于先进行 `ccc-loader` 处理，之后是 `bbb-loader` ，最后是 `aaa-loader` 。\n\n`babel`需要有自己的配置文件。我们可以在根目录下创建一个`.babelrc`的json文件，或者在上面的文件内配置`babel`字段。甚至还有其他的配置方法（比如在当前处理器对象中，加入`query`字段），反正条条大路通罗马。\n\n具体的插件如何配置，需要参考插件的文档。\n\n好了，不需要在进行其他配置了，我们直接当前目录下执行webpack命令就可以了：`webpack`\n\n程序自动生成了`./build/app.js`。我们只需要打开查看最后一点点代码：\n\n```js\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n    'use strict';\n\n    var hello = function hello() {\n        console.log('hello loaders!');\n    };\n\n/***/ }\n/******/ ]);\n```\n\n你看，babel已经帮我们把ES6转化为ES5了！多么神奇！\n\n\n## loaders的include和exclude参数\n\n这个参数我也查过一些文档，就是说在处理时候包含/排除那些规则的文件，但是目前没有测试成功具体的用法。网络上也没查到有什么特殊的用意。\n\n网上都是这么用的：\n\n```js\n{\n    module: {\n        loaders: [{\n            test: /\\.js$/,\n            loader: 'babel-loader',\n            include: [\n                path.resolve(__dirname, \"app/src\"),\n                path.resolve(__dirname, \"app/test\")\n            ],\n            exclude: /node_modules/\n        }]\n    }\n}\n```\n\n曾经测试过，加入`exclude`后确实管用，可以让打出来的包更小（但是不会差别很大），但是原因还不详。\n\n## DEMO5 编写自己的loader\n\n这次，我们自己简单的实现一个loader，来熟悉下loader的处理流程。\n\n这里，我不做过多的扩展字段说明，可以参考例子代码中的注释。\n\n新建一个目录，叫做demo5。入口文件 `./src/main.js` 如下：由于我们不打算加入babel，所以处理不了ES6语法，我们这次试用ES5的语法。\n\n```js\nvar someComponent = require('./some-component');\nvar foo = function () {\n    console.log('hi');\n};\nfoo();\nsomeComponent();\n```\n\n引用的文件`./src/some-component.js` 如下：\n\n```js\nmodule.exports = function(){\n    console.log('this is some-component');\n};\n```\n\n现在，我们做两个loader，这样可以更清楚的看到它的处理流程。第一个是针对当前处理的文件，通过注释的形式，给当前代码段加入文件名和版本号，第二个更简单，直接在当前代码段最前面加上 `'ususe strict'` 标志。\n\n先要写好 `webpack.config.js`文件：\n\n```js\nvar path = require('path');\n\nmodule.exports = {\n    entry: './src/main.js',\n    output: {\n        path: './build',\n        filename: 'app.js'\n    },\n    resolve: {\n        extentions: ['js']\n    },\n    module: {\n        loaders: [{\n            test: /\\.js$/,\n            loader: [path.resolve(__dirname, './strict-loader'), path.resolve(__dirname, './comment-loader')].join('!'),\n            //自有loader需要使用绝对路径，否则代码中的require部分后的代码，将无法找到！\n        }]\n    },\n    commentLoader: {\n        str: 'v1.0'\n    }\n}\n\n```\n\n这里要注意的是：\n\n* 引用的每个loader，需要使用绝对路径，这里我用 `path.resolve` 来解决。使用相对路径，require会找不到的！\n* loader如果是字符串或者数组，一定是从右往左写的。\n* `commnetLoader`字段，我们稍后学习在loader里面进行读取使用。相当于是loader的参数。\n\n#### 给代码段加入文件名和版本号注释\n\n我们就在根目录建立`./comment-loader.js`文件：\n\n```js\nconst path = require('path');\n\nmodule.exports = function (source) {\n    console.log('====进入comment模块====');\n    console.log(source);\n    console.log('======================');\n\n    var param = this.options['commentLoader'] || {};\n    var str = param.str || '';\n    var file = path.parse(this.resourcePath);\n    var ret = '\\n//--------' + file.base + ' ' + str + '--------\\n' + source + '\\n//------------------------';\n\n    //return ret;//同步模式，单参数返回（只能返回处理后的代码）\n    //this.callback(null, ret, null); //同步模式，多参数返回，第一个参数不详，第二个为处理后的代码，第三个参数为map\n    var cb = this.async();//异步模式，调用async函数\n\n    setTimeout(() => {\n        cb(null, ret, null);\n    }, 2000);\n\n};\n```\n\n**解释说明**\n\n所有的loader可以接收两个参数，分别为 `source` `map`，第一个是当前的源代码，第二个是sourceMap。第二个一般用不到，这里我们省略。\n\n当前环境内的 `this` ，比较复杂，是webpack提供的一些方法。\n\n通过打印 `source` 参数，我们可以看到内容如下：\n\n```\n====进入comment模块====\nvar someComponent = require('./some-component');\nvar foo = function () {\n    console.log('hi');\n};\nfoo();\nsomeComponent();\n======================\n\n====进入comment模块====\nmodule.exports = function(){\n    console.log('this is some-component');\n};\n======================\n```\n\n可以看到，访问了几个符合条件的文件，就要被执行几次。而参数 `source` 就是单纯的文件内容而已。\n\n之后，我发现 `this.options` 内包含了整个`webpack.config.js`内容，故直接采用 `var param = this.options['commentLoader'] || {};` 方式获取 `commentLoader` 字段内容，当然做了兼容处理，如果不存在则默认配置一个对象。\n\n下文也是， `var str = param.str || ''` ，读取 `param.str`字段，不存在则为空。\n\n通过测试发现， `this.resourcePath` 可以获得当前正在处理的文件路径。我使用NodeJS的 `path.parse` 进行解析。下文就可以直接用 `file.base` 来获得文件名了。\n\n最后，进行返回数据。\n\nloader返回数据的三种方案：\n\n* 代码是同步模式，可以最后直接返回，比如例子可以写成： `return ret;`。这个很明显有个缺陷，那就是：只能返回一个代码字符串！最上面说了，可以传入2个参数，那么第二个map参数呢？这个方法解决不了。\n* 代码是同步模式，可以解决直接 `return` 的单参数问题： `this.callback(null, ret, null)` 。第一个参数不详，第二个为处理后的代码，第三个参数为map。\n* 代码是异步模式，首先需要在同步代码中，调用 `var cb = this.async()` 。之后就可以在异步中调用 `cb()` 了。参数和同步模式一样的。\n\n上面的例子，为异步模式，意思为延时两秒后，进行回调。\n\n这个看懂之后，就好办了。我们来写`./strict-loader.js`文件：\n\n```js\nmodule.exports = function (source) {\n    console.log('====进入strict模块====');\n    console.log( source);\n    console.log('======================');\n    return '\\'use strict\\';\\n' + source;\n};\n```\n\n这个就不解释了。\n\n最终，我们执行webpack，首先看看终端中的显示内容：\n\n```\n====进入comment模块====\nvar someComponent = require('./some-component');\nvar foo = function () {\n    console.log('hi');\n};\nfoo();\nsomeComponent();\n======================\n====进入strict模块====\n\n//--------main.js v1.0--------\nvar someComponent = require('./some-component');\nvar foo = function () {\n    console.log('hi');\n};\nfoo();\nsomeComponent();\n//------------------------\n======================\n\n\n====进入comment模块====\nmodule.exports = function(){\n    console.log('this is some-component');\n};\n======================\n====进入strict模块====\n\n//--------some-component.js v1.0--------\nmodule.exports = function(){\n    console.log('this is some-component');\n};\n//------------------------\n======================\n```\n\n可以很清晰的看到，从入口开始，遇到一个符合条件的文件，开始进入loader处理。首先将源码带入 `comment-loader` ，之后将输出的代码带入 `strict-loader`。这样完成一个文件之后，在进行下一个文件。\n\n再看看最终生成的代码：\n\n```js\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t//--------main.js v1.0--------\n\tvar someComponent = __webpack_require__(1);\n\tvar foo = function () {\n\t    console.log('hi');\n\t};\n\tfoo();\n\tsomeComponent();\n\t//------------------------\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\t//--------some-component.js v1.0--------\n\tmodule.exports = function(){\n\t    console.log('this is some-component');\n\t};\n\t//------------------------\n\n/***/ }\n/******/ ]);\n```\n\n也是非常符合预期的。每个代码模块标有文件名和版本号，最上面还有严格模式标签。\n\n完成。","slug":"2017-2017-01-19-webpack-2","published":1,"updated":"2019-07-18T17:19:07.053Z","comments":1,"photos":[],"link":"","_id":"cjy8y72uv00bws21d3p5udtrh","content":"<p>这次，研究一些稍微复杂一点的。</p>\n<a id=\"more\"></a>\n\n<p>之前的操作，我们都是用ES5语法写的，打包直接进行合并/压缩就可以了。仅仅是让<code>webpack</code>负责处理代码<code>require</code>依赖而已。</p>\n<blockquote>\n<p>代码合并例子可以体现，但是代码压缩之前的例子里面是没有的。</p>\n</blockquote>\n<p>我们平时接触的项目，会远远比这复杂。</p>\n<p>比如你写angular2，那么它使用<code>typescript</code>，React呢，它用<code>JSX</code>，或者，你更喜欢原生的代码，使用ES6来书写。</p>\n<p>不仅如此，CSS也有很多“变种”，比如说<code>LESS</code>、<code>SASS</code>等。</p>\n<p>再或者，你希望仅仅书写</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transition</span>: <span class=\"selector-tag\">all</span> 2<span class=\"selector-tag\">s</span>;</span><br></pre></td></tr></table></figure>\n\n<p>但是最终代码希望是</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">-webkit-transition</span>: <span class=\"selector-tag\">all</span> 2<span class=\"selector-tag\">s</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">-moz-transition</span>: <span class=\"selector-tag\">all</span> 2<span class=\"selector-tag\">s</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">transition</span>: <span class=\"selector-tag\">all</span> 2<span class=\"selector-tag\">s</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这样子，自动帮你补全兼容处理。</p>\n<p>这时候，就需要对<strong>源代码进行加工</strong>，加工完之后，变成普通ES5代码或者CSS之后，在进行之前的打包工作。</p>\n<p>这就是<code>webpack</code>的<code>loaders</code>。</p>\n<h2 id=\"所有例子的代码位置\"><a href=\"#所有例子的代码位置\" class=\"headerlink\" title=\"所有例子的代码位置\"></a>所有例子的代码位置</h2><p>可以访问 <a href=\"https://github.com/yukapril/learning/tree/master/webpack-demo\" target=\"_blank\" rel=\"noopener\">github</a> 进行查阅。</p>\n<h2 id=\"DEMO4-体验一次loaders\"><a href=\"#DEMO4-体验一次loaders\" class=\"headerlink\" title=\"DEMO4 体验一次loaders\"></a>DEMO4 体验一次loaders</h2><p>首先创建项目工程，建立<code>demo4</code>目录</p>\n<p>建立一个<code>./src/mian.js</code>文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hello = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello loaders!'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>我们写一句最简单的ES6语法——箭头函数。这样，打包之后，我们可以直接查看生成的JS就可以了，都不用镶嵌到html中在浏览器中查看效果~怎么样？岂不是很简单？</p>\n<p>下面，我们要做的事情是，配置<code>webpack.config.js</code>，越简单越好！</p>\n<p>我们在原有的基础上，进行精简。之后，再试试我们的<code>loaders</code>功能。</p>\n<p>等等！我们要把我们写的<code>./src/main.js</code>先转换为普通的ES5代码，才能使用我们之前的配置方案。</p>\n<p>这时候，需要引入其他组件了，根据经验，将ES6转换为ES5，大家用的比较多的是 <code>babel</code> 。我们需要用 <code>npm</code> 安装它。如果你不会用<code>npm</code>，请先查阅最基础的文章。</p>\n<p>首先在我们的<code>demo4</code>项目里，</p>\n<ul>\n<li>创建npm配置文件：<code>npm init</code>，使用默认参数即可</li>\n<li>安装babel插件：<code>npm install -save-dev babel-core babel-preset-es2015</code></li>\n<li>安装webpack的babel适配器：<code>npm install -save-dev babel-loader</code></li>\n</ul>\n<p>其中，<code>babel-core</code>是babel的核心文件，它可以对JS进行转码。但是转成什么呢，我们需要<code>babel-preset-es2015</code>，即ES5代码。</p>\n<p>为什么还要安装<code>babel-loader</code>呢？因为<code>babel</code>自己是一个独立的工具，可以直接运行的。我们想在 <code>webpack</code> 中应用它，就需要对它做兼容处理，<code>babel-loader</code> 就是这个兼容器，相当于连接桥。<code>webpack</code>下基本上所有的loaders（可以理解为工具/连接桥），都是<code>xxx-loader</code>这种形式的。</p>\n<p>恩，就这些，搞定了。检查下你的<code>package.json</code>文件，是不是和下面的很类似，应该不缺少任何一行！当然，版本号可以和我的有出入。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"demo4\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"webpack.config.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel-core\"</span>: <span class=\"string\">\"^6.21.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-loader\"</span>: <span class=\"string\">\"^6.2.10\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-es2015\"</span>: <span class=\"string\">\"^6.18.0\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来，我们来写webpack配置文件<code>webpack.config.js</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口文件配置</span></span><br><span class=\"line\">    entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 文件导出的配置</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'./build'</span>,</span><br><span class=\"line\">        filename: <span class=\"string\">'app.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            loader: <span class=\"string\">'babel-loader'</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    babel: &#123;</span><br><span class=\"line\">        presets: [<span class=\"string\">'es2015'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>loaders</code>是一个数组，因为它可以配置多种处理器。每一种处理器，是一个对象。</p>\n<p>处理器对象要包括<code>test</code>字段，用正则或者路径进行匹配要处理的文件，比如上面这个，匹配所有<code>.js</code>结尾的文件。匹配成功后，会用<code>loader</code>内的处理器进行处理。我们这里用<code>babel-loader</code>。</p>\n<p><code>loader</code>需要说明的是：</p>\n<ul>\n<li>它可以是字符串，也可以直接是数组。如果是字符串，使用<code>!</code>进行分割。</li>\n<li>它的插件默认都是<code>xxx-loader</code>形式，可以简写为<code>xxx</code>。比如上面的例子简写是<code>loader: &#39;babel&#39;</code>。</li>\n<li>如果是多个loader，那么处理顺序是<strong>从右往左</strong>。例如 <code>loader: &#39;aaa!bbb!ccc&#39;</code> ，那么相当于先进行 <code>ccc-loader</code> 处理，之后是 <code>bbb-loader</code> ，最后是 <code>aaa-loader</code> 。</li>\n</ul>\n<p><code>babel</code>需要有自己的配置文件。我们可以在根目录下创建一个<code>.babelrc</code>的json文件，或者在上面的文件内配置<code>babel</code>字段。甚至还有其他的配置方法（比如在当前处理器对象中，加入<code>query</code>字段），反正条条大路通罗马。</p>\n<p>具体的插件如何配置，需要参考插件的文档。</p>\n<p>好了，不需要在进行其他配置了，我们直接当前目录下执行webpack命令就可以了：<code>webpack</code></p>\n<p>程序自动生成了<code>./build/app.js</code>。我们只需要打开查看最后一点点代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/******/</span> ([</span><br><span class=\"line\"><span class=\"comment\">/* 0 */</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> hello = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello loaders!'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> ]);</span><br></pre></td></tr></table></figure>\n\n<p>你看，babel已经帮我们把ES6转化为ES5了！多么神奇！</p>\n<h2 id=\"loaders的include和exclude参数\"><a href=\"#loaders的include和exclude参数\" class=\"headerlink\" title=\"loaders的include和exclude参数\"></a>loaders的include和exclude参数</h2><p>这个参数我也查过一些文档，就是说在处理时候包含/排除那些规则的文件，但是目前没有测试成功具体的用法。网络上也没查到有什么特殊的用意。</p>\n<p>网上都是这么用的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">            include: [</span><br><span class=\"line\">                path.resolve(__dirname, <span class=\"string\">\"app/src\"</span>),</span><br><span class=\"line\">                path.resolve(__dirname, <span class=\"string\">\"app/test\"</span>)</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>曾经测试过，加入<code>exclude</code>后确实管用，可以让打出来的包更小（但是不会差别很大），但是原因还不详。</p>\n<h2 id=\"DEMO5-编写自己的loader\"><a href=\"#DEMO5-编写自己的loader\" class=\"headerlink\" title=\"DEMO5 编写自己的loader\"></a>DEMO5 编写自己的loader</h2><p>这次，我们自己简单的实现一个loader，来熟悉下loader的处理流程。</p>\n<p>这里，我不做过多的扩展字段说明，可以参考例子代码中的注释。</p>\n<p>新建一个目录，叫做demo5。入口文件 <code>./src/main.js</code> 如下：由于我们不打算加入babel，所以处理不了ES6语法，我们这次试用ES5的语法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someComponent = <span class=\"built_in\">require</span>(<span class=\"string\">'./some-component'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hi'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo();</span><br><span class=\"line\">someComponent();</span><br></pre></td></tr></table></figure>\n\n<p>引用的文件<code>./src/some-component.js</code> 如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is some-component'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>现在，我们做两个loader，这样可以更清楚的看到它的处理流程。第一个是针对当前处理的文件，通过注释的形式，给当前代码段加入文件名和版本号，第二个更简单，直接在当前代码段最前面加上 <code>&#39;ususe strict&#39;</code> 标志。</p>\n<p>先要写好 <code>webpack.config.js</code>文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'./build'</span>,</span><br><span class=\"line\">        filename: <span class=\"string\">'app.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        extentions: [<span class=\"string\">'js'</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            loader: [path.resolve(__dirname, <span class=\"string\">'./strict-loader'</span>), path.resolve(__dirname, <span class=\"string\">'./comment-loader'</span>)].join(<span class=\"string\">'!'</span>),</span><br><span class=\"line\">            <span class=\"comment\">//自有loader需要使用绝对路径，否则代码中的require部分后的代码，将无法找到！</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    commentLoader: &#123;</span><br><span class=\"line\">        str: <span class=\"string\">'v1.0'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里要注意的是：</p>\n<ul>\n<li>引用的每个loader，需要使用绝对路径，这里我用 <code>path.resolve</code> 来解决。使用相对路径，require会找不到的！</li>\n<li>loader如果是字符串或者数组，一定是从右往左写的。</li>\n<li><code>commnetLoader</code>字段，我们稍后学习在loader里面进行读取使用。相当于是loader的参数。</li>\n</ul>\n<h4 id=\"给代码段加入文件名和版本号注释\"><a href=\"#给代码段加入文件名和版本号注释\" class=\"headerlink\" title=\"给代码段加入文件名和版本号注释\"></a>给代码段加入文件名和版本号注释</h4><p>我们就在根目录建立<code>./comment-loader.js</code>文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'====进入comment模块===='</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(source);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'======================'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> param = <span class=\"keyword\">this</span>.options[<span class=\"string\">'commentLoader'</span>] || &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = param.str || <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> file = path.parse(<span class=\"keyword\">this</span>.resourcePath);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret = <span class=\"string\">'\\n//--------'</span> + file.base + <span class=\"string\">' '</span> + str + <span class=\"string\">'--------\\n'</span> + source + <span class=\"string\">'\\n//------------------------'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//return ret;//同步模式，单参数返回（只能返回处理后的代码）</span></span><br><span class=\"line\">    <span class=\"comment\">//this.callback(null, ret, null); //同步模式，多参数返回，第一个参数不详，第二个为处理后的代码，第三个参数为map</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cb = <span class=\"keyword\">this</span>.async();<span class=\"comment\">//异步模式，调用async函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        cb(<span class=\"literal\">null</span>, ret, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释说明</strong></p>\n<p>所有的loader可以接收两个参数，分别为 <code>source</code> <code>map</code>，第一个是当前的源代码，第二个是sourceMap。第二个一般用不到，这里我们省略。</p>\n<p>当前环境内的 <code>this</code> ，比较复杂，是webpack提供的一些方法。</p>\n<p>通过打印 <code>source</code> 参数，我们可以看到内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">====进入comment模块====</span><br><span class=\"line\">var someComponent = require(&apos;./some-component&apos;);</span><br><span class=\"line\">var foo = function () &#123;</span><br><span class=\"line\">    console.log(&apos;hi&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo();</span><br><span class=\"line\">someComponent();</span><br><span class=\"line\">======================</span><br><span class=\"line\"></span><br><span class=\"line\">====进入comment模块====</span><br><span class=\"line\">module.exports = function()&#123;</span><br><span class=\"line\">    console.log(&apos;this is some-component&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">======================</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，访问了几个符合条件的文件，就要被执行几次。而参数 <code>source</code> 就是单纯的文件内容而已。</p>\n<p>之后，我发现 <code>this.options</code> 内包含了整个<code>webpack.config.js</code>内容，故直接采用 <code>var param = this.options[&#39;commentLoader&#39;] || {};</code> 方式获取 <code>commentLoader</code> 字段内容，当然做了兼容处理，如果不存在则默认配置一个对象。</p>\n<p>下文也是， <code>var str = param.str || &#39;&#39;</code> ，读取 <code>param.str</code>字段，不存在则为空。</p>\n<p>通过测试发现， <code>this.resourcePath</code> 可以获得当前正在处理的文件路径。我使用NodeJS的 <code>path.parse</code> 进行解析。下文就可以直接用 <code>file.base</code> 来获得文件名了。</p>\n<p>最后，进行返回数据。</p>\n<p>loader返回数据的三种方案：</p>\n<ul>\n<li>代码是同步模式，可以最后直接返回，比如例子可以写成： <code>return ret;</code>。这个很明显有个缺陷，那就是：只能返回一个代码字符串！最上面说了，可以传入2个参数，那么第二个map参数呢？这个方法解决不了。</li>\n<li>代码是同步模式，可以解决直接 <code>return</code> 的单参数问题： <code>this.callback(null, ret, null)</code> 。第一个参数不详，第二个为处理后的代码，第三个参数为map。</li>\n<li>代码是异步模式，首先需要在同步代码中，调用 <code>var cb = this.async()</code> 。之后就可以在异步中调用 <code>cb()</code> 了。参数和同步模式一样的。</li>\n</ul>\n<p>上面的例子，为异步模式，意思为延时两秒后，进行回调。</p>\n<p>这个看懂之后，就好办了。我们来写<code>./strict-loader.js</code>文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'====进入strict模块===='</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( source);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'======================'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'\\'use strict\\';\\n'</span> + source;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这个就不解释了。</p>\n<p>最终，我们执行webpack，首先看看终端中的显示内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">====进入comment模块====</span><br><span class=\"line\">var someComponent = require(&apos;./some-component&apos;);</span><br><span class=\"line\">var foo = function () &#123;</span><br><span class=\"line\">    console.log(&apos;hi&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo();</span><br><span class=\"line\">someComponent();</span><br><span class=\"line\">======================</span><br><span class=\"line\">====进入strict模块====</span><br><span class=\"line\"></span><br><span class=\"line\">//--------main.js v1.0--------</span><br><span class=\"line\">var someComponent = require(&apos;./some-component&apos;);</span><br><span class=\"line\">var foo = function () &#123;</span><br><span class=\"line\">    console.log(&apos;hi&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo();</span><br><span class=\"line\">someComponent();</span><br><span class=\"line\">//------------------------</span><br><span class=\"line\">======================</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">====进入comment模块====</span><br><span class=\"line\">module.exports = function()&#123;</span><br><span class=\"line\">    console.log(&apos;this is some-component&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">======================</span><br><span class=\"line\">====进入strict模块====</span><br><span class=\"line\"></span><br><span class=\"line\">//--------some-component.js v1.0--------</span><br><span class=\"line\">module.exports = function()&#123;</span><br><span class=\"line\">    console.log(&apos;this is some-component&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//------------------------</span><br><span class=\"line\">======================</span><br></pre></td></tr></table></figure>\n\n<p>可以很清晰的看到，从入口开始，遇到一个符合条件的文件，开始进入loader处理。首先将源码带入 <code>comment-loader</code> ，之后将输出的代码带入 <code>strict-loader</code>。这样完成一个文件之后，在进行下一个文件。</p>\n<p>再看看最终生成的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/******/</span> ([</span><br><span class=\"line\"><span class=\"comment\">/* 0 */</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">\t'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//--------main.js v1.0--------</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> someComponent = __webpack_require__(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hi'</span>);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tfoo();</span><br><span class=\"line\">\tsomeComponent();</span><br><span class=\"line\">\t<span class=\"comment\">//------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;,</span><br><span class=\"line\"><span class=\"comment\">/* 1 */</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">\t'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//--------some-component.js v1.0--------</span></span><br><span class=\"line\">\t<span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is some-component'</span>);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">//------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> ]);</span><br></pre></td></tr></table></figure>\n\n<p>也是非常符合预期的。每个代码模块标有文件名和版本号，最上面还有严格模式标签。</p>\n<p>完成。</p>\n","site":{"data":{}},"excerpt":"<p>这次，研究一些稍微复杂一点的。</p>","more":"<p>之前的操作，我们都是用ES5语法写的，打包直接进行合并/压缩就可以了。仅仅是让<code>webpack</code>负责处理代码<code>require</code>依赖而已。</p>\n<blockquote>\n<p>代码合并例子可以体现，但是代码压缩之前的例子里面是没有的。</p>\n</blockquote>\n<p>我们平时接触的项目，会远远比这复杂。</p>\n<p>比如你写angular2，那么它使用<code>typescript</code>，React呢，它用<code>JSX</code>，或者，你更喜欢原生的代码，使用ES6来书写。</p>\n<p>不仅如此，CSS也有很多“变种”，比如说<code>LESS</code>、<code>SASS</code>等。</p>\n<p>再或者，你希望仅仅书写</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transition</span>: <span class=\"selector-tag\">all</span> 2<span class=\"selector-tag\">s</span>;</span><br></pre></td></tr></table></figure>\n\n<p>但是最终代码希望是</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">-webkit-transition</span>: <span class=\"selector-tag\">all</span> 2<span class=\"selector-tag\">s</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">-moz-transition</span>: <span class=\"selector-tag\">all</span> 2<span class=\"selector-tag\">s</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">transition</span>: <span class=\"selector-tag\">all</span> 2<span class=\"selector-tag\">s</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这样子，自动帮你补全兼容处理。</p>\n<p>这时候，就需要对<strong>源代码进行加工</strong>，加工完之后，变成普通ES5代码或者CSS之后，在进行之前的打包工作。</p>\n<p>这就是<code>webpack</code>的<code>loaders</code>。</p>\n<h2 id=\"所有例子的代码位置\"><a href=\"#所有例子的代码位置\" class=\"headerlink\" title=\"所有例子的代码位置\"></a>所有例子的代码位置</h2><p>可以访问 <a href=\"https://github.com/yukapril/learning/tree/master/webpack-demo\" target=\"_blank\" rel=\"noopener\">github</a> 进行查阅。</p>\n<h2 id=\"DEMO4-体验一次loaders\"><a href=\"#DEMO4-体验一次loaders\" class=\"headerlink\" title=\"DEMO4 体验一次loaders\"></a>DEMO4 体验一次loaders</h2><p>首先创建项目工程，建立<code>demo4</code>目录</p>\n<p>建立一个<code>./src/mian.js</code>文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hello = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello loaders!'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>我们写一句最简单的ES6语法——箭头函数。这样，打包之后，我们可以直接查看生成的JS就可以了，都不用镶嵌到html中在浏览器中查看效果~怎么样？岂不是很简单？</p>\n<p>下面，我们要做的事情是，配置<code>webpack.config.js</code>，越简单越好！</p>\n<p>我们在原有的基础上，进行精简。之后，再试试我们的<code>loaders</code>功能。</p>\n<p>等等！我们要把我们写的<code>./src/main.js</code>先转换为普通的ES5代码，才能使用我们之前的配置方案。</p>\n<p>这时候，需要引入其他组件了，根据经验，将ES6转换为ES5，大家用的比较多的是 <code>babel</code> 。我们需要用 <code>npm</code> 安装它。如果你不会用<code>npm</code>，请先查阅最基础的文章。</p>\n<p>首先在我们的<code>demo4</code>项目里，</p>\n<ul>\n<li>创建npm配置文件：<code>npm init</code>，使用默认参数即可</li>\n<li>安装babel插件：<code>npm install -save-dev babel-core babel-preset-es2015</code></li>\n<li>安装webpack的babel适配器：<code>npm install -save-dev babel-loader</code></li>\n</ul>\n<p>其中，<code>babel-core</code>是babel的核心文件，它可以对JS进行转码。但是转成什么呢，我们需要<code>babel-preset-es2015</code>，即ES5代码。</p>\n<p>为什么还要安装<code>babel-loader</code>呢？因为<code>babel</code>自己是一个独立的工具，可以直接运行的。我们想在 <code>webpack</code> 中应用它，就需要对它做兼容处理，<code>babel-loader</code> 就是这个兼容器，相当于连接桥。<code>webpack</code>下基本上所有的loaders（可以理解为工具/连接桥），都是<code>xxx-loader</code>这种形式的。</p>\n<p>恩，就这些，搞定了。检查下你的<code>package.json</code>文件，是不是和下面的很类似，应该不缺少任何一行！当然，版本号可以和我的有出入。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"demo4\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"webpack.config.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel-core\"</span>: <span class=\"string\">\"^6.21.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-loader\"</span>: <span class=\"string\">\"^6.2.10\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-es2015\"</span>: <span class=\"string\">\"^6.18.0\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来，我们来写webpack配置文件<code>webpack.config.js</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口文件配置</span></span><br><span class=\"line\">    entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 文件导出的配置</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'./build'</span>,</span><br><span class=\"line\">        filename: <span class=\"string\">'app.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            loader: <span class=\"string\">'babel-loader'</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    babel: &#123;</span><br><span class=\"line\">        presets: [<span class=\"string\">'es2015'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>loaders</code>是一个数组，因为它可以配置多种处理器。每一种处理器，是一个对象。</p>\n<p>处理器对象要包括<code>test</code>字段，用正则或者路径进行匹配要处理的文件，比如上面这个，匹配所有<code>.js</code>结尾的文件。匹配成功后，会用<code>loader</code>内的处理器进行处理。我们这里用<code>babel-loader</code>。</p>\n<p><code>loader</code>需要说明的是：</p>\n<ul>\n<li>它可以是字符串，也可以直接是数组。如果是字符串，使用<code>!</code>进行分割。</li>\n<li>它的插件默认都是<code>xxx-loader</code>形式，可以简写为<code>xxx</code>。比如上面的例子简写是<code>loader: &#39;babel&#39;</code>。</li>\n<li>如果是多个loader，那么处理顺序是<strong>从右往左</strong>。例如 <code>loader: &#39;aaa!bbb!ccc&#39;</code> ，那么相当于先进行 <code>ccc-loader</code> 处理，之后是 <code>bbb-loader</code> ，最后是 <code>aaa-loader</code> 。</li>\n</ul>\n<p><code>babel</code>需要有自己的配置文件。我们可以在根目录下创建一个<code>.babelrc</code>的json文件，或者在上面的文件内配置<code>babel</code>字段。甚至还有其他的配置方法（比如在当前处理器对象中，加入<code>query</code>字段），反正条条大路通罗马。</p>\n<p>具体的插件如何配置，需要参考插件的文档。</p>\n<p>好了，不需要在进行其他配置了，我们直接当前目录下执行webpack命令就可以了：<code>webpack</code></p>\n<p>程序自动生成了<code>./build/app.js</code>。我们只需要打开查看最后一点点代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/******/</span> ([</span><br><span class=\"line\"><span class=\"comment\">/* 0 */</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> hello = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello loaders!'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> ]);</span><br></pre></td></tr></table></figure>\n\n<p>你看，babel已经帮我们把ES6转化为ES5了！多么神奇！</p>\n<h2 id=\"loaders的include和exclude参数\"><a href=\"#loaders的include和exclude参数\" class=\"headerlink\" title=\"loaders的include和exclude参数\"></a>loaders的include和exclude参数</h2><p>这个参数我也查过一些文档，就是说在处理时候包含/排除那些规则的文件，但是目前没有测试成功具体的用法。网络上也没查到有什么特殊的用意。</p>\n<p>网上都是这么用的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">            include: [</span><br><span class=\"line\">                path.resolve(__dirname, <span class=\"string\">\"app/src\"</span>),</span><br><span class=\"line\">                path.resolve(__dirname, <span class=\"string\">\"app/test\"</span>)</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>曾经测试过，加入<code>exclude</code>后确实管用，可以让打出来的包更小（但是不会差别很大），但是原因还不详。</p>\n<h2 id=\"DEMO5-编写自己的loader\"><a href=\"#DEMO5-编写自己的loader\" class=\"headerlink\" title=\"DEMO5 编写自己的loader\"></a>DEMO5 编写自己的loader</h2><p>这次，我们自己简单的实现一个loader，来熟悉下loader的处理流程。</p>\n<p>这里，我不做过多的扩展字段说明，可以参考例子代码中的注释。</p>\n<p>新建一个目录，叫做demo5。入口文件 <code>./src/main.js</code> 如下：由于我们不打算加入babel，所以处理不了ES6语法，我们这次试用ES5的语法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someComponent = <span class=\"built_in\">require</span>(<span class=\"string\">'./some-component'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hi'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo();</span><br><span class=\"line\">someComponent();</span><br></pre></td></tr></table></figure>\n\n<p>引用的文件<code>./src/some-component.js</code> 如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is some-component'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>现在，我们做两个loader，这样可以更清楚的看到它的处理流程。第一个是针对当前处理的文件，通过注释的形式，给当前代码段加入文件名和版本号，第二个更简单，直接在当前代码段最前面加上 <code>&#39;ususe strict&#39;</code> 标志。</p>\n<p>先要写好 <code>webpack.config.js</code>文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'./build'</span>,</span><br><span class=\"line\">        filename: <span class=\"string\">'app.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        extentions: [<span class=\"string\">'js'</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            loader: [path.resolve(__dirname, <span class=\"string\">'./strict-loader'</span>), path.resolve(__dirname, <span class=\"string\">'./comment-loader'</span>)].join(<span class=\"string\">'!'</span>),</span><br><span class=\"line\">            <span class=\"comment\">//自有loader需要使用绝对路径，否则代码中的require部分后的代码，将无法找到！</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    commentLoader: &#123;</span><br><span class=\"line\">        str: <span class=\"string\">'v1.0'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里要注意的是：</p>\n<ul>\n<li>引用的每个loader，需要使用绝对路径，这里我用 <code>path.resolve</code> 来解决。使用相对路径，require会找不到的！</li>\n<li>loader如果是字符串或者数组，一定是从右往左写的。</li>\n<li><code>commnetLoader</code>字段，我们稍后学习在loader里面进行读取使用。相当于是loader的参数。</li>\n</ul>\n<h4 id=\"给代码段加入文件名和版本号注释\"><a href=\"#给代码段加入文件名和版本号注释\" class=\"headerlink\" title=\"给代码段加入文件名和版本号注释\"></a>给代码段加入文件名和版本号注释</h4><p>我们就在根目录建立<code>./comment-loader.js</code>文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'====进入comment模块===='</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(source);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'======================'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> param = <span class=\"keyword\">this</span>.options[<span class=\"string\">'commentLoader'</span>] || &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = param.str || <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> file = path.parse(<span class=\"keyword\">this</span>.resourcePath);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret = <span class=\"string\">'\\n//--------'</span> + file.base + <span class=\"string\">' '</span> + str + <span class=\"string\">'--------\\n'</span> + source + <span class=\"string\">'\\n//------------------------'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//return ret;//同步模式，单参数返回（只能返回处理后的代码）</span></span><br><span class=\"line\">    <span class=\"comment\">//this.callback(null, ret, null); //同步模式，多参数返回，第一个参数不详，第二个为处理后的代码，第三个参数为map</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cb = <span class=\"keyword\">this</span>.async();<span class=\"comment\">//异步模式，调用async函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        cb(<span class=\"literal\">null</span>, ret, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释说明</strong></p>\n<p>所有的loader可以接收两个参数，分别为 <code>source</code> <code>map</code>，第一个是当前的源代码，第二个是sourceMap。第二个一般用不到，这里我们省略。</p>\n<p>当前环境内的 <code>this</code> ，比较复杂，是webpack提供的一些方法。</p>\n<p>通过打印 <code>source</code> 参数，我们可以看到内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">====进入comment模块====</span><br><span class=\"line\">var someComponent = require(&apos;./some-component&apos;);</span><br><span class=\"line\">var foo = function () &#123;</span><br><span class=\"line\">    console.log(&apos;hi&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo();</span><br><span class=\"line\">someComponent();</span><br><span class=\"line\">======================</span><br><span class=\"line\"></span><br><span class=\"line\">====进入comment模块====</span><br><span class=\"line\">module.exports = function()&#123;</span><br><span class=\"line\">    console.log(&apos;this is some-component&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">======================</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，访问了几个符合条件的文件，就要被执行几次。而参数 <code>source</code> 就是单纯的文件内容而已。</p>\n<p>之后，我发现 <code>this.options</code> 内包含了整个<code>webpack.config.js</code>内容，故直接采用 <code>var param = this.options[&#39;commentLoader&#39;] || {};</code> 方式获取 <code>commentLoader</code> 字段内容，当然做了兼容处理，如果不存在则默认配置一个对象。</p>\n<p>下文也是， <code>var str = param.str || &#39;&#39;</code> ，读取 <code>param.str</code>字段，不存在则为空。</p>\n<p>通过测试发现， <code>this.resourcePath</code> 可以获得当前正在处理的文件路径。我使用NodeJS的 <code>path.parse</code> 进行解析。下文就可以直接用 <code>file.base</code> 来获得文件名了。</p>\n<p>最后，进行返回数据。</p>\n<p>loader返回数据的三种方案：</p>\n<ul>\n<li>代码是同步模式，可以最后直接返回，比如例子可以写成： <code>return ret;</code>。这个很明显有个缺陷，那就是：只能返回一个代码字符串！最上面说了，可以传入2个参数，那么第二个map参数呢？这个方法解决不了。</li>\n<li>代码是同步模式，可以解决直接 <code>return</code> 的单参数问题： <code>this.callback(null, ret, null)</code> 。第一个参数不详，第二个为处理后的代码，第三个参数为map。</li>\n<li>代码是异步模式，首先需要在同步代码中，调用 <code>var cb = this.async()</code> 。之后就可以在异步中调用 <code>cb()</code> 了。参数和同步模式一样的。</li>\n</ul>\n<p>上面的例子，为异步模式，意思为延时两秒后，进行回调。</p>\n<p>这个看懂之后，就好办了。我们来写<code>./strict-loader.js</code>文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'====进入strict模块===='</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( source);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'======================'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'\\'use strict\\';\\n'</span> + source;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这个就不解释了。</p>\n<p>最终，我们执行webpack，首先看看终端中的显示内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">====进入comment模块====</span><br><span class=\"line\">var someComponent = require(&apos;./some-component&apos;);</span><br><span class=\"line\">var foo = function () &#123;</span><br><span class=\"line\">    console.log(&apos;hi&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo();</span><br><span class=\"line\">someComponent();</span><br><span class=\"line\">======================</span><br><span class=\"line\">====进入strict模块====</span><br><span class=\"line\"></span><br><span class=\"line\">//--------main.js v1.0--------</span><br><span class=\"line\">var someComponent = require(&apos;./some-component&apos;);</span><br><span class=\"line\">var foo = function () &#123;</span><br><span class=\"line\">    console.log(&apos;hi&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo();</span><br><span class=\"line\">someComponent();</span><br><span class=\"line\">//------------------------</span><br><span class=\"line\">======================</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">====进入comment模块====</span><br><span class=\"line\">module.exports = function()&#123;</span><br><span class=\"line\">    console.log(&apos;this is some-component&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">======================</span><br><span class=\"line\">====进入strict模块====</span><br><span class=\"line\"></span><br><span class=\"line\">//--------some-component.js v1.0--------</span><br><span class=\"line\">module.exports = function()&#123;</span><br><span class=\"line\">    console.log(&apos;this is some-component&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//------------------------</span><br><span class=\"line\">======================</span><br></pre></td></tr></table></figure>\n\n<p>可以很清晰的看到，从入口开始，遇到一个符合条件的文件，开始进入loader处理。首先将源码带入 <code>comment-loader</code> ，之后将输出的代码带入 <code>strict-loader</code>。这样完成一个文件之后，在进行下一个文件。</p>\n<p>再看看最终生成的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/******/</span> ([</span><br><span class=\"line\"><span class=\"comment\">/* 0 */</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">\t'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//--------main.js v1.0--------</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> someComponent = __webpack_require__(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hi'</span>);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tfoo();</span><br><span class=\"line\">\tsomeComponent();</span><br><span class=\"line\">\t<span class=\"comment\">//------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;,</span><br><span class=\"line\"><span class=\"comment\">/* 1 */</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">\t'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//--------some-component.js v1.0--------</span></span><br><span class=\"line\">\t<span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is some-component'</span>);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">//------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> ]);</span><br></pre></td></tr></table></figure>\n\n<p>也是非常符合预期的。每个代码模块标有文件名和版本号，最上面还有严格模式标签。</p>\n<p>完成。</p>"},{"layout":"post","title":"JS的__proto__ prototype constructor理解","date":"2017-02-26T23:51:00.000Z","_content":"\nJavascript 下的 `__proto__` `prototype` `constructor`，我一直都很困惑。\n\n看过了一些文章，加上自己粗浅的理解，整理如下。\n\n<!-- more -->\n\n首先，要想明白这三个对象的含义，就需要先知道JS的类型。这里简单说下：\n\n```js\n// js的五个基本类型（值类型）和对象类型（引用类型）\n// typeof 的结果\n\nvar str = 'asdf'; // string\n\nvar num = 1234; // number\n\nvar bool = true; // boolean（但是有constructor）\n\nvar nullObj = null; // object\n\nvar undefinedObj = undefined; // undefined\n\nvar obj = {}; // object\n\n// 对象类型种类非常多，比如object / array / function等。\n\n// 唯独，这三个比较特殊，一般也没人这么写，暂时忽略\n// 这种写法仅仅是给值类型的数据包裹了一层而已\nvar str2 = new String('asdf') // object\nvar num2 = new Number(1234) // object\nvar bool2 = new Boolean(true); // object\n```\n\n## 先来聊一聊 原型 `__proto__`\n\n首先呢，这个东西，是现代浏览器才能看到的，比如chrome的devtools。但是这个概念是一直有的，只不过老的浏览器禁止查看而已。\n\n要想好好解释，那就说来话长。我还是简短的说吧。\n\n一开始没有对象，只有 `null` 类型，后来在 `null` 基础上扩展出了 `object` 类型。再后来，有了 `function` 等类型。\n\n**可以说，每个对象都有 `__proto__`，他就是指向自己的直接父辈。**\n\n来看张图：\n\n![image](https://cdn0.yukapril.com/blog/2017-02-26-javascript-proto.png-wm.black)\n\n对象 `obj` 的父辈是 `Object`，对象 `arr` 的父辈是 `Array`。\n\n可以写作\n\n```js\nvar obj = {};\nvar arr = [];\nobj.__proto__ === Object.prototype\narr.__proto__ === Array.prototype\n\nArray.__proto__ === Object\n```\n\n这里为什么不是 `obj.__proto__ === Object` 呢？`Object` 是个构造函数，它的操作方法都放在 `prototype` 原型对象上。下文会说到。\n\n而且：\n\n```js\narr.__proto__ === Array.prototype\nArray.prototype.__proto__ === Object.prototype\nObject.prototype.__proto__ === null\n\n// 综上，可以为\narr.__proto__.__proto__.__proto__ === null \n```\n\n这样，一层一层的往自己的父辈上找原型，就是原型链了。\n\n由于 `__proto__` 是个内部方法，所以其实不必太在意，知道有这个东西就行了。\n\n这玩意除了别人考你 new关键字的原理时候会用到，其他时候我没注意有啥用途。\n\n```js\nfunction New (f) { \n    var n = {};\n    n.__proto__ = f.prototype;\n    return function () { \n        f.apply(n, arguments); \n        return n; \n   }; \n}\n```\n\n**当然，你应该知道，js一切皆对象，所以创建的一切变量（也就是一切都是对象）都是有 `__proto__` 的，`null` 除外。**\n\n## 再聊一聊 原型对象 `prototype`\n\n这个应该最常见。比如ES5代码中：\n\n```js\nfunction Person (){}\nPerson.prototype.canSpeak = true;\n\nvar p = new Person();\nconsole.log(p.canSpeak); // true\n```\n\n这里面有几个重要的点：\n* `Person` 是函数，准确地讲，是构造函数。直白一点，这个函数最终主要使用方法是 `new Person` 这种形式。\n* 绑定的 `canSpeak` 方法，可以是函数，也可以直接是字面量（字符串/数字等），这个无所谓。\n* 由于`canSpeak`绑定在 `prototype` 上，所以必须要实例化（`var p = new Person()`），`p` 就是实例化后的对象。\n* 实例化的 `p`，是对象。它绝对不是函数！\n\n在有一个`Person`构造函数上，我们在它的原型对象上（`prototype`）绑有一个`canSpeak`方法，结果他的实例化对象就有了这个方法。原因就是上文的new原理。\n\n我们查看下这个对象的结构：\n\n![image](https://cdn0.yukapril.com/blog/2017-02-26-javascript-prototype.png-wm.black)\n\n当我们访问 `p.canSpeak`时候，由于对象上本身没有 `canSpeak` 方法，就去它的原型去找此方法。说白了，自己没有，就去看看父辈那里有没有这种方法。\n\n这里有一个有意思的实验：\n\n```js\nfunction Person (){}\nPerson.prototype.canSpeak = true;\n\nvar p = new Person();\np.canSpeak = 123;\n\nconsole.log(p.canSpeak); // 123\n```\n\n我们看看它的结果：\n\n![image](https://cdn0.yukapril.com/blog/2017-02-26-javascript-prototype2.png-wm.black)\n\n这就说明了，如果自己本身有这个方法，是不会去父辈（原型链）那里寻找的。\n\n**小结**\n\n* 只有函数（function）才会有原型对象 `prototype`\n* 一个函数，当做构造函数被new之后，每个实例都可以使用原型对象的方法，`prototype` 相当于共享方法。\n* 如果我们想生成一些对象，默认每个对象都拥有一些相同的方法，就可以创建构造函数，然后实例化的对象就是我们想要的东西。\n\n在ES6里面，构造函数有了新的定义方法：\n\n```js\nclass Person{\n    constructor(){}\n    canSpeak(){\n        return 'yes';\n    };\n}\n\nvar p = new Person();\nconsole.log(p.canSpeak());\n```\n\n不过，我不太清楚如何想上面一样定义返回普通值的方法，而不是现在ES6中的函数。\n\n\n## 最后提一提 构造器 `constructor`\n\n先来说普通对象（万物皆对象）\n\n```js\nvar str = 'abc';\n\nstr.prototype; //是不存在的，prototype存在于构造函数中\nstr.__proto__ === String.prototype; // 字符串的父辈是String\n\nString.prototype.constructor === String;\n// 即\nstr.__proto__.constructor === String; \n// 每个构造函数，其prototype中，constructor是指向自己的\n\n// 同时有\nstr.__proto__.constructor === str.constructor;\n// 即\nstr.constructor === String;\n```\n\n它存在于 `.__proto__.constructor` 下。因为他的 `__proto__` 是 `父辈.prototype` ，相当于父辈是构造函数。（当然，你也可以直接通过 `.constructor`  访问到，因为自己找不到就会到原型中找啊~）\n\n再来说构造函数\n\n```js\nvar Foo = function(){};\nFoo.prototype.bar = function(){};\nFoo.prototype.constructor === Foo; //  每个构造函数，其prototype中，constructor是指向自己的\n\n// 同时有\nFoo.__proto__ === Function.prototype;\nFoo.__proto__.constructor === Function; // Foo的原型是Function，所以其原型的constructor是Function\n\n// 再来看看构造函数的实例，和普通对象没区别\nvar f = new Foo();\nf.prototype; //是不存在的，prototype存在于构造函数中\nf.__proto__ ===Foo.prototype;\nf.__proto__.constructor === Foo;\n```\n\n看到这里，我们得到结论，所有构造函数，自己的 `prototype`中，除了我们定义的原型对象外，还有一个隐藏的 `constructor`，他不是通过其 `__proto__`得到的，而是真真正正自己的。而且 `constructor` 指向自己。\n\n**小结**\n* `constructor` 是构造函数特有的东西。\n* 构造函数本身自己的 `prototype` 中要有一个`constructor`，这样自己的实例才能指向到构造函数本身。\n* 所有对象，都是被父辈构造函数实例化出来的，所以他们`.__proto__.constructor`指向父辈。\n* **“`constructor`指向自己” —— 很关键，js实现继承的时候，需要提到。**\n\n\n## 说一下js的继承\n\n在ES6之前，没有class extend方法，只能使用ES5的 `Object.create` 方法，或者下文：\n\n```js\nfunction extend(Child, Parent) {\n    var F = function () {}; \n    \n    F.prototype = Parent.prototype; \n    \n    Child.prototype = new F();\n    \n    Child.prototype.constructor ===Child;\n    \n    Child.uber = Parent.prototype;\n    // 这句话写不写无所谓，给Child构造函数增加一个静态方法，指向父辈原型对象，纯粹为了使用方便而已，不影响继承\n}\n```\n\n解释下：\n\n```js\nvar F = function () {}; \n```\n\n创建一个新的构造函数，下文可以使用。\n\n```js\nF.prototype = Parent.prototype; \n```\n把F构造函数的原型对象指向父辈原型对象，相当于把父辈的共享方法拷贝过来。\n\n这样通过 new Foo() 的实例，才会具有父辈的共享方法。\n\n```js\nChild.prototype = new F();\n```\n\n为了好说明，我们先定义 f，这样看的清晰：\n\n```js\nvar f = new F(); \nChild.prototype = f;\n```\n\n此时有：`f.__proto__ === F.prototype`\n\n但是 `f.__proto__.constructor !== F`，\n\n因为 `F.prototype = Parent.prototype`，\n\n所以 `f.__proto__.constructor === Parent`。\n\n综合一下，本处的结果是：\n\n```js\nChild.prototype = f;\nChild.prototype.__proto__ === F.prototype;\nChild.prototype.__proto__.constructor === Parent;\n```\n\n也就是说，经过本函数传入的Child只能是空构造函数  `function(){...}`，绝对不能带有原定对象内容。\n\n因为如果进入本函数前定义了其原型对象 `Child.prototype.testChild = function(){}`，经过本函数后，原型对象也会被覆盖！\n\n既然被覆盖，那么Child.prototype里面没有任何内容，\n\n此时 `Child.prototype.constructor` 也就指向了  `Child.prototype.__proto__.constructor`\n\n即：`Child.prototype.constructor === Parent`。\n\n**晕，Child的构造器指向了Parent，这是问题！**\n\n所以继承函数中，应该有这一行代码：\n\n```js\nChild.prototype.constructor === Child;\n```\n\n我们必须修正下构造器指向。\n\n分析结束。\n\n我们测试下：\n\n```js\nvar Parent = function(){};\nParent.prototype.running = function(){}; // 父亲会跑步\nParent.prototype.swiming = function(){}; // 父亲会游泳\n\nvar Child = function(){};\nChild.prototype.pingpong = function(){}; //孩子会乒乓球\n\nextend(Child,Parent);\n\n\nvar xiaoming = new Child();\nxiaoming.running();\nxiaoming.swiming();\nxiaoming.pingpong(); // TypeError，Child没有pingpong方法\n```\n\n我们先定义父亲和孩子两个构造函数，并赋予他们不同的能力，经过继承后，结果孩子的能力消失了！因为在继承前，子类任何原型对象均会被覆盖！\n\n所以一定要在继承后，在添加原型对象：\n\n```js\nvar Parent = function(){};\nParent.prototype.running = function(){}; // 父亲会跑步\nParent.prototype.swiming = function(){}; // 父亲会游泳\n\nvar Child = function(){};\n\nextend(Child,Parent);\n\nChild.prototype.pingpong = function(){}; //孩子会乒乓球\n\n\nvar xiaohua = new Child();\nxiaohua.running();\nxiaohua.swiming();\nxiaohua.pingpong(); \n```\n\n== 本文完 ==","source":"_posts/2017/2017-02-26-js-prototype.md","raw":"---\nlayout: post\ntitle: \"JS的__proto__ prototype constructor理解\"\ndate: 2017-02-26 23:51:00 GMT+0000\ncategories: [前端]\ntags:  [js, proto, prototype, constructor]\n---\n\nJavascript 下的 `__proto__` `prototype` `constructor`，我一直都很困惑。\n\n看过了一些文章，加上自己粗浅的理解，整理如下。\n\n<!-- more -->\n\n首先，要想明白这三个对象的含义，就需要先知道JS的类型。这里简单说下：\n\n```js\n// js的五个基本类型（值类型）和对象类型（引用类型）\n// typeof 的结果\n\nvar str = 'asdf'; // string\n\nvar num = 1234; // number\n\nvar bool = true; // boolean（但是有constructor）\n\nvar nullObj = null; // object\n\nvar undefinedObj = undefined; // undefined\n\nvar obj = {}; // object\n\n// 对象类型种类非常多，比如object / array / function等。\n\n// 唯独，这三个比较特殊，一般也没人这么写，暂时忽略\n// 这种写法仅仅是给值类型的数据包裹了一层而已\nvar str2 = new String('asdf') // object\nvar num2 = new Number(1234) // object\nvar bool2 = new Boolean(true); // object\n```\n\n## 先来聊一聊 原型 `__proto__`\n\n首先呢，这个东西，是现代浏览器才能看到的，比如chrome的devtools。但是这个概念是一直有的，只不过老的浏览器禁止查看而已。\n\n要想好好解释，那就说来话长。我还是简短的说吧。\n\n一开始没有对象，只有 `null` 类型，后来在 `null` 基础上扩展出了 `object` 类型。再后来，有了 `function` 等类型。\n\n**可以说，每个对象都有 `__proto__`，他就是指向自己的直接父辈。**\n\n来看张图：\n\n![image](https://cdn0.yukapril.com/blog/2017-02-26-javascript-proto.png-wm.black)\n\n对象 `obj` 的父辈是 `Object`，对象 `arr` 的父辈是 `Array`。\n\n可以写作\n\n```js\nvar obj = {};\nvar arr = [];\nobj.__proto__ === Object.prototype\narr.__proto__ === Array.prototype\n\nArray.__proto__ === Object\n```\n\n这里为什么不是 `obj.__proto__ === Object` 呢？`Object` 是个构造函数，它的操作方法都放在 `prototype` 原型对象上。下文会说到。\n\n而且：\n\n```js\narr.__proto__ === Array.prototype\nArray.prototype.__proto__ === Object.prototype\nObject.prototype.__proto__ === null\n\n// 综上，可以为\narr.__proto__.__proto__.__proto__ === null \n```\n\n这样，一层一层的往自己的父辈上找原型，就是原型链了。\n\n由于 `__proto__` 是个内部方法，所以其实不必太在意，知道有这个东西就行了。\n\n这玩意除了别人考你 new关键字的原理时候会用到，其他时候我没注意有啥用途。\n\n```js\nfunction New (f) { \n    var n = {};\n    n.__proto__ = f.prototype;\n    return function () { \n        f.apply(n, arguments); \n        return n; \n   }; \n}\n```\n\n**当然，你应该知道，js一切皆对象，所以创建的一切变量（也就是一切都是对象）都是有 `__proto__` 的，`null` 除外。**\n\n## 再聊一聊 原型对象 `prototype`\n\n这个应该最常见。比如ES5代码中：\n\n```js\nfunction Person (){}\nPerson.prototype.canSpeak = true;\n\nvar p = new Person();\nconsole.log(p.canSpeak); // true\n```\n\n这里面有几个重要的点：\n* `Person` 是函数，准确地讲，是构造函数。直白一点，这个函数最终主要使用方法是 `new Person` 这种形式。\n* 绑定的 `canSpeak` 方法，可以是函数，也可以直接是字面量（字符串/数字等），这个无所谓。\n* 由于`canSpeak`绑定在 `prototype` 上，所以必须要实例化（`var p = new Person()`），`p` 就是实例化后的对象。\n* 实例化的 `p`，是对象。它绝对不是函数！\n\n在有一个`Person`构造函数上，我们在它的原型对象上（`prototype`）绑有一个`canSpeak`方法，结果他的实例化对象就有了这个方法。原因就是上文的new原理。\n\n我们查看下这个对象的结构：\n\n![image](https://cdn0.yukapril.com/blog/2017-02-26-javascript-prototype.png-wm.black)\n\n当我们访问 `p.canSpeak`时候，由于对象上本身没有 `canSpeak` 方法，就去它的原型去找此方法。说白了，自己没有，就去看看父辈那里有没有这种方法。\n\n这里有一个有意思的实验：\n\n```js\nfunction Person (){}\nPerson.prototype.canSpeak = true;\n\nvar p = new Person();\np.canSpeak = 123;\n\nconsole.log(p.canSpeak); // 123\n```\n\n我们看看它的结果：\n\n![image](https://cdn0.yukapril.com/blog/2017-02-26-javascript-prototype2.png-wm.black)\n\n这就说明了，如果自己本身有这个方法，是不会去父辈（原型链）那里寻找的。\n\n**小结**\n\n* 只有函数（function）才会有原型对象 `prototype`\n* 一个函数，当做构造函数被new之后，每个实例都可以使用原型对象的方法，`prototype` 相当于共享方法。\n* 如果我们想生成一些对象，默认每个对象都拥有一些相同的方法，就可以创建构造函数，然后实例化的对象就是我们想要的东西。\n\n在ES6里面，构造函数有了新的定义方法：\n\n```js\nclass Person{\n    constructor(){}\n    canSpeak(){\n        return 'yes';\n    };\n}\n\nvar p = new Person();\nconsole.log(p.canSpeak());\n```\n\n不过，我不太清楚如何想上面一样定义返回普通值的方法，而不是现在ES6中的函数。\n\n\n## 最后提一提 构造器 `constructor`\n\n先来说普通对象（万物皆对象）\n\n```js\nvar str = 'abc';\n\nstr.prototype; //是不存在的，prototype存在于构造函数中\nstr.__proto__ === String.prototype; // 字符串的父辈是String\n\nString.prototype.constructor === String;\n// 即\nstr.__proto__.constructor === String; \n// 每个构造函数，其prototype中，constructor是指向自己的\n\n// 同时有\nstr.__proto__.constructor === str.constructor;\n// 即\nstr.constructor === String;\n```\n\n它存在于 `.__proto__.constructor` 下。因为他的 `__proto__` 是 `父辈.prototype` ，相当于父辈是构造函数。（当然，你也可以直接通过 `.constructor`  访问到，因为自己找不到就会到原型中找啊~）\n\n再来说构造函数\n\n```js\nvar Foo = function(){};\nFoo.prototype.bar = function(){};\nFoo.prototype.constructor === Foo; //  每个构造函数，其prototype中，constructor是指向自己的\n\n// 同时有\nFoo.__proto__ === Function.prototype;\nFoo.__proto__.constructor === Function; // Foo的原型是Function，所以其原型的constructor是Function\n\n// 再来看看构造函数的实例，和普通对象没区别\nvar f = new Foo();\nf.prototype; //是不存在的，prototype存在于构造函数中\nf.__proto__ ===Foo.prototype;\nf.__proto__.constructor === Foo;\n```\n\n看到这里，我们得到结论，所有构造函数，自己的 `prototype`中，除了我们定义的原型对象外，还有一个隐藏的 `constructor`，他不是通过其 `__proto__`得到的，而是真真正正自己的。而且 `constructor` 指向自己。\n\n**小结**\n* `constructor` 是构造函数特有的东西。\n* 构造函数本身自己的 `prototype` 中要有一个`constructor`，这样自己的实例才能指向到构造函数本身。\n* 所有对象，都是被父辈构造函数实例化出来的，所以他们`.__proto__.constructor`指向父辈。\n* **“`constructor`指向自己” —— 很关键，js实现继承的时候，需要提到。**\n\n\n## 说一下js的继承\n\n在ES6之前，没有class extend方法，只能使用ES5的 `Object.create` 方法，或者下文：\n\n```js\nfunction extend(Child, Parent) {\n    var F = function () {}; \n    \n    F.prototype = Parent.prototype; \n    \n    Child.prototype = new F();\n    \n    Child.prototype.constructor ===Child;\n    \n    Child.uber = Parent.prototype;\n    // 这句话写不写无所谓，给Child构造函数增加一个静态方法，指向父辈原型对象，纯粹为了使用方便而已，不影响继承\n}\n```\n\n解释下：\n\n```js\nvar F = function () {}; \n```\n\n创建一个新的构造函数，下文可以使用。\n\n```js\nF.prototype = Parent.prototype; \n```\n把F构造函数的原型对象指向父辈原型对象，相当于把父辈的共享方法拷贝过来。\n\n这样通过 new Foo() 的实例，才会具有父辈的共享方法。\n\n```js\nChild.prototype = new F();\n```\n\n为了好说明，我们先定义 f，这样看的清晰：\n\n```js\nvar f = new F(); \nChild.prototype = f;\n```\n\n此时有：`f.__proto__ === F.prototype`\n\n但是 `f.__proto__.constructor !== F`，\n\n因为 `F.prototype = Parent.prototype`，\n\n所以 `f.__proto__.constructor === Parent`。\n\n综合一下，本处的结果是：\n\n```js\nChild.prototype = f;\nChild.prototype.__proto__ === F.prototype;\nChild.prototype.__proto__.constructor === Parent;\n```\n\n也就是说，经过本函数传入的Child只能是空构造函数  `function(){...}`，绝对不能带有原定对象内容。\n\n因为如果进入本函数前定义了其原型对象 `Child.prototype.testChild = function(){}`，经过本函数后，原型对象也会被覆盖！\n\n既然被覆盖，那么Child.prototype里面没有任何内容，\n\n此时 `Child.prototype.constructor` 也就指向了  `Child.prototype.__proto__.constructor`\n\n即：`Child.prototype.constructor === Parent`。\n\n**晕，Child的构造器指向了Parent，这是问题！**\n\n所以继承函数中，应该有这一行代码：\n\n```js\nChild.prototype.constructor === Child;\n```\n\n我们必须修正下构造器指向。\n\n分析结束。\n\n我们测试下：\n\n```js\nvar Parent = function(){};\nParent.prototype.running = function(){}; // 父亲会跑步\nParent.prototype.swiming = function(){}; // 父亲会游泳\n\nvar Child = function(){};\nChild.prototype.pingpong = function(){}; //孩子会乒乓球\n\nextend(Child,Parent);\n\n\nvar xiaoming = new Child();\nxiaoming.running();\nxiaoming.swiming();\nxiaoming.pingpong(); // TypeError，Child没有pingpong方法\n```\n\n我们先定义父亲和孩子两个构造函数，并赋予他们不同的能力，经过继承后，结果孩子的能力消失了！因为在继承前，子类任何原型对象均会被覆盖！\n\n所以一定要在继承后，在添加原型对象：\n\n```js\nvar Parent = function(){};\nParent.prototype.running = function(){}; // 父亲会跑步\nParent.prototype.swiming = function(){}; // 父亲会游泳\n\nvar Child = function(){};\n\nextend(Child,Parent);\n\nChild.prototype.pingpong = function(){}; //孩子会乒乓球\n\n\nvar xiaohua = new Child();\nxiaohua.running();\nxiaohua.swiming();\nxiaohua.pingpong(); \n```\n\n== 本文完 ==","slug":"2017-2017-02-26-js-prototype","published":1,"updated":"2019-07-18T17:19:07.208Z","comments":1,"photos":[],"link":"","_id":"cjy8y72ux00bys21d9knu5379","content":"<p>Javascript 下的 <code>__proto__</code> <code>prototype</code> <code>constructor</code>，我一直都很困惑。</p>\n<p>看过了一些文章，加上自己粗浅的理解，整理如下。</p>\n<a id=\"more\"></a>\n\n<p>首先，要想明白这三个对象的含义，就需要先知道JS的类型。这里简单说下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js的五个基本类型（值类型）和对象类型（引用类型）</span></span><br><span class=\"line\"><span class=\"comment\">// typeof 的结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'asdf'</span>; <span class=\"comment\">// string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">1234</span>; <span class=\"comment\">// number</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bool = <span class=\"literal\">true</span>; <span class=\"comment\">// boolean（但是有constructor）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nullObj = <span class=\"literal\">null</span>; <span class=\"comment\">// object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> undefinedObj = <span class=\"literal\">undefined</span>; <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;; <span class=\"comment\">// object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对象类型种类非常多，比如object / array / function等。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 唯独，这三个比较特殊，一般也没人这么写，暂时忽略</span></span><br><span class=\"line\"><span class=\"comment\">// 这种写法仅仅是给值类型的数据包裹了一层而已</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'asdf'</span>) <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">1234</span>) <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bool2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>(<span class=\"literal\">true</span>); <span class=\"comment\">// object</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"先来聊一聊-原型-proto\"><a href=\"#先来聊一聊-原型-proto\" class=\"headerlink\" title=\"先来聊一聊 原型 __proto__\"></a>先来聊一聊 原型 <code>__proto__</code></h2><p>首先呢，这个东西，是现代浏览器才能看到的，比如chrome的devtools。但是这个概念是一直有的，只不过老的浏览器禁止查看而已。</p>\n<p>要想好好解释，那就说来话长。我还是简短的说吧。</p>\n<p>一开始没有对象，只有 <code>null</code> 类型，后来在 <code>null</code> 基础上扩展出了 <code>object</code> 类型。再后来，有了 <code>function</code> 等类型。</p>\n<p><strong>可以说，每个对象都有 <code>__proto__</code>，他就是指向自己的直接父辈。</strong></p>\n<p>来看张图：</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-02-26-javascript-proto.png-wm.black\" alt=\"image\"></p>\n<p>对象 <code>obj</code> 的父辈是 <code>Object</code>，对象 <code>arr</code> 的父辈是 <code>Array</code>。</p>\n<p>可以写作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">obj.__proto__ === <span class=\"built_in\">Object</span>.prototype</span><br><span class=\"line\">arr.__proto__ === <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.__proto__ === <span class=\"built_in\">Object</span></span><br></pre></td></tr></table></figure>\n\n<p>这里为什么不是 <code>obj.__proto__ === Object</code> 呢？<code>Object</code> 是个构造函数，它的操作方法都放在 <code>prototype</code> 原型对象上。下文会说到。</p>\n<p>而且：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.__proto__ === <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.__proto__ === <span class=\"built_in\">Object</span>.prototype</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.__proto__ === <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 综上，可以为</span></span><br><span class=\"line\">arr.__proto__.__proto__.__proto__ === <span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n\n<p>这样，一层一层的往自己的父辈上找原型，就是原型链了。</p>\n<p>由于 <code>__proto__</code> 是个内部方法，所以其实不必太在意，知道有这个东西就行了。</p>\n<p>这玩意除了别人考你 new关键字的原理时候会用到，其他时候我没注意有啥用途。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">New</span> (<span class=\"params\">f</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = &#123;&#125;;</span><br><span class=\"line\">    n.__proto__ = f.prototype;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">        f.apply(n, <span class=\"built_in\">arguments</span>); </span><br><span class=\"line\">        <span class=\"keyword\">return</span> n; </span><br><span class=\"line\">   &#125;; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>当然，你应该知道，js一切皆对象，所以创建的一切变量（也就是一切都是对象）都是有 <code>__proto__</code> 的，<code>null</code> 除外。</strong></p>\n<h2 id=\"再聊一聊-原型对象-prototype\"><a href=\"#再聊一聊-原型对象-prototype\" class=\"headerlink\" title=\"再聊一聊 原型对象 prototype\"></a>再聊一聊 原型对象 <code>prototype</code></h2><p>这个应该最常见。比如ES5代码中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">Person.prototype.canSpeak = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.canSpeak); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>这里面有几个重要的点：</p>\n<ul>\n<li><code>Person</code> 是函数，准确地讲，是构造函数。直白一点，这个函数最终主要使用方法是 <code>new Person</code> 这种形式。</li>\n<li>绑定的 <code>canSpeak</code> 方法，可以是函数，也可以直接是字面量（字符串/数字等），这个无所谓。</li>\n<li>由于<code>canSpeak</code>绑定在 <code>prototype</code> 上，所以必须要实例化（<code>var p = new Person()</code>），<code>p</code> 就是实例化后的对象。</li>\n<li>实例化的 <code>p</code>，是对象。它绝对不是函数！</li>\n</ul>\n<p>在有一个<code>Person</code>构造函数上，我们在它的原型对象上（<code>prototype</code>）绑有一个<code>canSpeak</code>方法，结果他的实例化对象就有了这个方法。原因就是上文的new原理。</p>\n<p>我们查看下这个对象的结构：</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-02-26-javascript-prototype.png-wm.black\" alt=\"image\"></p>\n<p>当我们访问 <code>p.canSpeak</code>时候，由于对象上本身没有 <code>canSpeak</code> 方法，就去它的原型去找此方法。说白了，自己没有，就去看看父辈那里有没有这种方法。</p>\n<p>这里有一个有意思的实验：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">Person.prototype.canSpeak = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">p.canSpeak = <span class=\"number\">123</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.canSpeak); <span class=\"comment\">// 123</span></span><br></pre></td></tr></table></figure>\n\n<p>我们看看它的结果：</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-02-26-javascript-prototype2.png-wm.black\" alt=\"image\"></p>\n<p>这就说明了，如果自己本身有这个方法，是不会去父辈（原型链）那里寻找的。</p>\n<p><strong>小结</strong></p>\n<ul>\n<li>只有函数（function）才会有原型对象 <code>prototype</code></li>\n<li>一个函数，当做构造函数被new之后，每个实例都可以使用原型对象的方法，<code>prototype</code> 相当于共享方法。</li>\n<li>如果我们想生成一些对象，默认每个对象都拥有一些相同的方法，就可以创建构造函数，然后实例化的对象就是我们想要的东西。</li>\n</ul>\n<p>在ES6里面，构造函数有了新的定义方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;&#125;</span><br><span class=\"line\">    canSpeak()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'yes'</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.canSpeak());</span><br></pre></td></tr></table></figure>\n\n<p>不过，我不太清楚如何想上面一样定义返回普通值的方法，而不是现在ES6中的函数。</p>\n<h2 id=\"最后提一提-构造器-constructor\"><a href=\"#最后提一提-构造器-constructor\" class=\"headerlink\" title=\"最后提一提 构造器 constructor\"></a>最后提一提 构造器 <code>constructor</code></h2><p>先来说普通对象（万物皆对象）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'abc'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">str.prototype; <span class=\"comment\">//是不存在的，prototype存在于构造函数中</span></span><br><span class=\"line\">str.__proto__ === <span class=\"built_in\">String</span>.prototype; <span class=\"comment\">// 字符串的父辈是String</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">String</span>.prototype.constructor === <span class=\"built_in\">String</span>;</span><br><span class=\"line\"><span class=\"comment\">// 即</span></span><br><span class=\"line\">str.__proto__.constructor === <span class=\"built_in\">String</span>; </span><br><span class=\"line\"><span class=\"comment\">// 每个构造函数，其prototype中，constructor是指向自己的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 同时有</span></span><br><span class=\"line\">str.__proto__.constructor === str.constructor;</span><br><span class=\"line\"><span class=\"comment\">// 即</span></span><br><span class=\"line\">str.constructor === <span class=\"built_in\">String</span>;</span><br></pre></td></tr></table></figure>\n\n<p>它存在于 <code>.__proto__.constructor</code> 下。因为他的 <code>__proto__</code> 是 <code>父辈.prototype</code> ，相当于父辈是构造函数。（当然，你也可以直接通过 <code>.constructor</code>  访问到，因为自己找不到就会到原型中找啊~）</p>\n<p>再来说构造函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Foo.prototype.bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Foo.prototype.constructor === Foo; <span class=\"comment\">//  每个构造函数，其prototype中，constructor是指向自己的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 同时有</span></span><br><span class=\"line\">Foo.__proto__ === <span class=\"built_in\">Function</span>.prototype;</span><br><span class=\"line\">Foo.__proto__.constructor === <span class=\"built_in\">Function</span>; <span class=\"comment\">// Foo的原型是Function，所以其原型的constructor是Function</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 再来看看构造函数的实例，和普通对象没区别</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\">f.prototype; <span class=\"comment\">//是不存在的，prototype存在于构造函数中</span></span><br><span class=\"line\">f.__proto__ ===Foo.prototype;</span><br><span class=\"line\">f.__proto__.constructor === Foo;</span><br></pre></td></tr></table></figure>\n\n<p>看到这里，我们得到结论，所有构造函数，自己的 <code>prototype</code>中，除了我们定义的原型对象外，还有一个隐藏的 <code>constructor</code>，他不是通过其 <code>__proto__</code>得到的，而是真真正正自己的。而且 <code>constructor</code> 指向自己。</p>\n<p><strong>小结</strong></p>\n<ul>\n<li><code>constructor</code> 是构造函数特有的东西。</li>\n<li>构造函数本身自己的 <code>prototype</code> 中要有一个<code>constructor</code>，这样自己的实例才能指向到构造函数本身。</li>\n<li>所有对象，都是被父辈构造函数实例化出来的，所以他们<code>.__proto__.constructor</code>指向父辈。</li>\n<li><strong>“<code>constructor</code>指向自己” —— 很关键，js实现继承的时候，需要提到。</strong></li>\n</ul>\n<h2 id=\"说一下js的继承\"><a href=\"#说一下js的继承\" class=\"headerlink\" title=\"说一下js的继承\"></a>说一下js的继承</h2><p>在ES6之前，没有class extend方法，只能使用ES5的 <code>Object.create</code> 方法，或者下文：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extend</span>(<span class=\"params\">Child, Parent</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;; </span><br><span class=\"line\">    </span><br><span class=\"line\">    F.prototype = Parent.prototype; </span><br><span class=\"line\">    </span><br><span class=\"line\">    Child.prototype = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">    </span><br><span class=\"line\">    Child.prototype.constructor ===Child;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Child.uber = Parent.prototype;</span><br><span class=\"line\">    <span class=\"comment\">// 这句话写不写无所谓，给Child构造函数增加一个静态方法，指向父辈原型对象，纯粹为了使用方便而已，不影响继承</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解释下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>创建一个新的构造函数，下文可以使用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F.prototype = Parent.prototype;</span><br></pre></td></tr></table></figure>\n\n<p>把F构造函数的原型对象指向父辈原型对象，相当于把父辈的共享方法拷贝过来。</p>\n<p>这样通过 new Foo() 的实例，才会具有父辈的共享方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> F();</span><br></pre></td></tr></table></figure>\n\n<p>为了好说明，我们先定义 f，这样看的清晰：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> F(); </span><br><span class=\"line\">Child.prototype = f;</span><br></pre></td></tr></table></figure>\n\n<p>此时有：<code>f.__proto__ === F.prototype</code></p>\n<p>但是 <code>f.__proto__.constructor !== F</code>，</p>\n<p>因为 <code>F.prototype = Parent.prototype</code>，</p>\n<p>所以 <code>f.__proto__.constructor === Parent</code>。</p>\n<p>综合一下，本处的结果是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Child.prototype = f;</span><br><span class=\"line\">Child.prototype.__proto__ === F.prototype;</span><br><span class=\"line\">Child.prototype.__proto__.constructor === Parent;</span><br></pre></td></tr></table></figure>\n\n<p>也就是说，经过本函数传入的Child只能是空构造函数  <code>function(){...}</code>，绝对不能带有原定对象内容。</p>\n<p>因为如果进入本函数前定义了其原型对象 <code>Child.prototype.testChild = function(){}</code>，经过本函数后，原型对象也会被覆盖！</p>\n<p>既然被覆盖，那么Child.prototype里面没有任何内容，</p>\n<p>此时 <code>Child.prototype.constructor</code> 也就指向了  <code>Child.prototype.__proto__.constructor</code></p>\n<p>即：<code>Child.prototype.constructor === Parent</code>。</p>\n<p><strong>晕，Child的构造器指向了Parent，这是问题！</strong></p>\n<p>所以继承函数中，应该有这一行代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Child.prototype.constructor === Child;</span><br></pre></td></tr></table></figure>\n\n<p>我们必须修正下构造器指向。</p>\n<p>分析结束。</p>\n<p>我们测试下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Parent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Parent.prototype.running = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 父亲会跑步</span></span><br><span class=\"line\">Parent.prototype.swiming = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 父亲会游泳</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Child.prototype.pingpong = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">//孩子会乒乓球</span></span><br><span class=\"line\"></span><br><span class=\"line\">extend(Child,Parent);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xiaoming = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\">xiaoming.running();</span><br><span class=\"line\">xiaoming.swiming();</span><br><span class=\"line\">xiaoming.pingpong(); <span class=\"comment\">// TypeError，Child没有pingpong方法</span></span><br></pre></td></tr></table></figure>\n\n<p>我们先定义父亲和孩子两个构造函数，并赋予他们不同的能力，经过继承后，结果孩子的能力消失了！因为在继承前，子类任何原型对象均会被覆盖！</p>\n<p>所以一定要在继承后，在添加原型对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Parent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Parent.prototype.running = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 父亲会跑步</span></span><br><span class=\"line\">Parent.prototype.swiming = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 父亲会游泳</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">extend(Child,Parent);</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype.pingpong = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">//孩子会乒乓球</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xiaohua = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\">xiaohua.running();</span><br><span class=\"line\">xiaohua.swiming();</span><br><span class=\"line\">xiaohua.pingpong();</span><br></pre></td></tr></table></figure>\n\n<p>== 本文完 ==</p>\n","site":{"data":{}},"excerpt":"<p>Javascript 下的 <code>__proto__</code> <code>prototype</code> <code>constructor</code>，我一直都很困惑。</p>\n<p>看过了一些文章，加上自己粗浅的理解，整理如下。</p>","more":"<p>首先，要想明白这三个对象的含义，就需要先知道JS的类型。这里简单说下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js的五个基本类型（值类型）和对象类型（引用类型）</span></span><br><span class=\"line\"><span class=\"comment\">// typeof 的结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'asdf'</span>; <span class=\"comment\">// string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">1234</span>; <span class=\"comment\">// number</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bool = <span class=\"literal\">true</span>; <span class=\"comment\">// boolean（但是有constructor）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nullObj = <span class=\"literal\">null</span>; <span class=\"comment\">// object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> undefinedObj = <span class=\"literal\">undefined</span>; <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;; <span class=\"comment\">// object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对象类型种类非常多，比如object / array / function等。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 唯独，这三个比较特殊，一般也没人这么写，暂时忽略</span></span><br><span class=\"line\"><span class=\"comment\">// 这种写法仅仅是给值类型的数据包裹了一层而已</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'asdf'</span>) <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">1234</span>) <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bool2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>(<span class=\"literal\">true</span>); <span class=\"comment\">// object</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"先来聊一聊-原型-proto\"><a href=\"#先来聊一聊-原型-proto\" class=\"headerlink\" title=\"先来聊一聊 原型 __proto__\"></a>先来聊一聊 原型 <code>__proto__</code></h2><p>首先呢，这个东西，是现代浏览器才能看到的，比如chrome的devtools。但是这个概念是一直有的，只不过老的浏览器禁止查看而已。</p>\n<p>要想好好解释，那就说来话长。我还是简短的说吧。</p>\n<p>一开始没有对象，只有 <code>null</code> 类型，后来在 <code>null</code> 基础上扩展出了 <code>object</code> 类型。再后来，有了 <code>function</code> 等类型。</p>\n<p><strong>可以说，每个对象都有 <code>__proto__</code>，他就是指向自己的直接父辈。</strong></p>\n<p>来看张图：</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-02-26-javascript-proto.png-wm.black\" alt=\"image\"></p>\n<p>对象 <code>obj</code> 的父辈是 <code>Object</code>，对象 <code>arr</code> 的父辈是 <code>Array</code>。</p>\n<p>可以写作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">obj.__proto__ === <span class=\"built_in\">Object</span>.prototype</span><br><span class=\"line\">arr.__proto__ === <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.__proto__ === <span class=\"built_in\">Object</span></span><br></pre></td></tr></table></figure>\n\n<p>这里为什么不是 <code>obj.__proto__ === Object</code> 呢？<code>Object</code> 是个构造函数，它的操作方法都放在 <code>prototype</code> 原型对象上。下文会说到。</p>\n<p>而且：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.__proto__ === <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.__proto__ === <span class=\"built_in\">Object</span>.prototype</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.__proto__ === <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 综上，可以为</span></span><br><span class=\"line\">arr.__proto__.__proto__.__proto__ === <span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n\n<p>这样，一层一层的往自己的父辈上找原型，就是原型链了。</p>\n<p>由于 <code>__proto__</code> 是个内部方法，所以其实不必太在意，知道有这个东西就行了。</p>\n<p>这玩意除了别人考你 new关键字的原理时候会用到，其他时候我没注意有啥用途。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">New</span> (<span class=\"params\">f</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = &#123;&#125;;</span><br><span class=\"line\">    n.__proto__ = f.prototype;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">        f.apply(n, <span class=\"built_in\">arguments</span>); </span><br><span class=\"line\">        <span class=\"keyword\">return</span> n; </span><br><span class=\"line\">   &#125;; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>当然，你应该知道，js一切皆对象，所以创建的一切变量（也就是一切都是对象）都是有 <code>__proto__</code> 的，<code>null</code> 除外。</strong></p>\n<h2 id=\"再聊一聊-原型对象-prototype\"><a href=\"#再聊一聊-原型对象-prototype\" class=\"headerlink\" title=\"再聊一聊 原型对象 prototype\"></a>再聊一聊 原型对象 <code>prototype</code></h2><p>这个应该最常见。比如ES5代码中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">Person.prototype.canSpeak = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.canSpeak); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>这里面有几个重要的点：</p>\n<ul>\n<li><code>Person</code> 是函数，准确地讲，是构造函数。直白一点，这个函数最终主要使用方法是 <code>new Person</code> 这种形式。</li>\n<li>绑定的 <code>canSpeak</code> 方法，可以是函数，也可以直接是字面量（字符串/数字等），这个无所谓。</li>\n<li>由于<code>canSpeak</code>绑定在 <code>prototype</code> 上，所以必须要实例化（<code>var p = new Person()</code>），<code>p</code> 就是实例化后的对象。</li>\n<li>实例化的 <code>p</code>，是对象。它绝对不是函数！</li>\n</ul>\n<p>在有一个<code>Person</code>构造函数上，我们在它的原型对象上（<code>prototype</code>）绑有一个<code>canSpeak</code>方法，结果他的实例化对象就有了这个方法。原因就是上文的new原理。</p>\n<p>我们查看下这个对象的结构：</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-02-26-javascript-prototype.png-wm.black\" alt=\"image\"></p>\n<p>当我们访问 <code>p.canSpeak</code>时候，由于对象上本身没有 <code>canSpeak</code> 方法，就去它的原型去找此方法。说白了，自己没有，就去看看父辈那里有没有这种方法。</p>\n<p>这里有一个有意思的实验：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">Person.prototype.canSpeak = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">p.canSpeak = <span class=\"number\">123</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.canSpeak); <span class=\"comment\">// 123</span></span><br></pre></td></tr></table></figure>\n\n<p>我们看看它的结果：</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-02-26-javascript-prototype2.png-wm.black\" alt=\"image\"></p>\n<p>这就说明了，如果自己本身有这个方法，是不会去父辈（原型链）那里寻找的。</p>\n<p><strong>小结</strong></p>\n<ul>\n<li>只有函数（function）才会有原型对象 <code>prototype</code></li>\n<li>一个函数，当做构造函数被new之后，每个实例都可以使用原型对象的方法，<code>prototype</code> 相当于共享方法。</li>\n<li>如果我们想生成一些对象，默认每个对象都拥有一些相同的方法，就可以创建构造函数，然后实例化的对象就是我们想要的东西。</li>\n</ul>\n<p>在ES6里面，构造函数有了新的定义方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;&#125;</span><br><span class=\"line\">    canSpeak()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'yes'</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.canSpeak());</span><br></pre></td></tr></table></figure>\n\n<p>不过，我不太清楚如何想上面一样定义返回普通值的方法，而不是现在ES6中的函数。</p>\n<h2 id=\"最后提一提-构造器-constructor\"><a href=\"#最后提一提-构造器-constructor\" class=\"headerlink\" title=\"最后提一提 构造器 constructor\"></a>最后提一提 构造器 <code>constructor</code></h2><p>先来说普通对象（万物皆对象）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'abc'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">str.prototype; <span class=\"comment\">//是不存在的，prototype存在于构造函数中</span></span><br><span class=\"line\">str.__proto__ === <span class=\"built_in\">String</span>.prototype; <span class=\"comment\">// 字符串的父辈是String</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">String</span>.prototype.constructor === <span class=\"built_in\">String</span>;</span><br><span class=\"line\"><span class=\"comment\">// 即</span></span><br><span class=\"line\">str.__proto__.constructor === <span class=\"built_in\">String</span>; </span><br><span class=\"line\"><span class=\"comment\">// 每个构造函数，其prototype中，constructor是指向自己的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 同时有</span></span><br><span class=\"line\">str.__proto__.constructor === str.constructor;</span><br><span class=\"line\"><span class=\"comment\">// 即</span></span><br><span class=\"line\">str.constructor === <span class=\"built_in\">String</span>;</span><br></pre></td></tr></table></figure>\n\n<p>它存在于 <code>.__proto__.constructor</code> 下。因为他的 <code>__proto__</code> 是 <code>父辈.prototype</code> ，相当于父辈是构造函数。（当然，你也可以直接通过 <code>.constructor</code>  访问到，因为自己找不到就会到原型中找啊~）</p>\n<p>再来说构造函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Foo.prototype.bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Foo.prototype.constructor === Foo; <span class=\"comment\">//  每个构造函数，其prototype中，constructor是指向自己的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 同时有</span></span><br><span class=\"line\">Foo.__proto__ === <span class=\"built_in\">Function</span>.prototype;</span><br><span class=\"line\">Foo.__proto__.constructor === <span class=\"built_in\">Function</span>; <span class=\"comment\">// Foo的原型是Function，所以其原型的constructor是Function</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 再来看看构造函数的实例，和普通对象没区别</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\">f.prototype; <span class=\"comment\">//是不存在的，prototype存在于构造函数中</span></span><br><span class=\"line\">f.__proto__ ===Foo.prototype;</span><br><span class=\"line\">f.__proto__.constructor === Foo;</span><br></pre></td></tr></table></figure>\n\n<p>看到这里，我们得到结论，所有构造函数，自己的 <code>prototype</code>中，除了我们定义的原型对象外，还有一个隐藏的 <code>constructor</code>，他不是通过其 <code>__proto__</code>得到的，而是真真正正自己的。而且 <code>constructor</code> 指向自己。</p>\n<p><strong>小结</strong></p>\n<ul>\n<li><code>constructor</code> 是构造函数特有的东西。</li>\n<li>构造函数本身自己的 <code>prototype</code> 中要有一个<code>constructor</code>，这样自己的实例才能指向到构造函数本身。</li>\n<li>所有对象，都是被父辈构造函数实例化出来的，所以他们<code>.__proto__.constructor</code>指向父辈。</li>\n<li><strong>“<code>constructor</code>指向自己” —— 很关键，js实现继承的时候，需要提到。</strong></li>\n</ul>\n<h2 id=\"说一下js的继承\"><a href=\"#说一下js的继承\" class=\"headerlink\" title=\"说一下js的继承\"></a>说一下js的继承</h2><p>在ES6之前，没有class extend方法，只能使用ES5的 <code>Object.create</code> 方法，或者下文：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extend</span>(<span class=\"params\">Child, Parent</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;; </span><br><span class=\"line\">    </span><br><span class=\"line\">    F.prototype = Parent.prototype; </span><br><span class=\"line\">    </span><br><span class=\"line\">    Child.prototype = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">    </span><br><span class=\"line\">    Child.prototype.constructor ===Child;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Child.uber = Parent.prototype;</span><br><span class=\"line\">    <span class=\"comment\">// 这句话写不写无所谓，给Child构造函数增加一个静态方法，指向父辈原型对象，纯粹为了使用方便而已，不影响继承</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解释下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>创建一个新的构造函数，下文可以使用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F.prototype = Parent.prototype;</span><br></pre></td></tr></table></figure>\n\n<p>把F构造函数的原型对象指向父辈原型对象，相当于把父辈的共享方法拷贝过来。</p>\n<p>这样通过 new Foo() 的实例，才会具有父辈的共享方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> F();</span><br></pre></td></tr></table></figure>\n\n<p>为了好说明，我们先定义 f，这样看的清晰：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> F(); </span><br><span class=\"line\">Child.prototype = f;</span><br></pre></td></tr></table></figure>\n\n<p>此时有：<code>f.__proto__ === F.prototype</code></p>\n<p>但是 <code>f.__proto__.constructor !== F</code>，</p>\n<p>因为 <code>F.prototype = Parent.prototype</code>，</p>\n<p>所以 <code>f.__proto__.constructor === Parent</code>。</p>\n<p>综合一下，本处的结果是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Child.prototype = f;</span><br><span class=\"line\">Child.prototype.__proto__ === F.prototype;</span><br><span class=\"line\">Child.prototype.__proto__.constructor === Parent;</span><br></pre></td></tr></table></figure>\n\n<p>也就是说，经过本函数传入的Child只能是空构造函数  <code>function(){...}</code>，绝对不能带有原定对象内容。</p>\n<p>因为如果进入本函数前定义了其原型对象 <code>Child.prototype.testChild = function(){}</code>，经过本函数后，原型对象也会被覆盖！</p>\n<p>既然被覆盖，那么Child.prototype里面没有任何内容，</p>\n<p>此时 <code>Child.prototype.constructor</code> 也就指向了  <code>Child.prototype.__proto__.constructor</code></p>\n<p>即：<code>Child.prototype.constructor === Parent</code>。</p>\n<p><strong>晕，Child的构造器指向了Parent，这是问题！</strong></p>\n<p>所以继承函数中，应该有这一行代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Child.prototype.constructor === Child;</span><br></pre></td></tr></table></figure>\n\n<p>我们必须修正下构造器指向。</p>\n<p>分析结束。</p>\n<p>我们测试下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Parent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Parent.prototype.running = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 父亲会跑步</span></span><br><span class=\"line\">Parent.prototype.swiming = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 父亲会游泳</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Child.prototype.pingpong = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">//孩子会乒乓球</span></span><br><span class=\"line\"></span><br><span class=\"line\">extend(Child,Parent);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xiaoming = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\">xiaoming.running();</span><br><span class=\"line\">xiaoming.swiming();</span><br><span class=\"line\">xiaoming.pingpong(); <span class=\"comment\">// TypeError，Child没有pingpong方法</span></span><br></pre></td></tr></table></figure>\n\n<p>我们先定义父亲和孩子两个构造函数，并赋予他们不同的能力，经过继承后，结果孩子的能力消失了！因为在继承前，子类任何原型对象均会被覆盖！</p>\n<p>所以一定要在继承后，在添加原型对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Parent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Parent.prototype.running = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 父亲会跑步</span></span><br><span class=\"line\">Parent.prototype.swiming = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 父亲会游泳</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">extend(Child,Parent);</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype.pingpong = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">//孩子会乒乓球</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xiaohua = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\">xiaohua.running();</span><br><span class=\"line\">xiaohua.swiming();</span><br><span class=\"line\">xiaohua.pingpong();</span><br></pre></td></tr></table></figure>\n\n<p>== 本文完 ==</p>"},{"layout":"post","title":"js array数组方法整理总结","date":"2017-05-22T11:40:00.000Z","_content":"\n之前学习使用了`[].reduce()`方法，觉得非常好用。也知道数组有很多方法，比如数组迭代遍历，可以实现的方式太多太多了。 而且有的又是返回新数组，而有的却是操作原数组，所以在此总结下。\n\n<!-- more -->\n\n**本文注意：**\n\n* 如果使用ES6的箭头函数写法，函数内 `this` 永远指代函数上一级的环境上下文。\n* 本文在 js 非严格模式下执行。严格模式下，部分的 `this` 为 `undifined`。\n\n## 数组迭代\n\n> 数组遍历方法均支持2个参数，第一个为迭代方法，第二个为 this 指向。不指定 this 的话，默认为 window 。\n\n### Array.prototype.forEach()\n\n* 数组遍历\n* 遍历每一个值\n* 遍历迭代函数无返回值\n* 无返回值\n\n```js\nvar arr = ['aab', 'aac', 'aad', 'bbc', 'bbd'];\nvar result = arr.forEach(function(value, index, _this){\n    // 此时 this === window\n    console.log(value, index, _this);\n    // aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // aac 1 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // aad 2 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // bbc 3 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // bbd 4 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n});\nconsole.log(result);\n// undefined\n```\n\n### Array.prototype.every()\n\n* 数组遍历\n* 至少遍历一个值\n* 遍历迭代函数须有返回值\n* 检查每一个值是否能通过函数，如果有一个不符合，则立刻停止遍历，返回 `false`，如果所有数值均符合，则返回 `true`\n* 有返回值\n\n```js\nvar arr = ['aab', 'aac', 'aad', 'bbc', 'bbd'];\nvar result = arr.every(function(value, index, _this){\n    // 此时 this === 'for this'\n    console.log(value, index, _this);\n    // aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // aac 1 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // aad 2 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // bbc 3 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // bbd 4 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    return 'string' === typeof value;\n},'for this');\nconsole.log(result);\n// true\n```\n\n### Array.prototype.some()\n\n* 数组遍历\n* 至少遍历一个值\n* 遍历迭代函数须有返回值\n* 检查每一个值是否能通过函数，如果有一个符合，则立刻停止遍历，返回 `true`，如果所有数值均不符合，则返回 `false`\n* 有返回值\n\n```js\nvar arr = ['aab', 'aac', 'aad', 'bbc', 'bbd'];\nvar result = arr.some(function(value, index, _this){\n    // 此时 this === 'for this'\n    console.log(value, index, _this);\n    // aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // 由于第一轮符合要求，则不进行后续遍历\n    return 'string' === typeof value;\n},'for this');\nconsole.log(result);\n// true\n```\n\n### Array.prototype.map()\n\n* 数组遍历\n* 遍历每一个值\n* 遍历迭代函数须有返回值\n* 遍历数组每一个值，并将迭代函数返回值放入新数组\n* 有返回值\n\n```js\nvar arr = ['aab', 'aac', 'aad', 'bbc', 'bbd'];\n\nvar result = arr.map(function(value, index, _this){\n    console.log(value, index, _this);\n    // aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // aac 1 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // aad 2 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // bbc 3 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // bbd 4 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    return value + value;\n});\nconsole.log(result);\n// [\"aabaab\", \"aacaac\", \"aadaad\", \"bbcbbc\", \"bbdbbd\"]\nconsole.log(arr);\n// [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n```\n\n### Array.prototype.filter()\n\n* 数组遍历\n* 遍历每一个值\n* 遍历迭代函数须有返回值\n* 遍历数组每一个值，并根据迭代函数返回值放入新数组\n* 有返回值\n\n```js\nvar arr = [2, 4, 6, 8, 10];\nvar result = arr.filter(function(value, index, _this){\n    console.log(value, index, _this);\n    // 2 0 [2, 4, 6, 8, 10]\n    // ...\n    return value > 5;\n});\nconsole.log(result);\n// [6, 8, 10]\nconsole.log(arr);\n// [2, 4, 6, 8, 10]\n```\n\n### Array.prototype.reduce() / Array.prototype.reduceRight()\n\n* 数组遍历\n* 遍历每一个值\n* 遍历迭代函数须有返回值\n* 有返回值\n\n这个我自己太熟了。真的熟的都不想写了~\n\n最常见的应用就是数字叠加求和。\n\n```js\nvar arr = [2, 5, 8, 9];\nvar result = arr.reduce(function(cur,next,index,_this){\n    // this === window\n    console.log(cur, next, index, _this);\n    // 4  2 0 [2, 5, 8, 9]\n    // 6  5 1 [2, 5, 8, 9]\n    // 11 8 2 [2, 5, 8, 9]\n    // 19 9 3 [2, 5, 8, 9]\n    return cur + next; // 将本轮初始值加上本轮遍历值 本轮迭代后的返回值，将作为下轮迭代的初始值\n},4); // 初始值为4 \nconsole.log(result);\n// 28 (4+2+5+8+9)\n```\n\n## 数组编辑\n\n### Array.prototype.unshift()\n\n* 数组开头插入\n* 有返回值（数组长度）\n* 改变原数组\n\n```js\nvar arr = ['aa', 'bb', 'cc', 'dd'];\nvar result = arr.unshift(11, 12);\nconsole.log(arr, result);\n// [11, 12, \"aa\", \"bb\", \"cc\", \"dd\"] 6\n```\n\n### Array.prototype.shift() \n\n* 数组开头删除\n* 有返回值（数组的第一个值）\n* 改变原数组\n\n```js\nvar arr = ['aa', 'bb', 'cc', 'dd'];\nvar result = arr.shift();\nconsole.log(arr, result);\n// [\"bb\", \"cc\", \"dd\"] \"aa\"\n```\n\n### Array.prototype.push() \n\n* 数组结尾插入\n* 有返回值（数组长度）\n* 改变原数组\n\n```js\nvar arr = ['aa', 'bb', 'cc', 'dd'];\nvar result = arr.push(21, 22);\nconsole.log(arr, result);\n// [\"aa\", \"bb\", \"cc\", \"dd\", 21, 22] 6\n```\n\n### Array.prototype.pop()\n\n* 数组结尾删除\n* 有返回值（数组的最后一个值）\n* 改变原数组\n\n```js\nvar arr = ['aa', 'bb', 'cc', 'dd'];\nvar result = arr.pop();\nconsole.log(arr, result);\n// [\"aa\", \"bb\", \"cc\"] \"dd\"\n```\n\n### Array.prototype.concat()\n* 数组合并（不展开数组）\n* 有返回值\n\n```js\nvar arr1 = [1, 2, 3];\nvar arr2 = ['a','b',['c1','c2']];\nvar result = arr1.concat(arr2);\nconsole.log(result);\n// [1, 2, 3, \"a\", \"b\", [\"c1\", \"c2\"]]\nconsole.log(arr1);\n// [1, 2, 3]\nconsole.log(arr2);\n// [\"a\", \"b\", [\"c1\", \"c2\"]]\n```\n\n### Array.prototype.fill()\n\n* 数组填充\n* 改变原数组\n* 返回改变后的数组\n\n```js\nvar arr = [1, 2, 3]\nvar result = arr.fill('a', 1, 2); // 填充'a'，从1位到2位，不含第2位\nconsole.log(result);\n// [1, \"a\", 3]\nconsole.log(arr);\n// [1, \"a\", 3]\n```\n\n### Array.prototype.splice()\n\n* 数组删除\n* 数组插入数据\n* 操作原数组\n* 有返回值\n\n```js\nvar arr = ['aab', 'aac', 'aad', 'bbc', 'bbd'];\n\nvar result = arr.splice(2, 1); // 从2号位置，删除1个。\nconsole.log(arr, result);\n// [\"aab\", \"aac\", \"bbc\", \"bbd\"] [\"aad\"]\n\nvar result2 = arr.splice(2, 0, 'test', 'test2'); // 从2号位置，删除0个，并在此位置增加test和test2\nconsole.log(arr, result2);\n// [\"aab\", \"aac\", \"test\", \"test2\", \"bbc\", \"bbd\"] []\n```\n\n### Array.prototype.slice()\n\n* 选取元素\n* 有返回值\n\n```js\nvar arr = ['aab', 'aac', 'aad', 'bbc', 'bbd'];\nvar result = arr.slice(2, 4); // 从2号位置，选取到4号位置（不含4号）\nconsole.log(arr, result);\n// [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"] [\"aad\", \"bbc\"]\n```\n\n我觉得\b最常见的用法是用于数组复制，或者在函数内将 `arguments` 转为数组：\n\n```\nvar arr = [1,2,3,4];\nvar copies = arr.slice(0);\nconsole.log(copies);\n\nvar fn = function(){\n    var args = [].slice.call(arguments,0);\n    console.log(args);\n}\nfn(1,2,3,4);\n```\n\n## 数组查找定位元素\n\n### Array.prototype.find()\n* 查找符合要求的第一个元素值\n* 传入查找函数\n* 支持传入this指向\n\n```js\nvar arr = [3, 9, 12, 18];\nvar result = arr.find((v) => {\n    return v > 10;\n});\nconsole.log(result);\n//12\n```\n\n### Array.prototype.findIndex()\n* 查找符合要求的第一个元素的索引值\n* 传入查找函数\n* 支持传入this指向\n\n```js\nvar arr = [3, 9, 12, 18];\nvar result = arr.findIndex((v) => {\n    return v > 10;\n});\nconsole.log(result);\n// 2\n```\n\n### Array.prototype.includes()\n* 查找元素是否存在\n\n```js\nvar arr = [3, 9, 12, 18, 22, 35];\nvar result = arr.includes(12, 4);\nconsole.log(result);\n// false\n```\n\n### Array.prototype.indexOf() / Array.prototype.lastIndexOf()\n* 查找元素的索引值\n\n```js\nvar arr = [3, 9, 12, 18, 22, 35];\nvar result = arr.indexOf(12, 1);\nconsole.log(result);\n// 2\n```\n\n## 数组排序\n\n### Array.prototype.sort() \n* 正向排序\n* 支持传入排序函数\n* 排序函数必须有返回值\n* 修改原数组\n* 有返回值，为排序后结果\n\n```js\nvar arr = [{name:'jason',value:1},{name:'john',value:0}]\nvar result = arr.sort(function(a, b){\n   return a.value - b.value;\n});\nconsole.log(result);\n// [{name:'john',value:0},{name:'jason',value:1}]\nconsole.log(arr);\n// [{name:'john',value:0},{name:'jason',value:1}]\n```\n\n### Array.prototype.reverse()\n\n* 反向排序\n* 不支持传函数\n* 直接修改数组\n* 有返回值（修改后的数组）\n\n## 其他\n\n### Array.prototype.join()\n\n* 数组数据拼合\n\n```js\nvar arr = ['aa', 'bb', 'cc'];\nvar result = arr.join('-');\nconsole.log(result);\n// aa-bb-cc\n```\n\n\n### Array.prototype.keys() / Array.prototype.values() / Array.prototype.entries()\n\n* 获取数组key / value\n* 有返回值（迭代器）\n\n```js\nvar arr = ['aab', 'aac', 'aad', 'bbc', 'bbd'];\n\nvar keys = arr.keys();\nfor (let k of keys){\n    //迭代器只能用 for of，for in 事遍历不了的\n    console.log(k);\n    // 0\n    // 1\n    // 2\n    // 3\n    // 4\n    // 5\n}\n\nvar entries = arr.entries();\nfor (let k of entries){\n    console.log(k);\n    // [0, \"aab\"]\n    // [1, \"aac\"]\n    // [2, \"aad\"]\n    // [3, \"bbc\"]\n    // [4, \"bbd\"]\n}\n```\n\n## 小结\n\n| 类型 | 方法 | 无返回 | 返回非数组结果 | 返回新数组 | 操作原数组 | 备注 |\n|---|---|:---:|:---:|:---:|:---:|:---:|\n| 迭代  | forEach       | O |   |   |   |   |\n| 迭代  | every         |   | O |   |   |   |\n| 迭代  | some          |   | O |   |   |   |\n| 迭代  | map           |   |   | O |   |   |\n| 迭代  | filter        |   |   | O |   |   |\n| 迭代  | reduce        |   | O |   |   |   |\n| 迭代  | reduceRight   |   | O |   |   |   |\n| 编辑  | unshift       |   | O |   | O | 修改原数组，返回长度 |\n| 编辑  | shift         |   | O |   | O | 修改原数组，返回其中一个值 |\n| 编辑  | push          |   | O |   | O | 修改原数组，返回长度 |\n| 编辑  | pop           |   | O |   | O | 修改原数组，返回其中一个值 |\n| 编辑  | concat        |   |   | O |   |   |\n| 编辑  | fill          |   |   | O | O | 修改原数组，并返回该数组 |\n| 编辑  | splice        |   |   | O | O | 原数组被修剪，返回修剪内容 |\n| 编辑  | slice         |   |   | O |   |   |\n| 查找  | find<br>findIndex<br>includes<br>lastIndexOf |   | O |   |   |   |\n| 排序  | sort          |   |   |   | O |   |\n| 排序  | reverse       |   |   |   | O |   |\n\n\n\n\n\n","source":"_posts/2017/2017-05-22-js-array.md","raw":"---\nlayout: post\ntitle: \"js array数组方法整理总结\"\ndate: 2017-05-22 11:40:00 GMT+0000\ncategories: [前端]\ntags:  [array]\n---\n\n之前学习使用了`[].reduce()`方法，觉得非常好用。也知道数组有很多方法，比如数组迭代遍历，可以实现的方式太多太多了。 而且有的又是返回新数组，而有的却是操作原数组，所以在此总结下。\n\n<!-- more -->\n\n**本文注意：**\n\n* 如果使用ES6的箭头函数写法，函数内 `this` 永远指代函数上一级的环境上下文。\n* 本文在 js 非严格模式下执行。严格模式下，部分的 `this` 为 `undifined`。\n\n## 数组迭代\n\n> 数组遍历方法均支持2个参数，第一个为迭代方法，第二个为 this 指向。不指定 this 的话，默认为 window 。\n\n### Array.prototype.forEach()\n\n* 数组遍历\n* 遍历每一个值\n* 遍历迭代函数无返回值\n* 无返回值\n\n```js\nvar arr = ['aab', 'aac', 'aad', 'bbc', 'bbd'];\nvar result = arr.forEach(function(value, index, _this){\n    // 此时 this === window\n    console.log(value, index, _this);\n    // aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // aac 1 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // aad 2 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // bbc 3 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // bbd 4 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n});\nconsole.log(result);\n// undefined\n```\n\n### Array.prototype.every()\n\n* 数组遍历\n* 至少遍历一个值\n* 遍历迭代函数须有返回值\n* 检查每一个值是否能通过函数，如果有一个不符合，则立刻停止遍历，返回 `false`，如果所有数值均符合，则返回 `true`\n* 有返回值\n\n```js\nvar arr = ['aab', 'aac', 'aad', 'bbc', 'bbd'];\nvar result = arr.every(function(value, index, _this){\n    // 此时 this === 'for this'\n    console.log(value, index, _this);\n    // aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // aac 1 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // aad 2 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // bbc 3 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // bbd 4 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    return 'string' === typeof value;\n},'for this');\nconsole.log(result);\n// true\n```\n\n### Array.prototype.some()\n\n* 数组遍历\n* 至少遍历一个值\n* 遍历迭代函数须有返回值\n* 检查每一个值是否能通过函数，如果有一个符合，则立刻停止遍历，返回 `true`，如果所有数值均不符合，则返回 `false`\n* 有返回值\n\n```js\nvar arr = ['aab', 'aac', 'aad', 'bbc', 'bbd'];\nvar result = arr.some(function(value, index, _this){\n    // 此时 this === 'for this'\n    console.log(value, index, _this);\n    // aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // 由于第一轮符合要求，则不进行后续遍历\n    return 'string' === typeof value;\n},'for this');\nconsole.log(result);\n// true\n```\n\n### Array.prototype.map()\n\n* 数组遍历\n* 遍历每一个值\n* 遍历迭代函数须有返回值\n* 遍历数组每一个值，并将迭代函数返回值放入新数组\n* 有返回值\n\n```js\nvar arr = ['aab', 'aac', 'aad', 'bbc', 'bbd'];\n\nvar result = arr.map(function(value, index, _this){\n    console.log(value, index, _this);\n    // aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // aac 1 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // aad 2 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // bbc 3 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // bbd 4 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    return value + value;\n});\nconsole.log(result);\n// [\"aabaab\", \"aacaac\", \"aadaad\", \"bbcbbc\", \"bbdbbd\"]\nconsole.log(arr);\n// [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n```\n\n### Array.prototype.filter()\n\n* 数组遍历\n* 遍历每一个值\n* 遍历迭代函数须有返回值\n* 遍历数组每一个值，并根据迭代函数返回值放入新数组\n* 有返回值\n\n```js\nvar arr = [2, 4, 6, 8, 10];\nvar result = arr.filter(function(value, index, _this){\n    console.log(value, index, _this);\n    // 2 0 [2, 4, 6, 8, 10]\n    // ...\n    return value > 5;\n});\nconsole.log(result);\n// [6, 8, 10]\nconsole.log(arr);\n// [2, 4, 6, 8, 10]\n```\n\n### Array.prototype.reduce() / Array.prototype.reduceRight()\n\n* 数组遍历\n* 遍历每一个值\n* 遍历迭代函数须有返回值\n* 有返回值\n\n这个我自己太熟了。真的熟的都不想写了~\n\n最常见的应用就是数字叠加求和。\n\n```js\nvar arr = [2, 5, 8, 9];\nvar result = arr.reduce(function(cur,next,index,_this){\n    // this === window\n    console.log(cur, next, index, _this);\n    // 4  2 0 [2, 5, 8, 9]\n    // 6  5 1 [2, 5, 8, 9]\n    // 11 8 2 [2, 5, 8, 9]\n    // 19 9 3 [2, 5, 8, 9]\n    return cur + next; // 将本轮初始值加上本轮遍历值 本轮迭代后的返回值，将作为下轮迭代的初始值\n},4); // 初始值为4 \nconsole.log(result);\n// 28 (4+2+5+8+9)\n```\n\n## 数组编辑\n\n### Array.prototype.unshift()\n\n* 数组开头插入\n* 有返回值（数组长度）\n* 改变原数组\n\n```js\nvar arr = ['aa', 'bb', 'cc', 'dd'];\nvar result = arr.unshift(11, 12);\nconsole.log(arr, result);\n// [11, 12, \"aa\", \"bb\", \"cc\", \"dd\"] 6\n```\n\n### Array.prototype.shift() \n\n* 数组开头删除\n* 有返回值（数组的第一个值）\n* 改变原数组\n\n```js\nvar arr = ['aa', 'bb', 'cc', 'dd'];\nvar result = arr.shift();\nconsole.log(arr, result);\n// [\"bb\", \"cc\", \"dd\"] \"aa\"\n```\n\n### Array.prototype.push() \n\n* 数组结尾插入\n* 有返回值（数组长度）\n* 改变原数组\n\n```js\nvar arr = ['aa', 'bb', 'cc', 'dd'];\nvar result = arr.push(21, 22);\nconsole.log(arr, result);\n// [\"aa\", \"bb\", \"cc\", \"dd\", 21, 22] 6\n```\n\n### Array.prototype.pop()\n\n* 数组结尾删除\n* 有返回值（数组的最后一个值）\n* 改变原数组\n\n```js\nvar arr = ['aa', 'bb', 'cc', 'dd'];\nvar result = arr.pop();\nconsole.log(arr, result);\n// [\"aa\", \"bb\", \"cc\"] \"dd\"\n```\n\n### Array.prototype.concat()\n* 数组合并（不展开数组）\n* 有返回值\n\n```js\nvar arr1 = [1, 2, 3];\nvar arr2 = ['a','b',['c1','c2']];\nvar result = arr1.concat(arr2);\nconsole.log(result);\n// [1, 2, 3, \"a\", \"b\", [\"c1\", \"c2\"]]\nconsole.log(arr1);\n// [1, 2, 3]\nconsole.log(arr2);\n// [\"a\", \"b\", [\"c1\", \"c2\"]]\n```\n\n### Array.prototype.fill()\n\n* 数组填充\n* 改变原数组\n* 返回改变后的数组\n\n```js\nvar arr = [1, 2, 3]\nvar result = arr.fill('a', 1, 2); // 填充'a'，从1位到2位，不含第2位\nconsole.log(result);\n// [1, \"a\", 3]\nconsole.log(arr);\n// [1, \"a\", 3]\n```\n\n### Array.prototype.splice()\n\n* 数组删除\n* 数组插入数据\n* 操作原数组\n* 有返回值\n\n```js\nvar arr = ['aab', 'aac', 'aad', 'bbc', 'bbd'];\n\nvar result = arr.splice(2, 1); // 从2号位置，删除1个。\nconsole.log(arr, result);\n// [\"aab\", \"aac\", \"bbc\", \"bbd\"] [\"aad\"]\n\nvar result2 = arr.splice(2, 0, 'test', 'test2'); // 从2号位置，删除0个，并在此位置增加test和test2\nconsole.log(arr, result2);\n// [\"aab\", \"aac\", \"test\", \"test2\", \"bbc\", \"bbd\"] []\n```\n\n### Array.prototype.slice()\n\n* 选取元素\n* 有返回值\n\n```js\nvar arr = ['aab', 'aac', 'aad', 'bbc', 'bbd'];\nvar result = arr.slice(2, 4); // 从2号位置，选取到4号位置（不含4号）\nconsole.log(arr, result);\n// [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"] [\"aad\", \"bbc\"]\n```\n\n我觉得\b最常见的用法是用于数组复制，或者在函数内将 `arguments` 转为数组：\n\n```\nvar arr = [1,2,3,4];\nvar copies = arr.slice(0);\nconsole.log(copies);\n\nvar fn = function(){\n    var args = [].slice.call(arguments,0);\n    console.log(args);\n}\nfn(1,2,3,4);\n```\n\n## 数组查找定位元素\n\n### Array.prototype.find()\n* 查找符合要求的第一个元素值\n* 传入查找函数\n* 支持传入this指向\n\n```js\nvar arr = [3, 9, 12, 18];\nvar result = arr.find((v) => {\n    return v > 10;\n});\nconsole.log(result);\n//12\n```\n\n### Array.prototype.findIndex()\n* 查找符合要求的第一个元素的索引值\n* 传入查找函数\n* 支持传入this指向\n\n```js\nvar arr = [3, 9, 12, 18];\nvar result = arr.findIndex((v) => {\n    return v > 10;\n});\nconsole.log(result);\n// 2\n```\n\n### Array.prototype.includes()\n* 查找元素是否存在\n\n```js\nvar arr = [3, 9, 12, 18, 22, 35];\nvar result = arr.includes(12, 4);\nconsole.log(result);\n// false\n```\n\n### Array.prototype.indexOf() / Array.prototype.lastIndexOf()\n* 查找元素的索引值\n\n```js\nvar arr = [3, 9, 12, 18, 22, 35];\nvar result = arr.indexOf(12, 1);\nconsole.log(result);\n// 2\n```\n\n## 数组排序\n\n### Array.prototype.sort() \n* 正向排序\n* 支持传入排序函数\n* 排序函数必须有返回值\n* 修改原数组\n* 有返回值，为排序后结果\n\n```js\nvar arr = [{name:'jason',value:1},{name:'john',value:0}]\nvar result = arr.sort(function(a, b){\n   return a.value - b.value;\n});\nconsole.log(result);\n// [{name:'john',value:0},{name:'jason',value:1}]\nconsole.log(arr);\n// [{name:'john',value:0},{name:'jason',value:1}]\n```\n\n### Array.prototype.reverse()\n\n* 反向排序\n* 不支持传函数\n* 直接修改数组\n* 有返回值（修改后的数组）\n\n## 其他\n\n### Array.prototype.join()\n\n* 数组数据拼合\n\n```js\nvar arr = ['aa', 'bb', 'cc'];\nvar result = arr.join('-');\nconsole.log(result);\n// aa-bb-cc\n```\n\n\n### Array.prototype.keys() / Array.prototype.values() / Array.prototype.entries()\n\n* 获取数组key / value\n* 有返回值（迭代器）\n\n```js\nvar arr = ['aab', 'aac', 'aad', 'bbc', 'bbd'];\n\nvar keys = arr.keys();\nfor (let k of keys){\n    //迭代器只能用 for of，for in 事遍历不了的\n    console.log(k);\n    // 0\n    // 1\n    // 2\n    // 3\n    // 4\n    // 5\n}\n\nvar entries = arr.entries();\nfor (let k of entries){\n    console.log(k);\n    // [0, \"aab\"]\n    // [1, \"aac\"]\n    // [2, \"aad\"]\n    // [3, \"bbc\"]\n    // [4, \"bbd\"]\n}\n```\n\n## 小结\n\n| 类型 | 方法 | 无返回 | 返回非数组结果 | 返回新数组 | 操作原数组 | 备注 |\n|---|---|:---:|:---:|:---:|:---:|:---:|\n| 迭代  | forEach       | O |   |   |   |   |\n| 迭代  | every         |   | O |   |   |   |\n| 迭代  | some          |   | O |   |   |   |\n| 迭代  | map           |   |   | O |   |   |\n| 迭代  | filter        |   |   | O |   |   |\n| 迭代  | reduce        |   | O |   |   |   |\n| 迭代  | reduceRight   |   | O |   |   |   |\n| 编辑  | unshift       |   | O |   | O | 修改原数组，返回长度 |\n| 编辑  | shift         |   | O |   | O | 修改原数组，返回其中一个值 |\n| 编辑  | push          |   | O |   | O | 修改原数组，返回长度 |\n| 编辑  | pop           |   | O |   | O | 修改原数组，返回其中一个值 |\n| 编辑  | concat        |   |   | O |   |   |\n| 编辑  | fill          |   |   | O | O | 修改原数组，并返回该数组 |\n| 编辑  | splice        |   |   | O | O | 原数组被修剪，返回修剪内容 |\n| 编辑  | slice         |   |   | O |   |   |\n| 查找  | find<br>findIndex<br>includes<br>lastIndexOf |   | O |   |   |   |\n| 排序  | sort          |   |   |   | O |   |\n| 排序  | reverse       |   |   |   | O |   |\n\n\n\n\n\n","slug":"2017-2017-05-22-js-array","published":1,"updated":"2019-07-18T17:19:07.198Z","comments":1,"photos":[],"link":"","_id":"cjy8y72uz00c1s21dj406w0tj","content":"<p>之前学习使用了<code>[].reduce()</code>方法，觉得非常好用。也知道数组有很多方法，比如数组迭代遍历，可以实现的方式太多太多了。 而且有的又是返回新数组，而有的却是操作原数组，所以在此总结下。</p>\n<a id=\"more\"></a>\n\n<p><strong>本文注意：</strong></p>\n<ul>\n<li>如果使用ES6的箭头函数写法，函数内 <code>this</code> 永远指代函数上一级的环境上下文。</li>\n<li>本文在 js 非严格模式下执行。严格模式下，部分的 <code>this</code> 为 <code>undifined</code>。</li>\n</ul>\n<h2 id=\"数组迭代\"><a href=\"#数组迭代\" class=\"headerlink\" title=\"数组迭代\"></a>数组迭代</h2><blockquote>\n<p>数组遍历方法均支持2个参数，第一个为迭代方法，第二个为 this 指向。不指定 this 的话，默认为 window 。</p>\n</blockquote>\n<h3 id=\"Array-prototype-forEach\"><a href=\"#Array-prototype-forEach\" class=\"headerlink\" title=\"Array.prototype.forEach()\"></a>Array.prototype.forEach()</h3><ul>\n<li>数组遍历</li>\n<li>遍历每一个值</li>\n<li>遍历迭代函数无返回值</li>\n<li>无返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aab'</span>, <span class=\"string\">'aac'</span>, <span class=\"string\">'aad'</span>, <span class=\"string\">'bbc'</span>, <span class=\"string\">'bbd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, _this</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此时 this === window</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value, index, _this);</span><br><span class=\"line\">    <span class=\"comment\">// aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// aac 1 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// aad 2 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// bbc 3 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// bbd 4 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-every\"><a href=\"#Array-prototype-every\" class=\"headerlink\" title=\"Array.prototype.every()\"></a>Array.prototype.every()</h3><ul>\n<li>数组遍历</li>\n<li>至少遍历一个值</li>\n<li>遍历迭代函数须有返回值</li>\n<li>检查每一个值是否能通过函数，如果有一个不符合，则立刻停止遍历，返回 <code>false</code>，如果所有数值均符合，则返回 <code>true</code></li>\n<li>有返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aab'</span>, <span class=\"string\">'aac'</span>, <span class=\"string\">'aad'</span>, <span class=\"string\">'bbc'</span>, <span class=\"string\">'bbd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, _this</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此时 this === 'for this'</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value, index, _this);</span><br><span class=\"line\">    <span class=\"comment\">// aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// aac 1 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// aad 2 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// bbc 3 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// bbd 4 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'string'</span> === <span class=\"keyword\">typeof</span> value;</span><br><span class=\"line\">&#125;,<span class=\"string\">'for this'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-some\"><a href=\"#Array-prototype-some\" class=\"headerlink\" title=\"Array.prototype.some()\"></a>Array.prototype.some()</h3><ul>\n<li>数组遍历</li>\n<li>至少遍历一个值</li>\n<li>遍历迭代函数须有返回值</li>\n<li>检查每一个值是否能通过函数，如果有一个符合，则立刻停止遍历，返回 <code>true</code>，如果所有数值均不符合，则返回 <code>false</code></li>\n<li>有返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aab'</span>, <span class=\"string\">'aac'</span>, <span class=\"string\">'aad'</span>, <span class=\"string\">'bbc'</span>, <span class=\"string\">'bbd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, _this</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此时 this === 'for this'</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value, index, _this);</span><br><span class=\"line\">    <span class=\"comment\">// aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// 由于第一轮符合要求，则不进行后续遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'string'</span> === <span class=\"keyword\">typeof</span> value;</span><br><span class=\"line\">&#125;,<span class=\"string\">'for this'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-map\"><a href=\"#Array-prototype-map\" class=\"headerlink\" title=\"Array.prototype.map()\"></a>Array.prototype.map()</h3><ul>\n<li>数组遍历</li>\n<li>遍历每一个值</li>\n<li>遍历迭代函数须有返回值</li>\n<li>遍历数组每一个值，并将迭代函数返回值放入新数组</li>\n<li>有返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aab'</span>, <span class=\"string\">'aac'</span>, <span class=\"string\">'aad'</span>, <span class=\"string\">'bbc'</span>, <span class=\"string\">'bbd'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, _this</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value, index, _this);</span><br><span class=\"line\">    <span class=\"comment\">// aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// aac 1 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// aad 2 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// bbc 3 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// bbd 4 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value + value;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// [\"aabaab\", \"aacaac\", \"aadaad\", \"bbcbbc\", \"bbdbbd\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-filter\"><a href=\"#Array-prototype-filter\" class=\"headerlink\" title=\"Array.prototype.filter()\"></a>Array.prototype.filter()</h3><ul>\n<li>数组遍历</li>\n<li>遍历每一个值</li>\n<li>遍历迭代函数须有返回值</li>\n<li>遍历数组每一个值，并根据迭代函数返回值放入新数组</li>\n<li>有返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, _this</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value, index, _this);</span><br><span class=\"line\">    <span class=\"comment\">// 2 0 [2, 4, 6, 8, 10]</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value &gt; <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// [6, 8, 10]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-reduce-Array-prototype-reduceRight\"><a href=\"#Array-prototype-reduce-Array-prototype-reduceRight\" class=\"headerlink\" title=\"Array.prototype.reduce() / Array.prototype.reduceRight()\"></a>Array.prototype.reduce() / Array.prototype.reduceRight()</h3><ul>\n<li>数组遍历</li>\n<li>遍历每一个值</li>\n<li>遍历迭代函数须有返回值</li>\n<li>有返回值</li>\n</ul>\n<p>这个我自己太熟了。真的熟的都不想写了~</p>\n<p>最常见的应用就是数字叠加求和。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cur,next,index,_this</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// this === window</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(cur, next, index, _this);</span><br><span class=\"line\">    <span class=\"comment\">// 4  2 0 [2, 5, 8, 9]</span></span><br><span class=\"line\">    <span class=\"comment\">// 6  5 1 [2, 5, 8, 9]</span></span><br><span class=\"line\">    <span class=\"comment\">// 11 8 2 [2, 5, 8, 9]</span></span><br><span class=\"line\">    <span class=\"comment\">// 19 9 3 [2, 5, 8, 9]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cur + next; <span class=\"comment\">// 将本轮初始值加上本轮遍历值 本轮迭代后的返回值，将作为下轮迭代的初始值</span></span><br><span class=\"line\">&#125;,<span class=\"number\">4</span>); <span class=\"comment\">// 初始值为4 </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// 28 (4+2+5+8+9)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组编辑\"><a href=\"#数组编辑\" class=\"headerlink\" title=\"数组编辑\"></a>数组编辑</h2><h3 id=\"Array-prototype-unshift\"><a href=\"#Array-prototype-unshift\" class=\"headerlink\" title=\"Array.prototype.unshift()\"></a>Array.prototype.unshift()</h3><ul>\n<li>数组开头插入</li>\n<li>有返回值（数组长度）</li>\n<li>改变原数组</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aa'</span>, <span class=\"string\">'bb'</span>, <span class=\"string\">'cc'</span>, <span class=\"string\">'dd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.unshift(<span class=\"number\">11</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, result);</span><br><span class=\"line\"><span class=\"comment\">// [11, 12, \"aa\", \"bb\", \"cc\", \"dd\"] 6</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-shift\"><a href=\"#Array-prototype-shift\" class=\"headerlink\" title=\"Array.prototype.shift()\"></a>Array.prototype.shift()</h3><ul>\n<li>数组开头删除</li>\n<li>有返回值（数组的第一个值）</li>\n<li>改变原数组</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aa'</span>, <span class=\"string\">'bb'</span>, <span class=\"string\">'cc'</span>, <span class=\"string\">'dd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.shift();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, result);</span><br><span class=\"line\"><span class=\"comment\">// [\"bb\", \"cc\", \"dd\"] \"aa\"</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-push\"><a href=\"#Array-prototype-push\" class=\"headerlink\" title=\"Array.prototype.push()\"></a>Array.prototype.push()</h3><ul>\n<li>数组结尾插入</li>\n<li>有返回值（数组长度）</li>\n<li>改变原数组</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aa'</span>, <span class=\"string\">'bb'</span>, <span class=\"string\">'cc'</span>, <span class=\"string\">'dd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.push(<span class=\"number\">21</span>, <span class=\"number\">22</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, result);</span><br><span class=\"line\"><span class=\"comment\">// [\"aa\", \"bb\", \"cc\", \"dd\", 21, 22] 6</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-pop\"><a href=\"#Array-prototype-pop\" class=\"headerlink\" title=\"Array.prototype.pop()\"></a>Array.prototype.pop()</h3><ul>\n<li>数组结尾删除</li>\n<li>有返回值（数组的最后一个值）</li>\n<li>改变原数组</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aa'</span>, <span class=\"string\">'bb'</span>, <span class=\"string\">'cc'</span>, <span class=\"string\">'dd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.pop();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, result);</span><br><span class=\"line\"><span class=\"comment\">// [\"aa\", \"bb\", \"cc\"] \"dd\"</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-concat\"><a href=\"#Array-prototype-concat\" class=\"headerlink\" title=\"Array.prototype.concat()\"></a>Array.prototype.concat()</h3><ul>\n<li>数组合并（不展开数组）</li>\n<li>有返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,[<span class=\"string\">'c1'</span>,<span class=\"string\">'c2'</span>]];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr1.concat(arr2);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3, \"a\", \"b\", [\"c1\", \"c2\"]]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1);</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);</span><br><span class=\"line\"><span class=\"comment\">// [\"a\", \"b\", [\"c1\", \"c2\"]]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-fill\"><a href=\"#Array-prototype-fill\" class=\"headerlink\" title=\"Array.prototype.fill()\"></a>Array.prototype.fill()</h3><ul>\n<li>数组填充</li>\n<li>改变原数组</li>\n<li>返回改变后的数组</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.fill(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// 填充'a'，从1位到2位，不含第2位</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// [1, \"a\", 3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// [1, \"a\", 3]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-splice\"><a href=\"#Array-prototype-splice\" class=\"headerlink\" title=\"Array.prototype.splice()\"></a>Array.prototype.splice()</h3><ul>\n<li>数组删除</li>\n<li>数组插入数据</li>\n<li>操作原数组</li>\n<li>有返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aab'</span>, <span class=\"string\">'aac'</span>, <span class=\"string\">'aad'</span>, <span class=\"string\">'bbc'</span>, <span class=\"string\">'bbd'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.splice(<span class=\"number\">2</span>, <span class=\"number\">1</span>); <span class=\"comment\">// 从2号位置，删除1个。</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, result);</span><br><span class=\"line\"><span class=\"comment\">// [\"aab\", \"aac\", \"bbc\", \"bbd\"] [\"aad\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result2 = arr.splice(<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"string\">'test'</span>, <span class=\"string\">'test2'</span>); <span class=\"comment\">// 从2号位置，删除0个，并在此位置增加test和test2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, result2);</span><br><span class=\"line\"><span class=\"comment\">// [\"aab\", \"aac\", \"test\", \"test2\", \"bbc\", \"bbd\"] []</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-slice\"><a href=\"#Array-prototype-slice\" class=\"headerlink\" title=\"Array.prototype.slice()\"></a>Array.prototype.slice()</h3><ul>\n<li>选取元素</li>\n<li>有返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aab'</span>, <span class=\"string\">'aac'</span>, <span class=\"string\">'aad'</span>, <span class=\"string\">'bbc'</span>, <span class=\"string\">'bbd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.slice(<span class=\"number\">2</span>, <span class=\"number\">4</span>); <span class=\"comment\">// 从2号位置，选取到4号位置（不含4号）</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, result);</span><br><span class=\"line\"><span class=\"comment\">// [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"] [\"aad\", \"bbc\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>我觉得\b最常见的用法是用于数组复制，或者在函数内将 <code>arguments</code> 转为数组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1,2,3,4];</span><br><span class=\"line\">var copies = arr.slice(0);</span><br><span class=\"line\">console.log(copies);</span><br><span class=\"line\"></span><br><span class=\"line\">var fn = function()&#123;</span><br><span class=\"line\">    var args = [].slice.call(arguments,0);</span><br><span class=\"line\">    console.log(args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(1,2,3,4);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组查找定位元素\"><a href=\"#数组查找定位元素\" class=\"headerlink\" title=\"数组查找定位元素\"></a>数组查找定位元素</h2><h3 id=\"Array-prototype-find\"><a href=\"#Array-prototype-find\" class=\"headerlink\" title=\"Array.prototype.find()\"></a>Array.prototype.find()</h3><ul>\n<li>查找符合要求的第一个元素值</li>\n<li>传入查找函数</li>\n<li>支持传入this指向</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">18</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.find(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v &gt; <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">//12</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-findIndex\"><a href=\"#Array-prototype-findIndex\" class=\"headerlink\" title=\"Array.prototype.findIndex()\"></a>Array.prototype.findIndex()</h3><ul>\n<li>查找符合要求的第一个元素的索引值</li>\n<li>传入查找函数</li>\n<li>支持传入this指向</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">18</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.findIndex(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v &gt; <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-includes\"><a href=\"#Array-prototype-includes\" class=\"headerlink\" title=\"Array.prototype.includes()\"></a>Array.prototype.includes()</h3><ul>\n<li>查找元素是否存在</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">18</span>, <span class=\"number\">22</span>, <span class=\"number\">35</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.includes(<span class=\"number\">12</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-indexOf-Array-prototype-lastIndexOf\"><a href=\"#Array-prototype-indexOf-Array-prototype-lastIndexOf\" class=\"headerlink\" title=\"Array.prototype.indexOf() / Array.prototype.lastIndexOf()\"></a>Array.prototype.indexOf() / Array.prototype.lastIndexOf()</h3><ul>\n<li>查找元素的索引值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">18</span>, <span class=\"number\">22</span>, <span class=\"number\">35</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.indexOf(<span class=\"number\">12</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组排序\"><a href=\"#数组排序\" class=\"headerlink\" title=\"数组排序\"></a>数组排序</h2><h3 id=\"Array-prototype-sort\"><a href=\"#Array-prototype-sort\" class=\"headerlink\" title=\"Array.prototype.sort()\"></a>Array.prototype.sort()</h3><ul>\n<li>正向排序</li>\n<li>支持传入排序函数</li>\n<li>排序函数必须有返回值</li>\n<li>修改原数组</li>\n<li>有返回值，为排序后结果</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jason'</span>,<span class=\"attr\">value</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">name</span>:<span class=\"string\">'john'</span>,<span class=\"attr\">value</span>:<span class=\"number\">0</span>&#125;]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> a.value - b.value;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// [&#123;name:'john',value:0&#125;,&#123;name:'jason',value:1&#125;]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// [&#123;name:'john',value:0&#125;,&#123;name:'jason',value:1&#125;]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-reverse\"><a href=\"#Array-prototype-reverse\" class=\"headerlink\" title=\"Array.prototype.reverse()\"></a>Array.prototype.reverse()</h3><ul>\n<li>反向排序</li>\n<li>不支持传函数</li>\n<li>直接修改数组</li>\n<li>有返回值（修改后的数组）</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"Array-prototype-join\"><a href=\"#Array-prototype-join\" class=\"headerlink\" title=\"Array.prototype.join()\"></a>Array.prototype.join()</h3><ul>\n<li>数组数据拼合</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aa'</span>, <span class=\"string\">'bb'</span>, <span class=\"string\">'cc'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.join(<span class=\"string\">'-'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// aa-bb-cc</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-keys-Array-prototype-values-Array-prototype-entries\"><a href=\"#Array-prototype-keys-Array-prototype-values-Array-prototype-entries\" class=\"headerlink\" title=\"Array.prototype.keys() / Array.prototype.values() / Array.prototype.entries()\"></a>Array.prototype.keys() / Array.prototype.values() / Array.prototype.entries()</h3><ul>\n<li>获取数组key / value</li>\n<li>有返回值（迭代器）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aab'</span>, <span class=\"string\">'aac'</span>, <span class=\"string\">'aad'</span>, <span class=\"string\">'bbc'</span>, <span class=\"string\">'bbd'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> keys = arr.keys();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> k <span class=\"keyword\">of</span> keys)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//迭代器只能用 for of，for in 事遍历不了的</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(k);</span><br><span class=\"line\">    <span class=\"comment\">// 0</span></span><br><span class=\"line\">    <span class=\"comment\">// 1</span></span><br><span class=\"line\">    <span class=\"comment\">// 2</span></span><br><span class=\"line\">    <span class=\"comment\">// 3</span></span><br><span class=\"line\">    <span class=\"comment\">// 4</span></span><br><span class=\"line\">    <span class=\"comment\">// 5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> entries = arr.entries();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> k <span class=\"keyword\">of</span> entries)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(k);</span><br><span class=\"line\">    <span class=\"comment\">// [0, \"aab\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// [1, \"aac\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// [2, \"aad\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// [3, \"bbc\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// [4, \"bbd\"]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>方法</th>\n<th align=\"center\">无返回</th>\n<th align=\"center\">返回非数组结果</th>\n<th align=\"center\">返回新数组</th>\n<th align=\"center\">操作原数组</th>\n<th align=\"center\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>迭代</td>\n<td>forEach</td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>every</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>some</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>map</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>filter</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>reduce</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>reduceRight</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>unshift</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\">修改原数组，返回长度</td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>shift</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\">修改原数组，返回其中一个值</td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>push</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\">修改原数组，返回长度</td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>pop</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\">修改原数组，返回其中一个值</td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>concat</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>fill</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\">O</td>\n<td align=\"center\">修改原数组，并返回该数组</td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>splice</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\">O</td>\n<td align=\"center\">原数组被修剪，返回修剪内容</td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>slice</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>查找</td>\n<td>find<br>findIndex<br>includes<br>lastIndexOf</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>排序</td>\n<td>sort</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>排序</td>\n<td>reverse</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"<p>之前学习使用了<code>[].reduce()</code>方法，觉得非常好用。也知道数组有很多方法，比如数组迭代遍历，可以实现的方式太多太多了。 而且有的又是返回新数组，而有的却是操作原数组，所以在此总结下。</p>","more":"<p><strong>本文注意：</strong></p>\n<ul>\n<li>如果使用ES6的箭头函数写法，函数内 <code>this</code> 永远指代函数上一级的环境上下文。</li>\n<li>本文在 js 非严格模式下执行。严格模式下，部分的 <code>this</code> 为 <code>undifined</code>。</li>\n</ul>\n<h2 id=\"数组迭代\"><a href=\"#数组迭代\" class=\"headerlink\" title=\"数组迭代\"></a>数组迭代</h2><blockquote>\n<p>数组遍历方法均支持2个参数，第一个为迭代方法，第二个为 this 指向。不指定 this 的话，默认为 window 。</p>\n</blockquote>\n<h3 id=\"Array-prototype-forEach\"><a href=\"#Array-prototype-forEach\" class=\"headerlink\" title=\"Array.prototype.forEach()\"></a>Array.prototype.forEach()</h3><ul>\n<li>数组遍历</li>\n<li>遍历每一个值</li>\n<li>遍历迭代函数无返回值</li>\n<li>无返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aab'</span>, <span class=\"string\">'aac'</span>, <span class=\"string\">'aad'</span>, <span class=\"string\">'bbc'</span>, <span class=\"string\">'bbd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, _this</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此时 this === window</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value, index, _this);</span><br><span class=\"line\">    <span class=\"comment\">// aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// aac 1 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// aad 2 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// bbc 3 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// bbd 4 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-every\"><a href=\"#Array-prototype-every\" class=\"headerlink\" title=\"Array.prototype.every()\"></a>Array.prototype.every()</h3><ul>\n<li>数组遍历</li>\n<li>至少遍历一个值</li>\n<li>遍历迭代函数须有返回值</li>\n<li>检查每一个值是否能通过函数，如果有一个不符合，则立刻停止遍历，返回 <code>false</code>，如果所有数值均符合，则返回 <code>true</code></li>\n<li>有返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aab'</span>, <span class=\"string\">'aac'</span>, <span class=\"string\">'aad'</span>, <span class=\"string\">'bbc'</span>, <span class=\"string\">'bbd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, _this</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此时 this === 'for this'</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value, index, _this);</span><br><span class=\"line\">    <span class=\"comment\">// aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// aac 1 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// aad 2 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// bbc 3 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// bbd 4 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'string'</span> === <span class=\"keyword\">typeof</span> value;</span><br><span class=\"line\">&#125;,<span class=\"string\">'for this'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-some\"><a href=\"#Array-prototype-some\" class=\"headerlink\" title=\"Array.prototype.some()\"></a>Array.prototype.some()</h3><ul>\n<li>数组遍历</li>\n<li>至少遍历一个值</li>\n<li>遍历迭代函数须有返回值</li>\n<li>检查每一个值是否能通过函数，如果有一个符合，则立刻停止遍历，返回 <code>true</code>，如果所有数值均不符合，则返回 <code>false</code></li>\n<li>有返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aab'</span>, <span class=\"string\">'aac'</span>, <span class=\"string\">'aad'</span>, <span class=\"string\">'bbc'</span>, <span class=\"string\">'bbd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, _this</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此时 this === 'for this'</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value, index, _this);</span><br><span class=\"line\">    <span class=\"comment\">// aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// 由于第一轮符合要求，则不进行后续遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'string'</span> === <span class=\"keyword\">typeof</span> value;</span><br><span class=\"line\">&#125;,<span class=\"string\">'for this'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-map\"><a href=\"#Array-prototype-map\" class=\"headerlink\" title=\"Array.prototype.map()\"></a>Array.prototype.map()</h3><ul>\n<li>数组遍历</li>\n<li>遍历每一个值</li>\n<li>遍历迭代函数须有返回值</li>\n<li>遍历数组每一个值，并将迭代函数返回值放入新数组</li>\n<li>有返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aab'</span>, <span class=\"string\">'aac'</span>, <span class=\"string\">'aad'</span>, <span class=\"string\">'bbc'</span>, <span class=\"string\">'bbd'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, _this</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value, index, _this);</span><br><span class=\"line\">    <span class=\"comment\">// aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// aac 1 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// aad 2 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// bbc 3 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// bbd 4 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value + value;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// [\"aabaab\", \"aacaac\", \"aadaad\", \"bbcbbc\", \"bbdbbd\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-filter\"><a href=\"#Array-prototype-filter\" class=\"headerlink\" title=\"Array.prototype.filter()\"></a>Array.prototype.filter()</h3><ul>\n<li>数组遍历</li>\n<li>遍历每一个值</li>\n<li>遍历迭代函数须有返回值</li>\n<li>遍历数组每一个值，并根据迭代函数返回值放入新数组</li>\n<li>有返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, _this</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value, index, _this);</span><br><span class=\"line\">    <span class=\"comment\">// 2 0 [2, 4, 6, 8, 10]</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value &gt; <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// [6, 8, 10]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-reduce-Array-prototype-reduceRight\"><a href=\"#Array-prototype-reduce-Array-prototype-reduceRight\" class=\"headerlink\" title=\"Array.prototype.reduce() / Array.prototype.reduceRight()\"></a>Array.prototype.reduce() / Array.prototype.reduceRight()</h3><ul>\n<li>数组遍历</li>\n<li>遍历每一个值</li>\n<li>遍历迭代函数须有返回值</li>\n<li>有返回值</li>\n</ul>\n<p>这个我自己太熟了。真的熟的都不想写了~</p>\n<p>最常见的应用就是数字叠加求和。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cur,next,index,_this</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// this === window</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(cur, next, index, _this);</span><br><span class=\"line\">    <span class=\"comment\">// 4  2 0 [2, 5, 8, 9]</span></span><br><span class=\"line\">    <span class=\"comment\">// 6  5 1 [2, 5, 8, 9]</span></span><br><span class=\"line\">    <span class=\"comment\">// 11 8 2 [2, 5, 8, 9]</span></span><br><span class=\"line\">    <span class=\"comment\">// 19 9 3 [2, 5, 8, 9]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cur + next; <span class=\"comment\">// 将本轮初始值加上本轮遍历值 本轮迭代后的返回值，将作为下轮迭代的初始值</span></span><br><span class=\"line\">&#125;,<span class=\"number\">4</span>); <span class=\"comment\">// 初始值为4 </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// 28 (4+2+5+8+9)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组编辑\"><a href=\"#数组编辑\" class=\"headerlink\" title=\"数组编辑\"></a>数组编辑</h2><h3 id=\"Array-prototype-unshift\"><a href=\"#Array-prototype-unshift\" class=\"headerlink\" title=\"Array.prototype.unshift()\"></a>Array.prototype.unshift()</h3><ul>\n<li>数组开头插入</li>\n<li>有返回值（数组长度）</li>\n<li>改变原数组</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aa'</span>, <span class=\"string\">'bb'</span>, <span class=\"string\">'cc'</span>, <span class=\"string\">'dd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.unshift(<span class=\"number\">11</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, result);</span><br><span class=\"line\"><span class=\"comment\">// [11, 12, \"aa\", \"bb\", \"cc\", \"dd\"] 6</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-shift\"><a href=\"#Array-prototype-shift\" class=\"headerlink\" title=\"Array.prototype.shift()\"></a>Array.prototype.shift()</h3><ul>\n<li>数组开头删除</li>\n<li>有返回值（数组的第一个值）</li>\n<li>改变原数组</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aa'</span>, <span class=\"string\">'bb'</span>, <span class=\"string\">'cc'</span>, <span class=\"string\">'dd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.shift();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, result);</span><br><span class=\"line\"><span class=\"comment\">// [\"bb\", \"cc\", \"dd\"] \"aa\"</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-push\"><a href=\"#Array-prototype-push\" class=\"headerlink\" title=\"Array.prototype.push()\"></a>Array.prototype.push()</h3><ul>\n<li>数组结尾插入</li>\n<li>有返回值（数组长度）</li>\n<li>改变原数组</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aa'</span>, <span class=\"string\">'bb'</span>, <span class=\"string\">'cc'</span>, <span class=\"string\">'dd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.push(<span class=\"number\">21</span>, <span class=\"number\">22</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, result);</span><br><span class=\"line\"><span class=\"comment\">// [\"aa\", \"bb\", \"cc\", \"dd\", 21, 22] 6</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-pop\"><a href=\"#Array-prototype-pop\" class=\"headerlink\" title=\"Array.prototype.pop()\"></a>Array.prototype.pop()</h3><ul>\n<li>数组结尾删除</li>\n<li>有返回值（数组的最后一个值）</li>\n<li>改变原数组</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aa'</span>, <span class=\"string\">'bb'</span>, <span class=\"string\">'cc'</span>, <span class=\"string\">'dd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.pop();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, result);</span><br><span class=\"line\"><span class=\"comment\">// [\"aa\", \"bb\", \"cc\"] \"dd\"</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-concat\"><a href=\"#Array-prototype-concat\" class=\"headerlink\" title=\"Array.prototype.concat()\"></a>Array.prototype.concat()</h3><ul>\n<li>数组合并（不展开数组）</li>\n<li>有返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,[<span class=\"string\">'c1'</span>,<span class=\"string\">'c2'</span>]];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr1.concat(arr2);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3, \"a\", \"b\", [\"c1\", \"c2\"]]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1);</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);</span><br><span class=\"line\"><span class=\"comment\">// [\"a\", \"b\", [\"c1\", \"c2\"]]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-fill\"><a href=\"#Array-prototype-fill\" class=\"headerlink\" title=\"Array.prototype.fill()\"></a>Array.prototype.fill()</h3><ul>\n<li>数组填充</li>\n<li>改变原数组</li>\n<li>返回改变后的数组</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.fill(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// 填充'a'，从1位到2位，不含第2位</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// [1, \"a\", 3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// [1, \"a\", 3]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-splice\"><a href=\"#Array-prototype-splice\" class=\"headerlink\" title=\"Array.prototype.splice()\"></a>Array.prototype.splice()</h3><ul>\n<li>数组删除</li>\n<li>数组插入数据</li>\n<li>操作原数组</li>\n<li>有返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aab'</span>, <span class=\"string\">'aac'</span>, <span class=\"string\">'aad'</span>, <span class=\"string\">'bbc'</span>, <span class=\"string\">'bbd'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.splice(<span class=\"number\">2</span>, <span class=\"number\">1</span>); <span class=\"comment\">// 从2号位置，删除1个。</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, result);</span><br><span class=\"line\"><span class=\"comment\">// [\"aab\", \"aac\", \"bbc\", \"bbd\"] [\"aad\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result2 = arr.splice(<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"string\">'test'</span>, <span class=\"string\">'test2'</span>); <span class=\"comment\">// 从2号位置，删除0个，并在此位置增加test和test2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, result2);</span><br><span class=\"line\"><span class=\"comment\">// [\"aab\", \"aac\", \"test\", \"test2\", \"bbc\", \"bbd\"] []</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-slice\"><a href=\"#Array-prototype-slice\" class=\"headerlink\" title=\"Array.prototype.slice()\"></a>Array.prototype.slice()</h3><ul>\n<li>选取元素</li>\n<li>有返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aab'</span>, <span class=\"string\">'aac'</span>, <span class=\"string\">'aad'</span>, <span class=\"string\">'bbc'</span>, <span class=\"string\">'bbd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.slice(<span class=\"number\">2</span>, <span class=\"number\">4</span>); <span class=\"comment\">// 从2号位置，选取到4号位置（不含4号）</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, result);</span><br><span class=\"line\"><span class=\"comment\">// [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"] [\"aad\", \"bbc\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>我觉得\b最常见的用法是用于数组复制，或者在函数内将 <code>arguments</code> 转为数组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1,2,3,4];</span><br><span class=\"line\">var copies = arr.slice(0);</span><br><span class=\"line\">console.log(copies);</span><br><span class=\"line\"></span><br><span class=\"line\">var fn = function()&#123;</span><br><span class=\"line\">    var args = [].slice.call(arguments,0);</span><br><span class=\"line\">    console.log(args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(1,2,3,4);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组查找定位元素\"><a href=\"#数组查找定位元素\" class=\"headerlink\" title=\"数组查找定位元素\"></a>数组查找定位元素</h2><h3 id=\"Array-prototype-find\"><a href=\"#Array-prototype-find\" class=\"headerlink\" title=\"Array.prototype.find()\"></a>Array.prototype.find()</h3><ul>\n<li>查找符合要求的第一个元素值</li>\n<li>传入查找函数</li>\n<li>支持传入this指向</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">18</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.find(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v &gt; <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">//12</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-findIndex\"><a href=\"#Array-prototype-findIndex\" class=\"headerlink\" title=\"Array.prototype.findIndex()\"></a>Array.prototype.findIndex()</h3><ul>\n<li>查找符合要求的第一个元素的索引值</li>\n<li>传入查找函数</li>\n<li>支持传入this指向</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">18</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.findIndex(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v &gt; <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-includes\"><a href=\"#Array-prototype-includes\" class=\"headerlink\" title=\"Array.prototype.includes()\"></a>Array.prototype.includes()</h3><ul>\n<li>查找元素是否存在</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">18</span>, <span class=\"number\">22</span>, <span class=\"number\">35</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.includes(<span class=\"number\">12</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-indexOf-Array-prototype-lastIndexOf\"><a href=\"#Array-prototype-indexOf-Array-prototype-lastIndexOf\" class=\"headerlink\" title=\"Array.prototype.indexOf() / Array.prototype.lastIndexOf()\"></a>Array.prototype.indexOf() / Array.prototype.lastIndexOf()</h3><ul>\n<li>查找元素的索引值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">18</span>, <span class=\"number\">22</span>, <span class=\"number\">35</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.indexOf(<span class=\"number\">12</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组排序\"><a href=\"#数组排序\" class=\"headerlink\" title=\"数组排序\"></a>数组排序</h2><h3 id=\"Array-prototype-sort\"><a href=\"#Array-prototype-sort\" class=\"headerlink\" title=\"Array.prototype.sort()\"></a>Array.prototype.sort()</h3><ul>\n<li>正向排序</li>\n<li>支持传入排序函数</li>\n<li>排序函数必须有返回值</li>\n<li>修改原数组</li>\n<li>有返回值，为排序后结果</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jason'</span>,<span class=\"attr\">value</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">name</span>:<span class=\"string\">'john'</span>,<span class=\"attr\">value</span>:<span class=\"number\">0</span>&#125;]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> a.value - b.value;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// [&#123;name:'john',value:0&#125;,&#123;name:'jason',value:1&#125;]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// [&#123;name:'john',value:0&#125;,&#123;name:'jason',value:1&#125;]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-reverse\"><a href=\"#Array-prototype-reverse\" class=\"headerlink\" title=\"Array.prototype.reverse()\"></a>Array.prototype.reverse()</h3><ul>\n<li>反向排序</li>\n<li>不支持传函数</li>\n<li>直接修改数组</li>\n<li>有返回值（修改后的数组）</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"Array-prototype-join\"><a href=\"#Array-prototype-join\" class=\"headerlink\" title=\"Array.prototype.join()\"></a>Array.prototype.join()</h3><ul>\n<li>数组数据拼合</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aa'</span>, <span class=\"string\">'bb'</span>, <span class=\"string\">'cc'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.join(<span class=\"string\">'-'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// aa-bb-cc</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-keys-Array-prototype-values-Array-prototype-entries\"><a href=\"#Array-prototype-keys-Array-prototype-values-Array-prototype-entries\" class=\"headerlink\" title=\"Array.prototype.keys() / Array.prototype.values() / Array.prototype.entries()\"></a>Array.prototype.keys() / Array.prototype.values() / Array.prototype.entries()</h3><ul>\n<li>获取数组key / value</li>\n<li>有返回值（迭代器）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aab'</span>, <span class=\"string\">'aac'</span>, <span class=\"string\">'aad'</span>, <span class=\"string\">'bbc'</span>, <span class=\"string\">'bbd'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> keys = arr.keys();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> k <span class=\"keyword\">of</span> keys)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//迭代器只能用 for of，for in 事遍历不了的</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(k);</span><br><span class=\"line\">    <span class=\"comment\">// 0</span></span><br><span class=\"line\">    <span class=\"comment\">// 1</span></span><br><span class=\"line\">    <span class=\"comment\">// 2</span></span><br><span class=\"line\">    <span class=\"comment\">// 3</span></span><br><span class=\"line\">    <span class=\"comment\">// 4</span></span><br><span class=\"line\">    <span class=\"comment\">// 5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> entries = arr.entries();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> k <span class=\"keyword\">of</span> entries)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(k);</span><br><span class=\"line\">    <span class=\"comment\">// [0, \"aab\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// [1, \"aac\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// [2, \"aad\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// [3, \"bbc\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// [4, \"bbd\"]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>方法</th>\n<th align=\"center\">无返回</th>\n<th align=\"center\">返回非数组结果</th>\n<th align=\"center\">返回新数组</th>\n<th align=\"center\">操作原数组</th>\n<th align=\"center\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>迭代</td>\n<td>forEach</td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>every</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>some</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>map</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>filter</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>reduce</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>reduceRight</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>unshift</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\">修改原数组，返回长度</td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>shift</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\">修改原数组，返回其中一个值</td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>push</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\">修改原数组，返回长度</td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>pop</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\">修改原数组，返回其中一个值</td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>concat</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>fill</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\">O</td>\n<td align=\"center\">修改原数组，并返回该数组</td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>splice</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\">O</td>\n<td align=\"center\">原数组被修剪，返回修剪内容</td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>slice</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>查找</td>\n<td>find<br>findIndex<br>includes<br>lastIndexOf</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>排序</td>\n<td>sort</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>排序</td>\n<td>reverse</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>"},{"layout":"post","title":"前端 ajax 请求跨域处理","date":"2018-05-17T23:23:00.000Z","_content":"\n最近在做一个前后端分离的项目，业务管理平台。一个前端项目要对应多个后端接口地址，免不了各种跨域，查了一些资料，做一个小结。\n\n<!-- more -->\n\n## 什么是跨域\n\n或许，什么不是跨域更好来解释：\n\n比如网站A，请求了网站B （https://abc.com:8080/api/test）\n\n* 协议相同，比如 https\n* 域名相同，比如 abc.com（或者是 IP 相同）\n* 端口相同，比如 8080\n\n要注意的是，不仅仅是 js 可能跨域，css iframe 都有可能跨域。\n\n跨域主要限制在脚本（js css）请求上，对于 html 中加载资源，不算跨域。\n\n比如 网站A `http://abc.com`，有：\n\n```html\n<img src=\"http://12.34.56.78/xx.png\">\n<script src=\"https://cdn.abc.com/xx.js\"></script>\n```\n\n这些都不算做跨域。\n\n但是上面这个 js，只能往当前网站A 的 `http://abc.com` 下发送请求，否则就算跨域。\n\n也就是说，当前网站地址是啥，就只能往哪里发送请求（iframe 不再考虑范围内）。\n\n**跨域的重点说明：**\n\n跨域发出的请求，是默认放行而且可以成功的，因为浏览器不清楚服务器端是否支持跨域。\n\n但是成功的请求，如果跨域了，是不会回调 js 代码的，这个是浏览器的保护机制。所以，下文的预请求原因很关键。\n\n## 说明\n\n前端的话，主要以 `jQuery` 或 `axios` 为例。\n\n由于后端代码实现语言不同，故这里只说接口的响应头应该带有哪些信息，具体实现方法或者框架（库 / 包）请自行搜索。主要关注 `cors` `headers` 关键词。本文以 nodejs 的 `koa2` 框架为例。\n\n比如 JAVA spring 框架，可以考虑 ：\n\n```java\nresponse.setHeader(\"Access-Control-Allow-Origin\", \"*\")\n```\n\n也可以考虑注解形式（`@CrossOrigin`），好像是 4.2 之后的版本开始支持注解。\n\n演示代码在这里：[Github](https://github.com/yukapril/learning/tree/master/cross-domain)\n\n以下约定：\n\n前端页面使用：http://127.0.0.1:3100\n\n后端接口使用：http://localhost:3000\n\n这样故意制造跨域。\n\n此外，本文指的是真真正的的跨域，访问真正的数据接口，而不是 JSONP 接口。\n\n## 简单的跨域处理\n\n简单的跨域主要指发起了简单的请求。\n\n满足简单请求的要求是：\n\n1. 只能是 `GET` `POST` `HEAD` 请求方法。而且如果是 `POST` 的话，发送数据类型必须是 `application/x-www-form-urlencoded`、`multipart/form-data`、`text/plain` 之一，其他类型不可以。\n2. 不能自定义请求头，比如加上 `x-token` 什么的。当然也不能带上 `cookie`。\n\n实现跨域非常简单，后端接口需要返回以下一个响应头即可：\n\n```js\nctx.set('Access-Control-Allow-Origin', 'http://127.0.0.1:3000') // 可以用 * 代替网址\n```\n\n**前端代码无需特殊处理，即可正常接收数据。例子参考 DEMO1。**\n\n或许你见过 `ctx.set('Access-Control-Allow-Methods', 'GET, POST, HEAD, DELETE, OPTIONS')` 这种写法，我们这就来说。\n\n上面的简单跨域，只能是 `GET` `POST` `HEAD` 方法，如果我是 RESTful 风格的接口，偏偏要用 `DELETE` 怎么办？\n\n或者，我们交互数据，默认类型不是表单格式 `application/x-www-form-urlencoded`，是 `application/json` 格式？\n\n再或者，需要上送特殊的请求头，比如 `x-token` ？\n\n这时候，就是非简单的请求了。\n\n## 高级跨域处理（预请求）\n\n上面说到了非简单请求，这种请求有个特点，要先发送一次请求，查一下服务器支持那些特性。这个是通过 `OPTIONS` 方法请求出去的。\n\n为什么要有预请求？\n\n> 假设你要跨域删除一条数据，使用 `DELETE` 方法。\n>\n> 此时你请求发出去了，服务器正常处理删除了数据。但是由于跨域，导致了前端代码无法成功接收到状态，也就无法进行后续处理，对于操作的用户，不知道是否成功了。\n>\n> 那么，用户可能会反复进行删除，或者进行了更进一步错误的操作。\n>\n> 这就麻烦了，跨域请求发出去了，也成功了，但是前端代码收不到结果...\n>\n> 所以，在发送 `DELETE` 请求前，先发送一个 `OPTIONS` 方法的请求，确认下能否跨域，如果可以的话，在发送第二条真正的删除请求。否则，第二条干脆就不发送了。这样就不会遇到上面的问题了。\n\n**所以，预请求用来查明该站点是否允许跨域请求，这样可以避免跨域请求可能带来的数据破坏。**\n\n这种情况实现也还好，不过要注意需要实现 `OPTIONS` 方法：\n\n```js\nrouter.options('/deleteData', (ctx, next) => {\n  ctx.set('Access-Control-Allow-Origin', 'http://127.0.0.1:3000')\n  ctx.set('Access-Control-Allow-Methods', 'GET, POST, HEAD, DELETE, OPTIONS')\n  ctx.set('Access-Control-Allow-Headers', 'x-token')\n  // OPTIONS 方法不需要返回任何实体内容，而且应该与最终调用的方法返回的头信息保持一致\n})\n\nrouter.delete('/deleteData', (ctx, next) => {\n  ctx.set('Access-Control-Allow-Origin', 'http://127.0.0.1:3000')\n  ctx.set('Access-Control-Allow-Methods', 'GET, POST, HEAD, DELETE, OPTIONS')\n  ctx.set('Access-Control-Allow-Headers', 'x-token')\n  // ...\n})\n```\n\n**前端代码的话，都还是正常写就可以了。不需要加任何额外的参数属性。例子参考 DEMO2。**\n\n对于上面的允许的 Headers 头部配置，这个含义是可以支持带有 `x-token` 的请求，当然你不带上也是可以的。但是你带上了其他字段，比如 `x-abc`，那么就不行了。\n\n## 带 cookie 的请求\n\n上面的两个例子，对于跨域来说，基本上能解决很多问题，比如请求第三方查天气接口，每次请求带上自己的 key 就可以了。跨域处理起来也不算太难。\n\n下面开始说说复杂一点的。\n\n需求是这样的：\n\n* 前后端分离项目，不部署在一起。为了和代码统一，下文用本地环境说明\n\n* 前端域名A（http://127.0.0.1:3000），后端接口域名B（http://localhost:3100）\n\n* 前端要先调用登录接口，同时接口会返回状态，并写入 `cookie` （其实就是 `session`）\n\n* 前端调用其他接口，需要带上当前的 `cookie`（这样后端相当于知道了 `session` 就知道是谁了），才可以获取数据\n\n这次就必须前后端都要修改代码了。\n\n#### 首先是前端部分，相对简单一些：\n\n```js\n    $.ajax({\n      url: 'http://localhost:3100/login',\n      type: 'post',\n      xhrFields: {\n        withCredentials: true\n      }\n    })\n```\n\n需要增加 `withCredentials` 字段，axios 也是需要设置此字段。\n\n**只有设置 `withCredentials` 字段，才能发送/接收 cookie**。比如上面的这个登录接口，虽然不需要上送 cookie，但是要接收后端的响应头 `Set-Cookie`，所以登录接口就必须开启。\n\n可以在控制台中查看下，跨域请求 http://localhost:3100/login，返回时候有响应头：\n\n```\nSet-Cookie: SESSION=123456789; path=/; httponly\n```\n\n这个 cookie 是属于 localhost 域名下的，**所以在 http://127.0.0.1:3000 下查看 cookie 是看不到的**。\n\n如果非要想看下，那么只能访问 http://localhost:3000，然后在控制台中查阅 Application 选项卡内容。\n\n后续请求数据的接口亦如此，否则不能上送登录接口获取到的 cookie。\n\n#### 后端部分\n\n```js\nrouter.post('/login', (ctx, next) => {\n  ctx.set('Access-Control-Allow-Origin', 'http://127.0.0.1:3000')\n  ctx.set('Access-Control-Allow-Credentials', true)\n  ctx.cookies.set('SESSION', '123456789')\n  ctx.body = {code: 0, data: 'login ok!'}\n  next()\n})\n\nrouter.post('/loginedData', (ctx, next) => {\n  ctx.set('Access-Control-Allow-Origin', 'http://127.0.0.1:3000')\n  ctx.set('Access-Control-Allow-Credentials', true)\n  ctx.body = {code: 0, data: ctx.headers}\n  next()\n})\n```\n\n后端部分，难度不大， 但是要注意几点：\n\n* `Access-Control-Allow-Origin` 不可以是 `*` （星号），必须是具体网站地址\n* `Access-Control-Allow-Credentials` 必须配置为 `true`\n* 如果是非简单请求，还需要像 DEMO2 一样，返回 `Access-Control-Allow-Methods` 字段\n* 如果是非简单请求，注意实现 `OPTIONS` 方法，这个例子是简单请求，所以就没实现 `OPTIONS`\n\n## 总结\n\n#### 前端\n\n1. 标准的 ajax 跨域请求，只要不需要带上cookie，那么和常规 ajax 写法一样，不需要额外加任何参数；\n2. 如果 ajax 要带上 cookie 进行跨域，那么必须增加 `withCredentials` 字段。\n\n#### 后端\n\n1. 请使用封装好的库、插件、组件等，本文以上内容，基本上都可以直接用插件直接解决，不需要自己手动配置；\n\n2. 非要手动配置，可以参考如下方案配置：\n\n* 只要是跨域，就必须增加 `Access-Control-Allow-Origin` \n\n* 需要带上（处理）cookie，就必须增加 `Access-Control-Allow-Credentials`，而且 `Access-Control-Allow-Origin` 不可以设置为 `*`\n\n* 请求是简单请求吗？简单请求的定义参考上文 “简单的跨域处理” 部分。是的话不需要其他字段了，不是的话，根据情况增加字段：\n\n  | 响应头                            | 解释         | 备注                                       |\n  | ------------------------------ | ---------- | ---------------------------------------- |\n  | `Access-Control-Allow-Methods` | 服务器接受那些方法  | 不配置的话，默认相当于 \"HEAD, GET, POST\"            |\n  | `Access-Control-Allow-Headers` | 服务器接受那些请求头 | 请求中带有或不带有此字段，可以成功；请求中带有其他字段，整个请求失败（没有通过 `OPTIONS` 请求） |\n\n  其他响应头，建议搜索查表。我认为用的很少，就不列举了。\n\n## 参考文章\n\n[跨域的那些事儿](https://zhuanlan.zhihu.com/p/28562290)\n\n[CORS详解](https://github.com/hstarorg/HstarDoc/blob/master/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/CORS%E8%AF%A6%E8%A7%A3.md)\n\n[跨域资源共享 CORS 详解](http://www.ruanyifeng.com/blog/2016/04/cors.html)\n\n[HTTP Headers - MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers)","source":"_posts/2018/2018-05-17-cross-domain.md","raw":"---\nlayout: post\ntitle: \"前端 ajax 请求跨域处理\"\ndate: 2018-05-17 23:23:00 GMT+0000\ncategories: [前端]\ntags:  [cross domain,ajax,jquery,axios]\n---\n\n最近在做一个前后端分离的项目，业务管理平台。一个前端项目要对应多个后端接口地址，免不了各种跨域，查了一些资料，做一个小结。\n\n<!-- more -->\n\n## 什么是跨域\n\n或许，什么不是跨域更好来解释：\n\n比如网站A，请求了网站B （https://abc.com:8080/api/test）\n\n* 协议相同，比如 https\n* 域名相同，比如 abc.com（或者是 IP 相同）\n* 端口相同，比如 8080\n\n要注意的是，不仅仅是 js 可能跨域，css iframe 都有可能跨域。\n\n跨域主要限制在脚本（js css）请求上，对于 html 中加载资源，不算跨域。\n\n比如 网站A `http://abc.com`，有：\n\n```html\n<img src=\"http://12.34.56.78/xx.png\">\n<script src=\"https://cdn.abc.com/xx.js\"></script>\n```\n\n这些都不算做跨域。\n\n但是上面这个 js，只能往当前网站A 的 `http://abc.com` 下发送请求，否则就算跨域。\n\n也就是说，当前网站地址是啥，就只能往哪里发送请求（iframe 不再考虑范围内）。\n\n**跨域的重点说明：**\n\n跨域发出的请求，是默认放行而且可以成功的，因为浏览器不清楚服务器端是否支持跨域。\n\n但是成功的请求，如果跨域了，是不会回调 js 代码的，这个是浏览器的保护机制。所以，下文的预请求原因很关键。\n\n## 说明\n\n前端的话，主要以 `jQuery` 或 `axios` 为例。\n\n由于后端代码实现语言不同，故这里只说接口的响应头应该带有哪些信息，具体实现方法或者框架（库 / 包）请自行搜索。主要关注 `cors` `headers` 关键词。本文以 nodejs 的 `koa2` 框架为例。\n\n比如 JAVA spring 框架，可以考虑 ：\n\n```java\nresponse.setHeader(\"Access-Control-Allow-Origin\", \"*\")\n```\n\n也可以考虑注解形式（`@CrossOrigin`），好像是 4.2 之后的版本开始支持注解。\n\n演示代码在这里：[Github](https://github.com/yukapril/learning/tree/master/cross-domain)\n\n以下约定：\n\n前端页面使用：http://127.0.0.1:3100\n\n后端接口使用：http://localhost:3000\n\n这样故意制造跨域。\n\n此外，本文指的是真真正的的跨域，访问真正的数据接口，而不是 JSONP 接口。\n\n## 简单的跨域处理\n\n简单的跨域主要指发起了简单的请求。\n\n满足简单请求的要求是：\n\n1. 只能是 `GET` `POST` `HEAD` 请求方法。而且如果是 `POST` 的话，发送数据类型必须是 `application/x-www-form-urlencoded`、`multipart/form-data`、`text/plain` 之一，其他类型不可以。\n2. 不能自定义请求头，比如加上 `x-token` 什么的。当然也不能带上 `cookie`。\n\n实现跨域非常简单，后端接口需要返回以下一个响应头即可：\n\n```js\nctx.set('Access-Control-Allow-Origin', 'http://127.0.0.1:3000') // 可以用 * 代替网址\n```\n\n**前端代码无需特殊处理，即可正常接收数据。例子参考 DEMO1。**\n\n或许你见过 `ctx.set('Access-Control-Allow-Methods', 'GET, POST, HEAD, DELETE, OPTIONS')` 这种写法，我们这就来说。\n\n上面的简单跨域，只能是 `GET` `POST` `HEAD` 方法，如果我是 RESTful 风格的接口，偏偏要用 `DELETE` 怎么办？\n\n或者，我们交互数据，默认类型不是表单格式 `application/x-www-form-urlencoded`，是 `application/json` 格式？\n\n再或者，需要上送特殊的请求头，比如 `x-token` ？\n\n这时候，就是非简单的请求了。\n\n## 高级跨域处理（预请求）\n\n上面说到了非简单请求，这种请求有个特点，要先发送一次请求，查一下服务器支持那些特性。这个是通过 `OPTIONS` 方法请求出去的。\n\n为什么要有预请求？\n\n> 假设你要跨域删除一条数据，使用 `DELETE` 方法。\n>\n> 此时你请求发出去了，服务器正常处理删除了数据。但是由于跨域，导致了前端代码无法成功接收到状态，也就无法进行后续处理，对于操作的用户，不知道是否成功了。\n>\n> 那么，用户可能会反复进行删除，或者进行了更进一步错误的操作。\n>\n> 这就麻烦了，跨域请求发出去了，也成功了，但是前端代码收不到结果...\n>\n> 所以，在发送 `DELETE` 请求前，先发送一个 `OPTIONS` 方法的请求，确认下能否跨域，如果可以的话，在发送第二条真正的删除请求。否则，第二条干脆就不发送了。这样就不会遇到上面的问题了。\n\n**所以，预请求用来查明该站点是否允许跨域请求，这样可以避免跨域请求可能带来的数据破坏。**\n\n这种情况实现也还好，不过要注意需要实现 `OPTIONS` 方法：\n\n```js\nrouter.options('/deleteData', (ctx, next) => {\n  ctx.set('Access-Control-Allow-Origin', 'http://127.0.0.1:3000')\n  ctx.set('Access-Control-Allow-Methods', 'GET, POST, HEAD, DELETE, OPTIONS')\n  ctx.set('Access-Control-Allow-Headers', 'x-token')\n  // OPTIONS 方法不需要返回任何实体内容，而且应该与最终调用的方法返回的头信息保持一致\n})\n\nrouter.delete('/deleteData', (ctx, next) => {\n  ctx.set('Access-Control-Allow-Origin', 'http://127.0.0.1:3000')\n  ctx.set('Access-Control-Allow-Methods', 'GET, POST, HEAD, DELETE, OPTIONS')\n  ctx.set('Access-Control-Allow-Headers', 'x-token')\n  // ...\n})\n```\n\n**前端代码的话，都还是正常写就可以了。不需要加任何额外的参数属性。例子参考 DEMO2。**\n\n对于上面的允许的 Headers 头部配置，这个含义是可以支持带有 `x-token` 的请求，当然你不带上也是可以的。但是你带上了其他字段，比如 `x-abc`，那么就不行了。\n\n## 带 cookie 的请求\n\n上面的两个例子，对于跨域来说，基本上能解决很多问题，比如请求第三方查天气接口，每次请求带上自己的 key 就可以了。跨域处理起来也不算太难。\n\n下面开始说说复杂一点的。\n\n需求是这样的：\n\n* 前后端分离项目，不部署在一起。为了和代码统一，下文用本地环境说明\n\n* 前端域名A（http://127.0.0.1:3000），后端接口域名B（http://localhost:3100）\n\n* 前端要先调用登录接口，同时接口会返回状态，并写入 `cookie` （其实就是 `session`）\n\n* 前端调用其他接口，需要带上当前的 `cookie`（这样后端相当于知道了 `session` 就知道是谁了），才可以获取数据\n\n这次就必须前后端都要修改代码了。\n\n#### 首先是前端部分，相对简单一些：\n\n```js\n    $.ajax({\n      url: 'http://localhost:3100/login',\n      type: 'post',\n      xhrFields: {\n        withCredentials: true\n      }\n    })\n```\n\n需要增加 `withCredentials` 字段，axios 也是需要设置此字段。\n\n**只有设置 `withCredentials` 字段，才能发送/接收 cookie**。比如上面的这个登录接口，虽然不需要上送 cookie，但是要接收后端的响应头 `Set-Cookie`，所以登录接口就必须开启。\n\n可以在控制台中查看下，跨域请求 http://localhost:3100/login，返回时候有响应头：\n\n```\nSet-Cookie: SESSION=123456789; path=/; httponly\n```\n\n这个 cookie 是属于 localhost 域名下的，**所以在 http://127.0.0.1:3000 下查看 cookie 是看不到的**。\n\n如果非要想看下，那么只能访问 http://localhost:3000，然后在控制台中查阅 Application 选项卡内容。\n\n后续请求数据的接口亦如此，否则不能上送登录接口获取到的 cookie。\n\n#### 后端部分\n\n```js\nrouter.post('/login', (ctx, next) => {\n  ctx.set('Access-Control-Allow-Origin', 'http://127.0.0.1:3000')\n  ctx.set('Access-Control-Allow-Credentials', true)\n  ctx.cookies.set('SESSION', '123456789')\n  ctx.body = {code: 0, data: 'login ok!'}\n  next()\n})\n\nrouter.post('/loginedData', (ctx, next) => {\n  ctx.set('Access-Control-Allow-Origin', 'http://127.0.0.1:3000')\n  ctx.set('Access-Control-Allow-Credentials', true)\n  ctx.body = {code: 0, data: ctx.headers}\n  next()\n})\n```\n\n后端部分，难度不大， 但是要注意几点：\n\n* `Access-Control-Allow-Origin` 不可以是 `*` （星号），必须是具体网站地址\n* `Access-Control-Allow-Credentials` 必须配置为 `true`\n* 如果是非简单请求，还需要像 DEMO2 一样，返回 `Access-Control-Allow-Methods` 字段\n* 如果是非简单请求，注意实现 `OPTIONS` 方法，这个例子是简单请求，所以就没实现 `OPTIONS`\n\n## 总结\n\n#### 前端\n\n1. 标准的 ajax 跨域请求，只要不需要带上cookie，那么和常规 ajax 写法一样，不需要额外加任何参数；\n2. 如果 ajax 要带上 cookie 进行跨域，那么必须增加 `withCredentials` 字段。\n\n#### 后端\n\n1. 请使用封装好的库、插件、组件等，本文以上内容，基本上都可以直接用插件直接解决，不需要自己手动配置；\n\n2. 非要手动配置，可以参考如下方案配置：\n\n* 只要是跨域，就必须增加 `Access-Control-Allow-Origin` \n\n* 需要带上（处理）cookie，就必须增加 `Access-Control-Allow-Credentials`，而且 `Access-Control-Allow-Origin` 不可以设置为 `*`\n\n* 请求是简单请求吗？简单请求的定义参考上文 “简单的跨域处理” 部分。是的话不需要其他字段了，不是的话，根据情况增加字段：\n\n  | 响应头                            | 解释         | 备注                                       |\n  | ------------------------------ | ---------- | ---------------------------------------- |\n  | `Access-Control-Allow-Methods` | 服务器接受那些方法  | 不配置的话，默认相当于 \"HEAD, GET, POST\"            |\n  | `Access-Control-Allow-Headers` | 服务器接受那些请求头 | 请求中带有或不带有此字段，可以成功；请求中带有其他字段，整个请求失败（没有通过 `OPTIONS` 请求） |\n\n  其他响应头，建议搜索查表。我认为用的很少，就不列举了。\n\n## 参考文章\n\n[跨域的那些事儿](https://zhuanlan.zhihu.com/p/28562290)\n\n[CORS详解](https://github.com/hstarorg/HstarDoc/blob/master/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/CORS%E8%AF%A6%E8%A7%A3.md)\n\n[跨域资源共享 CORS 详解](http://www.ruanyifeng.com/blog/2016/04/cors.html)\n\n[HTTP Headers - MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers)","slug":"2018-2018-05-17-cross-domain","published":1,"updated":"2019-07-18T17:19:07.175Z","comments":1,"photos":[],"link":"","_id":"cjy8y72v200c5s21d8l5nj3xr","content":"<p>最近在做一个前后端分离的项目，业务管理平台。一个前端项目要对应多个后端接口地址，免不了各种跨域，查了一些资料，做一个小结。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"什么是跨域\"><a href=\"#什么是跨域\" class=\"headerlink\" title=\"什么是跨域\"></a>什么是跨域</h2><p>或许，什么不是跨域更好来解释：</p>\n<p>比如网站A，请求了网站B （<a href=\"https://abc.com:8080/api/test）\" target=\"_blank\" rel=\"noopener\">https://abc.com:8080/api/test）</a></p>\n<ul>\n<li>协议相同，比如 https</li>\n<li>域名相同，比如 abc.com（或者是 IP 相同）</li>\n<li>端口相同，比如 8080</li>\n</ul>\n<p>要注意的是，不仅仅是 js 可能跨域，css iframe 都有可能跨域。</p>\n<p>跨域主要限制在脚本（js css）请求上，对于 html 中加载资源，不算跨域。</p>\n<p>比如 网站A <code>http://abc.com</code>，有：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://12.34.56.78/xx.png\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.abc.com/xx.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这些都不算做跨域。</p>\n<p>但是上面这个 js，只能往当前网站A 的 <code>http://abc.com</code> 下发送请求，否则就算跨域。</p>\n<p>也就是说，当前网站地址是啥，就只能往哪里发送请求（iframe 不再考虑范围内）。</p>\n<p><strong>跨域的重点说明：</strong></p>\n<p>跨域发出的请求，是默认放行而且可以成功的，因为浏览器不清楚服务器端是否支持跨域。</p>\n<p>但是成功的请求，如果跨域了，是不会回调 js 代码的，这个是浏览器的保护机制。所以，下文的预请求原因很关键。</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>前端的话，主要以 <code>jQuery</code> 或 <code>axios</code> 为例。</p>\n<p>由于后端代码实现语言不同，故这里只说接口的响应头应该带有哪些信息，具体实现方法或者框架（库 / 包）请自行搜索。主要关注 <code>cors</code> <code>headers</code> 关键词。本文以 nodejs 的 <code>koa2</code> 框架为例。</p>\n<p>比如 JAVA spring 框架，可以考虑 ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>也可以考虑注解形式（<code>@CrossOrigin</code>），好像是 4.2 之后的版本开始支持注解。</p>\n<p>演示代码在这里：<a href=\"https://github.com/yukapril/learning/tree/master/cross-domain\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>以下约定：</p>\n<p>前端页面使用：<a href=\"http://127.0.0.1:3100\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:3100</a></p>\n<p>后端接口使用：<a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a></p>\n<p>这样故意制造跨域。</p>\n<p>此外，本文指的是真真正的的跨域，访问真正的数据接口，而不是 JSONP 接口。</p>\n<h2 id=\"简单的跨域处理\"><a href=\"#简单的跨域处理\" class=\"headerlink\" title=\"简单的跨域处理\"></a>简单的跨域处理</h2><p>简单的跨域主要指发起了简单的请求。</p>\n<p>满足简单请求的要求是：</p>\n<ol>\n<li>只能是 <code>GET</code> <code>POST</code> <code>HEAD</code> 请求方法。而且如果是 <code>POST</code> 的话，发送数据类型必须是 <code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code> 之一，其他类型不可以。</li>\n<li>不能自定义请求头，比如加上 <code>x-token</code> 什么的。当然也不能带上 <code>cookie</code>。</li>\n</ol>\n<p>实现跨域非常简单，后端接口需要返回以下一个响应头即可：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.set(<span class=\"string\">'Access-Control-Allow-Origin'</span>, <span class=\"string\">'http://127.0.0.1:3000'</span>) <span class=\"comment\">// 可以用 * 代替网址</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>前端代码无需特殊处理，即可正常接收数据。例子参考 DEMO1。</strong></p>\n<p>或许你见过 <code>ctx.set(&#39;Access-Control-Allow-Methods&#39;, &#39;GET, POST, HEAD, DELETE, OPTIONS&#39;)</code> 这种写法，我们这就来说。</p>\n<p>上面的简单跨域，只能是 <code>GET</code> <code>POST</code> <code>HEAD</code> 方法，如果我是 RESTful 风格的接口，偏偏要用 <code>DELETE</code> 怎么办？</p>\n<p>或者，我们交互数据，默认类型不是表单格式 <code>application/x-www-form-urlencoded</code>，是 <code>application/json</code> 格式？</p>\n<p>再或者，需要上送特殊的请求头，比如 <code>x-token</code> ？</p>\n<p>这时候，就是非简单的请求了。</p>\n<h2 id=\"高级跨域处理（预请求）\"><a href=\"#高级跨域处理（预请求）\" class=\"headerlink\" title=\"高级跨域处理（预请求）\"></a>高级跨域处理（预请求）</h2><p>上面说到了非简单请求，这种请求有个特点，要先发送一次请求，查一下服务器支持那些特性。这个是通过 <code>OPTIONS</code> 方法请求出去的。</p>\n<p>为什么要有预请求？</p>\n<blockquote>\n<p>假设你要跨域删除一条数据，使用 <code>DELETE</code> 方法。</p>\n<p>此时你请求发出去了，服务器正常处理删除了数据。但是由于跨域，导致了前端代码无法成功接收到状态，也就无法进行后续处理，对于操作的用户，不知道是否成功了。</p>\n<p>那么，用户可能会反复进行删除，或者进行了更进一步错误的操作。</p>\n<p>这就麻烦了，跨域请求发出去了，也成功了，但是前端代码收不到结果…</p>\n<p>所以，在发送 <code>DELETE</code> 请求前，先发送一个 <code>OPTIONS</code> 方法的请求，确认下能否跨域，如果可以的话，在发送第二条真正的删除请求。否则，第二条干脆就不发送了。这样就不会遇到上面的问题了。</p>\n</blockquote>\n<p><strong>所以，预请求用来查明该站点是否允许跨域请求，这样可以避免跨域请求可能带来的数据破坏。</strong></p>\n<p>这种情况实现也还好，不过要注意需要实现 <code>OPTIONS</code> 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.options(<span class=\"string\">'/deleteData'</span>, (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Origin'</span>, <span class=\"string\">'http://127.0.0.1:3000'</span>)</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Methods'</span>, <span class=\"string\">'GET, POST, HEAD, DELETE, OPTIONS'</span>)</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Headers'</span>, <span class=\"string\">'x-token'</span>)</span><br><span class=\"line\">  <span class=\"comment\">// OPTIONS 方法不需要返回任何实体内容，而且应该与最终调用的方法返回的头信息保持一致</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.delete(<span class=\"string\">'/deleteData'</span>, (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Origin'</span>, <span class=\"string\">'http://127.0.0.1:3000'</span>)</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Methods'</span>, <span class=\"string\">'GET, POST, HEAD, DELETE, OPTIONS'</span>)</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Headers'</span>, <span class=\"string\">'x-token'</span>)</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>前端代码的话，都还是正常写就可以了。不需要加任何额外的参数属性。例子参考 DEMO2。</strong></p>\n<p>对于上面的允许的 Headers 头部配置，这个含义是可以支持带有 <code>x-token</code> 的请求，当然你不带上也是可以的。但是你带上了其他字段，比如 <code>x-abc</code>，那么就不行了。</p>\n<h2 id=\"带-cookie-的请求\"><a href=\"#带-cookie-的请求\" class=\"headerlink\" title=\"带 cookie 的请求\"></a>带 cookie 的请求</h2><p>上面的两个例子，对于跨域来说，基本上能解决很多问题，比如请求第三方查天气接口，每次请求带上自己的 key 就可以了。跨域处理起来也不算太难。</p>\n<p>下面开始说说复杂一点的。</p>\n<p>需求是这样的：</p>\n<ul>\n<li><p>前后端分离项目，不部署在一起。为了和代码统一，下文用本地环境说明</p>\n</li>\n<li><p>前端域名A（<a href=\"http://127.0.0.1:3000），后端接口域名B（http://localhost:3100）\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:3000），后端接口域名B（http://localhost:3100）</a></p>\n</li>\n<li><p>前端要先调用登录接口，同时接口会返回状态，并写入 <code>cookie</code> （其实就是 <code>session</code>）</p>\n</li>\n<li><p>前端调用其他接口，需要带上当前的 <code>cookie</code>（这样后端相当于知道了 <code>session</code> 就知道是谁了），才可以获取数据</p>\n</li>\n</ul>\n<p>这次就必须前后端都要修改代码了。</p>\n<h4 id=\"首先是前端部分，相对简单一些：\"><a href=\"#首先是前端部分，相对简单一些：\" class=\"headerlink\" title=\"首先是前端部分，相对简单一些：\"></a>首先是前端部分，相对简单一些：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  url: <span class=\"string\">'http://localhost:3100/login'</span>,</span><br><span class=\"line\">  type: <span class=\"string\">'post'</span>,</span><br><span class=\"line\">  xhrFields: &#123;</span><br><span class=\"line\">    withCredentials: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>需要增加 <code>withCredentials</code> 字段，axios 也是需要设置此字段。</p>\n<p><strong>只有设置 <code>withCredentials</code> 字段，才能发送/接收 cookie</strong>。比如上面的这个登录接口，虽然不需要上送 cookie，但是要接收后端的响应头 <code>Set-Cookie</code>，所以登录接口就必须开启。</p>\n<p>可以在控制台中查看下，跨域请求 <a href=\"http://localhost:3100/login，返回时候有响应头：\" target=\"_blank\" rel=\"noopener\">http://localhost:3100/login，返回时候有响应头：</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-Cookie: SESSION=123456789; path=/; httponly</span><br></pre></td></tr></table></figure>\n\n<p>这个 cookie 是属于 localhost 域名下的，<strong>所以在 <a href=\"http://127.0.0.1:3000\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:3000</a> 下查看 cookie 是看不到的</strong>。</p>\n<p>如果非要想看下，那么只能访问 <a href=\"http://localhost:3000，然后在控制台中查阅\" target=\"_blank\" rel=\"noopener\">http://localhost:3000，然后在控制台中查阅</a> Application 选项卡内容。</p>\n<p>后续请求数据的接口亦如此，否则不能上送登录接口获取到的 cookie。</p>\n<h4 id=\"后端部分\"><a href=\"#后端部分\" class=\"headerlink\" title=\"后端部分\"></a>后端部分</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.post(<span class=\"string\">'/login'</span>, (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Origin'</span>, <span class=\"string\">'http://127.0.0.1:3000'</span>)</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Credentials'</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">  ctx.cookies.set(<span class=\"string\">'SESSION'</span>, <span class=\"string\">'123456789'</span>)</span><br><span class=\"line\">  ctx.body = &#123;<span class=\"attr\">code</span>: <span class=\"number\">0</span>, <span class=\"attr\">data</span>: <span class=\"string\">'login ok!'</span>&#125;</span><br><span class=\"line\">  next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/loginedData'</span>, (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Origin'</span>, <span class=\"string\">'http://127.0.0.1:3000'</span>)</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Credentials'</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">  ctx.body = &#123;<span class=\"attr\">code</span>: <span class=\"number\">0</span>, <span class=\"attr\">data</span>: ctx.headers&#125;</span><br><span class=\"line\">  next()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>后端部分，难度不大， 但是要注意几点：</p>\n<ul>\n<li><code>Access-Control-Allow-Origin</code> 不可以是 <code>*</code> （星号），必须是具体网站地址</li>\n<li><code>Access-Control-Allow-Credentials</code> 必须配置为 <code>true</code></li>\n<li>如果是非简单请求，还需要像 DEMO2 一样，返回 <code>Access-Control-Allow-Methods</code> 字段</li>\n<li>如果是非简单请求，注意实现 <code>OPTIONS</code> 方法，这个例子是简单请求，所以就没实现 <code>OPTIONS</code></li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h4 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h4><ol>\n<li>标准的 ajax 跨域请求，只要不需要带上cookie，那么和常规 ajax 写法一样，不需要额外加任何参数；</li>\n<li>如果 ajax 要带上 cookie 进行跨域，那么必须增加 <code>withCredentials</code> 字段。</li>\n</ol>\n<h4 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h4><ol>\n<li><p>请使用封装好的库、插件、组件等，本文以上内容，基本上都可以直接用插件直接解决，不需要自己手动配置；</p>\n</li>\n<li><p>非要手动配置，可以参考如下方案配置：</p>\n</li>\n</ol>\n<ul>\n<li><p>只要是跨域，就必须增加 <code>Access-Control-Allow-Origin</code> </p>\n</li>\n<li><p>需要带上（处理）cookie，就必须增加 <code>Access-Control-Allow-Credentials</code>，而且 <code>Access-Control-Allow-Origin</code> 不可以设置为 <code>*</code></p>\n</li>\n<li><p>请求是简单请求吗？简单请求的定义参考上文 “简单的跨域处理” 部分。是的话不需要其他字段了，不是的话，根据情况增加字段：</p>\n<table>\n<thead>\n<tr>\n<th>响应头</th>\n<th>解释</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Access-Control-Allow-Methods</code></td>\n<td>服务器接受那些方法</td>\n<td>不配置的话，默认相当于 “HEAD, GET, POST”</td>\n</tr>\n<tr>\n<td><code>Access-Control-Allow-Headers</code></td>\n<td>服务器接受那些请求头</td>\n<td>请求中带有或不带有此字段，可以成功；请求中带有其他字段，整个请求失败（没有通过 <code>OPTIONS</code> 请求）</td>\n</tr>\n</tbody></table>\n<p>其他响应头，建议搜索查表。我认为用的很少，就不列举了。</p>\n</li>\n</ul>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://zhuanlan.zhihu.com/p/28562290\" target=\"_blank\" rel=\"noopener\">跨域的那些事儿</a></p>\n<p><a href=\"https://github.com/hstarorg/HstarDoc/blob/master/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/CORS%E8%AF%A6%E8%A7%A3.md\" target=\"_blank\" rel=\"noopener\">CORS详解</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\" target=\"_blank\" rel=\"noopener\">跨域资源共享 CORS 详解</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers\" target=\"_blank\" rel=\"noopener\">HTTP Headers - MDN</a></p>\n","site":{"data":{}},"excerpt":"<p>最近在做一个前后端分离的项目，业务管理平台。一个前端项目要对应多个后端接口地址，免不了各种跨域，查了一些资料，做一个小结。</p>","more":"<h2 id=\"什么是跨域\"><a href=\"#什么是跨域\" class=\"headerlink\" title=\"什么是跨域\"></a>什么是跨域</h2><p>或许，什么不是跨域更好来解释：</p>\n<p>比如网站A，请求了网站B （<a href=\"https://abc.com:8080/api/test）\" target=\"_blank\" rel=\"noopener\">https://abc.com:8080/api/test）</a></p>\n<ul>\n<li>协议相同，比如 https</li>\n<li>域名相同，比如 abc.com（或者是 IP 相同）</li>\n<li>端口相同，比如 8080</li>\n</ul>\n<p>要注意的是，不仅仅是 js 可能跨域，css iframe 都有可能跨域。</p>\n<p>跨域主要限制在脚本（js css）请求上，对于 html 中加载资源，不算跨域。</p>\n<p>比如 网站A <code>http://abc.com</code>，有：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://12.34.56.78/xx.png\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.abc.com/xx.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这些都不算做跨域。</p>\n<p>但是上面这个 js，只能往当前网站A 的 <code>http://abc.com</code> 下发送请求，否则就算跨域。</p>\n<p>也就是说，当前网站地址是啥，就只能往哪里发送请求（iframe 不再考虑范围内）。</p>\n<p><strong>跨域的重点说明：</strong></p>\n<p>跨域发出的请求，是默认放行而且可以成功的，因为浏览器不清楚服务器端是否支持跨域。</p>\n<p>但是成功的请求，如果跨域了，是不会回调 js 代码的，这个是浏览器的保护机制。所以，下文的预请求原因很关键。</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>前端的话，主要以 <code>jQuery</code> 或 <code>axios</code> 为例。</p>\n<p>由于后端代码实现语言不同，故这里只说接口的响应头应该带有哪些信息，具体实现方法或者框架（库 / 包）请自行搜索。主要关注 <code>cors</code> <code>headers</code> 关键词。本文以 nodejs 的 <code>koa2</code> 框架为例。</p>\n<p>比如 JAVA spring 框架，可以考虑 ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>也可以考虑注解形式（<code>@CrossOrigin</code>），好像是 4.2 之后的版本开始支持注解。</p>\n<p>演示代码在这里：<a href=\"https://github.com/yukapril/learning/tree/master/cross-domain\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>以下约定：</p>\n<p>前端页面使用：<a href=\"http://127.0.0.1:3100\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:3100</a></p>\n<p>后端接口使用：<a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a></p>\n<p>这样故意制造跨域。</p>\n<p>此外，本文指的是真真正的的跨域，访问真正的数据接口，而不是 JSONP 接口。</p>\n<h2 id=\"简单的跨域处理\"><a href=\"#简单的跨域处理\" class=\"headerlink\" title=\"简单的跨域处理\"></a>简单的跨域处理</h2><p>简单的跨域主要指发起了简单的请求。</p>\n<p>满足简单请求的要求是：</p>\n<ol>\n<li>只能是 <code>GET</code> <code>POST</code> <code>HEAD</code> 请求方法。而且如果是 <code>POST</code> 的话，发送数据类型必须是 <code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code> 之一，其他类型不可以。</li>\n<li>不能自定义请求头，比如加上 <code>x-token</code> 什么的。当然也不能带上 <code>cookie</code>。</li>\n</ol>\n<p>实现跨域非常简单，后端接口需要返回以下一个响应头即可：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.set(<span class=\"string\">'Access-Control-Allow-Origin'</span>, <span class=\"string\">'http://127.0.0.1:3000'</span>) <span class=\"comment\">// 可以用 * 代替网址</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>前端代码无需特殊处理，即可正常接收数据。例子参考 DEMO1。</strong></p>\n<p>或许你见过 <code>ctx.set(&#39;Access-Control-Allow-Methods&#39;, &#39;GET, POST, HEAD, DELETE, OPTIONS&#39;)</code> 这种写法，我们这就来说。</p>\n<p>上面的简单跨域，只能是 <code>GET</code> <code>POST</code> <code>HEAD</code> 方法，如果我是 RESTful 风格的接口，偏偏要用 <code>DELETE</code> 怎么办？</p>\n<p>或者，我们交互数据，默认类型不是表单格式 <code>application/x-www-form-urlencoded</code>，是 <code>application/json</code> 格式？</p>\n<p>再或者，需要上送特殊的请求头，比如 <code>x-token</code> ？</p>\n<p>这时候，就是非简单的请求了。</p>\n<h2 id=\"高级跨域处理（预请求）\"><a href=\"#高级跨域处理（预请求）\" class=\"headerlink\" title=\"高级跨域处理（预请求）\"></a>高级跨域处理（预请求）</h2><p>上面说到了非简单请求，这种请求有个特点，要先发送一次请求，查一下服务器支持那些特性。这个是通过 <code>OPTIONS</code> 方法请求出去的。</p>\n<p>为什么要有预请求？</p>\n<blockquote>\n<p>假设你要跨域删除一条数据，使用 <code>DELETE</code> 方法。</p>\n<p>此时你请求发出去了，服务器正常处理删除了数据。但是由于跨域，导致了前端代码无法成功接收到状态，也就无法进行后续处理，对于操作的用户，不知道是否成功了。</p>\n<p>那么，用户可能会反复进行删除，或者进行了更进一步错误的操作。</p>\n<p>这就麻烦了，跨域请求发出去了，也成功了，但是前端代码收不到结果…</p>\n<p>所以，在发送 <code>DELETE</code> 请求前，先发送一个 <code>OPTIONS</code> 方法的请求，确认下能否跨域，如果可以的话，在发送第二条真正的删除请求。否则，第二条干脆就不发送了。这样就不会遇到上面的问题了。</p>\n</blockquote>\n<p><strong>所以，预请求用来查明该站点是否允许跨域请求，这样可以避免跨域请求可能带来的数据破坏。</strong></p>\n<p>这种情况实现也还好，不过要注意需要实现 <code>OPTIONS</code> 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.options(<span class=\"string\">'/deleteData'</span>, (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Origin'</span>, <span class=\"string\">'http://127.0.0.1:3000'</span>)</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Methods'</span>, <span class=\"string\">'GET, POST, HEAD, DELETE, OPTIONS'</span>)</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Headers'</span>, <span class=\"string\">'x-token'</span>)</span><br><span class=\"line\">  <span class=\"comment\">// OPTIONS 方法不需要返回任何实体内容，而且应该与最终调用的方法返回的头信息保持一致</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.delete(<span class=\"string\">'/deleteData'</span>, (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Origin'</span>, <span class=\"string\">'http://127.0.0.1:3000'</span>)</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Methods'</span>, <span class=\"string\">'GET, POST, HEAD, DELETE, OPTIONS'</span>)</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Headers'</span>, <span class=\"string\">'x-token'</span>)</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>前端代码的话，都还是正常写就可以了。不需要加任何额外的参数属性。例子参考 DEMO2。</strong></p>\n<p>对于上面的允许的 Headers 头部配置，这个含义是可以支持带有 <code>x-token</code> 的请求，当然你不带上也是可以的。但是你带上了其他字段，比如 <code>x-abc</code>，那么就不行了。</p>\n<h2 id=\"带-cookie-的请求\"><a href=\"#带-cookie-的请求\" class=\"headerlink\" title=\"带 cookie 的请求\"></a>带 cookie 的请求</h2><p>上面的两个例子，对于跨域来说，基本上能解决很多问题，比如请求第三方查天气接口，每次请求带上自己的 key 就可以了。跨域处理起来也不算太难。</p>\n<p>下面开始说说复杂一点的。</p>\n<p>需求是这样的：</p>\n<ul>\n<li><p>前后端分离项目，不部署在一起。为了和代码统一，下文用本地环境说明</p>\n</li>\n<li><p>前端域名A（<a href=\"http://127.0.0.1:3000），后端接口域名B（http://localhost:3100）\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:3000），后端接口域名B（http://localhost:3100）</a></p>\n</li>\n<li><p>前端要先调用登录接口，同时接口会返回状态，并写入 <code>cookie</code> （其实就是 <code>session</code>）</p>\n</li>\n<li><p>前端调用其他接口，需要带上当前的 <code>cookie</code>（这样后端相当于知道了 <code>session</code> 就知道是谁了），才可以获取数据</p>\n</li>\n</ul>\n<p>这次就必须前后端都要修改代码了。</p>\n<h4 id=\"首先是前端部分，相对简单一些：\"><a href=\"#首先是前端部分，相对简单一些：\" class=\"headerlink\" title=\"首先是前端部分，相对简单一些：\"></a>首先是前端部分，相对简单一些：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  url: <span class=\"string\">'http://localhost:3100/login'</span>,</span><br><span class=\"line\">  type: <span class=\"string\">'post'</span>,</span><br><span class=\"line\">  xhrFields: &#123;</span><br><span class=\"line\">    withCredentials: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>需要增加 <code>withCredentials</code> 字段，axios 也是需要设置此字段。</p>\n<p><strong>只有设置 <code>withCredentials</code> 字段，才能发送/接收 cookie</strong>。比如上面的这个登录接口，虽然不需要上送 cookie，但是要接收后端的响应头 <code>Set-Cookie</code>，所以登录接口就必须开启。</p>\n<p>可以在控制台中查看下，跨域请求 <a href=\"http://localhost:3100/login，返回时候有响应头：\" target=\"_blank\" rel=\"noopener\">http://localhost:3100/login，返回时候有响应头：</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-Cookie: SESSION=123456789; path=/; httponly</span><br></pre></td></tr></table></figure>\n\n<p>这个 cookie 是属于 localhost 域名下的，<strong>所以在 <a href=\"http://127.0.0.1:3000\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:3000</a> 下查看 cookie 是看不到的</strong>。</p>\n<p>如果非要想看下，那么只能访问 <a href=\"http://localhost:3000，然后在控制台中查阅\" target=\"_blank\" rel=\"noopener\">http://localhost:3000，然后在控制台中查阅</a> Application 选项卡内容。</p>\n<p>后续请求数据的接口亦如此，否则不能上送登录接口获取到的 cookie。</p>\n<h4 id=\"后端部分\"><a href=\"#后端部分\" class=\"headerlink\" title=\"后端部分\"></a>后端部分</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.post(<span class=\"string\">'/login'</span>, (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Origin'</span>, <span class=\"string\">'http://127.0.0.1:3000'</span>)</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Credentials'</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">  ctx.cookies.set(<span class=\"string\">'SESSION'</span>, <span class=\"string\">'123456789'</span>)</span><br><span class=\"line\">  ctx.body = &#123;<span class=\"attr\">code</span>: <span class=\"number\">0</span>, <span class=\"attr\">data</span>: <span class=\"string\">'login ok!'</span>&#125;</span><br><span class=\"line\">  next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/loginedData'</span>, (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Origin'</span>, <span class=\"string\">'http://127.0.0.1:3000'</span>)</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Credentials'</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">  ctx.body = &#123;<span class=\"attr\">code</span>: <span class=\"number\">0</span>, <span class=\"attr\">data</span>: ctx.headers&#125;</span><br><span class=\"line\">  next()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>后端部分，难度不大， 但是要注意几点：</p>\n<ul>\n<li><code>Access-Control-Allow-Origin</code> 不可以是 <code>*</code> （星号），必须是具体网站地址</li>\n<li><code>Access-Control-Allow-Credentials</code> 必须配置为 <code>true</code></li>\n<li>如果是非简单请求，还需要像 DEMO2 一样，返回 <code>Access-Control-Allow-Methods</code> 字段</li>\n<li>如果是非简单请求，注意实现 <code>OPTIONS</code> 方法，这个例子是简单请求，所以就没实现 <code>OPTIONS</code></li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h4 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h4><ol>\n<li>标准的 ajax 跨域请求，只要不需要带上cookie，那么和常规 ajax 写法一样，不需要额外加任何参数；</li>\n<li>如果 ajax 要带上 cookie 进行跨域，那么必须增加 <code>withCredentials</code> 字段。</li>\n</ol>\n<h4 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h4><ol>\n<li><p>请使用封装好的库、插件、组件等，本文以上内容，基本上都可以直接用插件直接解决，不需要自己手动配置；</p>\n</li>\n<li><p>非要手动配置，可以参考如下方案配置：</p>\n</li>\n</ol>\n<ul>\n<li><p>只要是跨域，就必须增加 <code>Access-Control-Allow-Origin</code> </p>\n</li>\n<li><p>需要带上（处理）cookie，就必须增加 <code>Access-Control-Allow-Credentials</code>，而且 <code>Access-Control-Allow-Origin</code> 不可以设置为 <code>*</code></p>\n</li>\n<li><p>请求是简单请求吗？简单请求的定义参考上文 “简单的跨域处理” 部分。是的话不需要其他字段了，不是的话，根据情况增加字段：</p>\n<table>\n<thead>\n<tr>\n<th>响应头</th>\n<th>解释</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Access-Control-Allow-Methods</code></td>\n<td>服务器接受那些方法</td>\n<td>不配置的话，默认相当于 “HEAD, GET, POST”</td>\n</tr>\n<tr>\n<td><code>Access-Control-Allow-Headers</code></td>\n<td>服务器接受那些请求头</td>\n<td>请求中带有或不带有此字段，可以成功；请求中带有其他字段，整个请求失败（没有通过 <code>OPTIONS</code> 请求）</td>\n</tr>\n</tbody></table>\n<p>其他响应头，建议搜索查表。我认为用的很少，就不列举了。</p>\n</li>\n</ul>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://zhuanlan.zhihu.com/p/28562290\" target=\"_blank\" rel=\"noopener\">跨域的那些事儿</a></p>\n<p><a href=\"https://github.com/hstarorg/HstarDoc/blob/master/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/CORS%E8%AF%A6%E8%A7%A3.md\" target=\"_blank\" rel=\"noopener\">CORS详解</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\" target=\"_blank\" rel=\"noopener\">跨域资源共享 CORS 详解</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers\" target=\"_blank\" rel=\"noopener\">HTTP Headers - MDN</a></p>"},{"layout":"post","title":"js 数组扁平化与反扁平化处理（上）","date":"2018-06-26T00:56:00.000Z","_content":"\n在做业管项目时候，遇到老的接口返回的是扁平化的数据结构，但是使用 ElementUI 的 `树状控件` （ `Tree` ）时候，他需要的是非扁平化的数据结构，这就需要对数据进行一次处理了。\n\n一开始思考了很久，但是一旦拿笔写些思路，突然就有了灵感，而且其实非常简单。简单的网上我都找不到这种写法。\n\n**让我们开始吧！**\n\n<!-- more -->\n\n先准备一个扁平化的数据：\n\n```js\nconst flattenedArr = [\n    { id: 1, text: 'A' },\n    { id: 2, text: 'B' },\n    { id: 3, text: 'C' },\n    { id: 4, text: 'A1', pid: 1 },\n    { id: 5, text: 'A2', pid: 1 },\n    { id: 6, text: 'B1', pid: 2 },\n    { id: 7, text: 'B2', pid: 2 },\n    { id: 8, text: 'B21', pid: 7 },\n    { id: 9, text: 'B22', pid: 7 }\n]\n```\n\n我们最终希望变成这样的数组结构：\n\n```js\n[\n    {\n        id: 1,\n        text: \"A\",\n        children: [\n            {id: 4, text: \"A1\"},\n            {id: 5, text: \"A2\"}\n        ]\n    },\n    {\n        id: 2,\n        text: \"B\",\n        children: [\n            {id: 6, text: \"B1\"},\n            {\n                id: 7,\n                text: \"B2\",\n                children: [\n                    {id: 8, text: \"B21\"},\n                    {id: 9, text: \"B22\"}\n                ]\n            }\n        ]\n    },\n    {\n    \tid: 3, \n    \ttext: \"C\"\n    }\n]\n```\n\n看着好像很复杂的样子，每个子节点要放置到对应的父节点的 `chilren` 上。\n\n> 为了简单起见，我们不考虑异常数据。\n>\n> 即：所有子节点，对应关系都是正确的。\n\n如果要想把子节点放到父节点上，必须要考虑父节点必须已经存在，才能把子节点放置到 `chilren` 上。而且节点层次多起来，如何一层层定位指定的父节点也是问题。\n\n考虑许久，我认为建立一个数组索引会比较方便：\n\n```js\nconst unflattened = arr => {\n    // 拷贝一下原有数组，防止后续修改会影响原数组\n    const flattenedArr = JSON.parse(JSON.stringify(arr))\n    \n    // 临时缓存索引(id 为下标的对象)\n    // 大致这个样子 { 1:{},2:{},3:{} }\n    let cache = {}  \n    \n    flattenedArr.forEach(item => {\n        // 使用 id 做缓存索引\n        // 之后只需要知道 id，就可以直接找到数据对象\n        cache[item.id] = item\n    })\n}\n```\n\n这样处理后，解决了一个大问题，我们只要知道 id，就可以方便的找到该 id 对应的数据。比如要找 id=7：\n\n```js\nlet item = cache['7']\nconsole.log(item)\n// { id: 7, text: 'B2', pid: 2 }\n```\n\n后面就容易多了，我们需要把子节点放到父节点上，这时候发现是没有 `children` 字段的，为了方便（省去各种处理判断），我觉得还是统一给所有节点加上比较快：\n\n```js\nconst unflattened = arr => {\n    // 拷贝一下原有数组，防止后续修改会影响原数组\n    const flattenedArr = JSON.parse(JSON.stringify(arr))\n    \n    // 临时缓存索引(id 为下标的对象)\n    // 大致这个样子 { 1:{},2:{},3:{} }\n    let cache = {}  \n    \n    flattenedArr.forEach(item => {\n++++    // 每一个元素都加上 children 字段\n++++    item.children = []\n        \n        // 使用 id 做缓存索引\n        // 之后只需要知道 id，就可以直接找到数据对象\n        cache[item.id] = item\n    })\n}\n```\n\n**下面，我们就要考虑如何进行构建期望的数据结构了。**\n\n因为数组的顺序不一定是根结点在最前，所以要找到最基础的根结点比较重要，后续才能踏踏实实的子节点往上挂载。\n\n先创建一个最终返回的数组 `unflattenedArr`，这里面目前主要放根节点，在这个例子中，根节点有 3 个。\n\n此外，再创建一个临时数组 `tempArr`，主要用于记录非根节点。本例子中，共有 9 个节点，排除 3 个根节点外，剩下的 6 个节点，应临时放置在这里。后续我们可以方便的再处理这 6 个节点的数据。\n\n```js\nconst unflattened = arr => {\n    // 拷贝一下原有数组，防止后续修改会影响原数组\n    const flattenedArr = JSON.parse(JSON.stringify(arr))\n    \n    // 临时缓存索引(id 为下标的对象)\n    // 大致这个样子 { 1:{},2:{},3:{} }\n    let cache = {}  \n    \n++++ // 最终要返回的非扁平化数组\n++++ let unflattenedArr = []\n++++ // 存放非根结点的数组\n++++ let tempArr = []\n    \n    flattenedArr.forEach(item => {\n        // 每一个元素都加上 children 字段\n        item.children = []\n        \n        // 使用 id 做缓存索引\n        // 之后只需要知道 id，就可以直接找到数据对象\n        cache[item.id] = item\n        \n++++    if (!item.pid) {\n++++        // 不存在 pid 属性，当前元素为根结点\n++++        // 直接放到最终的返回对象里面，后续元素可以直接挂载\n++++        unflattenedArr.push(item)\n++++    } else {\n++++        // 子节点，放到新对象里面，后续会用到\n++++        tempArr.push(item)\n++++    }\n    })\n    \n++++ return unflattenedArr\n}\n```\n\n通过这次调整，我们已经安置好根节点了（`unflattenedArr`），而且非根节点也知道了（`tempArr`）。\n\n现在，我们需要把非根节点放置到相应位置了。还记得上面的 `cache` 吗，我们可以非常方便的找到任何一个 id 的节点位置。\n\n```js\nconst unflattened = arr => {\n    // 拷贝一下原有数组，防止后续修改会影响原数组\n    const flattenedArr = JSON.parse(JSON.stringify(arr))\n    \n    // 临时缓存索引(id 为下标的对象)\n    // 大致这个样子 { 1:{},2:{},3:{} }\n    let cache = {}  \n    \n    // 最终要返回的非扁平化数组\n    let unflattenedArr = []\n    // 存放非根结点的数组\n    let tempArr = []\n    \n    flattenedArr.forEach(item => {\n        // 每一个元素都加上 children 字段\n        item.children = []\n        \n        // 使用 id 做缓存索引\n        // 之后只需要知道 id，就可以直接找到数据对象\n        cache[item.id] = item\n        \n        if (!item.pid) {\n            // 不存在 pid 属性，当前元素为根结点\n            // 直接放到最终的返回对象里面，后续元素可以直接挂载\n            unflattenedArr.push(item)\n        } else {\n            // 子节点，放到新对象里面，后续会用到\n            tempArr.push(item)\n        }\n    })\n    \n++++ // 处理非根子节点\n++++ tempArr.forEach(item => {\n++++     // 当前 item 的父节点 id \n++++     const pid = item.pid\n++++     // 通过上面的 cache 索引，直接将子节点挂到对应的父节点上\n++++     cache[pid].children.push(item)\n++++ })\n    \n    return unflattenedArr\n}\n```\n\n这时我们可以看下返回数据，已经非常好了。的确如此，完全可以直接使用了。\n\n```js\n[\n    {\n        \"id\": 1,\n        \"text\": \"A\",\n        \"children\": [\n            {\n                \"id\": 4,\n                \"text\": \"A1\",\n                \"pid\": 1,\n                \"children\": []\n            },\n            {\n                \"id\": 5,\n                \"text\": \"A2\",\n                \"pid\": 1,\n                \"children\": []\n            }\n        ]\n    },\n    {\n        \"id\": 2,\n        \"text\": \"B\",\n        \"children\": [\n            {\n                \"id\": 6,\n                \"text\": \"B1\",\n                \"pid\": 2,\n                \"children\": []\n            },\n            {\n                \"id\": 7,\n                \"text\": \"B2\",\n                \"pid\": 2,\n                \"children\": [\n                    {\n                        \"id\": 8,\n                        \"text\": \"B21\",\n                        \"pid\": 7,\n                        \"children\": []\n                    },\n                    {\n                        \"id\": 9,\n                        \"text\": \"B22\",\n                        \"pid\": 7,\n                        \"children\": []\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        \"id\": 3,\n        \"text\": \"C\",\n        \"children\": []\n    }\n]\n```\n\n对于一些细节上，我们还有提升输出质量的空间：\n\n1. `pid` 字段，因为已经是嵌套结构，这个字段不再有价值\n2. `children` 字段，末端子节点是没有意义的，当然如果有扩展的话，还是保留着好。\n\n对于这两个细节上，也很好解决，因为我们有所有节点的索引嘛。再第二个循环后面，再加一个循环处理下：\n\n```js\nObject.keys(cache).forEach(id => {\n    const item = cache[id]\n    if (item.children.length === 0) {\n        delete item.children\n    }\n    delete item.pid\n})\n```\n\n这样就彻底搞定了。\n\n本文代码见此：[Github](https://github.com/yukapril/learning/blob/master/array-flattened/unflattened.html)\n\n","source":"_posts/2018/2018-06-26-array-unflattened.md","raw":"---\nlayout: post\ntitle: js 数组扁平化与反扁平化处理（上）\ndate: 2018-06-26 00:56:00 GMT+0000\ncategories: [前端]\ntags:  [扁平化]\n---\n\n在做业管项目时候，遇到老的接口返回的是扁平化的数据结构，但是使用 ElementUI 的 `树状控件` （ `Tree` ）时候，他需要的是非扁平化的数据结构，这就需要对数据进行一次处理了。\n\n一开始思考了很久，但是一旦拿笔写些思路，突然就有了灵感，而且其实非常简单。简单的网上我都找不到这种写法。\n\n**让我们开始吧！**\n\n<!-- more -->\n\n先准备一个扁平化的数据：\n\n```js\nconst flattenedArr = [\n    { id: 1, text: 'A' },\n    { id: 2, text: 'B' },\n    { id: 3, text: 'C' },\n    { id: 4, text: 'A1', pid: 1 },\n    { id: 5, text: 'A2', pid: 1 },\n    { id: 6, text: 'B1', pid: 2 },\n    { id: 7, text: 'B2', pid: 2 },\n    { id: 8, text: 'B21', pid: 7 },\n    { id: 9, text: 'B22', pid: 7 }\n]\n```\n\n我们最终希望变成这样的数组结构：\n\n```js\n[\n    {\n        id: 1,\n        text: \"A\",\n        children: [\n            {id: 4, text: \"A1\"},\n            {id: 5, text: \"A2\"}\n        ]\n    },\n    {\n        id: 2,\n        text: \"B\",\n        children: [\n            {id: 6, text: \"B1\"},\n            {\n                id: 7,\n                text: \"B2\",\n                children: [\n                    {id: 8, text: \"B21\"},\n                    {id: 9, text: \"B22\"}\n                ]\n            }\n        ]\n    },\n    {\n    \tid: 3, \n    \ttext: \"C\"\n    }\n]\n```\n\n看着好像很复杂的样子，每个子节点要放置到对应的父节点的 `chilren` 上。\n\n> 为了简单起见，我们不考虑异常数据。\n>\n> 即：所有子节点，对应关系都是正确的。\n\n如果要想把子节点放到父节点上，必须要考虑父节点必须已经存在，才能把子节点放置到 `chilren` 上。而且节点层次多起来，如何一层层定位指定的父节点也是问题。\n\n考虑许久，我认为建立一个数组索引会比较方便：\n\n```js\nconst unflattened = arr => {\n    // 拷贝一下原有数组，防止后续修改会影响原数组\n    const flattenedArr = JSON.parse(JSON.stringify(arr))\n    \n    // 临时缓存索引(id 为下标的对象)\n    // 大致这个样子 { 1:{},2:{},3:{} }\n    let cache = {}  \n    \n    flattenedArr.forEach(item => {\n        // 使用 id 做缓存索引\n        // 之后只需要知道 id，就可以直接找到数据对象\n        cache[item.id] = item\n    })\n}\n```\n\n这样处理后，解决了一个大问题，我们只要知道 id，就可以方便的找到该 id 对应的数据。比如要找 id=7：\n\n```js\nlet item = cache['7']\nconsole.log(item)\n// { id: 7, text: 'B2', pid: 2 }\n```\n\n后面就容易多了，我们需要把子节点放到父节点上，这时候发现是没有 `children` 字段的，为了方便（省去各种处理判断），我觉得还是统一给所有节点加上比较快：\n\n```js\nconst unflattened = arr => {\n    // 拷贝一下原有数组，防止后续修改会影响原数组\n    const flattenedArr = JSON.parse(JSON.stringify(arr))\n    \n    // 临时缓存索引(id 为下标的对象)\n    // 大致这个样子 { 1:{},2:{},3:{} }\n    let cache = {}  \n    \n    flattenedArr.forEach(item => {\n++++    // 每一个元素都加上 children 字段\n++++    item.children = []\n        \n        // 使用 id 做缓存索引\n        // 之后只需要知道 id，就可以直接找到数据对象\n        cache[item.id] = item\n    })\n}\n```\n\n**下面，我们就要考虑如何进行构建期望的数据结构了。**\n\n因为数组的顺序不一定是根结点在最前，所以要找到最基础的根结点比较重要，后续才能踏踏实实的子节点往上挂载。\n\n先创建一个最终返回的数组 `unflattenedArr`，这里面目前主要放根节点，在这个例子中，根节点有 3 个。\n\n此外，再创建一个临时数组 `tempArr`，主要用于记录非根节点。本例子中，共有 9 个节点，排除 3 个根节点外，剩下的 6 个节点，应临时放置在这里。后续我们可以方便的再处理这 6 个节点的数据。\n\n```js\nconst unflattened = arr => {\n    // 拷贝一下原有数组，防止后续修改会影响原数组\n    const flattenedArr = JSON.parse(JSON.stringify(arr))\n    \n    // 临时缓存索引(id 为下标的对象)\n    // 大致这个样子 { 1:{},2:{},3:{} }\n    let cache = {}  \n    \n++++ // 最终要返回的非扁平化数组\n++++ let unflattenedArr = []\n++++ // 存放非根结点的数组\n++++ let tempArr = []\n    \n    flattenedArr.forEach(item => {\n        // 每一个元素都加上 children 字段\n        item.children = []\n        \n        // 使用 id 做缓存索引\n        // 之后只需要知道 id，就可以直接找到数据对象\n        cache[item.id] = item\n        \n++++    if (!item.pid) {\n++++        // 不存在 pid 属性，当前元素为根结点\n++++        // 直接放到最终的返回对象里面，后续元素可以直接挂载\n++++        unflattenedArr.push(item)\n++++    } else {\n++++        // 子节点，放到新对象里面，后续会用到\n++++        tempArr.push(item)\n++++    }\n    })\n    \n++++ return unflattenedArr\n}\n```\n\n通过这次调整，我们已经安置好根节点了（`unflattenedArr`），而且非根节点也知道了（`tempArr`）。\n\n现在，我们需要把非根节点放置到相应位置了。还记得上面的 `cache` 吗，我们可以非常方便的找到任何一个 id 的节点位置。\n\n```js\nconst unflattened = arr => {\n    // 拷贝一下原有数组，防止后续修改会影响原数组\n    const flattenedArr = JSON.parse(JSON.stringify(arr))\n    \n    // 临时缓存索引(id 为下标的对象)\n    // 大致这个样子 { 1:{},2:{},3:{} }\n    let cache = {}  \n    \n    // 最终要返回的非扁平化数组\n    let unflattenedArr = []\n    // 存放非根结点的数组\n    let tempArr = []\n    \n    flattenedArr.forEach(item => {\n        // 每一个元素都加上 children 字段\n        item.children = []\n        \n        // 使用 id 做缓存索引\n        // 之后只需要知道 id，就可以直接找到数据对象\n        cache[item.id] = item\n        \n        if (!item.pid) {\n            // 不存在 pid 属性，当前元素为根结点\n            // 直接放到最终的返回对象里面，后续元素可以直接挂载\n            unflattenedArr.push(item)\n        } else {\n            // 子节点，放到新对象里面，后续会用到\n            tempArr.push(item)\n        }\n    })\n    \n++++ // 处理非根子节点\n++++ tempArr.forEach(item => {\n++++     // 当前 item 的父节点 id \n++++     const pid = item.pid\n++++     // 通过上面的 cache 索引，直接将子节点挂到对应的父节点上\n++++     cache[pid].children.push(item)\n++++ })\n    \n    return unflattenedArr\n}\n```\n\n这时我们可以看下返回数据，已经非常好了。的确如此，完全可以直接使用了。\n\n```js\n[\n    {\n        \"id\": 1,\n        \"text\": \"A\",\n        \"children\": [\n            {\n                \"id\": 4,\n                \"text\": \"A1\",\n                \"pid\": 1,\n                \"children\": []\n            },\n            {\n                \"id\": 5,\n                \"text\": \"A2\",\n                \"pid\": 1,\n                \"children\": []\n            }\n        ]\n    },\n    {\n        \"id\": 2,\n        \"text\": \"B\",\n        \"children\": [\n            {\n                \"id\": 6,\n                \"text\": \"B1\",\n                \"pid\": 2,\n                \"children\": []\n            },\n            {\n                \"id\": 7,\n                \"text\": \"B2\",\n                \"pid\": 2,\n                \"children\": [\n                    {\n                        \"id\": 8,\n                        \"text\": \"B21\",\n                        \"pid\": 7,\n                        \"children\": []\n                    },\n                    {\n                        \"id\": 9,\n                        \"text\": \"B22\",\n                        \"pid\": 7,\n                        \"children\": []\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        \"id\": 3,\n        \"text\": \"C\",\n        \"children\": []\n    }\n]\n```\n\n对于一些细节上，我们还有提升输出质量的空间：\n\n1. `pid` 字段，因为已经是嵌套结构，这个字段不再有价值\n2. `children` 字段，末端子节点是没有意义的，当然如果有扩展的话，还是保留着好。\n\n对于这两个细节上，也很好解决，因为我们有所有节点的索引嘛。再第二个循环后面，再加一个循环处理下：\n\n```js\nObject.keys(cache).forEach(id => {\n    const item = cache[id]\n    if (item.children.length === 0) {\n        delete item.children\n    }\n    delete item.pid\n})\n```\n\n这样就彻底搞定了。\n\n本文代码见此：[Github](https://github.com/yukapril/learning/blob/master/array-flattened/unflattened.html)\n\n","slug":"2018-2018-06-26-array-unflattened","published":1,"updated":"2019-07-18T17:19:07.131Z","comments":1,"photos":[],"link":"","_id":"cjy8y72v400c8s21dh8tvrvs2","content":"<p>在做业管项目时候，遇到老的接口返回的是扁平化的数据结构，但是使用 ElementUI 的 <code>树状控件</code> （ <code>Tree</code> ）时候，他需要的是非扁平化的数据结构，这就需要对数据进行一次处理了。</p>\n<p>一开始思考了很久，但是一旦拿笔写些思路，突然就有了灵感，而且其实非常简单。简单的网上我都找不到这种写法。</p>\n<p><strong>让我们开始吧！</strong></p>\n<a id=\"more\"></a>\n\n<p>先准备一个扁平化的数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> flattenedArr = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">text</span>: <span class=\"string\">'A'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">text</span>: <span class=\"string\">'B'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">text</span>: <span class=\"string\">'C'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">text</span>: <span class=\"string\">'A1'</span>, <span class=\"attr\">pid</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">5</span>, <span class=\"attr\">text</span>: <span class=\"string\">'A2'</span>, <span class=\"attr\">pid</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">6</span>, <span class=\"attr\">text</span>: <span class=\"string\">'B1'</span>, <span class=\"attr\">pid</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">7</span>, <span class=\"attr\">text</span>: <span class=\"string\">'B2'</span>, <span class=\"attr\">pid</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">8</span>, <span class=\"attr\">text</span>: <span class=\"string\">'B21'</span>, <span class=\"attr\">pid</span>: <span class=\"number\">7</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">9</span>, <span class=\"attr\">text</span>: <span class=\"string\">'B22'</span>, <span class=\"attr\">pid</span>: <span class=\"number\">7</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>我们最终希望变成这样的数组结构：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        id: <span class=\"number\">1</span>,</span><br><span class=\"line\">        text: <span class=\"string\">\"A\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">            &#123;<span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">text</span>: <span class=\"string\">\"A1\"</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">id</span>: <span class=\"number\">5</span>, <span class=\"attr\">text</span>: <span class=\"string\">\"A2\"</span>&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        id: <span class=\"number\">2</span>,</span><br><span class=\"line\">        text: <span class=\"string\">\"B\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">            &#123;<span class=\"attr\">id</span>: <span class=\"number\">6</span>, <span class=\"attr\">text</span>: <span class=\"string\">\"B1\"</span>&#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                id: <span class=\"number\">7</span>,</span><br><span class=\"line\">                text: <span class=\"string\">\"B2\"</span>,</span><br><span class=\"line\">                children: [</span><br><span class=\"line\">                    &#123;<span class=\"attr\">id</span>: <span class=\"number\">8</span>, <span class=\"attr\">text</span>: <span class=\"string\">\"B21\"</span>&#125;,</span><br><span class=\"line\">                    &#123;<span class=\"attr\">id</span>: <span class=\"number\">9</span>, <span class=\"attr\">text</span>: <span class=\"string\">\"B22\"</span>&#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \tid: <span class=\"number\">3</span>, </span><br><span class=\"line\">    \ttext: <span class=\"string\">\"C\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>看着好像很复杂的样子，每个子节点要放置到对应的父节点的 <code>chilren</code> 上。</p>\n<blockquote>\n<p>为了简单起见，我们不考虑异常数据。</p>\n<p>即：所有子节点，对应关系都是正确的。</p>\n</blockquote>\n<p>如果要想把子节点放到父节点上，必须要考虑父节点必须已经存在，才能把子节点放置到 <code>chilren</code> 上。而且节点层次多起来，如何一层层定位指定的父节点也是问题。</p>\n<p>考虑许久，我认为建立一个数组索引会比较方便：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unflattened = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拷贝一下原有数组，防止后续修改会影响原数组</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> flattenedArr = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(arr))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 临时缓存索引(id 为下标的对象)</span></span><br><span class=\"line\">    <span class=\"comment\">// 大致这个样子 &#123; 1:&#123;&#125;,2:&#123;&#125;,3:&#123;&#125; &#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cache = &#123;&#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    flattenedArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 id 做缓存索引</span></span><br><span class=\"line\">        <span class=\"comment\">// 之后只需要知道 id，就可以直接找到数据对象</span></span><br><span class=\"line\">        cache[item.id] = item</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样处理后，解决了一个大问题，我们只要知道 id，就可以方便的找到该 id 对应的数据。比如要找 id=7：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> item = cache[<span class=\"string\">'7'</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(item)</span><br><span class=\"line\"><span class=\"comment\">// &#123; id: 7, text: 'B2', pid: 2 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>后面就容易多了，我们需要把子节点放到父节点上，这时候发现是没有 <code>children</code> 字段的，为了方便（省去各种处理判断），我觉得还是统一给所有节点加上比较快：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unflattened = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拷贝一下原有数组，防止后续修改会影响原数组</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> flattenedArr = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(arr))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 临时缓存索引(id 为下标的对象)</span></span><br><span class=\"line\">    <span class=\"comment\">// 大致这个样子 &#123; 1:&#123;&#125;,2:&#123;&#125;,3:&#123;&#125; &#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cache = &#123;&#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    flattenedArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">++++    <span class=\"comment\">// 每一个元素都加上 children 字段</span></span><br><span class=\"line\">++++    item.children = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 使用 id 做缓存索引</span></span><br><span class=\"line\">        <span class=\"comment\">// 之后只需要知道 id，就可以直接找到数据对象</span></span><br><span class=\"line\">        cache[item.id] = item</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>下面，我们就要考虑如何进行构建期望的数据结构了。</strong></p>\n<p>因为数组的顺序不一定是根结点在最前，所以要找到最基础的根结点比较重要，后续才能踏踏实实的子节点往上挂载。</p>\n<p>先创建一个最终返回的数组 <code>unflattenedArr</code>，这里面目前主要放根节点，在这个例子中，根节点有 3 个。</p>\n<p>此外，再创建一个临时数组 <code>tempArr</code>，主要用于记录非根节点。本例子中，共有 9 个节点，排除 3 个根节点外，剩下的 6 个节点，应临时放置在这里。后续我们可以方便的再处理这 6 个节点的数据。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unflattened = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拷贝一下原有数组，防止后续修改会影响原数组</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> flattenedArr = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(arr))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 临时缓存索引(id 为下标的对象)</span></span><br><span class=\"line\">    <span class=\"comment\">// 大致这个样子 &#123; 1:&#123;&#125;,2:&#123;&#125;,3:&#123;&#125; &#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cache = &#123;&#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">++++ <span class=\"comment\">// 最终要返回的非扁平化数组</span></span><br><span class=\"line\">++++ <span class=\"keyword\">let</span> unflattenedArr = []</span><br><span class=\"line\">++++ <span class=\"comment\">// 存放非根结点的数组</span></span><br><span class=\"line\">++++ <span class=\"keyword\">let</span> tempArr = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    flattenedArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 每一个元素都加上 children 字段</span></span><br><span class=\"line\">        item.children = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 使用 id 做缓存索引</span></span><br><span class=\"line\">        <span class=\"comment\">// 之后只需要知道 id，就可以直接找到数据对象</span></span><br><span class=\"line\">        cache[item.id] = item</span><br><span class=\"line\">        </span><br><span class=\"line\">++++    <span class=\"keyword\">if</span> (!item.pid) &#123;</span><br><span class=\"line\">++++        <span class=\"comment\">// 不存在 pid 属性，当前元素为根结点</span></span><br><span class=\"line\">++++        <span class=\"comment\">// 直接放到最终的返回对象里面，后续元素可以直接挂载</span></span><br><span class=\"line\">++++        unflattenedArr.push(item)</span><br><span class=\"line\">++++    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">++++        <span class=\"comment\">// 子节点，放到新对象里面，后续会用到</span></span><br><span class=\"line\">++++        tempArr.push(item)</span><br><span class=\"line\">++++    &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">++++ <span class=\"keyword\">return</span> unflattenedArr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过这次调整，我们已经安置好根节点了（<code>unflattenedArr</code>），而且非根节点也知道了（<code>tempArr</code>）。</p>\n<p>现在，我们需要把非根节点放置到相应位置了。还记得上面的 <code>cache</code> 吗，我们可以非常方便的找到任何一个 id 的节点位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unflattened = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拷贝一下原有数组，防止后续修改会影响原数组</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> flattenedArr = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(arr))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 临时缓存索引(id 为下标的对象)</span></span><br><span class=\"line\">    <span class=\"comment\">// 大致这个样子 &#123; 1:&#123;&#125;,2:&#123;&#125;,3:&#123;&#125; &#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cache = &#123;&#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 最终要返回的非扁平化数组</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> unflattenedArr = []</span><br><span class=\"line\">    <span class=\"comment\">// 存放非根结点的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> tempArr = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    flattenedArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 每一个元素都加上 children 字段</span></span><br><span class=\"line\">        item.children = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 使用 id 做缓存索引</span></span><br><span class=\"line\">        <span class=\"comment\">// 之后只需要知道 id，就可以直接找到数据对象</span></span><br><span class=\"line\">        cache[item.id] = item</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!item.pid) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 不存在 pid 属性，当前元素为根结点</span></span><br><span class=\"line\">            <span class=\"comment\">// 直接放到最终的返回对象里面，后续元素可以直接挂载</span></span><br><span class=\"line\">            unflattenedArr.push(item)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 子节点，放到新对象里面，后续会用到</span></span><br><span class=\"line\">            tempArr.push(item)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">++++ <span class=\"comment\">// 处理非根子节点</span></span><br><span class=\"line\">++++ tempArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">++++     <span class=\"comment\">// 当前 item 的父节点 id </span></span><br><span class=\"line\">++++     <span class=\"keyword\">const</span> pid = item.pid</span><br><span class=\"line\">++++     <span class=\"comment\">// 通过上面的 cache 索引，直接将子节点挂到对应的父节点上</span></span><br><span class=\"line\">++++     cache[pid].children.push(item)</span><br><span class=\"line\">++++ &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> unflattenedArr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时我们可以看下返回数据，已经非常好了。的确如此，完全可以直接使用了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"A\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"children\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">                <span class=\"string\">\"text\"</span>: <span class=\"string\">\"A1\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"pid\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"string\">\"children\"</span>: []</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">                <span class=\"string\">\"text\"</span>: <span class=\"string\">\"A2\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"pid\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"string\">\"children\"</span>: []</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"children\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"number\">6</span>,</span><br><span class=\"line\">                <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B1\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"pid\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"string\">\"children\"</span>: []</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B2\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"pid\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"string\">\"children\"</span>: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"string\">\"id\"</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B21\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"pid\"</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"children\"</span>: []</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"string\">\"id\"</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B22\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"pid\"</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"children\"</span>: []</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"C\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"children\"</span>: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>对于一些细节上，我们还有提升输出质量的空间：</p>\n<ol>\n<li><code>pid</code> 字段，因为已经是嵌套结构，这个字段不再有价值</li>\n<li><code>children</code> 字段，末端子节点是没有意义的，当然如果有扩展的话，还是保留着好。</li>\n</ol>\n<p>对于这两个细节上，也很好解决，因为我们有所有节点的索引嘛。再第二个循环后面，再加一个循环处理下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.keys(cache).forEach(<span class=\"function\"><span class=\"params\">id</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> item = cache[id]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item.children.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> item.children</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> item.pid</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这样就彻底搞定了。</p>\n<p>本文代码见此：<a href=\"https://github.com/yukapril/learning/blob/master/array-flattened/unflattened.html\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n","site":{"data":{}},"excerpt":"<p>在做业管项目时候，遇到老的接口返回的是扁平化的数据结构，但是使用 ElementUI 的 <code>树状控件</code> （ <code>Tree</code> ）时候，他需要的是非扁平化的数据结构，这就需要对数据进行一次处理了。</p>\n<p>一开始思考了很久，但是一旦拿笔写些思路，突然就有了灵感，而且其实非常简单。简单的网上我都找不到这种写法。</p>\n<p><strong>让我们开始吧！</strong></p>","more":"<p>先准备一个扁平化的数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> flattenedArr = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">text</span>: <span class=\"string\">'A'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">text</span>: <span class=\"string\">'B'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">text</span>: <span class=\"string\">'C'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">text</span>: <span class=\"string\">'A1'</span>, <span class=\"attr\">pid</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">5</span>, <span class=\"attr\">text</span>: <span class=\"string\">'A2'</span>, <span class=\"attr\">pid</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">6</span>, <span class=\"attr\">text</span>: <span class=\"string\">'B1'</span>, <span class=\"attr\">pid</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">7</span>, <span class=\"attr\">text</span>: <span class=\"string\">'B2'</span>, <span class=\"attr\">pid</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">8</span>, <span class=\"attr\">text</span>: <span class=\"string\">'B21'</span>, <span class=\"attr\">pid</span>: <span class=\"number\">7</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">9</span>, <span class=\"attr\">text</span>: <span class=\"string\">'B22'</span>, <span class=\"attr\">pid</span>: <span class=\"number\">7</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>我们最终希望变成这样的数组结构：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        id: <span class=\"number\">1</span>,</span><br><span class=\"line\">        text: <span class=\"string\">\"A\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">            &#123;<span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">text</span>: <span class=\"string\">\"A1\"</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">id</span>: <span class=\"number\">5</span>, <span class=\"attr\">text</span>: <span class=\"string\">\"A2\"</span>&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        id: <span class=\"number\">2</span>,</span><br><span class=\"line\">        text: <span class=\"string\">\"B\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">            &#123;<span class=\"attr\">id</span>: <span class=\"number\">6</span>, <span class=\"attr\">text</span>: <span class=\"string\">\"B1\"</span>&#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                id: <span class=\"number\">7</span>,</span><br><span class=\"line\">                text: <span class=\"string\">\"B2\"</span>,</span><br><span class=\"line\">                children: [</span><br><span class=\"line\">                    &#123;<span class=\"attr\">id</span>: <span class=\"number\">8</span>, <span class=\"attr\">text</span>: <span class=\"string\">\"B21\"</span>&#125;,</span><br><span class=\"line\">                    &#123;<span class=\"attr\">id</span>: <span class=\"number\">9</span>, <span class=\"attr\">text</span>: <span class=\"string\">\"B22\"</span>&#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \tid: <span class=\"number\">3</span>, </span><br><span class=\"line\">    \ttext: <span class=\"string\">\"C\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>看着好像很复杂的样子，每个子节点要放置到对应的父节点的 <code>chilren</code> 上。</p>\n<blockquote>\n<p>为了简单起见，我们不考虑异常数据。</p>\n<p>即：所有子节点，对应关系都是正确的。</p>\n</blockquote>\n<p>如果要想把子节点放到父节点上，必须要考虑父节点必须已经存在，才能把子节点放置到 <code>chilren</code> 上。而且节点层次多起来，如何一层层定位指定的父节点也是问题。</p>\n<p>考虑许久，我认为建立一个数组索引会比较方便：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unflattened = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拷贝一下原有数组，防止后续修改会影响原数组</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> flattenedArr = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(arr))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 临时缓存索引(id 为下标的对象)</span></span><br><span class=\"line\">    <span class=\"comment\">// 大致这个样子 &#123; 1:&#123;&#125;,2:&#123;&#125;,3:&#123;&#125; &#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cache = &#123;&#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    flattenedArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 id 做缓存索引</span></span><br><span class=\"line\">        <span class=\"comment\">// 之后只需要知道 id，就可以直接找到数据对象</span></span><br><span class=\"line\">        cache[item.id] = item</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样处理后，解决了一个大问题，我们只要知道 id，就可以方便的找到该 id 对应的数据。比如要找 id=7：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> item = cache[<span class=\"string\">'7'</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(item)</span><br><span class=\"line\"><span class=\"comment\">// &#123; id: 7, text: 'B2', pid: 2 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>后面就容易多了，我们需要把子节点放到父节点上，这时候发现是没有 <code>children</code> 字段的，为了方便（省去各种处理判断），我觉得还是统一给所有节点加上比较快：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unflattened = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拷贝一下原有数组，防止后续修改会影响原数组</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> flattenedArr = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(arr))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 临时缓存索引(id 为下标的对象)</span></span><br><span class=\"line\">    <span class=\"comment\">// 大致这个样子 &#123; 1:&#123;&#125;,2:&#123;&#125;,3:&#123;&#125; &#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cache = &#123;&#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    flattenedArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">++++    <span class=\"comment\">// 每一个元素都加上 children 字段</span></span><br><span class=\"line\">++++    item.children = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 使用 id 做缓存索引</span></span><br><span class=\"line\">        <span class=\"comment\">// 之后只需要知道 id，就可以直接找到数据对象</span></span><br><span class=\"line\">        cache[item.id] = item</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>下面，我们就要考虑如何进行构建期望的数据结构了。</strong></p>\n<p>因为数组的顺序不一定是根结点在最前，所以要找到最基础的根结点比较重要，后续才能踏踏实实的子节点往上挂载。</p>\n<p>先创建一个最终返回的数组 <code>unflattenedArr</code>，这里面目前主要放根节点，在这个例子中，根节点有 3 个。</p>\n<p>此外，再创建一个临时数组 <code>tempArr</code>，主要用于记录非根节点。本例子中，共有 9 个节点，排除 3 个根节点外，剩下的 6 个节点，应临时放置在这里。后续我们可以方便的再处理这 6 个节点的数据。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unflattened = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拷贝一下原有数组，防止后续修改会影响原数组</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> flattenedArr = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(arr))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 临时缓存索引(id 为下标的对象)</span></span><br><span class=\"line\">    <span class=\"comment\">// 大致这个样子 &#123; 1:&#123;&#125;,2:&#123;&#125;,3:&#123;&#125; &#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cache = &#123;&#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">++++ <span class=\"comment\">// 最终要返回的非扁平化数组</span></span><br><span class=\"line\">++++ <span class=\"keyword\">let</span> unflattenedArr = []</span><br><span class=\"line\">++++ <span class=\"comment\">// 存放非根结点的数组</span></span><br><span class=\"line\">++++ <span class=\"keyword\">let</span> tempArr = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    flattenedArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 每一个元素都加上 children 字段</span></span><br><span class=\"line\">        item.children = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 使用 id 做缓存索引</span></span><br><span class=\"line\">        <span class=\"comment\">// 之后只需要知道 id，就可以直接找到数据对象</span></span><br><span class=\"line\">        cache[item.id] = item</span><br><span class=\"line\">        </span><br><span class=\"line\">++++    <span class=\"keyword\">if</span> (!item.pid) &#123;</span><br><span class=\"line\">++++        <span class=\"comment\">// 不存在 pid 属性，当前元素为根结点</span></span><br><span class=\"line\">++++        <span class=\"comment\">// 直接放到最终的返回对象里面，后续元素可以直接挂载</span></span><br><span class=\"line\">++++        unflattenedArr.push(item)</span><br><span class=\"line\">++++    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">++++        <span class=\"comment\">// 子节点，放到新对象里面，后续会用到</span></span><br><span class=\"line\">++++        tempArr.push(item)</span><br><span class=\"line\">++++    &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">++++ <span class=\"keyword\">return</span> unflattenedArr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过这次调整，我们已经安置好根节点了（<code>unflattenedArr</code>），而且非根节点也知道了（<code>tempArr</code>）。</p>\n<p>现在，我们需要把非根节点放置到相应位置了。还记得上面的 <code>cache</code> 吗，我们可以非常方便的找到任何一个 id 的节点位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unflattened = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拷贝一下原有数组，防止后续修改会影响原数组</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> flattenedArr = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(arr))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 临时缓存索引(id 为下标的对象)</span></span><br><span class=\"line\">    <span class=\"comment\">// 大致这个样子 &#123; 1:&#123;&#125;,2:&#123;&#125;,3:&#123;&#125; &#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cache = &#123;&#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 最终要返回的非扁平化数组</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> unflattenedArr = []</span><br><span class=\"line\">    <span class=\"comment\">// 存放非根结点的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> tempArr = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    flattenedArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 每一个元素都加上 children 字段</span></span><br><span class=\"line\">        item.children = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 使用 id 做缓存索引</span></span><br><span class=\"line\">        <span class=\"comment\">// 之后只需要知道 id，就可以直接找到数据对象</span></span><br><span class=\"line\">        cache[item.id] = item</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!item.pid) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 不存在 pid 属性，当前元素为根结点</span></span><br><span class=\"line\">            <span class=\"comment\">// 直接放到最终的返回对象里面，后续元素可以直接挂载</span></span><br><span class=\"line\">            unflattenedArr.push(item)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 子节点，放到新对象里面，后续会用到</span></span><br><span class=\"line\">            tempArr.push(item)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">++++ <span class=\"comment\">// 处理非根子节点</span></span><br><span class=\"line\">++++ tempArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">++++     <span class=\"comment\">// 当前 item 的父节点 id </span></span><br><span class=\"line\">++++     <span class=\"keyword\">const</span> pid = item.pid</span><br><span class=\"line\">++++     <span class=\"comment\">// 通过上面的 cache 索引，直接将子节点挂到对应的父节点上</span></span><br><span class=\"line\">++++     cache[pid].children.push(item)</span><br><span class=\"line\">++++ &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> unflattenedArr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时我们可以看下返回数据，已经非常好了。的确如此，完全可以直接使用了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"A\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"children\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">                <span class=\"string\">\"text\"</span>: <span class=\"string\">\"A1\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"pid\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"string\">\"children\"</span>: []</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">                <span class=\"string\">\"text\"</span>: <span class=\"string\">\"A2\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"pid\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"string\">\"children\"</span>: []</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"children\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"number\">6</span>,</span><br><span class=\"line\">                <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B1\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"pid\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"string\">\"children\"</span>: []</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B2\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"pid\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"string\">\"children\"</span>: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"string\">\"id\"</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B21\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"pid\"</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"children\"</span>: []</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"string\">\"id\"</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B22\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"pid\"</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"children\"</span>: []</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"C\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"children\"</span>: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>对于一些细节上，我们还有提升输出质量的空间：</p>\n<ol>\n<li><code>pid</code> 字段，因为已经是嵌套结构，这个字段不再有价值</li>\n<li><code>children</code> 字段，末端子节点是没有意义的，当然如果有扩展的话，还是保留着好。</li>\n</ol>\n<p>对于这两个细节上，也很好解决，因为我们有所有节点的索引嘛。再第二个循环后面，再加一个循环处理下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.keys(cache).forEach(<span class=\"function\"><span class=\"params\">id</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> item = cache[id]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item.children.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> item.children</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> item.pid</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这样就彻底搞定了。</p>\n<p>本文代码见此：<a href=\"https://github.com/yukapril/learning/blob/master/array-flattened/unflattened.html\" target=\"_blank\" rel=\"noopener\">Github</a></p>"},{"layout":"post","title":"useragent 详解","date":"2018-10-13T22:02:00.000Z","_content":"\n因为工作需要，稍微认真的了解了下 useragent，发现它的配置理想和现实还是差距很大的。至于历史什么的，详细的就不多说了，很多网站可以搜索到。总之，各个浏览器厂商为了能所谓的页面兼容，useragent 也越来越相似。\n\n也正是因为现行技术实现上，这些所谓的适配，大部分时候都是根据正则表达式来匹配相关字段，匹配成功即认定当前设备符合预期。但鲜有文章去详谈 useragent 每个字段的具体含义。这也正是本文要做的事情。\n\n由于没有找到相关的资料，有的结论论断和理解方式，只是我自己的想法，可能与实际有出入。\n\n<!-- more -->\n\n## useragent 的使用\n\n在做各种 web 时候，经常会根据用户的 useragent 来进行一些判断。比如设备机型、系统、浏览器类型等。\n\n有些是需要进行统计分析。如百度/google 统计之类，获取用户当前所有设备的信息，用于数据的分析和业务支撑。\n\n有些是需要风控需要。这里尤其金融方向的业务用的颇多，通过判断用户设配类型、IP等是否与之前一致，来确认用户账号是否被盗。\n\n还有一些时候是业务逻辑的设计需要。比如 iOS 和 Android 用户要区分对待，不同系统可能要展示的功能有区别等。（为了抵消歧视，你可以想做帮助页面，iOS 和 Android 因为按钮位置等不同，截图也不相同，帮助文档也是不同的）\n\n还有一些功能逻辑，是需要单独处理的。比如适配特殊机型，iPhone X 长屏幕优化等。\n\n以上的这些功能，都需要依赖 useragent 的适配。\n\n## useragent 的入门\n\n说到 useragent，就必须先说它的获取方式：\n\n```\nwindow.navigator.userAgent // 可以省略window，简写 navigator.userAgent\n// Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36\n```\n\n关于 useragent 的介绍，可以参考这里：[https://zh.wikipedia.org/wiki/用户代理](https://zh.wikipedia.org/wiki/用户代理)。我把关键的信息摘出来。\n\nuseragent 的标准格式应该是：\n\n```\nMozilla/[version] ([system and browser information]) [platform] ([platform details]) [extensions] \n```\n\n在我看来，useragent 应该由 5 个字段组成：\n\n- **Mozilla 前缀**：这个已经是兼容后的产物了，没什么意义了。即 `Mozilla/5.0`。\n- **系统和浏览器信息**：即 `(Windows NT 10.0; Win64; x64)`。这个字段需要用括号括起来。\n- **浏览器渲染引擎**：即 `AppleWebKit/537.36`。\n- **浏览器渲染其他补充信息**：我认为各个浏览器为了兼容，这个字段已经没有了实际意义，即 `(KHTML, like Gecko)`。这个字段同样需要用括号括起来。\n- **扩展字段**：这个字段内容最为丰富，主要描述了浏览器信息，以及各个浏览器自己添加的自定义字段等。即 `Chrome/70.0.3538.5 Safari/537.36`。\n\n或许你会好奇，在第二个字段中应该描述的浏览器信息呢？怎么却要在第五个字段中出现？这可能还要涉及一些历史。\n\n## useragent 历史\n\n最早做 useragent 规划的时候，是这样设计的。\n\n```\nAppName/version (extensions)\n```\n\n比如这样子：\n\n```\nMozilla/3.0 (Win95; I)\n```\n\n你如果开发了一个微博浏览器，按规矩应该这么叫：\n\n```\nWeiboBroswer/1.0 (Windows NT 10)\n```\n\n那个年代，IE 发展太慢，别人支持的他不支持。所以部分功能，要对 IE 屏蔽掉。代码大致还是这么写的：\n\n```js\nvar ua = window.navigator.userAgent\nif(ua.indexOf('Mozilla') === 0) {\n    // 开启xxx功能\n}\n```\n\n这就导致后续 IE 升级，即便支持了新功能，用户最终也不能使用上。因为网站没有更新代码。\n\n所以，IE 干脆就是也叫作了：\n\n```\nMozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)\n```\n\n就这样，第 1 字段就没什么意义了，第 2 字段开始描述浏览器信息了。\n\n虽然和现代的格式不同（5 段结构），但是可以将浏览器信息等当做第 5 段内容，故本文还是更多的按照现有的风格来说明 useragent。\n\n## Mozilla 前缀\n\n目前我只见过 `4.0` 和 `5.0` 两种。\n\nIE8 及以下浏览器（我查询到 IE5），是 `Mozilla/4.0`，之后都是 `Mozilla/5.0` 了。具体的版本含义不清楚。\n\n需要特殊说明的是，这个字段还可能是 `Opera/9.80` 这种形式。opera 当初是比较规矩的。\n\n## 系统和浏览器信息\n\n这个字段最为复杂。一方面涉及老的 IE，这里面什么信息都有；一方面不同平台，也没有个规律规矩，甚至是顺序都没有规定。唯一确定的，就是**使用分号进行分隔**。\n\n同时，由于不同系统、浏览器差异，有的字段会出现在第 2 字段中，而有的却出现在第 3、5 字段中。这里主要说重点字段，对于那些可能出现在 3、5 字段的，则按照后面出现为准。\n\n我先列出几个 useragent，为了看着方便，只列出前两个字段：\n\n```\n// windows\n// IE 系列\nMozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\nMozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)\nMozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)\nMozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)\nMozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)\nMozilla/5.0 (compatible, MSIE 11, Windows NT 6.1; Trident/7.0; rv:11.0)\nMozilla/5.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; KB974489; Maxthon 2.0)\nMozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/4.0; WOW64; Trident/5.0; Maxthon 2.0)\n// edge\nMozilla/5.0 (Windows NT 6.1; WOW64)\nMozilla/5.0 (Windows NT 10.0; Win64; x64)\n// firefox\nMozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0)\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0)\n// chrome\nMozilla/5.0 (Windows NT 10.0; Win64; x64)\n    \n// Mac\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_10; rv:33.0)\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3)\n    \n// Linux\nMozilla/5.0 (X11; Ubuntu; Linux i686; rv:18.0)\nMozilla/5.0 (X11; Linux i586; rv:31.0)\n    \n// iOS\nMozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X)\nMozilla/5.0 (iPad; CPU OS 11_0 like Mac OS X)\nMozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us)\n    \n// Android\nMozilla/5.0 (Linux; U; Android 2.3.7; en-us; NexusOneBuild/FRF91)\n    \n// 其他设备\nMozilla/5.0 (BlackBerry; U; BlackBerry 9900; en)\nMozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US)\n```\n\n我们主要关注重点字段，非重点的可以忽略。\n\n**平台及系统字段：**\n\n* `Windows NT x.x`：Windows 系统环境\n\t* `5.0`： Windows 2000\n\t* `5.1`： Windows XP\n\t* `6.0`： Windows Vista / Windows Server 2008\n\t* `6.1`： Windows 7 / Windows Server 2008 R2\n\t* `6.2`： Windows 8 / Windows RT / Windows Server 2012\n\t* `6.3`： Windows 8.1 / Windows Server 2012 R2\n* `Macintosh`：苹果 Mac 系统环境\n* `Intel Mac OS X x_x_x`：苹果 Mac 系统及版本号\n* `x11`：X窗口系统，指代 Linux 系统，并不是所有 Linux 浏览器都有此字段\n* `Linux xxxx`：Linux 系统环境，也可能不带有CPU信息\n\t* `i586`：很老的处理器（貌似指不含 MMX 指令集的 CPU）\n\t* `i686`：一般 CPU\n\t* `x86_64`：64 位 CPU\n\t* `mips`：MIPS 处理器\n\t* `ppc`：PowerPC\n\t* `amd64`：因该是指 AMD64 专属 CPU，并非常见的 `x86_64`\n\t* `armv7l`：ARM v7 处理器\n* `Linux x.x.x.xxxx`：Linux 系统环境，后面跟着内核版本号，例如 `Linux 2.6.31-16-generic`，这种写法不常见。\n* `iPhone` `iPad` `iPod`：苹果相应的设备\n* `Android`：一般会跟在 `Linux` 字段后面。安卓设备，后面还可能跟有设备信息。\n* `U` `I` `N`：加密等级，`U`-强安全加密，`I`-弱安全加密，`N`-无安全加密\n\t\n**Windows 专属字段：**\n\t\n* `compatible`：仅在 IE 浏览器中出现，表示兼容 `Mozilla/4.0` `Mozilla/5.0`，常见于 IE 浏览器，其他早些的浏览器比如 `Konqueror` 也有使用到。\n* `Trident/x.x`：仅在 IE 浏览器中出现，表示 Trident 渲染引擎版本。对于第三方浏览器，比如 Mathon，可能会出现两个值\n* `MSIE x.x`：IE浏览器版本，不一定带有小数点，而且老的版本可能是 `MSIE 6.0b` `MSIE 5.50` 这种形式\n* `WOW64`：仅在 Windows中出现，是 `Windows(32) on Windows 64`，表示当前浏览器是 32 位，运行在 64 位系统上，但是一般却不合 `x64` 连用，但系统确实是 64 位\n* `Win64`：表示当前浏览器是64位的，一般和 `x64` 连用\n* `x64`：表示系统是64位的\n\n**其他字段：**\n\n* `rv:x.x`：当前浏览器版本，一般 IE11 和 Firefox 才会有此字段，Chrome 从未见过用此字段。如果是第三方浏览器，这里也指代当前利用的 IE版本\n\n**额外说明：**\n\nIE 的浏览器，还可能带上补丁号（类似 `KB974489`），系统 .NET 插件等信息等。\n\n有的浏览器还会带上浏览器语言，比如 `en-US`。\n\nLinux / BSD 系统，可能会带上发行版信息，比如 `(X11; Ubuntu; Linux x86_64; rv:61.0)` 但这个不是必须的。发行版信息，也可能在第 5 字段中出现。\n\n## 浏览器渲染引擎及其他补充信息\n\n这个字段现代浏览器比较好说明，要么没有，要么就是缺少补充信息（括号内的内容）\n\n```\nAppleWebKit/604.1.34 (KHTML, like Gecko)\nGecko/20100101\nPresto/2.9.201\nlike Gecko\n```\n\n现在一般都是 `AppleWebKit` `Gecko`，指代的是渲染引擎版本号。\n\n很久以前 Opera 浏览器是 `Presto`。\n\nIE 11 开始写上了 `like Gecko`，我认为没什么用。此外，IE浏览器渲染引擎及版本在上一节中有提到。\n\n\n## 扩展字段\n\n这个字段内容最多，不过还好主要的字段不复杂。字段采用**空格进行分隔**。\n\n先看例子，下面只展示 useragent 的扩展字段内容：\n\n```\n// Desktop\nChrome/69.0.3497.81 Safari/537.36\nFirefox/61.0\nVersion/7.0.3 Safari/7046A194A\n\n// Mobile\nVersion/10.0 Mobile/14E304 Safari/602.1\nVersion/11.0 Mobile/15A5341f Safari/604.1\nVersion/4.0 Chrome/69.0.3497.81 Mobile Safari/537.363\n\n// Other\nMobile/16A366 MicroMessenger/6.7.2 NetType/WIFI Language/zh_CN // 微信\nMobile/16A366 ChannelId(36) NebulaSDK/1.8.100112 Nebula PSDType(1) AlipayDefined(nt:WIFI,ws:414|672|3.0,ac:T) AliApp(AP/10.1.32.600) AlipayClient/10.1.32.600 Alipay Language/zh-Hans // 支付宝\n```\n\n首先，由于历史原因，Chrome 浏览器也会带有 Safari 字段。\n\n**主流字段：**\n\n* `Safari`：Safari 版本号\n* `Chrome`：Chrome 版本号\n* `Version`：系统版本号，一般移动设备和 Mac 设备拥有\n* `Mobile`：移动设备版本号，一般指内部版本号，苹果设备拥有版本号，安卓设备不含版本号\n\n**其他浏览器字段：**\n\n主要就是各种第三方浏览器，包括 APP 内嵌入的 WebView 等。为了方便自我识别，都是在这里加上各个 APP 独有的信息。\n\n一般来讲，都是采用标准的 `key/value` 形式，但不是所有字段都符合这个规律。\n\n基本上要判断什么浏览器（或者WebView），需要看下它的 useragent，单独处理了。\n\n--END--\n","source":"_posts/2018/2018-10-13-useragent.md","raw":"---\nlayout: post\ntitle: useragent 详解\ndate: 2018-10-13 22:02:00 GMT+0000\ncategories: [代码]\ntags:  [useragent]\n---\n\n因为工作需要，稍微认真的了解了下 useragent，发现它的配置理想和现实还是差距很大的。至于历史什么的，详细的就不多说了，很多网站可以搜索到。总之，各个浏览器厂商为了能所谓的页面兼容，useragent 也越来越相似。\n\n也正是因为现行技术实现上，这些所谓的适配，大部分时候都是根据正则表达式来匹配相关字段，匹配成功即认定当前设备符合预期。但鲜有文章去详谈 useragent 每个字段的具体含义。这也正是本文要做的事情。\n\n由于没有找到相关的资料，有的结论论断和理解方式，只是我自己的想法，可能与实际有出入。\n\n<!-- more -->\n\n## useragent 的使用\n\n在做各种 web 时候，经常会根据用户的 useragent 来进行一些判断。比如设备机型、系统、浏览器类型等。\n\n有些是需要进行统计分析。如百度/google 统计之类，获取用户当前所有设备的信息，用于数据的分析和业务支撑。\n\n有些是需要风控需要。这里尤其金融方向的业务用的颇多，通过判断用户设配类型、IP等是否与之前一致，来确认用户账号是否被盗。\n\n还有一些时候是业务逻辑的设计需要。比如 iOS 和 Android 用户要区分对待，不同系统可能要展示的功能有区别等。（为了抵消歧视，你可以想做帮助页面，iOS 和 Android 因为按钮位置等不同，截图也不相同，帮助文档也是不同的）\n\n还有一些功能逻辑，是需要单独处理的。比如适配特殊机型，iPhone X 长屏幕优化等。\n\n以上的这些功能，都需要依赖 useragent 的适配。\n\n## useragent 的入门\n\n说到 useragent，就必须先说它的获取方式：\n\n```\nwindow.navigator.userAgent // 可以省略window，简写 navigator.userAgent\n// Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36\n```\n\n关于 useragent 的介绍，可以参考这里：[https://zh.wikipedia.org/wiki/用户代理](https://zh.wikipedia.org/wiki/用户代理)。我把关键的信息摘出来。\n\nuseragent 的标准格式应该是：\n\n```\nMozilla/[version] ([system and browser information]) [platform] ([platform details]) [extensions] \n```\n\n在我看来，useragent 应该由 5 个字段组成：\n\n- **Mozilla 前缀**：这个已经是兼容后的产物了，没什么意义了。即 `Mozilla/5.0`。\n- **系统和浏览器信息**：即 `(Windows NT 10.0; Win64; x64)`。这个字段需要用括号括起来。\n- **浏览器渲染引擎**：即 `AppleWebKit/537.36`。\n- **浏览器渲染其他补充信息**：我认为各个浏览器为了兼容，这个字段已经没有了实际意义，即 `(KHTML, like Gecko)`。这个字段同样需要用括号括起来。\n- **扩展字段**：这个字段内容最为丰富，主要描述了浏览器信息，以及各个浏览器自己添加的自定义字段等。即 `Chrome/70.0.3538.5 Safari/537.36`。\n\n或许你会好奇，在第二个字段中应该描述的浏览器信息呢？怎么却要在第五个字段中出现？这可能还要涉及一些历史。\n\n## useragent 历史\n\n最早做 useragent 规划的时候，是这样设计的。\n\n```\nAppName/version (extensions)\n```\n\n比如这样子：\n\n```\nMozilla/3.0 (Win95; I)\n```\n\n你如果开发了一个微博浏览器，按规矩应该这么叫：\n\n```\nWeiboBroswer/1.0 (Windows NT 10)\n```\n\n那个年代，IE 发展太慢，别人支持的他不支持。所以部分功能，要对 IE 屏蔽掉。代码大致还是这么写的：\n\n```js\nvar ua = window.navigator.userAgent\nif(ua.indexOf('Mozilla') === 0) {\n    // 开启xxx功能\n}\n```\n\n这就导致后续 IE 升级，即便支持了新功能，用户最终也不能使用上。因为网站没有更新代码。\n\n所以，IE 干脆就是也叫作了：\n\n```\nMozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)\n```\n\n就这样，第 1 字段就没什么意义了，第 2 字段开始描述浏览器信息了。\n\n虽然和现代的格式不同（5 段结构），但是可以将浏览器信息等当做第 5 段内容，故本文还是更多的按照现有的风格来说明 useragent。\n\n## Mozilla 前缀\n\n目前我只见过 `4.0` 和 `5.0` 两种。\n\nIE8 及以下浏览器（我查询到 IE5），是 `Mozilla/4.0`，之后都是 `Mozilla/5.0` 了。具体的版本含义不清楚。\n\n需要特殊说明的是，这个字段还可能是 `Opera/9.80` 这种形式。opera 当初是比较规矩的。\n\n## 系统和浏览器信息\n\n这个字段最为复杂。一方面涉及老的 IE，这里面什么信息都有；一方面不同平台，也没有个规律规矩，甚至是顺序都没有规定。唯一确定的，就是**使用分号进行分隔**。\n\n同时，由于不同系统、浏览器差异，有的字段会出现在第 2 字段中，而有的却出现在第 3、5 字段中。这里主要说重点字段，对于那些可能出现在 3、5 字段的，则按照后面出现为准。\n\n我先列出几个 useragent，为了看着方便，只列出前两个字段：\n\n```\n// windows\n// IE 系列\nMozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\nMozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)\nMozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)\nMozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)\nMozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)\nMozilla/5.0 (compatible, MSIE 11, Windows NT 6.1; Trident/7.0; rv:11.0)\nMozilla/5.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; KB974489; Maxthon 2.0)\nMozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/4.0; WOW64; Trident/5.0; Maxthon 2.0)\n// edge\nMozilla/5.0 (Windows NT 6.1; WOW64)\nMozilla/5.0 (Windows NT 10.0; Win64; x64)\n// firefox\nMozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0)\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0)\n// chrome\nMozilla/5.0 (Windows NT 10.0; Win64; x64)\n    \n// Mac\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_10; rv:33.0)\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3)\n    \n// Linux\nMozilla/5.0 (X11; Ubuntu; Linux i686; rv:18.0)\nMozilla/5.0 (X11; Linux i586; rv:31.0)\n    \n// iOS\nMozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X)\nMozilla/5.0 (iPad; CPU OS 11_0 like Mac OS X)\nMozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us)\n    \n// Android\nMozilla/5.0 (Linux; U; Android 2.3.7; en-us; NexusOneBuild/FRF91)\n    \n// 其他设备\nMozilla/5.0 (BlackBerry; U; BlackBerry 9900; en)\nMozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US)\n```\n\n我们主要关注重点字段，非重点的可以忽略。\n\n**平台及系统字段：**\n\n* `Windows NT x.x`：Windows 系统环境\n\t* `5.0`： Windows 2000\n\t* `5.1`： Windows XP\n\t* `6.0`： Windows Vista / Windows Server 2008\n\t* `6.1`： Windows 7 / Windows Server 2008 R2\n\t* `6.2`： Windows 8 / Windows RT / Windows Server 2012\n\t* `6.3`： Windows 8.1 / Windows Server 2012 R2\n* `Macintosh`：苹果 Mac 系统环境\n* `Intel Mac OS X x_x_x`：苹果 Mac 系统及版本号\n* `x11`：X窗口系统，指代 Linux 系统，并不是所有 Linux 浏览器都有此字段\n* `Linux xxxx`：Linux 系统环境，也可能不带有CPU信息\n\t* `i586`：很老的处理器（貌似指不含 MMX 指令集的 CPU）\n\t* `i686`：一般 CPU\n\t* `x86_64`：64 位 CPU\n\t* `mips`：MIPS 处理器\n\t* `ppc`：PowerPC\n\t* `amd64`：因该是指 AMD64 专属 CPU，并非常见的 `x86_64`\n\t* `armv7l`：ARM v7 处理器\n* `Linux x.x.x.xxxx`：Linux 系统环境，后面跟着内核版本号，例如 `Linux 2.6.31-16-generic`，这种写法不常见。\n* `iPhone` `iPad` `iPod`：苹果相应的设备\n* `Android`：一般会跟在 `Linux` 字段后面。安卓设备，后面还可能跟有设备信息。\n* `U` `I` `N`：加密等级，`U`-强安全加密，`I`-弱安全加密，`N`-无安全加密\n\t\n**Windows 专属字段：**\n\t\n* `compatible`：仅在 IE 浏览器中出现，表示兼容 `Mozilla/4.0` `Mozilla/5.0`，常见于 IE 浏览器，其他早些的浏览器比如 `Konqueror` 也有使用到。\n* `Trident/x.x`：仅在 IE 浏览器中出现，表示 Trident 渲染引擎版本。对于第三方浏览器，比如 Mathon，可能会出现两个值\n* `MSIE x.x`：IE浏览器版本，不一定带有小数点，而且老的版本可能是 `MSIE 6.0b` `MSIE 5.50` 这种形式\n* `WOW64`：仅在 Windows中出现，是 `Windows(32) on Windows 64`，表示当前浏览器是 32 位，运行在 64 位系统上，但是一般却不合 `x64` 连用，但系统确实是 64 位\n* `Win64`：表示当前浏览器是64位的，一般和 `x64` 连用\n* `x64`：表示系统是64位的\n\n**其他字段：**\n\n* `rv:x.x`：当前浏览器版本，一般 IE11 和 Firefox 才会有此字段，Chrome 从未见过用此字段。如果是第三方浏览器，这里也指代当前利用的 IE版本\n\n**额外说明：**\n\nIE 的浏览器，还可能带上补丁号（类似 `KB974489`），系统 .NET 插件等信息等。\n\n有的浏览器还会带上浏览器语言，比如 `en-US`。\n\nLinux / BSD 系统，可能会带上发行版信息，比如 `(X11; Ubuntu; Linux x86_64; rv:61.0)` 但这个不是必须的。发行版信息，也可能在第 5 字段中出现。\n\n## 浏览器渲染引擎及其他补充信息\n\n这个字段现代浏览器比较好说明，要么没有，要么就是缺少补充信息（括号内的内容）\n\n```\nAppleWebKit/604.1.34 (KHTML, like Gecko)\nGecko/20100101\nPresto/2.9.201\nlike Gecko\n```\n\n现在一般都是 `AppleWebKit` `Gecko`，指代的是渲染引擎版本号。\n\n很久以前 Opera 浏览器是 `Presto`。\n\nIE 11 开始写上了 `like Gecko`，我认为没什么用。此外，IE浏览器渲染引擎及版本在上一节中有提到。\n\n\n## 扩展字段\n\n这个字段内容最多，不过还好主要的字段不复杂。字段采用**空格进行分隔**。\n\n先看例子，下面只展示 useragent 的扩展字段内容：\n\n```\n// Desktop\nChrome/69.0.3497.81 Safari/537.36\nFirefox/61.0\nVersion/7.0.3 Safari/7046A194A\n\n// Mobile\nVersion/10.0 Mobile/14E304 Safari/602.1\nVersion/11.0 Mobile/15A5341f Safari/604.1\nVersion/4.0 Chrome/69.0.3497.81 Mobile Safari/537.363\n\n// Other\nMobile/16A366 MicroMessenger/6.7.2 NetType/WIFI Language/zh_CN // 微信\nMobile/16A366 ChannelId(36) NebulaSDK/1.8.100112 Nebula PSDType(1) AlipayDefined(nt:WIFI,ws:414|672|3.0,ac:T) AliApp(AP/10.1.32.600) AlipayClient/10.1.32.600 Alipay Language/zh-Hans // 支付宝\n```\n\n首先，由于历史原因，Chrome 浏览器也会带有 Safari 字段。\n\n**主流字段：**\n\n* `Safari`：Safari 版本号\n* `Chrome`：Chrome 版本号\n* `Version`：系统版本号，一般移动设备和 Mac 设备拥有\n* `Mobile`：移动设备版本号，一般指内部版本号，苹果设备拥有版本号，安卓设备不含版本号\n\n**其他浏览器字段：**\n\n主要就是各种第三方浏览器，包括 APP 内嵌入的 WebView 等。为了方便自我识别，都是在这里加上各个 APP 独有的信息。\n\n一般来讲，都是采用标准的 `key/value` 形式，但不是所有字段都符合这个规律。\n\n基本上要判断什么浏览器（或者WebView），需要看下它的 useragent，单独处理了。\n\n--END--\n","slug":"2018-2018-10-13-useragent","published":1,"updated":"2019-07-18T17:19:07.289Z","comments":1,"photos":[],"link":"","_id":"cjy8y72v500cas21d5zik1jpg","content":"<p>因为工作需要，稍微认真的了解了下 useragent，发现它的配置理想和现实还是差距很大的。至于历史什么的，详细的就不多说了，很多网站可以搜索到。总之，各个浏览器厂商为了能所谓的页面兼容，useragent 也越来越相似。</p>\n<p>也正是因为现行技术实现上，这些所谓的适配，大部分时候都是根据正则表达式来匹配相关字段，匹配成功即认定当前设备符合预期。但鲜有文章去详谈 useragent 每个字段的具体含义。这也正是本文要做的事情。</p>\n<p>由于没有找到相关的资料，有的结论论断和理解方式，只是我自己的想法，可能与实际有出入。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"useragent-的使用\"><a href=\"#useragent-的使用\" class=\"headerlink\" title=\"useragent 的使用\"></a>useragent 的使用</h2><p>在做各种 web 时候，经常会根据用户的 useragent 来进行一些判断。比如设备机型、系统、浏览器类型等。</p>\n<p>有些是需要进行统计分析。如百度/google 统计之类，获取用户当前所有设备的信息，用于数据的分析和业务支撑。</p>\n<p>有些是需要风控需要。这里尤其金融方向的业务用的颇多，通过判断用户设配类型、IP等是否与之前一致，来确认用户账号是否被盗。</p>\n<p>还有一些时候是业务逻辑的设计需要。比如 iOS 和 Android 用户要区分对待，不同系统可能要展示的功能有区别等。（为了抵消歧视，你可以想做帮助页面，iOS 和 Android 因为按钮位置等不同，截图也不相同，帮助文档也是不同的）</p>\n<p>还有一些功能逻辑，是需要单独处理的。比如适配特殊机型，iPhone X 长屏幕优化等。</p>\n<p>以上的这些功能，都需要依赖 useragent 的适配。</p>\n<h2 id=\"useragent-的入门\"><a href=\"#useragent-的入门\" class=\"headerlink\" title=\"useragent 的入门\"></a>useragent 的入门</h2><p>说到 useragent，就必须先说它的获取方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.navigator.userAgent // 可以省略window，简写 navigator.userAgent</span><br><span class=\"line\">// Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</span><br></pre></td></tr></table></figure>\n\n<p>关于 useragent 的介绍，可以参考这里：<a href=\"https://zh.wikipedia.org/wiki/用户代理\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki/用户代理</a>。我把关键的信息摘出来。</p>\n<p>useragent 的标准格式应该是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mozilla/[version] ([system and browser information]) [platform] ([platform details]) [extensions]</span><br></pre></td></tr></table></figure>\n\n<p>在我看来，useragent 应该由 5 个字段组成：</p>\n<ul>\n<li><strong>Mozilla 前缀</strong>：这个已经是兼容后的产物了，没什么意义了。即 <code>Mozilla/5.0</code>。</li>\n<li><strong>系统和浏览器信息</strong>：即 <code>(Windows NT 10.0; Win64; x64)</code>。这个字段需要用括号括起来。</li>\n<li><strong>浏览器渲染引擎</strong>：即 <code>AppleWebKit/537.36</code>。</li>\n<li><strong>浏览器渲染其他补充信息</strong>：我认为各个浏览器为了兼容，这个字段已经没有了实际意义，即 <code>(KHTML, like Gecko)</code>。这个字段同样需要用括号括起来。</li>\n<li><strong>扩展字段</strong>：这个字段内容最为丰富，主要描述了浏览器信息，以及各个浏览器自己添加的自定义字段等。即 <code>Chrome/70.0.3538.5 Safari/537.36</code>。</li>\n</ul>\n<p>或许你会好奇，在第二个字段中应该描述的浏览器信息呢？怎么却要在第五个字段中出现？这可能还要涉及一些历史。</p>\n<h2 id=\"useragent-历史\"><a href=\"#useragent-历史\" class=\"headerlink\" title=\"useragent 历史\"></a>useragent 历史</h2><p>最早做 useragent 规划的时候，是这样设计的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AppName/version (extensions)</span><br></pre></td></tr></table></figure>\n\n<p>比如这样子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mozilla/3.0 (Win95; I)</span><br></pre></td></tr></table></figure>\n\n<p>你如果开发了一个微博浏览器，按规矩应该这么叫：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WeiboBroswer/1.0 (Windows NT 10)</span><br></pre></td></tr></table></figure>\n\n<p>那个年代，IE 发展太慢，别人支持的他不支持。所以部分功能，要对 IE 屏蔽掉。代码大致还是这么写的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ua = <span class=\"built_in\">window</span>.navigator.userAgent</span><br><span class=\"line\"><span class=\"keyword\">if</span>(ua.indexOf(<span class=\"string\">'Mozilla'</span>) === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 开启xxx功能</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这就导致后续 IE 升级，即便支持了新功能，用户最终也不能使用上。因为网站没有更新代码。</p>\n<p>所以，IE 干脆就是也叫作了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)</span><br></pre></td></tr></table></figure>\n\n<p>就这样，第 1 字段就没什么意义了，第 2 字段开始描述浏览器信息了。</p>\n<p>虽然和现代的格式不同（5 段结构），但是可以将浏览器信息等当做第 5 段内容，故本文还是更多的按照现有的风格来说明 useragent。</p>\n<h2 id=\"Mozilla-前缀\"><a href=\"#Mozilla-前缀\" class=\"headerlink\" title=\"Mozilla 前缀\"></a>Mozilla 前缀</h2><p>目前我只见过 <code>4.0</code> 和 <code>5.0</code> 两种。</p>\n<p>IE8 及以下浏览器（我查询到 IE5），是 <code>Mozilla/4.0</code>，之后都是 <code>Mozilla/5.0</code> 了。具体的版本含义不清楚。</p>\n<p>需要特殊说明的是，这个字段还可能是 <code>Opera/9.80</code> 这种形式。opera 当初是比较规矩的。</p>\n<h2 id=\"系统和浏览器信息\"><a href=\"#系统和浏览器信息\" class=\"headerlink\" title=\"系统和浏览器信息\"></a>系统和浏览器信息</h2><p>这个字段最为复杂。一方面涉及老的 IE，这里面什么信息都有；一方面不同平台，也没有个规律规矩，甚至是顺序都没有规定。唯一确定的，就是<strong>使用分号进行分隔</strong>。</p>\n<p>同时，由于不同系统、浏览器差异，有的字段会出现在第 2 字段中，而有的却出现在第 3、5 字段中。这里主要说重点字段，对于那些可能出现在 3、5 字段的，则按照后面出现为准。</p>\n<p>我先列出几个 useragent，为了看着方便，只列出前两个字段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// windows</span><br><span class=\"line\">// IE 系列</span><br><span class=\"line\">Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)</span><br><span class=\"line\">Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)</span><br><span class=\"line\">Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)</span><br><span class=\"line\">Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)</span><br><span class=\"line\">Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)</span><br><span class=\"line\">Mozilla/5.0 (compatible, MSIE 11, Windows NT 6.1; Trident/7.0; rv:11.0)</span><br><span class=\"line\">Mozilla/5.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; KB974489; Maxthon 2.0)</span><br><span class=\"line\">Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/4.0; WOW64; Trident/5.0; Maxthon 2.0)</span><br><span class=\"line\">// edge</span><br><span class=\"line\">Mozilla/5.0 (Windows NT 6.1; WOW64)</span><br><span class=\"line\">Mozilla/5.0 (Windows NT 10.0; Win64; x64)</span><br><span class=\"line\">// firefox</span><br><span class=\"line\">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0)</span><br><span class=\"line\">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0)</span><br><span class=\"line\">// chrome</span><br><span class=\"line\">Mozilla/5.0 (Windows NT 10.0; Win64; x64)</span><br><span class=\"line\">    </span><br><span class=\"line\">// Mac</span><br><span class=\"line\">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10; rv:33.0)</span><br><span class=\"line\">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3)</span><br><span class=\"line\">    </span><br><span class=\"line\">// Linux</span><br><span class=\"line\">Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:18.0)</span><br><span class=\"line\">Mozilla/5.0 (X11; Linux i586; rv:31.0)</span><br><span class=\"line\">    </span><br><span class=\"line\">// iOS</span><br><span class=\"line\">Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X)</span><br><span class=\"line\">Mozilla/5.0 (iPad; CPU OS 11_0 like Mac OS X)</span><br><span class=\"line\">Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us)</span><br><span class=\"line\">    </span><br><span class=\"line\">// Android</span><br><span class=\"line\">Mozilla/5.0 (Linux; U; Android 2.3.7; en-us; NexusOneBuild/FRF91)</span><br><span class=\"line\">    </span><br><span class=\"line\">// 其他设备</span><br><span class=\"line\">Mozilla/5.0 (BlackBerry; U; BlackBerry 9900; en)</span><br><span class=\"line\">Mozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US)</span><br></pre></td></tr></table></figure>\n\n<p>我们主要关注重点字段，非重点的可以忽略。</p>\n<p><strong>平台及系统字段：</strong></p>\n<ul>\n<li><code>Windows NT x.x</code>：Windows 系统环境<ul>\n<li><code>5.0</code>： Windows 2000</li>\n<li><code>5.1</code>： Windows XP</li>\n<li><code>6.0</code>： Windows Vista / Windows Server 2008</li>\n<li><code>6.1</code>： Windows 7 / Windows Server 2008 R2</li>\n<li><code>6.2</code>： Windows 8 / Windows RT / Windows Server 2012</li>\n<li><code>6.3</code>： Windows 8.1 / Windows Server 2012 R2</li>\n</ul>\n</li>\n<li><code>Macintosh</code>：苹果 Mac 系统环境</li>\n<li><code>Intel Mac OS X x_x_x</code>：苹果 Mac 系统及版本号</li>\n<li><code>x11</code>：X窗口系统，指代 Linux 系统，并不是所有 Linux 浏览器都有此字段</li>\n<li><code>Linux xxxx</code>：Linux 系统环境，也可能不带有CPU信息<ul>\n<li><code>i586</code>：很老的处理器（貌似指不含 MMX 指令集的 CPU）</li>\n<li><code>i686</code>：一般 CPU</li>\n<li><code>x86_64</code>：64 位 CPU</li>\n<li><code>mips</code>：MIPS 处理器</li>\n<li><code>ppc</code>：PowerPC</li>\n<li><code>amd64</code>：因该是指 AMD64 专属 CPU，并非常见的 <code>x86_64</code></li>\n<li><code>armv7l</code>：ARM v7 处理器</li>\n</ul>\n</li>\n<li><code>Linux x.x.x.xxxx</code>：Linux 系统环境，后面跟着内核版本号，例如 <code>Linux 2.6.31-16-generic</code>，这种写法不常见。</li>\n<li><code>iPhone</code> <code>iPad</code> <code>iPod</code>：苹果相应的设备</li>\n<li><code>Android</code>：一般会跟在 <code>Linux</code> 字段后面。安卓设备，后面还可能跟有设备信息。</li>\n<li><code>U</code> <code>I</code> <code>N</code>：加密等级，<code>U</code>-强安全加密，<code>I</code>-弱安全加密，<code>N</code>-无安全加密</li>\n</ul>\n<p><strong>Windows 专属字段：</strong></p>\n<ul>\n<li><code>compatible</code>：仅在 IE 浏览器中出现，表示兼容 <code>Mozilla/4.0</code> <code>Mozilla/5.0</code>，常见于 IE 浏览器，其他早些的浏览器比如 <code>Konqueror</code> 也有使用到。</li>\n<li><code>Trident/x.x</code>：仅在 IE 浏览器中出现，表示 Trident 渲染引擎版本。对于第三方浏览器，比如 Mathon，可能会出现两个值</li>\n<li><code>MSIE x.x</code>：IE浏览器版本，不一定带有小数点，而且老的版本可能是 <code>MSIE 6.0b</code> <code>MSIE 5.50</code> 这种形式</li>\n<li><code>WOW64</code>：仅在 Windows中出现，是 <code>Windows(32) on Windows 64</code>，表示当前浏览器是 32 位，运行在 64 位系统上，但是一般却不合 <code>x64</code> 连用，但系统确实是 64 位</li>\n<li><code>Win64</code>：表示当前浏览器是64位的，一般和 <code>x64</code> 连用</li>\n<li><code>x64</code>：表示系统是64位的</li>\n</ul>\n<p><strong>其他字段：</strong></p>\n<ul>\n<li><code>rv:x.x</code>：当前浏览器版本，一般 IE11 和 Firefox 才会有此字段，Chrome 从未见过用此字段。如果是第三方浏览器，这里也指代当前利用的 IE版本</li>\n</ul>\n<p><strong>额外说明：</strong></p>\n<p>IE 的浏览器，还可能带上补丁号（类似 <code>KB974489</code>），系统 .NET 插件等信息等。</p>\n<p>有的浏览器还会带上浏览器语言，比如 <code>en-US</code>。</p>\n<p>Linux / BSD 系统，可能会带上发行版信息，比如 <code>(X11; Ubuntu; Linux x86_64; rv:61.0)</code> 但这个不是必须的。发行版信息，也可能在第 5 字段中出现。</p>\n<h2 id=\"浏览器渲染引擎及其他补充信息\"><a href=\"#浏览器渲染引擎及其他补充信息\" class=\"headerlink\" title=\"浏览器渲染引擎及其他补充信息\"></a>浏览器渲染引擎及其他补充信息</h2><p>这个字段现代浏览器比较好说明，要么没有，要么就是缺少补充信息（括号内的内容）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AppleWebKit/604.1.34 (KHTML, like Gecko)</span><br><span class=\"line\">Gecko/20100101</span><br><span class=\"line\">Presto/2.9.201</span><br><span class=\"line\">like Gecko</span><br></pre></td></tr></table></figure>\n\n<p>现在一般都是 <code>AppleWebKit</code> <code>Gecko</code>，指代的是渲染引擎版本号。</p>\n<p>很久以前 Opera 浏览器是 <code>Presto</code>。</p>\n<p>IE 11 开始写上了 <code>like Gecko</code>，我认为没什么用。此外，IE浏览器渲染引擎及版本在上一节中有提到。</p>\n<h2 id=\"扩展字段\"><a href=\"#扩展字段\" class=\"headerlink\" title=\"扩展字段\"></a>扩展字段</h2><p>这个字段内容最多，不过还好主要的字段不复杂。字段采用<strong>空格进行分隔</strong>。</p>\n<p>先看例子，下面只展示 useragent 的扩展字段内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Desktop</span><br><span class=\"line\">Chrome/69.0.3497.81 Safari/537.36</span><br><span class=\"line\">Firefox/61.0</span><br><span class=\"line\">Version/7.0.3 Safari/7046A194A</span><br><span class=\"line\"></span><br><span class=\"line\">// Mobile</span><br><span class=\"line\">Version/10.0 Mobile/14E304 Safari/602.1</span><br><span class=\"line\">Version/11.0 Mobile/15A5341f Safari/604.1</span><br><span class=\"line\">Version/4.0 Chrome/69.0.3497.81 Mobile Safari/537.363</span><br><span class=\"line\"></span><br><span class=\"line\">// Other</span><br><span class=\"line\">Mobile/16A366 MicroMessenger/6.7.2 NetType/WIFI Language/zh_CN // 微信</span><br><span class=\"line\">Mobile/16A366 ChannelId(36) NebulaSDK/1.8.100112 Nebula PSDType(1) AlipayDefined(nt:WIFI,ws:414|672|3.0,ac:T) AliApp(AP/10.1.32.600) AlipayClient/10.1.32.600 Alipay Language/zh-Hans // 支付宝</span><br></pre></td></tr></table></figure>\n\n<p>首先，由于历史原因，Chrome 浏览器也会带有 Safari 字段。</p>\n<p><strong>主流字段：</strong></p>\n<ul>\n<li><code>Safari</code>：Safari 版本号</li>\n<li><code>Chrome</code>：Chrome 版本号</li>\n<li><code>Version</code>：系统版本号，一般移动设备和 Mac 设备拥有</li>\n<li><code>Mobile</code>：移动设备版本号，一般指内部版本号，苹果设备拥有版本号，安卓设备不含版本号</li>\n</ul>\n<p><strong>其他浏览器字段：</strong></p>\n<p>主要就是各种第三方浏览器，包括 APP 内嵌入的 WebView 等。为了方便自我识别，都是在这里加上各个 APP 独有的信息。</p>\n<p>一般来讲，都是采用标准的 <code>key/value</code> 形式，但不是所有字段都符合这个规律。</p>\n<p>基本上要判断什么浏览器（或者WebView），需要看下它的 useragent，单独处理了。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>因为工作需要，稍微认真的了解了下 useragent，发现它的配置理想和现实还是差距很大的。至于历史什么的，详细的就不多说了，很多网站可以搜索到。总之，各个浏览器厂商为了能所谓的页面兼容，useragent 也越来越相似。</p>\n<p>也正是因为现行技术实现上，这些所谓的适配，大部分时候都是根据正则表达式来匹配相关字段，匹配成功即认定当前设备符合预期。但鲜有文章去详谈 useragent 每个字段的具体含义。这也正是本文要做的事情。</p>\n<p>由于没有找到相关的资料，有的结论论断和理解方式，只是我自己的想法，可能与实际有出入。</p>","more":"<h2 id=\"useragent-的使用\"><a href=\"#useragent-的使用\" class=\"headerlink\" title=\"useragent 的使用\"></a>useragent 的使用</h2><p>在做各种 web 时候，经常会根据用户的 useragent 来进行一些判断。比如设备机型、系统、浏览器类型等。</p>\n<p>有些是需要进行统计分析。如百度/google 统计之类，获取用户当前所有设备的信息，用于数据的分析和业务支撑。</p>\n<p>有些是需要风控需要。这里尤其金融方向的业务用的颇多，通过判断用户设配类型、IP等是否与之前一致，来确认用户账号是否被盗。</p>\n<p>还有一些时候是业务逻辑的设计需要。比如 iOS 和 Android 用户要区分对待，不同系统可能要展示的功能有区别等。（为了抵消歧视，你可以想做帮助页面，iOS 和 Android 因为按钮位置等不同，截图也不相同，帮助文档也是不同的）</p>\n<p>还有一些功能逻辑，是需要单独处理的。比如适配特殊机型，iPhone X 长屏幕优化等。</p>\n<p>以上的这些功能，都需要依赖 useragent 的适配。</p>\n<h2 id=\"useragent-的入门\"><a href=\"#useragent-的入门\" class=\"headerlink\" title=\"useragent 的入门\"></a>useragent 的入门</h2><p>说到 useragent，就必须先说它的获取方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.navigator.userAgent // 可以省略window，简写 navigator.userAgent</span><br><span class=\"line\">// Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</span><br></pre></td></tr></table></figure>\n\n<p>关于 useragent 的介绍，可以参考这里：<a href=\"https://zh.wikipedia.org/wiki/用户代理\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki/用户代理</a>。我把关键的信息摘出来。</p>\n<p>useragent 的标准格式应该是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mozilla/[version] ([system and browser information]) [platform] ([platform details]) [extensions]</span><br></pre></td></tr></table></figure>\n\n<p>在我看来，useragent 应该由 5 个字段组成：</p>\n<ul>\n<li><strong>Mozilla 前缀</strong>：这个已经是兼容后的产物了，没什么意义了。即 <code>Mozilla/5.0</code>。</li>\n<li><strong>系统和浏览器信息</strong>：即 <code>(Windows NT 10.0; Win64; x64)</code>。这个字段需要用括号括起来。</li>\n<li><strong>浏览器渲染引擎</strong>：即 <code>AppleWebKit/537.36</code>。</li>\n<li><strong>浏览器渲染其他补充信息</strong>：我认为各个浏览器为了兼容，这个字段已经没有了实际意义，即 <code>(KHTML, like Gecko)</code>。这个字段同样需要用括号括起来。</li>\n<li><strong>扩展字段</strong>：这个字段内容最为丰富，主要描述了浏览器信息，以及各个浏览器自己添加的自定义字段等。即 <code>Chrome/70.0.3538.5 Safari/537.36</code>。</li>\n</ul>\n<p>或许你会好奇，在第二个字段中应该描述的浏览器信息呢？怎么却要在第五个字段中出现？这可能还要涉及一些历史。</p>\n<h2 id=\"useragent-历史\"><a href=\"#useragent-历史\" class=\"headerlink\" title=\"useragent 历史\"></a>useragent 历史</h2><p>最早做 useragent 规划的时候，是这样设计的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AppName/version (extensions)</span><br></pre></td></tr></table></figure>\n\n<p>比如这样子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mozilla/3.0 (Win95; I)</span><br></pre></td></tr></table></figure>\n\n<p>你如果开发了一个微博浏览器，按规矩应该这么叫：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WeiboBroswer/1.0 (Windows NT 10)</span><br></pre></td></tr></table></figure>\n\n<p>那个年代，IE 发展太慢，别人支持的他不支持。所以部分功能，要对 IE 屏蔽掉。代码大致还是这么写的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ua = <span class=\"built_in\">window</span>.navigator.userAgent</span><br><span class=\"line\"><span class=\"keyword\">if</span>(ua.indexOf(<span class=\"string\">'Mozilla'</span>) === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 开启xxx功能</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这就导致后续 IE 升级，即便支持了新功能，用户最终也不能使用上。因为网站没有更新代码。</p>\n<p>所以，IE 干脆就是也叫作了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)</span><br></pre></td></tr></table></figure>\n\n<p>就这样，第 1 字段就没什么意义了，第 2 字段开始描述浏览器信息了。</p>\n<p>虽然和现代的格式不同（5 段结构），但是可以将浏览器信息等当做第 5 段内容，故本文还是更多的按照现有的风格来说明 useragent。</p>\n<h2 id=\"Mozilla-前缀\"><a href=\"#Mozilla-前缀\" class=\"headerlink\" title=\"Mozilla 前缀\"></a>Mozilla 前缀</h2><p>目前我只见过 <code>4.0</code> 和 <code>5.0</code> 两种。</p>\n<p>IE8 及以下浏览器（我查询到 IE5），是 <code>Mozilla/4.0</code>，之后都是 <code>Mozilla/5.0</code> 了。具体的版本含义不清楚。</p>\n<p>需要特殊说明的是，这个字段还可能是 <code>Opera/9.80</code> 这种形式。opera 当初是比较规矩的。</p>\n<h2 id=\"系统和浏览器信息\"><a href=\"#系统和浏览器信息\" class=\"headerlink\" title=\"系统和浏览器信息\"></a>系统和浏览器信息</h2><p>这个字段最为复杂。一方面涉及老的 IE，这里面什么信息都有；一方面不同平台，也没有个规律规矩，甚至是顺序都没有规定。唯一确定的，就是<strong>使用分号进行分隔</strong>。</p>\n<p>同时，由于不同系统、浏览器差异，有的字段会出现在第 2 字段中，而有的却出现在第 3、5 字段中。这里主要说重点字段，对于那些可能出现在 3、5 字段的，则按照后面出现为准。</p>\n<p>我先列出几个 useragent，为了看着方便，只列出前两个字段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// windows</span><br><span class=\"line\">// IE 系列</span><br><span class=\"line\">Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)</span><br><span class=\"line\">Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)</span><br><span class=\"line\">Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)</span><br><span class=\"line\">Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)</span><br><span class=\"line\">Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)</span><br><span class=\"line\">Mozilla/5.0 (compatible, MSIE 11, Windows NT 6.1; Trident/7.0; rv:11.0)</span><br><span class=\"line\">Mozilla/5.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; KB974489; Maxthon 2.0)</span><br><span class=\"line\">Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/4.0; WOW64; Trident/5.0; Maxthon 2.0)</span><br><span class=\"line\">// edge</span><br><span class=\"line\">Mozilla/5.0 (Windows NT 6.1; WOW64)</span><br><span class=\"line\">Mozilla/5.0 (Windows NT 10.0; Win64; x64)</span><br><span class=\"line\">// firefox</span><br><span class=\"line\">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0)</span><br><span class=\"line\">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0)</span><br><span class=\"line\">// chrome</span><br><span class=\"line\">Mozilla/5.0 (Windows NT 10.0; Win64; x64)</span><br><span class=\"line\">    </span><br><span class=\"line\">// Mac</span><br><span class=\"line\">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10; rv:33.0)</span><br><span class=\"line\">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3)</span><br><span class=\"line\">    </span><br><span class=\"line\">// Linux</span><br><span class=\"line\">Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:18.0)</span><br><span class=\"line\">Mozilla/5.0 (X11; Linux i586; rv:31.0)</span><br><span class=\"line\">    </span><br><span class=\"line\">// iOS</span><br><span class=\"line\">Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X)</span><br><span class=\"line\">Mozilla/5.0 (iPad; CPU OS 11_0 like Mac OS X)</span><br><span class=\"line\">Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us)</span><br><span class=\"line\">    </span><br><span class=\"line\">// Android</span><br><span class=\"line\">Mozilla/5.0 (Linux; U; Android 2.3.7; en-us; NexusOneBuild/FRF91)</span><br><span class=\"line\">    </span><br><span class=\"line\">// 其他设备</span><br><span class=\"line\">Mozilla/5.0 (BlackBerry; U; BlackBerry 9900; en)</span><br><span class=\"line\">Mozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US)</span><br></pre></td></tr></table></figure>\n\n<p>我们主要关注重点字段，非重点的可以忽略。</p>\n<p><strong>平台及系统字段：</strong></p>\n<ul>\n<li><code>Windows NT x.x</code>：Windows 系统环境<ul>\n<li><code>5.0</code>： Windows 2000</li>\n<li><code>5.1</code>： Windows XP</li>\n<li><code>6.0</code>： Windows Vista / Windows Server 2008</li>\n<li><code>6.1</code>： Windows 7 / Windows Server 2008 R2</li>\n<li><code>6.2</code>： Windows 8 / Windows RT / Windows Server 2012</li>\n<li><code>6.3</code>： Windows 8.1 / Windows Server 2012 R2</li>\n</ul>\n</li>\n<li><code>Macintosh</code>：苹果 Mac 系统环境</li>\n<li><code>Intel Mac OS X x_x_x</code>：苹果 Mac 系统及版本号</li>\n<li><code>x11</code>：X窗口系统，指代 Linux 系统，并不是所有 Linux 浏览器都有此字段</li>\n<li><code>Linux xxxx</code>：Linux 系统环境，也可能不带有CPU信息<ul>\n<li><code>i586</code>：很老的处理器（貌似指不含 MMX 指令集的 CPU）</li>\n<li><code>i686</code>：一般 CPU</li>\n<li><code>x86_64</code>：64 位 CPU</li>\n<li><code>mips</code>：MIPS 处理器</li>\n<li><code>ppc</code>：PowerPC</li>\n<li><code>amd64</code>：因该是指 AMD64 专属 CPU，并非常见的 <code>x86_64</code></li>\n<li><code>armv7l</code>：ARM v7 处理器</li>\n</ul>\n</li>\n<li><code>Linux x.x.x.xxxx</code>：Linux 系统环境，后面跟着内核版本号，例如 <code>Linux 2.6.31-16-generic</code>，这种写法不常见。</li>\n<li><code>iPhone</code> <code>iPad</code> <code>iPod</code>：苹果相应的设备</li>\n<li><code>Android</code>：一般会跟在 <code>Linux</code> 字段后面。安卓设备，后面还可能跟有设备信息。</li>\n<li><code>U</code> <code>I</code> <code>N</code>：加密等级，<code>U</code>-强安全加密，<code>I</code>-弱安全加密，<code>N</code>-无安全加密</li>\n</ul>\n<p><strong>Windows 专属字段：</strong></p>\n<ul>\n<li><code>compatible</code>：仅在 IE 浏览器中出现，表示兼容 <code>Mozilla/4.0</code> <code>Mozilla/5.0</code>，常见于 IE 浏览器，其他早些的浏览器比如 <code>Konqueror</code> 也有使用到。</li>\n<li><code>Trident/x.x</code>：仅在 IE 浏览器中出现，表示 Trident 渲染引擎版本。对于第三方浏览器，比如 Mathon，可能会出现两个值</li>\n<li><code>MSIE x.x</code>：IE浏览器版本，不一定带有小数点，而且老的版本可能是 <code>MSIE 6.0b</code> <code>MSIE 5.50</code> 这种形式</li>\n<li><code>WOW64</code>：仅在 Windows中出现，是 <code>Windows(32) on Windows 64</code>，表示当前浏览器是 32 位，运行在 64 位系统上，但是一般却不合 <code>x64</code> 连用，但系统确实是 64 位</li>\n<li><code>Win64</code>：表示当前浏览器是64位的，一般和 <code>x64</code> 连用</li>\n<li><code>x64</code>：表示系统是64位的</li>\n</ul>\n<p><strong>其他字段：</strong></p>\n<ul>\n<li><code>rv:x.x</code>：当前浏览器版本，一般 IE11 和 Firefox 才会有此字段，Chrome 从未见过用此字段。如果是第三方浏览器，这里也指代当前利用的 IE版本</li>\n</ul>\n<p><strong>额外说明：</strong></p>\n<p>IE 的浏览器，还可能带上补丁号（类似 <code>KB974489</code>），系统 .NET 插件等信息等。</p>\n<p>有的浏览器还会带上浏览器语言，比如 <code>en-US</code>。</p>\n<p>Linux / BSD 系统，可能会带上发行版信息，比如 <code>(X11; Ubuntu; Linux x86_64; rv:61.0)</code> 但这个不是必须的。发行版信息，也可能在第 5 字段中出现。</p>\n<h2 id=\"浏览器渲染引擎及其他补充信息\"><a href=\"#浏览器渲染引擎及其他补充信息\" class=\"headerlink\" title=\"浏览器渲染引擎及其他补充信息\"></a>浏览器渲染引擎及其他补充信息</h2><p>这个字段现代浏览器比较好说明，要么没有，要么就是缺少补充信息（括号内的内容）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AppleWebKit/604.1.34 (KHTML, like Gecko)</span><br><span class=\"line\">Gecko/20100101</span><br><span class=\"line\">Presto/2.9.201</span><br><span class=\"line\">like Gecko</span><br></pre></td></tr></table></figure>\n\n<p>现在一般都是 <code>AppleWebKit</code> <code>Gecko</code>，指代的是渲染引擎版本号。</p>\n<p>很久以前 Opera 浏览器是 <code>Presto</code>。</p>\n<p>IE 11 开始写上了 <code>like Gecko</code>，我认为没什么用。此外，IE浏览器渲染引擎及版本在上一节中有提到。</p>\n<h2 id=\"扩展字段\"><a href=\"#扩展字段\" class=\"headerlink\" title=\"扩展字段\"></a>扩展字段</h2><p>这个字段内容最多，不过还好主要的字段不复杂。字段采用<strong>空格进行分隔</strong>。</p>\n<p>先看例子，下面只展示 useragent 的扩展字段内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Desktop</span><br><span class=\"line\">Chrome/69.0.3497.81 Safari/537.36</span><br><span class=\"line\">Firefox/61.0</span><br><span class=\"line\">Version/7.0.3 Safari/7046A194A</span><br><span class=\"line\"></span><br><span class=\"line\">// Mobile</span><br><span class=\"line\">Version/10.0 Mobile/14E304 Safari/602.1</span><br><span class=\"line\">Version/11.0 Mobile/15A5341f Safari/604.1</span><br><span class=\"line\">Version/4.0 Chrome/69.0.3497.81 Mobile Safari/537.363</span><br><span class=\"line\"></span><br><span class=\"line\">// Other</span><br><span class=\"line\">Mobile/16A366 MicroMessenger/6.7.2 NetType/WIFI Language/zh_CN // 微信</span><br><span class=\"line\">Mobile/16A366 ChannelId(36) NebulaSDK/1.8.100112 Nebula PSDType(1) AlipayDefined(nt:WIFI,ws:414|672|3.0,ac:T) AliApp(AP/10.1.32.600) AlipayClient/10.1.32.600 Alipay Language/zh-Hans // 支付宝</span><br></pre></td></tr></table></figure>\n\n<p>首先，由于历史原因，Chrome 浏览器也会带有 Safari 字段。</p>\n<p><strong>主流字段：</strong></p>\n<ul>\n<li><code>Safari</code>：Safari 版本号</li>\n<li><code>Chrome</code>：Chrome 版本号</li>\n<li><code>Version</code>：系统版本号，一般移动设备和 Mac 设备拥有</li>\n<li><code>Mobile</code>：移动设备版本号，一般指内部版本号，苹果设备拥有版本号，安卓设备不含版本号</li>\n</ul>\n<p><strong>其他浏览器字段：</strong></p>\n<p>主要就是各种第三方浏览器，包括 APP 内嵌入的 WebView 等。为了方便自我识别，都是在这里加上各个 APP 独有的信息。</p>\n<p>一般来讲，都是采用标准的 <code>key/value</code> 形式，但不是所有字段都符合这个规律。</p>\n<p>基本上要判断什么浏览器（或者WebView），需要看下它的 useragent，单独处理了。</p>\n<p>–END–</p>"},{"layout":"post","title":"Learning Git","date":"2019-04-25T22:23:00.000Z","_content":"\n一直在学习 git，特此记录下常用的命令。\n\n<!-- more -->\n\n## 设置\n\n> 全局配置文件位置：`~/.gitconfig` 或 `~/.config/git/config` 文件\n> 项目配置文件位置：`.git/config`\n\n```bash\ngit config --global user.name \"xxx\"\ngit config --global user.email \"xxx@y163.com\"\ngit config --global core.editor vim # 配置默认编辑器\n\ngit config --list  # 查看配置\ngit config -e      # 编辑配置\ngit config --global ... # 操作全局配置\n```\n\n## git 概念\n\n三个区域：工作目录 (未修改的文件、已修改的文件)、暂存区 stage (Index)、仓库 history (HEAD)。\n\n## 项目操作\n\n<div class=\"mermaid\">\nsequenceDiagram\n    participant work as workspace\n    participant modified as modified\n    participant stage as stage(Index)\n    participant history as history(HEAD)\n    \n    work->>modified: 编辑\n    modified->>work: git checkout -- file\n    modified->>stage: git add\n    stage->>modified: git reset -- file\n    stage->>history: git commit\n    history->>stage: git reset HEAD^\n</div>\n\n#### 创建\n\n```bash\ngit clone <server> # 克隆网络仓库\ngit init    # 将当前目录初始化为git仓库\ngit remote add origin <server> # 当前git目录绑定远程仓库\n```\n\n#### 状态\n\n```bash\ngit status      # 查看状态\ngit status -s   # 简略查看状态(-s=--short)\n```\n\n#### 添加和复原\n\n```bash\ngit add <file>           # 添加指定文件到stage\ngit add *                # 添加所有文件到stage\n\ngit reset -- <file>      # 将添加的文件恢复到unstage\ngit reset --hard HEAD    # (Danger)重置所有文件(history->workspace)\n\ngit checkout -- <file>   # (Danger)指定文件恢复为上次提交(unstage->workspace)\ngit checkout HEAD <file> # (Danger)从当前仓库中获取/覆盖文件(history->workspace)\n```\n\n#### 代码比较\n\n```bash\ngit diff            # 未追踪文件比较\ngit diff --cached   # 已追踪文件比较(--cached=--staged)\n```\n\n#### 提交\n\n```bash\ngit commit               # 提交\ngit commit -m \"message\"  # 提交(-m=--message)\ngit commit -am \"message\" # 将所有修改的文件进行追踪并提交\ngit commit --amend       # 修改上次提交\ngit reset HEAD^          # 取消当前提交(HEAD-->stage)\n```\n\n#### 日志\n```bash\ngit log                  # 查看日志\ngit log --oneline        # 单行显示(--pretty=oneline)\ngit log --graph          # 图表显示\ngit log --author=<user>  # 指定提交作者\ngit log -p               # 附带上每次修改的具体内容\ngit log -5               # 控制输出条数\ngit log --stat           # 每条记录显示总结\n```\n\n#### 分支\n\n```bash\ngit branch <new branch>      # 从当前代码拉新分支\ngit checkout <branch/commit> # 切换到分支/某版本\ngit checkout -b <new branch> # 从当前代码拉新分支并切换到新分支(等同上面两条命令)\ngit branch -d <branch>       # 删除分支(如果未合并则删除失败)\ngit branch -D <branch>       # 强制删除分支\ngit branch -a                # 列出所有分支\n```\n\n#### 分支合并\n\n```bash\ngit merge <branch>          # 分支合并\ngit merge --no-ff <branch>  # 分支合并，禁用fast-forward\ngit merge --squash <branch> # 将分支多条提交整合并合并\ngit rebase -i               # 交互式变基\ngit cherry-pick <commitId>  # 检出某次提交到当前分支\n```\n\n#### 贮藏\n\n```bash\ngit stash       # 贮藏当前unstage代码\ngit stash -u    # 贮藏当前stage和unstage代码，即所有修改未提交代码(-u=--include-untracked)\ngit stash list  # 查看贮藏\ngit stash pop   # 取出最后一个贮藏，并从贮藏中移除\ngit stash apply # 取出最后一个贮藏\ngit stash drop  # 丢弃贮藏\n```\n\n#### 标签\n\n```bash\ngit tag <tag>             # 在当前提交打标签\ngit tag <tag> <commitId>  # 在指定commitId上打标签\ngit tag -d <tag>          # 删除标签\n```\n\n#### 版本写法\n\n```bash\ngit show HEAD     # 当前最新提交\ngit show HEAD~1   # 上一次提交\ngit show HEAD^    # 同上，上一次提交\ngit show HEAD~2   # 上两次提交\ngit show HEAD^^   # 同上，上两次提交\ngit show HEAD@{1} # 第一次提交\n```\n\n#### 区间写法\n\n```bash\ngit log master dev  # 即在mater也在dev中\ngit log master..dev # 在dev中却不在master中\ngit log ^master dev # 同上，不在master却在dev中\ngit log dev --not master # 同上，在dev中却不在master中\n\ngit log master...dev # 在两个分支中，所有差异的提交。是下侧两者的集合\ngit log ^master dev\ngit log master ^dev\n\ngit log origin/master..HEAD  # 查看你即将推送到远端的内容\ngit log origin/master..      # 简写，同上一条\n```\n\n#### 代码搜索与调试\n\n```bash\ngit grep <word>     # 检索单词\ngit grep -n <word>  # 带上行号(-n==--line-number)\ngit grep -c <word>  # 统计在每个文件中出现次数(-c=--count)\ngit log -S <word> --oneline  # 查找单词被修改的提交\n\ngit blame <file>    # 查看文件每行修改\ngit bisect start    # git 区间二分法查找\ngit bisect bad\ngit bisect good v1.0\n```\n\n#### 同步\n\n```bash\ngit fetch       # 拉取代码\ngit pull        # 拉取代码并合并到当前分支\ngit push        # 推送代码\ngit push --tags # 同步标签\ngit remote update origin --prune # 更新远程分支列表\ngit push origin :<branch>        # 删除远程分支\ngit push origin :refs/tags/<tag> # 删除远程标签\n```\n\n#### 其他\n\n```bash \ngit bundle create repo.bundle HEAD master  # 项目打包\ngit reflog # 查阅HEAD日志\n```\n\n\n## git alias\n\n自己网上找的，因为查看日志最麻烦，所以仅仅收集了日志部分。现在也很少使用了。主要在用系统 alias。\n\n```bash\nalias.l=log --graph --all --pretty=format:'%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset'\nalias.ll=log --stat --abbrev-commit\nalias.lg=log --color --graph --pretty=format:'%C(bold white)%h%Creset -%C(bold green)%d%Creset %s %C(bold green)(%cr)%Creset %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative\nalias.llg=log --color --graph --pretty=format:'%C(bold white)%H %d%Creset%n%s%n%+b%C(bold blue)%an <%ae>%Creset %C(bold green)%cr (%ci)' --abbrev-commit\n```\n\n\n## alias(git-plugin)\n\n从 oh-my-zsh 中拿来的，大部分都用不到...\n\n```bash\ng=git\nga='git add'\ngaa='git add --all'\ngap='git apply'\ngapa='git add --patch'\ngau='git add --update'\ngav='git add --verbose'\ngb='git branch'\ngbD='git branch -D'\ngba='git branch -a'\ngbd='git branch -d'\ngbda='git branch --no-color --merged | command grep -vE \"^(\\*|\\s*(master|develop|dev)\\s*$)\" | command xargs -n 1 git branch -d'\ngbl='git blame -b -w'\ngbnm='git branch --no-merged'\ngbr='git branch --remote'\ngbs='git bisect'\ngbsb='git bisect bad'\ngbsg='git bisect good'\ngbsr='git bisect reset'\ngbss='git bisect start'\ngc='git commit -v'\n'gc!'='git commit -v --amend'\ngca='git commit -v -a'\n'gca!'='git commit -v -a --amend'\ngcam='git commit -a -m'\n'gcan!'='git commit -v -a --no-edit --amend'\n'gcans!'='git commit -v -a -s --no-edit --amend'\ngcb='git checkout -b'\ngcd='git checkout develop'\ngcf='git config --list'\ngcl='git clone --recurse-submodules'\ngclean='git clean -fd'\ngcm='git checkout master'\ngcmsg='git commit -m'\n'gcn!'='git commit -v --no-edit --amend'\ngco='git checkout'\ngcount='git shortlog -sn'\ngcp='git cherry-pick'\ngcpa='git cherry-pick --abort'\ngcpc='git cherry-pick --continue'\ngcs='git commit -S'\ngcsm='git commit -s -m'\ngd='git diff'\ngdca='git diff --cached'\ngdct='git describe --tags `git rev-list --tags --max-count=1`'\ngdcw='git diff --cached --word-diff'\ngds='git diff --staged'\ngdt='git diff-tree --no-commit-id --name-only -r'\ngdw='git diff --word-diff'\ngf='git fetch'\ngfa='git fetch --all --prune'\ngfo='git fetch origin'\ngg='git gui citool'\ngga='git gui citool --amend'\nggpull='git pull origin \"$(git_current_branch)\"'\nggpush='git push origin \"$(git_current_branch)\"'\nggsup='git branch --set-upstream-to=origin/$(git_current_branch)'\nghh='git help'\ngignore='git update-index --assume-unchanged'\ngignored='git ls-files -v | grep \"^[[:lower:]]\"'\ngit-svn-dcommit-push='git svn dcommit && git push github master:svntrunk'\ngk='\\gitk --all --branches'\ngke='\\gitk --all $(git log -g --pretty=%h)'\ngl='git pull'\nglg='git log --stat'\nglgg='git log --graph'\nglgga='git log --graph --decorate --all'\nglgm='git log --graph --max-count=10'\nglgp='git log --stat -p'\nglo='git log --oneline --decorate'\nglod='git log --graph --pretty='\\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'\\'\nglods='git log --graph --pretty='\\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'\\'' --date=short'\nglog='git log --oneline --decorate --graph'\ngloga='git log --oneline --decorate --graph --all'\nglol='git log --graph --pretty='\\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\\'\nglola='git log --graph --pretty='\\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\\'' --all'\nglols='git log --graph --pretty='\\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\\'' --stat'\nglp=_git_log_prettily\nglum='git pull upstream master'\ngm='git merge'\ngma='git merge --abort'\ngmom='git merge origin/master'\ngmt='git mergetool --no-prompt'\ngmtvim='git mergetool --no-prompt --tool=vimdiff'\ngmum='git merge upstream/master'\ngp='git push'\ngpd='git push --dry-run'\ngpf='git push --force-with-lease'\n'gpf!'='git push --force'\ngpoat='git push origin --all && git push origin --tags'\ngpristine='git reset --hard && git clean -dfx'\ngpsup='git push --set-upstream origin $(git_current_branch)'\ngpu='git push upstream'\ngpv='git push -v'\ngr='git remote'\ngra='git remote add'\ngrb='git rebase'\ngrba='git rebase --abort'\ngrbc='git rebase --continue'\ngrbd='git rebase develop'\ngrbi='git rebase -i'\ngrbm='git rebase master'\ngrbs='git rebase --skip'\ngrep='grep  --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn}'\ngrh='git reset'\ngrhh='git reset --hard'\ngrm='git rm'\ngrmc='git rm --cached'\ngrmv='git remote rename'\ngrrm='git remote remove'\ngrset='git remote set-url'\ngrt='cd $(git rev-parse --show-toplevel || echo \".\")'\ngru='git reset --'\ngrup='git remote update'\ngrv='git remote -v'\ngsb='git status -sb'\ngsd='git svn dcommit'\ngsh='git show'\ngsi='git submodule init'\ngsps='git show --pretty=short --show-signature'\ngsr='git svn rebase'\ngss='git status -s'\ngst='git status'\ngsta='git stash save'\ngstaa='git stash apply'\ngstall='git stash --all'\ngstc='git stash clear'\ngstd='git stash drop'\ngstl='git stash list'\ngstp='git stash pop'\ngsts='git stash show --text'\ngsu='git submodule update'\ngts='git tag -s'\ngtv='git tag | sort -V'\ngunignore='git update-index --no-assume-unchanged'\ngunwip='git log -n 1 | grep -q -c \"\\-\\-wip\\-\\-\" && git reset HEAD~1'\ngup='git pull --rebase'\ngupa='git pull --rebase --autostash'\ngupav='git pull --rebase --autostash -v'\ngupv='git pull --rebase -v'\ngwch='git whatchanged -p --abbrev-commit --pretty=medium'\ngwip='git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify -m \"--wip-- [skip ci]\"'\n```\n\n## 参考文档\n\n* [git简明指南](http://rogerdudler.github.io/git-guide/index.zh.html)\n* [Git教程(廖雪峰)](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n* [Git飞行规则(Flight Rules)](https://github.com/k88hudson/git-flight-rules/blob/master/README_zh-CN.md)\n* [图解Git](http://marklodato.github.io/visual-git-guide/index-zh-cn.html)\n* [Learn Git Branching](https://learngitbranching.js.org/)\n* [git book](https://book.git-scm.com/book/zh/v2)\n\n<script src=\"/assets/js/mermaid-v7.1.0.min.js\"></script>\n<script>mermaid.initialize({startOnLoad:true});</script>","source":"_posts/2019/2019-04-25-learning-git.md","raw":"---\nlayout: post\ntitle: Learning Git\ndate: 2019-04-25 22:23:00 GMT+0000\ncategories: [代码]\ntags:  [git]\n---\n\n一直在学习 git，特此记录下常用的命令。\n\n<!-- more -->\n\n## 设置\n\n> 全局配置文件位置：`~/.gitconfig` 或 `~/.config/git/config` 文件\n> 项目配置文件位置：`.git/config`\n\n```bash\ngit config --global user.name \"xxx\"\ngit config --global user.email \"xxx@y163.com\"\ngit config --global core.editor vim # 配置默认编辑器\n\ngit config --list  # 查看配置\ngit config -e      # 编辑配置\ngit config --global ... # 操作全局配置\n```\n\n## git 概念\n\n三个区域：工作目录 (未修改的文件、已修改的文件)、暂存区 stage (Index)、仓库 history (HEAD)。\n\n## 项目操作\n\n<div class=\"mermaid\">\nsequenceDiagram\n    participant work as workspace\n    participant modified as modified\n    participant stage as stage(Index)\n    participant history as history(HEAD)\n    \n    work->>modified: 编辑\n    modified->>work: git checkout -- file\n    modified->>stage: git add\n    stage->>modified: git reset -- file\n    stage->>history: git commit\n    history->>stage: git reset HEAD^\n</div>\n\n#### 创建\n\n```bash\ngit clone <server> # 克隆网络仓库\ngit init    # 将当前目录初始化为git仓库\ngit remote add origin <server> # 当前git目录绑定远程仓库\n```\n\n#### 状态\n\n```bash\ngit status      # 查看状态\ngit status -s   # 简略查看状态(-s=--short)\n```\n\n#### 添加和复原\n\n```bash\ngit add <file>           # 添加指定文件到stage\ngit add *                # 添加所有文件到stage\n\ngit reset -- <file>      # 将添加的文件恢复到unstage\ngit reset --hard HEAD    # (Danger)重置所有文件(history->workspace)\n\ngit checkout -- <file>   # (Danger)指定文件恢复为上次提交(unstage->workspace)\ngit checkout HEAD <file> # (Danger)从当前仓库中获取/覆盖文件(history->workspace)\n```\n\n#### 代码比较\n\n```bash\ngit diff            # 未追踪文件比较\ngit diff --cached   # 已追踪文件比较(--cached=--staged)\n```\n\n#### 提交\n\n```bash\ngit commit               # 提交\ngit commit -m \"message\"  # 提交(-m=--message)\ngit commit -am \"message\" # 将所有修改的文件进行追踪并提交\ngit commit --amend       # 修改上次提交\ngit reset HEAD^          # 取消当前提交(HEAD-->stage)\n```\n\n#### 日志\n```bash\ngit log                  # 查看日志\ngit log --oneline        # 单行显示(--pretty=oneline)\ngit log --graph          # 图表显示\ngit log --author=<user>  # 指定提交作者\ngit log -p               # 附带上每次修改的具体内容\ngit log -5               # 控制输出条数\ngit log --stat           # 每条记录显示总结\n```\n\n#### 分支\n\n```bash\ngit branch <new branch>      # 从当前代码拉新分支\ngit checkout <branch/commit> # 切换到分支/某版本\ngit checkout -b <new branch> # 从当前代码拉新分支并切换到新分支(等同上面两条命令)\ngit branch -d <branch>       # 删除分支(如果未合并则删除失败)\ngit branch -D <branch>       # 强制删除分支\ngit branch -a                # 列出所有分支\n```\n\n#### 分支合并\n\n```bash\ngit merge <branch>          # 分支合并\ngit merge --no-ff <branch>  # 分支合并，禁用fast-forward\ngit merge --squash <branch> # 将分支多条提交整合并合并\ngit rebase -i               # 交互式变基\ngit cherry-pick <commitId>  # 检出某次提交到当前分支\n```\n\n#### 贮藏\n\n```bash\ngit stash       # 贮藏当前unstage代码\ngit stash -u    # 贮藏当前stage和unstage代码，即所有修改未提交代码(-u=--include-untracked)\ngit stash list  # 查看贮藏\ngit stash pop   # 取出最后一个贮藏，并从贮藏中移除\ngit stash apply # 取出最后一个贮藏\ngit stash drop  # 丢弃贮藏\n```\n\n#### 标签\n\n```bash\ngit tag <tag>             # 在当前提交打标签\ngit tag <tag> <commitId>  # 在指定commitId上打标签\ngit tag -d <tag>          # 删除标签\n```\n\n#### 版本写法\n\n```bash\ngit show HEAD     # 当前最新提交\ngit show HEAD~1   # 上一次提交\ngit show HEAD^    # 同上，上一次提交\ngit show HEAD~2   # 上两次提交\ngit show HEAD^^   # 同上，上两次提交\ngit show HEAD@{1} # 第一次提交\n```\n\n#### 区间写法\n\n```bash\ngit log master dev  # 即在mater也在dev中\ngit log master..dev # 在dev中却不在master中\ngit log ^master dev # 同上，不在master却在dev中\ngit log dev --not master # 同上，在dev中却不在master中\n\ngit log master...dev # 在两个分支中，所有差异的提交。是下侧两者的集合\ngit log ^master dev\ngit log master ^dev\n\ngit log origin/master..HEAD  # 查看你即将推送到远端的内容\ngit log origin/master..      # 简写，同上一条\n```\n\n#### 代码搜索与调试\n\n```bash\ngit grep <word>     # 检索单词\ngit grep -n <word>  # 带上行号(-n==--line-number)\ngit grep -c <word>  # 统计在每个文件中出现次数(-c=--count)\ngit log -S <word> --oneline  # 查找单词被修改的提交\n\ngit blame <file>    # 查看文件每行修改\ngit bisect start    # git 区间二分法查找\ngit bisect bad\ngit bisect good v1.0\n```\n\n#### 同步\n\n```bash\ngit fetch       # 拉取代码\ngit pull        # 拉取代码并合并到当前分支\ngit push        # 推送代码\ngit push --tags # 同步标签\ngit remote update origin --prune # 更新远程分支列表\ngit push origin :<branch>        # 删除远程分支\ngit push origin :refs/tags/<tag> # 删除远程标签\n```\n\n#### 其他\n\n```bash \ngit bundle create repo.bundle HEAD master  # 项目打包\ngit reflog # 查阅HEAD日志\n```\n\n\n## git alias\n\n自己网上找的，因为查看日志最麻烦，所以仅仅收集了日志部分。现在也很少使用了。主要在用系统 alias。\n\n```bash\nalias.l=log --graph --all --pretty=format:'%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset'\nalias.ll=log --stat --abbrev-commit\nalias.lg=log --color --graph --pretty=format:'%C(bold white)%h%Creset -%C(bold green)%d%Creset %s %C(bold green)(%cr)%Creset %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative\nalias.llg=log --color --graph --pretty=format:'%C(bold white)%H %d%Creset%n%s%n%+b%C(bold blue)%an <%ae>%Creset %C(bold green)%cr (%ci)' --abbrev-commit\n```\n\n\n## alias(git-plugin)\n\n从 oh-my-zsh 中拿来的，大部分都用不到...\n\n```bash\ng=git\nga='git add'\ngaa='git add --all'\ngap='git apply'\ngapa='git add --patch'\ngau='git add --update'\ngav='git add --verbose'\ngb='git branch'\ngbD='git branch -D'\ngba='git branch -a'\ngbd='git branch -d'\ngbda='git branch --no-color --merged | command grep -vE \"^(\\*|\\s*(master|develop|dev)\\s*$)\" | command xargs -n 1 git branch -d'\ngbl='git blame -b -w'\ngbnm='git branch --no-merged'\ngbr='git branch --remote'\ngbs='git bisect'\ngbsb='git bisect bad'\ngbsg='git bisect good'\ngbsr='git bisect reset'\ngbss='git bisect start'\ngc='git commit -v'\n'gc!'='git commit -v --amend'\ngca='git commit -v -a'\n'gca!'='git commit -v -a --amend'\ngcam='git commit -a -m'\n'gcan!'='git commit -v -a --no-edit --amend'\n'gcans!'='git commit -v -a -s --no-edit --amend'\ngcb='git checkout -b'\ngcd='git checkout develop'\ngcf='git config --list'\ngcl='git clone --recurse-submodules'\ngclean='git clean -fd'\ngcm='git checkout master'\ngcmsg='git commit -m'\n'gcn!'='git commit -v --no-edit --amend'\ngco='git checkout'\ngcount='git shortlog -sn'\ngcp='git cherry-pick'\ngcpa='git cherry-pick --abort'\ngcpc='git cherry-pick --continue'\ngcs='git commit -S'\ngcsm='git commit -s -m'\ngd='git diff'\ngdca='git diff --cached'\ngdct='git describe --tags `git rev-list --tags --max-count=1`'\ngdcw='git diff --cached --word-diff'\ngds='git diff --staged'\ngdt='git diff-tree --no-commit-id --name-only -r'\ngdw='git diff --word-diff'\ngf='git fetch'\ngfa='git fetch --all --prune'\ngfo='git fetch origin'\ngg='git gui citool'\ngga='git gui citool --amend'\nggpull='git pull origin \"$(git_current_branch)\"'\nggpush='git push origin \"$(git_current_branch)\"'\nggsup='git branch --set-upstream-to=origin/$(git_current_branch)'\nghh='git help'\ngignore='git update-index --assume-unchanged'\ngignored='git ls-files -v | grep \"^[[:lower:]]\"'\ngit-svn-dcommit-push='git svn dcommit && git push github master:svntrunk'\ngk='\\gitk --all --branches'\ngke='\\gitk --all $(git log -g --pretty=%h)'\ngl='git pull'\nglg='git log --stat'\nglgg='git log --graph'\nglgga='git log --graph --decorate --all'\nglgm='git log --graph --max-count=10'\nglgp='git log --stat -p'\nglo='git log --oneline --decorate'\nglod='git log --graph --pretty='\\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'\\'\nglods='git log --graph --pretty='\\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'\\'' --date=short'\nglog='git log --oneline --decorate --graph'\ngloga='git log --oneline --decorate --graph --all'\nglol='git log --graph --pretty='\\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\\'\nglola='git log --graph --pretty='\\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\\'' --all'\nglols='git log --graph --pretty='\\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\\'' --stat'\nglp=_git_log_prettily\nglum='git pull upstream master'\ngm='git merge'\ngma='git merge --abort'\ngmom='git merge origin/master'\ngmt='git mergetool --no-prompt'\ngmtvim='git mergetool --no-prompt --tool=vimdiff'\ngmum='git merge upstream/master'\ngp='git push'\ngpd='git push --dry-run'\ngpf='git push --force-with-lease'\n'gpf!'='git push --force'\ngpoat='git push origin --all && git push origin --tags'\ngpristine='git reset --hard && git clean -dfx'\ngpsup='git push --set-upstream origin $(git_current_branch)'\ngpu='git push upstream'\ngpv='git push -v'\ngr='git remote'\ngra='git remote add'\ngrb='git rebase'\ngrba='git rebase --abort'\ngrbc='git rebase --continue'\ngrbd='git rebase develop'\ngrbi='git rebase -i'\ngrbm='git rebase master'\ngrbs='git rebase --skip'\ngrep='grep  --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn}'\ngrh='git reset'\ngrhh='git reset --hard'\ngrm='git rm'\ngrmc='git rm --cached'\ngrmv='git remote rename'\ngrrm='git remote remove'\ngrset='git remote set-url'\ngrt='cd $(git rev-parse --show-toplevel || echo \".\")'\ngru='git reset --'\ngrup='git remote update'\ngrv='git remote -v'\ngsb='git status -sb'\ngsd='git svn dcommit'\ngsh='git show'\ngsi='git submodule init'\ngsps='git show --pretty=short --show-signature'\ngsr='git svn rebase'\ngss='git status -s'\ngst='git status'\ngsta='git stash save'\ngstaa='git stash apply'\ngstall='git stash --all'\ngstc='git stash clear'\ngstd='git stash drop'\ngstl='git stash list'\ngstp='git stash pop'\ngsts='git stash show --text'\ngsu='git submodule update'\ngts='git tag -s'\ngtv='git tag | sort -V'\ngunignore='git update-index --no-assume-unchanged'\ngunwip='git log -n 1 | grep -q -c \"\\-\\-wip\\-\\-\" && git reset HEAD~1'\ngup='git pull --rebase'\ngupa='git pull --rebase --autostash'\ngupav='git pull --rebase --autostash -v'\ngupv='git pull --rebase -v'\ngwch='git whatchanged -p --abbrev-commit --pretty=medium'\ngwip='git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify -m \"--wip-- [skip ci]\"'\n```\n\n## 参考文档\n\n* [git简明指南](http://rogerdudler.github.io/git-guide/index.zh.html)\n* [Git教程(廖雪峰)](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n* [Git飞行规则(Flight Rules)](https://github.com/k88hudson/git-flight-rules/blob/master/README_zh-CN.md)\n* [图解Git](http://marklodato.github.io/visual-git-guide/index-zh-cn.html)\n* [Learn Git Branching](https://learngitbranching.js.org/)\n* [git book](https://book.git-scm.com/book/zh/v2)\n\n<script src=\"/assets/js/mermaid-v7.1.0.min.js\"></script>\n<script>mermaid.initialize({startOnLoad:true});</script>","slug":"2019-2019-04-25-learning-git","published":1,"updated":"2019-07-18T17:19:07.153Z","comments":1,"photos":[],"link":"","_id":"cjy8y72v700ces21dhwxoiore","content":"<p>一直在学习 git，特此记录下常用的命令。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h2><blockquote>\n<p>全局配置文件位置：<code>~/.gitconfig</code> 或 <code>~/.config/git/config</code> 文件<br>项目配置文件位置：<code>.git/config</code></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">\"xxx\"</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"xxx@y163.com\"</span></span><br><span class=\"line\">git config --global core.editor vim <span class=\"comment\"># 配置默认编辑器</span></span><br><span class=\"line\"></span><br><span class=\"line\">git config --list  <span class=\"comment\"># 查看配置</span></span><br><span class=\"line\">git config -e      <span class=\"comment\"># 编辑配置</span></span><br><span class=\"line\">git config --global ... <span class=\"comment\"># 操作全局配置</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-概念\"><a href=\"#git-概念\" class=\"headerlink\" title=\"git 概念\"></a>git 概念</h2><p>三个区域：工作目录 (未修改的文件、已修改的文件)、暂存区 stage (Index)、仓库 history (HEAD)。</p>\n<h2 id=\"项目操作\"><a href=\"#项目操作\" class=\"headerlink\" title=\"项目操作\"></a>项目操作</h2><div class=\"mermaid\">\nsequenceDiagram\n    participant work as workspace\n    participant modified as modified\n    participant stage as stage(Index)\n    participant history as history(HEAD)\n\n<pre><code>work-&gt;&gt;modified: 编辑\nmodified-&gt;&gt;work: git checkout -- file\nmodified-&gt;&gt;stage: git add\nstage-&gt;&gt;modified: git reset -- file\nstage-&gt;&gt;history: git commit\nhistory-&gt;&gt;stage: git reset HEAD^</code></pre></div>\n\n<h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> &lt;server&gt; <span class=\"comment\"># 克隆网络仓库</span></span><br><span class=\"line\">git init    <span class=\"comment\"># 将当前目录初始化为git仓库</span></span><br><span class=\"line\">git remote add origin &lt;server&gt; <span class=\"comment\"># 当前git目录绑定远程仓库</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status      <span class=\"comment\"># 查看状态</span></span><br><span class=\"line\">git status -s   <span class=\"comment\"># 简略查看状态(-s=--short)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加和复原\"><a href=\"#添加和复原\" class=\"headerlink\" title=\"添加和复原\"></a>添加和复原</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add &lt;file&gt;           <span class=\"comment\"># 添加指定文件到stage</span></span><br><span class=\"line\">git add *                <span class=\"comment\"># 添加所有文件到stage</span></span><br><span class=\"line\"></span><br><span class=\"line\">git reset -- &lt;file&gt;      <span class=\"comment\"># 将添加的文件恢复到unstage</span></span><br><span class=\"line\">git reset --hard HEAD    <span class=\"comment\"># (Danger)重置所有文件(history-&gt;workspace)</span></span><br><span class=\"line\"></span><br><span class=\"line\">git checkout -- &lt;file&gt;   <span class=\"comment\"># (Danger)指定文件恢复为上次提交(unstage-&gt;workspace)</span></span><br><span class=\"line\">git checkout HEAD &lt;file&gt; <span class=\"comment\"># (Danger)从当前仓库中获取/覆盖文件(history-&gt;workspace)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码比较\"><a href=\"#代码比较\" class=\"headerlink\" title=\"代码比较\"></a>代码比较</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff            <span class=\"comment\"># 未追踪文件比较</span></span><br><span class=\"line\">git diff --cached   <span class=\"comment\"># 已追踪文件比较(--cached=--staged)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit               <span class=\"comment\"># 提交</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"message\"</span>  <span class=\"comment\"># 提交(-m=--message)</span></span><br><span class=\"line\">git commit -am <span class=\"string\">\"message\"</span> <span class=\"comment\"># 将所有修改的文件进行追踪并提交</span></span><br><span class=\"line\">git commit --amend       <span class=\"comment\"># 修改上次提交</span></span><br><span class=\"line\">git reset HEAD^          <span class=\"comment\"># 取消当前提交(HEAD--&gt;stage)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span>                  <span class=\"comment\"># 查看日志</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --oneline        <span class=\"comment\"># 单行显示(--pretty=oneline)</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --graph          <span class=\"comment\"># 图表显示</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --author=&lt;user&gt;  <span class=\"comment\"># 指定提交作者</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -p               <span class=\"comment\"># 附带上每次修改的具体内容</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -5               <span class=\"comment\"># 控制输出条数</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span>           <span class=\"comment\"># 每条记录显示总结</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch &lt;new branch&gt;      <span class=\"comment\"># 从当前代码拉新分支</span></span><br><span class=\"line\">git checkout &lt;branch/commit&gt; <span class=\"comment\"># 切换到分支/某版本</span></span><br><span class=\"line\">git checkout -b &lt;new branch&gt; <span class=\"comment\"># 从当前代码拉新分支并切换到新分支(等同上面两条命令)</span></span><br><span class=\"line\">git branch -d &lt;branch&gt;       <span class=\"comment\"># 删除分支(如果未合并则删除失败)</span></span><br><span class=\"line\">git branch -D &lt;branch&gt;       <span class=\"comment\"># 强制删除分支</span></span><br><span class=\"line\">git branch -a                <span class=\"comment\"># 列出所有分支</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"分支合并\"><a href=\"#分支合并\" class=\"headerlink\" title=\"分支合并\"></a>分支合并</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge &lt;branch&gt;          <span class=\"comment\"># 分支合并</span></span><br><span class=\"line\">git merge --no-ff &lt;branch&gt;  <span class=\"comment\"># 分支合并，禁用fast-forward</span></span><br><span class=\"line\">git merge --squash &lt;branch&gt; <span class=\"comment\"># 将分支多条提交整合并合并</span></span><br><span class=\"line\">git rebase -i               <span class=\"comment\"># 交互式变基</span></span><br><span class=\"line\">git cherry-pick &lt;commitId&gt;  <span class=\"comment\"># 检出某次提交到当前分支</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"贮藏\"><a href=\"#贮藏\" class=\"headerlink\" title=\"贮藏\"></a>贮藏</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash       <span class=\"comment\"># 贮藏当前unstage代码</span></span><br><span class=\"line\">git stash -u    <span class=\"comment\"># 贮藏当前stage和unstage代码，即所有修改未提交代码(-u=--include-untracked)</span></span><br><span class=\"line\">git stash list  <span class=\"comment\"># 查看贮藏</span></span><br><span class=\"line\">git stash pop   <span class=\"comment\"># 取出最后一个贮藏，并从贮藏中移除</span></span><br><span class=\"line\">git stash apply <span class=\"comment\"># 取出最后一个贮藏</span></span><br><span class=\"line\">git stash drop  <span class=\"comment\"># 丢弃贮藏</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag &lt;tag&gt;             <span class=\"comment\"># 在当前提交打标签</span></span><br><span class=\"line\">git tag &lt;tag&gt; &lt;commitId&gt;  <span class=\"comment\"># 在指定commitId上打标签</span></span><br><span class=\"line\">git tag -d &lt;tag&gt;          <span class=\"comment\"># 删除标签</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"版本写法\"><a href=\"#版本写法\" class=\"headerlink\" title=\"版本写法\"></a>版本写法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git show HEAD     <span class=\"comment\"># 当前最新提交</span></span><br><span class=\"line\">git show HEAD~1   <span class=\"comment\"># 上一次提交</span></span><br><span class=\"line\">git show HEAD^    <span class=\"comment\"># 同上，上一次提交</span></span><br><span class=\"line\">git show HEAD~2   <span class=\"comment\"># 上两次提交</span></span><br><span class=\"line\">git show HEAD^^   <span class=\"comment\"># 同上，上两次提交</span></span><br><span class=\"line\">git show HEAD@&#123;1&#125; <span class=\"comment\"># 第一次提交</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"区间写法\"><a href=\"#区间写法\" class=\"headerlink\" title=\"区间写法\"></a>区间写法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> master dev  <span class=\"comment\"># 即在mater也在dev中</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> master..dev <span class=\"comment\"># 在dev中却不在master中</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> ^master dev <span class=\"comment\"># 同上，不在master却在dev中</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> dev --not master <span class=\"comment\"># 同上，在dev中却不在master中</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">log</span> master...dev <span class=\"comment\"># 在两个分支中，所有差异的提交。是下侧两者的集合</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> ^master dev</span><br><span class=\"line\">git <span class=\"built_in\">log</span> master ^dev</span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">log</span> origin/master..HEAD  <span class=\"comment\"># 查看你即将推送到远端的内容</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> origin/master..      <span class=\"comment\"># 简写，同上一条</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码搜索与调试\"><a href=\"#代码搜索与调试\" class=\"headerlink\" title=\"代码搜索与调试\"></a>代码搜索与调试</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git grep &lt;word&gt;     <span class=\"comment\"># 检索单词</span></span><br><span class=\"line\">git grep -n &lt;word&gt;  <span class=\"comment\"># 带上行号(-n==--line-number)</span></span><br><span class=\"line\">git grep -c &lt;word&gt;  <span class=\"comment\"># 统计在每个文件中出现次数(-c=--count)</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -S &lt;word&gt; --oneline  <span class=\"comment\"># 查找单词被修改的提交</span></span><br><span class=\"line\"></span><br><span class=\"line\">git blame &lt;file&gt;    <span class=\"comment\"># 查看文件每行修改</span></span><br><span class=\"line\">git bisect start    <span class=\"comment\"># git 区间二分法查找</span></span><br><span class=\"line\">git bisect bad</span><br><span class=\"line\">git bisect good v1.0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch       <span class=\"comment\"># 拉取代码</span></span><br><span class=\"line\">git pull        <span class=\"comment\"># 拉取代码并合并到当前分支</span></span><br><span class=\"line\">git push        <span class=\"comment\"># 推送代码</span></span><br><span class=\"line\">git push --tags <span class=\"comment\"># 同步标签</span></span><br><span class=\"line\">git remote update origin --prune <span class=\"comment\"># 更新远程分支列表</span></span><br><span class=\"line\">git push origin :&lt;branch&gt;        <span class=\"comment\"># 删除远程分支</span></span><br><span class=\"line\">git push origin :refs/tags/&lt;tag&gt; <span class=\"comment\"># 删除远程标签</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git bundle create repo.bundle HEAD master  <span class=\"comment\"># 项目打包</span></span><br><span class=\"line\">git reflog <span class=\"comment\"># 查阅HEAD日志</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-alias\"><a href=\"#git-alias\" class=\"headerlink\" title=\"git alias\"></a>git alias</h2><p>自己网上找的，因为查看日志最麻烦，所以仅仅收集了日志部分。现在也很少使用了。主要在用系统 alias。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias.l=<span class=\"built_in\">log</span> --graph --all --pretty=format:<span class=\"string\">'%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset'</span></span><br><span class=\"line\">alias.ll=<span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span> --abbrev-commit</span><br><span class=\"line\">alias.lg=<span class=\"built_in\">log</span> --color --graph --pretty=format:<span class=\"string\">'%C(bold white)%h%Creset -%C(bold green)%d%Creset %s %C(bold green)(%cr)%Creset %C(bold blue)&lt;%an&gt;%Creset'</span> --abbrev-commit --date=relative</span><br><span class=\"line\">alias.llg=<span class=\"built_in\">log</span> --color --graph --pretty=format:<span class=\"string\">'%C(bold white)%H %d%Creset%n%s%n%+b%C(bold blue)%an &lt;%ae&gt;%Creset %C(bold green)%cr (%ci)'</span> --abbrev-commit</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"alias-git-plugin\"><a href=\"#alias-git-plugin\" class=\"headerlink\" title=\"alias(git-plugin)\"></a>alias(git-plugin)</h2><p>从 oh-my-zsh 中拿来的，大部分都用不到…</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g=git</span><br><span class=\"line\">ga=<span class=\"string\">'git add'</span></span><br><span class=\"line\">gaa=<span class=\"string\">'git add --all'</span></span><br><span class=\"line\">gap=<span class=\"string\">'git apply'</span></span><br><span class=\"line\">gapa=<span class=\"string\">'git add --patch'</span></span><br><span class=\"line\">gau=<span class=\"string\">'git add --update'</span></span><br><span class=\"line\">gav=<span class=\"string\">'git add --verbose'</span></span><br><span class=\"line\">gb=<span class=\"string\">'git branch'</span></span><br><span class=\"line\">gbD=<span class=\"string\">'git branch -D'</span></span><br><span class=\"line\">gba=<span class=\"string\">'git branch -a'</span></span><br><span class=\"line\">gbd=<span class=\"string\">'git branch -d'</span></span><br><span class=\"line\">gbda=<span class=\"string\">'git branch --no-color --merged | command grep -vE \"^(\\*|\\s*(master|develop|dev)\\s*$)\" | command xargs -n 1 git branch -d'</span></span><br><span class=\"line\">gbl=<span class=\"string\">'git blame -b -w'</span></span><br><span class=\"line\">gbnm=<span class=\"string\">'git branch --no-merged'</span></span><br><span class=\"line\">gbr=<span class=\"string\">'git branch --remote'</span></span><br><span class=\"line\">gbs=<span class=\"string\">'git bisect'</span></span><br><span class=\"line\">gbsb=<span class=\"string\">'git bisect bad'</span></span><br><span class=\"line\">gbsg=<span class=\"string\">'git bisect good'</span></span><br><span class=\"line\">gbsr=<span class=\"string\">'git bisect reset'</span></span><br><span class=\"line\">gbss=<span class=\"string\">'git bisect start'</span></span><br><span class=\"line\">gc=<span class=\"string\">'git commit -v'</span></span><br><span class=\"line\"><span class=\"string\">'gc!'</span>=<span class=\"string\">'git commit -v --amend'</span></span><br><span class=\"line\">gca=<span class=\"string\">'git commit -v -a'</span></span><br><span class=\"line\"><span class=\"string\">'gca!'</span>=<span class=\"string\">'git commit -v -a --amend'</span></span><br><span class=\"line\">gcam=<span class=\"string\">'git commit -a -m'</span></span><br><span class=\"line\"><span class=\"string\">'gcan!'</span>=<span class=\"string\">'git commit -v -a --no-edit --amend'</span></span><br><span class=\"line\"><span class=\"string\">'gcans!'</span>=<span class=\"string\">'git commit -v -a -s --no-edit --amend'</span></span><br><span class=\"line\">gcb=<span class=\"string\">'git checkout -b'</span></span><br><span class=\"line\">gcd=<span class=\"string\">'git checkout develop'</span></span><br><span class=\"line\">gcf=<span class=\"string\">'git config --list'</span></span><br><span class=\"line\">gcl=<span class=\"string\">'git clone --recurse-submodules'</span></span><br><span class=\"line\">gclean=<span class=\"string\">'git clean -fd'</span></span><br><span class=\"line\">gcm=<span class=\"string\">'git checkout master'</span></span><br><span class=\"line\">gcmsg=<span class=\"string\">'git commit -m'</span></span><br><span class=\"line\"><span class=\"string\">'gcn!'</span>=<span class=\"string\">'git commit -v --no-edit --amend'</span></span><br><span class=\"line\">gco=<span class=\"string\">'git checkout'</span></span><br><span class=\"line\">gcount=<span class=\"string\">'git shortlog -sn'</span></span><br><span class=\"line\">gcp=<span class=\"string\">'git cherry-pick'</span></span><br><span class=\"line\">gcpa=<span class=\"string\">'git cherry-pick --abort'</span></span><br><span class=\"line\">gcpc=<span class=\"string\">'git cherry-pick --continue'</span></span><br><span class=\"line\">gcs=<span class=\"string\">'git commit -S'</span></span><br><span class=\"line\">gcsm=<span class=\"string\">'git commit -s -m'</span></span><br><span class=\"line\">gd=<span class=\"string\">'git diff'</span></span><br><span class=\"line\">gdca=<span class=\"string\">'git diff --cached'</span></span><br><span class=\"line\">gdct=<span class=\"string\">'git describe --tags `git rev-list --tags --max-count=1`'</span></span><br><span class=\"line\">gdcw=<span class=\"string\">'git diff --cached --word-diff'</span></span><br><span class=\"line\">gds=<span class=\"string\">'git diff --staged'</span></span><br><span class=\"line\">gdt=<span class=\"string\">'git diff-tree --no-commit-id --name-only -r'</span></span><br><span class=\"line\">gdw=<span class=\"string\">'git diff --word-diff'</span></span><br><span class=\"line\">gf=<span class=\"string\">'git fetch'</span></span><br><span class=\"line\">gfa=<span class=\"string\">'git fetch --all --prune'</span></span><br><span class=\"line\">gfo=<span class=\"string\">'git fetch origin'</span></span><br><span class=\"line\">gg=<span class=\"string\">'git gui citool'</span></span><br><span class=\"line\">gga=<span class=\"string\">'git gui citool --amend'</span></span><br><span class=\"line\">ggpull=<span class=\"string\">'git pull origin \"$(git_current_branch)\"'</span></span><br><span class=\"line\">ggpush=<span class=\"string\">'git push origin \"$(git_current_branch)\"'</span></span><br><span class=\"line\">ggsup=<span class=\"string\">'git branch --set-upstream-to=origin/$(git_current_branch)'</span></span><br><span class=\"line\">ghh=<span class=\"string\">'git help'</span></span><br><span class=\"line\">gignore=<span class=\"string\">'git update-index --assume-unchanged'</span></span><br><span class=\"line\">gignored=<span class=\"string\">'git ls-files -v | grep \"^[[:lower:]]\"'</span></span><br><span class=\"line\">git-svn-dcommit-push=<span class=\"string\">'git svn dcommit &amp;&amp; git push github master:svntrunk'</span></span><br><span class=\"line\">gk=<span class=\"string\">'\\gitk --all --branches'</span></span><br><span class=\"line\">gke=<span class=\"string\">'\\gitk --all $(git log -g --pretty=%h)'</span></span><br><span class=\"line\">gl=<span class=\"string\">'git pull'</span></span><br><span class=\"line\">glg=<span class=\"string\">'git log --stat'</span></span><br><span class=\"line\">glgg=<span class=\"string\">'git log --graph'</span></span><br><span class=\"line\">glgga=<span class=\"string\">'git log --graph --decorate --all'</span></span><br><span class=\"line\">glgm=<span class=\"string\">'git log --graph --max-count=10'</span></span><br><span class=\"line\">glgp=<span class=\"string\">'git log --stat -p'</span></span><br><span class=\"line\">glo=<span class=\"string\">'git log --oneline --decorate'</span></span><br><span class=\"line\">glod=<span class=\"string\">'git log --graph --pretty='</span>\\<span class=\"string\">''</span>%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)&lt;%an&gt;%Creset<span class=\"string\">'\\'</span></span><br><span class=\"line\">glods=<span class=\"string\">'git log --graph --pretty='</span>\\<span class=\"string\">''</span>%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)&lt;%an&gt;%Creset<span class=\"string\">'\\'</span><span class=\"string\">' --date=short'</span></span><br><span class=\"line\">glog=<span class=\"string\">'git log --oneline --decorate --graph'</span></span><br><span class=\"line\">gloga=<span class=\"string\">'git log --oneline --decorate --graph --all'</span></span><br><span class=\"line\">glol=<span class=\"string\">'git log --graph --pretty='</span>\\<span class=\"string\">''</span>%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset<span class=\"string\">'\\'</span></span><br><span class=\"line\">glola=<span class=\"string\">'git log --graph --pretty='</span>\\<span class=\"string\">''</span>%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset<span class=\"string\">'\\'</span><span class=\"string\">' --all'</span></span><br><span class=\"line\">glols=<span class=\"string\">'git log --graph --pretty='</span>\\<span class=\"string\">''</span>%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset<span class=\"string\">'\\'</span><span class=\"string\">' --stat'</span></span><br><span class=\"line\">glp=_git_log_prettily</span><br><span class=\"line\">glum=<span class=\"string\">'git pull upstream master'</span></span><br><span class=\"line\">gm=<span class=\"string\">'git merge'</span></span><br><span class=\"line\">gma=<span class=\"string\">'git merge --abort'</span></span><br><span class=\"line\">gmom=<span class=\"string\">'git merge origin/master'</span></span><br><span class=\"line\">gmt=<span class=\"string\">'git mergetool --no-prompt'</span></span><br><span class=\"line\">gmtvim=<span class=\"string\">'git mergetool --no-prompt --tool=vimdiff'</span></span><br><span class=\"line\">gmum=<span class=\"string\">'git merge upstream/master'</span></span><br><span class=\"line\">gp=<span class=\"string\">'git push'</span></span><br><span class=\"line\">gpd=<span class=\"string\">'git push --dry-run'</span></span><br><span class=\"line\">gpf=<span class=\"string\">'git push --force-with-lease'</span></span><br><span class=\"line\"><span class=\"string\">'gpf!'</span>=<span class=\"string\">'git push --force'</span></span><br><span class=\"line\">gpoat=<span class=\"string\">'git push origin --all &amp;&amp; git push origin --tags'</span></span><br><span class=\"line\">gpristine=<span class=\"string\">'git reset --hard &amp;&amp; git clean -dfx'</span></span><br><span class=\"line\">gpsup=<span class=\"string\">'git push --set-upstream origin $(git_current_branch)'</span></span><br><span class=\"line\">gpu=<span class=\"string\">'git push upstream'</span></span><br><span class=\"line\">gpv=<span class=\"string\">'git push -v'</span></span><br><span class=\"line\">gr=<span class=\"string\">'git remote'</span></span><br><span class=\"line\">gra=<span class=\"string\">'git remote add'</span></span><br><span class=\"line\">grb=<span class=\"string\">'git rebase'</span></span><br><span class=\"line\">grba=<span class=\"string\">'git rebase --abort'</span></span><br><span class=\"line\">grbc=<span class=\"string\">'git rebase --continue'</span></span><br><span class=\"line\">grbd=<span class=\"string\">'git rebase develop'</span></span><br><span class=\"line\">grbi=<span class=\"string\">'git rebase -i'</span></span><br><span class=\"line\">grbm=<span class=\"string\">'git rebase master'</span></span><br><span class=\"line\">grbs=<span class=\"string\">'git rebase --skip'</span></span><br><span class=\"line\">grep=<span class=\"string\">'grep  --color=auto --exclude-dir=&#123;.bzr,CVS,.git,.hg,.svn&#125;'</span></span><br><span class=\"line\">grh=<span class=\"string\">'git reset'</span></span><br><span class=\"line\">grhh=<span class=\"string\">'git reset --hard'</span></span><br><span class=\"line\">grm=<span class=\"string\">'git rm'</span></span><br><span class=\"line\">grmc=<span class=\"string\">'git rm --cached'</span></span><br><span class=\"line\">grmv=<span class=\"string\">'git remote rename'</span></span><br><span class=\"line\">grrm=<span class=\"string\">'git remote remove'</span></span><br><span class=\"line\">grset=<span class=\"string\">'git remote set-url'</span></span><br><span class=\"line\">grt=<span class=\"string\">'cd $(git rev-parse --show-toplevel || echo \".\")'</span></span><br><span class=\"line\">gru=<span class=\"string\">'git reset --'</span></span><br><span class=\"line\">grup=<span class=\"string\">'git remote update'</span></span><br><span class=\"line\">grv=<span class=\"string\">'git remote -v'</span></span><br><span class=\"line\">gsb=<span class=\"string\">'git status -sb'</span></span><br><span class=\"line\">gsd=<span class=\"string\">'git svn dcommit'</span></span><br><span class=\"line\">gsh=<span class=\"string\">'git show'</span></span><br><span class=\"line\">gsi=<span class=\"string\">'git submodule init'</span></span><br><span class=\"line\">gsps=<span class=\"string\">'git show --pretty=short --show-signature'</span></span><br><span class=\"line\">gsr=<span class=\"string\">'git svn rebase'</span></span><br><span class=\"line\">gss=<span class=\"string\">'git status -s'</span></span><br><span class=\"line\">gst=<span class=\"string\">'git status'</span></span><br><span class=\"line\">gsta=<span class=\"string\">'git stash save'</span></span><br><span class=\"line\">gstaa=<span class=\"string\">'git stash apply'</span></span><br><span class=\"line\">gstall=<span class=\"string\">'git stash --all'</span></span><br><span class=\"line\">gstc=<span class=\"string\">'git stash clear'</span></span><br><span class=\"line\">gstd=<span class=\"string\">'git stash drop'</span></span><br><span class=\"line\">gstl=<span class=\"string\">'git stash list'</span></span><br><span class=\"line\">gstp=<span class=\"string\">'git stash pop'</span></span><br><span class=\"line\">gsts=<span class=\"string\">'git stash show --text'</span></span><br><span class=\"line\">gsu=<span class=\"string\">'git submodule update'</span></span><br><span class=\"line\">gts=<span class=\"string\">'git tag -s'</span></span><br><span class=\"line\">gtv=<span class=\"string\">'git tag | sort -V'</span></span><br><span class=\"line\">gunignore=<span class=\"string\">'git update-index --no-assume-unchanged'</span></span><br><span class=\"line\">gunwip=<span class=\"string\">'git log -n 1 | grep -q -c \"\\-\\-wip\\-\\-\" &amp;&amp; git reset HEAD~1'</span></span><br><span class=\"line\">gup=<span class=\"string\">'git pull --rebase'</span></span><br><span class=\"line\">gupa=<span class=\"string\">'git pull --rebase --autostash'</span></span><br><span class=\"line\">gupav=<span class=\"string\">'git pull --rebase --autostash -v'</span></span><br><span class=\"line\">gupv=<span class=\"string\">'git pull --rebase -v'</span></span><br><span class=\"line\">gwch=<span class=\"string\">'git whatchanged -p --abbrev-commit --pretty=medium'</span></span><br><span class=\"line\">gwip=<span class=\"string\">'git add -A; git rm $(git ls-files --deleted) 2&gt; /dev/null; git commit --no-verify -m \"--wip-- [skip ci]\"'</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\" target=\"_blank\" rel=\"noopener\">git简明指南</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">Git教程(廖雪峰)</a></li>\n<li><a href=\"https://github.com/k88hudson/git-flight-rules/blob/master/README_zh-CN.md\" target=\"_blank\" rel=\"noopener\">Git飞行规则(Flight Rules)</a></li>\n<li><a href=\"http://marklodato.github.io/visual-git-guide/index-zh-cn.html\" target=\"_blank\" rel=\"noopener\">图解Git</a></li>\n<li><a href=\"https://learngitbranching.js.org/\" target=\"_blank\" rel=\"noopener\">Learn Git Branching</a></li>\n<li><a href=\"https://book.git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">git book</a></li>\n</ul>\n<script src=\"/assets/js/mermaid-v7.1.0.min.js\"></script>\n<script>mermaid.initialize({startOnLoad:true});</script>","site":{"data":{}},"excerpt":"<p>一直在学习 git，特此记录下常用的命令。</p>","more":"<h2 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h2><blockquote>\n<p>全局配置文件位置：<code>~/.gitconfig</code> 或 <code>~/.config/git/config</code> 文件<br>项目配置文件位置：<code>.git/config</code></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">\"xxx\"</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"xxx@y163.com\"</span></span><br><span class=\"line\">git config --global core.editor vim <span class=\"comment\"># 配置默认编辑器</span></span><br><span class=\"line\"></span><br><span class=\"line\">git config --list  <span class=\"comment\"># 查看配置</span></span><br><span class=\"line\">git config -e      <span class=\"comment\"># 编辑配置</span></span><br><span class=\"line\">git config --global ... <span class=\"comment\"># 操作全局配置</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-概念\"><a href=\"#git-概念\" class=\"headerlink\" title=\"git 概念\"></a>git 概念</h2><p>三个区域：工作目录 (未修改的文件、已修改的文件)、暂存区 stage (Index)、仓库 history (HEAD)。</p>\n<h2 id=\"项目操作\"><a href=\"#项目操作\" class=\"headerlink\" title=\"项目操作\"></a>项目操作</h2><div class=\"mermaid\">\nsequenceDiagram\n    participant work as workspace\n    participant modified as modified\n    participant stage as stage(Index)\n    participant history as history(HEAD)\n\n<pre><code>work-&gt;&gt;modified: 编辑\nmodified-&gt;&gt;work: git checkout -- file\nmodified-&gt;&gt;stage: git add\nstage-&gt;&gt;modified: git reset -- file\nstage-&gt;&gt;history: git commit\nhistory-&gt;&gt;stage: git reset HEAD^</code></pre></div>\n\n<h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> &lt;server&gt; <span class=\"comment\"># 克隆网络仓库</span></span><br><span class=\"line\">git init    <span class=\"comment\"># 将当前目录初始化为git仓库</span></span><br><span class=\"line\">git remote add origin &lt;server&gt; <span class=\"comment\"># 当前git目录绑定远程仓库</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status      <span class=\"comment\"># 查看状态</span></span><br><span class=\"line\">git status -s   <span class=\"comment\"># 简略查看状态(-s=--short)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加和复原\"><a href=\"#添加和复原\" class=\"headerlink\" title=\"添加和复原\"></a>添加和复原</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add &lt;file&gt;           <span class=\"comment\"># 添加指定文件到stage</span></span><br><span class=\"line\">git add *                <span class=\"comment\"># 添加所有文件到stage</span></span><br><span class=\"line\"></span><br><span class=\"line\">git reset -- &lt;file&gt;      <span class=\"comment\"># 将添加的文件恢复到unstage</span></span><br><span class=\"line\">git reset --hard HEAD    <span class=\"comment\"># (Danger)重置所有文件(history-&gt;workspace)</span></span><br><span class=\"line\"></span><br><span class=\"line\">git checkout -- &lt;file&gt;   <span class=\"comment\"># (Danger)指定文件恢复为上次提交(unstage-&gt;workspace)</span></span><br><span class=\"line\">git checkout HEAD &lt;file&gt; <span class=\"comment\"># (Danger)从当前仓库中获取/覆盖文件(history-&gt;workspace)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码比较\"><a href=\"#代码比较\" class=\"headerlink\" title=\"代码比较\"></a>代码比较</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff            <span class=\"comment\"># 未追踪文件比较</span></span><br><span class=\"line\">git diff --cached   <span class=\"comment\"># 已追踪文件比较(--cached=--staged)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit               <span class=\"comment\"># 提交</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"message\"</span>  <span class=\"comment\"># 提交(-m=--message)</span></span><br><span class=\"line\">git commit -am <span class=\"string\">\"message\"</span> <span class=\"comment\"># 将所有修改的文件进行追踪并提交</span></span><br><span class=\"line\">git commit --amend       <span class=\"comment\"># 修改上次提交</span></span><br><span class=\"line\">git reset HEAD^          <span class=\"comment\"># 取消当前提交(HEAD--&gt;stage)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span>                  <span class=\"comment\"># 查看日志</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --oneline        <span class=\"comment\"># 单行显示(--pretty=oneline)</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --graph          <span class=\"comment\"># 图表显示</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --author=&lt;user&gt;  <span class=\"comment\"># 指定提交作者</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -p               <span class=\"comment\"># 附带上每次修改的具体内容</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -5               <span class=\"comment\"># 控制输出条数</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span>           <span class=\"comment\"># 每条记录显示总结</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch &lt;new branch&gt;      <span class=\"comment\"># 从当前代码拉新分支</span></span><br><span class=\"line\">git checkout &lt;branch/commit&gt; <span class=\"comment\"># 切换到分支/某版本</span></span><br><span class=\"line\">git checkout -b &lt;new branch&gt; <span class=\"comment\"># 从当前代码拉新分支并切换到新分支(等同上面两条命令)</span></span><br><span class=\"line\">git branch -d &lt;branch&gt;       <span class=\"comment\"># 删除分支(如果未合并则删除失败)</span></span><br><span class=\"line\">git branch -D &lt;branch&gt;       <span class=\"comment\"># 强制删除分支</span></span><br><span class=\"line\">git branch -a                <span class=\"comment\"># 列出所有分支</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"分支合并\"><a href=\"#分支合并\" class=\"headerlink\" title=\"分支合并\"></a>分支合并</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge &lt;branch&gt;          <span class=\"comment\"># 分支合并</span></span><br><span class=\"line\">git merge --no-ff &lt;branch&gt;  <span class=\"comment\"># 分支合并，禁用fast-forward</span></span><br><span class=\"line\">git merge --squash &lt;branch&gt; <span class=\"comment\"># 将分支多条提交整合并合并</span></span><br><span class=\"line\">git rebase -i               <span class=\"comment\"># 交互式变基</span></span><br><span class=\"line\">git cherry-pick &lt;commitId&gt;  <span class=\"comment\"># 检出某次提交到当前分支</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"贮藏\"><a href=\"#贮藏\" class=\"headerlink\" title=\"贮藏\"></a>贮藏</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash       <span class=\"comment\"># 贮藏当前unstage代码</span></span><br><span class=\"line\">git stash -u    <span class=\"comment\"># 贮藏当前stage和unstage代码，即所有修改未提交代码(-u=--include-untracked)</span></span><br><span class=\"line\">git stash list  <span class=\"comment\"># 查看贮藏</span></span><br><span class=\"line\">git stash pop   <span class=\"comment\"># 取出最后一个贮藏，并从贮藏中移除</span></span><br><span class=\"line\">git stash apply <span class=\"comment\"># 取出最后一个贮藏</span></span><br><span class=\"line\">git stash drop  <span class=\"comment\"># 丢弃贮藏</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag &lt;tag&gt;             <span class=\"comment\"># 在当前提交打标签</span></span><br><span class=\"line\">git tag &lt;tag&gt; &lt;commitId&gt;  <span class=\"comment\"># 在指定commitId上打标签</span></span><br><span class=\"line\">git tag -d &lt;tag&gt;          <span class=\"comment\"># 删除标签</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"版本写法\"><a href=\"#版本写法\" class=\"headerlink\" title=\"版本写法\"></a>版本写法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git show HEAD     <span class=\"comment\"># 当前最新提交</span></span><br><span class=\"line\">git show HEAD~1   <span class=\"comment\"># 上一次提交</span></span><br><span class=\"line\">git show HEAD^    <span class=\"comment\"># 同上，上一次提交</span></span><br><span class=\"line\">git show HEAD~2   <span class=\"comment\"># 上两次提交</span></span><br><span class=\"line\">git show HEAD^^   <span class=\"comment\"># 同上，上两次提交</span></span><br><span class=\"line\">git show HEAD@&#123;1&#125; <span class=\"comment\"># 第一次提交</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"区间写法\"><a href=\"#区间写法\" class=\"headerlink\" title=\"区间写法\"></a>区间写法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> master dev  <span class=\"comment\"># 即在mater也在dev中</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> master..dev <span class=\"comment\"># 在dev中却不在master中</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> ^master dev <span class=\"comment\"># 同上，不在master却在dev中</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> dev --not master <span class=\"comment\"># 同上，在dev中却不在master中</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">log</span> master...dev <span class=\"comment\"># 在两个分支中，所有差异的提交。是下侧两者的集合</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> ^master dev</span><br><span class=\"line\">git <span class=\"built_in\">log</span> master ^dev</span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">log</span> origin/master..HEAD  <span class=\"comment\"># 查看你即将推送到远端的内容</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> origin/master..      <span class=\"comment\"># 简写，同上一条</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码搜索与调试\"><a href=\"#代码搜索与调试\" class=\"headerlink\" title=\"代码搜索与调试\"></a>代码搜索与调试</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git grep &lt;word&gt;     <span class=\"comment\"># 检索单词</span></span><br><span class=\"line\">git grep -n &lt;word&gt;  <span class=\"comment\"># 带上行号(-n==--line-number)</span></span><br><span class=\"line\">git grep -c &lt;word&gt;  <span class=\"comment\"># 统计在每个文件中出现次数(-c=--count)</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -S &lt;word&gt; --oneline  <span class=\"comment\"># 查找单词被修改的提交</span></span><br><span class=\"line\"></span><br><span class=\"line\">git blame &lt;file&gt;    <span class=\"comment\"># 查看文件每行修改</span></span><br><span class=\"line\">git bisect start    <span class=\"comment\"># git 区间二分法查找</span></span><br><span class=\"line\">git bisect bad</span><br><span class=\"line\">git bisect good v1.0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch       <span class=\"comment\"># 拉取代码</span></span><br><span class=\"line\">git pull        <span class=\"comment\"># 拉取代码并合并到当前分支</span></span><br><span class=\"line\">git push        <span class=\"comment\"># 推送代码</span></span><br><span class=\"line\">git push --tags <span class=\"comment\"># 同步标签</span></span><br><span class=\"line\">git remote update origin --prune <span class=\"comment\"># 更新远程分支列表</span></span><br><span class=\"line\">git push origin :&lt;branch&gt;        <span class=\"comment\"># 删除远程分支</span></span><br><span class=\"line\">git push origin :refs/tags/&lt;tag&gt; <span class=\"comment\"># 删除远程标签</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git bundle create repo.bundle HEAD master  <span class=\"comment\"># 项目打包</span></span><br><span class=\"line\">git reflog <span class=\"comment\"># 查阅HEAD日志</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-alias\"><a href=\"#git-alias\" class=\"headerlink\" title=\"git alias\"></a>git alias</h2><p>自己网上找的，因为查看日志最麻烦，所以仅仅收集了日志部分。现在也很少使用了。主要在用系统 alias。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias.l=<span class=\"built_in\">log</span> --graph --all --pretty=format:<span class=\"string\">'%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset'</span></span><br><span class=\"line\">alias.ll=<span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span> --abbrev-commit</span><br><span class=\"line\">alias.lg=<span class=\"built_in\">log</span> --color --graph --pretty=format:<span class=\"string\">'%C(bold white)%h%Creset -%C(bold green)%d%Creset %s %C(bold green)(%cr)%Creset %C(bold blue)&lt;%an&gt;%Creset'</span> --abbrev-commit --date=relative</span><br><span class=\"line\">alias.llg=<span class=\"built_in\">log</span> --color --graph --pretty=format:<span class=\"string\">'%C(bold white)%H %d%Creset%n%s%n%+b%C(bold blue)%an &lt;%ae&gt;%Creset %C(bold green)%cr (%ci)'</span> --abbrev-commit</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"alias-git-plugin\"><a href=\"#alias-git-plugin\" class=\"headerlink\" title=\"alias(git-plugin)\"></a>alias(git-plugin)</h2><p>从 oh-my-zsh 中拿来的，大部分都用不到…</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g=git</span><br><span class=\"line\">ga=<span class=\"string\">'git add'</span></span><br><span class=\"line\">gaa=<span class=\"string\">'git add --all'</span></span><br><span class=\"line\">gap=<span class=\"string\">'git apply'</span></span><br><span class=\"line\">gapa=<span class=\"string\">'git add --patch'</span></span><br><span class=\"line\">gau=<span class=\"string\">'git add --update'</span></span><br><span class=\"line\">gav=<span class=\"string\">'git add --verbose'</span></span><br><span class=\"line\">gb=<span class=\"string\">'git branch'</span></span><br><span class=\"line\">gbD=<span class=\"string\">'git branch -D'</span></span><br><span class=\"line\">gba=<span class=\"string\">'git branch -a'</span></span><br><span class=\"line\">gbd=<span class=\"string\">'git branch -d'</span></span><br><span class=\"line\">gbda=<span class=\"string\">'git branch --no-color --merged | command grep -vE \"^(\\*|\\s*(master|develop|dev)\\s*$)\" | command xargs -n 1 git branch -d'</span></span><br><span class=\"line\">gbl=<span class=\"string\">'git blame -b -w'</span></span><br><span class=\"line\">gbnm=<span class=\"string\">'git branch --no-merged'</span></span><br><span class=\"line\">gbr=<span class=\"string\">'git branch --remote'</span></span><br><span class=\"line\">gbs=<span class=\"string\">'git bisect'</span></span><br><span class=\"line\">gbsb=<span class=\"string\">'git bisect bad'</span></span><br><span class=\"line\">gbsg=<span class=\"string\">'git bisect good'</span></span><br><span class=\"line\">gbsr=<span class=\"string\">'git bisect reset'</span></span><br><span class=\"line\">gbss=<span class=\"string\">'git bisect start'</span></span><br><span class=\"line\">gc=<span class=\"string\">'git commit -v'</span></span><br><span class=\"line\"><span class=\"string\">'gc!'</span>=<span class=\"string\">'git commit -v --amend'</span></span><br><span class=\"line\">gca=<span class=\"string\">'git commit -v -a'</span></span><br><span class=\"line\"><span class=\"string\">'gca!'</span>=<span class=\"string\">'git commit -v -a --amend'</span></span><br><span class=\"line\">gcam=<span class=\"string\">'git commit -a -m'</span></span><br><span class=\"line\"><span class=\"string\">'gcan!'</span>=<span class=\"string\">'git commit -v -a --no-edit --amend'</span></span><br><span class=\"line\"><span class=\"string\">'gcans!'</span>=<span class=\"string\">'git commit -v -a -s --no-edit --amend'</span></span><br><span class=\"line\">gcb=<span class=\"string\">'git checkout -b'</span></span><br><span class=\"line\">gcd=<span class=\"string\">'git checkout develop'</span></span><br><span class=\"line\">gcf=<span class=\"string\">'git config --list'</span></span><br><span class=\"line\">gcl=<span class=\"string\">'git clone --recurse-submodules'</span></span><br><span class=\"line\">gclean=<span class=\"string\">'git clean -fd'</span></span><br><span class=\"line\">gcm=<span class=\"string\">'git checkout master'</span></span><br><span class=\"line\">gcmsg=<span class=\"string\">'git commit -m'</span></span><br><span class=\"line\"><span class=\"string\">'gcn!'</span>=<span class=\"string\">'git commit -v --no-edit --amend'</span></span><br><span class=\"line\">gco=<span class=\"string\">'git checkout'</span></span><br><span class=\"line\">gcount=<span class=\"string\">'git shortlog -sn'</span></span><br><span class=\"line\">gcp=<span class=\"string\">'git cherry-pick'</span></span><br><span class=\"line\">gcpa=<span class=\"string\">'git cherry-pick --abort'</span></span><br><span class=\"line\">gcpc=<span class=\"string\">'git cherry-pick --continue'</span></span><br><span class=\"line\">gcs=<span class=\"string\">'git commit -S'</span></span><br><span class=\"line\">gcsm=<span class=\"string\">'git commit -s -m'</span></span><br><span class=\"line\">gd=<span class=\"string\">'git diff'</span></span><br><span class=\"line\">gdca=<span class=\"string\">'git diff --cached'</span></span><br><span class=\"line\">gdct=<span class=\"string\">'git describe --tags `git rev-list --tags --max-count=1`'</span></span><br><span class=\"line\">gdcw=<span class=\"string\">'git diff --cached --word-diff'</span></span><br><span class=\"line\">gds=<span class=\"string\">'git diff --staged'</span></span><br><span class=\"line\">gdt=<span class=\"string\">'git diff-tree --no-commit-id --name-only -r'</span></span><br><span class=\"line\">gdw=<span class=\"string\">'git diff --word-diff'</span></span><br><span class=\"line\">gf=<span class=\"string\">'git fetch'</span></span><br><span class=\"line\">gfa=<span class=\"string\">'git fetch --all --prune'</span></span><br><span class=\"line\">gfo=<span class=\"string\">'git fetch origin'</span></span><br><span class=\"line\">gg=<span class=\"string\">'git gui citool'</span></span><br><span class=\"line\">gga=<span class=\"string\">'git gui citool --amend'</span></span><br><span class=\"line\">ggpull=<span class=\"string\">'git pull origin \"$(git_current_branch)\"'</span></span><br><span class=\"line\">ggpush=<span class=\"string\">'git push origin \"$(git_current_branch)\"'</span></span><br><span class=\"line\">ggsup=<span class=\"string\">'git branch --set-upstream-to=origin/$(git_current_branch)'</span></span><br><span class=\"line\">ghh=<span class=\"string\">'git help'</span></span><br><span class=\"line\">gignore=<span class=\"string\">'git update-index --assume-unchanged'</span></span><br><span class=\"line\">gignored=<span class=\"string\">'git ls-files -v | grep \"^[[:lower:]]\"'</span></span><br><span class=\"line\">git-svn-dcommit-push=<span class=\"string\">'git svn dcommit &amp;&amp; git push github master:svntrunk'</span></span><br><span class=\"line\">gk=<span class=\"string\">'\\gitk --all --branches'</span></span><br><span class=\"line\">gke=<span class=\"string\">'\\gitk --all $(git log -g --pretty=%h)'</span></span><br><span class=\"line\">gl=<span class=\"string\">'git pull'</span></span><br><span class=\"line\">glg=<span class=\"string\">'git log --stat'</span></span><br><span class=\"line\">glgg=<span class=\"string\">'git log --graph'</span></span><br><span class=\"line\">glgga=<span class=\"string\">'git log --graph --decorate --all'</span></span><br><span class=\"line\">glgm=<span class=\"string\">'git log --graph --max-count=10'</span></span><br><span class=\"line\">glgp=<span class=\"string\">'git log --stat -p'</span></span><br><span class=\"line\">glo=<span class=\"string\">'git log --oneline --decorate'</span></span><br><span class=\"line\">glod=<span class=\"string\">'git log --graph --pretty='</span>\\<span class=\"string\">''</span>%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)&lt;%an&gt;%Creset<span class=\"string\">'\\'</span></span><br><span class=\"line\">glods=<span class=\"string\">'git log --graph --pretty='</span>\\<span class=\"string\">''</span>%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)&lt;%an&gt;%Creset<span class=\"string\">'\\'</span><span class=\"string\">' --date=short'</span></span><br><span class=\"line\">glog=<span class=\"string\">'git log --oneline --decorate --graph'</span></span><br><span class=\"line\">gloga=<span class=\"string\">'git log --oneline --decorate --graph --all'</span></span><br><span class=\"line\">glol=<span class=\"string\">'git log --graph --pretty='</span>\\<span class=\"string\">''</span>%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset<span class=\"string\">'\\'</span></span><br><span class=\"line\">glola=<span class=\"string\">'git log --graph --pretty='</span>\\<span class=\"string\">''</span>%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset<span class=\"string\">'\\'</span><span class=\"string\">' --all'</span></span><br><span class=\"line\">glols=<span class=\"string\">'git log --graph --pretty='</span>\\<span class=\"string\">''</span>%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset<span class=\"string\">'\\'</span><span class=\"string\">' --stat'</span></span><br><span class=\"line\">glp=_git_log_prettily</span><br><span class=\"line\">glum=<span class=\"string\">'git pull upstream master'</span></span><br><span class=\"line\">gm=<span class=\"string\">'git merge'</span></span><br><span class=\"line\">gma=<span class=\"string\">'git merge --abort'</span></span><br><span class=\"line\">gmom=<span class=\"string\">'git merge origin/master'</span></span><br><span class=\"line\">gmt=<span class=\"string\">'git mergetool --no-prompt'</span></span><br><span class=\"line\">gmtvim=<span class=\"string\">'git mergetool --no-prompt --tool=vimdiff'</span></span><br><span class=\"line\">gmum=<span class=\"string\">'git merge upstream/master'</span></span><br><span class=\"line\">gp=<span class=\"string\">'git push'</span></span><br><span class=\"line\">gpd=<span class=\"string\">'git push --dry-run'</span></span><br><span class=\"line\">gpf=<span class=\"string\">'git push --force-with-lease'</span></span><br><span class=\"line\"><span class=\"string\">'gpf!'</span>=<span class=\"string\">'git push --force'</span></span><br><span class=\"line\">gpoat=<span class=\"string\">'git push origin --all &amp;&amp; git push origin --tags'</span></span><br><span class=\"line\">gpristine=<span class=\"string\">'git reset --hard &amp;&amp; git clean -dfx'</span></span><br><span class=\"line\">gpsup=<span class=\"string\">'git push --set-upstream origin $(git_current_branch)'</span></span><br><span class=\"line\">gpu=<span class=\"string\">'git push upstream'</span></span><br><span class=\"line\">gpv=<span class=\"string\">'git push -v'</span></span><br><span class=\"line\">gr=<span class=\"string\">'git remote'</span></span><br><span class=\"line\">gra=<span class=\"string\">'git remote add'</span></span><br><span class=\"line\">grb=<span class=\"string\">'git rebase'</span></span><br><span class=\"line\">grba=<span class=\"string\">'git rebase --abort'</span></span><br><span class=\"line\">grbc=<span class=\"string\">'git rebase --continue'</span></span><br><span class=\"line\">grbd=<span class=\"string\">'git rebase develop'</span></span><br><span class=\"line\">grbi=<span class=\"string\">'git rebase -i'</span></span><br><span class=\"line\">grbm=<span class=\"string\">'git rebase master'</span></span><br><span class=\"line\">grbs=<span class=\"string\">'git rebase --skip'</span></span><br><span class=\"line\">grep=<span class=\"string\">'grep  --color=auto --exclude-dir=&#123;.bzr,CVS,.git,.hg,.svn&#125;'</span></span><br><span class=\"line\">grh=<span class=\"string\">'git reset'</span></span><br><span class=\"line\">grhh=<span class=\"string\">'git reset --hard'</span></span><br><span class=\"line\">grm=<span class=\"string\">'git rm'</span></span><br><span class=\"line\">grmc=<span class=\"string\">'git rm --cached'</span></span><br><span class=\"line\">grmv=<span class=\"string\">'git remote rename'</span></span><br><span class=\"line\">grrm=<span class=\"string\">'git remote remove'</span></span><br><span class=\"line\">grset=<span class=\"string\">'git remote set-url'</span></span><br><span class=\"line\">grt=<span class=\"string\">'cd $(git rev-parse --show-toplevel || echo \".\")'</span></span><br><span class=\"line\">gru=<span class=\"string\">'git reset --'</span></span><br><span class=\"line\">grup=<span class=\"string\">'git remote update'</span></span><br><span class=\"line\">grv=<span class=\"string\">'git remote -v'</span></span><br><span class=\"line\">gsb=<span class=\"string\">'git status -sb'</span></span><br><span class=\"line\">gsd=<span class=\"string\">'git svn dcommit'</span></span><br><span class=\"line\">gsh=<span class=\"string\">'git show'</span></span><br><span class=\"line\">gsi=<span class=\"string\">'git submodule init'</span></span><br><span class=\"line\">gsps=<span class=\"string\">'git show --pretty=short --show-signature'</span></span><br><span class=\"line\">gsr=<span class=\"string\">'git svn rebase'</span></span><br><span class=\"line\">gss=<span class=\"string\">'git status -s'</span></span><br><span class=\"line\">gst=<span class=\"string\">'git status'</span></span><br><span class=\"line\">gsta=<span class=\"string\">'git stash save'</span></span><br><span class=\"line\">gstaa=<span class=\"string\">'git stash apply'</span></span><br><span class=\"line\">gstall=<span class=\"string\">'git stash --all'</span></span><br><span class=\"line\">gstc=<span class=\"string\">'git stash clear'</span></span><br><span class=\"line\">gstd=<span class=\"string\">'git stash drop'</span></span><br><span class=\"line\">gstl=<span class=\"string\">'git stash list'</span></span><br><span class=\"line\">gstp=<span class=\"string\">'git stash pop'</span></span><br><span class=\"line\">gsts=<span class=\"string\">'git stash show --text'</span></span><br><span class=\"line\">gsu=<span class=\"string\">'git submodule update'</span></span><br><span class=\"line\">gts=<span class=\"string\">'git tag -s'</span></span><br><span class=\"line\">gtv=<span class=\"string\">'git tag | sort -V'</span></span><br><span class=\"line\">gunignore=<span class=\"string\">'git update-index --no-assume-unchanged'</span></span><br><span class=\"line\">gunwip=<span class=\"string\">'git log -n 1 | grep -q -c \"\\-\\-wip\\-\\-\" &amp;&amp; git reset HEAD~1'</span></span><br><span class=\"line\">gup=<span class=\"string\">'git pull --rebase'</span></span><br><span class=\"line\">gupa=<span class=\"string\">'git pull --rebase --autostash'</span></span><br><span class=\"line\">gupav=<span class=\"string\">'git pull --rebase --autostash -v'</span></span><br><span class=\"line\">gupv=<span class=\"string\">'git pull --rebase -v'</span></span><br><span class=\"line\">gwch=<span class=\"string\">'git whatchanged -p --abbrev-commit --pretty=medium'</span></span><br><span class=\"line\">gwip=<span class=\"string\">'git add -A; git rm $(git ls-files --deleted) 2&gt; /dev/null; git commit --no-verify -m \"--wip-- [skip ci]\"'</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\" target=\"_blank\" rel=\"noopener\">git简明指南</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">Git教程(廖雪峰)</a></li>\n<li><a href=\"https://github.com/k88hudson/git-flight-rules/blob/master/README_zh-CN.md\" target=\"_blank\" rel=\"noopener\">Git飞行规则(Flight Rules)</a></li>\n<li><a href=\"http://marklodato.github.io/visual-git-guide/index-zh-cn.html\" target=\"_blank\" rel=\"noopener\">图解Git</a></li>\n<li><a href=\"https://learngitbranching.js.org/\" target=\"_blank\" rel=\"noopener\">Learn Git Branching</a></li>\n<li><a href=\"https://book.git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">git book</a></li>\n</ul>\n<script src=\"/assets/js/mermaid-v7.1.0.min.js\"></script>\n<script>mermaid.initialize({startOnLoad:true});</script>"},{"layout":"post","title":"React Hooks 入门","date":"2019-07-14T10:45:00.000Z","_content":"\n学习使用 react-hooks 语法。\n\n> Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.\n\n<!-- more -->\n\n## 现有 hooks\n\n官方分了类，一类基础，一类扩展。其实常用的不多，主要还是 `useState`、`useEffect`、`useRef`、`useCallback`(`useMemo`和它差不多)。\n\n**Basic Hooks**\n* useState\n* useEffect\n* useContext\n\n**Additional Hooks**\n* useReducer\n* useCallback\n* useMemo\n* useRef\n* useImperativeHandle\n* useLayoutEffect\n* useDebugValue\n\n## 使用 hooks 的规则\n\n#### 首先是必须写到最顶层\n\n```jsx\nfunction Counter() {\n  // 这样写是可以的，hooks 每次都必定执行到\n  const [count, setCount] = useState(0)\n  const [timer, setTimer] = useState(0)\n    \n  // 这样是不行的，因为 hooks 有的时候可能不会被执行\n  if(condition) {\n    const [data, setData] = useState([])\n  }\n  // ...\n}\n```\n\n#### 只能在函数组件中使用\n\n简单地说，就是要在 react 组件中使用。不能你在 react 项目中，随便写个公共方法就用 hooks，除非这个 hooks 最终用到了组件中。最终结论就是 hooks 最终必须应用到 react 组件中。\n\n此外，传统的使用类方式的组件不可以使用 hooks，否则提示 Invalid Hook Call。\n\n## useState\n\n#### 常规用法\n\n用法比较简单，直接上 demo。\n\n```jsx\nfunction Counter() {\n  const [count, setCount] = useState(0)\n  \n  const handleClick = () => {\n    setCount(count + 1)\n  }\n  \n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={handleClick}>Click me</button>\n    </div>\n  )\n}\n```\n\n#### 第二参数\n\n要注意的是，`setState` (即上文的 `setCount`)是没有第二个参数的。\n\n如果确实需要像以前一样的话，那么需要用到 `useEffect` 方法实现，这里先给出demo：\n\n```jsx\nfunction Counter() {\n  const [count, setCount] = useState(0)\n  \n  const handleClick = () => {\n    setCount(count + 1)\n  }\n\n  useEffect(() => {\n    document.title = count\n  }, [count])\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={handleClick}>Click me</button>\n    </div>\n  )\n}\n```\n\n#### 传入函数\n \n虽然第二个参数没有了，但是第一个参数还可以是一个函数：\n\n```jsx\nsetState(state => {})\n```\n\n比如上文的代码，可以调整为：\n\n```jsx\nconst handleClick = () => {\n  // setCount(count + 1)\n  setCount(count => count + 1)\n}\n```\n\n这么写有时候可以解决引用问题，因为它的第一个参数是函数，函数里面永远可以拿到最新的 state。不这么写的话，可能需要用 `useRef` 来解决。\n\n#### 直接定义对象\n\n实际使用的时候，有时候也会定义一个对象：\n\n```jsx\nconst [state, setState] = useState({})\n```\n\n比如订单数据，都放在一个对象中，这样省去定义大量的 hooks。\n\n## useEffect\n\n处理副作用的方法。在更新改变后触发，相当于之前的 `componentDidMount` `componentDidUpdate`，不论是第一次渲染还是更新后，都会触发。\n\n```jsx\nuseEffect(fn, [...])\n```\n\n第一个参数是执行函数，可以有返回值（返回函数），内容就是取消副作用（clean up）。\n\n第二个参数是数组，相当于仅当数组的值改变后，才会触发函数。如果传入空数组，相当于后续永远不会在改变了，可以模拟 `componentDidMount`。\n\n#### 常规用法\n\n一个例子就是上文 `setState` 的用法。\n\n这里给出另一个常见的例子：\n\n```jsx\nfunction Test() {\n  const [value1, setValue1] = useState('')\n  const [value2, setValue2] = useState('')\n  const [allowed, setAllowed] = useState(false)\n\n  const handleInput1Change = e => {\n    setValue1(e.target.value)\n  }\n  \n  const handleInput2Change = e => {\n    setValue2(e.target.value)\n  }\n\n  // 传入空数组，模拟 componentDidMount\n  useEffect(() => {\n    document.title = '123'\n  }, [])\n\n  // 同时检测两个值\n  useEffect(() => {\n    setAllowed(value1 && value2)\n  }, [value1, value2])\n\n  return (\n    <div>\n      <input\n        value={value1}\n        onChange={handleInput1Change}\n        style={ { border: '1px solid #333' } }\n        placeholder=\"username\"\n      />\n      <br />\n      <input\n        value={value2}\n        onChange={handleInput2Change}\n        style={ { border: '1px solid #333' } }\n        placeholder=\"password\"\n      />\n      <br />\n      <p>allowed:{allowed ? 'yes' : 'no'}</p>\n    </div>\n  )\n}\n```\n\n`useEffect` 实际用起来，最常用的就是传空数组，模拟 `componentDidMount`。剩下传入参数的时候，和 vue 的 `watch` 差不多。\n\n#### 返回函数\n\n再给出一个需要取消副作用的例子（例子的实际意义不好，仅做代码演示）：\n\n```jsx\n  // 仅当输入内容长度均大于5位后，才考虑自动提交数据\n  // 并在提交前提供3秒延迟\n  // 这个例子就是常见的防抖\n  useEffect(() => {\n    setAllowed(value1 && value2)\n    let ref = null\n    if (value1.length >= 5 && value2.length >= 5) {\n      console.log('启动定时器打印log')\n      ref = setTimeout(() => {\n        console.log('log', value1, value2)\n      }, 3000)\n    }\n    return () => {\n      console.log('清理定时器')\n      clearTimeout(ref)\n    }\n  }, [value1, value2])\n```\n\n返回清理函数的情况，大部分是处理定时器或者发出一个 ajax 请求后，需要中断处理的情况。\n\n目前来看我在项目里面还没用到，可能是我的项目中，没有得到数据，页面不可能跳转到下一步，也就不存在需要清理副作用的情况。\n\n## useRef\n\n`useRef` 在 hooks 中，有两种用法。第一种是常规的 ref，第二种是用于穿透闭包。\n\n通过 `useRef` 可以创建一个对象，可以理解为函数内的全局变量。为了能做到实时引用，所以他必须是一个对象。具体的引用值，都存在了 `current` 属性上，这就使得它可以穿透闭包。\n\n#### 常规用法\n\n先说第一种常规 ref 用法，和之前写的 `React.createRef` 一致：\n\n```jsx\nfunction Test() {\n  const [isFocus, setIsFocus] = useState(false)\n  const [value, setValue] = useState('')\n\n  const inputRef = useRef(null)\n\n  const handleInputChange = e => {\n    setValue(e.target.value)\n  }\n\n  const handleInputFocus = () => {\n    setIsFocus(true)\n  }\n\n  const handleInputBlur = () => {\n    setIsFocus(false)\n  }\n\n  const handleBtnClick = () => {\n    inputRef.current.focus()\n  }\n\n  return (\n    <div>\n      <input\n        value={value}\n        onChange={handleInputChange}\n        onFocus={handleInputFocus}\n        onBlur={handleInputBlur}\n        ref={inputRef}\n        style={ { border: '1px solid #333' } }\n      />\n      <button onClick={handleBtnClick} style={ { border: '1px solid #333' } }>\n        click for focus\n      </button>\n      <br />\n      <p>focus:{isFocus ? 'yes' : 'no'}</p>\n    </div>\n  )\n}\n```\n\n#### 其他用法\n\n来说 ref 的第二种用法。\n\n首先看一个 demo：\n\n```jsx\nfunction Test() {\n  const [count, setCount] = useState(0)\n\n  const handleAddClick = e => {\n    setCount(count + 1)\n  }\n\n  const handleAlertClick = () => {\n    setTimeout(() => {\n      alert(count)\n    }, 3000)\n  }\n\n  return (\n    <div>\n      <span>counter:{count}</span>&nbsp;&nbsp;\n      <button onClick={handleAddClick} style={ { border: '1px solid #333' } }>\n        +1\n      </button>\n      <br />\n      <br />\n      <button onClick={handleAlertClick} style={ { border: '1px solid #333' } }>\n        alert\n      </button>\n    </div>\n  )\n}\n```\n\n操作结果为：\n\n* 点击 +1 按钮，增加计数器，增加到 3\n* 点击 alert，3秒后显示计数器的值\n* 点击 +1 按钮，增加计数器，增加到 5\n* 3秒到了，此时提示框显示了 3\n\n或许和你想的不一样，为什么不是显示 5？\n\n简言之，再点击 alert 按钮时候，此时计数器值是 3。**hooks 会缓存此状态！**所以3秒过后，就是提示 3 了。\n\n解决方法很简单，如果不是 react 项目，那么我们肯定用一个对象存储数据，这样 3 秒后提示内容，读取对象中的属性就好了。因为对象是传址（非传值）的。\n\nreact 亦如此。我们使用 useRef 来实现，其中的值保存在 `current` 中。\n\n```jsx\nfunction Test() {\n  const [count, setCount] = useState(0)\n  const valueRef = useRef()\n\n  const handleAddClick = e => {\n    const newVal = count + 1\n    setCount(newVal)\n    valueRef.current = newVal\n  }\n\n  const handleAlertClick = () => {\n    setTimeout(() => {\n      alert(valueRef.current)\n    }, 3000)\n  }\n\n  return (\n    <div>\n      <span>counter:{count}</span>&nbsp;&nbsp;\n      <button onClick={handleAddClick} style={ { border: '1px solid #333' } }>\n        +1\n      </button>\n      <br />\n      <br />\n      <button onClick={handleAlertClick} style={ { border: '1px solid #333' } }>\n        alert\n      </button>\n    </div>\n  )\n}\n```\n\n## useContext\n\n`useContext` 主要解决的是组件数据透传。比如父组件要定义一些数据，但是最终要在很深层次的子组件中使用，这时候用 `useContext` 非常方便。\n\n```jsx\nconst DataContext = React.createContext()\n\nfunction Child() {\n  return (\n    <DataContext.Consumer>\n      {value => {\n        return (\n          <div>\n            <p>name: {value.name}</p>\n            <p>age: {value.age}</p>\n          </div>\n        )\n      }}\n    </DataContext.Consumer>\n  )\n}\n\nfunction Parent() {\n  const [data, setData] = useState({ name: 'tim', age: 20 })\n  return (\n    <DataContext.Provider value={data}>\n      <div>\n        <Child />\n      </div>\n    </DataContext.Provider>\n  )\n}\n```\n\n唯一要说明的就是，`Provider` 的传值属性必须是 `value`。所以要么传一个值，要么传一个对象。\n\n\n## useReducer\n\n`useReducer` 使用起来非常简单，不管是否接触过 Redux，都能容易上手。\n\n```jsx\nconst initialState = { count: 0 }\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'increment':\n      return { count: state.count + 1 }\n    case 'incrementAny':\n      return { count: state.count + action.count }\n    case 'decrement':\n      return { count: state.count - 1 }\n    default:\n      return { count: state.count }\n  }\n}\n\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  return (\n    <div>\n      Count: {state.count}\n      <br />\n      <button onClick={() => dispatch({ type: 'increment' })}>+</button>\n      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>\n      <button onClick={() => dispatch({ type: 'incrementAny', count: 5 })}>\n        +5\n      </button>\n    </div>\n  )\n}\n```\n\n实际使用中，当多个组件公用一个状态时候，会用得到。\n\n## useCallback / useMemo\n\n使用 useCallback / useMemo 来缓存函数，提升执行效率。\n\n#### 常规用法\n\n下文例子中，输入数字，进行加法计算。输入空格，触发内容改变，但是数值没有变化。\n\n不做处理的情况下，每次输入，均会触发加法计算。\n\n使用了，`useMemo` 后，相同的值，只会计算一次。后续不会触发加法计算。\n\n```jsx\nfunction Counter() {\n  const [val1, setVal1] = useState(0)\n  const [val2, setVal2] = useState(0)\n\n  const add = (a, b) => {\n    console.log('add', a, b)\n    return a + b\n  }\n\n  const memoized = useCallback(add(val1, val2), [val1, val2])\n\n  const handleInput1Change = e => {\n    const val = Number(e.target.value)\n    console.log('input1:', val)\n    setVal1(val)\n    memoized()\n  }\n  const handleInput2Change = e => {\n    const val = Number(e.target.value)\n    console.log('input2:', val)\n    setVal2(val)\n  }\n\n  return (\n    <div>\n      <input onChange={handleInput1Change} value={val1} />\n      <input onChange={handleInput2Change} value={val2} />\n      <p>sum:{memoized}</p>\n    </div>\n  )\n}\n```\n\n如果要用 `useCallback`，上文需要调整一点就可以了。官方给出了两者关系，如下：\n\n```jsx\nuseCallback(fn, deps) \nuseMemo(() => fn, deps)\n```\n\n需要注意的是，`useMemo` 的第一个参数是个函数，**并且需要进行返回**！\n\n```jsx\n// const memoized = useCallback(add(val1, val2), [val1, val2])\nconst memoized = useMemo(() => {\n  return add(val1, val2)\n}, [val1, val2])\n```\n\n## 小结\n\n根据我这一段时间的使用，基本上没遇到太多坑，也就是参考上文的这些处理方法基本都可解决。\n\n唯独要注意的是，hooks 里面不要使用 `setInterval`，一言难尽，建议看 react 原作者文章（[见此](https://overreacted.io/zh-hans/making-seti@yukapril.comnterval-declarative-with-react-hooks)），解释的很清晰，也有直接用的 `useInterval` 方案。","source":"_posts/2019/2019-07-14-learning-reat-hooks.md","raw":"---\nlayout: post\ntitle: React Hooks 入门\ndate: 2019-07-14 10:45:00 GMT+0000\ncategories: [前端]\ntags:  [react, hooks]\n---\n\n学习使用 react-hooks 语法。\n\n> Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.\n\n<!-- more -->\n\n## 现有 hooks\n\n官方分了类，一类基础，一类扩展。其实常用的不多，主要还是 `useState`、`useEffect`、`useRef`、`useCallback`(`useMemo`和它差不多)。\n\n**Basic Hooks**\n* useState\n* useEffect\n* useContext\n\n**Additional Hooks**\n* useReducer\n* useCallback\n* useMemo\n* useRef\n* useImperativeHandle\n* useLayoutEffect\n* useDebugValue\n\n## 使用 hooks 的规则\n\n#### 首先是必须写到最顶层\n\n```jsx\nfunction Counter() {\n  // 这样写是可以的，hooks 每次都必定执行到\n  const [count, setCount] = useState(0)\n  const [timer, setTimer] = useState(0)\n    \n  // 这样是不行的，因为 hooks 有的时候可能不会被执行\n  if(condition) {\n    const [data, setData] = useState([])\n  }\n  // ...\n}\n```\n\n#### 只能在函数组件中使用\n\n简单地说，就是要在 react 组件中使用。不能你在 react 项目中，随便写个公共方法就用 hooks，除非这个 hooks 最终用到了组件中。最终结论就是 hooks 最终必须应用到 react 组件中。\n\n此外，传统的使用类方式的组件不可以使用 hooks，否则提示 Invalid Hook Call。\n\n## useState\n\n#### 常规用法\n\n用法比较简单，直接上 demo。\n\n```jsx\nfunction Counter() {\n  const [count, setCount] = useState(0)\n  \n  const handleClick = () => {\n    setCount(count + 1)\n  }\n  \n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={handleClick}>Click me</button>\n    </div>\n  )\n}\n```\n\n#### 第二参数\n\n要注意的是，`setState` (即上文的 `setCount`)是没有第二个参数的。\n\n如果确实需要像以前一样的话，那么需要用到 `useEffect` 方法实现，这里先给出demo：\n\n```jsx\nfunction Counter() {\n  const [count, setCount] = useState(0)\n  \n  const handleClick = () => {\n    setCount(count + 1)\n  }\n\n  useEffect(() => {\n    document.title = count\n  }, [count])\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={handleClick}>Click me</button>\n    </div>\n  )\n}\n```\n\n#### 传入函数\n \n虽然第二个参数没有了，但是第一个参数还可以是一个函数：\n\n```jsx\nsetState(state => {})\n```\n\n比如上文的代码，可以调整为：\n\n```jsx\nconst handleClick = () => {\n  // setCount(count + 1)\n  setCount(count => count + 1)\n}\n```\n\n这么写有时候可以解决引用问题，因为它的第一个参数是函数，函数里面永远可以拿到最新的 state。不这么写的话，可能需要用 `useRef` 来解决。\n\n#### 直接定义对象\n\n实际使用的时候，有时候也会定义一个对象：\n\n```jsx\nconst [state, setState] = useState({})\n```\n\n比如订单数据，都放在一个对象中，这样省去定义大量的 hooks。\n\n## useEffect\n\n处理副作用的方法。在更新改变后触发，相当于之前的 `componentDidMount` `componentDidUpdate`，不论是第一次渲染还是更新后，都会触发。\n\n```jsx\nuseEffect(fn, [...])\n```\n\n第一个参数是执行函数，可以有返回值（返回函数），内容就是取消副作用（clean up）。\n\n第二个参数是数组，相当于仅当数组的值改变后，才会触发函数。如果传入空数组，相当于后续永远不会在改变了，可以模拟 `componentDidMount`。\n\n#### 常规用法\n\n一个例子就是上文 `setState` 的用法。\n\n这里给出另一个常见的例子：\n\n```jsx\nfunction Test() {\n  const [value1, setValue1] = useState('')\n  const [value2, setValue2] = useState('')\n  const [allowed, setAllowed] = useState(false)\n\n  const handleInput1Change = e => {\n    setValue1(e.target.value)\n  }\n  \n  const handleInput2Change = e => {\n    setValue2(e.target.value)\n  }\n\n  // 传入空数组，模拟 componentDidMount\n  useEffect(() => {\n    document.title = '123'\n  }, [])\n\n  // 同时检测两个值\n  useEffect(() => {\n    setAllowed(value1 && value2)\n  }, [value1, value2])\n\n  return (\n    <div>\n      <input\n        value={value1}\n        onChange={handleInput1Change}\n        style={ { border: '1px solid #333' } }\n        placeholder=\"username\"\n      />\n      <br />\n      <input\n        value={value2}\n        onChange={handleInput2Change}\n        style={ { border: '1px solid #333' } }\n        placeholder=\"password\"\n      />\n      <br />\n      <p>allowed:{allowed ? 'yes' : 'no'}</p>\n    </div>\n  )\n}\n```\n\n`useEffect` 实际用起来，最常用的就是传空数组，模拟 `componentDidMount`。剩下传入参数的时候，和 vue 的 `watch` 差不多。\n\n#### 返回函数\n\n再给出一个需要取消副作用的例子（例子的实际意义不好，仅做代码演示）：\n\n```jsx\n  // 仅当输入内容长度均大于5位后，才考虑自动提交数据\n  // 并在提交前提供3秒延迟\n  // 这个例子就是常见的防抖\n  useEffect(() => {\n    setAllowed(value1 && value2)\n    let ref = null\n    if (value1.length >= 5 && value2.length >= 5) {\n      console.log('启动定时器打印log')\n      ref = setTimeout(() => {\n        console.log('log', value1, value2)\n      }, 3000)\n    }\n    return () => {\n      console.log('清理定时器')\n      clearTimeout(ref)\n    }\n  }, [value1, value2])\n```\n\n返回清理函数的情况，大部分是处理定时器或者发出一个 ajax 请求后，需要中断处理的情况。\n\n目前来看我在项目里面还没用到，可能是我的项目中，没有得到数据，页面不可能跳转到下一步，也就不存在需要清理副作用的情况。\n\n## useRef\n\n`useRef` 在 hooks 中，有两种用法。第一种是常规的 ref，第二种是用于穿透闭包。\n\n通过 `useRef` 可以创建一个对象，可以理解为函数内的全局变量。为了能做到实时引用，所以他必须是一个对象。具体的引用值，都存在了 `current` 属性上，这就使得它可以穿透闭包。\n\n#### 常规用法\n\n先说第一种常规 ref 用法，和之前写的 `React.createRef` 一致：\n\n```jsx\nfunction Test() {\n  const [isFocus, setIsFocus] = useState(false)\n  const [value, setValue] = useState('')\n\n  const inputRef = useRef(null)\n\n  const handleInputChange = e => {\n    setValue(e.target.value)\n  }\n\n  const handleInputFocus = () => {\n    setIsFocus(true)\n  }\n\n  const handleInputBlur = () => {\n    setIsFocus(false)\n  }\n\n  const handleBtnClick = () => {\n    inputRef.current.focus()\n  }\n\n  return (\n    <div>\n      <input\n        value={value}\n        onChange={handleInputChange}\n        onFocus={handleInputFocus}\n        onBlur={handleInputBlur}\n        ref={inputRef}\n        style={ { border: '1px solid #333' } }\n      />\n      <button onClick={handleBtnClick} style={ { border: '1px solid #333' } }>\n        click for focus\n      </button>\n      <br />\n      <p>focus:{isFocus ? 'yes' : 'no'}</p>\n    </div>\n  )\n}\n```\n\n#### 其他用法\n\n来说 ref 的第二种用法。\n\n首先看一个 demo：\n\n```jsx\nfunction Test() {\n  const [count, setCount] = useState(0)\n\n  const handleAddClick = e => {\n    setCount(count + 1)\n  }\n\n  const handleAlertClick = () => {\n    setTimeout(() => {\n      alert(count)\n    }, 3000)\n  }\n\n  return (\n    <div>\n      <span>counter:{count}</span>&nbsp;&nbsp;\n      <button onClick={handleAddClick} style={ { border: '1px solid #333' } }>\n        +1\n      </button>\n      <br />\n      <br />\n      <button onClick={handleAlertClick} style={ { border: '1px solid #333' } }>\n        alert\n      </button>\n    </div>\n  )\n}\n```\n\n操作结果为：\n\n* 点击 +1 按钮，增加计数器，增加到 3\n* 点击 alert，3秒后显示计数器的值\n* 点击 +1 按钮，增加计数器，增加到 5\n* 3秒到了，此时提示框显示了 3\n\n或许和你想的不一样，为什么不是显示 5？\n\n简言之，再点击 alert 按钮时候，此时计数器值是 3。**hooks 会缓存此状态！**所以3秒过后，就是提示 3 了。\n\n解决方法很简单，如果不是 react 项目，那么我们肯定用一个对象存储数据，这样 3 秒后提示内容，读取对象中的属性就好了。因为对象是传址（非传值）的。\n\nreact 亦如此。我们使用 useRef 来实现，其中的值保存在 `current` 中。\n\n```jsx\nfunction Test() {\n  const [count, setCount] = useState(0)\n  const valueRef = useRef()\n\n  const handleAddClick = e => {\n    const newVal = count + 1\n    setCount(newVal)\n    valueRef.current = newVal\n  }\n\n  const handleAlertClick = () => {\n    setTimeout(() => {\n      alert(valueRef.current)\n    }, 3000)\n  }\n\n  return (\n    <div>\n      <span>counter:{count}</span>&nbsp;&nbsp;\n      <button onClick={handleAddClick} style={ { border: '1px solid #333' } }>\n        +1\n      </button>\n      <br />\n      <br />\n      <button onClick={handleAlertClick} style={ { border: '1px solid #333' } }>\n        alert\n      </button>\n    </div>\n  )\n}\n```\n\n## useContext\n\n`useContext` 主要解决的是组件数据透传。比如父组件要定义一些数据，但是最终要在很深层次的子组件中使用，这时候用 `useContext` 非常方便。\n\n```jsx\nconst DataContext = React.createContext()\n\nfunction Child() {\n  return (\n    <DataContext.Consumer>\n      {value => {\n        return (\n          <div>\n            <p>name: {value.name}</p>\n            <p>age: {value.age}</p>\n          </div>\n        )\n      }}\n    </DataContext.Consumer>\n  )\n}\n\nfunction Parent() {\n  const [data, setData] = useState({ name: 'tim', age: 20 })\n  return (\n    <DataContext.Provider value={data}>\n      <div>\n        <Child />\n      </div>\n    </DataContext.Provider>\n  )\n}\n```\n\n唯一要说明的就是，`Provider` 的传值属性必须是 `value`。所以要么传一个值，要么传一个对象。\n\n\n## useReducer\n\n`useReducer` 使用起来非常简单，不管是否接触过 Redux，都能容易上手。\n\n```jsx\nconst initialState = { count: 0 }\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'increment':\n      return { count: state.count + 1 }\n    case 'incrementAny':\n      return { count: state.count + action.count }\n    case 'decrement':\n      return { count: state.count - 1 }\n    default:\n      return { count: state.count }\n  }\n}\n\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  return (\n    <div>\n      Count: {state.count}\n      <br />\n      <button onClick={() => dispatch({ type: 'increment' })}>+</button>\n      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>\n      <button onClick={() => dispatch({ type: 'incrementAny', count: 5 })}>\n        +5\n      </button>\n    </div>\n  )\n}\n```\n\n实际使用中，当多个组件公用一个状态时候，会用得到。\n\n## useCallback / useMemo\n\n使用 useCallback / useMemo 来缓存函数，提升执行效率。\n\n#### 常规用法\n\n下文例子中，输入数字，进行加法计算。输入空格，触发内容改变，但是数值没有变化。\n\n不做处理的情况下，每次输入，均会触发加法计算。\n\n使用了，`useMemo` 后，相同的值，只会计算一次。后续不会触发加法计算。\n\n```jsx\nfunction Counter() {\n  const [val1, setVal1] = useState(0)\n  const [val2, setVal2] = useState(0)\n\n  const add = (a, b) => {\n    console.log('add', a, b)\n    return a + b\n  }\n\n  const memoized = useCallback(add(val1, val2), [val1, val2])\n\n  const handleInput1Change = e => {\n    const val = Number(e.target.value)\n    console.log('input1:', val)\n    setVal1(val)\n    memoized()\n  }\n  const handleInput2Change = e => {\n    const val = Number(e.target.value)\n    console.log('input2:', val)\n    setVal2(val)\n  }\n\n  return (\n    <div>\n      <input onChange={handleInput1Change} value={val1} />\n      <input onChange={handleInput2Change} value={val2} />\n      <p>sum:{memoized}</p>\n    </div>\n  )\n}\n```\n\n如果要用 `useCallback`，上文需要调整一点就可以了。官方给出了两者关系，如下：\n\n```jsx\nuseCallback(fn, deps) \nuseMemo(() => fn, deps)\n```\n\n需要注意的是，`useMemo` 的第一个参数是个函数，**并且需要进行返回**！\n\n```jsx\n// const memoized = useCallback(add(val1, val2), [val1, val2])\nconst memoized = useMemo(() => {\n  return add(val1, val2)\n}, [val1, val2])\n```\n\n## 小结\n\n根据我这一段时间的使用，基本上没遇到太多坑，也就是参考上文的这些处理方法基本都可解决。\n\n唯独要注意的是，hooks 里面不要使用 `setInterval`，一言难尽，建议看 react 原作者文章（[见此](https://overreacted.io/zh-hans/making-seti@yukapril.comnterval-declarative-with-react-hooks)），解释的很清晰，也有直接用的 `useInterval` 方案。","slug":"2019-2019-07-14-learning-reat-hooks","published":1,"updated":"2019-07-18T17:19:07.248Z","comments":1,"photos":[],"link":"","_id":"cjy8y72v800cgs21d51tuexf8","content":"<p>学习使用 react-hooks 语法。</p>\n<blockquote>\n<p>Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"现有-hooks\"><a href=\"#现有-hooks\" class=\"headerlink\" title=\"现有 hooks\"></a>现有 hooks</h2><p>官方分了类，一类基础，一类扩展。其实常用的不多，主要还是 <code>useState</code>、<code>useEffect</code>、<code>useRef</code>、<code>useCallback</code>(<code>useMemo</code>和它差不多)。</p>\n<p><strong>Basic Hooks</strong></p>\n<ul>\n<li>useState</li>\n<li>useEffect</li>\n<li>useContext</li>\n</ul>\n<p><strong>Additional Hooks</strong></p>\n<ul>\n<li>useReducer</li>\n<li>useCallback</li>\n<li>useMemo</li>\n<li>useRef</li>\n<li>useImperativeHandle</li>\n<li>useLayoutEffect</li>\n<li>useDebugValue</li>\n</ul>\n<h2 id=\"使用-hooks-的规则\"><a href=\"#使用-hooks-的规则\" class=\"headerlink\" title=\"使用 hooks 的规则\"></a>使用 hooks 的规则</h2><h4 id=\"首先是必须写到最顶层\"><a href=\"#首先是必须写到最顶层\" class=\"headerlink\" title=\"首先是必须写到最顶层\"></a>首先是必须写到最顶层</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Counter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这样写是可以的，hooks 每次都必定执行到</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [timer, setTimer] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"comment\">// 这样是不行的，因为 hooks 有的时候可能不会被执行</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(condition) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [data, setData] = useState([])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"只能在函数组件中使用\"><a href=\"#只能在函数组件中使用\" class=\"headerlink\" title=\"只能在函数组件中使用\"></a>只能在函数组件中使用</h4><p>简单地说，就是要在 react 组件中使用。不能你在 react 项目中，随便写个公共方法就用 hooks，除非这个 hooks 最终用到了组件中。最终结论就是 hooks 最终必须应用到 react 组件中。</p>\n<p>此外，传统的使用类方式的组件不可以使用 hooks，否则提示 Invalid Hook Call。</p>\n<h2 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h2><h4 id=\"常规用法\"><a href=\"#常规用法\" class=\"headerlink\" title=\"常规用法\"></a>常规用法</h4><p>用法比较简单，直接上 demo。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Counter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setCount(count + <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;handleClick&#125;&gt;Click me&lt;/</span>button&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第二参数\"><a href=\"#第二参数\" class=\"headerlink\" title=\"第二参数\"></a>第二参数</h4><p>要注意的是，<code>setState</code> (即上文的 <code>setCount</code>)是没有第二个参数的。</p>\n<p>如果确实需要像以前一样的话，那么需要用到 <code>useEffect</code> 方法实现，这里先给出demo：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Counter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setCount(count + <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.title = count</span><br><span class=\"line\">  &#125;, [count])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;handleClick&#125;&gt;Click me&lt;/</span>button&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"传入函数\"><a href=\"#传入函数\" class=\"headerlink\" title=\"传入函数\"></a>传入函数</h4><p>虽然第二个参数没有了，但是第一个参数还可以是一个函数：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setState(<span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>比如上文的代码，可以调整为：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// setCount(count + 1)</span></span><br><span class=\"line\">  setCount(<span class=\"function\"><span class=\"params\">count</span> =&gt;</span> count + <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这么写有时候可以解决引用问题，因为它的第一个参数是函数，函数里面永远可以拿到最新的 state。不这么写的话，可能需要用 <code>useRef</code> 来解决。</p>\n<h4 id=\"直接定义对象\"><a href=\"#直接定义对象\" class=\"headerlink\" title=\"直接定义对象\"></a>直接定义对象</h4><p>实际使用的时候，有时候也会定义一个对象：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [state, setState] = useState(&#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>比如订单数据，都放在一个对象中，这样省去定义大量的 hooks。</p>\n<h2 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h2><p>处理副作用的方法。在更新改变后触发，相当于之前的 <code>componentDidMount</code> <code>componentDidUpdate</code>，不论是第一次渲染还是更新后，都会触发。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(fn, [...])</span><br></pre></td></tr></table></figure>\n\n<p>第一个参数是执行函数，可以有返回值（返回函数），内容就是取消副作用（clean up）。</p>\n<p>第二个参数是数组，相当于仅当数组的值改变后，才会触发函数。如果传入空数组，相当于后续永远不会在改变了，可以模拟 <code>componentDidMount</code>。</p>\n<h4 id=\"常规用法-1\"><a href=\"#常规用法-1\" class=\"headerlink\" title=\"常规用法\"></a>常规用法</h4><p>一个例子就是上文 <code>setState</code> 的用法。</p>\n<p>这里给出另一个常见的例子：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [value1, setValue1] = useState(<span class=\"string\">''</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [value2, setValue2] = useState(<span class=\"string\">''</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [allowed, setAllowed] = useState(<span class=\"literal\">false</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInput1Change = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setValue1(e.target.value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInput2Change = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setValue2(e.target.value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 传入空数组，模拟 componentDidMount</span></span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.title = <span class=\"string\">'123'</span></span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 同时检测两个值</span></span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setAllowed(value1 &amp;&amp; value2)</span><br><span class=\"line\">  &#125;, [value1, value2])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;input</span><br><span class=\"line\">        value=&#123;value1&#125;</span><br><span class=\"line\">        onChange=&#123;handleInput1Change&#125;</span><br><span class=\"line\">        style=&#123; &#123; <span class=\"attr\">border</span>: <span class=\"string\">'1px solid #333'</span> &#125; &#125;</span><br><span class=\"line\">        placeholder=<span class=\"string\">\"username\"</span></span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">      &lt;br /&gt;</span><br><span class=\"line\">      &lt;input</span><br><span class=\"line\">        value=&#123;value2&#125;</span><br><span class=\"line\">        onChange=&#123;handleInput2Change&#125;</span><br><span class=\"line\">        style=&#123; &#123; <span class=\"attr\">border</span>: <span class=\"string\">'1px solid #333'</span> &#125; &#125;</span><br><span class=\"line\">        placeholder=<span class=\"string\">\"password\"</span></span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">      &lt;br /&gt;</span><br><span class=\"line\">      &lt;p&gt;allowed:&#123;allowed ? <span class=\"string\">'yes'</span> : <span class=\"string\">'no'</span>&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>useEffect</code> 实际用起来，最常用的就是传空数组，模拟 <code>componentDidMount</code>。剩下传入参数的时候，和 vue 的 <code>watch</code> 差不多。</p>\n<h4 id=\"返回函数\"><a href=\"#返回函数\" class=\"headerlink\" title=\"返回函数\"></a>返回函数</h4><p>再给出一个需要取消副作用的例子（例子的实际意义不好，仅做代码演示）：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 仅当输入内容长度均大于5位后，才考虑自动提交数据</span></span><br><span class=\"line\"><span class=\"comment\">// 并在提交前提供3秒延迟</span></span><br><span class=\"line\"><span class=\"comment\">// 这个例子就是常见的防抖</span></span><br><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  setAllowed(value1 &amp;&amp; value2)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ref = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value1.length &gt;= <span class=\"number\">5</span> &amp;&amp; value2.length &gt;= <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'启动定时器打印log'</span>)</span><br><span class=\"line\">    ref = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'log'</span>, value1, value2)</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'清理定时器'</span>)</span><br><span class=\"line\">    clearTimeout(ref)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, [value1, value2])</span><br></pre></td></tr></table></figure>\n\n<p>返回清理函数的情况，大部分是处理定时器或者发出一个 ajax 请求后，需要中断处理的情况。</p>\n<p>目前来看我在项目里面还没用到，可能是我的项目中，没有得到数据，页面不可能跳转到下一步，也就不存在需要清理副作用的情况。</p>\n<h2 id=\"useRef\"><a href=\"#useRef\" class=\"headerlink\" title=\"useRef\"></a>useRef</h2><p><code>useRef</code> 在 hooks 中，有两种用法。第一种是常规的 ref，第二种是用于穿透闭包。</p>\n<p>通过 <code>useRef</code> 可以创建一个对象，可以理解为函数内的全局变量。为了能做到实时引用，所以他必须是一个对象。具体的引用值，都存在了 <code>current</code> 属性上，这就使得它可以穿透闭包。</p>\n<h4 id=\"常规用法-2\"><a href=\"#常规用法-2\" class=\"headerlink\" title=\"常规用法\"></a>常规用法</h4><p>先说第一种常规 ref 用法，和之前写的 <code>React.createRef</code> 一致：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [isFocus, setIsFocus] = useState(<span class=\"literal\">false</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [value, setValue] = useState(<span class=\"string\">''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> inputRef = useRef(<span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInputChange = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setValue(e.target.value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInputFocus = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setIsFocus(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInputBlur = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setIsFocus(<span class=\"literal\">false</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleBtnClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    inputRef.current.focus()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;input</span><br><span class=\"line\">        value=&#123;value&#125;</span><br><span class=\"line\">        onChange=&#123;handleInputChange&#125;</span><br><span class=\"line\">        onFocus=&#123;handleInputFocus&#125;</span><br><span class=\"line\">        onBlur=&#123;handleInputBlur&#125;</span><br><span class=\"line\">        ref=&#123;inputRef&#125;</span><br><span class=\"line\">        style=&#123; &#123; <span class=\"attr\">border</span>: <span class=\"string\">'1px solid #333'</span> &#125; &#125;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;handleBtnClick&#125; style=&#123; &#123; <span class=\"attr\">border</span>: <span class=\"string\">'1px solid #333'</span> &#125; &#125;&gt;</span><br><span class=\"line\">        click <span class=\"keyword\">for</span> focus</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;br /</span>&gt;</span><br><span class=\"line\">      &lt;p&gt;focus:&#123;isFocus ? <span class=\"string\">'yes'</span> : <span class=\"string\">'no'</span>&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他用法\"><a href=\"#其他用法\" class=\"headerlink\" title=\"其他用法\"></a>其他用法</h4><p>来说 ref 的第二种用法。</p>\n<p>首先看一个 demo：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleAddClick = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setCount(count + <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleAlertClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      alert(count)</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;span&gt;counter:&#123;count&#125;&lt;<span class=\"regexp\">/span&gt;&amp;nbsp;&amp;nbsp;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;handleAddClick&#125; style=&#123; &#123; border: '1px solid #333' &#125; &#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        +1</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>button&gt;</span><br><span class=\"line\">      &lt;br /&gt;</span><br><span class=\"line\">      &lt;br /&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;handleAlertClick&#125; style=&#123; &#123; <span class=\"attr\">border</span>: <span class=\"string\">'1px solid #333'</span> &#125; &#125;&gt;</span><br><span class=\"line\">        alert</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>操作结果为：</p>\n<ul>\n<li>点击 +1 按钮，增加计数器，增加到 3</li>\n<li>点击 alert，3秒后显示计数器的值</li>\n<li>点击 +1 按钮，增加计数器，增加到 5</li>\n<li>3秒到了，此时提示框显示了 3</li>\n</ul>\n<p>或许和你想的不一样，为什么不是显示 5？</p>\n<p>简言之，再点击 alert 按钮时候，此时计数器值是 3。<strong>hooks 会缓存此状态！</strong>所以3秒过后，就是提示 3 了。</p>\n<p>解决方法很简单，如果不是 react 项目，那么我们肯定用一个对象存储数据，这样 3 秒后提示内容，读取对象中的属性就好了。因为对象是传址（非传值）的。</p>\n<p>react 亦如此。我们使用 useRef 来实现，其中的值保存在 <code>current</code> 中。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> valueRef = useRef()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleAddClick = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newVal = count + <span class=\"number\">1</span></span><br><span class=\"line\">    setCount(newVal)</span><br><span class=\"line\">    valueRef.current = newVal</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleAlertClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      alert(valueRef.current)</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;span&gt;counter:&#123;count&#125;&lt;<span class=\"regexp\">/span&gt;&amp;nbsp;&amp;nbsp;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;handleAddClick&#125; style=&#123; &#123; border: '1px solid #333' &#125; &#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        +1</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>button&gt;</span><br><span class=\"line\">      &lt;br /&gt;</span><br><span class=\"line\">      &lt;br /&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;handleAlertClick&#125; style=&#123; &#123; <span class=\"attr\">border</span>: <span class=\"string\">'1px solid #333'</span> &#125; &#125;&gt;</span><br><span class=\"line\">        alert</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"useContext\"><a href=\"#useContext\" class=\"headerlink\" title=\"useContext\"></a>useContext</h2><p><code>useContext</code> 主要解决的是组件数据透传。比如父组件要定义一些数据，但是最终要在很深层次的子组件中使用，这时候用 <code>useContext</code> 非常方便。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> DataContext = React.createContext()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;DataContext.Consumer&gt;</span><br><span class=\"line\">      &#123;value =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">          &lt;div&gt;</span><br><span class=\"line\">            &lt;p&gt;name: &#123;value.name&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;p&gt;age: &#123;value.age&#125;&lt;/</span>p&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        )</span></span><br><span class=\"line\"><span class=\"regexp\">      &#125;&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>DataContext.Consumer&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [data, setData] = useState(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'tim'</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;DataContext.Provider value=&#123;data&#125;&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;Child /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>DataContext.Provider&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>唯一要说明的就是，<code>Provider</code> 的传值属性必须是 <code>value</code>。所以要么传一个值，要么传一个对象。</p>\n<h2 id=\"useReducer\"><a href=\"#useReducer\" class=\"headerlink\" title=\"useReducer\"></a>useReducer</h2><p><code>useReducer</code> 使用起来非常简单，不管是否接触过 Redux，都能容易上手。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> initialState = &#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reducer</span>(<span class=\"params\">state, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'increment'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.count + <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'incrementAny'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.count + action.count &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'decrement'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.count - <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.count &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Counter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [state, dispatch] = useReducer(reducer, initialState)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      Count: &#123;state.count&#125;</span><br><span class=\"line\">      &lt;br /&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'increment'</span> &#125;)&#125;&gt;+<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'decrement'</span> &#125;)&#125;&gt;-<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'incrementAny'</span>, <span class=\"attr\">count</span>: <span class=\"number\">5</span> &#125;)&#125;&gt;</span><br><span class=\"line\">        +<span class=\"number\">5</span></span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际使用中，当多个组件公用一个状态时候，会用得到。</p>\n<h2 id=\"useCallback-useMemo\"><a href=\"#useCallback-useMemo\" class=\"headerlink\" title=\"useCallback / useMemo\"></a>useCallback / useMemo</h2><p>使用 useCallback / useMemo 来缓存函数，提升执行效率。</p>\n<h4 id=\"常规用法-3\"><a href=\"#常规用法-3\" class=\"headerlink\" title=\"常规用法\"></a>常规用法</h4><p>下文例子中，输入数字，进行加法计算。输入空格，触发内容改变，但是数值没有变化。</p>\n<p>不做处理的情况下，每次输入，均会触发加法计算。</p>\n<p>使用了，<code>useMemo</code> 后，相同的值，只会计算一次。后续不会触发加法计算。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Counter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [val1, setVal1] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [val2, setVal2] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'add'</span>, a, b)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> memoized = useCallback(add(val1, val2), [val1, val2])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInput1Change = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> val = <span class=\"built_in\">Number</span>(e.target.value)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'input1:'</span>, val)</span><br><span class=\"line\">    setVal1(val)</span><br><span class=\"line\">    memoized()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInput2Change = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> val = <span class=\"built_in\">Number</span>(e.target.value)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'input2:'</span>, val)</span><br><span class=\"line\">    setVal2(val)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;input onChange=&#123;handleInput1Change&#125; value=&#123;val1&#125; /&gt;</span><br><span class=\"line\">      &lt;input onChange=&#123;handleInput2Change&#125; value=&#123;val2&#125; /&gt;</span><br><span class=\"line\">      &lt;p&gt;sum:&#123;memoized&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果要用 <code>useCallback</code>，上文需要调整一点就可以了。官方给出了两者关系，如下：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useCallback(fn, deps) </span><br><span class=\"line\">useMemo(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> fn, deps)</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，<code>useMemo</code> 的第一个参数是个函数，<strong>并且需要进行返回</strong>！</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// const memoized = useCallback(add(val1, val2), [val1, val2])</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> memoized = useMemo(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> add(val1, val2)</span><br><span class=\"line\">&#125;, [val1, val2])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>根据我这一段时间的使用，基本上没遇到太多坑，也就是参考上文的这些处理方法基本都可解决。</p>\n<p>唯独要注意的是，hooks 里面不要使用 <code>setInterval</code>，一言难尽，建议看 react 原作者文章（<a href=\"https://overreacted.io/zh-hans/making-seti@yukapril.comnterval-declarative-with-react-hooks\" target=\"_blank\" rel=\"noopener\">见此</a>），解释的很清晰，也有直接用的 <code>useInterval</code> 方案。</p>\n","site":{"data":{}},"excerpt":"<p>学习使用 react-hooks 语法。</p>\n<blockquote>\n<p>Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.</p>\n</blockquote>","more":"<h2 id=\"现有-hooks\"><a href=\"#现有-hooks\" class=\"headerlink\" title=\"现有 hooks\"></a>现有 hooks</h2><p>官方分了类，一类基础，一类扩展。其实常用的不多，主要还是 <code>useState</code>、<code>useEffect</code>、<code>useRef</code>、<code>useCallback</code>(<code>useMemo</code>和它差不多)。</p>\n<p><strong>Basic Hooks</strong></p>\n<ul>\n<li>useState</li>\n<li>useEffect</li>\n<li>useContext</li>\n</ul>\n<p><strong>Additional Hooks</strong></p>\n<ul>\n<li>useReducer</li>\n<li>useCallback</li>\n<li>useMemo</li>\n<li>useRef</li>\n<li>useImperativeHandle</li>\n<li>useLayoutEffect</li>\n<li>useDebugValue</li>\n</ul>\n<h2 id=\"使用-hooks-的规则\"><a href=\"#使用-hooks-的规则\" class=\"headerlink\" title=\"使用 hooks 的规则\"></a>使用 hooks 的规则</h2><h4 id=\"首先是必须写到最顶层\"><a href=\"#首先是必须写到最顶层\" class=\"headerlink\" title=\"首先是必须写到最顶层\"></a>首先是必须写到最顶层</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Counter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这样写是可以的，hooks 每次都必定执行到</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [timer, setTimer] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"comment\">// 这样是不行的，因为 hooks 有的时候可能不会被执行</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(condition) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [data, setData] = useState([])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"只能在函数组件中使用\"><a href=\"#只能在函数组件中使用\" class=\"headerlink\" title=\"只能在函数组件中使用\"></a>只能在函数组件中使用</h4><p>简单地说，就是要在 react 组件中使用。不能你在 react 项目中，随便写个公共方法就用 hooks，除非这个 hooks 最终用到了组件中。最终结论就是 hooks 最终必须应用到 react 组件中。</p>\n<p>此外，传统的使用类方式的组件不可以使用 hooks，否则提示 Invalid Hook Call。</p>\n<h2 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h2><h4 id=\"常规用法\"><a href=\"#常规用法\" class=\"headerlink\" title=\"常规用法\"></a>常规用法</h4><p>用法比较简单，直接上 demo。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Counter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setCount(count + <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;handleClick&#125;&gt;Click me&lt;/</span>button&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第二参数\"><a href=\"#第二参数\" class=\"headerlink\" title=\"第二参数\"></a>第二参数</h4><p>要注意的是，<code>setState</code> (即上文的 <code>setCount</code>)是没有第二个参数的。</p>\n<p>如果确实需要像以前一样的话，那么需要用到 <code>useEffect</code> 方法实现，这里先给出demo：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Counter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setCount(count + <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.title = count</span><br><span class=\"line\">  &#125;, [count])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;handleClick&#125;&gt;Click me&lt;/</span>button&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"传入函数\"><a href=\"#传入函数\" class=\"headerlink\" title=\"传入函数\"></a>传入函数</h4><p>虽然第二个参数没有了，但是第一个参数还可以是一个函数：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setState(<span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>比如上文的代码，可以调整为：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// setCount(count + 1)</span></span><br><span class=\"line\">  setCount(<span class=\"function\"><span class=\"params\">count</span> =&gt;</span> count + <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这么写有时候可以解决引用问题，因为它的第一个参数是函数，函数里面永远可以拿到最新的 state。不这么写的话，可能需要用 <code>useRef</code> 来解决。</p>\n<h4 id=\"直接定义对象\"><a href=\"#直接定义对象\" class=\"headerlink\" title=\"直接定义对象\"></a>直接定义对象</h4><p>实际使用的时候，有时候也会定义一个对象：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [state, setState] = useState(&#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>比如订单数据，都放在一个对象中，这样省去定义大量的 hooks。</p>\n<h2 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h2><p>处理副作用的方法。在更新改变后触发，相当于之前的 <code>componentDidMount</code> <code>componentDidUpdate</code>，不论是第一次渲染还是更新后，都会触发。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(fn, [...])</span><br></pre></td></tr></table></figure>\n\n<p>第一个参数是执行函数，可以有返回值（返回函数），内容就是取消副作用（clean up）。</p>\n<p>第二个参数是数组，相当于仅当数组的值改变后，才会触发函数。如果传入空数组，相当于后续永远不会在改变了，可以模拟 <code>componentDidMount</code>。</p>\n<h4 id=\"常规用法-1\"><a href=\"#常规用法-1\" class=\"headerlink\" title=\"常规用法\"></a>常规用法</h4><p>一个例子就是上文 <code>setState</code> 的用法。</p>\n<p>这里给出另一个常见的例子：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [value1, setValue1] = useState(<span class=\"string\">''</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [value2, setValue2] = useState(<span class=\"string\">''</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [allowed, setAllowed] = useState(<span class=\"literal\">false</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInput1Change = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setValue1(e.target.value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInput2Change = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setValue2(e.target.value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 传入空数组，模拟 componentDidMount</span></span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.title = <span class=\"string\">'123'</span></span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 同时检测两个值</span></span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setAllowed(value1 &amp;&amp; value2)</span><br><span class=\"line\">  &#125;, [value1, value2])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;input</span><br><span class=\"line\">        value=&#123;value1&#125;</span><br><span class=\"line\">        onChange=&#123;handleInput1Change&#125;</span><br><span class=\"line\">        style=&#123; &#123; <span class=\"attr\">border</span>: <span class=\"string\">'1px solid #333'</span> &#125; &#125;</span><br><span class=\"line\">        placeholder=<span class=\"string\">\"username\"</span></span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">      &lt;br /&gt;</span><br><span class=\"line\">      &lt;input</span><br><span class=\"line\">        value=&#123;value2&#125;</span><br><span class=\"line\">        onChange=&#123;handleInput2Change&#125;</span><br><span class=\"line\">        style=&#123; &#123; <span class=\"attr\">border</span>: <span class=\"string\">'1px solid #333'</span> &#125; &#125;</span><br><span class=\"line\">        placeholder=<span class=\"string\">\"password\"</span></span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">      &lt;br /&gt;</span><br><span class=\"line\">      &lt;p&gt;allowed:&#123;allowed ? <span class=\"string\">'yes'</span> : <span class=\"string\">'no'</span>&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>useEffect</code> 实际用起来，最常用的就是传空数组，模拟 <code>componentDidMount</code>。剩下传入参数的时候，和 vue 的 <code>watch</code> 差不多。</p>\n<h4 id=\"返回函数\"><a href=\"#返回函数\" class=\"headerlink\" title=\"返回函数\"></a>返回函数</h4><p>再给出一个需要取消副作用的例子（例子的实际意义不好，仅做代码演示）：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 仅当输入内容长度均大于5位后，才考虑自动提交数据</span></span><br><span class=\"line\"><span class=\"comment\">// 并在提交前提供3秒延迟</span></span><br><span class=\"line\"><span class=\"comment\">// 这个例子就是常见的防抖</span></span><br><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  setAllowed(value1 &amp;&amp; value2)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ref = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value1.length &gt;= <span class=\"number\">5</span> &amp;&amp; value2.length &gt;= <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'启动定时器打印log'</span>)</span><br><span class=\"line\">    ref = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'log'</span>, value1, value2)</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'清理定时器'</span>)</span><br><span class=\"line\">    clearTimeout(ref)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, [value1, value2])</span><br></pre></td></tr></table></figure>\n\n<p>返回清理函数的情况，大部分是处理定时器或者发出一个 ajax 请求后，需要中断处理的情况。</p>\n<p>目前来看我在项目里面还没用到，可能是我的项目中，没有得到数据，页面不可能跳转到下一步，也就不存在需要清理副作用的情况。</p>\n<h2 id=\"useRef\"><a href=\"#useRef\" class=\"headerlink\" title=\"useRef\"></a>useRef</h2><p><code>useRef</code> 在 hooks 中，有两种用法。第一种是常规的 ref，第二种是用于穿透闭包。</p>\n<p>通过 <code>useRef</code> 可以创建一个对象，可以理解为函数内的全局变量。为了能做到实时引用，所以他必须是一个对象。具体的引用值，都存在了 <code>current</code> 属性上，这就使得它可以穿透闭包。</p>\n<h4 id=\"常规用法-2\"><a href=\"#常规用法-2\" class=\"headerlink\" title=\"常规用法\"></a>常规用法</h4><p>先说第一种常规 ref 用法，和之前写的 <code>React.createRef</code> 一致：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [isFocus, setIsFocus] = useState(<span class=\"literal\">false</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [value, setValue] = useState(<span class=\"string\">''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> inputRef = useRef(<span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInputChange = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setValue(e.target.value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInputFocus = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setIsFocus(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInputBlur = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setIsFocus(<span class=\"literal\">false</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleBtnClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    inputRef.current.focus()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;input</span><br><span class=\"line\">        value=&#123;value&#125;</span><br><span class=\"line\">        onChange=&#123;handleInputChange&#125;</span><br><span class=\"line\">        onFocus=&#123;handleInputFocus&#125;</span><br><span class=\"line\">        onBlur=&#123;handleInputBlur&#125;</span><br><span class=\"line\">        ref=&#123;inputRef&#125;</span><br><span class=\"line\">        style=&#123; &#123; <span class=\"attr\">border</span>: <span class=\"string\">'1px solid #333'</span> &#125; &#125;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;handleBtnClick&#125; style=&#123; &#123; <span class=\"attr\">border</span>: <span class=\"string\">'1px solid #333'</span> &#125; &#125;&gt;</span><br><span class=\"line\">        click <span class=\"keyword\">for</span> focus</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;br /</span>&gt;</span><br><span class=\"line\">      &lt;p&gt;focus:&#123;isFocus ? <span class=\"string\">'yes'</span> : <span class=\"string\">'no'</span>&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他用法\"><a href=\"#其他用法\" class=\"headerlink\" title=\"其他用法\"></a>其他用法</h4><p>来说 ref 的第二种用法。</p>\n<p>首先看一个 demo：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleAddClick = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setCount(count + <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleAlertClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      alert(count)</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;span&gt;counter:&#123;count&#125;&lt;<span class=\"regexp\">/span&gt;&amp;nbsp;&amp;nbsp;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;handleAddClick&#125; style=&#123; &#123; border: '1px solid #333' &#125; &#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        +1</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>button&gt;</span><br><span class=\"line\">      &lt;br /&gt;</span><br><span class=\"line\">      &lt;br /&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;handleAlertClick&#125; style=&#123; &#123; <span class=\"attr\">border</span>: <span class=\"string\">'1px solid #333'</span> &#125; &#125;&gt;</span><br><span class=\"line\">        alert</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>操作结果为：</p>\n<ul>\n<li>点击 +1 按钮，增加计数器，增加到 3</li>\n<li>点击 alert，3秒后显示计数器的值</li>\n<li>点击 +1 按钮，增加计数器，增加到 5</li>\n<li>3秒到了，此时提示框显示了 3</li>\n</ul>\n<p>或许和你想的不一样，为什么不是显示 5？</p>\n<p>简言之，再点击 alert 按钮时候，此时计数器值是 3。<strong>hooks 会缓存此状态！</strong>所以3秒过后，就是提示 3 了。</p>\n<p>解决方法很简单，如果不是 react 项目，那么我们肯定用一个对象存储数据，这样 3 秒后提示内容，读取对象中的属性就好了。因为对象是传址（非传值）的。</p>\n<p>react 亦如此。我们使用 useRef 来实现，其中的值保存在 <code>current</code> 中。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> valueRef = useRef()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleAddClick = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newVal = count + <span class=\"number\">1</span></span><br><span class=\"line\">    setCount(newVal)</span><br><span class=\"line\">    valueRef.current = newVal</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleAlertClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      alert(valueRef.current)</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;span&gt;counter:&#123;count&#125;&lt;<span class=\"regexp\">/span&gt;&amp;nbsp;&amp;nbsp;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;handleAddClick&#125; style=&#123; &#123; border: '1px solid #333' &#125; &#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        +1</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>button&gt;</span><br><span class=\"line\">      &lt;br /&gt;</span><br><span class=\"line\">      &lt;br /&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;handleAlertClick&#125; style=&#123; &#123; <span class=\"attr\">border</span>: <span class=\"string\">'1px solid #333'</span> &#125; &#125;&gt;</span><br><span class=\"line\">        alert</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"useContext\"><a href=\"#useContext\" class=\"headerlink\" title=\"useContext\"></a>useContext</h2><p><code>useContext</code> 主要解决的是组件数据透传。比如父组件要定义一些数据，但是最终要在很深层次的子组件中使用，这时候用 <code>useContext</code> 非常方便。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> DataContext = React.createContext()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;DataContext.Consumer&gt;</span><br><span class=\"line\">      &#123;value =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">          &lt;div&gt;</span><br><span class=\"line\">            &lt;p&gt;name: &#123;value.name&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;p&gt;age: &#123;value.age&#125;&lt;/</span>p&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        )</span></span><br><span class=\"line\"><span class=\"regexp\">      &#125;&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>DataContext.Consumer&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [data, setData] = useState(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'tim'</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;DataContext.Provider value=&#123;data&#125;&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;Child /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>DataContext.Provider&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>唯一要说明的就是，<code>Provider</code> 的传值属性必须是 <code>value</code>。所以要么传一个值，要么传一个对象。</p>\n<h2 id=\"useReducer\"><a href=\"#useReducer\" class=\"headerlink\" title=\"useReducer\"></a>useReducer</h2><p><code>useReducer</code> 使用起来非常简单，不管是否接触过 Redux，都能容易上手。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> initialState = &#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reducer</span>(<span class=\"params\">state, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'increment'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.count + <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'incrementAny'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.count + action.count &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'decrement'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.count - <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.count &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Counter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [state, dispatch] = useReducer(reducer, initialState)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      Count: &#123;state.count&#125;</span><br><span class=\"line\">      &lt;br /&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'increment'</span> &#125;)&#125;&gt;+<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'decrement'</span> &#125;)&#125;&gt;-<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'incrementAny'</span>, <span class=\"attr\">count</span>: <span class=\"number\">5</span> &#125;)&#125;&gt;</span><br><span class=\"line\">        +<span class=\"number\">5</span></span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际使用中，当多个组件公用一个状态时候，会用得到。</p>\n<h2 id=\"useCallback-useMemo\"><a href=\"#useCallback-useMemo\" class=\"headerlink\" title=\"useCallback / useMemo\"></a>useCallback / useMemo</h2><p>使用 useCallback / useMemo 来缓存函数，提升执行效率。</p>\n<h4 id=\"常规用法-3\"><a href=\"#常规用法-3\" class=\"headerlink\" title=\"常规用法\"></a>常规用法</h4><p>下文例子中，输入数字，进行加法计算。输入空格，触发内容改变，但是数值没有变化。</p>\n<p>不做处理的情况下，每次输入，均会触发加法计算。</p>\n<p>使用了，<code>useMemo</code> 后，相同的值，只会计算一次。后续不会触发加法计算。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Counter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [val1, setVal1] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [val2, setVal2] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'add'</span>, a, b)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> memoized = useCallback(add(val1, val2), [val1, val2])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInput1Change = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> val = <span class=\"built_in\">Number</span>(e.target.value)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'input1:'</span>, val)</span><br><span class=\"line\">    setVal1(val)</span><br><span class=\"line\">    memoized()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInput2Change = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> val = <span class=\"built_in\">Number</span>(e.target.value)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'input2:'</span>, val)</span><br><span class=\"line\">    setVal2(val)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;input onChange=&#123;handleInput1Change&#125; value=&#123;val1&#125; /&gt;</span><br><span class=\"line\">      &lt;input onChange=&#123;handleInput2Change&#125; value=&#123;val2&#125; /&gt;</span><br><span class=\"line\">      &lt;p&gt;sum:&#123;memoized&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果要用 <code>useCallback</code>，上文需要调整一点就可以了。官方给出了两者关系，如下：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useCallback(fn, deps) </span><br><span class=\"line\">useMemo(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> fn, deps)</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，<code>useMemo</code> 的第一个参数是个函数，<strong>并且需要进行返回</strong>！</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// const memoized = useCallback(add(val1, val2), [val1, val2])</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> memoized = useMemo(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> add(val1, val2)</span><br><span class=\"line\">&#125;, [val1, val2])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>根据我这一段时间的使用，基本上没遇到太多坑，也就是参考上文的这些处理方法基本都可解决。</p>\n<p>唯独要注意的是，hooks 里面不要使用 <code>setInterval</code>，一言难尽，建议看 react 原作者文章（<a href=\"https://overreacted.io/zh-hans/making-seti@yukapril.comnterval-declarative-with-react-hooks\" target=\"_blank\" rel=\"noopener\">见此</a>），解释的很清晰，也有直接用的 <code>useInterval</code> 方案。</p>"},{"layout":"post","title":"新 Hexo 博客","date":"2019-07-23T21:50:00.000Z","_content":"\n现有的博客还是 2016 年基于 jekyll 的博客，当时自己做的主题，非常简洁。虽然算不上精品，但是由于是自己一行一行写的主题，质量和想要的功能需求比较好。\n\n今年计划应该换换主题，换换面貌了。考虑再三，还是 Hexo 平台比较合适。\n\n<!-- more -->\n\n今年计划主题更换，考虑过再次自研，也考虑找现有的主题。不过大部分主题虽然漂亮，但都不够简洁明朗。\n\n由于我没有把博客直接托管到 github 等平台，结果就是每次需要本地编译好 html 再上传。考虑到只有一台 Mac 笔记本装了 Ruby，平时想写博客的话，一般都是用笔记类应用先写好，再到 Mac 上进行整理发表。\n\n就这样，今年计划切换到 Hexo 上，一是前端的东西，我想对熟悉一些，而且也可以从 jekyll 基本无痛的切换过去。二是 Hexo 的主题比较多，挑选起来也容易一些。\n\n不过挑来挑去，都不太满意，要么太简陋，要么动画特效太多，不够简洁。\n\n最终选择了默认主题，自己稍微修改了一点点。\n\n![img](https://cdn0.yukapril.com/blog/2019-07-23-hexo-blog-1.png-wm.black)\n\n![img](https://cdn0.yukapril.com/blog/2019-07-23-hexo-blog-2.png-wm.black)\n\n主要修改点：\n\n* 头部图片去掉了，用图片多费流量，打开速度还慢\n* 右侧边栏区块颜色样式调整和文章区块一致，原来的阴影太丑了\n* 文章正文 md 语法，把引用效果调整了下，之前的居中效果太不明显，强行左边加了个边，不过效果有点违和\n* 文章分享，增加了微博，去掉了 Google Plus\n* 底部加入了主题信息，以及链接和备案\n\n就这些。\n\n--END--","source":"_posts/2019/2019-07-23-hexo-blog.md","raw":"---\nlayout: post\ntitle: 新 Hexo 博客\ndate: 2019-07-23 21:50:00 GMT+0000\ncategories: [随笔]\ntags:  [hexo]\n---\n\n现有的博客还是 2016 年基于 jekyll 的博客，当时自己做的主题，非常简洁。虽然算不上精品，但是由于是自己一行一行写的主题，质量和想要的功能需求比较好。\n\n今年计划应该换换主题，换换面貌了。考虑再三，还是 Hexo 平台比较合适。\n\n<!-- more -->\n\n今年计划主题更换，考虑过再次自研，也考虑找现有的主题。不过大部分主题虽然漂亮，但都不够简洁明朗。\n\n由于我没有把博客直接托管到 github 等平台，结果就是每次需要本地编译好 html 再上传。考虑到只有一台 Mac 笔记本装了 Ruby，平时想写博客的话，一般都是用笔记类应用先写好，再到 Mac 上进行整理发表。\n\n就这样，今年计划切换到 Hexo 上，一是前端的东西，我想对熟悉一些，而且也可以从 jekyll 基本无痛的切换过去。二是 Hexo 的主题比较多，挑选起来也容易一些。\n\n不过挑来挑去，都不太满意，要么太简陋，要么动画特效太多，不够简洁。\n\n最终选择了默认主题，自己稍微修改了一点点。\n\n![img](https://cdn0.yukapril.com/blog/2019-07-23-hexo-blog-1.png-wm.black)\n\n![img](https://cdn0.yukapril.com/blog/2019-07-23-hexo-blog-2.png-wm.black)\n\n主要修改点：\n\n* 头部图片去掉了，用图片多费流量，打开速度还慢\n* 右侧边栏区块颜色样式调整和文章区块一致，原来的阴影太丑了\n* 文章正文 md 语法，把引用效果调整了下，之前的居中效果太不明显，强行左边加了个边，不过效果有点违和\n* 文章分享，增加了微博，去掉了 Google Plus\n* 底部加入了主题信息，以及链接和备案\n\n就这些。\n\n--END--","slug":"2019-2019-07-23-hexo-blog","published":1,"updated":"2019-07-23T14:11:08.588Z","_id":"cjyfvm8f00004fp1d8r7ab7pf","comments":1,"photos":[],"link":"","content":"<p>现有的博客还是 2016 年基于 jekyll 的博客，当时自己做的主题，非常简洁。虽然算不上精品，但是由于是自己一行一行写的主题，质量和想要的功能需求比较好。</p>\n<p>今年计划应该换换主题，换换面貌了。考虑再三，还是 Hexo 平台比较合适。</p>\n<a id=\"more\"></a>\n\n<p>今年计划主题更换，考虑过再次自研，也考虑找现有的主题。不过大部分主题虽然漂亮，但都不够简洁明朗。</p>\n<p>由于我没有把博客直接托管到 github 等平台，结果就是每次需要本地编译好 html 再上传。考虑到只有一台 Mac 笔记本装了 Ruby，平时想写博客的话，一般都是用笔记类应用先写好，再到 Mac 上进行整理发表。</p>\n<p>就这样，今年计划切换到 Hexo 上，一是前端的东西，我想对熟悉一些，而且也可以从 jekyll 基本无痛的切换过去。二是 Hexo 的主题比较多，挑选起来也容易一些。</p>\n<p>不过挑来挑去，都不太满意，要么太简陋，要么动画特效太多，不够简洁。</p>\n<p>最终选择了默认主题，自己稍微修改了一点点。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-07-23-hexo-blog-1.png-wm.black\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-07-23-hexo-blog-2.png-wm.black\" alt=\"img\"></p>\n<p>主要修改点：</p>\n<ul>\n<li>头部图片去掉了，用图片多费流量，打开速度还慢</li>\n<li>右侧边栏区块颜色样式调整和文章区块一致，原来的阴影太丑了</li>\n<li>文章正文 md 语法，把引用效果调整了下，之前的居中效果太不明显，强行左边加了个边，不过效果有点违和</li>\n<li>文章分享，增加了微博，去掉了 Google Plus</li>\n<li>底部加入了主题信息，以及链接和备案</li>\n</ul>\n<p>就这些。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>现有的博客还是 2016 年基于 jekyll 的博客，当时自己做的主题，非常简洁。虽然算不上精品，但是由于是自己一行一行写的主题，质量和想要的功能需求比较好。</p>\n<p>今年计划应该换换主题，换换面貌了。考虑再三，还是 Hexo 平台比较合适。</p>","more":"<p>今年计划主题更换，考虑过再次自研，也考虑找现有的主题。不过大部分主题虽然漂亮，但都不够简洁明朗。</p>\n<p>由于我没有把博客直接托管到 github 等平台，结果就是每次需要本地编译好 html 再上传。考虑到只有一台 Mac 笔记本装了 Ruby，平时想写博客的话，一般都是用笔记类应用先写好，再到 Mac 上进行整理发表。</p>\n<p>就这样，今年计划切换到 Hexo 上，一是前端的东西，我想对熟悉一些，而且也可以从 jekyll 基本无痛的切换过去。二是 Hexo 的主题比较多，挑选起来也容易一些。</p>\n<p>不过挑来挑去，都不太满意，要么太简陋，要么动画特效太多，不够简洁。</p>\n<p>最终选择了默认主题，自己稍微修改了一点点。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-07-23-hexo-blog-1.png-wm.black\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-07-23-hexo-blog-2.png-wm.black\" alt=\"img\"></p>\n<p>主要修改点：</p>\n<ul>\n<li>头部图片去掉了，用图片多费流量，打开速度还慢</li>\n<li>右侧边栏区块颜色样式调整和文章区块一致，原来的阴影太丑了</li>\n<li>文章正文 md 语法，把引用效果调整了下，之前的居中效果太不明显，强行左边加了个边，不过效果有点违和</li>\n<li>文章分享，增加了微博，去掉了 Google Plus</li>\n<li>底部加入了主题信息，以及链接和备案</li>\n</ul>\n<p>就这些。</p>\n<p>–END–</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjy8y72pr0000s21dtqi1uct8","category_id":"cjy8y72pz0002s21dlx50luz1","_id":"cjy8y72q8000cs21ds9xo5t3r"},{"post_id":"cjy8y72q6000as21dkqx2qywp","category_id":"cjy8y72pz0002s21dlx50luz1","_id":"cjy8y72qd000js21dfj2brjcl"},{"post_id":"cjy8y72px0001s21d1e8cfnai","category_id":"cjy8y72q50007s21dhdfif9z2","_id":"cjy8y72qg000ns21d98isjq5s"},{"post_id":"cjy8y72q10004s21dqghsk21l","category_id":"cjy8y72q50007s21dhdfif9z2","_id":"cjy8y72qi000qs21dpjxkgk1k"},{"post_id":"cjy8y72qf000ms21d9vatvs7s","category_id":"cjy8y72pz0002s21dlx50luz1","_id":"cjy8y72ql000ws21d91h1uie0"},{"post_id":"cjy8y72q20005s21det4cxvm5","category_id":"cjy8y72q50007s21dhdfif9z2","_id":"cjy8y72qn0010s21dursegmk2"},{"post_id":"cjy8y72qh000os21d1qpj9prj","category_id":"cjy8y72q50007s21dhdfif9z2","_id":"cjy8y72qp0013s21dachub50e"},{"post_id":"cjy8y72q40006s21d9sb8ynll","category_id":"cjy8y72q50007s21dhdfif9z2","_id":"cjy8y72qr0016s21dog3jnq7k"},{"post_id":"cjy8y72qk000vs21d8uxzm84k","category_id":"cjy8y72q50007s21dhdfif9z2","_id":"cjy8y72qt0019s21d8c565tkk"},{"post_id":"cjy8y72q7000bs21d3j4oackp","category_id":"cjy8y72qm000xs21dmt1sz049","_id":"cjy8y72qv001ds21ds6ish9d3"},{"post_id":"cjy8y72qo0012s21doqiuz1mt","category_id":"cjy8y72q50007s21dhdfif9z2","_id":"cjy8y72qx001hs21d3rynkeia"},{"post_id":"cjy8y72qa000gs21db80aefuz","category_id":"cjy8y72qp0014s21d1xvoklw9","_id":"cjy8y72qz001js21d4dnzzqom"},{"post_id":"cjy8y72qc000is21d8l86joez","category_id":"cjy8y72qu001bs21dizcss7b9","_id":"cjy8y72r2001ps21dompc7fbk"},{"post_id":"cjy8y72qz001ms21dkmv0tu7n","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72ra001ws21dvlsyl2aj"},{"post_id":"cjy8y72qj000ts21dw4kemk5o","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72rd001zs21dsaid0vaw"},{"post_id":"cjy8y72r7001ss21dz6r7q6ff","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72rf0022s21d6np5khy7"},{"post_id":"cjy8y72qm000zs21deuhkhb7w","category_id":"cjy8y72r5001qs21dt8hnfg43","_id":"cjy8y72rg0025s21d0lxtpfkw"},{"post_id":"cjy8y72ra001vs21dj0wb4367","category_id":"cjy8y72qp0014s21d1xvoklw9","_id":"cjy8y72ri0028s21dfhjt20vk"},{"post_id":"cjy8y72rc001ys21dzehjgpd5","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72rj002bs21d9a3qwdxe"},{"post_id":"cjy8y72qp0015s21dlx2nh6q9","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72rk002es21dp08ts6vi"},{"post_id":"cjy8y72re0021s21db6uye3dd","category_id":"cjy8y72q50007s21dhdfif9z2","_id":"cjy8y72rm002is21ds9h8xjzj"},{"post_id":"cjy8y72rg0024s21d9ssbybzi","category_id":"cjy8y72q50007s21dhdfif9z2","_id":"cjy8y72ro002ls21dj6rumgvj"},{"post_id":"cjy8y72qs0018s21d8uktswsb","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72rq002qs21ddx855gkc"},{"post_id":"cjy8y72rh0027s21d9hv030wz","category_id":"cjy8y72q50007s21dhdfif9z2","_id":"cjy8y72rr002ss21d97op2pt1"},{"post_id":"cjy8y72rj002as21dw54leygs","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72rt002ws21d11wbdhkx"},{"post_id":"cjy8y72qu001cs21dkri3sb2o","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72ru002zs21dupegh5h7"},{"post_id":"cjy8y72rm002hs21d7wf1rhe6","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72rv0034s21dhqllr1s1"},{"post_id":"cjy8y72qw001gs21dway4fqq5","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72ry0036s21dfps9f47z"},{"post_id":"cjy8y72rp002ps21d5gqqzbfv","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72s1003as21dkfycmz28"},{"post_id":"cjy8y72qy001is21d0j0qx5zi","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72s4003cs21dhkm4ol1x"},{"post_id":"cjy8y72rq002rs21dbowzoxhp","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72s8003es21deriyf2vq"},{"post_id":"cjy8y72rs002vs21d8apvyt0h","category_id":"cjy8y72rs002us21drbt0r5fi","_id":"cjy8y72sb003hs21dlh6n2h5y"},{"post_id":"cjy8y72r1001os21d7ggrjtrc","category_id":"cjy8y72rs002us21drbt0r5fi","_id":"cjy8y72sc003js21dpjzk5cdn"},{"post_id":"cjy8y72rt002ys21dsm3ja6y0","category_id":"cjy8y72rs002us21drbt0r5fi","_id":"cjy8y72sd003ms21dvjtcxir0"},{"post_id":"cjy8y72rv0033s21dd3i4yg0h","category_id":"cjy8y72rs002us21drbt0r5fi","_id":"cjy8y72se003os21d38wzzqtq"},{"post_id":"cjy8y72rk002ds21d8bv6z8ur","category_id":"cjy8y72rs002us21drbt0r5fi","_id":"cjy8y72sf003rs21dh86e3iiw"},{"post_id":"cjy8y72rx0035s21d3odn6x5l","category_id":"cjy8y72rs002us21drbt0r5fi","_id":"cjy8y72sh003us21dlmq9xb8r"},{"post_id":"cjy8y72s00039s21dnskgsw50","category_id":"cjy8y72rs002us21drbt0r5fi","_id":"cjy8y72si003ys21dfupwwu84"},{"post_id":"cjy8y72rn002ks21dbmhvavvm","category_id":"cjy8y72rs002us21drbt0r5fi","_id":"cjy8y72sj0041s21dbv2pfsl8"},{"post_id":"cjy8y72s2003bs21dfpt1j3pt","category_id":"cjy8y72q50007s21dhdfif9z2","_id":"cjy8y72sk0044s21dqqhl6zcm"},{"post_id":"cjy8y72s6003ds21d5c7jgddx","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72sm0048s21dyrj57kvo"},{"post_id":"cjy8y72sa003gs21du4tlrf4l","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72sn004as21d948wo0y9"},{"post_id":"cjy8y72sb003is21dfmkq9qbh","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72so004ds21dtu0tz7dm"},{"post_id":"cjy8y72sc003ls21d4zbjlye7","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72sp004gs21dh5utcbkj"},{"post_id":"cjy8y72sd003ns21ddtiertzl","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72sr004ks21datajdr82"},{"post_id":"cjy8y72sf003qs21dw9ps6g5d","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72ss004ns21dovb8wd4h"},{"post_id":"cjy8y72sg003ts21di6kggmgy","category_id":"cjy8y72q50007s21dhdfif9z2","_id":"cjy8y72su004qs21d7m0843an"},{"post_id":"cjy8y72sh003xs21d3j4extmw","category_id":"cjy8y72q50007s21dhdfif9z2","_id":"cjy8y72sv004ss21d4flm7qy2"},{"post_id":"cjy8y72si0040s21dgeqsxk0x","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72sx004us21dm47xk8tj"},{"post_id":"cjy8y72sj0043s21d4e93jwiy","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72sz004ys21dxnzl3phe"},{"post_id":"cjy8y72sl0047s21d1ndxe7kz","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72t40051s21dsz45crdp"},{"post_id":"cjy8y72sm0049s21dpe2g2brj","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72t60055s21d2hx3pppc"},{"post_id":"cjy8y72sn004cs21dl99nnygq","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72t70057s21ds5yu00ct"},{"post_id":"cjy8y72so004fs21dr0tflsc8","category_id":"cjy8y72q50007s21dhdfif9z2","_id":"cjy8y72t9005as21dm0upxwk5"},{"post_id":"cjy8y72sq004js21dwrj1t1hk","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72ta005ds21daqurbdv1"},{"post_id":"cjy8y72sr004ms21d7n9yj9i5","category_id":"cjy8y72q50007s21dhdfif9z2","_id":"cjy8y72tb005hs21d0lyxgcat"},{"post_id":"cjy8y72ss004ps21dzjvyf0b6","category_id":"cjy8y72q50007s21dhdfif9z2","_id":"cjy8y72tc005ks21dsh67mmh1"},{"post_id":"cjy8y72su004rs21det1o063u","category_id":"cjy8y72rs002us21drbt0r5fi","_id":"cjy8y72td005ns21dwupvxg3y"},{"post_id":"cjy8y72sv004ts21dcsgsqxhu","category_id":"cjy8y72qp0014s21d1xvoklw9","_id":"cjy8y72tf005qs21dxbxp5nn0"},{"post_id":"cjy8y72sx004xs21dgd61u1jv","category_id":"cjy8y72rs002us21drbt0r5fi","_id":"cjy8y72tg005ts21delqzpe4o"},{"post_id":"cjy8y72t10050s21d5tcklmoq","category_id":"cjy8y72r5001qs21dt8hnfg43","_id":"cjy8y72tg005vs21d4vw1o76h"},{"post_id":"cjy8y72t50054s21d66lsy01m","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72th005ws21djhoz015t"},{"post_id":"cjy8y72t60056s21dod7wy34w","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72th005ys21dhsjerak8"},{"post_id":"cjy8y72t80059s21d0bjcry70","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72th005zs21dizae3ppy"},{"post_id":"cjy8y72t9005cs21dy5mg0d9q","category_id":"cjy8y72qp0014s21d1xvoklw9","_id":"cjy8y72ti0061s21doi8oeg3h"},{"post_id":"cjy8y72ta005gs21d6jc64g60","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72ti0063s21djgyh2v38"},{"post_id":"cjy8y72tc005js21detrxprub","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72ti0066s21d8jktw3ck"},{"post_id":"cjy8y72td005ms21dyuoieast","category_id":"cjy8y72qp0014s21d1xvoklw9","_id":"cjy8y72ti0067s21dzn9x7420"},{"post_id":"cjy8y72te005ps21d552qfvl0","category_id":"cjy8y72rs002us21drbt0r5fi","_id":"cjy8y72ti0069s21d9u3if1h7"},{"post_id":"cjy8y72tf005ss21dhgt5fstu","category_id":"cjy8y72rs002us21drbt0r5fi","_id":"cjy8y72tj006as21dhrozzv7e"},{"post_id":"cjy8y72us00bts21dykm3x56c","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72uy00bzs21d6jrtdk0a"},{"post_id":"cjy8y72ut00bus21dp2otlhos","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72v000c2s21dtqfadgrg"},{"post_id":"cjy8y72uv00bws21d3p5udtrh","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72v300c6s21dgbozvytp"},{"post_id":"cjy8y72ux00bys21d9knu5379","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72v500c9s21dlu5xpe3n"},{"post_id":"cjy8y72uz00c1s21dj406w0tj","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72v600ccs21dysv629qj"},{"post_id":"cjy8y72v200c5s21d8l5nj3xr","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72v800cfs21d9exhbjw3"},{"post_id":"cjy8y72v400c8s21dh8tvrvs2","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72v900chs21d70nlorlo"},{"post_id":"cjy8y72v500cas21d5zik1jpg","category_id":"cjy8y72rs002us21drbt0r5fi","_id":"cjy8y72vc00cks21dcu7074eq"},{"post_id":"cjy8y72v700ces21dhwxoiore","category_id":"cjy8y72rs002us21drbt0r5fi","_id":"cjy8y72ve00cms21dkps5xmiv"},{"post_id":"cjy8y72v800cgs21d51tuexf8","category_id":"cjy8y72qz001ks21diczl87er","_id":"cjy8y72ve00cps21d8p4dqgik"},{"post_id":"cjyfvm8f00004fp1d8r7ab7pf","category_id":"cjy8y72q50007s21dhdfif9z2","_id":"cjyfvn29v0009fp1d5y58ghu2"}],"PostTag":[{"post_id":"cjy8y72pr0000s21dtqi1uct8","tag_id":"cjy8y72q00003s21dby2csigr","_id":"cjy8y72q60009s21dg3feeqd9"},{"post_id":"cjy8y72q6000as21dkqx2qywp","tag_id":"cjy8y72q00003s21dby2csigr","_id":"cjy8y72qa000fs21dacnvpuj2"},{"post_id":"cjy8y72px0001s21d1e8cfnai","tag_id":"cjy8y72q50008s21dflw5c6ns","_id":"cjy8y72qc000hs21d1agzgc4w"},{"post_id":"cjy8y72qf000ms21d9vatvs7s","tag_id":"cjy8y72q00003s21dby2csigr","_id":"cjy8y72qj000rs21dszu769yv"},{"post_id":"cjy8y72q10004s21dqghsk21l","tag_id":"cjy8y72q8000es21dknvlymni","_id":"cjy8y72qk000us21dce5rkobd"},{"post_id":"cjy8y72q10004s21dqghsk21l","tag_id":"cjy8y72qe000ls21d2lir5lp9","_id":"cjy8y72qm000ys21dcu4zz7uj"},{"post_id":"cjy8y72q40006s21d9sb8ynll","tag_id":"cjy8y72qj000ss21dp8yrgnz3","_id":"cjy8y72qt001as21d7cji2si6"},{"post_id":"cjy8y72q40006s21d9sb8ynll","tag_id":"cjy8y72qn0011s21dw88bmvj2","_id":"cjy8y72qw001es21dszr0306a"},{"post_id":"cjy8y72q7000bs21d3j4oackp","tag_id":"cjy8y72qr0017s21dtf0a0jke","_id":"cjy8y72r0001ns21df3w43u8b"},{"post_id":"cjy8y72q7000bs21d3j4oackp","tag_id":"cjy8y72qw001fs21d9ltznsqs","_id":"cjy8y72r6001rs21dwd6u7fkn"},{"post_id":"cjy8y72qc000is21d8l86joez","tag_id":"cjy8y72qz001ls21dm0df3g0p","_id":"cjy8y72r9001us21dabru860m"},{"post_id":"cjy8y72qh000os21d1qpj9prj","tag_id":"cjy8y72r9001ts21dpe5r86w5","_id":"cjy8y72rl002gs21dvyw5tv3m"},{"post_id":"cjy8y72qh000os21d1qpj9prj","tag_id":"cjy8y72re0020s21djd1g3tp6","_id":"cjy8y72rn002js21du9vtwasa"},{"post_id":"cjy8y72qh000os21d1qpj9prj","tag_id":"cjy8y72rh0026s21dvcq3ix4s","_id":"cjy8y72rp002os21djubczb8o"},{"post_id":"cjy8y72qj000ts21dw4kemk5o","tag_id":"cjy8y72rk002cs21d54kz83i3","_id":"cjy8y72rt002xs21dsbvdlwyi"},{"post_id":"cjy8y72qj000ts21dw4kemk5o","tag_id":"cjy8y72ro002ms21dw62pw3k8","_id":"cjy8y72ru0030s21d1rssyzh9"},{"post_id":"cjy8y72qk000vs21d8uxzm84k","tag_id":"cjy8y72rr002ts21dv5w10f27","_id":"cjy8y72sg003ss21dubt0wd59"},{"post_id":"cjy8y72qk000vs21d8uxzm84k","tag_id":"cjy8y72ru0031s21d0enkr2kl","_id":"cjy8y72sh003vs21d9cyrwcaq"},{"post_id":"cjy8y72qk000vs21d8uxzm84k","tag_id":"cjy8y72rz0038s21dutwl0xlq","_id":"cjy8y72si003zs21dibec8csi"},{"post_id":"cjy8y72qk000vs21d8uxzm84k","tag_id":"cjy8y72s8003fs21dptermc0z","_id":"cjy8y72sj0042s21dl2loloh8"},{"post_id":"cjy8y72qk000vs21d8uxzm84k","tag_id":"cjy8y72sc003ks21dqeiliszq","_id":"cjy8y72sk0046s21ddu2f1n35"},{"post_id":"cjy8y72qm000zs21deuhkhb7w","tag_id":"cjy8y72se003ps21dq3qybuzd","_id":"cjy8y72so004es21d6rzzxkyu"},{"post_id":"cjy8y72qm000zs21deuhkhb7w","tag_id":"cjy8y72sh003ws21drz0z9a4j","_id":"cjy8y72sq004hs21d2sg9wr9p"},{"post_id":"cjy8y72qm000zs21deuhkhb7w","tag_id":"cjy8y72sk0045s21do0ngo9y4","_id":"cjy8y72sr004ls21ds1pegmfq"},{"post_id":"cjy8y72qo0012s21doqiuz1mt","tag_id":"cjy8y72sn004bs21d0yn6ie1n","_id":"cjy8y72sx004ws21dykpl7piu"},{"post_id":"cjy8y72qo0012s21doqiuz1mt","tag_id":"cjy8y72sq004is21d90m59l4r","_id":"cjy8y72t0004zs21dlhgwrk3k"},{"post_id":"cjy8y72qo0012s21doqiuz1mt","tag_id":"cjy8y72ss004os21d7x517icn","_id":"cjy8y72t50053s21d25mgiek1"},{"post_id":"cjy8y72qp0015s21dlx2nh6q9","tag_id":"cjy8y72sx004vs21d53ppx0yo","_id":"cjy8y72t9005bs21d1vf4ox0s"},{"post_id":"cjy8y72qp0015s21dlx2nh6q9","tag_id":"cjy8y72t50052s21dhojfpou9","_id":"cjy8y72ta005es21d1ridl1v7"},{"post_id":"cjy8y72qs0018s21d8uktswsb","tag_id":"cjy8y72t80058s21dt91moz2g","_id":"cjy8y72tb005is21d77x2lrnd"},{"post_id":"cjy8y72qu001cs21dkri3sb2o","tag_id":"cjy8y72rk002cs21d54kz83i3","_id":"cjy8y72te005os21d7ny464b6"},{"post_id":"cjy8y72qw001gs21dway4fqq5","tag_id":"cjy8y72t80058s21dt91moz2g","_id":"cjy8y72tg005us21dahyegaft"},{"post_id":"cjy8y72qy001is21d0j0qx5zi","tag_id":"cjy8y72tf005rs21d16z276ky","_id":"cjy8y72ti0062s21djosxo1tp"},{"post_id":"cjy8y72qy001is21d0j0qx5zi","tag_id":"cjy8y72th005xs21del7yir2h","_id":"cjy8y72ti0064s21dzgqtmhdw"},{"post_id":"cjy8y72qz001ms21dkmv0tu7n","tag_id":"cjy8y72th0060s21dajqrnknu","_id":"cjy8y72tj006cs21dw4lsm64k"},{"post_id":"cjy8y72qz001ms21dkmv0tu7n","tag_id":"cjy8y72ti0065s21dsp6sptgd","_id":"cjy8y72tj006ds21dfn1x9vc9"},{"post_id":"cjy8y72qz001ms21dkmv0tu7n","tag_id":"cjy8y72ti0068s21ddcs14qnn","_id":"cjy8y72tj006fs21dha7bckbb"},{"post_id":"cjy8y72r1001os21d7ggrjtrc","tag_id":"cjy8y72tj006bs21dxmdz0u4t","_id":"cjy8y72tk006hs21dtzmo1vhk"},{"post_id":"cjy8y72r1001os21d7ggrjtrc","tag_id":"cjy8y72tj006es21dqrw3y1jo","_id":"cjy8y72tk006is21drawo2l8a"},{"post_id":"cjy8y72r7001ss21dz6r7q6ff","tag_id":"cjy8y72tj006gs21dsce6e32h","_id":"cjy8y72tk006ks21djtrd4i0q"},{"post_id":"cjy8y72ra001vs21dj0wb4367","tag_id":"cjy8y72tk006js21de7th8k0g","_id":"cjy8y72tk006ms21de6k24j2z"},{"post_id":"cjy8y72rc001ys21dzehjgpd5","tag_id":"cjy8y72tk006ls21d3x4t5uck","_id":"cjy8y72tl006qs21dxnp4rs87"},{"post_id":"cjy8y72rc001ys21dzehjgpd5","tag_id":"cjy8y72tk006ns21d6f01u870","_id":"cjy8y72tl006rs21d0nndxpx0"},{"post_id":"cjy8y72rc001ys21dzehjgpd5","tag_id":"cjy8y72tl006os21dr8bmiwqe","_id":"cjy8y72tl006ts21dvnao9p6g"},{"post_id":"cjy8y72re0021s21db6uye3dd","tag_id":"cjy8y72tl006ps21dkoq248ws","_id":"cjy8y72tm006ws21d8mgj2ky7"},{"post_id":"cjy8y72re0021s21db6uye3dd","tag_id":"cjy8y72tl006ss21dw4p0su4z","_id":"cjy8y72tm006xs21d9ah4zq1f"},{"post_id":"cjy8y72re0021s21db6uye3dd","tag_id":"cjy8y72tl006us21dl4kfzf2l","_id":"cjy8y72tm006zs21dqwb1gpvp"},{"post_id":"cjy8y72rg0024s21d9ssbybzi","tag_id":"cjy8y72tm006vs21dggkb5tjj","_id":"cjy8y72tm0071s21ddkp4boi2"},{"post_id":"cjy8y72rg0024s21d9ssbybzi","tag_id":"cjy8y72tm006ys21dkkkbtlmz","_id":"cjy8y72tm0072s21der79m9v4"},{"post_id":"cjy8y72rh0027s21d9hv030wz","tag_id":"cjy8y72tm0070s21dos298v5t","_id":"cjy8y72tn0076s21d0dhzired"},{"post_id":"cjy8y72rh0027s21d9hv030wz","tag_id":"cjy8y72tn0073s21d4p94qfr3","_id":"cjy8y72tn0077s21dei0fir3x"},{"post_id":"cjy8y72rh0027s21d9hv030wz","tag_id":"cjy8y72tn0074s21d08ly0afn","_id":"cjy8y72tn0079s21dv3f7hu9n"},{"post_id":"cjy8y72rj002as21dw54leygs","tag_id":"cjy8y72tn0075s21daiobzqka","_id":"cjy8y72to007bs21dr66jay5t"},{"post_id":"cjy8y72rj002as21dw54leygs","tag_id":"cjy8y72tn0078s21dt49i0zmj","_id":"cjy8y72to007cs21du8o9lkv8"},{"post_id":"cjy8y72rk002ds21d8bv6z8ur","tag_id":"cjy8y72to007as21dlsa2m26d","_id":"cjy8y72to007es21d5i2iurfh"},{"post_id":"cjy8y72rm002hs21d7wf1rhe6","tag_id":"cjy8y72to007ds21dpiwyca5u","_id":"cjy8y72tp007hs21dnzzgah8m"},{"post_id":"cjy8y72rm002hs21d7wf1rhe6","tag_id":"cjy8y72to007fs21ddknddu5b","_id":"cjy8y72tp007is21dymf6tu3s"},{"post_id":"cjy8y72rn002ks21dbmhvavvm","tag_id":"cjy8y72to007gs21d50q5in0q","_id":"cjy8y72tq007ls21duonigs00"},{"post_id":"cjy8y72rn002ks21dbmhvavvm","tag_id":"cjy8y72th0060s21dajqrnknu","_id":"cjy8y72tr007ms21di8pldn1o"},{"post_id":"cjy8y72rp002ps21d5gqqzbfv","tag_id":"cjy8y72t80058s21dt91moz2g","_id":"cjy8y72ts007qs21dgib2o54h"},{"post_id":"cjy8y72rp002ps21d5gqqzbfv","tag_id":"cjy8y72tr007ns21dr2jo9zg5","_id":"cjy8y72ts007rs21d8e79cn5f"},{"post_id":"cjy8y72rp002ps21d5gqqzbfv","tag_id":"cjy8y72tr007os21donkryn4l","_id":"cjy8y72ts007ts21dklkk6slu"},{"post_id":"cjy8y72rq002rs21dbowzoxhp","tag_id":"cjy8y72tf005rs21d16z276ky","_id":"cjy8y72ts007vs21dskl2t6my"},{"post_id":"cjy8y72rq002rs21dbowzoxhp","tag_id":"cjy8y72ts007ss21d8obat1tr","_id":"cjy8y72ts007ws21dchs7mnq4"},{"post_id":"cjy8y72rs002vs21d8apvyt0h","tag_id":"cjy8y72ts007us21d3eyhgtah","_id":"cjy8y72tt007ys21dd4ju1dpn"},{"post_id":"cjy8y72rt002ys21dsm3ja6y0","tag_id":"cjy8y72ts007us21d3eyhgtah","_id":"cjy8y72tu0080s21dcf0jn8y7"},{"post_id":"cjy8y72rv0033s21dd3i4yg0h","tag_id":"cjy8y72ts007us21d3eyhgtah","_id":"cjy8y72tu0082s21d7h22vouv"},{"post_id":"cjy8y72rx0035s21d3odn6x5l","tag_id":"cjy8y72ts007us21d3eyhgtah","_id":"cjy8y72tv0084s21dxy3qjcda"},{"post_id":"cjy8y72s00039s21dnskgsw50","tag_id":"cjy8y72ts007us21d3eyhgtah","_id":"cjy8y72tv0086s21d52y46t8h"},{"post_id":"cjy8y72s2003bs21dfpt1j3pt","tag_id":"cjy8y72tv0085s21dx1cfibcm","_id":"cjy8y72tw0089s21d6rdjdqko"},{"post_id":"cjy8y72s2003bs21dfpt1j3pt","tag_id":"cjy8y72tv0087s21dzgrbnme2","_id":"cjy8y72tw008as21di3gfa9tm"},{"post_id":"cjy8y72s6003ds21d5c7jgddx","tag_id":"cjy8y72tv0088s21d52uqmvmu","_id":"cjy8y72tw008cs21dkv5qtrx4"},{"post_id":"cjy8y72sa003gs21du4tlrf4l","tag_id":"cjy8y72tw008bs21d43p8jmrv","_id":"cjy8y72tx008fs21de99oc0pv"},{"post_id":"cjy8y72sa003gs21du4tlrf4l","tag_id":"cjy8y72tw008ds21d4tpw31r4","_id":"cjy8y72tx008gs21d7wp7w6ah"},{"post_id":"cjy8y72sb003is21dfmkq9qbh","tag_id":"cjy8y72tk006ls21d3x4t5uck","_id":"cjy8y72ty008ks21drjjmnltz"},{"post_id":"cjy8y72sb003is21dfmkq9qbh","tag_id":"cjy8y72tx008hs21dbga1oecm","_id":"cjy8y72ty008ls21dqueeukdg"},{"post_id":"cjy8y72sb003is21dfmkq9qbh","tag_id":"cjy8y72tx008is21d1s5ndypd","_id":"cjy8y72ty008ns21dqcy7tij5"},{"post_id":"cjy8y72sc003ls21d4zbjlye7","tag_id":"cjy8y72tf005rs21d16z276ky","_id":"cjy8y72tz008qs21ds3jehorl"},{"post_id":"cjy8y72sc003ls21d4zbjlye7","tag_id":"cjy8y72ty008ms21deagxr9f7","_id":"cjy8y72tz008rs21dx8r803jc"},{"post_id":"cjy8y72sc003ls21d4zbjlye7","tag_id":"cjy8y72ty008os21d6heyd0yo","_id":"cjy8y72tz008ts21duxt1qvvr"},{"post_id":"cjy8y72sd003ns21ddtiertzl","tag_id":"cjy8y72tf005rs21d16z276ky","_id":"cjy8y72u0008ws21d5vxhnn0a"},{"post_id":"cjy8y72sd003ns21ddtiertzl","tag_id":"cjy8y72tz008ss21dmegkhlks","_id":"cjy8y72u0008xs21dds0qivso"},{"post_id":"cjy8y72sd003ns21ddtiertzl","tag_id":"cjy8y72tz008us21dknn0pu9p","_id":"cjy8y72u0008zs21db6pd03sn"},{"post_id":"cjy8y72sf003qs21dw9ps6g5d","tag_id":"cjy8y72t80058s21dt91moz2g","_id":"cjy8y72u10093s21dippgfkgh"},{"post_id":"cjy8y72sf003qs21dw9ps6g5d","tag_id":"cjy8y72u0008ys21de12foe4g","_id":"cjy8y72u20094s21dn2t35ezk"},{"post_id":"cjy8y72sf003qs21dw9ps6g5d","tag_id":"cjy8y72u10090s21dg5evsmfu","_id":"cjy8y72u20096s21dpfx3fcga"},{"post_id":"cjy8y72sf003qs21dw9ps6g5d","tag_id":"cjy8y72u10091s21du2zajzpi","_id":"cjy8y72u20097s21d4hx3tf01"},{"post_id":"cjy8y72sg003ts21di6kggmgy","tag_id":"cjy8y72tm0070s21dos298v5t","_id":"cjy8y72u20099s21duw39oioh"},{"post_id":"cjy8y72si0040s21dgeqsxk0x","tag_id":"cjy8y72u20095s21diypx89m5","_id":"cjy8y72u3009as21deg25zfd5"},{"post_id":"cjy8y72sj0043s21d4e93jwiy","tag_id":"cjy8y72u20095s21diypx89m5","_id":"cjy8y72u4009fs21d2t3ou489"},{"post_id":"cjy8y72sj0043s21d4e93jwiy","tag_id":"cjy8y72u3009bs21d0ryw6iql","_id":"cjy8y72u4009gs21de8euq6k0"},{"post_id":"cjy8y72sj0043s21d4e93jwiy","tag_id":"cjy8y72u3009cs21diyrym968","_id":"cjy8y72u4009is21dikabn57b"},{"post_id":"cjy8y72sj0043s21d4e93jwiy","tag_id":"cjy8y72u3009ds21ddtrxovqc","_id":"cjy8y72u4009js21dmaw00glt"},{"post_id":"cjy8y72sl0047s21d1ndxe7kz","tag_id":"cjy8y72u3009es21ddekts9gl","_id":"cjy8y72u4009ls21d8hfh9w6q"},{"post_id":"cjy8y72sm0049s21dpe2g2brj","tag_id":"cjy8y72u20095s21diypx89m5","_id":"cjy8y72u6009ns21df8karuzk"},{"post_id":"cjy8y72sm0049s21dpe2g2brj","tag_id":"cjy8y72u4009ks21d68nf9jlg","_id":"cjy8y72u6009os21do9qippjb"},{"post_id":"cjy8y72sn004cs21dl99nnygq","tag_id":"cjy8y72u6009ms21d1k79wn79","_id":"cjy8y72u7009ss21d9f2juhv9"},{"post_id":"cjy8y72sn004cs21dl99nnygq","tag_id":"cjy8y72u6009ps21dsje3xexh","_id":"cjy8y72u7009ts21danv5sx54"},{"post_id":"cjy8y72sn004cs21dl99nnygq","tag_id":"cjy8y72u6009qs21dhoh4cale","_id":"cjy8y72u7009vs21ds8khhh0b"},{"post_id":"cjy8y72so004fs21dr0tflsc8","tag_id":"cjy8y72u7009rs21d81mvfa28","_id":"cjy8y72u7009ws21dylzzkp3c"},{"post_id":"cjy8y72sq004js21dwrj1t1hk","tag_id":"cjy8y72u7009us21d3odny0i9","_id":"cjy8y72u8009ys21df3loq9ye"},{"post_id":"cjy8y72sr004ms21d7n9yj9i5","tag_id":"cjy8y72u8009xs21d1whaj3ip","_id":"cjy8y72u900a1s21dw71w6hyb"},{"post_id":"cjy8y72sr004ms21d7n9yj9i5","tag_id":"cjy8y72u8009zs21dnm04f3nl","_id":"cjy8y72u900a2s21dnb5uwmt0"},{"post_id":"cjy8y72su004rs21det1o063u","tag_id":"cjy8y72u800a0s21dtuzq52p2","_id":"cjy8y72ub00a7s21dz10wqeej"},{"post_id":"cjy8y72su004rs21det1o063u","tag_id":"cjy8y72tm0070s21dos298v5t","_id":"cjy8y72ub00a8s21drbe21yhf"},{"post_id":"cjy8y72su004rs21det1o063u","tag_id":"cjy8y72u900a4s21dm7scbwt1","_id":"cjy8y72uc00aas21dprhlu9g2"},{"post_id":"cjy8y72su004rs21det1o063u","tag_id":"cjy8y72ua00a5s21dj8myvu4k","_id":"cjy8y72uc00abs21d8dvrzjdu"},{"post_id":"cjy8y72sv004ts21dcsgsqxhu","tag_id":"cjy8y72ua00a6s21dei7tno5x","_id":"cjy8y72ud00afs21dekemd0yl"},{"post_id":"cjy8y72sv004ts21dcsgsqxhu","tag_id":"cjy8y72ub00a9s21d8scghmwh","_id":"cjy8y72ud00ags21d9cj74l13"},{"post_id":"cjy8y72sv004ts21dcsgsqxhu","tag_id":"cjy8y72uc00acs21djqjt5myo","_id":"cjy8y72ud00ais21dlshcw3kq"},{"post_id":"cjy8y72sv004ts21dcsgsqxhu","tag_id":"cjy8y72uc00ads21dbh10yv8y","_id":"cjy8y72ud00ajs21d87mp11ys"},{"post_id":"cjy8y72sx004xs21dgd61u1jv","tag_id":"cjy8y72to007as21dlsa2m26d","_id":"cjy8y72ue00als21d91nn6tqk"},{"post_id":"cjy8y72t10050s21d5tcklmoq","tag_id":"cjy8y72ud00ahs21dpogqgl5h","_id":"cjy8y72ue00ans21dqk8hbjqx"},{"post_id":"cjy8y72t10050s21d5tcklmoq","tag_id":"cjy8y72ud00aks21dc3nwgx97","_id":"cjy8y72ue00aos21dm4zmx4jv"},{"post_id":"cjy8y72t50054s21d66lsy01m","tag_id":"cjy8y72t80058s21dt91moz2g","_id":"cjy8y72ug00ass21d900z06en"},{"post_id":"cjy8y72t50054s21d66lsy01m","tag_id":"cjy8y72ue00aps21dcf6muw3l","_id":"cjy8y72ug00ats21d55v6jhpy"},{"post_id":"cjy8y72t50054s21d66lsy01m","tag_id":"cjy8y72tn0075s21daiobzqka","_id":"cjy8y72ug00avs21dvjl9296e"},{"post_id":"cjy8y72t60056s21dod7wy34w","tag_id":"cjy8y72uf00ars21dpjwa3v90","_id":"cjy8y72uh00azs21dnjuduv6t"},{"post_id":"cjy8y72t60056s21dod7wy34w","tag_id":"cjy8y72ug00aus21dv6zqddm6","_id":"cjy8y72uh00b0s21dyyqk4ujt"},{"post_id":"cjy8y72t60056s21dod7wy34w","tag_id":"cjy8y72ug00aws21d78moytgs","_id":"cjy8y72uh00b2s21ds7toslde"},{"post_id":"cjy8y72t60056s21dod7wy34w","tag_id":"cjy8y72uh00axs21d9pn8ca2h","_id":"cjy8y72uh00b3s21d6kdljeaj"},{"post_id":"cjy8y72t80059s21d0bjcry70","tag_id":"cjy8y72uh00ays21dxd2ljglw","_id":"cjy8y72ui00b5s21dwfrzl10t"},{"post_id":"cjy8y72t9005cs21dy5mg0d9q","tag_id":"cjy8y72uh00b1s21dtjdje0oc","_id":"cjy8y72uj00bas21d1jkvm46w"},{"post_id":"cjy8y72t9005cs21dy5mg0d9q","tag_id":"cjy8y72ui00b4s21de723f7za","_id":"cjy8y72uj00bbs21d4y67w5ds"},{"post_id":"cjy8y72t9005cs21dy5mg0d9q","tag_id":"cjy8y72ui00b6s21do0im5u3i","_id":"cjy8y72uk00bds21dsfq8cils"},{"post_id":"cjy8y72t9005cs21dy5mg0d9q","tag_id":"cjy8y72ui00b7s21dzmhnj7jy","_id":"cjy8y72uk00bes21dw4bifo30"},{"post_id":"cjy8y72t9005cs21dy5mg0d9q","tag_id":"cjy8y72tv0087s21dzgrbnme2","_id":"cjy8y72uk00bgs21d7xbkf097"},{"post_id":"cjy8y72ta005gs21d6jc64g60","tag_id":"cjy8y72uj00b9s21dkkv4gaia","_id":"cjy8y72uk00bhs21dri2ji2p5"},{"post_id":"cjy8y72tc005js21detrxprub","tag_id":"cjy8y72uj00bcs21dy2m8p36n","_id":"cjy8y72ul00bjs21d59uiz29a"},{"post_id":"cjy8y72tc005js21detrxprub","tag_id":"cjy8y72uk00bfs21dp812445c","_id":"cjy8y72ul00bks21dnp06dlho"},{"post_id":"cjy8y72td005ms21dyuoieast","tag_id":"cjy8y72ul00bis21ddu5dpr9n","_id":"cjy8y72um00bms21dhi04c6ef"},{"post_id":"cjy8y72te005ps21d552qfvl0","tag_id":"cjy8y72ul00bls21dm5sfp4dv","_id":"cjy8y72um00bps21dxxatvw7q"},{"post_id":"cjy8y72te005ps21d552qfvl0","tag_id":"cjy8y72sq004is21d90m59l4r","_id":"cjy8y72um00bqs21d019aedqf"},{"post_id":"cjy8y72te005ps21d552qfvl0","tag_id":"cjy8y72um00bns21dk03zkeof","_id":"cjy8y72un00brs21dcddv3k8z"},{"post_id":"cjy8y72tf005ss21dhgt5fstu","tag_id":"cjy8y72um00bos21d0le56tea","_id":"cjy8y72un00bss21dq2wcd2q6"},{"post_id":"cjy8y72ut00bus21dp2otlhos","tag_id":"cjy8y72t80058s21dt91moz2g","_id":"cjy8y72ux00bxs21d61hbajho"},{"post_id":"cjy8y72uv00bws21d3p5udtrh","tag_id":"cjy8y72t80058s21dt91moz2g","_id":"cjy8y72uz00c0s21djrkhbvea"},{"post_id":"cjy8y72us00bts21dykm3x56c","tag_id":"cjy8y72tk006ls21d3x4t5uck","_id":"cjy8y72v200c4s21dvvklu8mg"},{"post_id":"cjy8y72us00bts21dykm3x56c","tag_id":"cjy8y72uv00bvs21dsyqeah7r","_id":"cjy8y72v400c7s21dmll1u3za"},{"post_id":"cjy8y72v400c8s21dh8tvrvs2","tag_id":"cjy8y72u7009us21d3odny0i9","_id":"cjy8y72v700cds21dhglkwv0j"},{"post_id":"cjy8y72v700ces21dhwxoiore","tag_id":"cjy8y72to007as21dlsa2m26d","_id":"cjy8y72vc00cjs21dpa9co5c4"},{"post_id":"cjy8y72ux00bys21d9knu5379","tag_id":"cjy8y72tf005rs21d16z276ky","_id":"cjy8y72vd00cls21dxngf96k3"},{"post_id":"cjy8y72ux00bys21d9knu5379","tag_id":"cjy8y72v100c3s21d37ciwq09","_id":"cjy8y72ve00cos21de6wbmdhy"},{"post_id":"cjy8y72ux00bys21d9knu5379","tag_id":"cjy8y72v600cbs21de1dwt67p","_id":"cjy8y72ve00cqs21d1pjnqqsu"},{"post_id":"cjy8y72ux00bys21d9knu5379","tag_id":"cjy8y72uj00b9s21dkkv4gaia","_id":"cjy8y72ve00crs21dohwhrm1a"},{"post_id":"cjy8y72uz00c1s21dj406w0tj","tag_id":"cjy8y72v900cis21d7bbey07w","_id":"cjy8y72vf00cts21dorma8qt8"},{"post_id":"cjy8y72v200c5s21d8l5nj3xr","tag_id":"cjy8y72ve00cns21dz4daaelv","_id":"cjy8y72vf00cus21dqdrvqzc0"},{"post_id":"cjy8y72v200c5s21d8l5nj3xr","tag_id":"cjy8y72u6009qs21dhoh4cale","_id":"cjy8y72vf00cws21de1vvjngm"},{"post_id":"cjy8y72v200c5s21d8l5nj3xr","tag_id":"cjy8y72u6009ms21d1k79wn79","_id":"cjy8y72vf00cxs21dcx6rqluv"},{"post_id":"cjy8y72v200c5s21d8l5nj3xr","tag_id":"cjy8y72u6009ps21dsje3xexh","_id":"cjy8y72vf00cys21drkrxb2dh"},{"post_id":"cjy8y72v500cas21d5zik1jpg","tag_id":"cjy8y72ve00css21dmsaau4o4","_id":"cjy8y72vf00czs21d178pp54j"},{"post_id":"cjy8y72v800cgs21d51tuexf8","tag_id":"cjy8y72tn0075s21daiobzqka","_id":"cjy8y72vf00d0s21drvblwq6x"},{"post_id":"cjy8y72v800cgs21d51tuexf8","tag_id":"cjy8y72vf00cvs21d5hoaalbq","_id":"cjy8y72vf00d1s21du6dtrwwl"},{"post_id":"cjyfvm8f00004fp1d8r7ab7pf","tag_id":"cjyfvn29u0008fp1dnc62l286","_id":"cjyfvn29v000afp1djpsrxuhb"}],"Tag":[{"name":"simack","_id":"cjy8y72q00003s21dby2csigr"},{"name":"博客","_id":"cjy8y72q50008s21dflw5c6ns"},{"name":"beyond compare","_id":"cjy8y72q8000es21dknvlymni"},{"name":"bc","_id":"cjy8y72qe000ls21d2lir5lp9"},{"name":"金士顿","_id":"cjy8y72qj000ss21dp8yrgnz3"},{"name":"u盘","_id":"cjy8y72qn0011s21dw88bmvj2"},{"name":"计算","_id":"cjy8y72qr0017s21dtf0a0jke"},{"name":"数学","_id":"cjy8y72qw001fs21d9ltznsqs"},{"name":"codewars","_id":"cjy8y72qz001ls21dm0df3g0p"},{"name":"Octocat Figurine","_id":"cjy8y72r9001ts21dpe5r86w5"},{"name":"章鱼猫","_id":"cjy8y72re0020s21djd1g3tp6"},{"name":"github","_id":"cjy8y72rh0026s21dvcq3ix4s"},{"name":"css","_id":"cjy8y72rk002cs21d54kz83i3"},{"name":"编码","_id":"cjy8y72ro002ms21dw62pw3k8"},{"name":"未央猪肉","_id":"cjy8y72rr002ts21dv5w10f27"},{"name":"网易","_id":"cjy8y72ru0031s21d0enkr2kl"},{"name":"严选","_id":"cjy8y72rz0038s21dutwl0xlq"},{"name":"网易严选","_id":"cjy8y72s8003fs21dptermc0z"},{"name":"优惠券","_id":"cjy8y72sc003ks21dqeiliszq"},{"name":"机械键盘","_id":"cjy8y72se003ps21dq3qybuzd"},{"name":"键盘","_id":"cjy8y72sh003ws21drz0z9a4j"},{"name":"ikbc","_id":"cjy8y72sk0045s21do0ngo9y4"},{"name":"chrome","_id":"cjy8y72sn004bs21d0yn6ie1n"},{"name":"https","_id":"cjy8y72sq004is21d90m59l4r"},{"name":"无法连接","_id":"cjy8y72ss004os21d7x517icn"},{"name":"模板","_id":"cjy8y72sx004vs21d53ppx0yo"},{"name":"编译","_id":"cjy8y72t50052s21dhojfpou9"},{"name":"webpack","_id":"cjy8y72t80058s21dt91moz2g"},{"name":"js","_id":"cjy8y72tf005rs21d16z276ky"},{"name":"new","_id":"cjy8y72th005xs21del7yir2h"},{"name":"jekyll","_id":"cjy8y72th0060s21dajqrnknu"},{"name":"括号","_id":"cjy8y72ti0065s21dsp6sptgd"},{"name":"转义","_id":"cjy8y72ti0068s21ddcs14qnn"},{"name":"go","_id":"cjy8y72tj006bs21dxmdz0u4t"},{"name":"指针","_id":"cjy8y72tj006es21dqrw3y1jo"},{"name":"flexible","_id":"cjy8y72tj006gs21dsce6e32h"},{"name":"keka","_id":"cjy8y72tk006js21de7th8k0g"},{"name":"node","_id":"cjy8y72tk006ls21d3x4t5uck"},{"name":"module","_id":"cjy8y72tk006ns21d6f01u870"},{"name":"require","_id":"cjy8y72tl006os21dr8bmiwqe"},{"name":"MAC","_id":"cjy8y72tl006ps21dkoq248ws"},{"name":"NFTS","_id":"cjy8y72tl006ss21dw4p0su4z"},{"name":"U盘","_id":"cjy8y72tl006us21dl4kfzf2l"},{"name":"恋爱","_id":"cjy8y72tm006vs21dggkb5tjj"},{"name":"长辈相处","_id":"cjy8y72tm006ys21dkkkbtlmz"},{"name":"ubuntu","_id":"cjy8y72tm0070s21dos298v5t"},{"name":"访客","_id":"cjy8y72tn0073s21d4p94qfr3"},{"name":"登录","_id":"cjy8y72tn0074s21d08ly0afn"},{"name":"react","_id":"cjy8y72tn0075s21daiobzqka"},{"name":"mobx","_id":"cjy8y72tn0078s21dt49i0zmj"},{"name":"git","_id":"cjy8y72to007as21dlsa2m26d"},{"name":"vue","_id":"cjy8y72to007ds21dpiwyca5u"},{"name":"elementUI","_id":"cjy8y72to007fs21ddknddu5b"},{"name":"ruby","_id":"cjy8y72to007gs21d50q5in0q"},{"name":"uglifyjs","_id":"cjy8y72tr007ns21dr2jo9zg5"},{"name":"ie8","_id":"cjy8y72tr007os21donkryn4l"},{"name":"render","_id":"cjy8y72ts007ss21d8obat1tr"},{"name":"Objective-C","_id":"cjy8y72ts007us21d3eyhgtah"},{"name":"App Store","_id":"cjy8y72tv0085s21dx1cfibcm"},{"name":"Pin","_id":"cjy8y72tv0087s21dzgrbnme2"},{"name":"DOM","_id":"cjy8y72tv0088s21d52uqmvmu"},{"name":"apache","_id":"cjy8y72tw008bs21d43p8jmrv"},{"name":"htaccess","_id":"cjy8y72tw008ds21d4tpw31r4"},{"name":"mail","_id":"cjy8y72tx008hs21dbga1oecm"},{"name":"nodemailer","_id":"cjy8y72tx008is21d1s5ndypd"},{"name":"if","_id":"cjy8y72ty008ms21deagxr9f7"},{"name":"equal","_id":"cjy8y72ty008os21d6heyd0yo"},{"name":"focus","_id":"cjy8y72tz008ss21dmegkhlks"},{"name":"blur","_id":"cjy8y72tz008us21dknn0pu9p"},{"name":"less","_id":"cjy8y72u0008ys21de12foe4g"},{"name":"OptimizeCssAssetsPlugin","_id":"cjy8y72u10090s21dg5evsmfu"},{"name":"cssnano","_id":"cjy8y72u10091s21du2zajzpi"},{"name":"cdn","_id":"cjy8y72u20095s21diypx89m5"},{"name":"对象存储","_id":"cjy8y72u3009bs21d0ryw6iql"},{"name":"COS","_id":"cjy8y72u3009cs21diyrym968"},{"name":"OSS","_id":"cjy8y72u3009ds21ddtrxovqc"},{"name":"CustomEvent","_id":"cjy8y72u3009es21ddekts9gl"},{"name":"blog","_id":"cjy8y72u4009ks21d68nf9jlg"},{"name":"jquery","_id":"cjy8y72u6009ms21d1k79wn79"},{"name":"axios","_id":"cjy8y72u6009ps21dsje3xexh"},{"name":"ajax","_id":"cjy8y72u6009qs21dhoh4cale"},{"name":"macOS","_id":"cjy8y72u7009rs21d81mvfa28"},{"name":"扁平化","_id":"cjy8y72u7009us21d3odny0i9"},{"name":"蔷薇少女","_id":"cjy8y72u8009xs21d1whaj3ip"},{"name":"水银灯","_id":"cjy8y72u8009zs21dnm04f3nl"},{"name":"cloudcone","_id":"cjy8y72u800a0s21dtuzq52p2"},{"name":"ipv6","_id":"cjy8y72u900a4s21dm7scbwt1"},{"name":"配置","_id":"cjy8y72ua00a5s21dj8myvu4k"},{"name":"hosts","_id":"cjy8y72ua00a6s21dei7tno5x"},{"name":"iHosts","_id":"cjy8y72ub00a9s21d8scghmwh"},{"name":"SwitchHosts","_id":"cjy8y72uc00acs21djqjt5myo"},{"name":"Hozz","_id":"cjy8y72uc00ads21dbh10yv8y"},{"name":"benq","_id":"cjy8y72ud00ahs21dpogqgl5h"},{"name":"screenbar","_id":"cjy8y72ud00aks21dc3nwgx97"},{"name":"babel","_id":"cjy8y72ue00aps21dcf6muw3l"},{"name":"ios","_id":"cjy8y72uf00ars21dpjwa3v90"},{"name":"safari","_id":"cjy8y72ug00aus21dv6zqddm6"},{"name":"history","_id":"cjy8y72ug00aws21d78moytgs"},{"name":"后退","_id":"cjy8y72uh00axs21d9pn8ca2h"},{"name":"yarn","_id":"cjy8y72uh00ays21dxd2ljglw"},{"name":"1Clipboard","_id":"cjy8y72uh00b1s21dtjdje0oc"},{"name":"Clipy","_id":"cjy8y72ui00b4s21de723f7za"},{"name":"Paste","_id":"cjy8y72ui00b6s21do0im5u3i"},{"name":"iPaste","_id":"cjy8y72ui00b7s21dzmhnj7jy"},{"name":"constructor","_id":"cjy8y72uj00b9s21dkkv4gaia"},{"name":"electron","_id":"cjy8y72uj00bcs21dy2m8p36n"},{"name":"electron-builder","_id":"cjy8y72uk00bfs21dp812445c"},{"name":"office","_id":"cjy8y72ul00bis21ddu5dpr9n"},{"name":"CA","_id":"cjy8y72ul00bls21dm5sfp4dv"},{"name":"cert","_id":"cjy8y72um00bns21dk03zkeof"},{"name":"markdown","_id":"cjy8y72um00bos21d0le56tea"},{"name":"npm","_id":"cjy8y72uv00bvs21dsyqeah7r"},{"name":"proto","_id":"cjy8y72v100c3s21d37ciwq09"},{"name":"prototype","_id":"cjy8y72v600cbs21de1dwt67p"},{"name":"array","_id":"cjy8y72v900cis21d7bbey07w"},{"name":"cross domain","_id":"cjy8y72ve00cns21dz4daaelv"},{"name":"useragent","_id":"cjy8y72ve00css21dmsaau4o4"},{"name":"hooks","_id":"cjy8y72vf00cvs21d5hoaalbq"},{"name":"hexo","_id":"cjyfvn29u0008fp1dnc62l286"}]}}