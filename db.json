{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape-mod/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape-mod/source/js/mermaid-v8.4.0.min.js","path":"js/mermaid-v8.4.0.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape-mod/.DS_Store","hash":"46e94125471f6c9e31f78decb8cefd48d87bc1ab","modified":1583156981858},{"_id":"themes/landscape-mod/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1583133394767},{"_id":"themes/landscape-mod/Gruntfile.js","hash":"bc4662730217196487fd0204721775cd762dd851","modified":1583133394767},{"_id":"themes/landscape-mod/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1583133394767},{"_id":"themes/landscape-mod/_config.yml","hash":"b2092de42d824c91cd39311eec0c01935653bf58","modified":1583133394767},{"_id":"themes/landscape-mod/package.json","hash":"37b83ebf9a606caba5189d947cebf24212733711","modified":1583133394828},{"_id":"themes/landscape-mod/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1583133394767},{"_id":"themes/landscape-mod/languages/zh-CN.yml","hash":"a20188ac865e07b7fe79a032a18ea50ba5b3b472","modified":1583133394767},{"_id":"themes/landscape-mod/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1583133394812},{"_id":"themes/landscape-mod/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1583133394812},{"_id":"themes/landscape-mod/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1583133394812},{"_id":"source/.DS_Store","hash":"d10333b7f95268fef9fd3e6529ed5e91300daf3c","modified":1591605828372},{"_id":"themes/landscape-mod/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1584599788056},{"_id":"themes/landscape-mod/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1583133394821},{"_id":"themes/landscape-mod/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1583133394827},{"_id":"themes/landscape-mod/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1583133394828},{"_id":"source/_posts/.DS_Store","hash":"61f50b3ffe41178ff7832261f101678c4267ead7","modified":1592641733419},{"_id":"themes/landscape-mod/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1583133394834},{"_id":"themes/landscape-mod/scripts/mod.js","hash":"24bbbdd8f1358999d89d991079cfc95e164fc10f","modified":1583133394834},{"_id":"source/_posts/2016/2016-10-15-hello-world.md","hash":"3092e6263e08f4aa4578c95e3c15146e5d15bf1d","modified":1583133394602},{"_id":"source/_posts/2016/2016-10-15-why-blog.md","hash":"b61214b49f2ba7cbfc7edbde115b220d7744b5cb","modified":1583133394602},{"_id":"source/_posts/2016/2016-10-19-blog-show.md","hash":"a53e7923f1d4174f59451987537b9ade952c124b","modified":1583133394602},{"_id":"source/_posts/2016/2016-10-19-how-to-use.md","hash":"c77878aec43d69cc39ed42ef43bcea8c3c41984f","modified":1583133394602},{"_id":"source/_posts/2016/2016-10-23-buy-beyond-compare.md","hash":"874fd938dbf72d1b7e308a61bc745010e22e2e2b","modified":1583133394602},{"_id":"source/_posts/2016/2016-10-26-kingston.md","hash":"9e386866384f8b50e39d696d1a1e40867d11fec1","modified":1583133394603},{"_id":"source/_posts/2016/2016-10-28-sin36.md","hash":"4e9a1f59e93a2c15550ba1c86c9a1413dcdeff8e","modified":1583133394603},{"_id":"source/_posts/2016/2016-10-31-codewars-father-and-son.md","hash":"606401194ababd34a402d624b4a1c1724b2af2ba","modified":1583133394603},{"_id":"source/_posts/2016/2016-11-18-share-drunarchiver.md","hash":"9442245e26278393d75869e2af082ec6c86cadea","modified":1583133394603},{"_id":"source/_posts/2016/2016-11-27-simack-v10.md","hash":"851aa8f5a1ed01a4d0dd66e62d5d9566c7774d97","modified":1583133394603},{"_id":"source/_posts/2016/2016-12-01-npm-introduction.md","hash":"ee35b4e23294135be3967800e9f7aa38a3a28e95","modified":1583133394603},{"_id":"source/_posts/2016/2016-12-06-octocat-figurine.md","hash":"5cbffc78f4b0c4b32da514bf39e2c513257ee8b8","modified":1583133394603},{"_id":"source/_posts/2016/2016-12-07-css-charset.md","hash":"6d913a77b3a4ffeafaa0d617b639cb68fd86b6cb","modified":1583133394634},{"_id":"source/_posts/2016/2016-12-12-netease-you.md","hash":"d385e9ee25d963af1dff0df996a2500fd6e03451","modified":1583133394634},{"_id":"source/_posts/2017/2017-01-04-ikbc-f108.md","hash":"49e658b64a39a98f7c4a3b9b23bd20ff1cbf4fa2","modified":1583133394634},{"_id":"source/_posts/2017/2017-01-06-webpack-1.md","hash":"d6bdb2cb96b1afed61119bdf922a73472430a92e","modified":1583133394634},{"_id":"source/_posts/2017/2017-01-09-chrome-https-error.md","hash":"2b56145ca9a6fc60cd995a5ebee12c32716216c6","modified":1583133394634},{"_id":"source/_posts/2017/2017-01-09-js-template-compile.md","hash":"3c7d109146c58fe49df583a7c11c20367f006aa9","modified":1583133394634},{"_id":"source/_posts/2017/2017-01-19-webpack-2.md","hash":"36862b4e13d8161ef00c8f508cb9130cdb7bbfc4","modified":1583133394635},{"_id":"source/_posts/2017/2017-02-04-webpack2-1.md","hash":"05dd1ffee50f14d30bf8716aefe5871faad758d9","modified":1583133394635},{"_id":"source/_posts/2017/2017-02-05-zz.md","hash":"1c25740b8ecbf010ca43e6d17f23cc1e526b5e24","modified":1583133394635},{"_id":"source/_posts/2017/2017-02-19-webpack2-2.md","hash":"706a50b27223063e7781d2018fad46b847592f6a","modified":1583133394640},{"_id":"source/_posts/2017/2017-02-21-js-new.md","hash":"6de87b7836aa0aa2b8da599c2b0b30c5c4441073","modified":1583133394640},{"_id":"source/_posts/2017/2017-02-26-js-prototype.md","hash":"65a17b5431fe153ae67cd9fa4fd1a9fcd3e73657","modified":1583133394640},{"_id":"source/_posts/2017/2017-03-01-jekyll-brace.md","hash":"bff56b882b55ba801ce688fd78c4c2eef275c733","modified":1583133394640},{"_id":"source/_posts/2017/2017-03-05-js-flexible.md","hash":"44c7fcaf45a40217efccce73ff43b9dc5aff4c3e","modified":1583133394640},{"_id":"source/_posts/2017/2017-03-06-share-keka.md","hash":"012d0d83fcdd29d6a458a0c69fca28ad12f98bcd","modified":1583133394641},{"_id":"source/_posts/2017/2017-03-31-go-snippet.md","hash":"6ff722e8a7afee64ed9af1a37fbcdf57e79e95a0","modified":1583458019844},{"_id":"source/_posts/2017/2017-04-14-zz-node-require.md","hash":"e0ed7ebdaafdb369c3f0b481ba6c5eb9ed957364","modified":1583133394641},{"_id":"source/_posts/2017/2017-04-22-mac-use-ntfs.md","hash":"575b513fb14f5575bac0d02fc5819ad9c0f9727a","modified":1583457600651},{"_id":"source/_posts/2017/2017-05-22-js-array.md","hash":"658b22d33220effb17f02f67ad61d2e22948d127","modified":1583133394641},{"_id":"source/_posts/2017/2017-05-31-before-marry.md","hash":"7da6435eace8ddd7450b5affad38044a7c43ed01","modified":1583133394642},{"_id":"source/_posts/2017/2017-06-03-react-mobx.md","hash":"f81df169f089796fe08deac4accca12e0ca44cb6","modified":1583133394642},{"_id":"source/_posts/2017/2017-06-09-ubuntu-login.md","hash":"2d91b5663653bfe13548889ad166c026c2684b12","modified":1583457588085},{"_id":"source/_posts/2017/2017-06-17-git-study.md","hash":"7cfbd979f4898cf702dfff74ab75c6e7c94581c1","modified":1583458037606},{"_id":"source/_posts/2017/2017-07-12-vue-elementui-message.md","hash":"5df1b0ab028f47b4ac81a662a52bd9f5a3d4af97","modified":1583133394652},{"_id":"source/_posts/2017/2017-07-27-ruby.md","hash":"28ee694e18393d1fae64b3430a2cfe3ce1cef063","modified":1583458939623},{"_id":"source/_posts/2017/2017-08-05-webpack-uglifyjs-ie8.md","hash":"fe5dc8e9e21746cb8a18760f0790a3883fb7fa4b","modified":1583133394653},{"_id":"source/_posts/2017/2017-09-21-nesting-element.md","hash":"3f26156ad5adb9ab3f26debb7cb2cd91cc49849f","modified":1583133394653},{"_id":"source/_posts/2017/2017-10-03-objective-c.md","hash":"cc095201afadb7b60c5fb3a3f23d969fe897d9eb","modified":1583458025812},{"_id":"source/_posts/2017/2017-10-08-objective-c-2.md","hash":"86a07cc3c0560dd66086ced943a3a7c1424f1962","modified":1583458021540},{"_id":"source/_posts/2017/2017-10-10-objective-c-3.md","hash":"bb311b0597afa4ca511698cf1a7cbaf015097866","modified":1583458016957},{"_id":"source/_posts/2017/2017-10-17-ios-1.md","hash":"c8f1993fba1dcf2fe9fd5d0bf99fe6418a040dd0","modified":1583458028430},{"_id":"source/_posts/2017/2017-10-19-ios-2.md","hash":"050a819ee14cd9d57399adf30a2d921ec9c23ed0","modified":1583458032564},{"_id":"source/_posts/2017/2017-12-21-app-store.md","hash":"c3292ed349ed0f31e7ea7d20d3884736aea28431","modified":1583457508026},{"_id":"source/_posts/2018/2018-01-06-dom-html.md","hash":"87ce9beb74c7e23ae10519efb1034ba5ef5a9930","modified":1583133394683},{"_id":"source/_posts/2018/2018-01-19-apache-htaccess.md","hash":"f27e9428dd8d2ce837e7c95a405e2d1ba37de276","modified":1583133394683},{"_id":"source/_posts/2018/2018-01-20-node-mail.md","hash":"6f4e10e46477ec5015ffdf7ec40d0c06055438a6","modified":1583133394683},{"_id":"source/_posts/2018/2018-01-29-js-focus.md","hash":"d16ac32249f0ff85e2cfb7cd103cae365423ac3d","modified":1583133394683},{"_id":"source/_posts/2018/2018-01-21-js-if-eq.md","hash":"19b60be75b1309ee7f8aec718468bb66372f8d77","modified":1583133394683},{"_id":"source/_posts/2018/2018-02-05-ubuntu.md","hash":"9f1e89208912be914d000e4e0443cf26873dd4ec","modified":1583133394684},{"_id":"source/_posts/2018/2018-02-10-less-zindex.md","hash":"b10c9cd5687b4d86de87d3984266ce5071191de6","modified":1583133394684},{"_id":"source/_posts/2018/2018-03-11-cdn.md","hash":"ccc2a2f5fabc270d65a80aafc4c60b56de2c0cf4","modified":1583133394684},{"_id":"source/_posts/2018/2018-02-14-summary.md","hash":"cbeb2ee07190702b29763ea84b60d1c9d12a44f7","modified":1583133394684},{"_id":"source/_posts/2018/2018-03-24-bucket.md","hash":"ec3cfe5683deaec82f1b1bd2f6c3553ca87d9b80","modified":1583133394684},{"_id":"source/_posts/2018/2018-03-26-event.md","hash":"f9b4931420ee12c534a1dc254de844cce2fe1a99","modified":1583133394685},{"_id":"source/_posts/2018/2018-04-06-cdn.md","hash":"2d952061c3f7d13340a6064bacb32a3369fad436","modified":1583133394685},{"_id":"source/_posts/2018/2018-05-09-ajax-302.md","hash":"bce1fb61f4603f98b1888e46400d5aacd13a95c8","modified":1583133394685},{"_id":"source/_posts/2018/2018-06-20-install-macos.md","hash":"01eb065a1dd63b66fd125acfc1b8848a132aa39c","modified":1583457491713},{"_id":"source/_posts/2018/2018-05-17-cross-domain.md","hash":"c947b47b24ed2097ede5fff0cc89b47c0f8957a8","modified":1583133394685},{"_id":"source/_posts/2018/2018-06-26-array-unflattened.md","hash":"80304ba51c8b2b9ce2b58c2cecc85f37fc8155f9","modified":1583133394686},{"_id":"source/_posts/2018/2018-06-26-suigintou.md","hash":"da0b81a07de74ac8556c744248b0ebc352c77985","modified":1583133394686},{"_id":"source/_posts/2018/2018-07-02-adobe-creative-cloud.md","hash":"ad5d113d8860c3e5991dcde88daa5d9ef44b5d23","modified":1583457468706},{"_id":"source/_posts/2018/2018-06-28-array-flattened.md","hash":"fb9a38f0eae491fd781b9c03825ffbf9e26b25bf","modified":1583133394686},{"_id":"source/_posts/2018/2018-08-28-hosts.md","hash":"5b4762fc59503d634fae734cf56290080f01f143","modified":1583133394686},{"_id":"source/_posts/2018/2018-09-11-ubuntu-ipv6.md","hash":"3ea60f8b6712033d03f82cef4cf12f09279fa28b","modified":1583458205987},{"_id":"source/_posts/2018/2018-10-13-useragent.md","hash":"7e5bcd1d913475e612c1ba3ccc6077c394174cc5","modified":1583458046791},{"_id":"source/_posts/2018/2018-09-12-git.md","hash":"6df44ff10f2b44673f997059c45a2f5c767da466","modified":1583458041299},{"_id":"source/_posts/2018/2018-10-21-benq-screenbar-plus.md","hash":"6c01bc4d79220abd4f938dbec20eb56367aeb344","modified":1583133394721},{"_id":"source/_posts/2018/2018-11-06-webpack.md","hash":"e4fb23af5d04668501474e35ff0ee3fe34bf2399","modified":1583133394721},{"_id":"source/_posts/2018/2018-11-21-ios-history-back.md","hash":"19ad9409283e718d65318aa4434421927a69411b","modified":1583133394734},{"_id":"source/_posts/2018/2018-11-18-yarn.md","hash":"dbf119d09806d7b67545bbe582e873ba95081616","modified":1583133394734},{"_id":"source/_posts/2018/2018-11-30-paste.md","hash":"569def9b54a25838bb76328888602cf35ac03624","modified":1583133394734},{"_id":"source/_posts/2018/2018-12-30-class-constructor.md","hash":"6ff982329dbc7b663d5e99bbbc00ad5471d608ec","modified":1583133394734},{"_id":"source/_posts/2019/2019-02-16-electron.md","hash":"d70dd5b3a352029582ecd34c57f9e24d0f79c354","modified":1583133394734},{"_id":"source/_posts/2019/2019-04-08-https-ssl.md","hash":"ceb223126ef56aac6b8cc60769ef785c13b661cc","modified":1583458172506},{"_id":"source/_posts/2019/2019-04-10-office-e3.md","hash":"7f77ee8d43225038c61a5eb2e44648c9bf4719c0","modified":1583133394735},{"_id":"source/_posts/2019/2019-04-15-learning-markdown.md","hash":"974c994f6eef5dfc0a77ae58bb9260803c9aebb1","modified":1583458051743},{"_id":"source/_posts/2019/2019-04-25-learning-git.md","hash":"a6edc51ce1288e3fe9db73c8d323bb26eccbad4e","modified":1583458054211},{"_id":"source/_posts/2019/2019-07-14-learning-reat-hooks.md","hash":"1eef5e8fc2a898e482576c6811cd2b0338c70daf","modified":1583133394761},{"_id":"source/_posts/2019/2019-07-23-hexo-blog.md","hash":"f31a14c720a63b8b420f7b2fafbf2cf63e2c2927","modified":1583133394761},{"_id":"source/_posts/2019/2019-08-16-static-blog.md","hash":"43118cb21e0effa0b2fa81bdee7294e8a28bd3e4","modified":1583457614197},{"_id":"source/_posts/2019/2019-08-23-knowledge-1.md","hash":"689512340db90067ba90b1be3cfb515315e9ae56","modified":1583133394761},{"_id":"source/_posts/2019/2019-08-29-knowledge-2.md","hash":"e25a148bb465b696c97c9f56db02af20261fcd66","modified":1583133394762},{"_id":"source/_posts/2019/2019-09-21-miband3.md","hash":"f9ebb5ea9c34cb8a22b702087f89324a0a9cea09","modified":1583133394762},{"_id":"source/_posts/2019/2019-10-19-vue-input.md","hash":"82dadbb4f45b4ce1b8101d2d857ad606a98fc91e","modified":1583133394762},{"_id":"source/_posts/2019/2019-11-02-react-redux-combine.md","hash":"004e9294b945836da4961e0c85c2b199b7f49f3e","modified":1583133394762},{"_id":"source/_posts/2019/2019-11-02-react-redux.md","hash":"1a22db020b17432de441ea8d28a9a836cca83d09","modified":1583133394762},{"_id":"source/_posts/2019/2019-11-03-react-redux-saga.md","hash":"ad00abaa8015ef56ce06078714ac96af085e2cfb","modified":1583133394763},{"_id":"source/_posts/2019/2019-11-05-vue-click.md","hash":"c1a4e61dc8506fa2a50857a3e9636ebccf3faaf5","modified":1583133394763},{"_id":"source/_posts/2019/2019-11-11-react-input-composition.md","hash":"868cabd3a2e2d1e17522fd7b44d7b1b66292044d","modified":1583133394763},{"_id":"source/_posts/2019/2019-11-12-react-redux-umi.md","hash":"429430976da71b269f09505b5007bf0398626074","modified":1583133394763},{"_id":"source/_posts/2019/2019-12-21-ikbc-f108.md","hash":"2c22453e67df6b5f390d53a6f3a76d4e2dcf00ed","modified":1583133394763},{"_id":"source/_posts/2019/2019-12-28-gh60.md","hash":"8975fdd6818bafa91fa688d285f4d8d0497f75c0","modified":1583133394763},{"_id":"source/_posts/2020/2020-01-09-popkart.md","hash":"43abec49fef966887c5d6b2d70e016a0fa2d2cd0","modified":1583133394764},{"_id":"source/_posts/2020/2020-01-27-apple-watch-5.md","hash":"4c89b3d8b34b60d0df903d3498994be401119baf","modified":1583133394764},{"_id":"source/_posts/2020/2020-02-01-popkart.md","hash":"43adfdc176ec398d87fd68cdccf1e8113a9190b3","modified":1583133394764},{"_id":"source/_posts/2020/2020-02-03-read-css-world.md","hash":"2e566c1699258daa877aa25675fe5b98bf3b1cf6","modified":1583133394764},{"_id":"source/_posts/2020/2020-02-08-in-app-purchase.md","hash":"b4b22fc3dfb74fba429cf741fe360106b9eed1cf","modified":1583332422683},{"_id":"source/_posts/2020/2020-03-02-mail.md","hash":"a270de24271e18b9cbbf4d1b15f03657c8fc0544","modified":1583167794523},{"_id":"source/_posts/2020/.DS_Store","hash":"4a51deb4cdcd8ff03b3ec50d5d55ab9de573399c","modified":1589384606651},{"_id":"source/_posts/2020/2020-03-04-mail-client.md","hash":"dde992fcdf0965a73b1bde5d0f4ef16cf2bfd3e6","modified":1583339968188},{"_id":"source/_posts/2020/2020-03-13-nvm.md","hash":"4d121e1b41f1285c3e046806fbe53dbfeeb8aaf2","modified":1584181739277},{"_id":"source/_posts/2020/2020-03-14-cloudflare-proxy.md","hash":"e5a3e6944d80e881ac6848112993ccb2ff77b163","modified":1584183659238},{"_id":"source/_posts/2020/2020-03-18-notification-bar.md","hash":"491d03699fd54791fb4834eefc065db6f2be869a","modified":1584542076512},{"_id":"source/_posts/2020/2020-04-07-airpods-pro.md","hash":"95333997faa6ecc95d9cf8dd65a45abf2f643905","modified":1586268270628},{"_id":"source/_posts/2020/2020-04-21-u-pan.md","hash":"f85504d485a355ca6b9b4efdcb37ba5281ba3969","modified":1587562453692},{"_id":"source/_posts/2020/2020-05-13-raspberry-pi.md","hash":"5c90249930baef7bec459f5864776f27991e21e3","modified":1589384307512},{"_id":"themes/landscape-mod/layout/_partial/after-footer.ejs","hash":"7cc05b9169be38baa543b3a069d7a75055085813","modified":1583133394794},{"_id":"themes/landscape-mod/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1583133394794},{"_id":"themes/landscape-mod/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1583133394794},{"_id":"themes/landscape-mod/layout/_partial/article.ejs","hash":"381195c1a4603de7254eb7a08ccd43905344bb67","modified":1583133394794},{"_id":"themes/landscape-mod/layout/_partial/baidu-analytics.ejs","hash":"1da201f06412c93fb3554d0acc49f65176792c0b","modified":1583133394795},{"_id":"themes/landscape-mod/layout/_partial/footer.ejs","hash":"3fedd38db8d95b5c0842989e5159eaf64b4d6f5b","modified":1583133394795},{"_id":"themes/landscape-mod/layout/_partial/google-analytics.ejs","hash":"f29a865f7683fb9565264bf30fedcfa39416ed97","modified":1583133394795},{"_id":"themes/landscape-mod/layout/_partial/head.ejs","hash":"89c9fb58d1d6f8f5544faff2fefdf8d6ffa2662d","modified":1583133394795},{"_id":"themes/landscape-mod/layout/_partial/header.ejs","hash":"997923d389ba294e89ce1d3a23b063b6e210a197","modified":1583133394795},{"_id":"themes/landscape-mod/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1583133394795},{"_id":"themes/landscape-mod/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1583133394802},{"_id":"themes/landscape-mod/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1583133394805},{"_id":"themes/landscape-mod/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1583133394806},{"_id":"themes/landscape-mod/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1583133394810},{"_id":"themes/landscape-mod/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1583133394811},{"_id":"themes/landscape-mod/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1583133394811},{"_id":"themes/landscape-mod/source/css/_extend.styl","hash":"1f1faeb42627533e94822b66589baefdc5cc5c5f","modified":1584182720387},{"_id":"themes/landscape-mod/source/css/_variables.styl","hash":"fb77e428d64115d2e49f60914413301f237e4c32","modified":1583478209013},{"_id":"themes/landscape-mod/source/css/style.styl","hash":"c43f33e2322a25a831cb7841dd086aed9b5e10fa","modified":1584182192793},{"_id":"themes/landscape-mod/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1583133394845},{"_id":"themes/landscape-mod/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1583133394845},{"_id":"themes/landscape-mod/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1583133394846},{"_id":"themes/landscape-mod/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1583133394846},{"_id":"themes/landscape-mod/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1583133394846},{"_id":"themes/landscape-mod/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1583133394846},{"_id":"themes/landscape-mod/source/fancybox/jquery.fancybox.css","hash":"f7dd490f76a52039244ab879b4219fca50c7963a","modified":1583133394847},{"_id":"themes/landscape-mod/source/fancybox/jquery.fancybox.js","hash":"61abfeea7becc4db424149d2bc693968f8b6b362","modified":1583133394847},{"_id":"themes/landscape-mod/source/fancybox/jquery.fancybox.pack.js","hash":"3ac24755c93c080990348fb9301dbbbb5fdbcab6","modified":1583133394848},{"_id":"themes/landscape-mod/source/js/script.js","hash":"e5bb8109d5c8b9cccbefaac5d63e87667b7e622c","modified":1583133394854},{"_id":"themes/landscape-mod/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1583133394796},{"_id":"themes/landscape-mod/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1583133394796},{"_id":"themes/landscape-mod/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1583133394796},{"_id":"themes/landscape-mod/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1583133394796},{"_id":"themes/landscape-mod/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1583133394802},{"_id":"themes/landscape-mod/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1583133394802},{"_id":"themes/landscape-mod/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1583133394835},{"_id":"themes/landscape-mod/source/css/_partial/article.styl","hash":"c5c2038647f9eb0e0275aef29cf4a97ed9ecb9b2","modified":1584182929380},{"_id":"themes/landscape-mod/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1583133394835},{"_id":"themes/landscape-mod/source/css/_partial/footer.styl","hash":"71a567b38128cd61269b863fbfaa7543b7a7e853","modified":1583133394835},{"_id":"themes/landscape-mod/source/css/_partial/header.styl","hash":"8f9b71923d90a25287ae10c9981cbff305b52613","modified":1583133394835},{"_id":"themes/landscape-mod/source/css/_partial/highlight.styl","hash":"98c18a448d0f974e3429b74af999197e5fefb77c","modified":1584182509067},{"_id":"themes/landscape-mod/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1583133394836},{"_id":"themes/landscape-mod/source/css/_partial/sidebar-aside.styl","hash":"a013768ebab07cc94aa8a07562c423a7a954a72c","modified":1583133394836},{"_id":"themes/landscape-mod/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1583133394836},{"_id":"themes/landscape-mod/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1583133394836},{"_id":"themes/landscape-mod/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1583133394836},{"_id":"themes/landscape-mod/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1583133394836},{"_id":"themes/landscape-mod/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1583133394846},{"_id":"themes/landscape-mod/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"4310a88abe2e05cc3d0bfc30f57be6b1395547ef","modified":1583133394846},{"_id":"themes/landscape-mod/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1583133394846},{"_id":"themes/landscape-mod/source/fancybox/helpers/jquery.fancybox-media.js","hash":"b861d5c645b8b6f98757b973e72da1c7e7198c9c","modified":1583133394847},{"_id":"themes/landscape-mod/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1583133394847},{"_id":"themes/landscape-mod/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"3d695e257e61f4cbe57adda99eb01b13785f9929","modified":1583133394847},{"_id":"themes/landscape-mod/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1583133394843},{"_id":"themes/landscape-mod/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1583133394843},{"_id":"themes/landscape-mod/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1583133394838},{"_id":"themes/landscape-mod/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1583133394839},{"_id":"themes/landscape-mod/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1583133394842},{"_id":"themes/landscape-mod/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1583133394845},{"_id":"themes/landscape-mod/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1583133394841},{"_id":"themes/landscape-mod/source/js/mermaid-v8.4.0.min.js","hash":"114cfb8f575cfb8faf7a5fcb1f330884e5ffa3b5","modified":1583133394853},{"_id":"public/atom.xml","hash":"f3e20715ff9d327527b77da9036d39d2b2dc2998","modified":1593936411820},{"_id":"public/sitemap.xml","hash":"c08b0441b2150ad029f85a979891de8f9a8d3a58","modified":1593936411822},{"_id":"public/2020/05/13/raspberry-pi.html","hash":"73b5e4b6381c83c209bca8c8c0bfac277e623e86","modified":1593936413914},{"_id":"public/2020/04/21/u-pan.html","hash":"b4bb07cab49a666176f1128244a0a765ecff1fb4","modified":1593936413916},{"_id":"public/2020/04/07/airpods-pro.html","hash":"fcbdb2b7be4fc9f1025382492467502acf0c27f0","modified":1593936413916},{"_id":"public/2020/03/18/notification-bar.html","hash":"6ade9b6e3632f6afc4f3d3f088f3c902b612cedd","modified":1593936413916},{"_id":"public/2020/03/14/cloudflare-proxy.html","hash":"d3ecd7cc597ebcb592b85ff008605dc16f3c2bc2","modified":1593936413916},{"_id":"public/2020/03/13/nvm.html","hash":"266d95e9e70c7948c81aa7059eabf071559eedba","modified":1593936413916},{"_id":"public/2020/03/04/mail-client.html","hash":"ab40ef6f7ebb63e014e7ae599fd93ba0940a7a34","modified":1593936413917},{"_id":"public/2020/03/02/mail.html","hash":"577f632ebb0d79be2334d2a2ad770148c3692892","modified":1593936413917},{"_id":"public/2020/02/08/in-app-purchase.html","hash":"86038a0bc1858a98b261910539e5fff23aa168b7","modified":1593936413917},{"_id":"public/2020/02/03/read-css-world.html","hash":"43bcbadcb33e7fa46f0e76b7e71e0911019ff0f9","modified":1593936413918},{"_id":"public/2020/02/01/popkart.html","hash":"2100442cf51a0861e21463fcd14b7a5d2efdbc2c","modified":1593936413919},{"_id":"public/2020/01/27/apple-watch-5.html","hash":"e06abee92eeffa4e1435c36816793136e31d5c40","modified":1593936413919},{"_id":"public/2020/01/09/popkart.html","hash":"a6b9003a7fc335c8ccedd900d4712781eed0ab10","modified":1593936413920},{"_id":"public/2019/12/28/gh60.html","hash":"a2a5bfcc61152030717ee1835beda597eaebbdf1","modified":1593936413920},{"_id":"public/2019/12/21/ikbc-f108.html","hash":"c0e5209f5056bdeea5fdcb38d178e5854870299a","modified":1593936413921},{"_id":"public/2019/11/12/react-redux-umi.html","hash":"dda2275cac4263da3c0abcdbfdadd803deaadd30","modified":1593936413921},{"_id":"public/2019/11/11/react-input-composition.html","hash":"977540b95915f78b41647976d1965a94ab74ca9a","modified":1593936413921},{"_id":"public/2019/11/05/vue-click.html","hash":"c5b020cd8943241bf03a719f6aa19212b2c08d02","modified":1593936413921},{"_id":"public/2019/11/03/react-redux-saga.html","hash":"cca25ef08065575522e24811956421496129958c","modified":1593936413923},{"_id":"public/2019/11/02/react-redux-combine.html","hash":"9f226e6deca582a489cee4d7beaf6e9961d9a764","modified":1593936413924},{"_id":"public/2019/11/02/react-redux.html","hash":"f560b7b4983dab87410248ebd5dbec7a860b449a","modified":1593936413924},{"_id":"public/2019/10/19/vue-input.html","hash":"b040868dd61d5c3e0e8b058dadc7d57b3ce3f301","modified":1593936413925},{"_id":"public/2019/09/21/miband3.html","hash":"ed0e6dc7009db9465d5261c3c05e36a0d540f900","modified":1593936413925},{"_id":"public/2019/08/29/knowledge-2.html","hash":"1851b4042cc420ed4dbc700362c4eefe17e1129d","modified":1593936413925},{"_id":"public/2019/08/23/knowledge-1.html","hash":"dbf3830ab7fbd16741a7fd6f1a1b5ad862d30beb","modified":1593936413925},{"_id":"public/2019/08/16/static-blog.html","hash":"0c4e4f6ab8b2fdd789636f03f255b085a8918586","modified":1593936413927},{"_id":"public/2019/07/23/hexo-blog.html","hash":"03a44a78c6e417e7331a510325d5f1b2123e68ac","modified":1593936413928},{"_id":"public/2019/07/14/learning-reat-hooks.html","hash":"9204240118a2ee0a59fb03896fb82e42f784cc71","modified":1593936413928},{"_id":"public/2019/04/25/learning-git.html","hash":"306ab9d1f9472494aa33a06f4da70a17a53c897c","modified":1593936413928},{"_id":"public/2019/04/15/learning-markdown.html","hash":"25d2444fd056464ae3e4ab2e5d0276feb0f02c31","modified":1593936413929},{"_id":"public/2019/04/10/office-e3.html","hash":"45822a3251f93a14f80c60576b391ff1fe074803","modified":1593936413930},{"_id":"public/2019/04/08/https-ssl.html","hash":"e99163ad9cbb0ecb306bed6a77feadec288a6823","modified":1593936413930},{"_id":"public/2019/02/16/electron.html","hash":"becac64a7d20ee36d273910c9d5fcfb458ab2298","modified":1593936413930},{"_id":"public/2018/12/30/class-constructor.html","hash":"1bb4d35d33c2ec81f5e2a45dfd2a7382be0d3f91","modified":1593936413931},{"_id":"public/2018/11/30/paste.html","hash":"729db5a28ac2f1203efeec84635744b3adc3fc97","modified":1593936413931},{"_id":"public/2018/11/21/ios-history-back.html","hash":"d267326916b9fd57905e4a09dd9a62abdea1ed3e","modified":1593936413931},{"_id":"public/2018/11/18/yarn.html","hash":"d8a0d41f50493e49710e3f3b143562460d8f8198","modified":1593936413931},{"_id":"public/2018/11/06/webpack.html","hash":"976198b7826215057222fd6a137d545f7d5edb2d","modified":1593936413931},{"_id":"public/2018/10/21/benq-screenbar-plus.html","hash":"8fdd217111e1ec102bb721a8af961c630df59a51","modified":1593936413931},{"_id":"public/2018/10/13/useragent.html","hash":"3eef2e02a06aef7e181ca6b910b28b9be6396497","modified":1593936413931},{"_id":"public/2018/09/12/git.html","hash":"b5c1758c1812f8048235d8599cffd1ef99f916d3","modified":1593936413931},{"_id":"public/2018/09/11/ubuntu-ipv6.html","hash":"aa029072067a6e031d936bf5795166b5c60a0af1","modified":1593936413931},{"_id":"public/2018/08/28/hosts.html","hash":"196f4686f804bac31564be94e63f2713d2488c65","modified":1593936413931},{"_id":"public/2018/07/02/adobe-creative-cloud.html","hash":"19b6b0fac34c0a3b7519aa804575a60543c6d74f","modified":1593936413931},{"_id":"public/2018/06/28/array-flattened.html","hash":"f0dce9da4ae80699b5d77e824ad1566cf1ec31fa","modified":1593936413931},{"_id":"public/2018/06/26/suigintou.html","hash":"d9630472ed4a2a8803345803372ee60e10670f0d","modified":1593936413931},{"_id":"public/2018/06/26/array-unflattened.html","hash":"39b5f755a10badcf4a63859c70121014d9e91c0e","modified":1593936413931},{"_id":"public/2018/06/20/install-macos.html","hash":"f7730073895965595d7f81673a20b09032e43e79","modified":1593936413931},{"_id":"public/2018/05/17/cross-domain.html","hash":"77bebfd24344b05330ee95e8ad4c244cd26b9d17","modified":1593936413932},{"_id":"public/2018/05/09/ajax-302.html","hash":"e3b69edcaa37e72ad13e98802fd2e05cf632218e","modified":1593936413932},{"_id":"public/2018/04/06/cdn.html","hash":"1288b33eca8483143c20b0152b7a446f085be649","modified":1593936413932},{"_id":"public/2018/03/26/event.html","hash":"9d2f9cf0ca424e80b602a2f0a2f8432b14b1b7a1","modified":1593936413932},{"_id":"public/2018/03/24/bucket.html","hash":"f119225e8b393f7598e2b4f32de20ec07a9aa794","modified":1593936413932},{"_id":"public/2018/03/11/cdn.html","hash":"d9199a044bb867e06f7a6a1d98ea1299c57d7277","modified":1593936413932},{"_id":"public/2018/02/14/summary.html","hash":"929c35f31208114ff353f5a5bf95ad935e7e5363","modified":1593936413932},{"_id":"public/2018/02/10/less-zindex.html","hash":"bae2a19f6e414c2315055fb16df45bbe98ce6e51","modified":1593936413932},{"_id":"public/2018/02/05/ubuntu.html","hash":"171f3529fdb0b6eda7f7e89fc62b566402dcea99","modified":1593936413932},{"_id":"public/2018/01/29/js-focus.html","hash":"35ba2315dd259b98d8eba746b07d8763398b7edf","modified":1593936413932},{"_id":"public/2018/01/21/js-if-eq.html","hash":"eefe58054d3b74c044f4167bd5913cec70760d73","modified":1593936413932},{"_id":"public/2018/01/20/node-mail.html","hash":"b2550a49103ab95e603d20bff24033ce81ed0f20","modified":1593936413932},{"_id":"public/2018/01/19/apache-htaccess.html","hash":"3d98c3227bbdb0b2ec71a5e72881c95237f46aa8","modified":1593936413932},{"_id":"public/2018/01/06/dom-html.html","hash":"07e442e78f04f35d3c32c76e9969eafabbcf738b","modified":1593936413932},{"_id":"public/2017/12/21/app-store.html","hash":"037a919555f736a2fa7ba3d3466c120811f62c38","modified":1593936413932},{"_id":"public/2017/10/19/ios-2.html","hash":"699664c888e7c0173301c37acc82f8e2e3e6657e","modified":1593936413933},{"_id":"public/2017/10/17/ios-1.html","hash":"455433d2a5cf8ee7724b08a20025cf8525ed4eca","modified":1593936413933},{"_id":"public/2017/10/10/objective-c-3.html","hash":"75c21f77ba3f9d3123a15a7a8d85393432c02753","modified":1593936413933},{"_id":"public/2017/10/08/objective-c-2.html","hash":"470f890354c358b06bc783250f9e74d73348dc5a","modified":1593936413933},{"_id":"public/2017/10/03/objective-c.html","hash":"af9d41a0d07410b74cbb34a3444ed884479723fc","modified":1593936413933},{"_id":"public/2017/09/21/nesting-element.html","hash":"dc0e6987bc246b5d5b5941f730f28f72c66601a2","modified":1593936413933},{"_id":"public/2017/08/05/webpack-uglifyjs-ie8.html","hash":"c5b31a02eece4b89c068b5063f9977981d5603ff","modified":1593936413933},{"_id":"public/2017/07/27/ruby.html","hash":"974a67b60e9d97342095e2b24c11e399c42503a0","modified":1593936413933},{"_id":"public/2017/07/12/vue-elementui-message.html","hash":"e0653024d54cfb91287cd3c9523b2bc2b2957ec3","modified":1593936413933},{"_id":"public/2017/06/17/git-study.html","hash":"30a0465169bf6315d05e02b5b2aa12bbc6a152e7","modified":1593936413933},{"_id":"public/2017/06/09/ubuntu-login.html","hash":"23142cd93f75308c2e778d18c7b3cd75d9b7398a","modified":1593936413933},{"_id":"public/2017/06/03/react-mobx.html","hash":"f4b4d8d8fb4c2e0d76482292809645f1f7504281","modified":1593936413933},{"_id":"public/2017/05/31/before-marry.html","hash":"d6ebd162aba5be2d135aae8804cc797820379098","modified":1593936413933},{"_id":"public/2017/05/22/js-array.html","hash":"d55d314bad22398a36b20971f393b0741f74e5bc","modified":1593936413933},{"_id":"public/2017/04/22/mac-use-ntfs.html","hash":"1f4f856b3ee3ac7813c4581108c20f42e18442d1","modified":1593936413933},{"_id":"public/2017/04/14/zz-node-require.html","hash":"989ef8c14caacfc7cfc2c6549530fcf1bfd4ff1d","modified":1593936413933},{"_id":"public/2017/03/31/go-snippet.html","hash":"0e8b2edf8eefccca27010ec2595f95f69e6620fb","modified":1593936413934},{"_id":"public/2017/03/06/share-keka.html","hash":"0ae381efeb698d93b8b3148c6a55462d5d8fcbb1","modified":1593936413935},{"_id":"public/2017/03/05/js-flexible.html","hash":"bcf2c7722b5919f586af1bc7433c659b04cdcd10","modified":1593936413935},{"_id":"public/2017/03/01/jekyll-brace.html","hash":"bd4cea37c48075840873a91c4d7cd67d4ac084bc","modified":1593936413936},{"_id":"public/2017/02/26/js-prototype.html","hash":"9e9c1a0b3445c1e2f21376019c52f4f22a62511e","modified":1593936413936},{"_id":"public/2017/02/21/js-new.html","hash":"9519f7dd49a6ef59e07e8332434f2549552054c3","modified":1593936413936},{"_id":"public/2017/02/19/webpack2-2.html","hash":"b946151f43043aedbfe030726398cf32038bc916","modified":1593936413936},{"_id":"public/2017/02/05/zz.html","hash":"344321935e8ba56cda6a26da60199235e3f49a49","modified":1593936413936},{"_id":"public/2017/02/04/webpack2-1.html","hash":"7ffdc51a889f3ba6275171a99866001feb62b300","modified":1593936413936},{"_id":"public/2017/01/19/webpack-2.html","hash":"95541ba34084069711b1b8a6f7cc3f121c85fd54","modified":1593936413936},{"_id":"public/2017/01/09/js-template-compile.html","hash":"f1d2b09422f25a3bade416c389ea0e8daca00cac","modified":1593936413936},{"_id":"public/2017/01/09/chrome-https-error.html","hash":"dec83577aa4508af7afccba27d0e256d66856948","modified":1593936413936},{"_id":"public/2017/01/06/webpack-1.html","hash":"9df12cfd5ed889150e1ddd7dc55d2f16e0a362d9","modified":1593936413936},{"_id":"public/2017/01/04/ikbc-f108.html","hash":"2d4faca56c536df848bd0e4a64d58ee46ac918fe","modified":1593936413936},{"_id":"public/2016/12/12/netease-you.html","hash":"bd633fdc60604c094143913b1b61eb2ae3ee17bf","modified":1593936413936},{"_id":"public/2016/12/07/css-charset.html","hash":"602eddb4df90f768622f2176a95afecce1d529c8","modified":1593936413936},{"_id":"public/2016/12/06/octocat-figurine.html","hash":"1c2371f776aaf83c6641848bc4b8bd9b522a3002","modified":1593936413936},{"_id":"public/2016/12/01/npm-introduction.html","hash":"effb218d93b5090e8b1c57904843ae3e567ed202","modified":1593936413936},{"_id":"public/2016/11/27/simack-v10.html","hash":"efb1399989bbaebc8427874107e0cf975582562e","modified":1593936413937},{"_id":"public/2016/11/18/share-drunarchiver.html","hash":"93a49fff8f6d98ef620e0efcf8b78dc9283a6655","modified":1593936413937},{"_id":"public/2016/10/31/codewars-father-and-son.html","hash":"43af719fd3f787103c20f889ac06099e3a01a0a5","modified":1593936413937},{"_id":"public/2016/10/28/sin36.html","hash":"1647bd2b7aafcc5ca96a6c2e3b0e5e24dd506113","modified":1593936413937},{"_id":"public/2016/10/26/kingston.html","hash":"9a9c3c95573229c45199cff55fe7ed5751b3b86a","modified":1593936413937},{"_id":"public/2016/10/23/buy-beyond-compare.html","hash":"bd0e4c99c065e97cc6553cd2bd8637631fed7589","modified":1593936413937},{"_id":"public/2016/10/19/how-to-use.html","hash":"b0d5f1dafbd1c98cf0d858bd7da0f732f35785ea","modified":1593936413937},{"_id":"public/2016/10/19/blog-show.html","hash":"cad953553fce4fd2eeb5d559bd238df759b5f022","modified":1593936413937},{"_id":"public/2016/10/15/why-blog.html","hash":"e6015f2b843dd18bde8e9c469c0ce6584370b2c6","modified":1593936413937},{"_id":"public/2016/10/15/hello-world.html","hash":"2979b6521545be7a12bf4da3f9523c9f8c6f8105","modified":1593936413938},{"_id":"public/archives/index.html","hash":"19b2654922d135b6327a2ee4c4723762e4d5c946","modified":1593936413938},{"_id":"public/archives/page/2/index.html","hash":"2890af43c13c26ad951c6ffe7480809d83802969","modified":1593936413938},{"_id":"public/archives/page/3/index.html","hash":"651f1a2bb8df98599c2777c00e6c099594a8946b","modified":1593936413938},{"_id":"public/archives/2016/index.html","hash":"fe3104808f027c7950134a13be4a257e99ccc426","modified":1593936413938},{"_id":"public/archives/2016/10/index.html","hash":"12b594aade0e091a828f1361d705cd5cd699d9ed","modified":1593936413938},{"_id":"public/archives/2016/11/index.html","hash":"ad0fe64d782649106c2dde910816b873d21ee7d6","modified":1593936413938},{"_id":"public/archives/2016/12/index.html","hash":"58fed1e24f5425cc45cc9d9cbd5a33276cc9e398","modified":1593936413938},{"_id":"public/archives/2017/index.html","hash":"6fc99f1ef4283b9eae394edda53e00c742b3fcb9","modified":1593936413938},{"_id":"public/archives/2017/01/index.html","hash":"062dfec2f64bd9c3e5ca508751f41f3d0e163ab2","modified":1593936413939},{"_id":"public/archives/2017/02/index.html","hash":"148a75f3f87de070bf517f7e15c0fe67ce6dd305","modified":1593936413939},{"_id":"public/archives/2017/03/index.html","hash":"34ddc2ee0c72f85f32eb9ea1dd9b7304753813a8","modified":1593936413939},{"_id":"public/archives/2017/04/index.html","hash":"103e87477c2a7dfe4a7cb25f6dfb83e4d1552769","modified":1593936413939},{"_id":"public/archives/2017/05/index.html","hash":"0181d432ba2266de2b515613d6b1104689064045","modified":1593936413939},{"_id":"public/archives/2017/06/index.html","hash":"fd884cef806be028d5593dd3cd52ca47e57acffb","modified":1593936413939},{"_id":"public/archives/2017/07/index.html","hash":"d9eb2cf81410c2b9db9c58d89395bec82c1c05cf","modified":1593936413939},{"_id":"public/archives/2017/08/index.html","hash":"6051e2a45eb3785d9a5b44a8c1059c9d12572c6a","modified":1593936413939},{"_id":"public/archives/2017/09/index.html","hash":"a6e3da85183e8e5b5a581add72b1014b655d9860","modified":1593936413939},{"_id":"public/archives/2017/10/index.html","hash":"7aff643874637c8f3607b8bdbdc0c69b9c6334cf","modified":1593936413939},{"_id":"public/archives/2018/index.html","hash":"939838879092ca212b62878e3f0854efdbb408cd","modified":1593936413939},{"_id":"public/archives/2018/01/index.html","hash":"ee296b1ad54603317ad5f428ec210d8c40d00a87","modified":1593936413939},{"_id":"public/archives/2018/02/index.html","hash":"fed0937c26e2cc876c11d3865753ef5f238212a9","modified":1593936413939},{"_id":"public/archives/2017/12/index.html","hash":"ee768c79bd83283822499910071905b4df46b14e","modified":1593936413939},{"_id":"public/archives/2018/03/index.html","hash":"30e91f20792fa316517cfe8d4e60251e3f5b8a53","modified":1593936413939},{"_id":"public/archives/2018/04/index.html","hash":"31e9737ee280fed4b913b67f0f932571aed6b683","modified":1593936413939},{"_id":"public/archives/2018/05/index.html","hash":"b87d2dd1d4a28d7cc137cb710582d7b21bd6e881","modified":1593936413939},{"_id":"public/archives/2018/06/index.html","hash":"49f7332dfbad9f02273131db4ea48c5dc2ac4cee","modified":1593936413939},{"_id":"public/archives/2018/07/index.html","hash":"d9a54dfc1c5543aa1c5517f90dfe034b5b9494d0","modified":1593936413940},{"_id":"public/archives/2018/08/index.html","hash":"2bf05e3afd5d44a6acba070a4fd37477dee8ddf1","modified":1593936413940},{"_id":"public/archives/2018/09/index.html","hash":"89a0db54098aecdefb0aa0e7ecef0ec4eac22d52","modified":1593936413940},{"_id":"public/archives/2018/10/index.html","hash":"14177092578a66edda6375e519a539b434f01d3c","modified":1593936413940},{"_id":"public/archives/2018/11/index.html","hash":"0d2e41eed70556d9f840b5b7fb14b9124c08c8d2","modified":1593936413940},{"_id":"public/archives/2018/12/index.html","hash":"37822984f96e21f4194b7db38b3cee077e8d30ea","modified":1593936413940},{"_id":"public/archives/2019/index.html","hash":"17c89191eafdfa082a412b3f18409edf79fd37b5","modified":1593936413940},{"_id":"public/archives/2019/02/index.html","hash":"de5e6ba6b97a5effe328247f22492d322f44b516","modified":1593936413940},{"_id":"public/archives/2019/04/index.html","hash":"e603da44f13e3fc35de8e47d87eb293fca47cf02","modified":1593936413940},{"_id":"public/archives/2019/07/index.html","hash":"597a0793f910c10ae32768de0e32a88dc336b3d0","modified":1593936413940},{"_id":"public/archives/2019/09/index.html","hash":"329b9a2c2bab65c0ff93841a5e549be59667ffd7","modified":1593936413940},{"_id":"public/archives/2019/08/index.html","hash":"8a0d66442fa7c923e45ed22fd9c83a5ef96eebc8","modified":1593936413940},{"_id":"public/archives/2019/10/index.html","hash":"509067349283e9288e468ea485fe6d23721cfaa0","modified":1593936413940},{"_id":"public/archives/2019/11/index.html","hash":"90cb8c44f41d05999eceaafd19fb60c3d70c9878","modified":1593936413940},{"_id":"public/archives/2019/12/index.html","hash":"ebf3b3e54b8edcae70a5962e9add2a43b99b05ea","modified":1593936413940},{"_id":"public/archives/2020/index.html","hash":"83f17f9560a0eb41af3fcbd1c1e7259b5bb825ea","modified":1593936413940},{"_id":"public/archives/2020/01/index.html","hash":"76d66f5541c85217ef6b230f40bf65ef48c629db","modified":1593936413941},{"_id":"public/archives/2020/02/index.html","hash":"405285c968ddcca11d16dd587e60bc31d43942cd","modified":1593936413941},{"_id":"public/archives/2020/03/index.html","hash":"a36406c3d8c7914d0eddaa56a0bfa018ec1f24d0","modified":1593936413941},{"_id":"public/archives/2020/04/index.html","hash":"a160c2df1d559867c161c47c2c1a7cf95687ab9e","modified":1593936413941},{"_id":"public/archives/2020/05/index.html","hash":"fc80ab954e81f471c39a10e56efe071ae46c020c","modified":1593936413941},{"_id":"public/categories/随笔/index.html","hash":"050277ff1447cf0f2aef858e7de51853e845ce06","modified":1593936413941},{"_id":"public/categories/theme/index.html","hash":"87221bfe4a4b157557b197fd02140a3a8e018b20","modified":1593936413941},{"_id":"public/categories/数学/index.html","hash":"3d08cf6682e27f4236fbb7e23ad57787e224d565","modified":1593936413942},{"_id":"public/categories/codewars/index.html","hash":"fe875138dd1871efd638e0228b4eae582bb32152","modified":1593936413943},{"_id":"public/categories/软件/index.html","hash":"a69278c71aa4f5e41ba1a60d1b26c319719016d6","modified":1593936413944},{"_id":"public/categories/前端/index.html","hash":"8d63181d5743f2f951585fd1ccf19fb274ac9d75","modified":1593936413945},{"_id":"public/categories/前端/page/2/index.html","hash":"53b33287cbd80552326852ea7900485f9281b15a","modified":1593936413945},{"_id":"public/categories/前端/page/3/index.html","hash":"5deea66d4085fadc21ba5d0026a8d85721deeb8f","modified":1593936413945},{"_id":"public/categories/外设/index.html","hash":"0fe9aafd112aa93f9e307d2c8b5806db262619a3","modified":1593936413945},{"_id":"public/categories/编程/index.html","hash":"9775613ec159053823ab97f4b175d61705631cda","modified":1593936413945},{"_id":"public/categories/技术/index.html","hash":"7f20197da27736bfe8bc92df4f62fce4aaf2d093","modified":1593936413945},{"_id":"public/categories/杂谈/index.html","hash":"f1742a7584020c7dc40f0297cf04ea06b0123934","modified":1593936413946},{"_id":"public/categories/开发板/index.html","hash":"19311bd73289f7b4f50913af3e91d2d6ea13fac3","modified":1593936413946},{"_id":"public/categories/一句话知识/index.html","hash":"484d1dbf6280dd64eaa875f93ead0c4fde3b165d","modified":1593936413946},{"_id":"public/index.html","hash":"069d02c569814eeaad8475bc701225a6c77ac7cf","modified":1593936413946},{"_id":"public/page/2/index.html","hash":"691876a6326bd0dd0dc647c01fc22ef4336106a9","modified":1593936413946},{"_id":"public/page/3/index.html","hash":"64829cfdda08ed5f95dc64c0a7aaabe01814cf9a","modified":1593936413946},{"_id":"public/page/4/index.html","hash":"ad62e9950f602893b93292abce9efed03038a1f7","modified":1593936413946},{"_id":"public/page/5/index.html","hash":"2e7f5b3bf92ba7b9d3362ba1474bb678d001a98e","modified":1593936413946},{"_id":"public/page/6/index.html","hash":"7bb5f06d41bd0dff88944863f4beaef1439d7167","modified":1593936413946},{"_id":"public/page/7/index.html","hash":"48efbc55329a7bbcf112135cc3114d21b67855d1","modified":1593936413946},{"_id":"public/page/8/index.html","hash":"ccddb355acf690f7ea49bcd638364b5c3236fa35","modified":1593936413946},{"_id":"public/page/9/index.html","hash":"37dcc975dc99186f2977752b348567c7e45c3b02","modified":1593936413946},{"_id":"public/page/10/index.html","hash":"4e8dcf8e72d1e4d41508553d0a29e045732a3251","modified":1593936413946},{"_id":"public/page/11/index.html","hash":"94f81f41dca3f90fd81b836a84f077ae4fc31262","modified":1593936413947},{"_id":"public/tags/博客/index.html","hash":"80836b72d73e36bbc533bb1bfe0b3f0102bbae1d","modified":1593936413947},{"_id":"public/tags/simack/index.html","hash":"d63c4e2b9fb76d1a181b50f3d2a9787b8c2357b6","modified":1593936413947},{"_id":"public/tags/beyond-compare/index.html","hash":"3fd26ee90d3b95b06d0713d4b02b3407ec50f62d","modified":1593936413947},{"_id":"public/tags/bc/index.html","hash":"3d63c318f3f84ff1df65198492468b36eebe28b4","modified":1593936413947},{"_id":"public/tags/金士顿/index.html","hash":"94b60f30685c2b2aa0aab4b0adb52c958c3fbe09","modified":1593936413947},{"_id":"public/tags/u盘/index.html","hash":"311dcfceee5ff3607ccf072f37890980ea6f9176","modified":1593936413947},{"_id":"public/tags/计算/index.html","hash":"0f2628e6f606ddf55bc056c0d40e4a17ae9f66c9","modified":1593936413947},{"_id":"public/tags/数学/index.html","hash":"5799a80666d9e7911f7f5930205563eb652a4188","modified":1593936413947},{"_id":"public/tags/codewars/index.html","hash":"a958bb2ba4bc4fc88ba4f2e915dd74520cba4c56","modified":1593936413947},{"_id":"public/tags/node/index.html","hash":"790f6a2cada7a58142541a5880324ace2bc61c61","modified":1593936413947},{"_id":"public/tags/npm/index.html","hash":"162cb1419dfa19df6605cb64d3e398e3a839ee73","modified":1593936413947},{"_id":"public/tags/Octocat-Figurine/index.html","hash":"3e8f1894be8a383051f7fba21386c647e44bfc6c","modified":1593936413947},{"_id":"public/tags/章鱼猫/index.html","hash":"3545d64c866b1ef72d9d470f36f2e44f1c7f7574","modified":1593936413947},{"_id":"public/tags/github/index.html","hash":"f143a5d5159b5afa4ab936cda347f2480edeafce","modified":1593936413947},{"_id":"public/tags/css/index.html","hash":"c953d799e8f8858c9298fe8db86dc52ac65b771f","modified":1593936413948},{"_id":"public/tags/编码/index.html","hash":"df90223f7ef07477d918190b95c6c199b89a31cb","modified":1593936413948},{"_id":"public/tags/未央猪肉/index.html","hash":"1f9a1e6f76cdb17f73d33192e22273f4c915de68","modified":1593936413948},{"_id":"public/tags/网易/index.html","hash":"4c7b0fec7f16a16eabd33f82e96e6439e9868fd5","modified":1593936413948},{"_id":"public/tags/严选/index.html","hash":"805fdc8a614a7755b37d91a3b5e297255c30b18b","modified":1593936413949},{"_id":"public/tags/网易严选/index.html","hash":"7ee0e02effe81a4978467e61c0043e6fd007cad6","modified":1593936413949},{"_id":"public/tags/优惠券/index.html","hash":"446a4b5d0beb1c9f17155469b38d8d98d0271ff2","modified":1593936413949},{"_id":"public/tags/机械键盘/index.html","hash":"9f1686a0971fbcc4af166b87723aec9a19d9527c","modified":1593936413949},{"_id":"public/tags/键盘/index.html","hash":"efea3226e2994717e2d04e1e46df40050770064d","modified":1593936413949},{"_id":"public/tags/ikbc/index.html","hash":"26a43e29d30849cb91387be5636ebf1adeffa1fe","modified":1593936413949},{"_id":"public/tags/webpack/index.html","hash":"5a0abd3b1122afc76a9c919e44f6ee1c9f378e9a","modified":1593936413949},{"_id":"public/tags/chrome/index.html","hash":"ee6ae7aa11a196d0763086ec01bbf8c351f19d15","modified":1593936413949},{"_id":"public/tags/https/index.html","hash":"35f41e6b822f88fc81c6342eeb361bdfcc14960b","modified":1593936413949},{"_id":"public/tags/无法连接/index.html","hash":"d34467dee62009c2da3c658065d984d64e6f2e84","modified":1593936413949},{"_id":"public/tags/模板/index.html","hash":"9247c020a91cb06edb918986279f3282192e3901","modified":1593936413949},{"_id":"public/tags/编译/index.html","hash":"173121296f75e720e83b10c1916e8ca74b064bb6","modified":1593936413950},{"_id":"public/tags/js/index.html","hash":"2978761e3efc1538edbe708766f7bb67ad0485e9","modified":1593936413950},{"_id":"public/tags/new/index.html","hash":"0638270574079ed71c11fabb6baee7a0e26a6a3f","modified":1593936413950},{"_id":"public/tags/proto/index.html","hash":"5eefa690f23e4604d6782de413082be5384add34","modified":1593936413950},{"_id":"public/tags/prototype/index.html","hash":"49b3eb656952548c107a67f14243a1cbeb90b736","modified":1593936413950},{"_id":"public/tags/constructor/index.html","hash":"b5f0b7e8988842fbfe5f9be2a28ea272ec14a7ff","modified":1593936413950},{"_id":"public/tags/jekyll/index.html","hash":"1f17b29fcd4a1801da9921e9ddb96acf283fcca5","modified":1593936413950},{"_id":"public/tags/括号/index.html","hash":"84b5228d8a4f452cb8b10b653ef3832fe59a2ad4","modified":1593936413951},{"_id":"public/tags/转义/index.html","hash":"fc468a09f8990a36cbfaa6181dad6dbbfa15da90","modified":1593936413951},{"_id":"public/tags/flexible/index.html","hash":"0b38a1fb8333ff4ca4449c02c6bbe3fe53d375dd","modified":1593936413951},{"_id":"public/tags/keka/index.html","hash":"f50754344be501457a623b7b2dc028a8e5ea33c7","modified":1593936413951},{"_id":"public/tags/go/index.html","hash":"8cb37b4b58f471ff8888bbfa96e5dd89661af3ed","modified":1593936413951},{"_id":"public/tags/指针/index.html","hash":"de307c56cc4e5509d8c103c537e9751ac6582b2d","modified":1593936413951},{"_id":"public/tags/module/index.html","hash":"31115ea64d08657d1ee2513d9babc8b27503d38f","modified":1593936413951},{"_id":"public/tags/require/index.html","hash":"e13c9024f006073a537b81670f1b1f981f773680","modified":1593936413951},{"_id":"public/tags/MAC/index.html","hash":"2a32196ba17db1f9442d67d356f64c8f6f82222b","modified":1593936413951},{"_id":"public/tags/NFTS/index.html","hash":"f99ca0ab6def128aac2da573a8d1aeec2975af80","modified":1593936413951},{"_id":"public/tags/U盘/index.html","hash":"d2ff9041a44d337643444926b834f13d95299ec3","modified":1593936413951},{"_id":"public/tags/array/index.html","hash":"308ed46bd5335e5738bddcb06e480e5b5ea92153","modified":1593936413952},{"_id":"public/tags/恋爱/index.html","hash":"aa68f656ffcdf45f3b1325c4fc17e94cacdf629e","modified":1593936413952},{"_id":"public/tags/长辈相处/index.html","hash":"3fc75649f997fa0e9d53928e922726f610a8a36e","modified":1593936413952},{"_id":"public/tags/react/index.html","hash":"5ecb72881b397f571ce18cf87aef5b1e6255eec7","modified":1593936413952},{"_id":"public/tags/mobx/index.html","hash":"3a862412b35146f71b7c48f92599fdfaba4868b7","modified":1593936413953},{"_id":"public/tags/ubuntu/index.html","hash":"c57f5e9b93eebfd9c6aafde9d35565aa87cefed1","modified":1593936413953},{"_id":"public/tags/访客/index.html","hash":"d52df534c79c3593209d59d638964f4a1c55c4a0","modified":1593936413953},{"_id":"public/tags/登录/index.html","hash":"558ac47564f67ca6fd9840c1f14892dfc4c86960","modified":1593936413953},{"_id":"public/tags/git/index.html","hash":"5ba5c299f7d0c5358e206d8444171cf8f9107b03","modified":1593936413953},{"_id":"public/tags/vue/index.html","hash":"f6b9de0a70896e9e164b1c035bf42034d3e16e41","modified":1593936413953},{"_id":"public/tags/elementUI/index.html","hash":"64cb8cb24e29f2395447d809edfcc1d506048836","modified":1593936413953},{"_id":"public/tags/ruby/index.html","hash":"cc006b85fa76f57b8ef16f9c8a585e43426b12db","modified":1593936413953},{"_id":"public/tags/uglifyjs/index.html","hash":"5fe8b044f069c55e0ac650267adeef23733ed86c","modified":1593936413953},{"_id":"public/tags/ie8/index.html","hash":"8ecf03653f4defd68dfaef516bef79d39ddc3f34","modified":1593936413953},{"_id":"public/tags/render/index.html","hash":"82dadcebc01f8313664fa3243e8e1f8509307ad9","modified":1593936413953},{"_id":"public/tags/Objective-C/index.html","hash":"bfdf6d87dbc60ed06743cbe7345a9d3885445ba3","modified":1593936413953},{"_id":"public/tags/App-Store/index.html","hash":"58c10f9d03a41540e2f6178cac8defbb5c0a19ce","modified":1593936413953},{"_id":"public/tags/Pin/index.html","hash":"938c3621d9016a0b37885d4d7a1329e1a308e9b4","modified":1593936413953},{"_id":"public/tags/DOM/index.html","hash":"27052d5b9897209ce5c3422476bc18f5e608025c","modified":1593936413953},{"_id":"public/tags/apache/index.html","hash":"fe99cbc968af6eebfee163f2cb93b55575296ccf","modified":1593936413954},{"_id":"public/tags/htaccess/index.html","hash":"b238f7cdf805bb6664205dc0fbebab7606202372","modified":1593936413954},{"_id":"public/tags/mail/index.html","hash":"0f6259ec3e742d9edec0096182a91d9ed822ee63","modified":1593936413954},{"_id":"public/tags/nodemailer/index.html","hash":"41c7bfb1a4671f4798cc7b87978b385d9cd0066c","modified":1593936413954},{"_id":"public/tags/focus/index.html","hash":"0c973e114bec9a75b7fd9c2a7adcef5f561e280b","modified":1593936413954},{"_id":"public/tags/blur/index.html","hash":"567806e156cab8c7a7bcd3e61cc97dd1dbecfad1","modified":1593936413954},{"_id":"public/tags/if/index.html","hash":"86a657495f291b08f12c3a1094343abf253fb84e","modified":1593936413954},{"_id":"public/tags/equal/index.html","hash":"949ac6dbf732f4b6434c43175a0419db9e2cecd8","modified":1593936413954},{"_id":"public/tags/less/index.html","hash":"ed9d5bbf50bdac88fbe1107727455935060b1b48","modified":1593936413954},{"_id":"public/tags/OptimizeCssAssetsPlugin/index.html","hash":"738bc43fc98fb3274111d9ea1f2afb51253c4380","modified":1593936413954},{"_id":"public/tags/cssnano/index.html","hash":"ab7e88d717c94265ab9b4842cee2dbd8dc94cebc","modified":1593936413954},{"_id":"public/tags/cdn/index.html","hash":"36d804b55731282611f7c0c0cc1723d11589718d","modified":1593936413954},{"_id":"public/tags/对象存储/index.html","hash":"be05f0f2e17f6ecd2aafe2b236b5c94927d5b8df","modified":1593936413954},{"_id":"public/tags/COS/index.html","hash":"4931f11bb645d85e70ed9eaa52c9597a38383595","modified":1593936413954},{"_id":"public/tags/OSS/index.html","hash":"e34258b2fb3ca01505a0ff175ff377e4a7923888","modified":1593936413954},{"_id":"public/tags/CustomEvent/index.html","hash":"3285b9cd889fc2e7fccb60363085525b0e9ab446","modified":1593936413954},{"_id":"public/tags/blog/index.html","hash":"8f4fe7ae232086dc30f543a464252620affad173","modified":1593936413954},{"_id":"public/tags/jquery/index.html","hash":"31e648fa6b75b5378835f253496d013514ee242e","modified":1593936413955},{"_id":"public/tags/axios/index.html","hash":"53ed498ae7373cfc427f1d5f7d3ca76746c911bb","modified":1593936413955},{"_id":"public/tags/ajax/index.html","hash":"353be99ab71eb5c538554996ecb1792230430e99","modified":1593936413955},{"_id":"public/tags/macOS/index.html","hash":"1ce78af9f64587afd465b5e7b3c888f5f773e095","modified":1593936413955},{"_id":"public/tags/重装系统/index.html","hash":"ca5f9568391eaa63f4ad3d41d5d3d1190f57a58e","modified":1593936413956},{"_id":"public/tags/cross-domain/index.html","hash":"d56717ddf4a85834bc548655309b75363d8a1df7","modified":1593936413956},{"_id":"public/tags/扁平化/index.html","hash":"3772a71b24e2d11885c38b3ef6189ec8ef3742f4","modified":1593936413956},{"_id":"public/tags/蔷薇少女/index.html","hash":"aa1b10723b84b2d17031c413f4ebf27f5f305f63","modified":1593936413956},{"_id":"public/tags/水银灯/index.html","hash":"69dc1a9133bcfa18805deb3ca1165a486b85663c","modified":1593936413956},{"_id":"public/tags/adobe/index.html","hash":"de841c4277c2e1f0947e0436a622245f79f3389b","modified":1593936413956},{"_id":"public/tags/cc/index.html","hash":"1cf00f799b4e91ae9b88c01c5b5edc9b47c0244b","modified":1593936413956},{"_id":"public/tags/hosts/index.html","hash":"509acda427efcdd767cde578cce2dabef8a4f4c1","modified":1593936413956},{"_id":"public/tags/iHosts/index.html","hash":"7c29bfad2e7f17e474777c867a444fc6cda74e45","modified":1593936413956},{"_id":"public/tags/SwitchHosts/index.html","hash":"0da266b2bc08f97980b0ba29c36fd2879a6e6c0f","modified":1593936413956},{"_id":"public/tags/Hozz/index.html","hash":"00805cd61264490b51a48e79a01992d83b23ec51","modified":1593936413957},{"_id":"public/tags/cloudcone/index.html","hash":"b59b5c74a0c8d7ebc55bfa2e5e4b09613f5c6f17","modified":1593936413957},{"_id":"public/tags/ipv6/index.html","hash":"2a24be085763cb864be89e2404a733de86058627","modified":1593936413957},{"_id":"public/tags/配置/index.html","hash":"ecaee29ed45fc7c00ac7ff242d43a9e1626e478e","modified":1593936413957},{"_id":"public/tags/useragent/index.html","hash":"da0e8462bcc4d1974ba8ae8a00982b09dcdfa682","modified":1593936413957},{"_id":"public/tags/benq/index.html","hash":"42d9fe34e04de1f3a1ab1a2bf6d90bd0ccee6bc6","modified":1593936413957},{"_id":"public/tags/screenbar/index.html","hash":"0e2c858940400f5d71941a051e678603de0ee15c","modified":1593936413957},{"_id":"public/tags/babel/index.html","hash":"7de541960c7ee701065ad87c98489ce1b761da42","modified":1593936413957},{"_id":"public/tags/ios/index.html","hash":"21f28b541c63b7de2d3fe59863b1b06ced05558d","modified":1593936413957},{"_id":"public/tags/safari/index.html","hash":"37776e2fd34026c3ac0e3dd2bc68ef3d3ae19a42","modified":1593936413957},{"_id":"public/tags/history/index.html","hash":"907001ce43f9a6370dd4b9bc500227d30d8c48c2","modified":1593936413958},{"_id":"public/tags/后退/index.html","hash":"3b61621d0c303be83eca723587b949aaa079d177","modified":1593936413958},{"_id":"public/tags/yarn/index.html","hash":"09bebcffb77e6aa7615193161e201d38b808b2ec","modified":1593936413958},{"_id":"public/tags/1Clipboard/index.html","hash":"82bd93b0716238b3197fb105a07ff136e497eb48","modified":1593936413958},{"_id":"public/tags/Clipy/index.html","hash":"ca1a34c1b6c969c28217e9c7d197238610a3ebc3","modified":1593936413958},{"_id":"public/tags/Paste/index.html","hash":"cfee2311b247cf70c9f0dafbfa71b5b29c347c17","modified":1593936413958},{"_id":"public/tags/iPaste/index.html","hash":"9bc479636c388f46a936dd60f628689ff37c5ca5","modified":1593936413958},{"_id":"public/tags/electron/index.html","hash":"7d8ce7d6c90c870e50abff4890c3dc81fedcafef","modified":1593936413958},{"_id":"public/tags/electron-builder/index.html","hash":"a74ed607aac128c0a850ee83ad4cdadffbf8c57d","modified":1593936413958},{"_id":"public/tags/cert/index.html","hash":"a737a2418e322890819eed07f68b070fffb2eea0","modified":1593936413958},{"_id":"public/tags/office/index.html","hash":"7909605cff0b69dc5013fedffcf2d119223778ee","modified":1593936413958},{"_id":"public/tags/CA/index.html","hash":"5210222a4566e7404069a559873e39509c028874","modified":1593936413958},{"_id":"public/tags/markdown/index.html","hash":"0bb2d4da7f20fc1c6766876b4339c751ea04ff2c","modified":1593936413958},{"_id":"public/tags/hooks/index.html","hash":"971d44c7c8d01eb1bec48fdd54453f49a2e687aa","modified":1593936413958},{"_id":"public/tags/hexo/index.html","hash":"15efefc28652a6f7202cc252aaada2a19282f72a","modified":1593936413958},{"_id":"public/tags/小米手环/index.html","hash":"33c3bf5a65877288d1fec2324ee5e485f853c474","modified":1593936413958},{"_id":"public/tags/input/index.html","hash":"0354ba98087ad44a25c170641cb33a2d2c5871bc","modified":1593936413958},{"_id":"public/tags/redux/index.html","hash":"4d346cf0f02150405ead62bcd71351f730a1df48","modified":1593936413959},{"_id":"public/tags/saga/index.html","hash":"19e9964f25f798aaa13f52a381cdcbd144f28911","modified":1593936413959},{"_id":"public/tags/event/index.html","hash":"adf0232a550217ae5e02b06a2623e974d1fce43c","modified":1593936413959},{"_id":"public/tags/composition/index.html","hash":"accf360fc208998060d4c733da338b8c1067646c","modified":1593936413959},{"_id":"public/tags/umi/index.html","hash":"ebd978137032c5b9b4b78d89c9db19e40403c2a8","modified":1593936413959},{"_id":"public/tags/f108/index.html","hash":"0db52faccdb19abc07ee6d81726d5879f6650711","modified":1593936413959},{"_id":"public/tags/GH60/index.html","hash":"a256c9f968e706109ae93c69041f64f90515feb9","modified":1593936413959},{"_id":"public/tags/客制化/index.html","hash":"2db30cb402b91ce46adcdaec48d7187d3abfb776","modified":1593936413959},{"_id":"public/tags/跑跑卡丁车/index.html","hash":"48e83576adc78f04db0dad36512d236d34d3d856","modified":1593936413959},{"_id":"public/tags/Apple-Watch/index.html","hash":"2050b208df64730bc1976a2b6d7500303afb57e6","modified":1593936413959},{"_id":"public/tags/CSS世界/index.html","hash":"b105b805bf853ab660cbb4c08a767bc49d120233","modified":1593936413959},{"_id":"public/tags/读书/index.html","hash":"367cfae763d89148dd23789ecd9aa3d36a2b2d7e","modified":1593936413959},{"_id":"public/tags/jsbox/index.html","hash":"3df7bea2de3818d166cb428e5f2ebb6a9f03b5d7","modified":1593936413959},{"_id":"public/tags/paste/index.html","hash":"a91a9234698bedc66cd385a78276d9d9e0b49d12","modified":1593936413959},{"_id":"public/tags/email/index.html","hash":"bdf743528e8c08c342f0290710ce7b9939910068","modified":1593936413959},{"_id":"public/tags/域名邮箱/index.html","hash":"b3cf03037a4adfeb0d42031af508613bf6a4cd3c","modified":1593936413959},{"_id":"public/tags/邮箱/index.html","hash":"55317a1926792bc9e8905e7758ba36a7e50ae212","modified":1593936413960},{"_id":"public/tags/nvm/index.html","hash":"3255a82e03357d042c4debf72336ccc4eaaba983","modified":1593936413960},{"_id":"public/tags/cloudflare/index.html","hash":"97996473403a2f1f7de5e5de21a73dceb7e500d3","modified":1593936413960},{"_id":"public/tags/workers/index.html","hash":"eab79a3a7897efd618ba3747482ac0ffb0769176","modified":1593936413960},{"_id":"public/tags/proxy/index.html","hash":"cc9fd250c531c0ca35d8aa6e44222a827a7a6180","modified":1593936413960},{"_id":"public/tags/iStat-Menus/index.html","hash":"7887be454c1cda8ff5bd1caa2e17d67c88c0df8f","modified":1593936413960},{"_id":"public/tags/Itsycal/index.html","hash":"b750d18f5d97790d02b547029562a2995996421d","modified":1593936413960},{"_id":"public/tags/BitBar/index.html","hash":"f8e00eacaa8666f87bcfc9fd90b1c95bfbe0a85b","modified":1593936413960},{"_id":"public/tags/AirPods-Pro/index.html","hash":"25d877800f9e412cb850db3fe1d7252d9d29877c","modified":1593936413960},{"_id":"public/tags/Windows/index.html","hash":"788343995d8817b8e63450c1032ecb04c493f012","modified":1593936413960},{"_id":"public/tags/Linux/index.html","hash":"f851cdbe8e0e37da84bf55f27984cbb2e7359748","modified":1593936413960},{"_id":"public/tags/树莓派/index.html","hash":"c803d623fcf633887abdfc8442628f869a7973e2","modified":1593936413960},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1592642013727},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1592642013728},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1592642013728},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1592642013728},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1592642013728},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1592642013728},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1592642013728},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1592642014315},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1592642014316},{"_id":"public/fancybox/jquery.fancybox.css","hash":"f7dd490f76a52039244ab879b4219fca50c7963a","modified":1592642014327},{"_id":"public/js/script.js","hash":"e5bb8109d5c8b9cccbefaac5d63e87667b7e622c","modified":1592642014327},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"4310a88abe2e05cc3d0bfc30f57be6b1395547ef","modified":1592642014327},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1592642014327},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"b861d5c645b8b6f98757b973e72da1c7e7198c9c","modified":1592642014327},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1592642014327},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"3d695e257e61f4cbe57adda99eb01b13785f9929","modified":1592642014328},{"_id":"public/css/style.css","hash":"22d17c28e31d3aed1d6201059397b52204a38f4f","modified":1592642014328},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"3ac24755c93c080990348fb9301dbbbb5fdbcab6","modified":1592642014328},{"_id":"public/fancybox/jquery.fancybox.js","hash":"61abfeea7becc4db424149d2bc693968f8b6b362","modified":1592642014328},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1592642014328},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1592642014328},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1592642014328},{"_id":"public/js/mermaid-v8.4.0.min.js","hash":"114cfb8f575cfb8faf7a5fcb1f330884e5ffa3b5","modified":1592642014392},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1592642014392},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1592642014566},{"_id":"source/_posts/2020/2020-05-23-docker.md","hash":"f131638eafbc6ad33e4641298795780e94e78fb8","modified":1590221415417},{"_id":"source/_posts/.Ulysses-Group.plist","hash":"308acdc9362aac498161f004d1e5cfcf3957b8c3","modified":1590205780742},{"_id":"source/_posts/2020/2020-05-23-raspberry-pi-intro.md","hash":"e8682cf969adfd5dfea5d2e8fac4d9a4098b5531","modified":1590216810364},{"_id":"public/tags/docker/index.html","hash":"10e0365891efe07c3e50fbde09d72a458b53399a","modified":1593936413960},{"_id":"public/2020/05/23/docker.html","hash":"c91237cb72cf95d65337ceddbba0e2cc019df511","modified":1593936413914},{"_id":"source/_posts/2020/2020-05-31-raspberry-pi-1.md","hash":"6c53f2315233d91b7e621a2a070d8d0e4a452d46","modified":1590908818135},{"_id":"public/2020/05/31/raspberry-pi-1.html","hash":"79e99be3d7689d6d1b4f4c9ce73f1041a46b2839","modified":1593936413913},{"_id":"source/_posts/2020/2020-05-31-mp4-combine.md","hash":"a8d5b8dd8321d839a0affc6e66e89a7e2b1ed509","modified":1590911292167},{"_id":"public/2020/05/31/mp4-combine.html","hash":"5c6a754aa9b088e125dbf9136abf3140dc638c3b","modified":1593936413913},{"_id":"public/tags/ffmpeg/index.html","hash":"15e97925f18349d96a53158dc445c37a1aa7cf46","modified":1593936413960},{"_id":"public/tags/mp4/index.html","hash":"757270aad843b77a987481c3a5f035271cf84ddd","modified":1593936413960},{"_id":"source/_posts/2020/2020-06-08-raspberry-pi-2.md","hash":"7a3d9dcf62ba5675dd84917535514196f8804b01","modified":1591621873873},{"_id":"public/2020/06/08/raspberry-pi-2.html","hash":"ea4e96877da50a671d6a63be85db80867d77e092","modified":1593936413889},{"_id":"public/archives/2020/06/index.html","hash":"f2d97160eaf48fbc651a684892f6f0fdb280c0b0","modified":1593936413941},{"_id":"public/page/12/index.html","hash":"15da420921a8e16f0b9922fd647a47c80b196e68","modified":1593936413947},{"_id":"source/_posts/2020/2020-06-20-puppeteer.md","hash":"76e3a8cf94de9d3c5763139738b69dff13a2e2c0","modified":1592641948696},{"_id":"public/2020/06/20/puppeteer.html","hash":"3f9b40899ecfbdaedb74cb0a7fe2d152f5e7738e","modified":1593936413889},{"_id":"public/tags/puppeteer/index.html","hash":"9e49ae08faa377296896c4f6f27a0f080450c82e","modified":1593936413960},{"_id":"source/_posts/2020/2020-07-05-raspberry-pi-3.md","hash":"5b5b08ce6be4d8c3296e93bdbc4efe65d221d103","modified":1593936323736},{"_id":"public/2020/07/05/raspberry-pi-3.html","hash":"ee5a6d8af2d534112afa424aaa7528cce640c4e5","modified":1593936413984},{"_id":"public/archives/2020/07/index.html","hash":"96c95fc6676391bb17af1decf5c18106151d0978","modified":1593936413984},{"_id":"public/tags/Tiny-Tiny/index.html","hash":"23a6e47c4aec1bbf4d8b9484823d309744d1cfe4","modified":1593936413984},{"_id":"public/tags/RSS/index.html","hash":"6d3d02c1444752de707878bc30af650a64596631","modified":1593936413984}],"Category":[{"name":"随笔","_id":"cka5ik89t0002nybg71upyq4y"},{"name":"theme","_id":"cka5ik8a5000cnybgbq4hkgi5"},{"name":"数学","_id":"cka5ik8af000qnybg2spnmvw1"},{"name":"codewars","_id":"cka5ik8aj000xnybgr63z78aj"},{"name":"软件","_id":"cka5ik8am0014nybg1vpi6wrn"},{"name":"前端","_id":"cka5ik8aq001dnybgr8gvxm8r"},{"name":"外设","_id":"cka5ik8ax001qnybguoymsjeb"},{"name":"编程","_id":"cka5ik8b8002dnybgjefglh35"},{"name":"技术","_id":"cka5ik8bf002lnybg5lg8lumm"},{"name":"杂谈","_id":"cka5ik8by003snybg55mu3qzz"},{"name":"一句话知识","_id":"cka5ik8dc006wnybgo3wcgkbm"},{"name":"开发板","_id":"cka5ik8eg008vnybgm8yqtywx"}],"Data":[],"Page":[],"Post":[{"layout":"post","title":"Hello World!","date":"2016-10-15T18:28:00.000Z","_content":"\nJekyll 博客, 正式开通了!\n\n<!-- more -->","source":"_posts/2016/2016-10-15-hello-world.md","raw":"---\nlayout: post\ntitle: \"Hello World!\"\ndate: 2016-10-15 18:28:00 GMT+0800\ncategories: [随笔]\ntags:  []\n---\n\nJekyll 博客, 正式开通了!\n\n<!-- more -->","slug":"2016-2016-10-15-hello-world","published":1,"updated":"2020-03-02T07:16:34.602Z","comments":1,"photos":[],"link":"","_id":"cka5ik89m0000nybgcmdzvbmj","content":"<p>Jekyll 博客, 正式开通了!</p>\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<p>Jekyll 博客, 正式开通了!</p>","more":""},{"layout":"post","title":"为什么建立这个博客","date":"2016-10-15T20:00:00.000Z","_content":"\n一言难尽。\n\n那我就慢慢说来听听。\n\n<!-- more -->\n\n## 为什么要换\n\n我在Lofter绑定了yukapril的域名。由于他们政策变化，只能CNAME绑定，所以www自动绑定了，@根域名我是提交绑定了，但是经常自己手动刷他们的IP，用的A记录。\n\n这两天，Lofter死活打不开了。因为我绑定的域名，所以默认必须通过我的域名进行访问。\n\n这一出故障，就是很久。目前快三天了，还不行。\n\n本来我正计划要不就凑合全都在Lofter上写技术和其他类型的文章，这下，全都打消了。\n\n\n## 起初很好\n\n最早我是用网易博客写技术文章的，这样一直没有什么问题。即便是markdown如日中天，我也没有切换到其他博客(比如简书)。\n\n后来网易推出了Lofter，我也在用。主要作为非技术类文章的聚集地了，那时候Tumblr这类的轻博客很火。当然，网易算是绝无仅有的几个活下来的轻博客。你再看新浪轻博客，百度云空间，全部关闭了，曾经的点点网，也这样消失了。\n\n最后，大概是1年前，网易博客发文章时候，默认会让你提交到对应账号的Lofter，虽然每次可以取消关联，还是觉得麻烦，但是还没有放弃网易博客。\n\n这期间，也有几次自动投递到了Lofter，我都会删除。\n\n因为:\n\n> Lofter : 是一个社区，注重艺术、文化交流的社区\n>\n> keywords : 图片社交、照片社交、摄影作品、手机摄影、同人文、平面设计、cosplay、达人、女神图片、时尚搭配、二次元\n\n一个是大众对Lofter的定义，一个是他网站的keywords。所以，这里不宜涉及技术文章。\n\n这样，使得我计划再找适合自己的博客位置。\n\n## 找寻之路\n\n最初，我的计划是花钱再买一个空间，自己来做博客，考虑WordPress，或者Typecho。至于其他NodeJS的框架，可能不会考虑，因为服务器确实不好找，或者很贵(比起PHP来说)。\n\n我查过以下几个方案:\n\n* 新浪云空间\n* 新浪云购买现成WordPress服务包年 (120元)\n* 阿里云共享虚拟主机 (300元)\n* 阿里云弹性云 (200元)\n* 其他第三方的虚机，云平台\n* 知名可控博客:Farbox (65元)，Ghost等\n\n每种方案后面，标有一年大概的费用。\n\n新浪云空间是计算云豆的，之前由于我的疏忽，一直在扣，后来停止了。服务确实不错。这个其实算下来可能不会很贵，但要防止意外，我有点心虚。而且觉得我虽然备案了，但是还不能直接绑定国内CNAME，导致有时候很不稳定。\n\n新浪云WordPress包也不错，没选择除去他，除去上面的新浪规定外，还有一个问题，疑似低档套餐不能开放FTP，等于死空间，除了写博客啥也不行了。\n\n阿里云两个我都觉得好，不管便宜还是贵。差点就要这么选择了。主要是我域名转入阿里后备案，免费送共享主机2年，还是很好使的。贵的方案，可以送CDN，速度一样有飞快保证。差别主要在容量和数据库上。\n\n其他第三方就别说了，也不便宜，而且还感觉有各种坑人。我想如果真心想买的话，就选择大品牌。\n\n还有就是有一定控制能力的博客平台，比如Farbox和Ghost，Ghost因为是收费，而且不便宜，我国访问速度还很慢，就被我PASS了。Farbox之前也接触过，因为没做过开发，怕不熟悉。而且绑定域名这个或许也是问题。\n\n这里说下，我也看过百度和腾讯，他们好像只做稍微有点规模的，像我这种个人能用就行的情况，他们没有合适的解决方案。\n\n\n## 决定了\n\n最后想来想去，就想到了GitHub Pages。免费，可控制。换成国内的，就是Coding。\n\n> 2017年，coding发生了几次Page服务异常，每一次，等他们修复都需要很久（超过1天），我又切换到 Gitlab 上面了。但是不久，就发生了众所周知的 Gitlab 数据库误删事件，在此之后，我发现原有的博客配置（日期写法），竟然在 Gitlab 上失效了。又回到了国内 coding 上。但是依然的，非常不稳定，很多时候莫名其妙访问不了，需要反复随意提交代码，才能触发重新构建。\n>\n> 就这样，正好我的阿里云有个低配的 php 空间，就拿出来，当做静态空间使用了。每次本地用 jekyll 编译好，再上传到 FTP，虽然繁琐点，但是很稳定。\n\n做人要厚道，用人家空间就行了。图片放在七牛，每个月好像是10G流量。\n\n技术选型，怎么简单怎么来。选择Jekyll。\n\n其实吧，确实简单，但是不懂Ruby，不懂模板语法，走了很多弯路。\n\n但是我想，应该比每次折腾NodeJS的Hexo省些事。即便有的功能实现不了、不好实现，那我不要复杂功能行了吧。\n\n就这样，突然一下，我就到了一个新环境...\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2016/2016-10-15-why-blog.md","raw":"---\nlayout: post\ntitle: \"为什么建立这个博客\"\ndate: 2016-10-15 20:00:00 GMT+0800\ncategories: [随笔]\ntags:  [博客]\n---\n\n一言难尽。\n\n那我就慢慢说来听听。\n\n<!-- more -->\n\n## 为什么要换\n\n我在Lofter绑定了yukapril的域名。由于他们政策变化，只能CNAME绑定，所以www自动绑定了，@根域名我是提交绑定了，但是经常自己手动刷他们的IP，用的A记录。\n\n这两天，Lofter死活打不开了。因为我绑定的域名，所以默认必须通过我的域名进行访问。\n\n这一出故障，就是很久。目前快三天了，还不行。\n\n本来我正计划要不就凑合全都在Lofter上写技术和其他类型的文章，这下，全都打消了。\n\n\n## 起初很好\n\n最早我是用网易博客写技术文章的，这样一直没有什么问题。即便是markdown如日中天，我也没有切换到其他博客(比如简书)。\n\n后来网易推出了Lofter，我也在用。主要作为非技术类文章的聚集地了，那时候Tumblr这类的轻博客很火。当然，网易算是绝无仅有的几个活下来的轻博客。你再看新浪轻博客，百度云空间，全部关闭了，曾经的点点网，也这样消失了。\n\n最后，大概是1年前，网易博客发文章时候，默认会让你提交到对应账号的Lofter，虽然每次可以取消关联，还是觉得麻烦，但是还没有放弃网易博客。\n\n这期间，也有几次自动投递到了Lofter，我都会删除。\n\n因为:\n\n> Lofter : 是一个社区，注重艺术、文化交流的社区\n>\n> keywords : 图片社交、照片社交、摄影作品、手机摄影、同人文、平面设计、cosplay、达人、女神图片、时尚搭配、二次元\n\n一个是大众对Lofter的定义，一个是他网站的keywords。所以，这里不宜涉及技术文章。\n\n这样，使得我计划再找适合自己的博客位置。\n\n## 找寻之路\n\n最初，我的计划是花钱再买一个空间，自己来做博客，考虑WordPress，或者Typecho。至于其他NodeJS的框架，可能不会考虑，因为服务器确实不好找，或者很贵(比起PHP来说)。\n\n我查过以下几个方案:\n\n* 新浪云空间\n* 新浪云购买现成WordPress服务包年 (120元)\n* 阿里云共享虚拟主机 (300元)\n* 阿里云弹性云 (200元)\n* 其他第三方的虚机，云平台\n* 知名可控博客:Farbox (65元)，Ghost等\n\n每种方案后面，标有一年大概的费用。\n\n新浪云空间是计算云豆的，之前由于我的疏忽，一直在扣，后来停止了。服务确实不错。这个其实算下来可能不会很贵，但要防止意外，我有点心虚。而且觉得我虽然备案了，但是还不能直接绑定国内CNAME，导致有时候很不稳定。\n\n新浪云WordPress包也不错，没选择除去他，除去上面的新浪规定外，还有一个问题，疑似低档套餐不能开放FTP，等于死空间，除了写博客啥也不行了。\n\n阿里云两个我都觉得好，不管便宜还是贵。差点就要这么选择了。主要是我域名转入阿里后备案，免费送共享主机2年，还是很好使的。贵的方案，可以送CDN，速度一样有飞快保证。差别主要在容量和数据库上。\n\n其他第三方就别说了，也不便宜，而且还感觉有各种坑人。我想如果真心想买的话，就选择大品牌。\n\n还有就是有一定控制能力的博客平台，比如Farbox和Ghost，Ghost因为是收费，而且不便宜，我国访问速度还很慢，就被我PASS了。Farbox之前也接触过，因为没做过开发，怕不熟悉。而且绑定域名这个或许也是问题。\n\n这里说下，我也看过百度和腾讯，他们好像只做稍微有点规模的，像我这种个人能用就行的情况，他们没有合适的解决方案。\n\n\n## 决定了\n\n最后想来想去，就想到了GitHub Pages。免费，可控制。换成国内的，就是Coding。\n\n> 2017年，coding发生了几次Page服务异常，每一次，等他们修复都需要很久（超过1天），我又切换到 Gitlab 上面了。但是不久，就发生了众所周知的 Gitlab 数据库误删事件，在此之后，我发现原有的博客配置（日期写法），竟然在 Gitlab 上失效了。又回到了国内 coding 上。但是依然的，非常不稳定，很多时候莫名其妙访问不了，需要反复随意提交代码，才能触发重新构建。\n>\n> 就这样，正好我的阿里云有个低配的 php 空间，就拿出来，当做静态空间使用了。每次本地用 jekyll 编译好，再上传到 FTP，虽然繁琐点，但是很稳定。\n\n做人要厚道，用人家空间就行了。图片放在七牛，每个月好像是10G流量。\n\n技术选型，怎么简单怎么来。选择Jekyll。\n\n其实吧，确实简单，但是不懂Ruby，不懂模板语法，走了很多弯路。\n\n但是我想，应该比每次折腾NodeJS的Hexo省些事。即便有的功能实现不了、不好实现，那我不要复杂功能行了吧。\n\n就这样，突然一下，我就到了一个新环境...\n\n\n\n\n\n\n\n\n\n\n\n","slug":"2016-2016-10-15-why-blog","published":1,"updated":"2020-03-02T07:16:34.602Z","comments":1,"photos":[],"link":"","_id":"cka5ik89r0001nybgdpq2nrgg","content":"<p>一言难尽。</p>\n<p>那我就慢慢说来听听。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"为什么要换\"><a href=\"#为什么要换\" class=\"headerlink\" title=\"为什么要换\"></a>为什么要换</h2><p>我在Lofter绑定了yukapril的域名。由于他们政策变化，只能CNAME绑定，所以www自动绑定了，@根域名我是提交绑定了，但是经常自己手动刷他们的IP，用的A记录。</p>\n<p>这两天，Lofter死活打不开了。因为我绑定的域名，所以默认必须通过我的域名进行访问。</p>\n<p>这一出故障，就是很久。目前快三天了，还不行。</p>\n<p>本来我正计划要不就凑合全都在Lofter上写技术和其他类型的文章，这下，全都打消了。</p>\n<h2 id=\"起初很好\"><a href=\"#起初很好\" class=\"headerlink\" title=\"起初很好\"></a>起初很好</h2><p>最早我是用网易博客写技术文章的，这样一直没有什么问题。即便是markdown如日中天，我也没有切换到其他博客(比如简书)。</p>\n<p>后来网易推出了Lofter，我也在用。主要作为非技术类文章的聚集地了，那时候Tumblr这类的轻博客很火。当然，网易算是绝无仅有的几个活下来的轻博客。你再看新浪轻博客，百度云空间，全部关闭了，曾经的点点网，也这样消失了。</p>\n<p>最后，大概是1年前，网易博客发文章时候，默认会让你提交到对应账号的Lofter，虽然每次可以取消关联，还是觉得麻烦，但是还没有放弃网易博客。</p>\n<p>这期间，也有几次自动投递到了Lofter，我都会删除。</p>\n<p>因为:</p>\n<blockquote>\n<p>Lofter : 是一个社区，注重艺术、文化交流的社区</p>\n<p>keywords : 图片社交、照片社交、摄影作品、手机摄影、同人文、平面设计、cosplay、达人、女神图片、时尚搭配、二次元</p>\n</blockquote>\n<p>一个是大众对Lofter的定义，一个是他网站的keywords。所以，这里不宜涉及技术文章。</p>\n<p>这样，使得我计划再找适合自己的博客位置。</p>\n<h2 id=\"找寻之路\"><a href=\"#找寻之路\" class=\"headerlink\" title=\"找寻之路\"></a>找寻之路</h2><p>最初，我的计划是花钱再买一个空间，自己来做博客，考虑WordPress，或者Typecho。至于其他NodeJS的框架，可能不会考虑，因为服务器确实不好找，或者很贵(比起PHP来说)。</p>\n<p>我查过以下几个方案:</p>\n<ul>\n<li>新浪云空间</li>\n<li>新浪云购买现成WordPress服务包年 (120元)</li>\n<li>阿里云共享虚拟主机 (300元)</li>\n<li>阿里云弹性云 (200元)</li>\n<li>其他第三方的虚机，云平台</li>\n<li>知名可控博客:Farbox (65元)，Ghost等</li>\n</ul>\n<p>每种方案后面，标有一年大概的费用。</p>\n<p>新浪云空间是计算云豆的，之前由于我的疏忽，一直在扣，后来停止了。服务确实不错。这个其实算下来可能不会很贵，但要防止意外，我有点心虚。而且觉得我虽然备案了，但是还不能直接绑定国内CNAME，导致有时候很不稳定。</p>\n<p>新浪云WordPress包也不错，没选择除去他，除去上面的新浪规定外，还有一个问题，疑似低档套餐不能开放FTP，等于死空间，除了写博客啥也不行了。</p>\n<p>阿里云两个我都觉得好，不管便宜还是贵。差点就要这么选择了。主要是我域名转入阿里后备案，免费送共享主机2年，还是很好使的。贵的方案，可以送CDN，速度一样有飞快保证。差别主要在容量和数据库上。</p>\n<p>其他第三方就别说了，也不便宜，而且还感觉有各种坑人。我想如果真心想买的话，就选择大品牌。</p>\n<p>还有就是有一定控制能力的博客平台，比如Farbox和Ghost，Ghost因为是收费，而且不便宜，我国访问速度还很慢，就被我PASS了。Farbox之前也接触过，因为没做过开发，怕不熟悉。而且绑定域名这个或许也是问题。</p>\n<p>这里说下，我也看过百度和腾讯，他们好像只做稍微有点规模的，像我这种个人能用就行的情况，他们没有合适的解决方案。</p>\n<h2 id=\"决定了\"><a href=\"#决定了\" class=\"headerlink\" title=\"决定了\"></a>决定了</h2><p>最后想来想去，就想到了GitHub Pages。免费，可控制。换成国内的，就是Coding。</p>\n<blockquote>\n<p>2017年，coding发生了几次Page服务异常，每一次，等他们修复都需要很久（超过1天），我又切换到 Gitlab 上面了。但是不久，就发生了众所周知的 Gitlab 数据库误删事件，在此之后，我发现原有的博客配置（日期写法），竟然在 Gitlab 上失效了。又回到了国内 coding 上。但是依然的，非常不稳定，很多时候莫名其妙访问不了，需要反复随意提交代码，才能触发重新构建。</p>\n<p>就这样，正好我的阿里云有个低配的 php 空间，就拿出来，当做静态空间使用了。每次本地用 jekyll 编译好，再上传到 FTP，虽然繁琐点，但是很稳定。</p>\n</blockquote>\n<p>做人要厚道，用人家空间就行了。图片放在七牛，每个月好像是10G流量。</p>\n<p>技术选型，怎么简单怎么来。选择Jekyll。</p>\n<p>其实吧，确实简单，但是不懂Ruby，不懂模板语法，走了很多弯路。</p>\n<p>但是我想，应该比每次折腾NodeJS的Hexo省些事。即便有的功能实现不了、不好实现，那我不要复杂功能行了吧。</p>\n<p>就这样，突然一下，我就到了一个新环境…</p>\n","site":{"data":{}},"excerpt":"<p>一言难尽。</p>\n<p>那我就慢慢说来听听。</p>","more":"<h2 id=\"为什么要换\"><a href=\"#为什么要换\" class=\"headerlink\" title=\"为什么要换\"></a>为什么要换</h2><p>我在Lofter绑定了yukapril的域名。由于他们政策变化，只能CNAME绑定，所以www自动绑定了，@根域名我是提交绑定了，但是经常自己手动刷他们的IP，用的A记录。</p>\n<p>这两天，Lofter死活打不开了。因为我绑定的域名，所以默认必须通过我的域名进行访问。</p>\n<p>这一出故障，就是很久。目前快三天了，还不行。</p>\n<p>本来我正计划要不就凑合全都在Lofter上写技术和其他类型的文章，这下，全都打消了。</p>\n<h2 id=\"起初很好\"><a href=\"#起初很好\" class=\"headerlink\" title=\"起初很好\"></a>起初很好</h2><p>最早我是用网易博客写技术文章的，这样一直没有什么问题。即便是markdown如日中天，我也没有切换到其他博客(比如简书)。</p>\n<p>后来网易推出了Lofter，我也在用。主要作为非技术类文章的聚集地了，那时候Tumblr这类的轻博客很火。当然，网易算是绝无仅有的几个活下来的轻博客。你再看新浪轻博客，百度云空间，全部关闭了，曾经的点点网，也这样消失了。</p>\n<p>最后，大概是1年前，网易博客发文章时候，默认会让你提交到对应账号的Lofter，虽然每次可以取消关联，还是觉得麻烦，但是还没有放弃网易博客。</p>\n<p>这期间，也有几次自动投递到了Lofter，我都会删除。</p>\n<p>因为:</p>\n<blockquote>\n<p>Lofter : 是一个社区，注重艺术、文化交流的社区</p>\n<p>keywords : 图片社交、照片社交、摄影作品、手机摄影、同人文、平面设计、cosplay、达人、女神图片、时尚搭配、二次元</p>\n</blockquote>\n<p>一个是大众对Lofter的定义，一个是他网站的keywords。所以，这里不宜涉及技术文章。</p>\n<p>这样，使得我计划再找适合自己的博客位置。</p>\n<h2 id=\"找寻之路\"><a href=\"#找寻之路\" class=\"headerlink\" title=\"找寻之路\"></a>找寻之路</h2><p>最初，我的计划是花钱再买一个空间，自己来做博客，考虑WordPress，或者Typecho。至于其他NodeJS的框架，可能不会考虑，因为服务器确实不好找，或者很贵(比起PHP来说)。</p>\n<p>我查过以下几个方案:</p>\n<ul>\n<li>新浪云空间</li>\n<li>新浪云购买现成WordPress服务包年 (120元)</li>\n<li>阿里云共享虚拟主机 (300元)</li>\n<li>阿里云弹性云 (200元)</li>\n<li>其他第三方的虚机，云平台</li>\n<li>知名可控博客:Farbox (65元)，Ghost等</li>\n</ul>\n<p>每种方案后面，标有一年大概的费用。</p>\n<p>新浪云空间是计算云豆的，之前由于我的疏忽，一直在扣，后来停止了。服务确实不错。这个其实算下来可能不会很贵，但要防止意外，我有点心虚。而且觉得我虽然备案了，但是还不能直接绑定国内CNAME，导致有时候很不稳定。</p>\n<p>新浪云WordPress包也不错，没选择除去他，除去上面的新浪规定外，还有一个问题，疑似低档套餐不能开放FTP，等于死空间，除了写博客啥也不行了。</p>\n<p>阿里云两个我都觉得好，不管便宜还是贵。差点就要这么选择了。主要是我域名转入阿里后备案，免费送共享主机2年，还是很好使的。贵的方案，可以送CDN，速度一样有飞快保证。差别主要在容量和数据库上。</p>\n<p>其他第三方就别说了，也不便宜，而且还感觉有各种坑人。我想如果真心想买的话，就选择大品牌。</p>\n<p>还有就是有一定控制能力的博客平台，比如Farbox和Ghost，Ghost因为是收费，而且不便宜，我国访问速度还很慢，就被我PASS了。Farbox之前也接触过，因为没做过开发，怕不熟悉。而且绑定域名这个或许也是问题。</p>\n<p>这里说下，我也看过百度和腾讯，他们好像只做稍微有点规模的，像我这种个人能用就行的情况，他们没有合适的解决方案。</p>\n<h2 id=\"决定了\"><a href=\"#决定了\" class=\"headerlink\" title=\"决定了\"></a>决定了</h2><p>最后想来想去，就想到了GitHub Pages。免费，可控制。换成国内的，就是Coding。</p>\n<blockquote>\n<p>2017年，coding发生了几次Page服务异常，每一次，等他们修复都需要很久（超过1天），我又切换到 Gitlab 上面了。但是不久，就发生了众所周知的 Gitlab 数据库误删事件，在此之后，我发现原有的博客配置（日期写法），竟然在 Gitlab 上失效了。又回到了国内 coding 上。但是依然的，非常不稳定，很多时候莫名其妙访问不了，需要反复随意提交代码，才能触发重新构建。</p>\n<p>就这样，正好我的阿里云有个低配的 php 空间，就拿出来，当做静态空间使用了。每次本地用 jekyll 编译好，再上传到 FTP，虽然繁琐点，但是很稳定。</p>\n</blockquote>\n<p>做人要厚道，用人家空间就行了。图片放在七牛，每个月好像是10G流量。</p>\n<p>技术选型，怎么简单怎么来。选择Jekyll。</p>\n<p>其实吧，确实简单，但是不懂Ruby，不懂模板语法，走了很多弯路。</p>\n<p>但是我想，应该比每次折腾NodeJS的Hexo省些事。即便有的功能实现不了、不好实现，那我不要复杂功能行了吧。</p>\n<p>就这样，突然一下，我就到了一个新环境…</p>"},{"layout":"post","title":"这是一篇效果示例文章","date":"2016-10-19T21:38:00.000Z","_content":"\n这篇文章，主要展示各种排版效果。\n\n<!-- more -->\n\n## 代码的效果\n\n这里使用了jekyll默认的引擎`rouge`来处理代码高亮。\n\n使用`rouge`的好处就是这是jekyll 3.0的默认代码高亮插件，放在github上面能直接识别，不需要转码成html。\n\n缺点就是默认不带有css，但是网页上代码已经被各种span包裹了各种class样式类。这样我们只需要自己找一个合适的css就行啦~\n\nCSS样式，使用的是 ~~`monokai`~~ `github`风格。可以使用ruby自己生成。具体生成`*.css`方法，请参见[rouge-github](https://github.com/jneen/rouge)。\n\n主要参考这两行。\n\n```bash\n$ rougify foo.rb\n$ rougify style monokai.sublime > syntax.css\n```\n\n> 在simack 1.0版本中，我更换为`github`风格，因为颜色更加协调。\n\n我自己用js给代码加入了行号。\n\n其实还加入了copy和raw功能，但是发现，copy功能除了IE外，需要flash插件。最终我决定放弃这些不太重要的功能了。\n\n好了，看看css的最终效果。\n\n```html\n<!DOCTYPE HTML>\n<html>\n<body>\n\n<video width=\"320\" height=\"240\" controls=\"controls\">\n    <source src=\"movie.ogg\" type=\"video/ogg\">\n    <source src=\"movie.mp4\" type=\"video/mp4\">\n    Your browser does not support the video tag.\n</video>\n\n</body>\n</html>\n```\n\n```js\nfor (i = 0; i < 10; i++) {\n    if (i == 3) {\n        break;\n    }\n    x = x + \"The number is \" + i + \"<br>\";\n}\n```\n\n如果是不支持的语法，那么会是这样子 ~~浅色的~~ 代码无任何样色标注~\n\n```abcd\n<script runat=\"server\">\nSub submit(sender As Object, e As EventArgs)\nlbl1.Text=\"Your name is \" & txt1.Text\nEnd Sub\n</script>\n<html>\n<body>\n\n<form runat=\"server\">\nEnter your name:\n<asp:TextBox id=\"txt1\" runat=\"server\" />\n<asp:Button OnClick=\"submit\" Text=\"Submit\" runat=\"server\" />\n<p><asp:Label id=\"lbl1\" runat=\"server\" /></p>\n</form>\n\n</body>\n</html>\n```\n\n## 表格的效果\n\n这是一个标准的表格效果。\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n\n## 引用的效果\n\n> jekyll是一个简单的免费的Blog生成工具，类似WordPress。\n>\n> 但是和WordPress又有很大的不同，原因是jekyll只是一个生成静态网页的工具，不需要数据库支持。但是可以配合第三方服务,例如Disqus。\n>\n> 最关键的是jekyll可以免费部署在Github上，而且可以绑定自己的域名。\n\n## 文本、图片和链接\n\njekyll环境搭建**并不是**很困难的！\n\n*例如你可以看这里：*\n\n这里是jekyll的中文[网站](http://jekyll.com.cn)\n\n![jekyll](http://jekyll.com.cn/img/logo-2x.png)\n\n## 列表效果\n\n这是一个无序列表\n\n* 苹果\n\n* 香蕉\n\n* 桃子\n\n这是一个有序列表\n\n1. 编写README.md\n\n2. 整理示例文章\n\n3. 提交到github","source":"_posts/2016/2016-10-19-blog-show.md","raw":"---\nlayout: post\ntitle: \"这是一篇效果示例文章\"\ndate: 2016-10-19 21:38:00 GMT+0800\ncategories: [theme]\ntags:  [simack]\n---\n\n这篇文章，主要展示各种排版效果。\n\n<!-- more -->\n\n## 代码的效果\n\n这里使用了jekyll默认的引擎`rouge`来处理代码高亮。\n\n使用`rouge`的好处就是这是jekyll 3.0的默认代码高亮插件，放在github上面能直接识别，不需要转码成html。\n\n缺点就是默认不带有css，但是网页上代码已经被各种span包裹了各种class样式类。这样我们只需要自己找一个合适的css就行啦~\n\nCSS样式，使用的是 ~~`monokai`~~ `github`风格。可以使用ruby自己生成。具体生成`*.css`方法，请参见[rouge-github](https://github.com/jneen/rouge)。\n\n主要参考这两行。\n\n```bash\n$ rougify foo.rb\n$ rougify style monokai.sublime > syntax.css\n```\n\n> 在simack 1.0版本中，我更换为`github`风格，因为颜色更加协调。\n\n我自己用js给代码加入了行号。\n\n其实还加入了copy和raw功能，但是发现，copy功能除了IE外，需要flash插件。最终我决定放弃这些不太重要的功能了。\n\n好了，看看css的最终效果。\n\n```html\n<!DOCTYPE HTML>\n<html>\n<body>\n\n<video width=\"320\" height=\"240\" controls=\"controls\">\n    <source src=\"movie.ogg\" type=\"video/ogg\">\n    <source src=\"movie.mp4\" type=\"video/mp4\">\n    Your browser does not support the video tag.\n</video>\n\n</body>\n</html>\n```\n\n```js\nfor (i = 0; i < 10; i++) {\n    if (i == 3) {\n        break;\n    }\n    x = x + \"The number is \" + i + \"<br>\";\n}\n```\n\n如果是不支持的语法，那么会是这样子 ~~浅色的~~ 代码无任何样色标注~\n\n```abcd\n<script runat=\"server\">\nSub submit(sender As Object, e As EventArgs)\nlbl1.Text=\"Your name is \" & txt1.Text\nEnd Sub\n</script>\n<html>\n<body>\n\n<form runat=\"server\">\nEnter your name:\n<asp:TextBox id=\"txt1\" runat=\"server\" />\n<asp:Button OnClick=\"submit\" Text=\"Submit\" runat=\"server\" />\n<p><asp:Label id=\"lbl1\" runat=\"server\" /></p>\n</form>\n\n</body>\n</html>\n```\n\n## 表格的效果\n\n这是一个标准的表格效果。\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n\n## 引用的效果\n\n> jekyll是一个简单的免费的Blog生成工具，类似WordPress。\n>\n> 但是和WordPress又有很大的不同，原因是jekyll只是一个生成静态网页的工具，不需要数据库支持。但是可以配合第三方服务,例如Disqus。\n>\n> 最关键的是jekyll可以免费部署在Github上，而且可以绑定自己的域名。\n\n## 文本、图片和链接\n\njekyll环境搭建**并不是**很困难的！\n\n*例如你可以看这里：*\n\n这里是jekyll的中文[网站](http://jekyll.com.cn)\n\n![jekyll](http://jekyll.com.cn/img/logo-2x.png)\n\n## 列表效果\n\n这是一个无序列表\n\n* 苹果\n\n* 香蕉\n\n* 桃子\n\n这是一个有序列表\n\n1. 编写README.md\n\n2. 整理示例文章\n\n3. 提交到github","slug":"2016-2016-10-19-blog-show","published":1,"updated":"2020-03-02T07:16:34.602Z","comments":1,"photos":[],"link":"","_id":"cka5ik89v0003nybgnp0fz37h","content":"<p>这篇文章，主要展示各种排版效果。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"代码的效果\"><a href=\"#代码的效果\" class=\"headerlink\" title=\"代码的效果\"></a>代码的效果</h2><p>这里使用了jekyll默认的引擎<code>rouge</code>来处理代码高亮。</p>\n<p>使用<code>rouge</code>的好处就是这是jekyll 3.0的默认代码高亮插件，放在github上面能直接识别，不需要转码成html。</p>\n<p>缺点就是默认不带有css，但是网页上代码已经被各种span包裹了各种class样式类。这样我们只需要自己找一个合适的css就行啦~</p>\n<p>CSS样式，使用的是 <del><code>monokai</code></del> <code>github</code>风格。可以使用ruby自己生成。具体生成<code>*.css</code>方法，请参见<a href=\"https://github.com/jneen/rouge\" target=\"_blank\" rel=\"noopener\">rouge-github</a>。</p>\n<p>主要参考这两行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rougify foo.rb</span><br><span class=\"line\">$ rougify style monokai.sublime &gt; syntax.css</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在simack 1.0版本中，我更换为<code>github</code>风格，因为颜色更加协调。</p>\n</blockquote>\n<p>我自己用js给代码加入了行号。</p>\n<p>其实还加入了copy和raw功能，但是发现，copy功能除了IE外，需要flash插件。最终我决定放弃这些不太重要的功能了。</p>\n<p>好了，看看css的最终效果。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">width</span>=<span class=\"string\">\"320\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"240\"</span> <span class=\"attr\">controls</span>=<span class=\"string\">\"controls\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"movie.ogg\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/ogg\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"movie.mp4\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/mp4\"</span>&gt;</span></span><br><span class=\"line\">    Your browser does not support the video tag.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    x = x + <span class=\"string\">\"The number is \"</span> + i + <span class=\"string\">\"&lt;br&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果是不支持的语法，那么会是这样子 <del>浅色的</del> 代码无任何样色标注~</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script runat=&quot;server&quot;&gt;</span><br><span class=\"line\">Sub submit(sender As Object, e As EventArgs)</span><br><span class=\"line\">lbl1.Text=&quot;Your name is &quot; &amp; txt1.Text</span><br><span class=\"line\">End Sub</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;form runat=&quot;server&quot;&gt;</span><br><span class=\"line\">Enter your name:</span><br><span class=\"line\">&lt;asp:TextBox id=&quot;txt1&quot; runat=&quot;server&quot; /&gt;</span><br><span class=\"line\">&lt;asp:Button OnClick=&quot;submit&quot; Text=&quot;Submit&quot; runat=&quot;server&quot; /&gt;</span><br><span class=\"line\">&lt;p&gt;&lt;asp:Label id=&quot;lbl1&quot; runat=&quot;server&quot; /&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表格的效果\"><a href=\"#表格的效果\" class=\"headerlink\" title=\"表格的效果\"></a>表格的效果</h2><p>这是一个标准的表格效果。</p>\n<table>\n<thead>\n<tr>\n<th>Tables</th>\n<th align=\"center\">Are</th>\n<th align=\"right\">Cool</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>col 3 is</td>\n<td align=\"center\">right-aligned</td>\n<td align=\"right\">$1600</td>\n</tr>\n<tr>\n<td>col 2 is</td>\n<td align=\"center\">centered</td>\n<td align=\"right\">$12</td>\n</tr>\n<tr>\n<td>zebra stripes</td>\n<td align=\"center\">are neat</td>\n<td align=\"right\">$1</td>\n</tr>\n</tbody></table>\n<h2 id=\"引用的效果\"><a href=\"#引用的效果\" class=\"headerlink\" title=\"引用的效果\"></a>引用的效果</h2><blockquote>\n<p>jekyll是一个简单的免费的Blog生成工具，类似WordPress。</p>\n<p>但是和WordPress又有很大的不同，原因是jekyll只是一个生成静态网页的工具，不需要数据库支持。但是可以配合第三方服务,例如Disqus。</p>\n<p>最关键的是jekyll可以免费部署在Github上，而且可以绑定自己的域名。</p>\n</blockquote>\n<h2 id=\"文本、图片和链接\"><a href=\"#文本、图片和链接\" class=\"headerlink\" title=\"文本、图片和链接\"></a>文本、图片和链接</h2><p>jekyll环境搭建<strong>并不是</strong>很困难的！</p>\n<p><em>例如你可以看这里：</em></p>\n<p>这里是jekyll的中文<a href=\"http://jekyll.com.cn\" target=\"_blank\" rel=\"noopener\">网站</a></p>\n<p><img src=\"http://jekyll.com.cn/img/logo-2x.png\" alt=\"jekyll\"></p>\n<h2 id=\"列表效果\"><a href=\"#列表效果\" class=\"headerlink\" title=\"列表效果\"></a>列表效果</h2><p>这是一个无序列表</p>\n<ul>\n<li><p>苹果</p>\n</li>\n<li><p>香蕉</p>\n</li>\n<li><p>桃子</p>\n</li>\n</ul>\n<p>这是一个有序列表</p>\n<ol>\n<li><p>编写README.md</p>\n</li>\n<li><p>整理示例文章</p>\n</li>\n<li><p>提交到github</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>这篇文章，主要展示各种排版效果。</p>","more":"<h2 id=\"代码的效果\"><a href=\"#代码的效果\" class=\"headerlink\" title=\"代码的效果\"></a>代码的效果</h2><p>这里使用了jekyll默认的引擎<code>rouge</code>来处理代码高亮。</p>\n<p>使用<code>rouge</code>的好处就是这是jekyll 3.0的默认代码高亮插件，放在github上面能直接识别，不需要转码成html。</p>\n<p>缺点就是默认不带有css，但是网页上代码已经被各种span包裹了各种class样式类。这样我们只需要自己找一个合适的css就行啦~</p>\n<p>CSS样式，使用的是 <del><code>monokai</code></del> <code>github</code>风格。可以使用ruby自己生成。具体生成<code>*.css</code>方法，请参见<a href=\"https://github.com/jneen/rouge\" target=\"_blank\" rel=\"noopener\">rouge-github</a>。</p>\n<p>主要参考这两行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rougify foo.rb</span><br><span class=\"line\">$ rougify style monokai.sublime &gt; syntax.css</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在simack 1.0版本中，我更换为<code>github</code>风格，因为颜色更加协调。</p>\n</blockquote>\n<p>我自己用js给代码加入了行号。</p>\n<p>其实还加入了copy和raw功能，但是发现，copy功能除了IE外，需要flash插件。最终我决定放弃这些不太重要的功能了。</p>\n<p>好了，看看css的最终效果。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">width</span>=<span class=\"string\">\"320\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"240\"</span> <span class=\"attr\">controls</span>=<span class=\"string\">\"controls\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"movie.ogg\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/ogg\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"movie.mp4\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/mp4\"</span>&gt;</span></span><br><span class=\"line\">    Your browser does not support the video tag.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    x = x + <span class=\"string\">\"The number is \"</span> + i + <span class=\"string\">\"&lt;br&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果是不支持的语法，那么会是这样子 <del>浅色的</del> 代码无任何样色标注~</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script runat=&quot;server&quot;&gt;</span><br><span class=\"line\">Sub submit(sender As Object, e As EventArgs)</span><br><span class=\"line\">lbl1.Text=&quot;Your name is &quot; &amp; txt1.Text</span><br><span class=\"line\">End Sub</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;form runat=&quot;server&quot;&gt;</span><br><span class=\"line\">Enter your name:</span><br><span class=\"line\">&lt;asp:TextBox id=&quot;txt1&quot; runat=&quot;server&quot; /&gt;</span><br><span class=\"line\">&lt;asp:Button OnClick=&quot;submit&quot; Text=&quot;Submit&quot; runat=&quot;server&quot; /&gt;</span><br><span class=\"line\">&lt;p&gt;&lt;asp:Label id=&quot;lbl1&quot; runat=&quot;server&quot; /&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表格的效果\"><a href=\"#表格的效果\" class=\"headerlink\" title=\"表格的效果\"></a>表格的效果</h2><p>这是一个标准的表格效果。</p>\n<table>\n<thead>\n<tr>\n<th>Tables</th>\n<th align=\"center\">Are</th>\n<th align=\"right\">Cool</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>col 3 is</td>\n<td align=\"center\">right-aligned</td>\n<td align=\"right\">$1600</td>\n</tr>\n<tr>\n<td>col 2 is</td>\n<td align=\"center\">centered</td>\n<td align=\"right\">$12</td>\n</tr>\n<tr>\n<td>zebra stripes</td>\n<td align=\"center\">are neat</td>\n<td align=\"right\">$1</td>\n</tr>\n</tbody></table>\n<h2 id=\"引用的效果\"><a href=\"#引用的效果\" class=\"headerlink\" title=\"引用的效果\"></a>引用的效果</h2><blockquote>\n<p>jekyll是一个简单的免费的Blog生成工具，类似WordPress。</p>\n<p>但是和WordPress又有很大的不同，原因是jekyll只是一个生成静态网页的工具，不需要数据库支持。但是可以配合第三方服务,例如Disqus。</p>\n<p>最关键的是jekyll可以免费部署在Github上，而且可以绑定自己的域名。</p>\n</blockquote>\n<h2 id=\"文本、图片和链接\"><a href=\"#文本、图片和链接\" class=\"headerlink\" title=\"文本、图片和链接\"></a>文本、图片和链接</h2><p>jekyll环境搭建<strong>并不是</strong>很困难的！</p>\n<p><em>例如你可以看这里：</em></p>\n<p>这里是jekyll的中文<a href=\"http://jekyll.com.cn\" target=\"_blank\" rel=\"noopener\">网站</a></p>\n<p><img src=\"http://jekyll.com.cn/img/logo-2x.png\" alt=\"jekyll\"></p>\n<h2 id=\"列表效果\"><a href=\"#列表效果\" class=\"headerlink\" title=\"列表效果\"></a>列表效果</h2><p>这是一个无序列表</p>\n<ul>\n<li><p>苹果</p>\n</li>\n<li><p>香蕉</p>\n</li>\n<li><p>桃子</p>\n</li>\n</ul>\n<p>这是一个有序列表</p>\n<ol>\n<li><p>编写README.md</p>\n</li>\n<li><p>整理示例文章</p>\n</li>\n<li><p>提交到github</p>\n</li>\n</ol>"},{"layout":"post","title":"如何使用simack","date":"2016-10-19T21:41:00.000Z","_content":"\nDEMO文章\n\n<!-- more -->\n\n## 如何书写文章\n只需要一步，直接在`_post`目录下写md格式的文件就行了。\n例如\n\n```md\n---\nlayout: post\ntitle: \"Hello World!\"\ndate: 2016-10-19 15:00:00 GMT+0800\ncategories: [杂谈]\ntags:  [博客,开通]\n---\n\nJekyll 博客, 正式开通了!\n```\n\n其中顶部的yml标记是必须的。而且，分类和tag可以是多个词汇。不过我建议分类还是一个词比较好。\n\n正文嘛，就是markdown就行啦~\n\n\n\n## category的使用\n\n首先，要在文章顶部yml中定义`categories`，这样才能加入到相应分类。\n\n分类的名字嘛，可以是英文，也可以是中文！\n\n### 增加分类方法\n\n需要两步：\n\n* 在`categories`目录下，参考以下代码，制作一个自己的新分类。\n\n```md\n---\nlayout: default\ntitle: 杂谈\n---\n\n{ % include categories.html param=\"杂谈\" % }\n```\n\n   这里的`杂谈`，必须和文章的分类`categories`字段对应。\n \n* 分类在边栏展示，在`_config.yml`中的`categoryLinks`可以控制。\n\n完毕~\n\n\n## 加入评论系统\n\n目前我看用的最多的就是[多说](http://duoshuo.com)了。\n\n注册登录，添加站点。\n\n在左侧选择工具，获取代码。看下代码中你的`short_name`是多少。其实就是你注册的多说域名前缀。\n\n在`_config.yml`中，配置上`duoshuo`下的`name`即可，同时要记得把`status`置为`true`。\n\n如果你希望某一篇文章不能被评论，可以在文章顶部加入字段`nocomments: true`。或者，登录多说进行控制。\n\n\n## 访问统计\n\nV0.1版本方案：\n\n可以在`_config.yml`中配置上`page_analysis`下的`common`。\n\n比如链接形式（建议去掉http和https前缀）：\n\n> 百度统计：//hm.baidu.com/hm.js?515a77345b51b4568446b02f666467d3\n>\n> 友盟统计(站长统计)：//s11.cnzz.com/stat.php?id=1200000000&web_id=1200000000\n>\n> 腾讯统计：//tajs.qq.com/stats?sId=59050000\n\nV1.0版本方案：\n\n由于为了兼容（更简单的实现）多家统计平台的高级统计，请直接在`_includes/user.analysis.html`进行修改。\n\n\n\n\n","source":"_posts/2016/2016-10-19-how-to-use.md","raw":"---\nlayout: post\ntitle: \"如何使用simack\"\ndate: 2016-10-19 21:41:00 GMT+0800\ncategories: [theme]\ntags:  [simack]\n---\n\nDEMO文章\n\n<!-- more -->\n\n## 如何书写文章\n只需要一步，直接在`_post`目录下写md格式的文件就行了。\n例如\n\n```md\n---\nlayout: post\ntitle: \"Hello World!\"\ndate: 2016-10-19 15:00:00 GMT+0800\ncategories: [杂谈]\ntags:  [博客,开通]\n---\n\nJekyll 博客, 正式开通了!\n```\n\n其中顶部的yml标记是必须的。而且，分类和tag可以是多个词汇。不过我建议分类还是一个词比较好。\n\n正文嘛，就是markdown就行啦~\n\n\n\n## category的使用\n\n首先，要在文章顶部yml中定义`categories`，这样才能加入到相应分类。\n\n分类的名字嘛，可以是英文，也可以是中文！\n\n### 增加分类方法\n\n需要两步：\n\n* 在`categories`目录下，参考以下代码，制作一个自己的新分类。\n\n```md\n---\nlayout: default\ntitle: 杂谈\n---\n\n{ % include categories.html param=\"杂谈\" % }\n```\n\n   这里的`杂谈`，必须和文章的分类`categories`字段对应。\n \n* 分类在边栏展示，在`_config.yml`中的`categoryLinks`可以控制。\n\n完毕~\n\n\n## 加入评论系统\n\n目前我看用的最多的就是[多说](http://duoshuo.com)了。\n\n注册登录，添加站点。\n\n在左侧选择工具，获取代码。看下代码中你的`short_name`是多少。其实就是你注册的多说域名前缀。\n\n在`_config.yml`中，配置上`duoshuo`下的`name`即可，同时要记得把`status`置为`true`。\n\n如果你希望某一篇文章不能被评论，可以在文章顶部加入字段`nocomments: true`。或者，登录多说进行控制。\n\n\n## 访问统计\n\nV0.1版本方案：\n\n可以在`_config.yml`中配置上`page_analysis`下的`common`。\n\n比如链接形式（建议去掉http和https前缀）：\n\n> 百度统计：//hm.baidu.com/hm.js?515a77345b51b4568446b02f666467d3\n>\n> 友盟统计(站长统计)：//s11.cnzz.com/stat.php?id=1200000000&web_id=1200000000\n>\n> 腾讯统计：//tajs.qq.com/stats?sId=59050000\n\nV1.0版本方案：\n\n由于为了兼容（更简单的实现）多家统计平台的高级统计，请直接在`_includes/user.analysis.html`进行修改。\n\n\n\n\n","slug":"2016-2016-10-19-how-to-use","published":1,"updated":"2020-03-02T07:16:34.602Z","comments":1,"photos":[],"link":"","_id":"cka5ik89x0005nybgbynrweak","content":"<p>DEMO文章</p>\n<a id=\"more\"></a>\n\n<h2 id=\"如何书写文章\"><a href=\"#如何书写文章\" class=\"headerlink\" title=\"如何书写文章\"></a>如何书写文章</h2><p>只需要一步，直接在<code>_post</code>目录下写md格式的文件就行了。<br>例如</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: post</span><br><span class=\"line\">title: \"Hello World!\"</span><br><span class=\"line\">date: 2016-10-19 15:00:00 GMT+0800</span><br><span class=\"line\">categories: [杂谈]</span><br><span class=\"line\">tags:  [博客,开通]</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">Jekyll 博客, 正式开通了!</span><br></pre></td></tr></table></figure>\n\n<p>其中顶部的yml标记是必须的。而且，分类和tag可以是多个词汇。不过我建议分类还是一个词比较好。</p>\n<p>正文嘛，就是markdown就行啦~</p>\n<h2 id=\"category的使用\"><a href=\"#category的使用\" class=\"headerlink\" title=\"category的使用\"></a>category的使用</h2><p>首先，要在文章顶部yml中定义<code>categories</code>，这样才能加入到相应分类。</p>\n<p>分类的名字嘛，可以是英文，也可以是中文！</p>\n<h3 id=\"增加分类方法\"><a href=\"#增加分类方法\" class=\"headerlink\" title=\"增加分类方法\"></a>增加分类方法</h3><p>需要两步：</p>\n<ul>\n<li>在<code>categories</code>目录下，参考以下代码，制作一个自己的新分类。</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: default</span><br><span class=\"line\">title: 杂谈</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">&#123; % include categories.html param=\"杂谈\" % &#125;</span><br></pre></td></tr></table></figure>\n\n<p>   这里的<code>杂谈</code>，必须和文章的分类<code>categories</code>字段对应。</p>\n<ul>\n<li>分类在边栏展示，在<code>_config.yml</code>中的<code>categoryLinks</code>可以控制。</li>\n</ul>\n<p>完毕~</p>\n<h2 id=\"加入评论系统\"><a href=\"#加入评论系统\" class=\"headerlink\" title=\"加入评论系统\"></a>加入评论系统</h2><p>目前我看用的最多的就是<a href=\"http://duoshuo.com\" target=\"_blank\" rel=\"noopener\">多说</a>了。</p>\n<p>注册登录，添加站点。</p>\n<p>在左侧选择工具，获取代码。看下代码中你的<code>short_name</code>是多少。其实就是你注册的多说域名前缀。</p>\n<p>在<code>_config.yml</code>中，配置上<code>duoshuo</code>下的<code>name</code>即可，同时要记得把<code>status</code>置为<code>true</code>。</p>\n<p>如果你希望某一篇文章不能被评论，可以在文章顶部加入字段<code>nocomments: true</code>。或者，登录多说进行控制。</p>\n<h2 id=\"访问统计\"><a href=\"#访问统计\" class=\"headerlink\" title=\"访问统计\"></a>访问统计</h2><p>V0.1版本方案：</p>\n<p>可以在<code>_config.yml</code>中配置上<code>page_analysis</code>下的<code>common</code>。</p>\n<p>比如链接形式（建议去掉http和https前缀）：</p>\n<blockquote>\n<p>百度统计：//hm.baidu.com/hm.js?515a77345b51b4568446b02f666467d3</p>\n<p>友盟统计(站长统计)：//s11.cnzz.com/stat.php?id=1200000000&amp;web_id=1200000000</p>\n<p>腾讯统计：//tajs.qq.com/stats?sId=59050000</p>\n</blockquote>\n<p>V1.0版本方案：</p>\n<p>由于为了兼容（更简单的实现）多家统计平台的高级统计，请直接在<code>_includes/user.analysis.html</code>进行修改。</p>\n","site":{"data":{}},"excerpt":"<p>DEMO文章</p>","more":"<h2 id=\"如何书写文章\"><a href=\"#如何书写文章\" class=\"headerlink\" title=\"如何书写文章\"></a>如何书写文章</h2><p>只需要一步，直接在<code>_post</code>目录下写md格式的文件就行了。<br>例如</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: post</span><br><span class=\"line\">title: \"Hello World!\"</span><br><span class=\"line\">date: 2016-10-19 15:00:00 GMT+0800</span><br><span class=\"line\">categories: [杂谈]</span><br><span class=\"line\">tags:  [博客,开通]</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">Jekyll 博客, 正式开通了!</span><br></pre></td></tr></table></figure>\n\n<p>其中顶部的yml标记是必须的。而且，分类和tag可以是多个词汇。不过我建议分类还是一个词比较好。</p>\n<p>正文嘛，就是markdown就行啦~</p>\n<h2 id=\"category的使用\"><a href=\"#category的使用\" class=\"headerlink\" title=\"category的使用\"></a>category的使用</h2><p>首先，要在文章顶部yml中定义<code>categories</code>，这样才能加入到相应分类。</p>\n<p>分类的名字嘛，可以是英文，也可以是中文！</p>\n<h3 id=\"增加分类方法\"><a href=\"#增加分类方法\" class=\"headerlink\" title=\"增加分类方法\"></a>增加分类方法</h3><p>需要两步：</p>\n<ul>\n<li>在<code>categories</code>目录下，参考以下代码，制作一个自己的新分类。</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: default</span><br><span class=\"line\">title: 杂谈</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">&#123; % include categories.html param=\"杂谈\" % &#125;</span><br></pre></td></tr></table></figure>\n\n<p>   这里的<code>杂谈</code>，必须和文章的分类<code>categories</code>字段对应。</p>\n<ul>\n<li>分类在边栏展示，在<code>_config.yml</code>中的<code>categoryLinks</code>可以控制。</li>\n</ul>\n<p>完毕~</p>\n<h2 id=\"加入评论系统\"><a href=\"#加入评论系统\" class=\"headerlink\" title=\"加入评论系统\"></a>加入评论系统</h2><p>目前我看用的最多的就是<a href=\"http://duoshuo.com\" target=\"_blank\" rel=\"noopener\">多说</a>了。</p>\n<p>注册登录，添加站点。</p>\n<p>在左侧选择工具，获取代码。看下代码中你的<code>short_name</code>是多少。其实就是你注册的多说域名前缀。</p>\n<p>在<code>_config.yml</code>中，配置上<code>duoshuo</code>下的<code>name</code>即可，同时要记得把<code>status</code>置为<code>true</code>。</p>\n<p>如果你希望某一篇文章不能被评论，可以在文章顶部加入字段<code>nocomments: true</code>。或者，登录多说进行控制。</p>\n<h2 id=\"访问统计\"><a href=\"#访问统计\" class=\"headerlink\" title=\"访问统计\"></a>访问统计</h2><p>V0.1版本方案：</p>\n<p>可以在<code>_config.yml</code>中配置上<code>page_analysis</code>下的<code>common</code>。</p>\n<p>比如链接形式（建议去掉http和https前缀）：</p>\n<blockquote>\n<p>百度统计：//hm.baidu.com/hm.js?515a77345b51b4568446b02f666467d3</p>\n<p>友盟统计(站长统计)：//s11.cnzz.com/stat.php?id=1200000000&amp;web_id=1200000000</p>\n<p>腾讯统计：//tajs.qq.com/stats?sId=59050000</p>\n</blockquote>\n<p>V1.0版本方案：</p>\n<p>由于为了兼容（更简单的实现）多家统计平台的高级统计，请直接在<code>_includes/user.analysis.html</code>进行修改。</p>"},{"layout":"post","title":"购买beyond compare","date":"2016-10-23T22:25:00.000Z","_content":"\n一直在找MAC下的bc（beyond compare），倒还好，不太急。一方面是办公还有windows用，当时找到了bc3的破解版。一方面是bc可以免费试用30天（我总觉得是30次）。\n\n看过国外官网，个人普通版，30美金。也看过国内官网，299元。国内目前都是优惠，才是这个价格。原价399元。\n\n我自己也算了下，按照现在的汇率，国外相当于是202快，国内还是黑啊！\n\n<!-- more -->\n\n其实最关键的是，国内只有官网，没有任何资料介绍，也没有能联系上的客服。\n\n比如说吧，我关注这两点：\n\n* 序列号能否进行升级。等到出了bc5时候，bc4用户序列号还能否用？\n* 能否用多台机器？\n\n国内官网的话，找不到答案。\n\n但是看了看国外官网，了解到：\n\n* 根据之前bc2，bc3的经验，如果是花钱购买的话，那么可以升级到新的一版本（和购买时间有关）。如果时间超出了限制，那么可以半价购买。\n* 买的是1 user，非1PC/1MAC这类。也就是说，没有限制机器一说。当然这点上，通过之前网上的序列号也能证明，一号可以在多个机器上启动。\n\n> 这里我应该说下，还真有一号一个机器的软件。就是我们爱用的IntelJ旗下软件。\n>\n> 同一个局域网内，相同注册信息只能有一个机器里的软件能启动，其他机器不能启动。机器上会有同网段提醒。\n\n### 今天再次去看看\n之前记得有一个20% off的优惠，今天又再次去看看，主要是看看能不能支付宝支付。\n\n结果发现20% off是给一个优惠码，购买时候可以输入。\n\n这样发现**奇迹**了，原本30美金的bc，直接变成了24美金！欣喜若狂！！激动的查看支付方式，果真，只能信用卡/PayPal。\n\n![image](https://cdn0.yukapril.com/blog/2016-10-23-buy-bc.png-wm.white)\n\n还好自己有PayPal。\n\n### 找回PayPal密码\n\n这，真是一波三折。\n\n##### 密码找回\n\n邮箱记得，密码不记得了，找回。\n\n找回是没问题的，但是要求输入绑定的银行卡卡号！我去，PayPal是我2011年注册的，当时还在用我人生的第一张银行卡——工商银行的呢。后来没多久就因为卡片有些损毁更换了一张。\n\n这还不算完。\n\n更换以后，一直有问题，因为当时我还小，没有身份证，是户口本开户。而且，最早还是没有卡，只有存折。后来升级的卡。这样导致了换完的卡网上支付不太行。\n\n这样凑合过了几年，因为我上班了，用工资卡。\n\n这样也不算完。\n\n今年还换过一次，因为这次计划取消存折，同时用身份证更新信息。换成了丑陋的协和医院封面卡。\n\n所以，要想找到第一张卡的卡号，难上加难。\n\n意外的是，我竟然背了34遍，慢慢把最早的卡号背出来了...\n\n> 一直把自己的记忆力比作20年不会忘，看来是真的。\n\n##### 重新登录\n\n有了卡号，找回密码很顺利。\n\n结果第一次还是失败了。\n\n因为，新密码和原密码相同...相同...\n\n不会吧，我记得PayPal我至少有将近2年没有动过了，竟然当时的密码和现在的想法一样...\n\n换了更复杂一点的密码，这样才登录了。删除银行卡，更新信息！\n\n### 既然才24美金，那就买吧~\n\n购买算是非常顺利，国外嘛，不需要密码，信用卡是通过卡后面的cvv2（就是那三个数字）进行验证的。\n\n不停地收到短信，邮件，购买成功。各种订单，注册信息发过来了。\n\n太激动了。人生中记忆力中第一个PC/MAC付费商业软件。（记忆力可参考上文）\n\n### 软件注册\n\n第一件事就是删除中文版原版，不为别的，真的是中文版怎么没办法点击注册啊！只能删除换成英文原版。\n\n安装好，填入注册信息，一句感谢的话，让自己好感动。感动了很久...\n\n最后，注册成功！\n\n![image](https://cdn0.yukapril.com/blog/2016-10-23-bc-register.png-wm.white)\n\n","source":"_posts/2016/2016-10-23-buy-beyond-compare.md","raw":"---\nlayout: post\ntitle: \"购买beyond compare\"\ndate: 2016-10-23 22:25:00 GMT+0800\ncategories: [随笔]\ntags:  [beyond compare,bc]\n---\n\n一直在找MAC下的bc（beyond compare），倒还好，不太急。一方面是办公还有windows用，当时找到了bc3的破解版。一方面是bc可以免费试用30天（我总觉得是30次）。\n\n看过国外官网，个人普通版，30美金。也看过国内官网，299元。国内目前都是优惠，才是这个价格。原价399元。\n\n我自己也算了下，按照现在的汇率，国外相当于是202快，国内还是黑啊！\n\n<!-- more -->\n\n其实最关键的是，国内只有官网，没有任何资料介绍，也没有能联系上的客服。\n\n比如说吧，我关注这两点：\n\n* 序列号能否进行升级。等到出了bc5时候，bc4用户序列号还能否用？\n* 能否用多台机器？\n\n国内官网的话，找不到答案。\n\n但是看了看国外官网，了解到：\n\n* 根据之前bc2，bc3的经验，如果是花钱购买的话，那么可以升级到新的一版本（和购买时间有关）。如果时间超出了限制，那么可以半价购买。\n* 买的是1 user，非1PC/1MAC这类。也就是说，没有限制机器一说。当然这点上，通过之前网上的序列号也能证明，一号可以在多个机器上启动。\n\n> 这里我应该说下，还真有一号一个机器的软件。就是我们爱用的IntelJ旗下软件。\n>\n> 同一个局域网内，相同注册信息只能有一个机器里的软件能启动，其他机器不能启动。机器上会有同网段提醒。\n\n### 今天再次去看看\n之前记得有一个20% off的优惠，今天又再次去看看，主要是看看能不能支付宝支付。\n\n结果发现20% off是给一个优惠码，购买时候可以输入。\n\n这样发现**奇迹**了，原本30美金的bc，直接变成了24美金！欣喜若狂！！激动的查看支付方式，果真，只能信用卡/PayPal。\n\n![image](https://cdn0.yukapril.com/blog/2016-10-23-buy-bc.png-wm.white)\n\n还好自己有PayPal。\n\n### 找回PayPal密码\n\n这，真是一波三折。\n\n##### 密码找回\n\n邮箱记得，密码不记得了，找回。\n\n找回是没问题的，但是要求输入绑定的银行卡卡号！我去，PayPal是我2011年注册的，当时还在用我人生的第一张银行卡——工商银行的呢。后来没多久就因为卡片有些损毁更换了一张。\n\n这还不算完。\n\n更换以后，一直有问题，因为当时我还小，没有身份证，是户口本开户。而且，最早还是没有卡，只有存折。后来升级的卡。这样导致了换完的卡网上支付不太行。\n\n这样凑合过了几年，因为我上班了，用工资卡。\n\n这样也不算完。\n\n今年还换过一次，因为这次计划取消存折，同时用身份证更新信息。换成了丑陋的协和医院封面卡。\n\n所以，要想找到第一张卡的卡号，难上加难。\n\n意外的是，我竟然背了34遍，慢慢把最早的卡号背出来了...\n\n> 一直把自己的记忆力比作20年不会忘，看来是真的。\n\n##### 重新登录\n\n有了卡号，找回密码很顺利。\n\n结果第一次还是失败了。\n\n因为，新密码和原密码相同...相同...\n\n不会吧，我记得PayPal我至少有将近2年没有动过了，竟然当时的密码和现在的想法一样...\n\n换了更复杂一点的密码，这样才登录了。删除银行卡，更新信息！\n\n### 既然才24美金，那就买吧~\n\n购买算是非常顺利，国外嘛，不需要密码，信用卡是通过卡后面的cvv2（就是那三个数字）进行验证的。\n\n不停地收到短信，邮件，购买成功。各种订单，注册信息发过来了。\n\n太激动了。人生中记忆力中第一个PC/MAC付费商业软件。（记忆力可参考上文）\n\n### 软件注册\n\n第一件事就是删除中文版原版，不为别的，真的是中文版怎么没办法点击注册啊！只能删除换成英文原版。\n\n安装好，填入注册信息，一句感谢的话，让自己好感动。感动了很久...\n\n最后，注册成功！\n\n![image](https://cdn0.yukapril.com/blog/2016-10-23-bc-register.png-wm.white)\n\n","slug":"2016-2016-10-23-buy-beyond-compare","published":1,"updated":"2020-03-02T07:16:34.602Z","comments":1,"photos":[],"link":"","_id":"cka5ik89z0006nybgnkekmnl0","content":"<p>一直在找MAC下的bc（beyond compare），倒还好，不太急。一方面是办公还有windows用，当时找到了bc3的破解版。一方面是bc可以免费试用30天（我总觉得是30次）。</p>\n<p>看过国外官网，个人普通版，30美金。也看过国内官网，299元。国内目前都是优惠，才是这个价格。原价399元。</p>\n<p>我自己也算了下，按照现在的汇率，国外相当于是202快，国内还是黑啊！</p>\n<a id=\"more\"></a>\n\n<p>其实最关键的是，国内只有官网，没有任何资料介绍，也没有能联系上的客服。</p>\n<p>比如说吧，我关注这两点：</p>\n<ul>\n<li>序列号能否进行升级。等到出了bc5时候，bc4用户序列号还能否用？</li>\n<li>能否用多台机器？</li>\n</ul>\n<p>国内官网的话，找不到答案。</p>\n<p>但是看了看国外官网，了解到：</p>\n<ul>\n<li>根据之前bc2，bc3的经验，如果是花钱购买的话，那么可以升级到新的一版本（和购买时间有关）。如果时间超出了限制，那么可以半价购买。</li>\n<li>买的是1 user，非1PC/1MAC这类。也就是说，没有限制机器一说。当然这点上，通过之前网上的序列号也能证明，一号可以在多个机器上启动。</li>\n</ul>\n<blockquote>\n<p>这里我应该说下，还真有一号一个机器的软件。就是我们爱用的IntelJ旗下软件。</p>\n<p>同一个局域网内，相同注册信息只能有一个机器里的软件能启动，其他机器不能启动。机器上会有同网段提醒。</p>\n</blockquote>\n<h3 id=\"今天再次去看看\"><a href=\"#今天再次去看看\" class=\"headerlink\" title=\"今天再次去看看\"></a>今天再次去看看</h3><p>之前记得有一个20% off的优惠，今天又再次去看看，主要是看看能不能支付宝支付。</p>\n<p>结果发现20% off是给一个优惠码，购买时候可以输入。</p>\n<p>这样发现<strong>奇迹</strong>了，原本30美金的bc，直接变成了24美金！欣喜若狂！！激动的查看支付方式，果真，只能信用卡/PayPal。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-23-buy-bc.png-wm.white\" alt=\"image\"></p>\n<p>还好自己有PayPal。</p>\n<h3 id=\"找回PayPal密码\"><a href=\"#找回PayPal密码\" class=\"headerlink\" title=\"找回PayPal密码\"></a>找回PayPal密码</h3><p>这，真是一波三折。</p>\n<h5 id=\"密码找回\"><a href=\"#密码找回\" class=\"headerlink\" title=\"密码找回\"></a>密码找回</h5><p>邮箱记得，密码不记得了，找回。</p>\n<p>找回是没问题的，但是要求输入绑定的银行卡卡号！我去，PayPal是我2011年注册的，当时还在用我人生的第一张银行卡——工商银行的呢。后来没多久就因为卡片有些损毁更换了一张。</p>\n<p>这还不算完。</p>\n<p>更换以后，一直有问题，因为当时我还小，没有身份证，是户口本开户。而且，最早还是没有卡，只有存折。后来升级的卡。这样导致了换完的卡网上支付不太行。</p>\n<p>这样凑合过了几年，因为我上班了，用工资卡。</p>\n<p>这样也不算完。</p>\n<p>今年还换过一次，因为这次计划取消存折，同时用身份证更新信息。换成了丑陋的协和医院封面卡。</p>\n<p>所以，要想找到第一张卡的卡号，难上加难。</p>\n<p>意外的是，我竟然背了34遍，慢慢把最早的卡号背出来了…</p>\n<blockquote>\n<p>一直把自己的记忆力比作20年不会忘，看来是真的。</p>\n</blockquote>\n<h5 id=\"重新登录\"><a href=\"#重新登录\" class=\"headerlink\" title=\"重新登录\"></a>重新登录</h5><p>有了卡号，找回密码很顺利。</p>\n<p>结果第一次还是失败了。</p>\n<p>因为，新密码和原密码相同…相同…</p>\n<p>不会吧，我记得PayPal我至少有将近2年没有动过了，竟然当时的密码和现在的想法一样…</p>\n<p>换了更复杂一点的密码，这样才登录了。删除银行卡，更新信息！</p>\n<h3 id=\"既然才24美金，那就买吧\"><a href=\"#既然才24美金，那就买吧\" class=\"headerlink\" title=\"既然才24美金，那就买吧~\"></a>既然才24美金，那就买吧~</h3><p>购买算是非常顺利，国外嘛，不需要密码，信用卡是通过卡后面的cvv2（就是那三个数字）进行验证的。</p>\n<p>不停地收到短信，邮件，购买成功。各种订单，注册信息发过来了。</p>\n<p>太激动了。人生中记忆力中第一个PC/MAC付费商业软件。（记忆力可参考上文）</p>\n<h3 id=\"软件注册\"><a href=\"#软件注册\" class=\"headerlink\" title=\"软件注册\"></a>软件注册</h3><p>第一件事就是删除中文版原版，不为别的，真的是中文版怎么没办法点击注册啊！只能删除换成英文原版。</p>\n<p>安装好，填入注册信息，一句感谢的话，让自己好感动。感动了很久…</p>\n<p>最后，注册成功！</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-23-bc-register.png-wm.white\" alt=\"image\"></p>\n","site":{"data":{}},"excerpt":"<p>一直在找MAC下的bc（beyond compare），倒还好，不太急。一方面是办公还有windows用，当时找到了bc3的破解版。一方面是bc可以免费试用30天（我总觉得是30次）。</p>\n<p>看过国外官网，个人普通版，30美金。也看过国内官网，299元。国内目前都是优惠，才是这个价格。原价399元。</p>\n<p>我自己也算了下，按照现在的汇率，国外相当于是202快，国内还是黑啊！</p>","more":"<p>其实最关键的是，国内只有官网，没有任何资料介绍，也没有能联系上的客服。</p>\n<p>比如说吧，我关注这两点：</p>\n<ul>\n<li>序列号能否进行升级。等到出了bc5时候，bc4用户序列号还能否用？</li>\n<li>能否用多台机器？</li>\n</ul>\n<p>国内官网的话，找不到答案。</p>\n<p>但是看了看国外官网，了解到：</p>\n<ul>\n<li>根据之前bc2，bc3的经验，如果是花钱购买的话，那么可以升级到新的一版本（和购买时间有关）。如果时间超出了限制，那么可以半价购买。</li>\n<li>买的是1 user，非1PC/1MAC这类。也就是说，没有限制机器一说。当然这点上，通过之前网上的序列号也能证明，一号可以在多个机器上启动。</li>\n</ul>\n<blockquote>\n<p>这里我应该说下，还真有一号一个机器的软件。就是我们爱用的IntelJ旗下软件。</p>\n<p>同一个局域网内，相同注册信息只能有一个机器里的软件能启动，其他机器不能启动。机器上会有同网段提醒。</p>\n</blockquote>\n<h3 id=\"今天再次去看看\"><a href=\"#今天再次去看看\" class=\"headerlink\" title=\"今天再次去看看\"></a>今天再次去看看</h3><p>之前记得有一个20% off的优惠，今天又再次去看看，主要是看看能不能支付宝支付。</p>\n<p>结果发现20% off是给一个优惠码，购买时候可以输入。</p>\n<p>这样发现<strong>奇迹</strong>了，原本30美金的bc，直接变成了24美金！欣喜若狂！！激动的查看支付方式，果真，只能信用卡/PayPal。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-23-buy-bc.png-wm.white\" alt=\"image\"></p>\n<p>还好自己有PayPal。</p>\n<h3 id=\"找回PayPal密码\"><a href=\"#找回PayPal密码\" class=\"headerlink\" title=\"找回PayPal密码\"></a>找回PayPal密码</h3><p>这，真是一波三折。</p>\n<h5 id=\"密码找回\"><a href=\"#密码找回\" class=\"headerlink\" title=\"密码找回\"></a>密码找回</h5><p>邮箱记得，密码不记得了，找回。</p>\n<p>找回是没问题的，但是要求输入绑定的银行卡卡号！我去，PayPal是我2011年注册的，当时还在用我人生的第一张银行卡——工商银行的呢。后来没多久就因为卡片有些损毁更换了一张。</p>\n<p>这还不算完。</p>\n<p>更换以后，一直有问题，因为当时我还小，没有身份证，是户口本开户。而且，最早还是没有卡，只有存折。后来升级的卡。这样导致了换完的卡网上支付不太行。</p>\n<p>这样凑合过了几年，因为我上班了，用工资卡。</p>\n<p>这样也不算完。</p>\n<p>今年还换过一次，因为这次计划取消存折，同时用身份证更新信息。换成了丑陋的协和医院封面卡。</p>\n<p>所以，要想找到第一张卡的卡号，难上加难。</p>\n<p>意外的是，我竟然背了34遍，慢慢把最早的卡号背出来了…</p>\n<blockquote>\n<p>一直把自己的记忆力比作20年不会忘，看来是真的。</p>\n</blockquote>\n<h5 id=\"重新登录\"><a href=\"#重新登录\" class=\"headerlink\" title=\"重新登录\"></a>重新登录</h5><p>有了卡号，找回密码很顺利。</p>\n<p>结果第一次还是失败了。</p>\n<p>因为，新密码和原密码相同…相同…</p>\n<p>不会吧，我记得PayPal我至少有将近2年没有动过了，竟然当时的密码和现在的想法一样…</p>\n<p>换了更复杂一点的密码，这样才登录了。删除银行卡，更新信息！</p>\n<h3 id=\"既然才24美金，那就买吧\"><a href=\"#既然才24美金，那就买吧\" class=\"headerlink\" title=\"既然才24美金，那就买吧~\"></a>既然才24美金，那就买吧~</h3><p>购买算是非常顺利，国外嘛，不需要密码，信用卡是通过卡后面的cvv2（就是那三个数字）进行验证的。</p>\n<p>不停地收到短信，邮件，购买成功。各种订单，注册信息发过来了。</p>\n<p>太激动了。人生中记忆力中第一个PC/MAC付费商业软件。（记忆力可参考上文）</p>\n<h3 id=\"软件注册\"><a href=\"#软件注册\" class=\"headerlink\" title=\"软件注册\"></a>软件注册</h3><p>第一件事就是删除中文版原版，不为别的，真的是中文版怎么没办法点击注册啊！只能删除换成英文原版。</p>\n<p>安装好，填入注册信息，一句感谢的话，让自己好感动。感动了很久…</p>\n<p>最后，注册成功！</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-23-bc-register.png-wm.white\" alt=\"image\"></p>"},{"layout":"post","title":"金士顿U盘的二三事","date":"2016-10-26T21:37:00.000Z","_content":"\n最近公司要拷贝大数据，特意我在京东买了一个大容量存储，金士顿的DataTraveler 100G3，64G装。\n\n选择它，主要是之前买过相同的16G的。觉得速度还可以，质量也不错。\n\n<!-- more -->\n\n因为有时候会用到MAC拷数据，所以本来是把新U盘做成exFat格式。但是听说这个格式有一定几率会出问题，丢失数据，所以就计划着换成NTFS格式了。\n\n首先是拷贝了差不多30G的资料，发现速度非常慢，同样的电脑，同样的USB3.0接口，16G的老U盘都没有这么慢！仔细查看了下，原来是拷贝过程中经常中断，表现为速度慢慢降下来，变成0，之后过了一小会，大概5-6秒吧，速度又上去了。反反复复。\n\n考虑到可能丢数据，干脆就改成NTFS格式了。\n\n虽然说MAC需要装软件才能识别（其实不装也可以的），但是至少感觉稳定性要好一些。\n\n可是没想到，这个忽停忽动的问题，还是有。就这样凑合着用了2-3次。今天实在受不了了，决定京东投诉，申请售后。\n\n附上U盘的读写速度：\n\n金士顿DataTraveler 100G3-64G\n![image](https://cdn0.yukapril.com/blog/2016-10-26-kingston64.png-wm.black)\n\n金士顿DataTraveler 100G3-16G\n![image](https://cdn0.yukapril.com/blog/2016-10-26-kingston16.png-wm.black)\n\n以前买暇步士(hush puppies)鞋子送的U盘，8G，因该是USB3.0的\n![image](https://cdn0.yukapril.com/blog/2016-10-26-other.png-wm.black)\n\n##### 观察这三个U盘的数据\n\n除了送的贴牌U盘读取不稳定外，金士顿64G也不算好。比起16G来讲，读取差了不是一级别。而随机写入，小块数据可以说是完败，连贴牌都不如了。\n\n当然我也没有拿它进行量产，首先找京东厂商看看能不能换货吧，反复速度降为零怎么都不像是量产能搞定的。\n\n##### 最新发现\n\n今天在写文章的时候，发现MAC已经不能识别这个64GU盘了。需要通过`diskutil list`来查看。之前还能读取的，不知道为什么今天出了这个问题。（windows下无问题）\n\n--------\n\n##### 2016-10-27 更新\n\n昨晚申请维修，已经审批过了。今天上午不到12点京东快递员来收货回去了。之拿走了U盘，发票不用看了。这个配送员服务比较好，比较客气。\n\n##### 2016-10-28 更新\n\n今天中午1点多，江苏京东售后客服来电话，大概意思是：小件物品，价值不高，维修时间长，干脆免费给我换货一个。让我随时查看订单。\n\n![image](https://cdn0.yukapril.com/blog/2016-10-28-kingston-jd.png-wm.black)\n\n简单说就是客服直接免费下单，白送一个。\n\n##### 2016-10-31 更新\n\n由于赶上了周末，周六没办法派送，周一收到了U盘。整体来说，比之前的好。\n\n但是写入仍然很慢，快的话，将近24M/s。像我考了几个G左右的视频+少量PPT及网页存档，慢的时候平均速度大概1.6M/s。反正是奇慢无比。表现仍然为写入过程中，突然停住了，然后又再次传输。\n\n上图说话：\n\n默认到手是Fat32格式，速度不太快，和之前差不太多。稳定性不好。\n\n![image](https://cdn0.yukapril.com/blog/2016-10-31-kingston64-fat32.png-wm.black)\n\n我格式化为exFat格式，这回正常了，读取100M/s，写入25M/s左右。\n\n![image](https://cdn0.yukapril.com/blog/2016-10-31-kingston64-exfat.png-wm.black)\n\n我试了试ntfs格式，也比较好，竟然都超过exFat那么多。读取110M/s+，写入将近40M/s。成绩算是很好了。\n\n![image](https://cdn0.yukapril.com/blog/2016-10-31-kingston64-ntfs.png-wm.black)\n\n虽然数据不错，但是实际效果并不好。\n\n实际记录测试数据：8.79G（大量视频+少量PPT/网页存档）。用时8min29sec。折算速度：17.6M/s。像我考了几个G左右的视频\n\n就这样凑合接受吧。\n\n##### 说明：\n\n之前的截图，是在另一台电脑测试的。同样为USB3.0。但可能性能不佳。（可能电压/信号不够降成USB2.0了）。","source":"_posts/2016/2016-10-26-kingston.md","raw":"---\nlayout: post\ntitle: \"金士顿U盘的二三事\"\ndate: 2016-10-26 21:37:00 GMT+0800\ncategories: [随笔]\ntags:  [金士顿,u盘]\n---\n\n最近公司要拷贝大数据，特意我在京东买了一个大容量存储，金士顿的DataTraveler 100G3，64G装。\n\n选择它，主要是之前买过相同的16G的。觉得速度还可以，质量也不错。\n\n<!-- more -->\n\n因为有时候会用到MAC拷数据，所以本来是把新U盘做成exFat格式。但是听说这个格式有一定几率会出问题，丢失数据，所以就计划着换成NTFS格式了。\n\n首先是拷贝了差不多30G的资料，发现速度非常慢，同样的电脑，同样的USB3.0接口，16G的老U盘都没有这么慢！仔细查看了下，原来是拷贝过程中经常中断，表现为速度慢慢降下来，变成0，之后过了一小会，大概5-6秒吧，速度又上去了。反反复复。\n\n考虑到可能丢数据，干脆就改成NTFS格式了。\n\n虽然说MAC需要装软件才能识别（其实不装也可以的），但是至少感觉稳定性要好一些。\n\n可是没想到，这个忽停忽动的问题，还是有。就这样凑合着用了2-3次。今天实在受不了了，决定京东投诉，申请售后。\n\n附上U盘的读写速度：\n\n金士顿DataTraveler 100G3-64G\n![image](https://cdn0.yukapril.com/blog/2016-10-26-kingston64.png-wm.black)\n\n金士顿DataTraveler 100G3-16G\n![image](https://cdn0.yukapril.com/blog/2016-10-26-kingston16.png-wm.black)\n\n以前买暇步士(hush puppies)鞋子送的U盘，8G，因该是USB3.0的\n![image](https://cdn0.yukapril.com/blog/2016-10-26-other.png-wm.black)\n\n##### 观察这三个U盘的数据\n\n除了送的贴牌U盘读取不稳定外，金士顿64G也不算好。比起16G来讲，读取差了不是一级别。而随机写入，小块数据可以说是完败，连贴牌都不如了。\n\n当然我也没有拿它进行量产，首先找京东厂商看看能不能换货吧，反复速度降为零怎么都不像是量产能搞定的。\n\n##### 最新发现\n\n今天在写文章的时候，发现MAC已经不能识别这个64GU盘了。需要通过`diskutil list`来查看。之前还能读取的，不知道为什么今天出了这个问题。（windows下无问题）\n\n--------\n\n##### 2016-10-27 更新\n\n昨晚申请维修，已经审批过了。今天上午不到12点京东快递员来收货回去了。之拿走了U盘，发票不用看了。这个配送员服务比较好，比较客气。\n\n##### 2016-10-28 更新\n\n今天中午1点多，江苏京东售后客服来电话，大概意思是：小件物品，价值不高，维修时间长，干脆免费给我换货一个。让我随时查看订单。\n\n![image](https://cdn0.yukapril.com/blog/2016-10-28-kingston-jd.png-wm.black)\n\n简单说就是客服直接免费下单，白送一个。\n\n##### 2016-10-31 更新\n\n由于赶上了周末，周六没办法派送，周一收到了U盘。整体来说，比之前的好。\n\n但是写入仍然很慢，快的话，将近24M/s。像我考了几个G左右的视频+少量PPT及网页存档，慢的时候平均速度大概1.6M/s。反正是奇慢无比。表现仍然为写入过程中，突然停住了，然后又再次传输。\n\n上图说话：\n\n默认到手是Fat32格式，速度不太快，和之前差不太多。稳定性不好。\n\n![image](https://cdn0.yukapril.com/blog/2016-10-31-kingston64-fat32.png-wm.black)\n\n我格式化为exFat格式，这回正常了，读取100M/s，写入25M/s左右。\n\n![image](https://cdn0.yukapril.com/blog/2016-10-31-kingston64-exfat.png-wm.black)\n\n我试了试ntfs格式，也比较好，竟然都超过exFat那么多。读取110M/s+，写入将近40M/s。成绩算是很好了。\n\n![image](https://cdn0.yukapril.com/blog/2016-10-31-kingston64-ntfs.png-wm.black)\n\n虽然数据不错，但是实际效果并不好。\n\n实际记录测试数据：8.79G（大量视频+少量PPT/网页存档）。用时8min29sec。折算速度：17.6M/s。像我考了几个G左右的视频\n\n就这样凑合接受吧。\n\n##### 说明：\n\n之前的截图，是在另一台电脑测试的。同样为USB3.0。但可能性能不佳。（可能电压/信号不够降成USB2.0了）。","slug":"2016-2016-10-26-kingston","published":1,"updated":"2020-03-02T07:16:34.603Z","comments":1,"photos":[],"link":"","_id":"cka5ik8a20008nybgaqdo92kg","content":"<p>最近公司要拷贝大数据，特意我在京东买了一个大容量存储，金士顿的DataTraveler 100G3，64G装。</p>\n<p>选择它，主要是之前买过相同的16G的。觉得速度还可以，质量也不错。</p>\n<a id=\"more\"></a>\n\n<p>因为有时候会用到MAC拷数据，所以本来是把新U盘做成exFat格式。但是听说这个格式有一定几率会出问题，丢失数据，所以就计划着换成NTFS格式了。</p>\n<p>首先是拷贝了差不多30G的资料，发现速度非常慢，同样的电脑，同样的USB3.0接口，16G的老U盘都没有这么慢！仔细查看了下，原来是拷贝过程中经常中断，表现为速度慢慢降下来，变成0，之后过了一小会，大概5-6秒吧，速度又上去了。反反复复。</p>\n<p>考虑到可能丢数据，干脆就改成NTFS格式了。</p>\n<p>虽然说MAC需要装软件才能识别（其实不装也可以的），但是至少感觉稳定性要好一些。</p>\n<p>可是没想到，这个忽停忽动的问题，还是有。就这样凑合着用了2-3次。今天实在受不了了，决定京东投诉，申请售后。</p>\n<p>附上U盘的读写速度：</p>\n<p>金士顿DataTraveler 100G3-64G<br><img src=\"https://cdn0.yukapril.com/blog/2016-10-26-kingston64.png-wm.black\" alt=\"image\"></p>\n<p>金士顿DataTraveler 100G3-16G<br><img src=\"https://cdn0.yukapril.com/blog/2016-10-26-kingston16.png-wm.black\" alt=\"image\"></p>\n<p>以前买暇步士(hush puppies)鞋子送的U盘，8G，因该是USB3.0的<br><img src=\"https://cdn0.yukapril.com/blog/2016-10-26-other.png-wm.black\" alt=\"image\"></p>\n<h5 id=\"观察这三个U盘的数据\"><a href=\"#观察这三个U盘的数据\" class=\"headerlink\" title=\"观察这三个U盘的数据\"></a>观察这三个U盘的数据</h5><p>除了送的贴牌U盘读取不稳定外，金士顿64G也不算好。比起16G来讲，读取差了不是一级别。而随机写入，小块数据可以说是完败，连贴牌都不如了。</p>\n<p>当然我也没有拿它进行量产，首先找京东厂商看看能不能换货吧，反复速度降为零怎么都不像是量产能搞定的。</p>\n<h5 id=\"最新发现\"><a href=\"#最新发现\" class=\"headerlink\" title=\"最新发现\"></a>最新发现</h5><p>今天在写文章的时候，发现MAC已经不能识别这个64GU盘了。需要通过<code>diskutil list</code>来查看。之前还能读取的，不知道为什么今天出了这个问题。（windows下无问题）</p>\n<hr>\n<h5 id=\"2016-10-27-更新\"><a href=\"#2016-10-27-更新\" class=\"headerlink\" title=\"2016-10-27 更新\"></a>2016-10-27 更新</h5><p>昨晚申请维修，已经审批过了。今天上午不到12点京东快递员来收货回去了。之拿走了U盘，发票不用看了。这个配送员服务比较好，比较客气。</p>\n<h5 id=\"2016-10-28-更新\"><a href=\"#2016-10-28-更新\" class=\"headerlink\" title=\"2016-10-28 更新\"></a>2016-10-28 更新</h5><p>今天中午1点多，江苏京东售后客服来电话，大概意思是：小件物品，价值不高，维修时间长，干脆免费给我换货一个。让我随时查看订单。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-28-kingston-jd.png-wm.black\" alt=\"image\"></p>\n<p>简单说就是客服直接免费下单，白送一个。</p>\n<h5 id=\"2016-10-31-更新\"><a href=\"#2016-10-31-更新\" class=\"headerlink\" title=\"2016-10-31 更新\"></a>2016-10-31 更新</h5><p>由于赶上了周末，周六没办法派送，周一收到了U盘。整体来说，比之前的好。</p>\n<p>但是写入仍然很慢，快的话，将近24M/s。像我考了几个G左右的视频+少量PPT及网页存档，慢的时候平均速度大概1.6M/s。反正是奇慢无比。表现仍然为写入过程中，突然停住了，然后又再次传输。</p>\n<p>上图说话：</p>\n<p>默认到手是Fat32格式，速度不太快，和之前差不太多。稳定性不好。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-31-kingston64-fat32.png-wm.black\" alt=\"image\"></p>\n<p>我格式化为exFat格式，这回正常了，读取100M/s，写入25M/s左右。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-31-kingston64-exfat.png-wm.black\" alt=\"image\"></p>\n<p>我试了试ntfs格式，也比较好，竟然都超过exFat那么多。读取110M/s+，写入将近40M/s。成绩算是很好了。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-31-kingston64-ntfs.png-wm.black\" alt=\"image\"></p>\n<p>虽然数据不错，但是实际效果并不好。</p>\n<p>实际记录测试数据：8.79G（大量视频+少量PPT/网页存档）。用时8min29sec。折算速度：17.6M/s。像我考了几个G左右的视频</p>\n<p>就这样凑合接受吧。</p>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><p>之前的截图，是在另一台电脑测试的。同样为USB3.0。但可能性能不佳。（可能电压/信号不够降成USB2.0了）。</p>\n","site":{"data":{}},"excerpt":"<p>最近公司要拷贝大数据，特意我在京东买了一个大容量存储，金士顿的DataTraveler 100G3，64G装。</p>\n<p>选择它，主要是之前买过相同的16G的。觉得速度还可以，质量也不错。</p>","more":"<p>因为有时候会用到MAC拷数据，所以本来是把新U盘做成exFat格式。但是听说这个格式有一定几率会出问题，丢失数据，所以就计划着换成NTFS格式了。</p>\n<p>首先是拷贝了差不多30G的资料，发现速度非常慢，同样的电脑，同样的USB3.0接口，16G的老U盘都没有这么慢！仔细查看了下，原来是拷贝过程中经常中断，表现为速度慢慢降下来，变成0，之后过了一小会，大概5-6秒吧，速度又上去了。反反复复。</p>\n<p>考虑到可能丢数据，干脆就改成NTFS格式了。</p>\n<p>虽然说MAC需要装软件才能识别（其实不装也可以的），但是至少感觉稳定性要好一些。</p>\n<p>可是没想到，这个忽停忽动的问题，还是有。就这样凑合着用了2-3次。今天实在受不了了，决定京东投诉，申请售后。</p>\n<p>附上U盘的读写速度：</p>\n<p>金士顿DataTraveler 100G3-64G<br><img src=\"https://cdn0.yukapril.com/blog/2016-10-26-kingston64.png-wm.black\" alt=\"image\"></p>\n<p>金士顿DataTraveler 100G3-16G<br><img src=\"https://cdn0.yukapril.com/blog/2016-10-26-kingston16.png-wm.black\" alt=\"image\"></p>\n<p>以前买暇步士(hush puppies)鞋子送的U盘，8G，因该是USB3.0的<br><img src=\"https://cdn0.yukapril.com/blog/2016-10-26-other.png-wm.black\" alt=\"image\"></p>\n<h5 id=\"观察这三个U盘的数据\"><a href=\"#观察这三个U盘的数据\" class=\"headerlink\" title=\"观察这三个U盘的数据\"></a>观察这三个U盘的数据</h5><p>除了送的贴牌U盘读取不稳定外，金士顿64G也不算好。比起16G来讲，读取差了不是一级别。而随机写入，小块数据可以说是完败，连贴牌都不如了。</p>\n<p>当然我也没有拿它进行量产，首先找京东厂商看看能不能换货吧，反复速度降为零怎么都不像是量产能搞定的。</p>\n<h5 id=\"最新发现\"><a href=\"#最新发现\" class=\"headerlink\" title=\"最新发现\"></a>最新发现</h5><p>今天在写文章的时候，发现MAC已经不能识别这个64GU盘了。需要通过<code>diskutil list</code>来查看。之前还能读取的，不知道为什么今天出了这个问题。（windows下无问题）</p>\n<hr>\n<h5 id=\"2016-10-27-更新\"><a href=\"#2016-10-27-更新\" class=\"headerlink\" title=\"2016-10-27 更新\"></a>2016-10-27 更新</h5><p>昨晚申请维修，已经审批过了。今天上午不到12点京东快递员来收货回去了。之拿走了U盘，发票不用看了。这个配送员服务比较好，比较客气。</p>\n<h5 id=\"2016-10-28-更新\"><a href=\"#2016-10-28-更新\" class=\"headerlink\" title=\"2016-10-28 更新\"></a>2016-10-28 更新</h5><p>今天中午1点多，江苏京东售后客服来电话，大概意思是：小件物品，价值不高，维修时间长，干脆免费给我换货一个。让我随时查看订单。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-28-kingston-jd.png-wm.black\" alt=\"image\"></p>\n<p>简单说就是客服直接免费下单，白送一个。</p>\n<h5 id=\"2016-10-31-更新\"><a href=\"#2016-10-31-更新\" class=\"headerlink\" title=\"2016-10-31 更新\"></a>2016-10-31 更新</h5><p>由于赶上了周末，周六没办法派送，周一收到了U盘。整体来说，比之前的好。</p>\n<p>但是写入仍然很慢，快的话，将近24M/s。像我考了几个G左右的视频+少量PPT及网页存档，慢的时候平均速度大概1.6M/s。反正是奇慢无比。表现仍然为写入过程中，突然停住了，然后又再次传输。</p>\n<p>上图说话：</p>\n<p>默认到手是Fat32格式，速度不太快，和之前差不太多。稳定性不好。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-31-kingston64-fat32.png-wm.black\" alt=\"image\"></p>\n<p>我格式化为exFat格式，这回正常了，读取100M/s，写入25M/s左右。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-31-kingston64-exfat.png-wm.black\" alt=\"image\"></p>\n<p>我试了试ntfs格式，也比较好，竟然都超过exFat那么多。读取110M/s+，写入将近40M/s。成绩算是很好了。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-31-kingston64-ntfs.png-wm.black\" alt=\"image\"></p>\n<p>虽然数据不错，但是实际效果并不好。</p>\n<p>实际记录测试数据：8.79G（大量视频+少量PPT/网页存档）。用时8min29sec。折算速度：17.6M/s。像我考了几个G左右的视频</p>\n<p>就这样凑合接受吧。</p>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><p>之前的截图，是在另一台电脑测试的。同样为USB3.0。但可能性能不佳。（可能电压/信号不够降成USB2.0了）。</p>"},{"layout":"post","title":"sin36°的手工计算","date":"2016-10-28T20:59:00.000Z","_content":"\n之前看到一篇文章（[见此](https://www.zhihu.com/question/51970177)），其中有说道sin36°的计算。\n\n自己尝试了下，果真不会算。\n\n其实不会算的原因在于没有画好图，而且参考了错误的思路。\n\n<!-- more -->\n\n### 下面演示下正确的计算方法：\n\n草稿纸开始作图（如下图）\n\n* 画一个等腰三角形ABC，角C为36°。则角A角B均为72°。（三角形内角180°）\n* 画角A的角平分线，相交CB于E点。此时角EAB为36°。角AEB为72°。\n\n通过以上两步，我们发现：\n\n* 我们有了三个等腰三角形。CAB和ECA和ABE。\n* 三角形相似，则对应边成比例。（来源于相似三角形公式）\n\n![image](https://cdn0.yukapril.com/blog/2016-10-27-sin36-1.png-wm.black.s)\n\n##### 下面，我们开始进行计算。\n\n假设CB长度为1，此时CE=AE=AB为x。EB则为1-x。\n\n相似三角形，底边比斜边相等：\n\n$$\\frac{BE}{AB}  = \\frac{AB}{CB}$$\n\n即：\n\n$$\\frac{1-x}{x}  = \\frac{x}{1}$$\n\n$$x^2 = 1-x$$\n\n对结果进行整理：\n\n$$x^2 +x-1= 0$$\n\n使用求根公式：\n\n$$x=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}$$\n\n带入后得到：\n\n$$x=\\frac{-1\\pm\\sqrt{1^2+4}}{2}=\\frac{-1\\pm\\sqrt{5}}{2}$$\n\n在这里，显然是x>0的。所以：\n\n$$x=\\frac{-1+\\sqrt{5}}{2}$$\n\n##### 好。基本上每条线的长度我们都是已知的了。此时要求sin36°，可以转化为求角CAE的正弦。\n\n\n我们再做一条辅助线：\n\n* 做E点的垂直线，相交CA于垂足D。\n\n![image](https://cdn0.yukapril.com/blog/2016-10-27-sin36-2.png-wm.black.s)\n\n这样就有：\n\n$$sin36^o = \\frac{DE}{AE}=\\frac{\\sqrt{AE^2-AD^2}}{AE}$$\n\n$$sin36^o=\\frac{\\sqrt{x^2-0.5^2}}{x}$$\n\n$$sin36^o = \\frac{\\sqrt{(\\frac{-1+\\sqrt{5}}{2})^2-0.5^2}}{\\frac{-1+\\sqrt{5}}{2}}$$\n\n$$sin36^o =\\frac{\\sqrt{(\\frac{6-2\\sqrt{5}}{4})-\\frac{1}{4}}}{\\frac{-1+\\sqrt{5}}{2}}$$\n\n$$sin36^o =\\frac{\\sqrt{\\frac{5-2\\sqrt{5}}{4}}}{\\frac{-1+\\sqrt{5}}{2}}$$\n\n$$sin36^o =\\frac{\\frac{1}{2}\\sqrt{5-2\\sqrt{5}}}{\\frac{-1+\\sqrt{5}}{2}}$$\n\n$$sin36^o =\\frac{\\sqrt{5-2\\sqrt{5}}}{-1+\\sqrt{5}}$$\n\n$$sin36^o =\\frac{\\sqrt{5-2\\sqrt{5}}*\\sqrt{(\\sqrt{5}+1)^2}}{(\\sqrt{5}-1)(\\sqrt{5}+1)}$$\n\n$$sin36^o =\\frac{\\sqrt{5-2\\sqrt{5}}*\\sqrt{(5+1+2\\sqrt{5})}}{4}$$\n\n$$sin36^o =\\frac{\\sqrt{(5-2\\sqrt{5})}*\\sqrt{(6+2\\sqrt{5})}}{4}$$\n\n$$sin36^o =\\frac{\\sqrt{10-2\\sqrt{5}}}{4}$$\n\n##### 最终检验\n> sqrt(10-2*sqrt(5))/4\n>\n> ans =  0.58779\n>\n> sin(36/180*pi)\n>\n> ans =  0.58779\n\n计算正确。\n\n<script src=\"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\"></script>","source":"_posts/2016/2016-10-28-sin36.md","raw":"---\nlayout: post\ntitle: \"sin36°的手工计算\"\ndate: 2016-10-28 20:59:00 GMT+0800\ncategories: [数学]\ntags:  [计算,数学]\n---\n\n之前看到一篇文章（[见此](https://www.zhihu.com/question/51970177)），其中有说道sin36°的计算。\n\n自己尝试了下，果真不会算。\n\n其实不会算的原因在于没有画好图，而且参考了错误的思路。\n\n<!-- more -->\n\n### 下面演示下正确的计算方法：\n\n草稿纸开始作图（如下图）\n\n* 画一个等腰三角形ABC，角C为36°。则角A角B均为72°。（三角形内角180°）\n* 画角A的角平分线，相交CB于E点。此时角EAB为36°。角AEB为72°。\n\n通过以上两步，我们发现：\n\n* 我们有了三个等腰三角形。CAB和ECA和ABE。\n* 三角形相似，则对应边成比例。（来源于相似三角形公式）\n\n![image](https://cdn0.yukapril.com/blog/2016-10-27-sin36-1.png-wm.black.s)\n\n##### 下面，我们开始进行计算。\n\n假设CB长度为1，此时CE=AE=AB为x。EB则为1-x。\n\n相似三角形，底边比斜边相等：\n\n$$\\frac{BE}{AB}  = \\frac{AB}{CB}$$\n\n即：\n\n$$\\frac{1-x}{x}  = \\frac{x}{1}$$\n\n$$x^2 = 1-x$$\n\n对结果进行整理：\n\n$$x^2 +x-1= 0$$\n\n使用求根公式：\n\n$$x=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}$$\n\n带入后得到：\n\n$$x=\\frac{-1\\pm\\sqrt{1^2+4}}{2}=\\frac{-1\\pm\\sqrt{5}}{2}$$\n\n在这里，显然是x>0的。所以：\n\n$$x=\\frac{-1+\\sqrt{5}}{2}$$\n\n##### 好。基本上每条线的长度我们都是已知的了。此时要求sin36°，可以转化为求角CAE的正弦。\n\n\n我们再做一条辅助线：\n\n* 做E点的垂直线，相交CA于垂足D。\n\n![image](https://cdn0.yukapril.com/blog/2016-10-27-sin36-2.png-wm.black.s)\n\n这样就有：\n\n$$sin36^o = \\frac{DE}{AE}=\\frac{\\sqrt{AE^2-AD^2}}{AE}$$\n\n$$sin36^o=\\frac{\\sqrt{x^2-0.5^2}}{x}$$\n\n$$sin36^o = \\frac{\\sqrt{(\\frac{-1+\\sqrt{5}}{2})^2-0.5^2}}{\\frac{-1+\\sqrt{5}}{2}}$$\n\n$$sin36^o =\\frac{\\sqrt{(\\frac{6-2\\sqrt{5}}{4})-\\frac{1}{4}}}{\\frac{-1+\\sqrt{5}}{2}}$$\n\n$$sin36^o =\\frac{\\sqrt{\\frac{5-2\\sqrt{5}}{4}}}{\\frac{-1+\\sqrt{5}}{2}}$$\n\n$$sin36^o =\\frac{\\frac{1}{2}\\sqrt{5-2\\sqrt{5}}}{\\frac{-1+\\sqrt{5}}{2}}$$\n\n$$sin36^o =\\frac{\\sqrt{5-2\\sqrt{5}}}{-1+\\sqrt{5}}$$\n\n$$sin36^o =\\frac{\\sqrt{5-2\\sqrt{5}}*\\sqrt{(\\sqrt{5}+1)^2}}{(\\sqrt{5}-1)(\\sqrt{5}+1)}$$\n\n$$sin36^o =\\frac{\\sqrt{5-2\\sqrt{5}}*\\sqrt{(5+1+2\\sqrt{5})}}{4}$$\n\n$$sin36^o =\\frac{\\sqrt{(5-2\\sqrt{5})}*\\sqrt{(6+2\\sqrt{5})}}{4}$$\n\n$$sin36^o =\\frac{\\sqrt{10-2\\sqrt{5}}}{4}$$\n\n##### 最终检验\n> sqrt(10-2*sqrt(5))/4\n>\n> ans =  0.58779\n>\n> sin(36/180*pi)\n>\n> ans =  0.58779\n\n计算正确。\n\n<script src=\"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\"></script>","slug":"2016-2016-10-28-sin36","published":1,"updated":"2020-03-02T07:16:34.603Z","comments":1,"photos":[],"link":"","_id":"cka5ik8a4000bnybgdyni5jiy","content":"<p>之前看到一篇文章（<a href=\"https://www.zhihu.com/question/51970177\" target=\"_blank\" rel=\"noopener\">见此</a>），其中有说道sin36°的计算。</p>\n<p>自己尝试了下，果真不会算。</p>\n<p>其实不会算的原因在于没有画好图，而且参考了错误的思路。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"下面演示下正确的计算方法：\"><a href=\"#下面演示下正确的计算方法：\" class=\"headerlink\" title=\"下面演示下正确的计算方法：\"></a>下面演示下正确的计算方法：</h3><p>草稿纸开始作图（如下图）</p>\n<ul>\n<li>画一个等腰三角形ABC，角C为36°。则角A角B均为72°。（三角形内角180°）</li>\n<li>画角A的角平分线，相交CB于E点。此时角EAB为36°。角AEB为72°。</li>\n</ul>\n<p>通过以上两步，我们发现：</p>\n<ul>\n<li>我们有了三个等腰三角形。CAB和ECA和ABE。</li>\n<li>三角形相似，则对应边成比例。（来源于相似三角形公式）</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-27-sin36-1.png-wm.black.s\" alt=\"image\"></p>\n<h5 id=\"下面，我们开始进行计算。\"><a href=\"#下面，我们开始进行计算。\" class=\"headerlink\" title=\"下面，我们开始进行计算。\"></a>下面，我们开始进行计算。</h5><p>假设CB长度为1，此时CE=AE=AB为x。EB则为1-x。</p>\n<p>相似三角形，底边比斜边相等：</p>\n<p>$$\\frac{BE}{AB}  = \\frac{AB}{CB}$$</p>\n<p>即：</p>\n<p>$$\\frac{1-x}{x}  = \\frac{x}{1}$$</p>\n<p>$$x^2 = 1-x$$</p>\n<p>对结果进行整理：</p>\n<p>$$x^2 +x-1= 0$$</p>\n<p>使用求根公式：</p>\n<p>$$x=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}$$</p>\n<p>带入后得到：</p>\n<p>$$x=\\frac{-1\\pm\\sqrt{1^2+4}}{2}=\\frac{-1\\pm\\sqrt{5}}{2}$$</p>\n<p>在这里，显然是x&gt;0的。所以：</p>\n<p>$$x=\\frac{-1+\\sqrt{5}}{2}$$</p>\n<h5 id=\"好。基本上每条线的长度我们都是已知的了。此时要求sin36°，可以转化为求角CAE的正弦。\"><a href=\"#好。基本上每条线的长度我们都是已知的了。此时要求sin36°，可以转化为求角CAE的正弦。\" class=\"headerlink\" title=\"好。基本上每条线的长度我们都是已知的了。此时要求sin36°，可以转化为求角CAE的正弦。\"></a>好。基本上每条线的长度我们都是已知的了。此时要求sin36°，可以转化为求角CAE的正弦。</h5><p>我们再做一条辅助线：</p>\n<ul>\n<li>做E点的垂直线，相交CA于垂足D。</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-27-sin36-2.png-wm.black.s\" alt=\"image\"></p>\n<p>这样就有：</p>\n<p>$$sin36^o = \\frac{DE}{AE}=\\frac{\\sqrt{AE^2-AD^2}}{AE}$$</p>\n<p>$$sin36^o=\\frac{\\sqrt{x^2-0.5^2}}{x}$$</p>\n<p>$$sin36^o = \\frac{\\sqrt{(\\frac{-1+\\sqrt{5}}{2})^2-0.5^2}}{\\frac{-1+\\sqrt{5}}{2}}$$</p>\n<p>$$sin36^o =\\frac{\\sqrt{(\\frac{6-2\\sqrt{5}}{4})-\\frac{1}{4}}}{\\frac{-1+\\sqrt{5}}{2}}$$</p>\n<p>$$sin36^o =\\frac{\\sqrt{\\frac{5-2\\sqrt{5}}{4}}}{\\frac{-1+\\sqrt{5}}{2}}$$</p>\n<p>$$sin36^o =\\frac{\\frac{1}{2}\\sqrt{5-2\\sqrt{5}}}{\\frac{-1+\\sqrt{5}}{2}}$$</p>\n<p>$$sin36^o =\\frac{\\sqrt{5-2\\sqrt{5}}}{-1+\\sqrt{5}}$$</p>\n<p>$$sin36^o =\\frac{\\sqrt{5-2\\sqrt{5}}*\\sqrt{(\\sqrt{5}+1)^2}}{(\\sqrt{5}-1)(\\sqrt{5}+1)}$$</p>\n<p>$$sin36^o =\\frac{\\sqrt{5-2\\sqrt{5}}*\\sqrt{(5+1+2\\sqrt{5})}}{4}$$</p>\n<p>$$sin36^o =\\frac{\\sqrt{(5-2\\sqrt{5})}*\\sqrt{(6+2\\sqrt{5})}}{4}$$</p>\n<p>$$sin36^o =\\frac{\\sqrt{10-2\\sqrt{5}}}{4}$$</p>\n<h5 id=\"最终检验\"><a href=\"#最终检验\" class=\"headerlink\" title=\"最终检验\"></a>最终检验</h5><blockquote>\n<p>sqrt(10-2*sqrt(5))/4</p>\n<p>ans =  0.58779</p>\n<p>sin(36/180*pi)</p>\n<p>ans =  0.58779</p>\n</blockquote>\n<p>计算正确。</p>\n<script src=\"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\"></script>","site":{"data":{}},"excerpt":"<p>之前看到一篇文章（<a href=\"https://www.zhihu.com/question/51970177\" target=\"_blank\" rel=\"noopener\">见此</a>），其中有说道sin36°的计算。</p>\n<p>自己尝试了下，果真不会算。</p>\n<p>其实不会算的原因在于没有画好图，而且参考了错误的思路。</p>","more":"<h3 id=\"下面演示下正确的计算方法：\"><a href=\"#下面演示下正确的计算方法：\" class=\"headerlink\" title=\"下面演示下正确的计算方法：\"></a>下面演示下正确的计算方法：</h3><p>草稿纸开始作图（如下图）</p>\n<ul>\n<li>画一个等腰三角形ABC，角C为36°。则角A角B均为72°。（三角形内角180°）</li>\n<li>画角A的角平分线，相交CB于E点。此时角EAB为36°。角AEB为72°。</li>\n</ul>\n<p>通过以上两步，我们发现：</p>\n<ul>\n<li>我们有了三个等腰三角形。CAB和ECA和ABE。</li>\n<li>三角形相似，则对应边成比例。（来源于相似三角形公式）</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-27-sin36-1.png-wm.black.s\" alt=\"image\"></p>\n<h5 id=\"下面，我们开始进行计算。\"><a href=\"#下面，我们开始进行计算。\" class=\"headerlink\" title=\"下面，我们开始进行计算。\"></a>下面，我们开始进行计算。</h5><p>假设CB长度为1，此时CE=AE=AB为x。EB则为1-x。</p>\n<p>相似三角形，底边比斜边相等：</p>\n<p>$$\\frac{BE}{AB}  = \\frac{AB}{CB}$$</p>\n<p>即：</p>\n<p>$$\\frac{1-x}{x}  = \\frac{x}{1}$$</p>\n<p>$$x^2 = 1-x$$</p>\n<p>对结果进行整理：</p>\n<p>$$x^2 +x-1= 0$$</p>\n<p>使用求根公式：</p>\n<p>$$x=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}$$</p>\n<p>带入后得到：</p>\n<p>$$x=\\frac{-1\\pm\\sqrt{1^2+4}}{2}=\\frac{-1\\pm\\sqrt{5}}{2}$$</p>\n<p>在这里，显然是x&gt;0的。所以：</p>\n<p>$$x=\\frac{-1+\\sqrt{5}}{2}$$</p>\n<h5 id=\"好。基本上每条线的长度我们都是已知的了。此时要求sin36°，可以转化为求角CAE的正弦。\"><a href=\"#好。基本上每条线的长度我们都是已知的了。此时要求sin36°，可以转化为求角CAE的正弦。\" class=\"headerlink\" title=\"好。基本上每条线的长度我们都是已知的了。此时要求sin36°，可以转化为求角CAE的正弦。\"></a>好。基本上每条线的长度我们都是已知的了。此时要求sin36°，可以转化为求角CAE的正弦。</h5><p>我们再做一条辅助线：</p>\n<ul>\n<li>做E点的垂直线，相交CA于垂足D。</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-10-27-sin36-2.png-wm.black.s\" alt=\"image\"></p>\n<p>这样就有：</p>\n<p>$$sin36^o = \\frac{DE}{AE}=\\frac{\\sqrt{AE^2-AD^2}}{AE}$$</p>\n<p>$$sin36^o=\\frac{\\sqrt{x^2-0.5^2}}{x}$$</p>\n<p>$$sin36^o = \\frac{\\sqrt{(\\frac{-1+\\sqrt{5}}{2})^2-0.5^2}}{\\frac{-1+\\sqrt{5}}{2}}$$</p>\n<p>$$sin36^o =\\frac{\\sqrt{(\\frac{6-2\\sqrt{5}}{4})-\\frac{1}{4}}}{\\frac{-1+\\sqrt{5}}{2}}$$</p>\n<p>$$sin36^o =\\frac{\\sqrt{\\frac{5-2\\sqrt{5}}{4}}}{\\frac{-1+\\sqrt{5}}{2}}$$</p>\n<p>$$sin36^o =\\frac{\\frac{1}{2}\\sqrt{5-2\\sqrt{5}}}{\\frac{-1+\\sqrt{5}}{2}}$$</p>\n<p>$$sin36^o =\\frac{\\sqrt{5-2\\sqrt{5}}}{-1+\\sqrt{5}}$$</p>\n<p>$$sin36^o =\\frac{\\sqrt{5-2\\sqrt{5}}*\\sqrt{(\\sqrt{5}+1)^2}}{(\\sqrt{5}-1)(\\sqrt{5}+1)}$$</p>\n<p>$$sin36^o =\\frac{\\sqrt{5-2\\sqrt{5}}*\\sqrt{(5+1+2\\sqrt{5})}}{4}$$</p>\n<p>$$sin36^o =\\frac{\\sqrt{(5-2\\sqrt{5})}*\\sqrt{(6+2\\sqrt{5})}}{4}$$</p>\n<p>$$sin36^o =\\frac{\\sqrt{10-2\\sqrt{5}}}{4}$$</p>\n<h5 id=\"最终检验\"><a href=\"#最终检验\" class=\"headerlink\" title=\"最终检验\"></a>最终检验</h5><blockquote>\n<p>sqrt(10-2*sqrt(5))/4</p>\n<p>ans =  0.58779</p>\n<p>sin(36/180*pi)</p>\n<p>ans =  0.58779</p>\n</blockquote>\n<p>计算正确。</p>\n<script src=\"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\"></script>"},{"layout":"post","title":"codewars - Father and son","date":"2016-10-31T22:14:00.000Z","_content":"\n在 codewars 上面做题，有这样[一道题](https://www.codewars.com/kata/shortest-code-father-and-son)。\n\n<!-- more -->\n\n> Every uppercase letter is Father, The corresponding lowercase letters is the Son.\n>\n> Give you a string s, If the father and son both exist, keep them. If it is a separate existence, delete them. Return the result.\n>\n> For example:\n>\n> * sc(\"Aab\") should return \"Aa\"\n>\n> * sc(\"AabBc\") should return \"AabB\"\n>\n> * sc(\"AaaaAaab\") should return \"AaaaAaa\"(father can have a lot of son)\n>\n> * sc(\"aAAAaAAb\") should return \"aAAAaAA\"(son also can have a lot of father\n\n这道题不难。稍微用几分钟就能写完了。但是这道题有个难度，那就是要求120字符完成代码。\n\n所以，这道题还有一个简单的版本，[见此](http://www.codewars.com/kata/coding-3min-father-and-son/)。\n\n原始版本   (length=187)\n\n```js\nfunction sc(s){\n  return s.split('').map((v)=>{\n    if(v.toLowerCase()==v && s.indexOf(v.toUpperCase())>=0){\n      return v\n    }else if(v.toUpperCase()==v && s.indexOf(v.toLowerCase())>=0){\n      return v\n    }\n  }).join('')\n}\n```\n\n替换了toLowerCase/toUpperCase  (length=186)，这是我所了解的终极写法了..\n\n竟然长度基本没有减少...要命啊，看来重复次数太少了，不太管用。\n\n```js\nfunction sc(s){\n  var l='toLowerCase', u='toUpperCase'\n  return s.split('').map((v)=>{\n    if(v[l]()==v && s.indexOf(v[u]())>=0){\n      return v\n    }else if(v[u]()==v && s.indexOf(v[l]())>=0){\n      return v\n    }\n  }).join('')\n}\n```\n\n删除else if (length=169)，这句话可以合并的。\n\n```js\nfunction sc(s){\n  var l='toLowerCase', u='toUpperCase'\n  return s.split('').map((v)=>{\n    if(v[l]()==v && s.indexOf(v[u]())>=0 || v[u]()==v && s.indexOf(v[l]())>=0){\n      return v\n    }\n  }).join('')\n}\n```\n\n去掉没用的括号 (length=165)\n\n```js\nfunction sc(s){\n  var l='toLowerCase', u='toUpperCase'\n  return s.split('').map(v => {\n    if(v[l]()==v && s.indexOf(v[u]())>=0 || v[u]()==v && s.indexOf(v[l]())>=0)return v\n  }).join('')\n}\n```\n\n这样来试，看来是不行的，必须要优化下逻辑了。\n\n仔细研究下，其实if语句内容是多余的，直接判断当前字符在字符串里面，必须有大写和小写就行了，没必要进行区分(length=143)\n\n```js\nfunction sc(s){\n  var l='toLowerCase', u='toUpperCase'\n  return s.split('').map(v => {\n    if(s.indexOf(v[l]())>=0 &&s.indexOf(v[u]())>=0)return v\n  }).join('')\n}\n```\n\n突然发现，只要函数正确，也可以修改自带的函数结构的。调整为ES6格式。(length=132)\n\n```js\nsc=s=>{\n  var l='toLowerCase', u='toUpperCase'\n  return s.split('').map(v => {\n    if(s.indexOf(v[l]())>=0 &&s.indexOf(v[u]())>=0)return v\n  }).join('')\n}\n```\n\n之后的路，就非常艰辛了。我也参考了简单问题中的部分答案。比如说用到了`filter` `includes`。\n\n这个确实要说，我数组用的不好，刚刚才能用上reduce，虽然听说过filter，但是没有实际应用过。\n\n查过[资料](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)得知，类似于`map`，同样为`return`控制，只不过返回`true` `false`来控制新数组是否包含当前数据而已。\n\n举个非常简单的例子：\n\n```js\nvar filtered = [12, 5, 8, 130, 44].filter((el)=>el >= 10)\n// [12, 130, 44]\n```\n\n改造下，试试看。(length=121)\n\n```js\nsc=s=>{\n  var l='toLowerCase', u='toUpperCase'\n  return s.split('').filter(v => s.indexOf(v[l]())>=0 && s.indexOf(v[u]())>=0).join('')\n}\n```\n\n\n\n这次虽然是121字符，但是实际可以通过了，刷个流氓就能（去掉`var`）。\n\n很明显，这么做不好。那么研究下`includes`。这个方法我都没有听说过。\n\n文档见[这里](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes)。因为实在也是太简单了，直接上例子：\n\n```js\n[1, 2, 3].includes(2); // true\n```\n\n使用`includes`有个好处，那就是省去了判断符号`>=`。我来看看。\n\n```js\nsc=s=>{\n  var l='toLowerCase', u='toUpperCase'\n  return s.split('').filter(v => s.includes(v[l]()) && s.includes(v[u]())).join('')\n}\n```\n\n写的时候我就能感觉到，这次肯定更短了！省去了很多字符...果真，length=117。\n\n老规矩，替换字符法。结果发现，竟然还多了一个字符...哎...代码量太少，没办法这么优化啊。\n\n所以，整理下格式，正确答案就是：\n\n```js\n//length=117\nsc = s => {\n  var l='toLowerCase',\n      u='toUpperCase'\n  return s.split('').filter(\n    v => s.includes(v[l]()) && s.includes(v[u]())\n  ).join('')\n}\n```\n\n如果耍个流氓，那么会更短\n\n```js\n//length=113\nsc = s => {\n  l='toLowerCase',\n  u='toUpperCase'\n  return s.split('').filter(\n    v => s.includes(v[l]()) && s.includes(v[u]())\n  ).join('')\n}\n```\n\n当然，这里也可以去掉定义了。还能省去很多长度。这样可以做到：\n\n```js\n//length=94\nsc = s => s.split('').filter(v => s.includes(v.toLowerCase()) && s.includes(v.toUpperCase())).join('')\n```\n\n这恐怕是最短的结果了。我看了看别的答案，没有什么好的思路了。\n\n看来编译不好使啊！还不如直接来的省事。","source":"_posts/2016/2016-10-31-codewars-father-and-son.md","raw":"---\nlayout: post\ntitle: \"codewars - Father and son\"\ndate: 2016-10-31 22:14:00 GMT+0800\ncategories: [codewars]\ntags:  [codewars]\n---\n\n在 codewars 上面做题，有这样[一道题](https://www.codewars.com/kata/shortest-code-father-and-son)。\n\n<!-- more -->\n\n> Every uppercase letter is Father, The corresponding lowercase letters is the Son.\n>\n> Give you a string s, If the father and son both exist, keep them. If it is a separate existence, delete them. Return the result.\n>\n> For example:\n>\n> * sc(\"Aab\") should return \"Aa\"\n>\n> * sc(\"AabBc\") should return \"AabB\"\n>\n> * sc(\"AaaaAaab\") should return \"AaaaAaa\"(father can have a lot of son)\n>\n> * sc(\"aAAAaAAb\") should return \"aAAAaAA\"(son also can have a lot of father\n\n这道题不难。稍微用几分钟就能写完了。但是这道题有个难度，那就是要求120字符完成代码。\n\n所以，这道题还有一个简单的版本，[见此](http://www.codewars.com/kata/coding-3min-father-and-son/)。\n\n原始版本   (length=187)\n\n```js\nfunction sc(s){\n  return s.split('').map((v)=>{\n    if(v.toLowerCase()==v && s.indexOf(v.toUpperCase())>=0){\n      return v\n    }else if(v.toUpperCase()==v && s.indexOf(v.toLowerCase())>=0){\n      return v\n    }\n  }).join('')\n}\n```\n\n替换了toLowerCase/toUpperCase  (length=186)，这是我所了解的终极写法了..\n\n竟然长度基本没有减少...要命啊，看来重复次数太少了，不太管用。\n\n```js\nfunction sc(s){\n  var l='toLowerCase', u='toUpperCase'\n  return s.split('').map((v)=>{\n    if(v[l]()==v && s.indexOf(v[u]())>=0){\n      return v\n    }else if(v[u]()==v && s.indexOf(v[l]())>=0){\n      return v\n    }\n  }).join('')\n}\n```\n\n删除else if (length=169)，这句话可以合并的。\n\n```js\nfunction sc(s){\n  var l='toLowerCase', u='toUpperCase'\n  return s.split('').map((v)=>{\n    if(v[l]()==v && s.indexOf(v[u]())>=0 || v[u]()==v && s.indexOf(v[l]())>=0){\n      return v\n    }\n  }).join('')\n}\n```\n\n去掉没用的括号 (length=165)\n\n```js\nfunction sc(s){\n  var l='toLowerCase', u='toUpperCase'\n  return s.split('').map(v => {\n    if(v[l]()==v && s.indexOf(v[u]())>=0 || v[u]()==v && s.indexOf(v[l]())>=0)return v\n  }).join('')\n}\n```\n\n这样来试，看来是不行的，必须要优化下逻辑了。\n\n仔细研究下，其实if语句内容是多余的，直接判断当前字符在字符串里面，必须有大写和小写就行了，没必要进行区分(length=143)\n\n```js\nfunction sc(s){\n  var l='toLowerCase', u='toUpperCase'\n  return s.split('').map(v => {\n    if(s.indexOf(v[l]())>=0 &&s.indexOf(v[u]())>=0)return v\n  }).join('')\n}\n```\n\n突然发现，只要函数正确，也可以修改自带的函数结构的。调整为ES6格式。(length=132)\n\n```js\nsc=s=>{\n  var l='toLowerCase', u='toUpperCase'\n  return s.split('').map(v => {\n    if(s.indexOf(v[l]())>=0 &&s.indexOf(v[u]())>=0)return v\n  }).join('')\n}\n```\n\n之后的路，就非常艰辛了。我也参考了简单问题中的部分答案。比如说用到了`filter` `includes`。\n\n这个确实要说，我数组用的不好，刚刚才能用上reduce，虽然听说过filter，但是没有实际应用过。\n\n查过[资料](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)得知，类似于`map`，同样为`return`控制，只不过返回`true` `false`来控制新数组是否包含当前数据而已。\n\n举个非常简单的例子：\n\n```js\nvar filtered = [12, 5, 8, 130, 44].filter((el)=>el >= 10)\n// [12, 130, 44]\n```\n\n改造下，试试看。(length=121)\n\n```js\nsc=s=>{\n  var l='toLowerCase', u='toUpperCase'\n  return s.split('').filter(v => s.indexOf(v[l]())>=0 && s.indexOf(v[u]())>=0).join('')\n}\n```\n\n\n\n这次虽然是121字符，但是实际可以通过了，刷个流氓就能（去掉`var`）。\n\n很明显，这么做不好。那么研究下`includes`。这个方法我都没有听说过。\n\n文档见[这里](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes)。因为实在也是太简单了，直接上例子：\n\n```js\n[1, 2, 3].includes(2); // true\n```\n\n使用`includes`有个好处，那就是省去了判断符号`>=`。我来看看。\n\n```js\nsc=s=>{\n  var l='toLowerCase', u='toUpperCase'\n  return s.split('').filter(v => s.includes(v[l]()) && s.includes(v[u]())).join('')\n}\n```\n\n写的时候我就能感觉到，这次肯定更短了！省去了很多字符...果真，length=117。\n\n老规矩，替换字符法。结果发现，竟然还多了一个字符...哎...代码量太少，没办法这么优化啊。\n\n所以，整理下格式，正确答案就是：\n\n```js\n//length=117\nsc = s => {\n  var l='toLowerCase',\n      u='toUpperCase'\n  return s.split('').filter(\n    v => s.includes(v[l]()) && s.includes(v[u]())\n  ).join('')\n}\n```\n\n如果耍个流氓，那么会更短\n\n```js\n//length=113\nsc = s => {\n  l='toLowerCase',\n  u='toUpperCase'\n  return s.split('').filter(\n    v => s.includes(v[l]()) && s.includes(v[u]())\n  ).join('')\n}\n```\n\n当然，这里也可以去掉定义了。还能省去很多长度。这样可以做到：\n\n```js\n//length=94\nsc = s => s.split('').filter(v => s.includes(v.toLowerCase()) && s.includes(v.toUpperCase())).join('')\n```\n\n这恐怕是最短的结果了。我看了看别的答案，没有什么好的思路了。\n\n看来编译不好使啊！还不如直接来的省事。","slug":"2016-2016-10-31-codewars-father-and-son","published":1,"updated":"2020-03-02T07:16:34.603Z","comments":1,"photos":[],"link":"","_id":"cka5ik8a6000enybg8s9c18gz","content":"<p>在 codewars 上面做题，有这样<a href=\"https://www.codewars.com/kata/shortest-code-father-and-son\" target=\"_blank\" rel=\"noopener\">一道题</a>。</p>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>Every uppercase letter is Father, The corresponding lowercase letters is the Son.</p>\n<p>Give you a string s, If the father and son both exist, keep them. If it is a separate existence, delete them. Return the result.</p>\n<p>For example:</p>\n<ul>\n<li><p>sc(“Aab”) should return “Aa”</p>\n</li>\n<li><p>sc(“AabBc”) should return “AabB”</p>\n</li>\n<li><p>sc(“AaaaAaab”) should return “AaaaAaa”(father can have a lot of son)</p>\n</li>\n<li><p>sc(“aAAAaAAb”) should return “aAAAaAA”(son also can have a lot of father</p>\n</li>\n</ul>\n</blockquote>\n<p>这道题不难。稍微用几分钟就能写完了。但是这道题有个难度，那就是要求120字符完成代码。</p>\n<p>所以，这道题还有一个简单的版本，<a href=\"http://www.codewars.com/kata/coding-3min-father-and-son/\" target=\"_blank\" rel=\"noopener\">见此</a>。</p>\n<p>原始版本   (length=187)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sc</span>(<span class=\"params\">s</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).map(<span class=\"function\">(<span class=\"params\">v</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v.toLowerCase()==v &amp;&amp; s.indexOf(v.toUpperCase())&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> v</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(v.toUpperCase()==v &amp;&amp; s.indexOf(v.toLowerCase())&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> v</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>替换了toLowerCase/toUpperCase  (length=186)，这是我所了解的终极写法了..</p>\n<p>竟然长度基本没有减少…要命啊，看来重复次数太少了，不太管用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sc</span>(<span class=\"params\">s</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>, u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).map(<span class=\"function\">(<span class=\"params\">v</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v[l]()==v &amp;&amp; s.indexOf(v[u]())&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> v</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(v[u]()==v &amp;&amp; s.indexOf(v[l]())&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> v</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>删除else if (length=169)，这句话可以合并的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sc</span>(<span class=\"params\">s</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>, u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).map(<span class=\"function\">(<span class=\"params\">v</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v[l]()==v &amp;&amp; s.indexOf(v[u]())&gt;=<span class=\"number\">0</span> || v[u]()==v &amp;&amp; s.indexOf(v[l]())&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> v</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>去掉没用的括号 (length=165)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sc</span>(<span class=\"params\">s</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>, u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v[l]()==v &amp;&amp; s.indexOf(v[u]())&gt;=<span class=\"number\">0</span> || v[u]()==v &amp;&amp; s.indexOf(v[l]())&gt;=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> v</span><br><span class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样来试，看来是不行的，必须要优化下逻辑了。</p>\n<p>仔细研究下，其实if语句内容是多余的，直接判断当前字符在字符串里面，必须有大写和小写就行了，没必要进行区分(length=143)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sc</span>(<span class=\"params\">s</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>, u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s.indexOf(v[l]())&gt;=<span class=\"number\">0</span> &amp;&amp;s.indexOf(v[u]())&gt;=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> v</span><br><span class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>突然发现，只要函数正确，也可以修改自带的函数结构的。调整为ES6格式。(length=132)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc=<span class=\"function\"><span class=\"params\">s</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>, u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s.indexOf(v[l]())&gt;=<span class=\"number\">0</span> &amp;&amp;s.indexOf(v[u]())&gt;=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> v</span><br><span class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后的路，就非常艰辛了。我也参考了简单问题中的部分答案。比如说用到了<code>filter</code> <code>includes</code>。</p>\n<p>这个确实要说，我数组用的不好，刚刚才能用上reduce，虽然听说过filter，但是没有实际应用过。</p>\n<p>查过<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" target=\"_blank\" rel=\"noopener\">资料</a>得知，类似于<code>map</code>，同样为<code>return</code>控制，只不过返回<code>true</code> <code>false</code>来控制新数组是否包含当前数据而已。</p>\n<p>举个非常简单的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> filtered = [<span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">130</span>, <span class=\"number\">44</span>].filter(<span class=\"function\">(<span class=\"params\">el</span>)=&gt;</span>el &gt;= <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\">// [12, 130, 44]</span></span><br></pre></td></tr></table></figure>\n\n<p>改造下，试试看。(length=121)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc=<span class=\"function\"><span class=\"params\">s</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>, u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> s.indexOf(v[l]())&gt;=<span class=\"number\">0</span> &amp;&amp; s.indexOf(v[u]())&gt;=<span class=\"number\">0</span>).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这次虽然是121字符，但是实际可以通过了，刷个流氓就能（去掉<code>var</code>）。</p>\n<p>很明显，这么做不好。那么研究下<code>includes</code>。这个方法我都没有听说过。</p>\n<p>文档见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\" target=\"_blank\" rel=\"noopener\">这里</a>。因为实在也是太简单了，直接上例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">2</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>使用<code>includes</code>有个好处，那就是省去了判断符号<code>&gt;=</code>。我来看看。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc=<span class=\"function\"><span class=\"params\">s</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>, u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> s.includes(v[l]()) &amp;&amp; s.includes(v[u]())).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>写的时候我就能感觉到，这次肯定更短了！省去了很多字符…果真，length=117。</p>\n<p>老规矩，替换字符法。结果发现，竟然还多了一个字符…哎…代码量太少，没办法这么优化啊。</p>\n<p>所以，整理下格式，正确答案就是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//length=117</span></span><br><span class=\"line\">sc = <span class=\"function\"><span class=\"params\">s</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>,</span><br><span class=\"line\">      u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).filter(</span><br><span class=\"line\">    v =&gt; s.includes(v[l]()) &amp;&amp; s.includes(v[u]())</span><br><span class=\"line\">  ).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果耍个流氓，那么会更短</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//length=113</span></span><br><span class=\"line\">sc = <span class=\"function\"><span class=\"params\">s</span> =&gt;</span> &#123;</span><br><span class=\"line\">  l=<span class=\"string\">'toLowerCase'</span>,</span><br><span class=\"line\">  u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).filter(</span><br><span class=\"line\">    v =&gt; s.includes(v[l]()) &amp;&amp; s.includes(v[u]())</span><br><span class=\"line\">  ).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然，这里也可以去掉定义了。还能省去很多长度。这样可以做到：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//length=94</span></span><br><span class=\"line\">sc = <span class=\"function\"><span class=\"params\">s</span> =&gt;</span> s.split(<span class=\"string\">''</span>).filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> s.includes(v.toLowerCase()) &amp;&amp; s.includes(v.toUpperCase())).join(<span class=\"string\">''</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这恐怕是最短的结果了。我看了看别的答案，没有什么好的思路了。</p>\n<p>看来编译不好使啊！还不如直接来的省事。</p>\n","site":{"data":{}},"excerpt":"<p>在 codewars 上面做题，有这样<a href=\"https://www.codewars.com/kata/shortest-code-father-and-son\" target=\"_blank\" rel=\"noopener\">一道题</a>。</p>","more":"<blockquote>\n<p>Every uppercase letter is Father, The corresponding lowercase letters is the Son.</p>\n<p>Give you a string s, If the father and son both exist, keep them. If it is a separate existence, delete them. Return the result.</p>\n<p>For example:</p>\n<ul>\n<li><p>sc(“Aab”) should return “Aa”</p>\n</li>\n<li><p>sc(“AabBc”) should return “AabB”</p>\n</li>\n<li><p>sc(“AaaaAaab”) should return “AaaaAaa”(father can have a lot of son)</p>\n</li>\n<li><p>sc(“aAAAaAAb”) should return “aAAAaAA”(son also can have a lot of father</p>\n</li>\n</ul>\n</blockquote>\n<p>这道题不难。稍微用几分钟就能写完了。但是这道题有个难度，那就是要求120字符完成代码。</p>\n<p>所以，这道题还有一个简单的版本，<a href=\"http://www.codewars.com/kata/coding-3min-father-and-son/\" target=\"_blank\" rel=\"noopener\">见此</a>。</p>\n<p>原始版本   (length=187)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sc</span>(<span class=\"params\">s</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).map(<span class=\"function\">(<span class=\"params\">v</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v.toLowerCase()==v &amp;&amp; s.indexOf(v.toUpperCase())&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> v</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(v.toUpperCase()==v &amp;&amp; s.indexOf(v.toLowerCase())&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> v</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>替换了toLowerCase/toUpperCase  (length=186)，这是我所了解的终极写法了..</p>\n<p>竟然长度基本没有减少…要命啊，看来重复次数太少了，不太管用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sc</span>(<span class=\"params\">s</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>, u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).map(<span class=\"function\">(<span class=\"params\">v</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v[l]()==v &amp;&amp; s.indexOf(v[u]())&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> v</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(v[u]()==v &amp;&amp; s.indexOf(v[l]())&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> v</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>删除else if (length=169)，这句话可以合并的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sc</span>(<span class=\"params\">s</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>, u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).map(<span class=\"function\">(<span class=\"params\">v</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v[l]()==v &amp;&amp; s.indexOf(v[u]())&gt;=<span class=\"number\">0</span> || v[u]()==v &amp;&amp; s.indexOf(v[l]())&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> v</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>去掉没用的括号 (length=165)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sc</span>(<span class=\"params\">s</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>, u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v[l]()==v &amp;&amp; s.indexOf(v[u]())&gt;=<span class=\"number\">0</span> || v[u]()==v &amp;&amp; s.indexOf(v[l]())&gt;=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> v</span><br><span class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样来试，看来是不行的，必须要优化下逻辑了。</p>\n<p>仔细研究下，其实if语句内容是多余的，直接判断当前字符在字符串里面，必须有大写和小写就行了，没必要进行区分(length=143)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sc</span>(<span class=\"params\">s</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>, u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s.indexOf(v[l]())&gt;=<span class=\"number\">0</span> &amp;&amp;s.indexOf(v[u]())&gt;=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> v</span><br><span class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>突然发现，只要函数正确，也可以修改自带的函数结构的。调整为ES6格式。(length=132)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc=<span class=\"function\"><span class=\"params\">s</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>, u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s.indexOf(v[l]())&gt;=<span class=\"number\">0</span> &amp;&amp;s.indexOf(v[u]())&gt;=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> v</span><br><span class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后的路，就非常艰辛了。我也参考了简单问题中的部分答案。比如说用到了<code>filter</code> <code>includes</code>。</p>\n<p>这个确实要说，我数组用的不好，刚刚才能用上reduce，虽然听说过filter，但是没有实际应用过。</p>\n<p>查过<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" target=\"_blank\" rel=\"noopener\">资料</a>得知，类似于<code>map</code>，同样为<code>return</code>控制，只不过返回<code>true</code> <code>false</code>来控制新数组是否包含当前数据而已。</p>\n<p>举个非常简单的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> filtered = [<span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">130</span>, <span class=\"number\">44</span>].filter(<span class=\"function\">(<span class=\"params\">el</span>)=&gt;</span>el &gt;= <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\">// [12, 130, 44]</span></span><br></pre></td></tr></table></figure>\n\n<p>改造下，试试看。(length=121)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc=<span class=\"function\"><span class=\"params\">s</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>, u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> s.indexOf(v[l]())&gt;=<span class=\"number\">0</span> &amp;&amp; s.indexOf(v[u]())&gt;=<span class=\"number\">0</span>).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这次虽然是121字符，但是实际可以通过了，刷个流氓就能（去掉<code>var</code>）。</p>\n<p>很明显，这么做不好。那么研究下<code>includes</code>。这个方法我都没有听说过。</p>\n<p>文档见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\" target=\"_blank\" rel=\"noopener\">这里</a>。因为实在也是太简单了，直接上例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">2</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>使用<code>includes</code>有个好处，那就是省去了判断符号<code>&gt;=</code>。我来看看。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc=<span class=\"function\"><span class=\"params\">s</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>, u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> s.includes(v[l]()) &amp;&amp; s.includes(v[u]())).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>写的时候我就能感觉到，这次肯定更短了！省去了很多字符…果真，length=117。</p>\n<p>老规矩，替换字符法。结果发现，竟然还多了一个字符…哎…代码量太少，没办法这么优化啊。</p>\n<p>所以，整理下格式，正确答案就是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//length=117</span></span><br><span class=\"line\">sc = <span class=\"function\"><span class=\"params\">s</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">'toLowerCase'</span>,</span><br><span class=\"line\">      u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).filter(</span><br><span class=\"line\">    v =&gt; s.includes(v[l]()) &amp;&amp; s.includes(v[u]())</span><br><span class=\"line\">  ).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果耍个流氓，那么会更短</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//length=113</span></span><br><span class=\"line\">sc = <span class=\"function\"><span class=\"params\">s</span> =&gt;</span> &#123;</span><br><span class=\"line\">  l=<span class=\"string\">'toLowerCase'</span>,</span><br><span class=\"line\">  u=<span class=\"string\">'toUpperCase'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).filter(</span><br><span class=\"line\">    v =&gt; s.includes(v[l]()) &amp;&amp; s.includes(v[u]())</span><br><span class=\"line\">  ).join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然，这里也可以去掉定义了。还能省去很多长度。这样可以做到：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//length=94</span></span><br><span class=\"line\">sc = <span class=\"function\"><span class=\"params\">s</span> =&gt;</span> s.split(<span class=\"string\">''</span>).filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> s.includes(v.toLowerCase()) &amp;&amp; s.includes(v.toUpperCase())).join(<span class=\"string\">''</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这恐怕是最短的结果了。我看了看别的答案，没有什么好的思路了。</p>\n<p>看来编译不好使啊！还不如直接来的省事。</p>"},{"layout":"post","title":"Dr.Unarchiver - 可视化解压缩软件 [MAC]","date":"2016-11-18T23:22:00.000Z","photos":["https://cdn0.yukapril.com/blog/2016-11-18-drunarchiver.png-wm.black"],"_content":"\n在Windows下，我们可以选择免费的个人广告版WinRAR，或者开源的7-zip。那MAC下呢？\n\n<!-- more -->\n\nMAC自带了解压缩工具，双击就可以完成了，但是对压缩格式支持程度不是很好。我想，各位小伙伴都应该在App Store中下载了排名靠前的解压缩软件吧？\n\n但是下载的各种解压缩软件，都有一个特点，那就是和系统自带的一样，双击就解压缩到当前目录。和WinRAR可以查看内容后再做决定风格完全不同...\n\n来，先上Dr.Unarchiver截图：\n\n![image](https://cdn0.yukapril.com/blog/2016-11-18-drunarchiver.png-wm.black)\n\n怎么样？有点WinRAR的查看感觉了吧。\n\n不过，这个软件有个要注意的特点：比如我要解压缩的`abc.zip`中，结构是目录下`test`有`123.txt`，那么单独拖拽`123.txt`到桌面，也会是`test/123.txt`，和原结构相同，并不会像WinRAR那样，仅仅解压一个文件。\n\n格式支持上，基本上各家软件都差不多，对了，它支持`rar`格式。\n\n这个软件唯一的缺陷，就是只能解压缩，**不能压缩！不能压缩！不能压缩！**\n\n---\n\n##### 软件信息\n\n软件名：Dr.Unarchiver \n\n价格：免费\n\n下载地址：[iTunes](https://itunes.apple.com/cn/app/dr.-unarchiver-rar-zip-archive/id1127253508?l=en&mt=12)","source":"_posts/2016/2016-11-18-share-drunarchiver.md","raw":"---\nlayout: post\ntitle: \"Dr.Unarchiver - 可视化解压缩软件 [MAC]\"\ndate: 2016-11-18 23:22:00 GMT+0800\ncategories: [软件]\ntags:  []\nphotos: [https://cdn0.yukapril.com/blog/2016-11-18-drunarchiver.png-wm.black]\n---\n\n在Windows下，我们可以选择免费的个人广告版WinRAR，或者开源的7-zip。那MAC下呢？\n\n<!-- more -->\n\nMAC自带了解压缩工具，双击就可以完成了，但是对压缩格式支持程度不是很好。我想，各位小伙伴都应该在App Store中下载了排名靠前的解压缩软件吧？\n\n但是下载的各种解压缩软件，都有一个特点，那就是和系统自带的一样，双击就解压缩到当前目录。和WinRAR可以查看内容后再做决定风格完全不同...\n\n来，先上Dr.Unarchiver截图：\n\n![image](https://cdn0.yukapril.com/blog/2016-11-18-drunarchiver.png-wm.black)\n\n怎么样？有点WinRAR的查看感觉了吧。\n\n不过，这个软件有个要注意的特点：比如我要解压缩的`abc.zip`中，结构是目录下`test`有`123.txt`，那么单独拖拽`123.txt`到桌面，也会是`test/123.txt`，和原结构相同，并不会像WinRAR那样，仅仅解压一个文件。\n\n格式支持上，基本上各家软件都差不多，对了，它支持`rar`格式。\n\n这个软件唯一的缺陷，就是只能解压缩，**不能压缩！不能压缩！不能压缩！**\n\n---\n\n##### 软件信息\n\n软件名：Dr.Unarchiver \n\n价格：免费\n\n下载地址：[iTunes](https://itunes.apple.com/cn/app/dr.-unarchiver-rar-zip-archive/id1127253508?l=en&mt=12)","slug":"2016-2016-11-18-share-drunarchiver","published":1,"updated":"2020-03-02T07:16:34.603Z","comments":1,"link":"","_id":"cka5ik8a9000hnybgsnkxs6z7","content":"<p>在Windows下，我们可以选择免费的个人广告版WinRAR，或者开源的7-zip。那MAC下呢？</p>\n<a id=\"more\"></a>\n\n<p>MAC自带了解压缩工具，双击就可以完成了，但是对压缩格式支持程度不是很好。我想，各位小伙伴都应该在App Store中下载了排名靠前的解压缩软件吧？</p>\n<p>但是下载的各种解压缩软件，都有一个特点，那就是和系统自带的一样，双击就解压缩到当前目录。和WinRAR可以查看内容后再做决定风格完全不同…</p>\n<p>来，先上Dr.Unarchiver截图：</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-11-18-drunarchiver.png-wm.black\" alt=\"image\"></p>\n<p>怎么样？有点WinRAR的查看感觉了吧。</p>\n<p>不过，这个软件有个要注意的特点：比如我要解压缩的<code>abc.zip</code>中，结构是目录下<code>test</code>有<code>123.txt</code>，那么单独拖拽<code>123.txt</code>到桌面，也会是<code>test/123.txt</code>，和原结构相同，并不会像WinRAR那样，仅仅解压一个文件。</p>\n<p>格式支持上，基本上各家软件都差不多，对了，它支持<code>rar</code>格式。</p>\n<p>这个软件唯一的缺陷，就是只能解压缩，<strong>不能压缩！不能压缩！不能压缩！</strong></p>\n<hr>\n<h5 id=\"软件信息\"><a href=\"#软件信息\" class=\"headerlink\" title=\"软件信息\"></a>软件信息</h5><p>软件名：Dr.Unarchiver </p>\n<p>价格：免费</p>\n<p>下载地址：<a href=\"https://itunes.apple.com/cn/app/dr.-unarchiver-rar-zip-archive/id1127253508?l=en&mt=12\" target=\"_blank\" rel=\"noopener\">iTunes</a></p>\n","site":{"data":{}},"excerpt":"<p>在Windows下，我们可以选择免费的个人广告版WinRAR，或者开源的7-zip。那MAC下呢？</p>","more":"<p>MAC自带了解压缩工具，双击就可以完成了，但是对压缩格式支持程度不是很好。我想，各位小伙伴都应该在App Store中下载了排名靠前的解压缩软件吧？</p>\n<p>但是下载的各种解压缩软件，都有一个特点，那就是和系统自带的一样，双击就解压缩到当前目录。和WinRAR可以查看内容后再做决定风格完全不同…</p>\n<p>来，先上Dr.Unarchiver截图：</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-11-18-drunarchiver.png-wm.black\" alt=\"image\"></p>\n<p>怎么样？有点WinRAR的查看感觉了吧。</p>\n<p>不过，这个软件有个要注意的特点：比如我要解压缩的<code>abc.zip</code>中，结构是目录下<code>test</code>有<code>123.txt</code>，那么单独拖拽<code>123.txt</code>到桌面，也会是<code>test/123.txt</code>，和原结构相同，并不会像WinRAR那样，仅仅解压一个文件。</p>\n<p>格式支持上，基本上各家软件都差不多，对了，它支持<code>rar</code>格式。</p>\n<p>这个软件唯一的缺陷，就是只能解压缩，<strong>不能压缩！不能压缩！不能压缩！</strong></p>\n<hr>\n<h5 id=\"软件信息\"><a href=\"#软件信息\" class=\"headerlink\" title=\"软件信息\"></a>软件信息</h5><p>软件名：Dr.Unarchiver </p>\n<p>价格：免费</p>\n<p>下载地址：<a href=\"https://itunes.apple.com/cn/app/dr.-unarchiver-rar-zip-archive/id1127253508?l=en&mt=12\" target=\"_blank\" rel=\"noopener\">iTunes</a></p>"},{"layout":"post","title":"simack v1.0制作完毕","date":"2016-11-27T22:20:00.000Z","_content":"\n## 1.0终于制作出来了\n\n<!-- more -->\n\n这个版本，真的等待了很久。在github上，距离上次更新已经有了将近一个月。\n\n其中一方面是，确实有些其他的任务，导致了simack暂缓了。还有一些个人的原因，比如希望能有更好的设计，在下文上，也会提到。\n\n那么，在这一个月，都更新了什么呢？\n\n## 风格样式\n\n这是最大的变化。调整效果风格，优化精简代码...\n\n从之前的左右排版，直接调整为上中下排版。好处是，页面宽了，更加简洁了，同时在兼容移动端也更加清晰明朗了。\n\n还有一些其他变化：\n\n* 所有的分类/模块跳转链接，采用下划线效果\n\n* 所有的文章标题/文章内链接，采用变色效果。变成红色，更容易理解\n\n* 取消了没有太大意义的“查看全文”按钮\n\n* 不再使用任何banner图片，替换为一段着色文本\n\n* 每篇文章，支持列表中展示图片\n\n* 文章代码部分，调整为浅色效果（github风格）\n\n## 代码变化\n\n* 所有代码重构，`_includes`内文件命名同时大换血，文件引用更加清晰\n\n* 支持`rss` `sitemap`功能，提升SEO（搜索引擎优化）\n\n## 比较庆幸的是\n\n* 配置文件几乎没变，仅仅是：\n\n\t* 取消兴趣爱好描述/头像\n\n\t* 访问统计为了能支持不同平台，最终决定将取消配置，直接将平台统计代码写入文件\n\n* 已经写好的页面（文章、关于页面等），不需要做任何修改。但是自己写的独立页面，且仅仅是文字性质，建议调整为新的md格式，效果更佳\n\n* 本地调试依然不需要安装除分页之外的任何插件\n\n## 未来的展望/bug\n\n* 偶然一次，移动端，分类按钮列表异常，无法选择分类，~~目前无法复现，~~找到了，出现在微信内，具体原因还没有去研究...（懒\n\n* 搜索功能：一直就在想，查了很多方案，都觉得不太优美，而且搜索我认为还没有那么迫切，就推迟了，具体实现，见文章末尾\n\n* 移动端效果，还不是特别理想，还可以优化\n\n* 整体风格色彩，还需要进一步磨合调整\n\n## 搜索功能\n\n这个想好好说一说：\n\njekyll 或者Hexo，可以说都没办法优雅的解决搜索问题，或者没办法简单的解决搜索问题。\n\n目前比较主流的几种做法：\n\n* 方案一：AJAX加载所有文章\n\n\t* 做一个页面，可以是JSON格式，包含所有文章标题，分类，tags，正文。搜索时候，加载此页面，用JS实现搜索。\n\n\t* 优点：没有依赖，可以方便解决，难度相对低。体验也可以做的不错，比如输入内容，实时显示。\n\n\t* 缺点：效率低，文章多的话，AJAX加载内容非常多，会慢，而且JS处理也会变慢。只能处理精确匹配，很难做模糊搜索。\n\n* 方案二：AJAX加载精简文章\n\n\t* 自己考虑出的方案，大致和方案一一致，就是仅仅包含问斩标题，分类，tags，文章摘要。取消正文。这样会相对快一点，但不能支持正文搜索了。\n\n* 方案三：借助搜索引擎\n\n\t* 简单来说，就是想办法每篇文章都让搜索引擎收录（可以主动推送文章等），当搜索的时候，调用其搜索引擎，最终搜索内容变为：`keyword site:yukapril.com`这种样子。\n\n\t* 优点：SEO效果好，搜索质量高\n\n\t* 缺点：很难让搜索引擎每篇文章都收录，或者收录延迟很难把控。同时最终搜索`keyword site:yukapril.com`结果鬼知道是啥...比如baidu有类似的页面控件，但是我没办法调试成功...我总想着给它的代码精简精简。\n\n* 方案四：第三方平台托管搜索\n\n\t* 和方案三一致，只不过数据不是提交给搜索引擎了，而是第三方服务。一样是每次写完博客提交，每次用的时候进行AJAX查询即可。\n\n\t* 优点：质量很高，非常好\n\n\t* 缺点：听过几个平台，需要接入API，貌似有免费的，但是要求在搜索框上面加入他们的LOGO等，也就是说还是希望你能付费使用。API接入成本会相对复杂一些，开发成本比起前三个都要多不少。主要还是开发成本，谁想用就要注册一个第三方平台，否则没办法使用。\n\n\n\n\n\n\n\n\n\n","source":"_posts/2016/2016-11-27-simack-v10.md","raw":"---\nlayout: post\ntitle: \"simack v1.0制作完毕\"\ndate: 2016-11-27 22:20:00 GMT+0800\ncategories: [theme]\ntags:  [simack]\n---\n\n## 1.0终于制作出来了\n\n<!-- more -->\n\n这个版本，真的等待了很久。在github上，距离上次更新已经有了将近一个月。\n\n其中一方面是，确实有些其他的任务，导致了simack暂缓了。还有一些个人的原因，比如希望能有更好的设计，在下文上，也会提到。\n\n那么，在这一个月，都更新了什么呢？\n\n## 风格样式\n\n这是最大的变化。调整效果风格，优化精简代码...\n\n从之前的左右排版，直接调整为上中下排版。好处是，页面宽了，更加简洁了，同时在兼容移动端也更加清晰明朗了。\n\n还有一些其他变化：\n\n* 所有的分类/模块跳转链接，采用下划线效果\n\n* 所有的文章标题/文章内链接，采用变色效果。变成红色，更容易理解\n\n* 取消了没有太大意义的“查看全文”按钮\n\n* 不再使用任何banner图片，替换为一段着色文本\n\n* 每篇文章，支持列表中展示图片\n\n* 文章代码部分，调整为浅色效果（github风格）\n\n## 代码变化\n\n* 所有代码重构，`_includes`内文件命名同时大换血，文件引用更加清晰\n\n* 支持`rss` `sitemap`功能，提升SEO（搜索引擎优化）\n\n## 比较庆幸的是\n\n* 配置文件几乎没变，仅仅是：\n\n\t* 取消兴趣爱好描述/头像\n\n\t* 访问统计为了能支持不同平台，最终决定将取消配置，直接将平台统计代码写入文件\n\n* 已经写好的页面（文章、关于页面等），不需要做任何修改。但是自己写的独立页面，且仅仅是文字性质，建议调整为新的md格式，效果更佳\n\n* 本地调试依然不需要安装除分页之外的任何插件\n\n## 未来的展望/bug\n\n* 偶然一次，移动端，分类按钮列表异常，无法选择分类，~~目前无法复现，~~找到了，出现在微信内，具体原因还没有去研究...（懒\n\n* 搜索功能：一直就在想，查了很多方案，都觉得不太优美，而且搜索我认为还没有那么迫切，就推迟了，具体实现，见文章末尾\n\n* 移动端效果，还不是特别理想，还可以优化\n\n* 整体风格色彩，还需要进一步磨合调整\n\n## 搜索功能\n\n这个想好好说一说：\n\njekyll 或者Hexo，可以说都没办法优雅的解决搜索问题，或者没办法简单的解决搜索问题。\n\n目前比较主流的几种做法：\n\n* 方案一：AJAX加载所有文章\n\n\t* 做一个页面，可以是JSON格式，包含所有文章标题，分类，tags，正文。搜索时候，加载此页面，用JS实现搜索。\n\n\t* 优点：没有依赖，可以方便解决，难度相对低。体验也可以做的不错，比如输入内容，实时显示。\n\n\t* 缺点：效率低，文章多的话，AJAX加载内容非常多，会慢，而且JS处理也会变慢。只能处理精确匹配，很难做模糊搜索。\n\n* 方案二：AJAX加载精简文章\n\n\t* 自己考虑出的方案，大致和方案一一致，就是仅仅包含问斩标题，分类，tags，文章摘要。取消正文。这样会相对快一点，但不能支持正文搜索了。\n\n* 方案三：借助搜索引擎\n\n\t* 简单来说，就是想办法每篇文章都让搜索引擎收录（可以主动推送文章等），当搜索的时候，调用其搜索引擎，最终搜索内容变为：`keyword site:yukapril.com`这种样子。\n\n\t* 优点：SEO效果好，搜索质量高\n\n\t* 缺点：很难让搜索引擎每篇文章都收录，或者收录延迟很难把控。同时最终搜索`keyword site:yukapril.com`结果鬼知道是啥...比如baidu有类似的页面控件，但是我没办法调试成功...我总想着给它的代码精简精简。\n\n* 方案四：第三方平台托管搜索\n\n\t* 和方案三一致，只不过数据不是提交给搜索引擎了，而是第三方服务。一样是每次写完博客提交，每次用的时候进行AJAX查询即可。\n\n\t* 优点：质量很高，非常好\n\n\t* 缺点：听过几个平台，需要接入API，貌似有免费的，但是要求在搜索框上面加入他们的LOGO等，也就是说还是希望你能付费使用。API接入成本会相对复杂一些，开发成本比起前三个都要多不少。主要还是开发成本，谁想用就要注册一个第三方平台，否则没办法使用。\n\n\n\n\n\n\n\n\n\n","slug":"2016-2016-11-27-simack-v10","published":1,"updated":"2020-03-02T07:16:34.603Z","comments":1,"photos":[],"link":"","_id":"cka5ik8ab000lnybg6dydz7s9","content":"<h2 id=\"1-0终于制作出来了\"><a href=\"#1-0终于制作出来了\" class=\"headerlink\" title=\"1.0终于制作出来了\"></a>1.0终于制作出来了</h2><a id=\"more\"></a>\n\n<p>这个版本，真的等待了很久。在github上，距离上次更新已经有了将近一个月。</p>\n<p>其中一方面是，确实有些其他的任务，导致了simack暂缓了。还有一些个人的原因，比如希望能有更好的设计，在下文上，也会提到。</p>\n<p>那么，在这一个月，都更新了什么呢？</p>\n<h2 id=\"风格样式\"><a href=\"#风格样式\" class=\"headerlink\" title=\"风格样式\"></a>风格样式</h2><p>这是最大的变化。调整效果风格，优化精简代码…</p>\n<p>从之前的左右排版，直接调整为上中下排版。好处是，页面宽了，更加简洁了，同时在兼容移动端也更加清晰明朗了。</p>\n<p>还有一些其他变化：</p>\n<ul>\n<li><p>所有的分类/模块跳转链接，采用下划线效果</p>\n</li>\n<li><p>所有的文章标题/文章内链接，采用变色效果。变成红色，更容易理解</p>\n</li>\n<li><p>取消了没有太大意义的“查看全文”按钮</p>\n</li>\n<li><p>不再使用任何banner图片，替换为一段着色文本</p>\n</li>\n<li><p>每篇文章，支持列表中展示图片</p>\n</li>\n<li><p>文章代码部分，调整为浅色效果（github风格）</p>\n</li>\n</ul>\n<h2 id=\"代码变化\"><a href=\"#代码变化\" class=\"headerlink\" title=\"代码变化\"></a>代码变化</h2><ul>\n<li><p>所有代码重构，<code>_includes</code>内文件命名同时大换血，文件引用更加清晰</p>\n</li>\n<li><p>支持<code>rss</code> <code>sitemap</code>功能，提升SEO（搜索引擎优化）</p>\n</li>\n</ul>\n<h2 id=\"比较庆幸的是\"><a href=\"#比较庆幸的是\" class=\"headerlink\" title=\"比较庆幸的是\"></a>比较庆幸的是</h2><ul>\n<li><p>配置文件几乎没变，仅仅是：</p>\n<ul>\n<li><p>取消兴趣爱好描述/头像</p>\n</li>\n<li><p>访问统计为了能支持不同平台，最终决定将取消配置，直接将平台统计代码写入文件</p>\n</li>\n</ul>\n</li>\n<li><p>已经写好的页面（文章、关于页面等），不需要做任何修改。但是自己写的独立页面，且仅仅是文字性质，建议调整为新的md格式，效果更佳</p>\n</li>\n<li><p>本地调试依然不需要安装除分页之外的任何插件</p>\n</li>\n</ul>\n<h2 id=\"未来的展望-bug\"><a href=\"#未来的展望-bug\" class=\"headerlink\" title=\"未来的展望/bug\"></a>未来的展望/bug</h2><ul>\n<li><p>偶然一次，移动端，分类按钮列表异常，无法选择分类，<del>目前无法复现，</del>找到了，出现在微信内，具体原因还没有去研究…（懒</p>\n</li>\n<li><p>搜索功能：一直就在想，查了很多方案，都觉得不太优美，而且搜索我认为还没有那么迫切，就推迟了，具体实现，见文章末尾</p>\n</li>\n<li><p>移动端效果，还不是特别理想，还可以优化</p>\n</li>\n<li><p>整体风格色彩，还需要进一步磨合调整</p>\n</li>\n</ul>\n<h2 id=\"搜索功能\"><a href=\"#搜索功能\" class=\"headerlink\" title=\"搜索功能\"></a>搜索功能</h2><p>这个想好好说一说：</p>\n<p>jekyll 或者Hexo，可以说都没办法优雅的解决搜索问题，或者没办法简单的解决搜索问题。</p>\n<p>目前比较主流的几种做法：</p>\n<ul>\n<li><p>方案一：AJAX加载所有文章</p>\n<ul>\n<li><p>做一个页面，可以是JSON格式，包含所有文章标题，分类，tags，正文。搜索时候，加载此页面，用JS实现搜索。</p>\n</li>\n<li><p>优点：没有依赖，可以方便解决，难度相对低。体验也可以做的不错，比如输入内容，实时显示。</p>\n</li>\n<li><p>缺点：效率低，文章多的话，AJAX加载内容非常多，会慢，而且JS处理也会变慢。只能处理精确匹配，很难做模糊搜索。</p>\n</li>\n</ul>\n</li>\n<li><p>方案二：AJAX加载精简文章</p>\n<ul>\n<li>自己考虑出的方案，大致和方案一一致，就是仅仅包含问斩标题，分类，tags，文章摘要。取消正文。这样会相对快一点，但不能支持正文搜索了。</li>\n</ul>\n</li>\n<li><p>方案三：借助搜索引擎</p>\n<ul>\n<li><p>简单来说，就是想办法每篇文章都让搜索引擎收录（可以主动推送文章等），当搜索的时候，调用其搜索引擎，最终搜索内容变为：<code>keyword site:yukapril.com</code>这种样子。</p>\n</li>\n<li><p>优点：SEO效果好，搜索质量高</p>\n</li>\n<li><p>缺点：很难让搜索引擎每篇文章都收录，或者收录延迟很难把控。同时最终搜索<code>keyword site:yukapril.com</code>结果鬼知道是啥…比如baidu有类似的页面控件，但是我没办法调试成功…我总想着给它的代码精简精简。</p>\n</li>\n</ul>\n</li>\n<li><p>方案四：第三方平台托管搜索</p>\n<ul>\n<li><p>和方案三一致，只不过数据不是提交给搜索引擎了，而是第三方服务。一样是每次写完博客提交，每次用的时候进行AJAX查询即可。</p>\n</li>\n<li><p>优点：质量很高，非常好</p>\n</li>\n<li><p>缺点：听过几个平台，需要接入API，貌似有免费的，但是要求在搜索框上面加入他们的LOGO等，也就是说还是希望你能付费使用。API接入成本会相对复杂一些，开发成本比起前三个都要多不少。主要还是开发成本，谁想用就要注册一个第三方平台，否则没办法使用。</p>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"1-0终于制作出来了\"><a href=\"#1-0终于制作出来了\" class=\"headerlink\" title=\"1.0终于制作出来了\"></a>1.0终于制作出来了</h2>","more":"<p>这个版本，真的等待了很久。在github上，距离上次更新已经有了将近一个月。</p>\n<p>其中一方面是，确实有些其他的任务，导致了simack暂缓了。还有一些个人的原因，比如希望能有更好的设计，在下文上，也会提到。</p>\n<p>那么，在这一个月，都更新了什么呢？</p>\n<h2 id=\"风格样式\"><a href=\"#风格样式\" class=\"headerlink\" title=\"风格样式\"></a>风格样式</h2><p>这是最大的变化。调整效果风格，优化精简代码…</p>\n<p>从之前的左右排版，直接调整为上中下排版。好处是，页面宽了，更加简洁了，同时在兼容移动端也更加清晰明朗了。</p>\n<p>还有一些其他变化：</p>\n<ul>\n<li><p>所有的分类/模块跳转链接，采用下划线效果</p>\n</li>\n<li><p>所有的文章标题/文章内链接，采用变色效果。变成红色，更容易理解</p>\n</li>\n<li><p>取消了没有太大意义的“查看全文”按钮</p>\n</li>\n<li><p>不再使用任何banner图片，替换为一段着色文本</p>\n</li>\n<li><p>每篇文章，支持列表中展示图片</p>\n</li>\n<li><p>文章代码部分，调整为浅色效果（github风格）</p>\n</li>\n</ul>\n<h2 id=\"代码变化\"><a href=\"#代码变化\" class=\"headerlink\" title=\"代码变化\"></a>代码变化</h2><ul>\n<li><p>所有代码重构，<code>_includes</code>内文件命名同时大换血，文件引用更加清晰</p>\n</li>\n<li><p>支持<code>rss</code> <code>sitemap</code>功能，提升SEO（搜索引擎优化）</p>\n</li>\n</ul>\n<h2 id=\"比较庆幸的是\"><a href=\"#比较庆幸的是\" class=\"headerlink\" title=\"比较庆幸的是\"></a>比较庆幸的是</h2><ul>\n<li><p>配置文件几乎没变，仅仅是：</p>\n<ul>\n<li><p>取消兴趣爱好描述/头像</p>\n</li>\n<li><p>访问统计为了能支持不同平台，最终决定将取消配置，直接将平台统计代码写入文件</p>\n</li>\n</ul>\n</li>\n<li><p>已经写好的页面（文章、关于页面等），不需要做任何修改。但是自己写的独立页面，且仅仅是文字性质，建议调整为新的md格式，效果更佳</p>\n</li>\n<li><p>本地调试依然不需要安装除分页之外的任何插件</p>\n</li>\n</ul>\n<h2 id=\"未来的展望-bug\"><a href=\"#未来的展望-bug\" class=\"headerlink\" title=\"未来的展望/bug\"></a>未来的展望/bug</h2><ul>\n<li><p>偶然一次，移动端，分类按钮列表异常，无法选择分类，<del>目前无法复现，</del>找到了，出现在微信内，具体原因还没有去研究…（懒</p>\n</li>\n<li><p>搜索功能：一直就在想，查了很多方案，都觉得不太优美，而且搜索我认为还没有那么迫切，就推迟了，具体实现，见文章末尾</p>\n</li>\n<li><p>移动端效果，还不是特别理想，还可以优化</p>\n</li>\n<li><p>整体风格色彩，还需要进一步磨合调整</p>\n</li>\n</ul>\n<h2 id=\"搜索功能\"><a href=\"#搜索功能\" class=\"headerlink\" title=\"搜索功能\"></a>搜索功能</h2><p>这个想好好说一说：</p>\n<p>jekyll 或者Hexo，可以说都没办法优雅的解决搜索问题，或者没办法简单的解决搜索问题。</p>\n<p>目前比较主流的几种做法：</p>\n<ul>\n<li><p>方案一：AJAX加载所有文章</p>\n<ul>\n<li><p>做一个页面，可以是JSON格式，包含所有文章标题，分类，tags，正文。搜索时候，加载此页面，用JS实现搜索。</p>\n</li>\n<li><p>优点：没有依赖，可以方便解决，难度相对低。体验也可以做的不错，比如输入内容，实时显示。</p>\n</li>\n<li><p>缺点：效率低，文章多的话，AJAX加载内容非常多，会慢，而且JS处理也会变慢。只能处理精确匹配，很难做模糊搜索。</p>\n</li>\n</ul>\n</li>\n<li><p>方案二：AJAX加载精简文章</p>\n<ul>\n<li>自己考虑出的方案，大致和方案一一致，就是仅仅包含问斩标题，分类，tags，文章摘要。取消正文。这样会相对快一点，但不能支持正文搜索了。</li>\n</ul>\n</li>\n<li><p>方案三：借助搜索引擎</p>\n<ul>\n<li><p>简单来说，就是想办法每篇文章都让搜索引擎收录（可以主动推送文章等），当搜索的时候，调用其搜索引擎，最终搜索内容变为：<code>keyword site:yukapril.com</code>这种样子。</p>\n</li>\n<li><p>优点：SEO效果好，搜索质量高</p>\n</li>\n<li><p>缺点：很难让搜索引擎每篇文章都收录，或者收录延迟很难把控。同时最终搜索<code>keyword site:yukapril.com</code>结果鬼知道是啥…比如baidu有类似的页面控件，但是我没办法调试成功…我总想着给它的代码精简精简。</p>\n</li>\n</ul>\n</li>\n<li><p>方案四：第三方平台托管搜索</p>\n<ul>\n<li><p>和方案三一致，只不过数据不是提交给搜索引擎了，而是第三方服务。一样是每次写完博客提交，每次用的时候进行AJAX查询即可。</p>\n</li>\n<li><p>优点：质量很高，非常好</p>\n</li>\n<li><p>缺点：听过几个平台，需要接入API，貌似有免费的，但是要求在搜索框上面加入他们的LOGO等，也就是说还是希望你能付费使用。API接入成本会相对复杂一些，开发成本比起前三个都要多不少。主要还是开发成本，谁想用就要注册一个第三方平台，否则没办法使用。</p>\n</li>\n</ul>\n</li>\n</ul>"},{"layout":"post","title":"node npm入门","date":"2016-12-01T10:18:00.000Z","_content":"\n这篇文章，主要介绍了npm的各种使用方法，从如何创建配置文件、安装、全局安装、项目安装、卸载组件、启动脚本等。\n\n<!-- more -->\n\n> 其实一直想好好总结下，把学过的东西认真的整理一遍，同时，也希望能在整理过程中，去学习更细致的使用。就这样，我开始进行各种工具的入门了。\n\n## 安装node npm\n\n安装node：建议直接访问[官网](https://nodejs.org)，下载合适的安装包。这样安装的好处是，不需要处理任何环境变量等。\n\n安装好node后，会自动带有npm。也就是说npm也安装好了。\n\n启动终端/命令控制台，输入\n\n* `node -v` : 可以看到当前安装node的版本号，比如v6.2.1\n\n* `npm -v` : 可以看到当前安装npm的版本号，比如3.9.3\n\n如果没有出现版本号，那么，请重新安装。\n\n## 使用node\n\nnode是一个运行环境，我们可以写代码在这个环境里运行。\n\n如果仅仅是调试个别代码，或者说是测试下而已，可以在终端/命令控制台，输入`node`，之后会出现一个`>`符号，此时就可以写代码了。实时显示。\n\n不过一般我们都是把代码写到文件里，在进行执行。\n\n比如，我在`/Users/yukapril`下新建了一个`test.js`文件，写上一句代码：\n\n```js\nconsole.log('hello world!');\n```\n\n之后，我们执行\n\n```bash\ncd /Users/yukapril #进入文件目录\nnode test.js\n```\n这样，我们在我们可以看到结果，返回了一句话`hello world!`。\n\n那node有什么用呢？\n\n我们可以编写一些有用的代码，比如说，删除某个目录下的文件，再将某个目录下的文件拷贝一份过来等等。\n\n反正有强大的语法，无所不能！具体写法，可以参见[API](https://nodejs.org/docs/latest/api/)。\n\n这么做的人不是很多，因为在npm上面，有很多已经写好的工具包了。\n\nnpm？npm是工具，是帮我们找到需要的工具包的工具。可以简单理解为下载工具。\n\n## 使用npm\n\n#### 创建`package.json`文件\n\n使用npm，就要创建配置文件。我相信大部分人都见过`package.json`文件。那么这个文件是如何生成的呢？\n\n除了我们复制一个已有的`package.json`文件，我们是可以用npm进行生成的。\n\n方法是进入项目目录后，执行`npm init`。他会询问你一些问题，来协助生成`package.json`文件。内容如下：\n\n```\nPress ^C at any time to quit.\nname: (test) \nversion: (1.0.0) \ndescription: \nentry point: (test.js) \ntest command: \ngit repository: \nkeywords: \nauthor: \nlicense: (ISC) \nAbout to write to /Users/yukapril/test/package.json:\n\n{\n  \"name\": \"test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"test.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n\n\nIs this ok? (yes) yes\n```\n\n一开始，先会询问项目名字，版本等。你可以直接按回车，使用默认值（即括号内的值）。\n\n最后，他会让你确认生成的json是否合你意，确认请输入`yes`即可。\n\n我一般都是使用默认值，有问题的话，再去`package.json`中修改。\n\n#### 安装依赖包\n\n假设，我们要做一个基于`express`框架的服务器端程序。\n\n* 我们可以在全局安装 `npm install -g express`\n\n* 也可以在项目中安装 `npm install express`\n\n这两种方式的区别：\n\n* 全局安装：在任何一个目录下，都可以直接使用`express`。\n\n* 项目安装：只能在当前项目使用`express`，不在项目目录下，无法使用。会将代码写到`node_modules`目录下。\n\n* 都不改`package.json`文件\n\n除了个别通用性很强的工具（比如`webpack`或者`gulp`），我个人不建议全局安装任何软件工具，因为你可以方便的使用，但是分享给别人的代码中，是不带有此工具的，所以可能是不能运行的。\n\n使用项目安装工具的话，建议使用以下两个参数：\n\n* `npm install express -save` : 项目安装express，同时修改`package.json`的依赖（`dependencies`字段）\n\n* `npm install express -save-dev` : 项目安装express，同时修改`package.json`的开发依赖（`devDependencies`字段）\n\n**这样写的好处是**：安装了那些依赖工具，会在`package.json`中体现出来。如果将项目分享给别人，可以清晰的看到，并安装。\n\n**这两种写法的区别是**：如果是普通依赖，那么说明这个依赖包的代码会最终体现到我们的程序中，如果是开发依赖，那么仅仅在开发过程中需要，最终的程序代码中不含有此依赖。\n\n举个例子说明：我们要基于`express`框架，开发一个网站。开发过程中，要使用`eslint`对代码质量进行测试，同时要使用`karma`做测试用例。那么，`express`就是项目普通依赖，`eslint`和`karma`就是开发依赖。\n\n不过不必担心，这两种依赖并不是严格区分，比如你把上面的例子的三个依赖，全部安装到普通依赖，或者开发依赖，在**本地调试**仍然可以正常启动或编译。因为不论是什么依赖，都是安装为目的。但是可能在服务器上无法运行，因为有的服务器配置上，默认只会安装普通依赖！他认为开发依赖是不需要的！\n\n#### 删除依赖包\n\n有了安装，就要有删除。其实为了省事，可以直接找到已经安装的包，拖拽到回收站。但是windows下，由于文件路径/文件名等原因，可能这样无法删除。\n\n如果想手动删除目录，那么要先确认安装在了哪里：\n\n* `npm root -g` : 获取全局安装路径，返回比如`/usr/local/lib/node_modules`的路径\n\n* `npm root` : 获取当前项目安装的路径，返回比如`/Users/yukapril/test/node_modules`的路径，需要注意的是，如果当前项目没有`package.json` `node_modules`目录，也会有一个返回值，这一点我也不能理解，可能是说，如果需要安装包的话，应该是那个目录。\n\n如果想检查当前项目安装了那些包，使用 `npm list`，我基本上没用过。\n\n删除一个依赖包，也很简单，不过要区分是全局删除，还是项目删除。\n\n* `npm uninstall express -g` : 全局删除依赖\n\n* `npm uninstall express` : 项目删除依赖\n\n#### 批量安装依赖包\n\n还有这种情况，你从网上下载了一个项目，或者要启动别人的项目。项目为了节省空间，一般都不会带有`node_modules`目录的。这时候，就需要你按照`package.json`文件中的依赖，进行安装了。\n\n方法很简单：`npm install`即可。\n\n#### 其他命令\n\n更新一个依赖包，`npm update express`，这个命令我很少用，一般在出现问题时候可能会用到。\n\n## 使用npm srcipts\n\n在使用`npm init`创建的`package.json`，默认如下：\n\n```json\n{\n  \"name\": \"test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"test.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n我们可以在`scripts`字段下，增加我们需要的命令。\n\n比如，以后会用到的`webpack`，项目安装后，即可以使用命令`webpack main.js app.js`执行操作了。我们增加到`build`命令上。\n\n```json\n{\n  \"name\": \"test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"test.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"webpack main.js app.js\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n这样，我们就可以使用`npm run build`来执行对应命令了。\n\n所有的`scripts`下的命令，都可以用`npm run xxx`来执行。\n\n但是有两个特殊命令，有简写方法，他们是：\n\n* `npm run start` : 简写为`npm start`\n\n* `npm run test` : 简写为`npm test`\n\n可能是这两个命令使用率太高，所以有简写方法。\n\n## npm scripts 高级一点的用法\n\n比如我们要做多件事，可以这样来写：\n\n```json\n{\n  \"name\": \"test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"test.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"webpack main.js app.js\",\n    \"build2\": \"webpack other.js app2.js\",\n    \"task1\": \"npm run build & npm run build2\",\n    \"task2\": \"cd test && mkdir abc\",\n    \"show-name\": \"echo npm_package_name\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n其中`task1`和`task2`主要差别在中间的`&`上。一个`&`表示两个任务是并行的，两个`&`表示先执行第一个，成功后执行第二个。\n\n如果要获取`package.json`配置文件内容使用呢？\n\n* 在`srcipts`中，可以使用`npm_package_`前缀来获取`package.json`中的字段值。\n\n    比如：`npm_package_name` `npm_package_scripts_test`。\n\n    由于`scripts`里面是bash脚本，所以只能使用bash语法。不支持js语法的。\n\n* 在项目代码中，要读取`package.json`中的`name`字段，那么怎么来处理？只能使用常规的读取文件方案。\n\n```js\nvar package = require('./package.json');\nconsole.log('项目名：', package.name);\n```\n\n\n## 小结\n\nnpm语法，其中`init` `install` `run`为重点\n\n* `npm init` : 创建`package.json` \n\n* `npm install` : 根据`package.json`安装依赖\n\n* `npm install -g some-package` : 全局安装包\n\n* `npm install some-package` : 项目安装包 \n\n* `npm install some-package -save` : 项目安装包，并更新`package.json`的普通依赖\n\n* `npm install some-package -save-dev` : 项目安装包，并更新`package.json`的开发依赖 \n\n* `npm root -g` : 获取npm依赖包全局安装路径\n\n* `npm root` : 获取npm依赖包项目安装路径 \n\n* `npm list` : 列出当前项目的依赖包\n\n* `npm uninstall some-package -g` : 全局删除依赖包\n\n* `npm uninstall some-package` : 项目删除依赖包\n\n* `npm update some-package` : 更新依赖包\n\n* `npm run some-scripts` : 执行制定脚本","source":"_posts/2016/2016-12-01-npm-introduction.md","raw":"---\nlayout: post\ntitle: \"node npm入门\"\ndate: 2016-12-01 10:18:00 GMT+0800\ncategories: [前端]\ntags:  [node,npm]\n---\n\n这篇文章，主要介绍了npm的各种使用方法，从如何创建配置文件、安装、全局安装、项目安装、卸载组件、启动脚本等。\n\n<!-- more -->\n\n> 其实一直想好好总结下，把学过的东西认真的整理一遍，同时，也希望能在整理过程中，去学习更细致的使用。就这样，我开始进行各种工具的入门了。\n\n## 安装node npm\n\n安装node：建议直接访问[官网](https://nodejs.org)，下载合适的安装包。这样安装的好处是，不需要处理任何环境变量等。\n\n安装好node后，会自动带有npm。也就是说npm也安装好了。\n\n启动终端/命令控制台，输入\n\n* `node -v` : 可以看到当前安装node的版本号，比如v6.2.1\n\n* `npm -v` : 可以看到当前安装npm的版本号，比如3.9.3\n\n如果没有出现版本号，那么，请重新安装。\n\n## 使用node\n\nnode是一个运行环境，我们可以写代码在这个环境里运行。\n\n如果仅仅是调试个别代码，或者说是测试下而已，可以在终端/命令控制台，输入`node`，之后会出现一个`>`符号，此时就可以写代码了。实时显示。\n\n不过一般我们都是把代码写到文件里，在进行执行。\n\n比如，我在`/Users/yukapril`下新建了一个`test.js`文件，写上一句代码：\n\n```js\nconsole.log('hello world!');\n```\n\n之后，我们执行\n\n```bash\ncd /Users/yukapril #进入文件目录\nnode test.js\n```\n这样，我们在我们可以看到结果，返回了一句话`hello world!`。\n\n那node有什么用呢？\n\n我们可以编写一些有用的代码，比如说，删除某个目录下的文件，再将某个目录下的文件拷贝一份过来等等。\n\n反正有强大的语法，无所不能！具体写法，可以参见[API](https://nodejs.org/docs/latest/api/)。\n\n这么做的人不是很多，因为在npm上面，有很多已经写好的工具包了。\n\nnpm？npm是工具，是帮我们找到需要的工具包的工具。可以简单理解为下载工具。\n\n## 使用npm\n\n#### 创建`package.json`文件\n\n使用npm，就要创建配置文件。我相信大部分人都见过`package.json`文件。那么这个文件是如何生成的呢？\n\n除了我们复制一个已有的`package.json`文件，我们是可以用npm进行生成的。\n\n方法是进入项目目录后，执行`npm init`。他会询问你一些问题，来协助生成`package.json`文件。内容如下：\n\n```\nPress ^C at any time to quit.\nname: (test) \nversion: (1.0.0) \ndescription: \nentry point: (test.js) \ntest command: \ngit repository: \nkeywords: \nauthor: \nlicense: (ISC) \nAbout to write to /Users/yukapril/test/package.json:\n\n{\n  \"name\": \"test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"test.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n\n\nIs this ok? (yes) yes\n```\n\n一开始，先会询问项目名字，版本等。你可以直接按回车，使用默认值（即括号内的值）。\n\n最后，他会让你确认生成的json是否合你意，确认请输入`yes`即可。\n\n我一般都是使用默认值，有问题的话，再去`package.json`中修改。\n\n#### 安装依赖包\n\n假设，我们要做一个基于`express`框架的服务器端程序。\n\n* 我们可以在全局安装 `npm install -g express`\n\n* 也可以在项目中安装 `npm install express`\n\n这两种方式的区别：\n\n* 全局安装：在任何一个目录下，都可以直接使用`express`。\n\n* 项目安装：只能在当前项目使用`express`，不在项目目录下，无法使用。会将代码写到`node_modules`目录下。\n\n* 都不改`package.json`文件\n\n除了个别通用性很强的工具（比如`webpack`或者`gulp`），我个人不建议全局安装任何软件工具，因为你可以方便的使用，但是分享给别人的代码中，是不带有此工具的，所以可能是不能运行的。\n\n使用项目安装工具的话，建议使用以下两个参数：\n\n* `npm install express -save` : 项目安装express，同时修改`package.json`的依赖（`dependencies`字段）\n\n* `npm install express -save-dev` : 项目安装express，同时修改`package.json`的开发依赖（`devDependencies`字段）\n\n**这样写的好处是**：安装了那些依赖工具，会在`package.json`中体现出来。如果将项目分享给别人，可以清晰的看到，并安装。\n\n**这两种写法的区别是**：如果是普通依赖，那么说明这个依赖包的代码会最终体现到我们的程序中，如果是开发依赖，那么仅仅在开发过程中需要，最终的程序代码中不含有此依赖。\n\n举个例子说明：我们要基于`express`框架，开发一个网站。开发过程中，要使用`eslint`对代码质量进行测试，同时要使用`karma`做测试用例。那么，`express`就是项目普通依赖，`eslint`和`karma`就是开发依赖。\n\n不过不必担心，这两种依赖并不是严格区分，比如你把上面的例子的三个依赖，全部安装到普通依赖，或者开发依赖，在**本地调试**仍然可以正常启动或编译。因为不论是什么依赖，都是安装为目的。但是可能在服务器上无法运行，因为有的服务器配置上，默认只会安装普通依赖！他认为开发依赖是不需要的！\n\n#### 删除依赖包\n\n有了安装，就要有删除。其实为了省事，可以直接找到已经安装的包，拖拽到回收站。但是windows下，由于文件路径/文件名等原因，可能这样无法删除。\n\n如果想手动删除目录，那么要先确认安装在了哪里：\n\n* `npm root -g` : 获取全局安装路径，返回比如`/usr/local/lib/node_modules`的路径\n\n* `npm root` : 获取当前项目安装的路径，返回比如`/Users/yukapril/test/node_modules`的路径，需要注意的是，如果当前项目没有`package.json` `node_modules`目录，也会有一个返回值，这一点我也不能理解，可能是说，如果需要安装包的话，应该是那个目录。\n\n如果想检查当前项目安装了那些包，使用 `npm list`，我基本上没用过。\n\n删除一个依赖包，也很简单，不过要区分是全局删除，还是项目删除。\n\n* `npm uninstall express -g` : 全局删除依赖\n\n* `npm uninstall express` : 项目删除依赖\n\n#### 批量安装依赖包\n\n还有这种情况，你从网上下载了一个项目，或者要启动别人的项目。项目为了节省空间，一般都不会带有`node_modules`目录的。这时候，就需要你按照`package.json`文件中的依赖，进行安装了。\n\n方法很简单：`npm install`即可。\n\n#### 其他命令\n\n更新一个依赖包，`npm update express`，这个命令我很少用，一般在出现问题时候可能会用到。\n\n## 使用npm srcipts\n\n在使用`npm init`创建的`package.json`，默认如下：\n\n```json\n{\n  \"name\": \"test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"test.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n我们可以在`scripts`字段下，增加我们需要的命令。\n\n比如，以后会用到的`webpack`，项目安装后，即可以使用命令`webpack main.js app.js`执行操作了。我们增加到`build`命令上。\n\n```json\n{\n  \"name\": \"test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"test.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"webpack main.js app.js\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n这样，我们就可以使用`npm run build`来执行对应命令了。\n\n所有的`scripts`下的命令，都可以用`npm run xxx`来执行。\n\n但是有两个特殊命令，有简写方法，他们是：\n\n* `npm run start` : 简写为`npm start`\n\n* `npm run test` : 简写为`npm test`\n\n可能是这两个命令使用率太高，所以有简写方法。\n\n## npm scripts 高级一点的用法\n\n比如我们要做多件事，可以这样来写：\n\n```json\n{\n  \"name\": \"test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"test.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"webpack main.js app.js\",\n    \"build2\": \"webpack other.js app2.js\",\n    \"task1\": \"npm run build & npm run build2\",\n    \"task2\": \"cd test && mkdir abc\",\n    \"show-name\": \"echo npm_package_name\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n其中`task1`和`task2`主要差别在中间的`&`上。一个`&`表示两个任务是并行的，两个`&`表示先执行第一个，成功后执行第二个。\n\n如果要获取`package.json`配置文件内容使用呢？\n\n* 在`srcipts`中，可以使用`npm_package_`前缀来获取`package.json`中的字段值。\n\n    比如：`npm_package_name` `npm_package_scripts_test`。\n\n    由于`scripts`里面是bash脚本，所以只能使用bash语法。不支持js语法的。\n\n* 在项目代码中，要读取`package.json`中的`name`字段，那么怎么来处理？只能使用常规的读取文件方案。\n\n```js\nvar package = require('./package.json');\nconsole.log('项目名：', package.name);\n```\n\n\n## 小结\n\nnpm语法，其中`init` `install` `run`为重点\n\n* `npm init` : 创建`package.json` \n\n* `npm install` : 根据`package.json`安装依赖\n\n* `npm install -g some-package` : 全局安装包\n\n* `npm install some-package` : 项目安装包 \n\n* `npm install some-package -save` : 项目安装包，并更新`package.json`的普通依赖\n\n* `npm install some-package -save-dev` : 项目安装包，并更新`package.json`的开发依赖 \n\n* `npm root -g` : 获取npm依赖包全局安装路径\n\n* `npm root` : 获取npm依赖包项目安装路径 \n\n* `npm list` : 列出当前项目的依赖包\n\n* `npm uninstall some-package -g` : 全局删除依赖包\n\n* `npm uninstall some-package` : 项目删除依赖包\n\n* `npm update some-package` : 更新依赖包\n\n* `npm run some-scripts` : 执行制定脚本","slug":"2016-2016-12-01-npm-introduction","published":1,"updated":"2020-03-02T07:16:34.603Z","comments":1,"photos":[],"link":"","_id":"cka5ik8ad000onybgodjt23sj","content":"<p>这篇文章，主要介绍了npm的各种使用方法，从如何创建配置文件、安装、全局安装、项目安装、卸载组件、启动脚本等。</p>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>其实一直想好好总结下，把学过的东西认真的整理一遍，同时，也希望能在整理过程中，去学习更细致的使用。就这样，我开始进行各种工具的入门了。</p>\n</blockquote>\n<h2 id=\"安装node-npm\"><a href=\"#安装node-npm\" class=\"headerlink\" title=\"安装node npm\"></a>安装node npm</h2><p>安装node：建议直接访问<a href=\"https://nodejs.org\" target=\"_blank\" rel=\"noopener\">官网</a>，下载合适的安装包。这样安装的好处是，不需要处理任何环境变量等。</p>\n<p>安装好node后，会自动带有npm。也就是说npm也安装好了。</p>\n<p>启动终端/命令控制台，输入</p>\n<ul>\n<li><p><code>node -v</code> : 可以看到当前安装node的版本号，比如v6.2.1</p>\n</li>\n<li><p><code>npm -v</code> : 可以看到当前安装npm的版本号，比如3.9.3</p>\n</li>\n</ul>\n<p>如果没有出现版本号，那么，请重新安装。</p>\n<h2 id=\"使用node\"><a href=\"#使用node\" class=\"headerlink\" title=\"使用node\"></a>使用node</h2><p>node是一个运行环境，我们可以写代码在这个环境里运行。</p>\n<p>如果仅仅是调试个别代码，或者说是测试下而已，可以在终端/命令控制台，输入<code>node</code>，之后会出现一个<code>&gt;</code>符号，此时就可以写代码了。实时显示。</p>\n<p>不过一般我们都是把代码写到文件里，在进行执行。</p>\n<p>比如，我在<code>/Users/yukapril</code>下新建了一个<code>test.js</code>文件，写上一句代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world!'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>之后，我们执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /Users/yukapril <span class=\"comment\">#进入文件目录</span></span><br><span class=\"line\">node test.js</span><br></pre></td></tr></table></figure>\n\n<p>这样，我们在我们可以看到结果，返回了一句话<code>hello world!</code>。</p>\n<p>那node有什么用呢？</p>\n<p>我们可以编写一些有用的代码，比如说，删除某个目录下的文件，再将某个目录下的文件拷贝一份过来等等。</p>\n<p>反正有强大的语法，无所不能！具体写法，可以参见<a href=\"https://nodejs.org/docs/latest/api/\" target=\"_blank\" rel=\"noopener\">API</a>。</p>\n<p>这么做的人不是很多，因为在npm上面，有很多已经写好的工具包了。</p>\n<p>npm？npm是工具，是帮我们找到需要的工具包的工具。可以简单理解为下载工具。</p>\n<h2 id=\"使用npm\"><a href=\"#使用npm\" class=\"headerlink\" title=\"使用npm\"></a>使用npm</h2><h4 id=\"创建package-json文件\"><a href=\"#创建package-json文件\" class=\"headerlink\" title=\"创建package.json文件\"></a>创建<code>package.json</code>文件</h4><p>使用npm，就要创建配置文件。我相信大部分人都见过<code>package.json</code>文件。那么这个文件是如何生成的呢？</p>\n<p>除了我们复制一个已有的<code>package.json</code>文件，我们是可以用npm进行生成的。</p>\n<p>方法是进入项目目录后，执行<code>npm init</code>。他会询问你一些问题，来协助生成<code>package.json</code>文件。内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Press ^C at any time to quit.</span><br><span class=\"line\">name: (test) </span><br><span class=\"line\">version: (1.0.0) </span><br><span class=\"line\">description: </span><br><span class=\"line\">entry point: (test.js) </span><br><span class=\"line\">test command: </span><br><span class=\"line\">git repository: </span><br><span class=\"line\">keywords: </span><br><span class=\"line\">author: </span><br><span class=\"line\">license: (ISC) </span><br><span class=\"line\">About to write to /Users/yukapril/test/package.json:</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;test&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;test.js&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;author&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Is this ok? (yes) yes</span><br></pre></td></tr></table></figure>\n\n<p>一开始，先会询问项目名字，版本等。你可以直接按回车，使用默认值（即括号内的值）。</p>\n<p>最后，他会让你确认生成的json是否合你意，确认请输入<code>yes</code>即可。</p>\n<p>我一般都是使用默认值，有问题的话，再去<code>package.json</code>中修改。</p>\n<h4 id=\"安装依赖包\"><a href=\"#安装依赖包\" class=\"headerlink\" title=\"安装依赖包\"></a>安装依赖包</h4><p>假设，我们要做一个基于<code>express</code>框架的服务器端程序。</p>\n<ul>\n<li><p>我们可以在全局安装 <code>npm install -g express</code></p>\n</li>\n<li><p>也可以在项目中安装 <code>npm install express</code></p>\n</li>\n</ul>\n<p>这两种方式的区别：</p>\n<ul>\n<li><p>全局安装：在任何一个目录下，都可以直接使用<code>express</code>。</p>\n</li>\n<li><p>项目安装：只能在当前项目使用<code>express</code>，不在项目目录下，无法使用。会将代码写到<code>node_modules</code>目录下。</p>\n</li>\n<li><p>都不改<code>package.json</code>文件</p>\n</li>\n</ul>\n<p>除了个别通用性很强的工具（比如<code>webpack</code>或者<code>gulp</code>），我个人不建议全局安装任何软件工具，因为你可以方便的使用，但是分享给别人的代码中，是不带有此工具的，所以可能是不能运行的。</p>\n<p>使用项目安装工具的话，建议使用以下两个参数：</p>\n<ul>\n<li><p><code>npm install express -save</code> : 项目安装express，同时修改<code>package.json</code>的依赖（<code>dependencies</code>字段）</p>\n</li>\n<li><p><code>npm install express -save-dev</code> : 项目安装express，同时修改<code>package.json</code>的开发依赖（<code>devDependencies</code>字段）</p>\n</li>\n</ul>\n<p><strong>这样写的好处是</strong>：安装了那些依赖工具，会在<code>package.json</code>中体现出来。如果将项目分享给别人，可以清晰的看到，并安装。</p>\n<p><strong>这两种写法的区别是</strong>：如果是普通依赖，那么说明这个依赖包的代码会最终体现到我们的程序中，如果是开发依赖，那么仅仅在开发过程中需要，最终的程序代码中不含有此依赖。</p>\n<p>举个例子说明：我们要基于<code>express</code>框架，开发一个网站。开发过程中，要使用<code>eslint</code>对代码质量进行测试，同时要使用<code>karma</code>做测试用例。那么，<code>express</code>就是项目普通依赖，<code>eslint</code>和<code>karma</code>就是开发依赖。</p>\n<p>不过不必担心，这两种依赖并不是严格区分，比如你把上面的例子的三个依赖，全部安装到普通依赖，或者开发依赖，在<strong>本地调试</strong>仍然可以正常启动或编译。因为不论是什么依赖，都是安装为目的。但是可能在服务器上无法运行，因为有的服务器配置上，默认只会安装普通依赖！他认为开发依赖是不需要的！</p>\n<h4 id=\"删除依赖包\"><a href=\"#删除依赖包\" class=\"headerlink\" title=\"删除依赖包\"></a>删除依赖包</h4><p>有了安装，就要有删除。其实为了省事，可以直接找到已经安装的包，拖拽到回收站。但是windows下，由于文件路径/文件名等原因，可能这样无法删除。</p>\n<p>如果想手动删除目录，那么要先确认安装在了哪里：</p>\n<ul>\n<li><p><code>npm root -g</code> : 获取全局安装路径，返回比如<code>/usr/local/lib/node_modules</code>的路径</p>\n</li>\n<li><p><code>npm root</code> : 获取当前项目安装的路径，返回比如<code>/Users/yukapril/test/node_modules</code>的路径，需要注意的是，如果当前项目没有<code>package.json</code> <code>node_modules</code>目录，也会有一个返回值，这一点我也不能理解，可能是说，如果需要安装包的话，应该是那个目录。</p>\n</li>\n</ul>\n<p>如果想检查当前项目安装了那些包，使用 <code>npm list</code>，我基本上没用过。</p>\n<p>删除一个依赖包，也很简单，不过要区分是全局删除，还是项目删除。</p>\n<ul>\n<li><p><code>npm uninstall express -g</code> : 全局删除依赖</p>\n</li>\n<li><p><code>npm uninstall express</code> : 项目删除依赖</p>\n</li>\n</ul>\n<h4 id=\"批量安装依赖包\"><a href=\"#批量安装依赖包\" class=\"headerlink\" title=\"批量安装依赖包\"></a>批量安装依赖包</h4><p>还有这种情况，你从网上下载了一个项目，或者要启动别人的项目。项目为了节省空间，一般都不会带有<code>node_modules</code>目录的。这时候，就需要你按照<code>package.json</code>文件中的依赖，进行安装了。</p>\n<p>方法很简单：<code>npm install</code>即可。</p>\n<h4 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h4><p>更新一个依赖包，<code>npm update express</code>，这个命令我很少用，一般在出现问题时候可能会用到。</p>\n<h2 id=\"使用npm-srcipts\"><a href=\"#使用npm-srcipts\" class=\"headerlink\" title=\"使用npm srcipts\"></a>使用npm srcipts</h2><p>在使用<code>npm init</code>创建的<code>package.json</code>，默认如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"test\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"test.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以在<code>scripts</code>字段下，增加我们需要的命令。</p>\n<p>比如，以后会用到的<code>webpack</code>，项目安装后，即可以使用命令<code>webpack main.js app.js</code>执行操作了。我们增加到<code>build</code>命令上。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"test\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"test.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"webpack main.js app.js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样，我们就可以使用<code>npm run build</code>来执行对应命令了。</p>\n<p>所有的<code>scripts</code>下的命令，都可以用<code>npm run xxx</code>来执行。</p>\n<p>但是有两个特殊命令，有简写方法，他们是：</p>\n<ul>\n<li><p><code>npm run start</code> : 简写为<code>npm start</code></p>\n</li>\n<li><p><code>npm run test</code> : 简写为<code>npm test</code></p>\n</li>\n</ul>\n<p>可能是这两个命令使用率太高，所以有简写方法。</p>\n<h2 id=\"npm-scripts-高级一点的用法\"><a href=\"#npm-scripts-高级一点的用法\" class=\"headerlink\" title=\"npm scripts 高级一点的用法\"></a>npm scripts 高级一点的用法</h2><p>比如我们要做多件事，可以这样来写：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"test\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"test.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"webpack main.js app.js\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build2\"</span>: <span class=\"string\">\"webpack other.js app2.js\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"task1\"</span>: <span class=\"string\">\"npm run build &amp; npm run build2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"task2\"</span>: <span class=\"string\">\"cd test &amp;&amp; mkdir abc\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"show-name\"</span>: <span class=\"string\">\"echo npm_package_name\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>task1</code>和<code>task2</code>主要差别在中间的<code>&amp;</code>上。一个<code>&amp;</code>表示两个任务是并行的，两个<code>&amp;</code>表示先执行第一个，成功后执行第二个。</p>\n<p>如果要获取<code>package.json</code>配置文件内容使用呢？</p>\n<ul>\n<li><p>在<code>srcipts</code>中，可以使用<code>npm_package_</code>前缀来获取<code>package.json</code>中的字段值。</p>\n<p>  比如：<code>npm_package_name</code> <code>npm_package_scripts_test</code>。</p>\n<p>  由于<code>scripts</code>里面是bash脚本，所以只能使用bash语法。不支持js语法的。</p>\n</li>\n<li><p>在项目代码中，要读取<code>package.json</code>中的<code>name</code>字段，那么怎么来处理？只能使用常规的读取文件方案。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> package = <span class=\"built_in\">require</span>(<span class=\"string\">'./package.json'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'项目名：'</span>, package.name);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>npm语法，其中<code>init</code> <code>install</code> <code>run</code>为重点</p>\n<ul>\n<li><p><code>npm init</code> : 创建<code>package.json</code> </p>\n</li>\n<li><p><code>npm install</code> : 根据<code>package.json</code>安装依赖</p>\n</li>\n<li><p><code>npm install -g some-package</code> : 全局安装包</p>\n</li>\n<li><p><code>npm install some-package</code> : 项目安装包 </p>\n</li>\n<li><p><code>npm install some-package -save</code> : 项目安装包，并更新<code>package.json</code>的普通依赖</p>\n</li>\n<li><p><code>npm install some-package -save-dev</code> : 项目安装包，并更新<code>package.json</code>的开发依赖 </p>\n</li>\n<li><p><code>npm root -g</code> : 获取npm依赖包全局安装路径</p>\n</li>\n<li><p><code>npm root</code> : 获取npm依赖包项目安装路径 </p>\n</li>\n<li><p><code>npm list</code> : 列出当前项目的依赖包</p>\n</li>\n<li><p><code>npm uninstall some-package -g</code> : 全局删除依赖包</p>\n</li>\n<li><p><code>npm uninstall some-package</code> : 项目删除依赖包</p>\n</li>\n<li><p><code>npm update some-package</code> : 更新依赖包</p>\n</li>\n<li><p><code>npm run some-scripts</code> : 执行制定脚本</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>这篇文章，主要介绍了npm的各种使用方法，从如何创建配置文件、安装、全局安装、项目安装、卸载组件、启动脚本等。</p>","more":"<blockquote>\n<p>其实一直想好好总结下，把学过的东西认真的整理一遍，同时，也希望能在整理过程中，去学习更细致的使用。就这样，我开始进行各种工具的入门了。</p>\n</blockquote>\n<h2 id=\"安装node-npm\"><a href=\"#安装node-npm\" class=\"headerlink\" title=\"安装node npm\"></a>安装node npm</h2><p>安装node：建议直接访问<a href=\"https://nodejs.org\" target=\"_blank\" rel=\"noopener\">官网</a>，下载合适的安装包。这样安装的好处是，不需要处理任何环境变量等。</p>\n<p>安装好node后，会自动带有npm。也就是说npm也安装好了。</p>\n<p>启动终端/命令控制台，输入</p>\n<ul>\n<li><p><code>node -v</code> : 可以看到当前安装node的版本号，比如v6.2.1</p>\n</li>\n<li><p><code>npm -v</code> : 可以看到当前安装npm的版本号，比如3.9.3</p>\n</li>\n</ul>\n<p>如果没有出现版本号，那么，请重新安装。</p>\n<h2 id=\"使用node\"><a href=\"#使用node\" class=\"headerlink\" title=\"使用node\"></a>使用node</h2><p>node是一个运行环境，我们可以写代码在这个环境里运行。</p>\n<p>如果仅仅是调试个别代码，或者说是测试下而已，可以在终端/命令控制台，输入<code>node</code>，之后会出现一个<code>&gt;</code>符号，此时就可以写代码了。实时显示。</p>\n<p>不过一般我们都是把代码写到文件里，在进行执行。</p>\n<p>比如，我在<code>/Users/yukapril</code>下新建了一个<code>test.js</code>文件，写上一句代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world!'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>之后，我们执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /Users/yukapril <span class=\"comment\">#进入文件目录</span></span><br><span class=\"line\">node test.js</span><br></pre></td></tr></table></figure>\n\n<p>这样，我们在我们可以看到结果，返回了一句话<code>hello world!</code>。</p>\n<p>那node有什么用呢？</p>\n<p>我们可以编写一些有用的代码，比如说，删除某个目录下的文件，再将某个目录下的文件拷贝一份过来等等。</p>\n<p>反正有强大的语法，无所不能！具体写法，可以参见<a href=\"https://nodejs.org/docs/latest/api/\" target=\"_blank\" rel=\"noopener\">API</a>。</p>\n<p>这么做的人不是很多，因为在npm上面，有很多已经写好的工具包了。</p>\n<p>npm？npm是工具，是帮我们找到需要的工具包的工具。可以简单理解为下载工具。</p>\n<h2 id=\"使用npm\"><a href=\"#使用npm\" class=\"headerlink\" title=\"使用npm\"></a>使用npm</h2><h4 id=\"创建package-json文件\"><a href=\"#创建package-json文件\" class=\"headerlink\" title=\"创建package.json文件\"></a>创建<code>package.json</code>文件</h4><p>使用npm，就要创建配置文件。我相信大部分人都见过<code>package.json</code>文件。那么这个文件是如何生成的呢？</p>\n<p>除了我们复制一个已有的<code>package.json</code>文件，我们是可以用npm进行生成的。</p>\n<p>方法是进入项目目录后，执行<code>npm init</code>。他会询问你一些问题，来协助生成<code>package.json</code>文件。内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Press ^C at any time to quit.</span><br><span class=\"line\">name: (test) </span><br><span class=\"line\">version: (1.0.0) </span><br><span class=\"line\">description: </span><br><span class=\"line\">entry point: (test.js) </span><br><span class=\"line\">test command: </span><br><span class=\"line\">git repository: </span><br><span class=\"line\">keywords: </span><br><span class=\"line\">author: </span><br><span class=\"line\">license: (ISC) </span><br><span class=\"line\">About to write to /Users/yukapril/test/package.json:</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;test&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;test.js&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;author&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Is this ok? (yes) yes</span><br></pre></td></tr></table></figure>\n\n<p>一开始，先会询问项目名字，版本等。你可以直接按回车，使用默认值（即括号内的值）。</p>\n<p>最后，他会让你确认生成的json是否合你意，确认请输入<code>yes</code>即可。</p>\n<p>我一般都是使用默认值，有问题的话，再去<code>package.json</code>中修改。</p>\n<h4 id=\"安装依赖包\"><a href=\"#安装依赖包\" class=\"headerlink\" title=\"安装依赖包\"></a>安装依赖包</h4><p>假设，我们要做一个基于<code>express</code>框架的服务器端程序。</p>\n<ul>\n<li><p>我们可以在全局安装 <code>npm install -g express</code></p>\n</li>\n<li><p>也可以在项目中安装 <code>npm install express</code></p>\n</li>\n</ul>\n<p>这两种方式的区别：</p>\n<ul>\n<li><p>全局安装：在任何一个目录下，都可以直接使用<code>express</code>。</p>\n</li>\n<li><p>项目安装：只能在当前项目使用<code>express</code>，不在项目目录下，无法使用。会将代码写到<code>node_modules</code>目录下。</p>\n</li>\n<li><p>都不改<code>package.json</code>文件</p>\n</li>\n</ul>\n<p>除了个别通用性很强的工具（比如<code>webpack</code>或者<code>gulp</code>），我个人不建议全局安装任何软件工具，因为你可以方便的使用，但是分享给别人的代码中，是不带有此工具的，所以可能是不能运行的。</p>\n<p>使用项目安装工具的话，建议使用以下两个参数：</p>\n<ul>\n<li><p><code>npm install express -save</code> : 项目安装express，同时修改<code>package.json</code>的依赖（<code>dependencies</code>字段）</p>\n</li>\n<li><p><code>npm install express -save-dev</code> : 项目安装express，同时修改<code>package.json</code>的开发依赖（<code>devDependencies</code>字段）</p>\n</li>\n</ul>\n<p><strong>这样写的好处是</strong>：安装了那些依赖工具，会在<code>package.json</code>中体现出来。如果将项目分享给别人，可以清晰的看到，并安装。</p>\n<p><strong>这两种写法的区别是</strong>：如果是普通依赖，那么说明这个依赖包的代码会最终体现到我们的程序中，如果是开发依赖，那么仅仅在开发过程中需要，最终的程序代码中不含有此依赖。</p>\n<p>举个例子说明：我们要基于<code>express</code>框架，开发一个网站。开发过程中，要使用<code>eslint</code>对代码质量进行测试，同时要使用<code>karma</code>做测试用例。那么，<code>express</code>就是项目普通依赖，<code>eslint</code>和<code>karma</code>就是开发依赖。</p>\n<p>不过不必担心，这两种依赖并不是严格区分，比如你把上面的例子的三个依赖，全部安装到普通依赖，或者开发依赖，在<strong>本地调试</strong>仍然可以正常启动或编译。因为不论是什么依赖，都是安装为目的。但是可能在服务器上无法运行，因为有的服务器配置上，默认只会安装普通依赖！他认为开发依赖是不需要的！</p>\n<h4 id=\"删除依赖包\"><a href=\"#删除依赖包\" class=\"headerlink\" title=\"删除依赖包\"></a>删除依赖包</h4><p>有了安装，就要有删除。其实为了省事，可以直接找到已经安装的包，拖拽到回收站。但是windows下，由于文件路径/文件名等原因，可能这样无法删除。</p>\n<p>如果想手动删除目录，那么要先确认安装在了哪里：</p>\n<ul>\n<li><p><code>npm root -g</code> : 获取全局安装路径，返回比如<code>/usr/local/lib/node_modules</code>的路径</p>\n</li>\n<li><p><code>npm root</code> : 获取当前项目安装的路径，返回比如<code>/Users/yukapril/test/node_modules</code>的路径，需要注意的是，如果当前项目没有<code>package.json</code> <code>node_modules</code>目录，也会有一个返回值，这一点我也不能理解，可能是说，如果需要安装包的话，应该是那个目录。</p>\n</li>\n</ul>\n<p>如果想检查当前项目安装了那些包，使用 <code>npm list</code>，我基本上没用过。</p>\n<p>删除一个依赖包，也很简单，不过要区分是全局删除，还是项目删除。</p>\n<ul>\n<li><p><code>npm uninstall express -g</code> : 全局删除依赖</p>\n</li>\n<li><p><code>npm uninstall express</code> : 项目删除依赖</p>\n</li>\n</ul>\n<h4 id=\"批量安装依赖包\"><a href=\"#批量安装依赖包\" class=\"headerlink\" title=\"批量安装依赖包\"></a>批量安装依赖包</h4><p>还有这种情况，你从网上下载了一个项目，或者要启动别人的项目。项目为了节省空间，一般都不会带有<code>node_modules</code>目录的。这时候，就需要你按照<code>package.json</code>文件中的依赖，进行安装了。</p>\n<p>方法很简单：<code>npm install</code>即可。</p>\n<h4 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h4><p>更新一个依赖包，<code>npm update express</code>，这个命令我很少用，一般在出现问题时候可能会用到。</p>\n<h2 id=\"使用npm-srcipts\"><a href=\"#使用npm-srcipts\" class=\"headerlink\" title=\"使用npm srcipts\"></a>使用npm srcipts</h2><p>在使用<code>npm init</code>创建的<code>package.json</code>，默认如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"test\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"test.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以在<code>scripts</code>字段下，增加我们需要的命令。</p>\n<p>比如，以后会用到的<code>webpack</code>，项目安装后，即可以使用命令<code>webpack main.js app.js</code>执行操作了。我们增加到<code>build</code>命令上。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"test\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"test.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"webpack main.js app.js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样，我们就可以使用<code>npm run build</code>来执行对应命令了。</p>\n<p>所有的<code>scripts</code>下的命令，都可以用<code>npm run xxx</code>来执行。</p>\n<p>但是有两个特殊命令，有简写方法，他们是：</p>\n<ul>\n<li><p><code>npm run start</code> : 简写为<code>npm start</code></p>\n</li>\n<li><p><code>npm run test</code> : 简写为<code>npm test</code></p>\n</li>\n</ul>\n<p>可能是这两个命令使用率太高，所以有简写方法。</p>\n<h2 id=\"npm-scripts-高级一点的用法\"><a href=\"#npm-scripts-高级一点的用法\" class=\"headerlink\" title=\"npm scripts 高级一点的用法\"></a>npm scripts 高级一点的用法</h2><p>比如我们要做多件事，可以这样来写：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"test\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"test.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"webpack main.js app.js\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build2\"</span>: <span class=\"string\">\"webpack other.js app2.js\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"task1\"</span>: <span class=\"string\">\"npm run build &amp; npm run build2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"task2\"</span>: <span class=\"string\">\"cd test &amp;&amp; mkdir abc\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"show-name\"</span>: <span class=\"string\">\"echo npm_package_name\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>task1</code>和<code>task2</code>主要差别在中间的<code>&amp;</code>上。一个<code>&amp;</code>表示两个任务是并行的，两个<code>&amp;</code>表示先执行第一个，成功后执行第二个。</p>\n<p>如果要获取<code>package.json</code>配置文件内容使用呢？</p>\n<ul>\n<li><p>在<code>srcipts</code>中，可以使用<code>npm_package_</code>前缀来获取<code>package.json</code>中的字段值。</p>\n<p>  比如：<code>npm_package_name</code> <code>npm_package_scripts_test</code>。</p>\n<p>  由于<code>scripts</code>里面是bash脚本，所以只能使用bash语法。不支持js语法的。</p>\n</li>\n<li><p>在项目代码中，要读取<code>package.json</code>中的<code>name</code>字段，那么怎么来处理？只能使用常规的读取文件方案。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> package = <span class=\"built_in\">require</span>(<span class=\"string\">'./package.json'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'项目名：'</span>, package.name);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>npm语法，其中<code>init</code> <code>install</code> <code>run</code>为重点</p>\n<ul>\n<li><p><code>npm init</code> : 创建<code>package.json</code> </p>\n</li>\n<li><p><code>npm install</code> : 根据<code>package.json</code>安装依赖</p>\n</li>\n<li><p><code>npm install -g some-package</code> : 全局安装包</p>\n</li>\n<li><p><code>npm install some-package</code> : 项目安装包 </p>\n</li>\n<li><p><code>npm install some-package -save</code> : 项目安装包，并更新<code>package.json</code>的普通依赖</p>\n</li>\n<li><p><code>npm install some-package -save-dev</code> : 项目安装包，并更新<code>package.json</code>的开发依赖 </p>\n</li>\n<li><p><code>npm root -g</code> : 获取npm依赖包全局安装路径</p>\n</li>\n<li><p><code>npm root</code> : 获取npm依赖包项目安装路径 </p>\n</li>\n<li><p><code>npm list</code> : 列出当前项目的依赖包</p>\n</li>\n<li><p><code>npm uninstall some-package -g</code> : 全局删除依赖包</p>\n</li>\n<li><p><code>npm uninstall some-package</code> : 项目删除依赖包</p>\n</li>\n<li><p><code>npm update some-package</code> : 更新依赖包</p>\n</li>\n<li><p><code>npm run some-scripts</code> : 执行制定脚本</p>\n</li>\n</ul>"},{"layout":"post","title":"提前获得圣诞礼物 - Octocat Figurine","date":"2016-12-06T21:50:00.000Z","photos":["https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine6.jpg-wm.pic"],"_content":"\n今天稍微加了一点班，回家就收到了老婆大人送的礼物~\n\n一直想买，想买5寸的，想买杯子、杯垫...苦于不知道如何运输等，一直没在官网购买。\n\n这次终于获得3寸的啦~\n\n<!-- more -->\n\n**章鱼猫 3寸版**\n\n![image](https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine1.jpg-wm.pic)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine2.jpg-wm.pic)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine3.jpg-wm.pic)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine4.jpg-wm.pic)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine5.jpg-wm.pic)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine6.jpg-wm.pic)\n\n这是说明我要用三脚猫的功夫，继续在开源这条不归路上好好走下去...\n\n---\n\n官方购买地址：[github](https://github.myshopify.com/products/octocat-figurine)\n","source":"_posts/2016/2016-12-06-octocat-figurine.md","raw":"---\nlayout: post\ntitle: \"提前获得圣诞礼物 - Octocat Figurine\"\ndate: 2016-12-06 21:50:00 GMT+0800\ncategories: [随笔]\ntags:  [Octocat Figurine,章鱼猫,github]\nphotos: [https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine6.jpg-wm.pic]\n---\n\n今天稍微加了一点班，回家就收到了老婆大人送的礼物~\n\n一直想买，想买5寸的，想买杯子、杯垫...苦于不知道如何运输等，一直没在官网购买。\n\n这次终于获得3寸的啦~\n\n<!-- more -->\n\n**章鱼猫 3寸版**\n\n![image](https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine1.jpg-wm.pic)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine2.jpg-wm.pic)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine3.jpg-wm.pic)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine4.jpg-wm.pic)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine5.jpg-wm.pic)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine6.jpg-wm.pic)\n\n这是说明我要用三脚猫的功夫，继续在开源这条不归路上好好走下去...\n\n---\n\n官方购买地址：[github](https://github.myshopify.com/products/octocat-figurine)\n","slug":"2016-2016-12-06-octocat-figurine","published":1,"updated":"2020-03-02T07:16:34.603Z","comments":1,"link":"","_id":"cka5ik8ag000snybgbxk339zn","content":"<p>今天稍微加了一点班，回家就收到了老婆大人送的礼物~</p>\n<p>一直想买，想买5寸的，想买杯子、杯垫…苦于不知道如何运输等，一直没在官网购买。</p>\n<p>这次终于获得3寸的啦~</p>\n<a id=\"more\"></a>\n\n<p><strong>章鱼猫 3寸版</strong></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine1.jpg-wm.pic\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine2.jpg-wm.pic\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine3.jpg-wm.pic\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine4.jpg-wm.pic\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine5.jpg-wm.pic\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine6.jpg-wm.pic\" alt=\"image\"></p>\n<p>这是说明我要用三脚猫的功夫，继续在开源这条不归路上好好走下去…</p>\n<hr>\n<p>官方购买地址：<a href=\"https://github.myshopify.com/products/octocat-figurine\" target=\"_blank\" rel=\"noopener\">github</a></p>\n","site":{"data":{}},"excerpt":"<p>今天稍微加了一点班，回家就收到了老婆大人送的礼物~</p>\n<p>一直想买，想买5寸的，想买杯子、杯垫…苦于不知道如何运输等，一直没在官网购买。</p>\n<p>这次终于获得3寸的啦~</p>","more":"<p><strong>章鱼猫 3寸版</strong></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine1.jpg-wm.pic\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine2.jpg-wm.pic\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine3.jpg-wm.pic\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine4.jpg-wm.pic\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine5.jpg-wm.pic\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-6-octocat-figurine6.jpg-wm.pic\" alt=\"image\"></p>\n<p>这是说明我要用三脚猫的功夫，继续在开源这条不归路上好好走下去…</p>\n<hr>\n<p>官方购买地址：<a href=\"https://github.myshopify.com/products/octocat-figurine\" target=\"_blank\" rel=\"noopener\">github</a></p>"},{"layout":"post","title":"CSS编码引发的问题","date":"2016-12-07T22:18:00.000Z","_content":"\n今天突然接到一个测试反馈，是说项目IE8下面CSS样式不对，但其他高级浏览器都没有问题。\n\n我测试了下，因为已经升级到IE11，所以只能靠模拟IE8，发现没有任何问题，同时IE7及兼容性模式也没有问题。\n\n那么我的第一感觉，是让其清理缓存。结果无效。\n\n<!-- more -->\n\n这个很诧异，因为我用双核浏览器也测试过（比如360浏览器），兼容性肯定是不会有问题的。那么这个问题就很奇怪。\n\n最后，在周围同事找了一圈，终于找到了一个有IE8的机器。测试发现，一般情况下，第一次打开网页，不会有问题，用用也问题不大。但是只要触发以下两点，立即CSS样式几乎全部异常，但是CSS样式文件可以识别**。\n\n* 启动F12调试\n* 点击兼容性模式按钮\n\n因为可以加载CSS文件，就打算看看是怎么解析的。\n\n点击一个元素，发现仅仅加载了第一行样式，就顺藤摸瓜，查看样式表。IE的F12下，可以看到当前的CSS文件解析情况，结果发现，仅仅能解析到几行而已。我又去查看CSS文件内容，发现正好是注释的地方。\n\n在IE下打开CSS文件，结果发现，由于文件编码是`UTF-8`，导致注释的地方是乱码。\n\n这样原因就很明确了：CSS文件编码导致的，最简单的方法，就是删除注释了，这样就直接解决了。\n\n因为未来会用webpack打包项目，到时候CSS会被压缩，这类问题就不会再出现，就没有继续深入研究。比如说可以在CSS文件开头加入`@charset \"utf-8\"`，但是听说这个方法IE6可能会有问题，就没再尝试。","source":"_posts/2016/2016-12-07-css-charset.md","raw":"---\nlayout: post\ntitle: \"CSS编码引发的问题\"\ndate: 2016-12-07 22:18:00 GMT+0800\ncategories: [前端]\ntags:  [css,编码]\n---\n\n今天突然接到一个测试反馈，是说项目IE8下面CSS样式不对，但其他高级浏览器都没有问题。\n\n我测试了下，因为已经升级到IE11，所以只能靠模拟IE8，发现没有任何问题，同时IE7及兼容性模式也没有问题。\n\n那么我的第一感觉，是让其清理缓存。结果无效。\n\n<!-- more -->\n\n这个很诧异，因为我用双核浏览器也测试过（比如360浏览器），兼容性肯定是不会有问题的。那么这个问题就很奇怪。\n\n最后，在周围同事找了一圈，终于找到了一个有IE8的机器。测试发现，一般情况下，第一次打开网页，不会有问题，用用也问题不大。但是只要触发以下两点，立即CSS样式几乎全部异常，但是CSS样式文件可以识别**。\n\n* 启动F12调试\n* 点击兼容性模式按钮\n\n因为可以加载CSS文件，就打算看看是怎么解析的。\n\n点击一个元素，发现仅仅加载了第一行样式，就顺藤摸瓜，查看样式表。IE的F12下，可以看到当前的CSS文件解析情况，结果发现，仅仅能解析到几行而已。我又去查看CSS文件内容，发现正好是注释的地方。\n\n在IE下打开CSS文件，结果发现，由于文件编码是`UTF-8`，导致注释的地方是乱码。\n\n这样原因就很明确了：CSS文件编码导致的，最简单的方法，就是删除注释了，这样就直接解决了。\n\n因为未来会用webpack打包项目，到时候CSS会被压缩，这类问题就不会再出现，就没有继续深入研究。比如说可以在CSS文件开头加入`@charset \"utf-8\"`，但是听说这个方法IE6可能会有问题，就没再尝试。","slug":"2016-2016-12-07-css-charset","published":1,"updated":"2020-03-02T07:16:34.634Z","comments":1,"photos":[],"link":"","_id":"cka5ik8ai000vnybgawhtjmrc","content":"<p>今天突然接到一个测试反馈，是说项目IE8下面CSS样式不对，但其他高级浏览器都没有问题。</p>\n<p>我测试了下，因为已经升级到IE11，所以只能靠模拟IE8，发现没有任何问题，同时IE7及兼容性模式也没有问题。</p>\n<p>那么我的第一感觉，是让其清理缓存。结果无效。</p>\n<a id=\"more\"></a>\n\n<p>这个很诧异，因为我用双核浏览器也测试过（比如360浏览器），兼容性肯定是不会有问题的。那么这个问题就很奇怪。</p>\n<p>最后，在周围同事找了一圈，终于找到了一个有IE8的机器。测试发现，一般情况下，第一次打开网页，不会有问题，用用也问题不大。但是只要触发以下两点，立即CSS样式几乎全部异常，但是CSS样式文件可以识别**。</p>\n<ul>\n<li>启动F12调试</li>\n<li>点击兼容性模式按钮</li>\n</ul>\n<p>因为可以加载CSS文件，就打算看看是怎么解析的。</p>\n<p>点击一个元素，发现仅仅加载了第一行样式，就顺藤摸瓜，查看样式表。IE的F12下，可以看到当前的CSS文件解析情况，结果发现，仅仅能解析到几行而已。我又去查看CSS文件内容，发现正好是注释的地方。</p>\n<p>在IE下打开CSS文件，结果发现，由于文件编码是<code>UTF-8</code>，导致注释的地方是乱码。</p>\n<p>这样原因就很明确了：CSS文件编码导致的，最简单的方法，就是删除注释了，这样就直接解决了。</p>\n<p>因为未来会用webpack打包项目，到时候CSS会被压缩，这类问题就不会再出现，就没有继续深入研究。比如说可以在CSS文件开头加入<code>@charset &quot;utf-8&quot;</code>，但是听说这个方法IE6可能会有问题，就没再尝试。</p>\n","site":{"data":{}},"excerpt":"<p>今天突然接到一个测试反馈，是说项目IE8下面CSS样式不对，但其他高级浏览器都没有问题。</p>\n<p>我测试了下，因为已经升级到IE11，所以只能靠模拟IE8，发现没有任何问题，同时IE7及兼容性模式也没有问题。</p>\n<p>那么我的第一感觉，是让其清理缓存。结果无效。</p>","more":"<p>这个很诧异，因为我用双核浏览器也测试过（比如360浏览器），兼容性肯定是不会有问题的。那么这个问题就很奇怪。</p>\n<p>最后，在周围同事找了一圈，终于找到了一个有IE8的机器。测试发现，一般情况下，第一次打开网页，不会有问题，用用也问题不大。但是只要触发以下两点，立即CSS样式几乎全部异常，但是CSS样式文件可以识别**。</p>\n<ul>\n<li>启动F12调试</li>\n<li>点击兼容性模式按钮</li>\n</ul>\n<p>因为可以加载CSS文件，就打算看看是怎么解析的。</p>\n<p>点击一个元素，发现仅仅加载了第一行样式，就顺藤摸瓜，查看样式表。IE的F12下，可以看到当前的CSS文件解析情况，结果发现，仅仅能解析到几行而已。我又去查看CSS文件内容，发现正好是注释的地方。</p>\n<p>在IE下打开CSS文件，结果发现，由于文件编码是<code>UTF-8</code>，导致注释的地方是乱码。</p>\n<p>这样原因就很明确了：CSS文件编码导致的，最简单的方法，就是删除注释了，这样就直接解决了。</p>\n<p>因为未来会用webpack打包项目，到时候CSS会被压缩，这类问题就不会再出现，就没有继续深入研究。比如说可以在CSS文件开头加入<code>@charset &quot;utf-8&quot;</code>，但是听说这个方法IE6可能会有问题，就没再尝试。</p>"},{"layout":"post","title":"网易严选 严选的都不能使用优惠券","date":"2016-12-12T21:22:00.000Z","_content":"\n今天中午在联通手机营业厅上，参加爽十二摇奖活动，中了一个网易严选的优惠券礼包。大致内含20元直减券，满99减15券等，均为全场通用。\n\n之后就去严选看了看，东西品质很好，至少拍出的照片都非常诱人。\n\n<!-- more -->\n\n正好看到有网易未央猪肉，这个可是非常有名。虽然仅仅配送4次，价格高达650元，但是我还是想尝试下。\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netnese-you7.png-wm.black)\n\n晚上回到家吃过饭，第一时间决定把优惠券用掉。全场通用299减40，非常合适。\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netease-you0.png-wm.black)\n\n结果发现未央猪肉竟然没有优惠券选项。一开始我以为是礼品卡，但是礼品卡里面什么都没有。\n\n反复查找，最终无奈，只得求助客服。\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netease-you1.png-wm.black)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netease-you2.png-wm.black)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netease-you3.png-wm.black)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netease-you4.png-wm.black)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netease-you5.png-wm.black)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netease-you6.png-wm.black)\n\n也就是说：\n\n* 未央猪肉和网易严选不是一家\n* 未央猪肉仅仅是产品挂在网易严选上销售，使用网易严选支付渠道而已\n* 优惠券只能网易严选编辑自己“严选”出来的东西，被强行加到货架上的广告产品无效\n* 未央猪肉是广告产品\n\n后来也在网上搜索了下，未央猪肉有自己的官网。但是除了几个图片文字，没有任何销售等信息。\n\n而目前未央猪肉销售渠道仅有两个：\n\n* 网易严选\n* 网易考拉海购\n\n价格都是129元体验套装，2个月4次650元套装，6个月13次1950元套装，12个月25次3350元套装。\n\n可以理解为，饥饿营销，推广手段。故意放量少测试下需求（2个月套装说是放量765份），至于优惠券不能用，我认为应该是配置错误或者故意而为之，当然我更倾向后者。\n\n但为什么优惠券没有额外说明，我认为应该是卖猪肉的还是少数，导致投诉量很小，他们应该能撑得住，也就懒得修改了。","source":"_posts/2016/2016-12-12-netease-you.md","raw":"---\nlayout: post\ntitle: \"网易严选 严选的都不能使用优惠券\"\ndate: 2016-12-12 21:22:00 GMT+0800\ncategories: [随笔]\ntags:  [未央猪肉,网易,严选,网易严选,优惠券]\n---\n\n今天中午在联通手机营业厅上，参加爽十二摇奖活动，中了一个网易严选的优惠券礼包。大致内含20元直减券，满99减15券等，均为全场通用。\n\n之后就去严选看了看，东西品质很好，至少拍出的照片都非常诱人。\n\n<!-- more -->\n\n正好看到有网易未央猪肉，这个可是非常有名。虽然仅仅配送4次，价格高达650元，但是我还是想尝试下。\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netnese-you7.png-wm.black)\n\n晚上回到家吃过饭，第一时间决定把优惠券用掉。全场通用299减40，非常合适。\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netease-you0.png-wm.black)\n\n结果发现未央猪肉竟然没有优惠券选项。一开始我以为是礼品卡，但是礼品卡里面什么都没有。\n\n反复查找，最终无奈，只得求助客服。\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netease-you1.png-wm.black)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netease-you2.png-wm.black)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netease-you3.png-wm.black)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netease-you4.png-wm.black)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netease-you5.png-wm.black)\n\n![image](https://cdn0.yukapril.com/blog/2016-12-12-netease-you6.png-wm.black)\n\n也就是说：\n\n* 未央猪肉和网易严选不是一家\n* 未央猪肉仅仅是产品挂在网易严选上销售，使用网易严选支付渠道而已\n* 优惠券只能网易严选编辑自己“严选”出来的东西，被强行加到货架上的广告产品无效\n* 未央猪肉是广告产品\n\n后来也在网上搜索了下，未央猪肉有自己的官网。但是除了几个图片文字，没有任何销售等信息。\n\n而目前未央猪肉销售渠道仅有两个：\n\n* 网易严选\n* 网易考拉海购\n\n价格都是129元体验套装，2个月4次650元套装，6个月13次1950元套装，12个月25次3350元套装。\n\n可以理解为，饥饿营销，推广手段。故意放量少测试下需求（2个月套装说是放量765份），至于优惠券不能用，我认为应该是配置错误或者故意而为之，当然我更倾向后者。\n\n但为什么优惠券没有额外说明，我认为应该是卖猪肉的还是少数，导致投诉量很小，他们应该能撑得住，也就懒得修改了。","slug":"2016-2016-12-12-netease-you","published":1,"updated":"2020-03-02T07:16:34.634Z","comments":1,"photos":[],"link":"","_id":"cka5ik8aj000ynybgvr8ese2j","content":"<p>今天中午在联通手机营业厅上，参加爽十二摇奖活动，中了一个网易严选的优惠券礼包。大致内含20元直减券，满99减15券等，均为全场通用。</p>\n<p>之后就去严选看了看，东西品质很好，至少拍出的照片都非常诱人。</p>\n<a id=\"more\"></a>\n\n<p>正好看到有网易未央猪肉，这个可是非常有名。虽然仅仅配送4次，价格高达650元，但是我还是想尝试下。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netnese-you7.png-wm.black\" alt=\"image\"></p>\n<p>晚上回到家吃过饭，第一时间决定把优惠券用掉。全场通用299减40，非常合适。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netease-you0.png-wm.black\" alt=\"image\"></p>\n<p>结果发现未央猪肉竟然没有优惠券选项。一开始我以为是礼品卡，但是礼品卡里面什么都没有。</p>\n<p>反复查找，最终无奈，只得求助客服。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netease-you1.png-wm.black\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netease-you2.png-wm.black\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netease-you3.png-wm.black\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netease-you4.png-wm.black\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netease-you5.png-wm.black\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netease-you6.png-wm.black\" alt=\"image\"></p>\n<p>也就是说：</p>\n<ul>\n<li>未央猪肉和网易严选不是一家</li>\n<li>未央猪肉仅仅是产品挂在网易严选上销售，使用网易严选支付渠道而已</li>\n<li>优惠券只能网易严选编辑自己“严选”出来的东西，被强行加到货架上的广告产品无效</li>\n<li>未央猪肉是广告产品</li>\n</ul>\n<p>后来也在网上搜索了下，未央猪肉有自己的官网。但是除了几个图片文字，没有任何销售等信息。</p>\n<p>而目前未央猪肉销售渠道仅有两个：</p>\n<ul>\n<li>网易严选</li>\n<li>网易考拉海购</li>\n</ul>\n<p>价格都是129元体验套装，2个月4次650元套装，6个月13次1950元套装，12个月25次3350元套装。</p>\n<p>可以理解为，饥饿营销，推广手段。故意放量少测试下需求（2个月套装说是放量765份），至于优惠券不能用，我认为应该是配置错误或者故意而为之，当然我更倾向后者。</p>\n<p>但为什么优惠券没有额外说明，我认为应该是卖猪肉的还是少数，导致投诉量很小，他们应该能撑得住，也就懒得修改了。</p>\n","site":{"data":{}},"excerpt":"<p>今天中午在联通手机营业厅上，参加爽十二摇奖活动，中了一个网易严选的优惠券礼包。大致内含20元直减券，满99减15券等，均为全场通用。</p>\n<p>之后就去严选看了看，东西品质很好，至少拍出的照片都非常诱人。</p>","more":"<p>正好看到有网易未央猪肉，这个可是非常有名。虽然仅仅配送4次，价格高达650元，但是我还是想尝试下。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netnese-you7.png-wm.black\" alt=\"image\"></p>\n<p>晚上回到家吃过饭，第一时间决定把优惠券用掉。全场通用299减40，非常合适。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netease-you0.png-wm.black\" alt=\"image\"></p>\n<p>结果发现未央猪肉竟然没有优惠券选项。一开始我以为是礼品卡，但是礼品卡里面什么都没有。</p>\n<p>反复查找，最终无奈，只得求助客服。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netease-you1.png-wm.black\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netease-you2.png-wm.black\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netease-you3.png-wm.black\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netease-you4.png-wm.black\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netease-you5.png-wm.black\" alt=\"image\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2016-12-12-netease-you6.png-wm.black\" alt=\"image\"></p>\n<p>也就是说：</p>\n<ul>\n<li>未央猪肉和网易严选不是一家</li>\n<li>未央猪肉仅仅是产品挂在网易严选上销售，使用网易严选支付渠道而已</li>\n<li>优惠券只能网易严选编辑自己“严选”出来的东西，被强行加到货架上的广告产品无效</li>\n<li>未央猪肉是广告产品</li>\n</ul>\n<p>后来也在网上搜索了下，未央猪肉有自己的官网。但是除了几个图片文字，没有任何销售等信息。</p>\n<p>而目前未央猪肉销售渠道仅有两个：</p>\n<ul>\n<li>网易严选</li>\n<li>网易考拉海购</li>\n</ul>\n<p>价格都是129元体验套装，2个月4次650元套装，6个月13次1950元套装，12个月25次3350元套装。</p>\n<p>可以理解为，饥饿营销，推广手段。故意放量少测试下需求（2个月套装说是放量765份），至于优惠券不能用，我认为应该是配置错误或者故意而为之，当然我更倾向后者。</p>\n<p>但为什么优惠券没有额外说明，我认为应该是卖猪肉的还是少数，导致投诉量很小，他们应该能撑得住，也就懒得修改了。</p>"},{"layout":"post","title":"入手IKBC F108时光机键盘","date":"2017-01-04T20:54:00.000Z","_content":"\nIKBC入手一周了，一直太忙，不过也正好让我体验充足。来，上IKBC入手记。\n\n首先这个键盘确实不贵，才500多一点，IKBC整体都不是很贵，但是很有特色。比如本次我入手的F108，就因为它有计时功能，我觉得可能会有些实用，决定入手看看。\n\n<!-- more -->\n\n# IKBC的系列介绍\n\n我在挑选的时候，也是有些迷糊，因为虽然系列不多，但是却很接近，有点迷茫。\n\n根据IKBC的[官网](http://www.ikbc.com.cn/)，我们可以得知有三个系列：F系列，C系列，G系列。这三个系列，都是104/108或者87键盘。\n还有poker系列，是60键盘。\n\n#### 先说标准的三大系列\n\nF是新出的系列，主打灯光，有F108和F87，注意是108按键，没有104按键的。灯光主要是除了常规的GH60客制化系列的常亮、闪动、涟漪、单点点亮等，额外支持：自定义9组常亮灯光区和灯光倒计时。在细节的，我下面再说。\n\nC和G系列，都是有104键盘和87键盘。\n\nC系列说是2015年发明的，我没怎么看出来怎么好。反倒是2014年的G系列我觉得还可能有些特色。\n\nC系列和G系列键帽均是PBT，但是C系列键帽厚实，G系列键帽可以透光（F时光机系列也是透光的）。同时两个系列特殊功能按键稍有不同。\n\nC系列默认没有灯（可以加灯，换成透光的G系列键帽），G系列默认带灯。\n\nC系列功能：<kbd>Win</kbd>键锁定，全键盘无冲切换，音量控制，恢复出厂设置。\n\nG系列功能：音量控制，音乐播放控制，切换<kbd>ctrl</kbd>和<kbd>CapsLock</kbd>位置，鼠标右键按钮。\n\nC系列只能选择红黑茶青奶轴，G系列可选择更多的轴（红黑茶青奶绿，多一个绿轴）。\n\n> 据传，C系列加灯之后，可以用<kbd>Fn</kbd> + <kbd>1</kbd>~<kbd>8</kbd>控制灯光。\n\n#### 捎带手说下poker\n\n这个真的要成谜了...玩笑~\n\n不过poker系列确实难买。目前poker2，poker3已经全部断货很久了。\n\npoker分为poker1，poker2，poker3，poker升级版。共计4代产品。目前能买到的新品是poker升级版，或许你运气极好的情况下，能碰上poker3。\n\npoker升级版和poker3有红黑茶青四种轴。都需要自己加灯。poker升级版说是可以编程和固件升级，poker3因为带有额外三层，我估计编程啥的也问题不大。\n\npoker系列键盘外观完全一致，仅仅在特殊按键上有区别。\n\n比如poker3，是可以切换Layer2/Layer3/Layer4的，同时鼠标右键是<kbd>Fn</kbd>+<kbd>z</kbd>。但是<kbd>Insert</kbd> <kbd>Del</kbd> <kbd>PU</kbd> <kbd>PD</kbd> 等键位我认为不合理。键盘内建Qwery/Dvorak等键盘布局。\n\n# 说说F108\n\n![image](https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-1.jpg-wm.black)\n\nIKBC白色红轴（冰蓝灯）\n\n买回来，包装盒还算可以，谈不上赛睿/雷蛇的精致、樱桃的硬朗，但是人家便宜啊，500多块红轴还带灯光特效啥的。\n\n![image](https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-2.jpg-wm.black)\n\n打开后的效果，键盘有薄塑料壳盖住。我从来是不收拾包装盒就拍照的~来得时候就是这样子，我就这样子拍...\n\n![image](https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-3.jpg-wm.black)\n\n附送的物品：说明书（介绍怎么按快捷键，还是很重要的），刷子，10颗键帽（红蓝各5颗，分别是R1四颗，R4一颗），拔键器，捆绑带。\n\n要说明的是，键盘线上已经带有一个捆绑带了，这个是额外附送。而那2组R1R4键帽，可以安装在<kbd>Esc</kbd>和方向键上，相当于任选一组配色。至于手感啥的，呵呵。白送的东西嘛。\n\n![image](https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-4.jpg-wm.black)\n\n点亮的效果，比我预想的好。冰蓝灯很明亮，白天也非常清楚，这就让灯光倒计时功能发挥作用。一开始我有点犹豫，是选择黑色款还是白色款，主要是考虑倒计时一定要能看清楚。现在确信了，白色一定没问题的。\n\n这里要说明的是，默认开启，键盘默认是全灯光模式，这个不能修改。\n\n还好，全灯光相当于70~80%的亮度。默认仅在倒计时的设置过程中，可以启动100%灯光。\n\n不过，灯光亮度可以设置。\n\n说道灯光，也就是说它的最大亮点。它可以设置：\n\n* <kbd>Fn</kbd> + <kbd>1</kbd>~<kbd>9</kbd> 九组自定义灯光区域，比如我设置<kbd>Fn</kbd> + <kbd>1</kbd> 是字母键盘区域有一个桃心区域亮。\n* <kbd>Fn</kbd> + 上下左右 调整灯光速度和强度\n* <kbd>ScrLk</kbd> 设置倒计时，使用<kbd>F1</kbd>一行按键表示x10分钟，最多120分钟，使用字母上方数字表示1-9分钟。这样最多设置129分钟。按下<kbd>ScrLk</kbd>后，所有灯管熄灭，只有<kbd>F1</kbd>~<kbd>F12</kbd>和数字键亮灯，同时<kbd>Enter</kbd>和<kbd>END</kbd>表示完成和取消。选中的时间，使用最亮灯光提示。结束前一分钟，整个字母键盘区（不算空格共计60个按键）开始倒计时，一个一个灯熄灭。全部结束后，灯光闪烁提示。\n* <kbd>Pause</kbd> 另外一种倒计时，和上一个差不多，就是只能设置10分钟，只有数字区域可用。而且最终闪烁效果不同。我基本上没用过这个提醒。因为实在时间设置太短了。\n\n**这里要说一个bug**\n\n键盘的<kbd>ScrLk</kbd> <kbd>Pause</kbd>是正刻，理论上直接按应该是这两个默认按键，但是其实是特殊功能了，而要想使用默认的按键功能，需要先按下<kbd>Fn</kbd>，相当于侧刻。这个印刷算是bug。\n\n\n![image](https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-6.jpg-wm.black)\n\n键盘的背面。中间那个名牌卡片，用了1周，已经磨下来2次了...我只能把脚垫抬起来了。脚垫是两段式的。\n\n走线，可以三个方向，算是方便。同样，也已经从线槽掉出来1次了...\n\n对了，这个键盘很沉，比我的樱桃 G80-3000 还要沉不少。\n\n# 此外F108的功能\n\n除去上面说到的，F108还有的功能：\n\n* <kbd>Fn</kbd> + <kbd>F1</kbd>~<kbd>F9</kbd> 配置连键速度等（就是按住不撒手，重复的速度）\n* <kbd>Fn</kbd> + <kbd>F12</kbd> 切换8种灯光。好像是全开灯，呼吸灯，点亮（按那个那个亮），按一个一行亮，按一个一列亮，全键盘没规律瞎特么亮，水平波浪瞎特么亮，计时亮。\n* <kbd>Fn</kbd> + <kbd>0</kbd> 关灯\n* <kbd>Fn</kbd> + <kbd>PrtSc</kbd> 切换键盘布局。共四种：标准Qwery布局，换键Qwery布局（<kbd>win</kbd>和<kbd>Alt</kbd>换位置，其实就是是Mac键位啦），德沃拉克布局，还有一种不知道的布局。\n\n灯光上，我觉得除了个别时候需要全开灯，和当做计时器的最后一种有实际用途，其他就是呼吸灯和点亮比较好。剩下全是辣鸡！\n\n# 使用感受\n\n说实在的，这个说起来真的很难。\n\n单说键盘做工，对得起500块的价格，键帽也不错。白色PBT效果，也比我自己组装GH60用的PBT要好，灯光更不用提。\n\n但是论手感上，竟然没有组装的GH60普通PBT手感好，我也没发现问题...这才是问题所在。可能还要多用用，慢慢感受下。\n\n不过初步感觉问题出在按键回弹上和按键克数稍微少了一点。\n\n灯光上，虽然看很多人说是没用，我觉得倒还行，比如9点半打完水，晾好，设置15分钟后吃药。虽然之后还会拖延一点时间，但是确实能起到提醒功能。灯光算是仁者见仁智者见智吧。\n\n最后，上一张三键盘图，正巧樱桃和GH60全在公司，直接一张拍！\n\n![image](https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-5.jpg-wm.black)","source":"_posts/2017/2017-01-04-ikbc-f108.md","raw":"---\nlayout: post\ntitle: \"入手IKBC F108时光机键盘\"\ndate: 2017-01-04 20:54:00 GMT+0800\ncategories: [外设]\ntags:  [机械键盘,键盘,ikbc]\n---\n\nIKBC入手一周了，一直太忙，不过也正好让我体验充足。来，上IKBC入手记。\n\n首先这个键盘确实不贵，才500多一点，IKBC整体都不是很贵，但是很有特色。比如本次我入手的F108，就因为它有计时功能，我觉得可能会有些实用，决定入手看看。\n\n<!-- more -->\n\n# IKBC的系列介绍\n\n我在挑选的时候，也是有些迷糊，因为虽然系列不多，但是却很接近，有点迷茫。\n\n根据IKBC的[官网](http://www.ikbc.com.cn/)，我们可以得知有三个系列：F系列，C系列，G系列。这三个系列，都是104/108或者87键盘。\n还有poker系列，是60键盘。\n\n#### 先说标准的三大系列\n\nF是新出的系列，主打灯光，有F108和F87，注意是108按键，没有104按键的。灯光主要是除了常规的GH60客制化系列的常亮、闪动、涟漪、单点点亮等，额外支持：自定义9组常亮灯光区和灯光倒计时。在细节的，我下面再说。\n\nC和G系列，都是有104键盘和87键盘。\n\nC系列说是2015年发明的，我没怎么看出来怎么好。反倒是2014年的G系列我觉得还可能有些特色。\n\nC系列和G系列键帽均是PBT，但是C系列键帽厚实，G系列键帽可以透光（F时光机系列也是透光的）。同时两个系列特殊功能按键稍有不同。\n\nC系列默认没有灯（可以加灯，换成透光的G系列键帽），G系列默认带灯。\n\nC系列功能：<kbd>Win</kbd>键锁定，全键盘无冲切换，音量控制，恢复出厂设置。\n\nG系列功能：音量控制，音乐播放控制，切换<kbd>ctrl</kbd>和<kbd>CapsLock</kbd>位置，鼠标右键按钮。\n\nC系列只能选择红黑茶青奶轴，G系列可选择更多的轴（红黑茶青奶绿，多一个绿轴）。\n\n> 据传，C系列加灯之后，可以用<kbd>Fn</kbd> + <kbd>1</kbd>~<kbd>8</kbd>控制灯光。\n\n#### 捎带手说下poker\n\n这个真的要成谜了...玩笑~\n\n不过poker系列确实难买。目前poker2，poker3已经全部断货很久了。\n\npoker分为poker1，poker2，poker3，poker升级版。共计4代产品。目前能买到的新品是poker升级版，或许你运气极好的情况下，能碰上poker3。\n\npoker升级版和poker3有红黑茶青四种轴。都需要自己加灯。poker升级版说是可以编程和固件升级，poker3因为带有额外三层，我估计编程啥的也问题不大。\n\npoker系列键盘外观完全一致，仅仅在特殊按键上有区别。\n\n比如poker3，是可以切换Layer2/Layer3/Layer4的，同时鼠标右键是<kbd>Fn</kbd>+<kbd>z</kbd>。但是<kbd>Insert</kbd> <kbd>Del</kbd> <kbd>PU</kbd> <kbd>PD</kbd> 等键位我认为不合理。键盘内建Qwery/Dvorak等键盘布局。\n\n# 说说F108\n\n![image](https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-1.jpg-wm.black)\n\nIKBC白色红轴（冰蓝灯）\n\n买回来，包装盒还算可以，谈不上赛睿/雷蛇的精致、樱桃的硬朗，但是人家便宜啊，500多块红轴还带灯光特效啥的。\n\n![image](https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-2.jpg-wm.black)\n\n打开后的效果，键盘有薄塑料壳盖住。我从来是不收拾包装盒就拍照的~来得时候就是这样子，我就这样子拍...\n\n![image](https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-3.jpg-wm.black)\n\n附送的物品：说明书（介绍怎么按快捷键，还是很重要的），刷子，10颗键帽（红蓝各5颗，分别是R1四颗，R4一颗），拔键器，捆绑带。\n\n要说明的是，键盘线上已经带有一个捆绑带了，这个是额外附送。而那2组R1R4键帽，可以安装在<kbd>Esc</kbd>和方向键上，相当于任选一组配色。至于手感啥的，呵呵。白送的东西嘛。\n\n![image](https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-4.jpg-wm.black)\n\n点亮的效果，比我预想的好。冰蓝灯很明亮，白天也非常清楚，这就让灯光倒计时功能发挥作用。一开始我有点犹豫，是选择黑色款还是白色款，主要是考虑倒计时一定要能看清楚。现在确信了，白色一定没问题的。\n\n这里要说明的是，默认开启，键盘默认是全灯光模式，这个不能修改。\n\n还好，全灯光相当于70~80%的亮度。默认仅在倒计时的设置过程中，可以启动100%灯光。\n\n不过，灯光亮度可以设置。\n\n说道灯光，也就是说它的最大亮点。它可以设置：\n\n* <kbd>Fn</kbd> + <kbd>1</kbd>~<kbd>9</kbd> 九组自定义灯光区域，比如我设置<kbd>Fn</kbd> + <kbd>1</kbd> 是字母键盘区域有一个桃心区域亮。\n* <kbd>Fn</kbd> + 上下左右 调整灯光速度和强度\n* <kbd>ScrLk</kbd> 设置倒计时，使用<kbd>F1</kbd>一行按键表示x10分钟，最多120分钟，使用字母上方数字表示1-9分钟。这样最多设置129分钟。按下<kbd>ScrLk</kbd>后，所有灯管熄灭，只有<kbd>F1</kbd>~<kbd>F12</kbd>和数字键亮灯，同时<kbd>Enter</kbd>和<kbd>END</kbd>表示完成和取消。选中的时间，使用最亮灯光提示。结束前一分钟，整个字母键盘区（不算空格共计60个按键）开始倒计时，一个一个灯熄灭。全部结束后，灯光闪烁提示。\n* <kbd>Pause</kbd> 另外一种倒计时，和上一个差不多，就是只能设置10分钟，只有数字区域可用。而且最终闪烁效果不同。我基本上没用过这个提醒。因为实在时间设置太短了。\n\n**这里要说一个bug**\n\n键盘的<kbd>ScrLk</kbd> <kbd>Pause</kbd>是正刻，理论上直接按应该是这两个默认按键，但是其实是特殊功能了，而要想使用默认的按键功能，需要先按下<kbd>Fn</kbd>，相当于侧刻。这个印刷算是bug。\n\n\n![image](https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-6.jpg-wm.black)\n\n键盘的背面。中间那个名牌卡片，用了1周，已经磨下来2次了...我只能把脚垫抬起来了。脚垫是两段式的。\n\n走线，可以三个方向，算是方便。同样，也已经从线槽掉出来1次了...\n\n对了，这个键盘很沉，比我的樱桃 G80-3000 还要沉不少。\n\n# 此外F108的功能\n\n除去上面说到的，F108还有的功能：\n\n* <kbd>Fn</kbd> + <kbd>F1</kbd>~<kbd>F9</kbd> 配置连键速度等（就是按住不撒手，重复的速度）\n* <kbd>Fn</kbd> + <kbd>F12</kbd> 切换8种灯光。好像是全开灯，呼吸灯，点亮（按那个那个亮），按一个一行亮，按一个一列亮，全键盘没规律瞎特么亮，水平波浪瞎特么亮，计时亮。\n* <kbd>Fn</kbd> + <kbd>0</kbd> 关灯\n* <kbd>Fn</kbd> + <kbd>PrtSc</kbd> 切换键盘布局。共四种：标准Qwery布局，换键Qwery布局（<kbd>win</kbd>和<kbd>Alt</kbd>换位置，其实就是是Mac键位啦），德沃拉克布局，还有一种不知道的布局。\n\n灯光上，我觉得除了个别时候需要全开灯，和当做计时器的最后一种有实际用途，其他就是呼吸灯和点亮比较好。剩下全是辣鸡！\n\n# 使用感受\n\n说实在的，这个说起来真的很难。\n\n单说键盘做工，对得起500块的价格，键帽也不错。白色PBT效果，也比我自己组装GH60用的PBT要好，灯光更不用提。\n\n但是论手感上，竟然没有组装的GH60普通PBT手感好，我也没发现问题...这才是问题所在。可能还要多用用，慢慢感受下。\n\n不过初步感觉问题出在按键回弹上和按键克数稍微少了一点。\n\n灯光上，虽然看很多人说是没用，我觉得倒还行，比如9点半打完水，晾好，设置15分钟后吃药。虽然之后还会拖延一点时间，但是确实能起到提醒功能。灯光算是仁者见仁智者见智吧。\n\n最后，上一张三键盘图，正巧樱桃和GH60全在公司，直接一张拍！\n\n![image](https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-5.jpg-wm.black)","slug":"2017-2017-01-04-ikbc-f108","published":1,"updated":"2020-03-02T07:16:34.634Z","comments":1,"photos":[],"link":"","_id":"cka5ik8al0011nybgpxgfr6o2","content":"<p>IKBC入手一周了，一直太忙，不过也正好让我体验充足。来，上IKBC入手记。</p>\n<p>首先这个键盘确实不贵，才500多一点，IKBC整体都不是很贵，但是很有特色。比如本次我入手的F108，就因为它有计时功能，我觉得可能会有些实用，决定入手看看。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"IKBC的系列介绍\"><a href=\"#IKBC的系列介绍\" class=\"headerlink\" title=\"IKBC的系列介绍\"></a>IKBC的系列介绍</h1><p>我在挑选的时候，也是有些迷糊，因为虽然系列不多，但是却很接近，有点迷茫。</p>\n<p>根据IKBC的<a href=\"http://www.ikbc.com.cn/\" target=\"_blank\" rel=\"noopener\">官网</a>，我们可以得知有三个系列：F系列，C系列，G系列。这三个系列，都是104/108或者87键盘。<br>还有poker系列，是60键盘。</p>\n<h4 id=\"先说标准的三大系列\"><a href=\"#先说标准的三大系列\" class=\"headerlink\" title=\"先说标准的三大系列\"></a>先说标准的三大系列</h4><p>F是新出的系列，主打灯光，有F108和F87，注意是108按键，没有104按键的。灯光主要是除了常规的GH60客制化系列的常亮、闪动、涟漪、单点点亮等，额外支持：自定义9组常亮灯光区和灯光倒计时。在细节的，我下面再说。</p>\n<p>C和G系列，都是有104键盘和87键盘。</p>\n<p>C系列说是2015年发明的，我没怎么看出来怎么好。反倒是2014年的G系列我觉得还可能有些特色。</p>\n<p>C系列和G系列键帽均是PBT，但是C系列键帽厚实，G系列键帽可以透光（F时光机系列也是透光的）。同时两个系列特殊功能按键稍有不同。</p>\n<p>C系列默认没有灯（可以加灯，换成透光的G系列键帽），G系列默认带灯。</p>\n<p>C系列功能：<kbd>Win</kbd>键锁定，全键盘无冲切换，音量控制，恢复出厂设置。</p>\n<p>G系列功能：音量控制，音乐播放控制，切换<kbd>ctrl</kbd>和<kbd>CapsLock</kbd>位置，鼠标右键按钮。</p>\n<p>C系列只能选择红黑茶青奶轴，G系列可选择更多的轴（红黑茶青奶绿，多一个绿轴）。</p>\n<blockquote>\n<p>据传，C系列加灯之后，可以用<kbd>Fn</kbd> + <kbd>1</kbd>~<kbd>8</kbd>控制灯光。</p>\n</blockquote>\n<h4 id=\"捎带手说下poker\"><a href=\"#捎带手说下poker\" class=\"headerlink\" title=\"捎带手说下poker\"></a>捎带手说下poker</h4><p>这个真的要成谜了…玩笑~</p>\n<p>不过poker系列确实难买。目前poker2，poker3已经全部断货很久了。</p>\n<p>poker分为poker1，poker2，poker3，poker升级版。共计4代产品。目前能买到的新品是poker升级版，或许你运气极好的情况下，能碰上poker3。</p>\n<p>poker升级版和poker3有红黑茶青四种轴。都需要自己加灯。poker升级版说是可以编程和固件升级，poker3因为带有额外三层，我估计编程啥的也问题不大。</p>\n<p>poker系列键盘外观完全一致，仅仅在特殊按键上有区别。</p>\n<p>比如poker3，是可以切换Layer2/Layer3/Layer4的，同时鼠标右键是<kbd>Fn</kbd>+<kbd>z</kbd>。但是<kbd>Insert</kbd> <kbd>Del</kbd> <kbd>PU</kbd> <kbd>PD</kbd> 等键位我认为不合理。键盘内建Qwery/Dvorak等键盘布局。</p>\n<h1 id=\"说说F108\"><a href=\"#说说F108\" class=\"headerlink\" title=\"说说F108\"></a>说说F108</h1><p><img src=\"https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-1.jpg-wm.black\" alt=\"image\"></p>\n<p>IKBC白色红轴（冰蓝灯）</p>\n<p>买回来，包装盒还算可以，谈不上赛睿/雷蛇的精致、樱桃的硬朗，但是人家便宜啊，500多块红轴还带灯光特效啥的。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-2.jpg-wm.black\" alt=\"image\"></p>\n<p>打开后的效果，键盘有薄塑料壳盖住。我从来是不收拾包装盒就拍照的~来得时候就是这样子，我就这样子拍…</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-3.jpg-wm.black\" alt=\"image\"></p>\n<p>附送的物品：说明书（介绍怎么按快捷键，还是很重要的），刷子，10颗键帽（红蓝各5颗，分别是R1四颗，R4一颗），拔键器，捆绑带。</p>\n<p>要说明的是，键盘线上已经带有一个捆绑带了，这个是额外附送。而那2组R1R4键帽，可以安装在<kbd>Esc</kbd>和方向键上，相当于任选一组配色。至于手感啥的，呵呵。白送的东西嘛。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-4.jpg-wm.black\" alt=\"image\"></p>\n<p>点亮的效果，比我预想的好。冰蓝灯很明亮，白天也非常清楚，这就让灯光倒计时功能发挥作用。一开始我有点犹豫，是选择黑色款还是白色款，主要是考虑倒计时一定要能看清楚。现在确信了，白色一定没问题的。</p>\n<p>这里要说明的是，默认开启，键盘默认是全灯光模式，这个不能修改。</p>\n<p>还好，全灯光相当于70~80%的亮度。默认仅在倒计时的设置过程中，可以启动100%灯光。</p>\n<p>不过，灯光亮度可以设置。</p>\n<p>说道灯光，也就是说它的最大亮点。它可以设置：</p>\n<ul>\n<li><kbd>Fn</kbd> + <kbd>1</kbd>~<kbd>9</kbd> 九组自定义灯光区域，比如我设置<kbd>Fn</kbd> + <kbd>1</kbd> 是字母键盘区域有一个桃心区域亮。</li>\n<li><kbd>Fn</kbd> + 上下左右 调整灯光速度和强度</li>\n<li><kbd>ScrLk</kbd> 设置倒计时，使用<kbd>F1</kbd>一行按键表示x10分钟，最多120分钟，使用字母上方数字表示1-9分钟。这样最多设置129分钟。按下<kbd>ScrLk</kbd>后，所有灯管熄灭，只有<kbd>F1</kbd>~<kbd>F12</kbd>和数字键亮灯，同时<kbd>Enter</kbd>和<kbd>END</kbd>表示完成和取消。选中的时间，使用最亮灯光提示。结束前一分钟，整个字母键盘区（不算空格共计60个按键）开始倒计时，一个一个灯熄灭。全部结束后，灯光闪烁提示。</li>\n<li><kbd>Pause</kbd> 另外一种倒计时，和上一个差不多，就是只能设置10分钟，只有数字区域可用。而且最终闪烁效果不同。我基本上没用过这个提醒。因为实在时间设置太短了。</li>\n</ul>\n<p><strong>这里要说一个bug</strong></p>\n<p>键盘的<kbd>ScrLk</kbd> <kbd>Pause</kbd>是正刻，理论上直接按应该是这两个默认按键，但是其实是特殊功能了，而要想使用默认的按键功能，需要先按下<kbd>Fn</kbd>，相当于侧刻。这个印刷算是bug。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-6.jpg-wm.black\" alt=\"image\"></p>\n<p>键盘的背面。中间那个名牌卡片，用了1周，已经磨下来2次了…我只能把脚垫抬起来了。脚垫是两段式的。</p>\n<p>走线，可以三个方向，算是方便。同样，也已经从线槽掉出来1次了…</p>\n<p>对了，这个键盘很沉，比我的樱桃 G80-3000 还要沉不少。</p>\n<h1 id=\"此外F108的功能\"><a href=\"#此外F108的功能\" class=\"headerlink\" title=\"此外F108的功能\"></a>此外F108的功能</h1><p>除去上面说到的，F108还有的功能：</p>\n<ul>\n<li><kbd>Fn</kbd> + <kbd>F1</kbd>~<kbd>F9</kbd> 配置连键速度等（就是按住不撒手，重复的速度）</li>\n<li><kbd>Fn</kbd> + <kbd>F12</kbd> 切换8种灯光。好像是全开灯，呼吸灯，点亮（按那个那个亮），按一个一行亮，按一个一列亮，全键盘没规律瞎特么亮，水平波浪瞎特么亮，计时亮。</li>\n<li><kbd>Fn</kbd> + <kbd>0</kbd> 关灯</li>\n<li><kbd>Fn</kbd> + <kbd>PrtSc</kbd> 切换键盘布局。共四种：标准Qwery布局，换键Qwery布局（<kbd>win</kbd>和<kbd>Alt</kbd>换位置，其实就是是Mac键位啦），德沃拉克布局，还有一种不知道的布局。</li>\n</ul>\n<p>灯光上，我觉得除了个别时候需要全开灯，和当做计时器的最后一种有实际用途，其他就是呼吸灯和点亮比较好。剩下全是辣鸡！</p>\n<h1 id=\"使用感受\"><a href=\"#使用感受\" class=\"headerlink\" title=\"使用感受\"></a>使用感受</h1><p>说实在的，这个说起来真的很难。</p>\n<p>单说键盘做工，对得起500块的价格，键帽也不错。白色PBT效果，也比我自己组装GH60用的PBT要好，灯光更不用提。</p>\n<p>但是论手感上，竟然没有组装的GH60普通PBT手感好，我也没发现问题…这才是问题所在。可能还要多用用，慢慢感受下。</p>\n<p>不过初步感觉问题出在按键回弹上和按键克数稍微少了一点。</p>\n<p>灯光上，虽然看很多人说是没用，我觉得倒还行，比如9点半打完水，晾好，设置15分钟后吃药。虽然之后还会拖延一点时间，但是确实能起到提醒功能。灯光算是仁者见仁智者见智吧。</p>\n<p>最后，上一张三键盘图，正巧樱桃和GH60全在公司，直接一张拍！</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-5.jpg-wm.black\" alt=\"image\"></p>\n","site":{"data":{}},"excerpt":"<p>IKBC入手一周了，一直太忙，不过也正好让我体验充足。来，上IKBC入手记。</p>\n<p>首先这个键盘确实不贵，才500多一点，IKBC整体都不是很贵，但是很有特色。比如本次我入手的F108，就因为它有计时功能，我觉得可能会有些实用，决定入手看看。</p>","more":"<h1 id=\"IKBC的系列介绍\"><a href=\"#IKBC的系列介绍\" class=\"headerlink\" title=\"IKBC的系列介绍\"></a>IKBC的系列介绍</h1><p>我在挑选的时候，也是有些迷糊，因为虽然系列不多，但是却很接近，有点迷茫。</p>\n<p>根据IKBC的<a href=\"http://www.ikbc.com.cn/\" target=\"_blank\" rel=\"noopener\">官网</a>，我们可以得知有三个系列：F系列，C系列，G系列。这三个系列，都是104/108或者87键盘。<br>还有poker系列，是60键盘。</p>\n<h4 id=\"先说标准的三大系列\"><a href=\"#先说标准的三大系列\" class=\"headerlink\" title=\"先说标准的三大系列\"></a>先说标准的三大系列</h4><p>F是新出的系列，主打灯光，有F108和F87，注意是108按键，没有104按键的。灯光主要是除了常规的GH60客制化系列的常亮、闪动、涟漪、单点点亮等，额外支持：自定义9组常亮灯光区和灯光倒计时。在细节的，我下面再说。</p>\n<p>C和G系列，都是有104键盘和87键盘。</p>\n<p>C系列说是2015年发明的，我没怎么看出来怎么好。反倒是2014年的G系列我觉得还可能有些特色。</p>\n<p>C系列和G系列键帽均是PBT，但是C系列键帽厚实，G系列键帽可以透光（F时光机系列也是透光的）。同时两个系列特殊功能按键稍有不同。</p>\n<p>C系列默认没有灯（可以加灯，换成透光的G系列键帽），G系列默认带灯。</p>\n<p>C系列功能：<kbd>Win</kbd>键锁定，全键盘无冲切换，音量控制，恢复出厂设置。</p>\n<p>G系列功能：音量控制，音乐播放控制，切换<kbd>ctrl</kbd>和<kbd>CapsLock</kbd>位置，鼠标右键按钮。</p>\n<p>C系列只能选择红黑茶青奶轴，G系列可选择更多的轴（红黑茶青奶绿，多一个绿轴）。</p>\n<blockquote>\n<p>据传，C系列加灯之后，可以用<kbd>Fn</kbd> + <kbd>1</kbd>~<kbd>8</kbd>控制灯光。</p>\n</blockquote>\n<h4 id=\"捎带手说下poker\"><a href=\"#捎带手说下poker\" class=\"headerlink\" title=\"捎带手说下poker\"></a>捎带手说下poker</h4><p>这个真的要成谜了…玩笑~</p>\n<p>不过poker系列确实难买。目前poker2，poker3已经全部断货很久了。</p>\n<p>poker分为poker1，poker2，poker3，poker升级版。共计4代产品。目前能买到的新品是poker升级版，或许你运气极好的情况下，能碰上poker3。</p>\n<p>poker升级版和poker3有红黑茶青四种轴。都需要自己加灯。poker升级版说是可以编程和固件升级，poker3因为带有额外三层，我估计编程啥的也问题不大。</p>\n<p>poker系列键盘外观完全一致，仅仅在特殊按键上有区别。</p>\n<p>比如poker3，是可以切换Layer2/Layer3/Layer4的，同时鼠标右键是<kbd>Fn</kbd>+<kbd>z</kbd>。但是<kbd>Insert</kbd> <kbd>Del</kbd> <kbd>PU</kbd> <kbd>PD</kbd> 等键位我认为不合理。键盘内建Qwery/Dvorak等键盘布局。</p>\n<h1 id=\"说说F108\"><a href=\"#说说F108\" class=\"headerlink\" title=\"说说F108\"></a>说说F108</h1><p><img src=\"https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-1.jpg-wm.black\" alt=\"image\"></p>\n<p>IKBC白色红轴（冰蓝灯）</p>\n<p>买回来，包装盒还算可以，谈不上赛睿/雷蛇的精致、樱桃的硬朗，但是人家便宜啊，500多块红轴还带灯光特效啥的。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-2.jpg-wm.black\" alt=\"image\"></p>\n<p>打开后的效果，键盘有薄塑料壳盖住。我从来是不收拾包装盒就拍照的~来得时候就是这样子，我就这样子拍…</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-3.jpg-wm.black\" alt=\"image\"></p>\n<p>附送的物品：说明书（介绍怎么按快捷键，还是很重要的），刷子，10颗键帽（红蓝各5颗，分别是R1四颗，R4一颗），拔键器，捆绑带。</p>\n<p>要说明的是，键盘线上已经带有一个捆绑带了，这个是额外附送。而那2组R1R4键帽，可以安装在<kbd>Esc</kbd>和方向键上，相当于任选一组配色。至于手感啥的，呵呵。白送的东西嘛。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-4.jpg-wm.black\" alt=\"image\"></p>\n<p>点亮的效果，比我预想的好。冰蓝灯很明亮，白天也非常清楚，这就让灯光倒计时功能发挥作用。一开始我有点犹豫，是选择黑色款还是白色款，主要是考虑倒计时一定要能看清楚。现在确信了，白色一定没问题的。</p>\n<p>这里要说明的是，默认开启，键盘默认是全灯光模式，这个不能修改。</p>\n<p>还好，全灯光相当于70~80%的亮度。默认仅在倒计时的设置过程中，可以启动100%灯光。</p>\n<p>不过，灯光亮度可以设置。</p>\n<p>说道灯光，也就是说它的最大亮点。它可以设置：</p>\n<ul>\n<li><kbd>Fn</kbd> + <kbd>1</kbd>~<kbd>9</kbd> 九组自定义灯光区域，比如我设置<kbd>Fn</kbd> + <kbd>1</kbd> 是字母键盘区域有一个桃心区域亮。</li>\n<li><kbd>Fn</kbd> + 上下左右 调整灯光速度和强度</li>\n<li><kbd>ScrLk</kbd> 设置倒计时，使用<kbd>F1</kbd>一行按键表示x10分钟，最多120分钟，使用字母上方数字表示1-9分钟。这样最多设置129分钟。按下<kbd>ScrLk</kbd>后，所有灯管熄灭，只有<kbd>F1</kbd>~<kbd>F12</kbd>和数字键亮灯，同时<kbd>Enter</kbd>和<kbd>END</kbd>表示完成和取消。选中的时间，使用最亮灯光提示。结束前一分钟，整个字母键盘区（不算空格共计60个按键）开始倒计时，一个一个灯熄灭。全部结束后，灯光闪烁提示。</li>\n<li><kbd>Pause</kbd> 另外一种倒计时，和上一个差不多，就是只能设置10分钟，只有数字区域可用。而且最终闪烁效果不同。我基本上没用过这个提醒。因为实在时间设置太短了。</li>\n</ul>\n<p><strong>这里要说一个bug</strong></p>\n<p>键盘的<kbd>ScrLk</kbd> <kbd>Pause</kbd>是正刻，理论上直接按应该是这两个默认按键，但是其实是特殊功能了，而要想使用默认的按键功能，需要先按下<kbd>Fn</kbd>，相当于侧刻。这个印刷算是bug。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-6.jpg-wm.black\" alt=\"image\"></p>\n<p>键盘的背面。中间那个名牌卡片，用了1周，已经磨下来2次了…我只能把脚垫抬起来了。脚垫是两段式的。</p>\n<p>走线，可以三个方向，算是方便。同样，也已经从线槽掉出来1次了…</p>\n<p>对了，这个键盘很沉，比我的樱桃 G80-3000 还要沉不少。</p>\n<h1 id=\"此外F108的功能\"><a href=\"#此外F108的功能\" class=\"headerlink\" title=\"此外F108的功能\"></a>此外F108的功能</h1><p>除去上面说到的，F108还有的功能：</p>\n<ul>\n<li><kbd>Fn</kbd> + <kbd>F1</kbd>~<kbd>F9</kbd> 配置连键速度等（就是按住不撒手，重复的速度）</li>\n<li><kbd>Fn</kbd> + <kbd>F12</kbd> 切换8种灯光。好像是全开灯，呼吸灯，点亮（按那个那个亮），按一个一行亮，按一个一列亮，全键盘没规律瞎特么亮，水平波浪瞎特么亮，计时亮。</li>\n<li><kbd>Fn</kbd> + <kbd>0</kbd> 关灯</li>\n<li><kbd>Fn</kbd> + <kbd>PrtSc</kbd> 切换键盘布局。共四种：标准Qwery布局，换键Qwery布局（<kbd>win</kbd>和<kbd>Alt</kbd>换位置，其实就是是Mac键位啦），德沃拉克布局，还有一种不知道的布局。</li>\n</ul>\n<p>灯光上，我觉得除了个别时候需要全开灯，和当做计时器的最后一种有实际用途，其他就是呼吸灯和点亮比较好。剩下全是辣鸡！</p>\n<h1 id=\"使用感受\"><a href=\"#使用感受\" class=\"headerlink\" title=\"使用感受\"></a>使用感受</h1><p>说实在的，这个说起来真的很难。</p>\n<p>单说键盘做工，对得起500块的价格，键帽也不错。白色PBT效果，也比我自己组装GH60用的PBT要好，灯光更不用提。</p>\n<p>但是论手感上，竟然没有组装的GH60普通PBT手感好，我也没发现问题…这才是问题所在。可能还要多用用，慢慢感受下。</p>\n<p>不过初步感觉问题出在按键回弹上和按键克数稍微少了一点。</p>\n<p>灯光上，虽然看很多人说是没用，我觉得倒还行，比如9点半打完水，晾好，设置15分钟后吃药。虽然之后还会拖延一点时间，但是确实能起到提醒功能。灯光算是仁者见仁智者见智吧。</p>\n<p>最后，上一张三键盘图，正巧樱桃和GH60全在公司，直接一张拍！</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-1-4-ikbc-f108-5.jpg-wm.black\" alt=\"image\"></p>"},{"layout":"post","title":"webpack入门-1","date":"2017-01-06T00:37:00.000Z","_content":"\n花了很多时间，于研究webpack，结果发现很多项目开始转到webpack2或者rollup了，这叫一个尴尬。\n\n不过学习下webpack1也没什么坏处，至少可以比较平稳的升级webpack2。\n\nwebpack配置参数太多了...真心太多了，还有多种配置方法，太灵活，这也导致它非常难，网上有的资料都不匹配，没办法四处借鉴来用。故此，还是自己摸索着来吧。\n\n<!-- more -->\n\n## webpack是什么\n\n我的简单理解就是，将多个分散的文件（模块），打包成为一个或者指定形式的文件。\n\n比如说：有一个文件`main.js`，依赖`A.js` `B.js`，如果要想用`main.js`我们就需要对其进行打包（打包为`bundle.js`）。通过webpack打包，会自动把`A.js` `B.js`的代码打包到`bundle.js`。\n\nwebpack自带有一些插件，也有第三方的组件，所以支持的功能比较多，也比较复杂。我通过一些配置文件，来介绍一些常用的用法写法。\n\n## wepack 准备说明\n\n首先要安装webpack。安装有两种方案：\n\n全局安装：`npm install -g webpack`\n\n项目安装：`npm install -save-dev wepack`\n\n启动终端/命令行，找到当前项目的路径，进入项目。\n\n如果是全局安装，那么之后可以直接输入`webpack ...`这样来进行使用。\n\n如果是项目安装，可以在`package.json`中的`scripts`字段中定义命令，之后执行`npm run 命令`来进行操作。\n\n为了省事，**本系列文章**是按照**全局安装**来使用的。\n\n还是那句话，也可以不用全局安装。可以`package.json`中的`scripts`中配置如下代码，来通过`npm run webpack`使用。\n\n```json\n{\n    \"scripts\": {\n        \"webpack\": \"webpack\"\n    }\n}\n```\n\n## 所有例子的代码位置\n\n可以访问 [github](https://github.com/yukapril/learning/tree/master/webpack-demo) 进行查阅。\n\n## DEMO0 - 入门\n\n第一个最简单的打包例子。\n\n在`demo0`下，建立`src`文件夹\n\n新建一个`say.js`，有两个方法，但是仅仅导出了一个。\n\n```js\nvar fn = function (msg) {\n    console.log('hello, ' + msg + '!');\n};\n\nvar otherFn = function () {\n    console.log('this is another function!');\n};\n\nmodule.exports = fn;\n```\n\n再新建一个`main.js`\n```js\nvar say = require('./say.js');\n\nsay('world');\n```\n\n例子很简单，公用方法文件`say.js`，被`main.js`调用。\n\n#### 请注意\n\n引入的文件（模块），如果是npm安装的，那么代码执行过程中，会有路径处理，能找到这个依赖包，例如写`require('react')`即可；\n \n但是是自己写的文件（模块）的话，要写成`require('./say.js')`（可以省略扩展名），注意当前目录要加入`./`。否则找不到文件。下文会有如何建立别名的方法。\n\n#### 原因是这样的\n\n`require`默认的工作路径，拿本例来说，不是`/webpack-demo/demo0`，而是`/webpack-demo/demo0/node_modules`。在这个目录里面，存在结构`react/index.js`，或者存在`react/package.json`文件，此文件中，定义了`main`入口文件。\n\n这样的话，你直接写`require('react')`，就是读取 `/webpack-demo/demo0/node_modules/react/index.js` （因为没有指定文件，所以读取默认文件`index.js`），所以是OK的。\n\n所以，如果是我们自己的模块，并没有在`node_modules`下的，直接写`require('say.js')`就会找不到。要写成当前目录`require('./say.js')`。\n\n了解完路径问题，我们回到例子，接下来进行webpack打包。\n\n#### webpack打包\n\n启动终端/命令行，首先进入目录：`cd demo0`\n\n用webpack进行编译：`webpack src/main.js build/app.js`，第一个参数是入口文件，第二个参数是打包后文件\n\n之后可以发现，多了一个`build`目录，同时也有了我们要的`app.js`文件\n\n剩下的事情，就是编写`index.html`，并查看效果了。\n\n#### 重要的说明\n\n请仔细查看编译后的`app.js`文件。在源文件`say.js`中，我故意加入了没有用到的函数`otherFn`，在编译后的最终文件内，是**存在**这个函数的。\n\n通过实验，不管用这种ES5风格，还是ES6风格，只要文件内有的东西，都会被编译到最终文件，不论是否被引用。这个是webpack1的问题，好在webpack2已经加入Tree-shaking技术来解决这个问题了。\n\n## DEMO1 - 使用配置文件webpack.config.js\n\n这回，我们不再使用直接敲命令来控制webpack打包了，而是将要打包的东西，放到配置文件里。\n\n我们复制一份`src`目录，到`demo1`目录下。这样，最终的打包后结果会是相同的。\n\n我们在`demo1`下，建立一个`webpack.config.js`文件，这个是默认的配置文件名。\n\n除此外，还有其他的一些名字也是默认名。但是`webpack.config.js`是最流行的写法。\n\n```js\nconsole.log('当前dirname:', __dirname);\n\nmodule.exports = {\n    // 入口文件配置\n    entry: './src/main.js',\n    // 文件导出的配置\n    output: {\n        path: './build',\n        filename: 'app.js'\n    },\n    resolve: {\n        // 当require的模块找不到时，添加这些后缀再次查找\n        extentions: ['js']\n    }\n}\n```\n\n这里面，我们第一句打印出当前的工作环境目录，这个以后会用得到，可以注意下。\n\n之后，导出了一个配置对象。这个对象里面，有入口文件`entry`、打包文件`output` 和特殊查找处理`resolve`。其中，**入口文件和打包文件是必须的**，否则webpack不知道入口和出口啊。这两个配置太好理解了，我就不描述了。`resolve`下文再讲。\n\n这里一样需要注意，当前目录请写上`./`。\n\n之后，我们进入工作目录`cd demo1`，并执行`webpack`即可。\n\n如果你的配置文件不是默认名，那么需要这样执行`webpack --config somename.js`，就是指定配置文件。\n\n执行后，会看到当前dirname路径，因为例子比较简单，不会报错。\n\n如果写的比较复杂，报错了，怎么查看详情？请加参数执行打包：`webpack --display-error-details`，这样打包一旦遇到错误，会有错误信息。**所有的命令参数，都是两条横线开头的。**\n\n#### resolve是什么\n\n它相当于一个变通处理，**基本上都是在解决代码中引用部分`require` `import`文件的问题**。\n\n这里，用到了扩展名`extentions`参数，我们加入了`['js']`处理方案。意思是，针对引用的文件，自动尝试匹配扩展名。\n\n> 这里的数组值，可以写不带扩展名的`js`，也可以写成带有扩展名的`.js`，当然，还可以写 `.config.js` 这样的双重扩展名\n>\n>  一般你见到的，都是这样写的：`extensions: ['', '.jsx', '.js']`，会用一个空串开头。我个人认为没什么意义。\n\n加入扩展名参数后，在我们的代码文件里，一旦有`require`(或者ES6的`import`)，默认会优先找当前文件。找不到，会自动加入我们配置的扩展名`js`。\n\n比如`main.js`中的`require('./say.js')`，默认去找当前目录下的`say.js`，结果找到了，OK。\n\n如果我们写成`require('./say')`，默认去找当前目录下的`say`，找不到！只好按配置的`extentions`顺序增加扩展名，再去找`say.js` `say/index.js`等，直到找到为止。\n\n所以，一旦我们在`resolve`中配置了`extentions`，就可以在代码引用环节省去对应的扩展名了。这个简写方案，非常常见。\n\n## DEMO2 - resolve的alias参数 [官网API](http://webpack.github.io/docs/configuration.html#resolve-alias)\n\n这里，我们在提一个参数`alias`。\n\n接上一个DEMO1，复制一份为DEMO2。\n\n这次项目不一样了，我们要用到很多自己写的模块，这个例子中，我新加入了`take.js` `watch.js`文件，并和`say.js`一起放到了`modules`目录下，而且是按照分类和版本号存放。\n\n结构为：\n\n```\nmodules/say/1.0/say.js\nmodules/take/1.2/take.js\nmodules/watch/2.0/watch.js\n```\n\n在引用的文件`main.js`中，我们希望这么写：\n\n```js\nvar say = require('say');\nvar take = require('take');\nvar watch = require('watch');\n\nsay('world');\ntake();\nwatch();\n```\n\n**注意**，我们希望这里把`say` `take` `watch`定义了为别名，没有路径概念。\n\n这样好处是，就可以写模块的同事自己专心写模块，而写`main.js`的同事只需要关心引入对应模块就行了，不需要关心具体的版本和路径。至于别名的处理，只需要有一个人每次负责修改`webpack.config.js`就可以了。\n\n配置文件，需要修改成这样：\n\n```js\nconsole.log('当前dirname:', __dirname);\n\nmodule.exports = {\n    // 入口文件配置\n    entry: './src/main.js',\n    // 文件导出的配置\n    output: {\n        path: './build',\n        filename: 'app.js'\n    },\n    resolve: {\n        // 当require的模块找不到时，添加这些后缀再次查找\n        extentions: ['js'],\n        // 建立require别名\n        alias: {\n            'say': './modules/say/1.0/say',\n            'take': './modules/take/1.2/take',\n            'watch': './modules/watch/2.0/watch'\n        }\n    }\n}\n```\n\n这样写之后，在`main.js`中，当遇到`require('say')`的时候，相当于变成了`require('./modules/say/1.0/say')`。这就是别名的作用。\n\n## DEMO3 - resolve的更多参数（root）[官网API](http://webpack.github.io/docs/configuration.html#resolve-root)\n\n`resolve.root`，用的人应该很少。这里仅做介绍。\n\n现在来个特殊的例子。我们在demo2中，写过一些公共方法，也写了一个调用的`main.js`。另一个开发小组，知道我们的公共方法了，觉得很好，也想使用，但是他们不希望自己去维护公共方法。怎么办？\n\n让require的默认路径设置为demo2的模块路径呗~\n\n他们的`main.js`是这样的：\n\n```js\nvar say = require('say');\n\nsay('onather');\n```\n\n`webpack.config.js`需要这样配置：\n\n```js\nvar path = require('path');\n\nvar rootPath = path.resolve('../demo2/src/modules');\nconsole.log('当前rootPath:',rootPath);\n\nmodule.exports = {\n    // 入口文件配置\n    entry: './src/main.js',\n    // 文件导出的配置\n    output: {\n        path: './build',\n        filename: 'app.js'\n    },\n    resolve: {\n        // 当require的模块找不到时，添加这些后缀再次查找\n        extentions: ['js'],\n        // 修改require默认的路径，默认是在./node_modules下，现在修改到demo2/src/modules下\n        root: rootPath,\n        // 建立require别名\n        alias: {\n            'say': 'say/1.0/say'\n        }\n    }\n}\n```\n\n#### 要说明注意的点\n\n* 开头引入了`path`，这个是`node`自带模块。`path.resolve`可以将参数拼接，组成绝对路径。\n* `resolve.root`的值，可以是字符串，也可以是数组。数组相当于多个路径，一个一个查找\n* `resolve.root`**只支持绝对路径**，相对路径不行的\n* 由于我们使用`root`修改了`require`处理依赖的工作路径，即不在当前运行的路径了，修改成为了`/webpack-demo/demo2/src/modules`，所以在`alias`里，也不能是`./`开头了，而应该直接写成 `say/1.0/say`，和上文中的`react`例子相同。如果继续使用`./`开头会自动在demo3目录下查找\n\n## 小结\n\n这篇文章，介绍了如何webpack入门，以及最基础的配置。\n\n配置里面，要有 `entry` `output`。\n\n处理代码中`require`的问题，可以配置`resolve`来解决。这里面有扩展名`extentions`和别名`alias`。常用的就这两个，其他方法我很少见别人用。\n\n还提及到了，如果打包出错，想看错误信息，这样执行：`webpack --display-error-details`。","source":"_posts/2017/2017-01-06-webpack-1.md","raw":"---\nlayout: post\ntitle: \"webpack入门-1\"\ndate: 2017-01-06 00:37:00 GMT+0800\ncategories: [前端]\ntags:  [webpack]\n---\n\n花了很多时间，于研究webpack，结果发现很多项目开始转到webpack2或者rollup了，这叫一个尴尬。\n\n不过学习下webpack1也没什么坏处，至少可以比较平稳的升级webpack2。\n\nwebpack配置参数太多了...真心太多了，还有多种配置方法，太灵活，这也导致它非常难，网上有的资料都不匹配，没办法四处借鉴来用。故此，还是自己摸索着来吧。\n\n<!-- more -->\n\n## webpack是什么\n\n我的简单理解就是，将多个分散的文件（模块），打包成为一个或者指定形式的文件。\n\n比如说：有一个文件`main.js`，依赖`A.js` `B.js`，如果要想用`main.js`我们就需要对其进行打包（打包为`bundle.js`）。通过webpack打包，会自动把`A.js` `B.js`的代码打包到`bundle.js`。\n\nwebpack自带有一些插件，也有第三方的组件，所以支持的功能比较多，也比较复杂。我通过一些配置文件，来介绍一些常用的用法写法。\n\n## wepack 准备说明\n\n首先要安装webpack。安装有两种方案：\n\n全局安装：`npm install -g webpack`\n\n项目安装：`npm install -save-dev wepack`\n\n启动终端/命令行，找到当前项目的路径，进入项目。\n\n如果是全局安装，那么之后可以直接输入`webpack ...`这样来进行使用。\n\n如果是项目安装，可以在`package.json`中的`scripts`字段中定义命令，之后执行`npm run 命令`来进行操作。\n\n为了省事，**本系列文章**是按照**全局安装**来使用的。\n\n还是那句话，也可以不用全局安装。可以`package.json`中的`scripts`中配置如下代码，来通过`npm run webpack`使用。\n\n```json\n{\n    \"scripts\": {\n        \"webpack\": \"webpack\"\n    }\n}\n```\n\n## 所有例子的代码位置\n\n可以访问 [github](https://github.com/yukapril/learning/tree/master/webpack-demo) 进行查阅。\n\n## DEMO0 - 入门\n\n第一个最简单的打包例子。\n\n在`demo0`下，建立`src`文件夹\n\n新建一个`say.js`，有两个方法，但是仅仅导出了一个。\n\n```js\nvar fn = function (msg) {\n    console.log('hello, ' + msg + '!');\n};\n\nvar otherFn = function () {\n    console.log('this is another function!');\n};\n\nmodule.exports = fn;\n```\n\n再新建一个`main.js`\n```js\nvar say = require('./say.js');\n\nsay('world');\n```\n\n例子很简单，公用方法文件`say.js`，被`main.js`调用。\n\n#### 请注意\n\n引入的文件（模块），如果是npm安装的，那么代码执行过程中，会有路径处理，能找到这个依赖包，例如写`require('react')`即可；\n \n但是是自己写的文件（模块）的话，要写成`require('./say.js')`（可以省略扩展名），注意当前目录要加入`./`。否则找不到文件。下文会有如何建立别名的方法。\n\n#### 原因是这样的\n\n`require`默认的工作路径，拿本例来说，不是`/webpack-demo/demo0`，而是`/webpack-demo/demo0/node_modules`。在这个目录里面，存在结构`react/index.js`，或者存在`react/package.json`文件，此文件中，定义了`main`入口文件。\n\n这样的话，你直接写`require('react')`，就是读取 `/webpack-demo/demo0/node_modules/react/index.js` （因为没有指定文件，所以读取默认文件`index.js`），所以是OK的。\n\n所以，如果是我们自己的模块，并没有在`node_modules`下的，直接写`require('say.js')`就会找不到。要写成当前目录`require('./say.js')`。\n\n了解完路径问题，我们回到例子，接下来进行webpack打包。\n\n#### webpack打包\n\n启动终端/命令行，首先进入目录：`cd demo0`\n\n用webpack进行编译：`webpack src/main.js build/app.js`，第一个参数是入口文件，第二个参数是打包后文件\n\n之后可以发现，多了一个`build`目录，同时也有了我们要的`app.js`文件\n\n剩下的事情，就是编写`index.html`，并查看效果了。\n\n#### 重要的说明\n\n请仔细查看编译后的`app.js`文件。在源文件`say.js`中，我故意加入了没有用到的函数`otherFn`，在编译后的最终文件内，是**存在**这个函数的。\n\n通过实验，不管用这种ES5风格，还是ES6风格，只要文件内有的东西，都会被编译到最终文件，不论是否被引用。这个是webpack1的问题，好在webpack2已经加入Tree-shaking技术来解决这个问题了。\n\n## DEMO1 - 使用配置文件webpack.config.js\n\n这回，我们不再使用直接敲命令来控制webpack打包了，而是将要打包的东西，放到配置文件里。\n\n我们复制一份`src`目录，到`demo1`目录下。这样，最终的打包后结果会是相同的。\n\n我们在`demo1`下，建立一个`webpack.config.js`文件，这个是默认的配置文件名。\n\n除此外，还有其他的一些名字也是默认名。但是`webpack.config.js`是最流行的写法。\n\n```js\nconsole.log('当前dirname:', __dirname);\n\nmodule.exports = {\n    // 入口文件配置\n    entry: './src/main.js',\n    // 文件导出的配置\n    output: {\n        path: './build',\n        filename: 'app.js'\n    },\n    resolve: {\n        // 当require的模块找不到时，添加这些后缀再次查找\n        extentions: ['js']\n    }\n}\n```\n\n这里面，我们第一句打印出当前的工作环境目录，这个以后会用得到，可以注意下。\n\n之后，导出了一个配置对象。这个对象里面，有入口文件`entry`、打包文件`output` 和特殊查找处理`resolve`。其中，**入口文件和打包文件是必须的**，否则webpack不知道入口和出口啊。这两个配置太好理解了，我就不描述了。`resolve`下文再讲。\n\n这里一样需要注意，当前目录请写上`./`。\n\n之后，我们进入工作目录`cd demo1`，并执行`webpack`即可。\n\n如果你的配置文件不是默认名，那么需要这样执行`webpack --config somename.js`，就是指定配置文件。\n\n执行后，会看到当前dirname路径，因为例子比较简单，不会报错。\n\n如果写的比较复杂，报错了，怎么查看详情？请加参数执行打包：`webpack --display-error-details`，这样打包一旦遇到错误，会有错误信息。**所有的命令参数，都是两条横线开头的。**\n\n#### resolve是什么\n\n它相当于一个变通处理，**基本上都是在解决代码中引用部分`require` `import`文件的问题**。\n\n这里，用到了扩展名`extentions`参数，我们加入了`['js']`处理方案。意思是，针对引用的文件，自动尝试匹配扩展名。\n\n> 这里的数组值，可以写不带扩展名的`js`，也可以写成带有扩展名的`.js`，当然，还可以写 `.config.js` 这样的双重扩展名\n>\n>  一般你见到的，都是这样写的：`extensions: ['', '.jsx', '.js']`，会用一个空串开头。我个人认为没什么意义。\n\n加入扩展名参数后，在我们的代码文件里，一旦有`require`(或者ES6的`import`)，默认会优先找当前文件。找不到，会自动加入我们配置的扩展名`js`。\n\n比如`main.js`中的`require('./say.js')`，默认去找当前目录下的`say.js`，结果找到了，OK。\n\n如果我们写成`require('./say')`，默认去找当前目录下的`say`，找不到！只好按配置的`extentions`顺序增加扩展名，再去找`say.js` `say/index.js`等，直到找到为止。\n\n所以，一旦我们在`resolve`中配置了`extentions`，就可以在代码引用环节省去对应的扩展名了。这个简写方案，非常常见。\n\n## DEMO2 - resolve的alias参数 [官网API](http://webpack.github.io/docs/configuration.html#resolve-alias)\n\n这里，我们在提一个参数`alias`。\n\n接上一个DEMO1，复制一份为DEMO2。\n\n这次项目不一样了，我们要用到很多自己写的模块，这个例子中，我新加入了`take.js` `watch.js`文件，并和`say.js`一起放到了`modules`目录下，而且是按照分类和版本号存放。\n\n结构为：\n\n```\nmodules/say/1.0/say.js\nmodules/take/1.2/take.js\nmodules/watch/2.0/watch.js\n```\n\n在引用的文件`main.js`中，我们希望这么写：\n\n```js\nvar say = require('say');\nvar take = require('take');\nvar watch = require('watch');\n\nsay('world');\ntake();\nwatch();\n```\n\n**注意**，我们希望这里把`say` `take` `watch`定义了为别名，没有路径概念。\n\n这样好处是，就可以写模块的同事自己专心写模块，而写`main.js`的同事只需要关心引入对应模块就行了，不需要关心具体的版本和路径。至于别名的处理，只需要有一个人每次负责修改`webpack.config.js`就可以了。\n\n配置文件，需要修改成这样：\n\n```js\nconsole.log('当前dirname:', __dirname);\n\nmodule.exports = {\n    // 入口文件配置\n    entry: './src/main.js',\n    // 文件导出的配置\n    output: {\n        path: './build',\n        filename: 'app.js'\n    },\n    resolve: {\n        // 当require的模块找不到时，添加这些后缀再次查找\n        extentions: ['js'],\n        // 建立require别名\n        alias: {\n            'say': './modules/say/1.0/say',\n            'take': './modules/take/1.2/take',\n            'watch': './modules/watch/2.0/watch'\n        }\n    }\n}\n```\n\n这样写之后，在`main.js`中，当遇到`require('say')`的时候，相当于变成了`require('./modules/say/1.0/say')`。这就是别名的作用。\n\n## DEMO3 - resolve的更多参数（root）[官网API](http://webpack.github.io/docs/configuration.html#resolve-root)\n\n`resolve.root`，用的人应该很少。这里仅做介绍。\n\n现在来个特殊的例子。我们在demo2中，写过一些公共方法，也写了一个调用的`main.js`。另一个开发小组，知道我们的公共方法了，觉得很好，也想使用，但是他们不希望自己去维护公共方法。怎么办？\n\n让require的默认路径设置为demo2的模块路径呗~\n\n他们的`main.js`是这样的：\n\n```js\nvar say = require('say');\n\nsay('onather');\n```\n\n`webpack.config.js`需要这样配置：\n\n```js\nvar path = require('path');\n\nvar rootPath = path.resolve('../demo2/src/modules');\nconsole.log('当前rootPath:',rootPath);\n\nmodule.exports = {\n    // 入口文件配置\n    entry: './src/main.js',\n    // 文件导出的配置\n    output: {\n        path: './build',\n        filename: 'app.js'\n    },\n    resolve: {\n        // 当require的模块找不到时，添加这些后缀再次查找\n        extentions: ['js'],\n        // 修改require默认的路径，默认是在./node_modules下，现在修改到demo2/src/modules下\n        root: rootPath,\n        // 建立require别名\n        alias: {\n            'say': 'say/1.0/say'\n        }\n    }\n}\n```\n\n#### 要说明注意的点\n\n* 开头引入了`path`，这个是`node`自带模块。`path.resolve`可以将参数拼接，组成绝对路径。\n* `resolve.root`的值，可以是字符串，也可以是数组。数组相当于多个路径，一个一个查找\n* `resolve.root`**只支持绝对路径**，相对路径不行的\n* 由于我们使用`root`修改了`require`处理依赖的工作路径，即不在当前运行的路径了，修改成为了`/webpack-demo/demo2/src/modules`，所以在`alias`里，也不能是`./`开头了，而应该直接写成 `say/1.0/say`，和上文中的`react`例子相同。如果继续使用`./`开头会自动在demo3目录下查找\n\n## 小结\n\n这篇文章，介绍了如何webpack入门，以及最基础的配置。\n\n配置里面，要有 `entry` `output`。\n\n处理代码中`require`的问题，可以配置`resolve`来解决。这里面有扩展名`extentions`和别名`alias`。常用的就这两个，其他方法我很少见别人用。\n\n还提及到了，如果打包出错，想看错误信息，这样执行：`webpack --display-error-details`。","slug":"2017-2017-01-06-webpack-1","published":1,"updated":"2020-03-02T07:16:34.634Z","comments":1,"photos":[],"link":"","_id":"cka5ik8am0015nybg8sjkdyps","content":"<p>花了很多时间，于研究webpack，结果发现很多项目开始转到webpack2或者rollup了，这叫一个尴尬。</p>\n<p>不过学习下webpack1也没什么坏处，至少可以比较平稳的升级webpack2。</p>\n<p>webpack配置参数太多了…真心太多了，还有多种配置方法，太灵活，这也导致它非常难，网上有的资料都不匹配，没办法四处借鉴来用。故此，还是自己摸索着来吧。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"webpack是什么\"><a href=\"#webpack是什么\" class=\"headerlink\" title=\"webpack是什么\"></a>webpack是什么</h2><p>我的简单理解就是，将多个分散的文件（模块），打包成为一个或者指定形式的文件。</p>\n<p>比如说：有一个文件<code>main.js</code>，依赖<code>A.js</code> <code>B.js</code>，如果要想用<code>main.js</code>我们就需要对其进行打包（打包为<code>bundle.js</code>）。通过webpack打包，会自动把<code>A.js</code> <code>B.js</code>的代码打包到<code>bundle.js</code>。</p>\n<p>webpack自带有一些插件，也有第三方的组件，所以支持的功能比较多，也比较复杂。我通过一些配置文件，来介绍一些常用的用法写法。</p>\n<h2 id=\"wepack-准备说明\"><a href=\"#wepack-准备说明\" class=\"headerlink\" title=\"wepack 准备说明\"></a>wepack 准备说明</h2><p>首先要安装webpack。安装有两种方案：</p>\n<p>全局安装：<code>npm install -g webpack</code></p>\n<p>项目安装：<code>npm install -save-dev wepack</code></p>\n<p>启动终端/命令行，找到当前项目的路径，进入项目。</p>\n<p>如果是全局安装，那么之后可以直接输入<code>webpack ...</code>这样来进行使用。</p>\n<p>如果是项目安装，可以在<code>package.json</code>中的<code>scripts</code>字段中定义命令，之后执行<code>npm run 命令</code>来进行操作。</p>\n<p>为了省事，<strong>本系列文章</strong>是按照<strong>全局安装</strong>来使用的。</p>\n<p>还是那句话，也可以不用全局安装。可以<code>package.json</code>中的<code>scripts</code>中配置如下代码，来通过<code>npm run webpack</code>使用。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"webpack\"</span>: <span class=\"string\">\"webpack\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"所有例子的代码位置\"><a href=\"#所有例子的代码位置\" class=\"headerlink\" title=\"所有例子的代码位置\"></a>所有例子的代码位置</h2><p>可以访问 <a href=\"https://github.com/yukapril/learning/tree/master/webpack-demo\" target=\"_blank\" rel=\"noopener\">github</a> 进行查阅。</p>\n<h2 id=\"DEMO0-入门\"><a href=\"#DEMO0-入门\" class=\"headerlink\" title=\"DEMO0 - 入门\"></a>DEMO0 - 入门</h2><p>第一个最简单的打包例子。</p>\n<p>在<code>demo0</code>下，建立<code>src</code>文件夹</p>\n<p>新建一个<code>say.js</code>，有两个方法，但是仅仅导出了一个。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello, '</span> + msg + <span class=\"string\">'!'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> otherFn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is another function!'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = fn;</span><br></pre></td></tr></table></figure>\n\n<p>再新建一个<code>main.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> say = <span class=\"built_in\">require</span>(<span class=\"string\">'./say.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">say(<span class=\"string\">'world'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>例子很简单，公用方法文件<code>say.js</code>，被<code>main.js</code>调用。</p>\n<h4 id=\"请注意\"><a href=\"#请注意\" class=\"headerlink\" title=\"请注意\"></a>请注意</h4><p>引入的文件（模块），如果是npm安装的，那么代码执行过程中，会有路径处理，能找到这个依赖包，例如写<code>require(&#39;react&#39;)</code>即可；</p>\n<p>但是是自己写的文件（模块）的话，要写成<code>require(&#39;./say.js&#39;)</code>（可以省略扩展名），注意当前目录要加入<code>./</code>。否则找不到文件。下文会有如何建立别名的方法。</p>\n<h4 id=\"原因是这样的\"><a href=\"#原因是这样的\" class=\"headerlink\" title=\"原因是这样的\"></a>原因是这样的</h4><p><code>require</code>默认的工作路径，拿本例来说，不是<code>/webpack-demo/demo0</code>，而是<code>/webpack-demo/demo0/node_modules</code>。在这个目录里面，存在结构<code>react/index.js</code>，或者存在<code>react/package.json</code>文件，此文件中，定义了<code>main</code>入口文件。</p>\n<p>这样的话，你直接写<code>require(&#39;react&#39;)</code>，就是读取 <code>/webpack-demo/demo0/node_modules/react/index.js</code> （因为没有指定文件，所以读取默认文件<code>index.js</code>），所以是OK的。</p>\n<p>所以，如果是我们自己的模块，并没有在<code>node_modules</code>下的，直接写<code>require(&#39;say.js&#39;)</code>就会找不到。要写成当前目录<code>require(&#39;./say.js&#39;)</code>。</p>\n<p>了解完路径问题，我们回到例子，接下来进行webpack打包。</p>\n<h4 id=\"webpack打包\"><a href=\"#webpack打包\" class=\"headerlink\" title=\"webpack打包\"></a>webpack打包</h4><p>启动终端/命令行，首先进入目录：<code>cd demo0</code></p>\n<p>用webpack进行编译：<code>webpack src/main.js build/app.js</code>，第一个参数是入口文件，第二个参数是打包后文件</p>\n<p>之后可以发现，多了一个<code>build</code>目录，同时也有了我们要的<code>app.js</code>文件</p>\n<p>剩下的事情，就是编写<code>index.html</code>，并查看效果了。</p>\n<h4 id=\"重要的说明\"><a href=\"#重要的说明\" class=\"headerlink\" title=\"重要的说明\"></a>重要的说明</h4><p>请仔细查看编译后的<code>app.js</code>文件。在源文件<code>say.js</code>中，我故意加入了没有用到的函数<code>otherFn</code>，在编译后的最终文件内，是<strong>存在</strong>这个函数的。</p>\n<p>通过实验，不管用这种ES5风格，还是ES6风格，只要文件内有的东西，都会被编译到最终文件，不论是否被引用。这个是webpack1的问题，好在webpack2已经加入Tree-shaking技术来解决这个问题了。</p>\n<h2 id=\"DEMO1-使用配置文件webpack-config-js\"><a href=\"#DEMO1-使用配置文件webpack-config-js\" class=\"headerlink\" title=\"DEMO1 - 使用配置文件webpack.config.js\"></a>DEMO1 - 使用配置文件webpack.config.js</h2><p>这回，我们不再使用直接敲命令来控制webpack打包了，而是将要打包的东西，放到配置文件里。</p>\n<p>我们复制一份<code>src</code>目录，到<code>demo1</code>目录下。这样，最终的打包后结果会是相同的。</p>\n<p>我们在<code>demo1</code>下，建立一个<code>webpack.config.js</code>文件，这个是默认的配置文件名。</p>\n<p>除此外，还有其他的一些名字也是默认名。但是<code>webpack.config.js</code>是最流行的写法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'当前dirname:'</span>, __dirname);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口文件配置</span></span><br><span class=\"line\">    entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 文件导出的配置</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'./build'</span>,</span><br><span class=\"line\">        filename: <span class=\"string\">'app.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当require的模块找不到时，添加这些后缀再次查找</span></span><br><span class=\"line\">        extentions: [<span class=\"string\">'js'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里面，我们第一句打印出当前的工作环境目录，这个以后会用得到，可以注意下。</p>\n<p>之后，导出了一个配置对象。这个对象里面，有入口文件<code>entry</code>、打包文件<code>output</code> 和特殊查找处理<code>resolve</code>。其中，<strong>入口文件和打包文件是必须的</strong>，否则webpack不知道入口和出口啊。这两个配置太好理解了，我就不描述了。<code>resolve</code>下文再讲。</p>\n<p>这里一样需要注意，当前目录请写上<code>./</code>。</p>\n<p>之后，我们进入工作目录<code>cd demo1</code>，并执行<code>webpack</code>即可。</p>\n<p>如果你的配置文件不是默认名，那么需要这样执行<code>webpack --config somename.js</code>，就是指定配置文件。</p>\n<p>执行后，会看到当前dirname路径，因为例子比较简单，不会报错。</p>\n<p>如果写的比较复杂，报错了，怎么查看详情？请加参数执行打包：<code>webpack --display-error-details</code>，这样打包一旦遇到错误，会有错误信息。<strong>所有的命令参数，都是两条横线开头的。</strong></p>\n<h4 id=\"resolve是什么\"><a href=\"#resolve是什么\" class=\"headerlink\" title=\"resolve是什么\"></a>resolve是什么</h4><p>它相当于一个变通处理，<strong>基本上都是在解决代码中引用部分<code>require</code> <code>import</code>文件的问题</strong>。</p>\n<p>这里，用到了扩展名<code>extentions</code>参数，我们加入了<code>[&#39;js&#39;]</code>处理方案。意思是，针对引用的文件，自动尝试匹配扩展名。</p>\n<blockquote>\n<p>这里的数组值，可以写不带扩展名的<code>js</code>，也可以写成带有扩展名的<code>.js</code>，当然，还可以写 <code>.config.js</code> 这样的双重扩展名</p>\n<p> 一般你见到的，都是这样写的：<code>extensions: [&#39;&#39;, &#39;.jsx&#39;, &#39;.js&#39;]</code>，会用一个空串开头。我个人认为没什么意义。</p>\n</blockquote>\n<p>加入扩展名参数后，在我们的代码文件里，一旦有<code>require</code>(或者ES6的<code>import</code>)，默认会优先找当前文件。找不到，会自动加入我们配置的扩展名<code>js</code>。</p>\n<p>比如<code>main.js</code>中的<code>require(&#39;./say.js&#39;)</code>，默认去找当前目录下的<code>say.js</code>，结果找到了，OK。</p>\n<p>如果我们写成<code>require(&#39;./say&#39;)</code>，默认去找当前目录下的<code>say</code>，找不到！只好按配置的<code>extentions</code>顺序增加扩展名，再去找<code>say.js</code> <code>say/index.js</code>等，直到找到为止。</p>\n<p>所以，一旦我们在<code>resolve</code>中配置了<code>extentions</code>，就可以在代码引用环节省去对应的扩展名了。这个简写方案，非常常见。</p>\n<h2 id=\"DEMO2-resolve的alias参数-官网API\"><a href=\"#DEMO2-resolve的alias参数-官网API\" class=\"headerlink\" title=\"DEMO2 - resolve的alias参数 官网API\"></a>DEMO2 - resolve的alias参数 <a href=\"http://webpack.github.io/docs/configuration.html#resolve-alias\" target=\"_blank\" rel=\"noopener\">官网API</a></h2><p>这里，我们在提一个参数<code>alias</code>。</p>\n<p>接上一个DEMO1，复制一份为DEMO2。</p>\n<p>这次项目不一样了，我们要用到很多自己写的模块，这个例子中，我新加入了<code>take.js</code> <code>watch.js</code>文件，并和<code>say.js</code>一起放到了<code>modules</code>目录下，而且是按照分类和版本号存放。</p>\n<p>结构为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modules/say/1.0/say.js</span><br><span class=\"line\">modules/take/1.2/take.js</span><br><span class=\"line\">modules/watch/2.0/watch.js</span><br></pre></td></tr></table></figure>\n\n<p>在引用的文件<code>main.js</code>中，我们希望这么写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> say = <span class=\"built_in\">require</span>(<span class=\"string\">'say'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> take = <span class=\"built_in\">require</span>(<span class=\"string\">'take'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> watch = <span class=\"built_in\">require</span>(<span class=\"string\">'watch'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">say(<span class=\"string\">'world'</span>);</span><br><span class=\"line\">take();</span><br><span class=\"line\">watch();</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>，我们希望这里把<code>say</code> <code>take</code> <code>watch</code>定义了为别名，没有路径概念。</p>\n<p>这样好处是，就可以写模块的同事自己专心写模块，而写<code>main.js</code>的同事只需要关心引入对应模块就行了，不需要关心具体的版本和路径。至于别名的处理，只需要有一个人每次负责修改<code>webpack.config.js</code>就可以了。</p>\n<p>配置文件，需要修改成这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'当前dirname:'</span>, __dirname);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口文件配置</span></span><br><span class=\"line\">    entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 文件导出的配置</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'./build'</span>,</span><br><span class=\"line\">        filename: <span class=\"string\">'app.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当require的模块找不到时，添加这些后缀再次查找</span></span><br><span class=\"line\">        extentions: [<span class=\"string\">'js'</span>],</span><br><span class=\"line\">        <span class=\"comment\">// 建立require别名</span></span><br><span class=\"line\">        alias: &#123;</span><br><span class=\"line\">            <span class=\"string\">'say'</span>: <span class=\"string\">'./modules/say/1.0/say'</span>,</span><br><span class=\"line\">            <span class=\"string\">'take'</span>: <span class=\"string\">'./modules/take/1.2/take'</span>,</span><br><span class=\"line\">            <span class=\"string\">'watch'</span>: <span class=\"string\">'./modules/watch/2.0/watch'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样写之后，在<code>main.js</code>中，当遇到<code>require(&#39;say&#39;)</code>的时候，相当于变成了<code>require(&#39;./modules/say/1.0/say&#39;)</code>。这就是别名的作用。</p>\n<h2 id=\"DEMO3-resolve的更多参数（root）官网API\"><a href=\"#DEMO3-resolve的更多参数（root）官网API\" class=\"headerlink\" title=\"DEMO3 - resolve的更多参数（root）官网API\"></a>DEMO3 - resolve的更多参数（root）<a href=\"http://webpack.github.io/docs/configuration.html#resolve-root\" target=\"_blank\" rel=\"noopener\">官网API</a></h2><p><code>resolve.root</code>，用的人应该很少。这里仅做介绍。</p>\n<p>现在来个特殊的例子。我们在demo2中，写过一些公共方法，也写了一个调用的<code>main.js</code>。另一个开发小组，知道我们的公共方法了，觉得很好，也想使用，但是他们不希望自己去维护公共方法。怎么办？</p>\n<p>让require的默认路径设置为demo2的模块路径呗~</p>\n<p>他们的<code>main.js</code>是这样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> say = <span class=\"built_in\">require</span>(<span class=\"string\">'say'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">say(<span class=\"string\">'onather'</span>);</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack.config.js</code>需要这样配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> rootPath = path.resolve(<span class=\"string\">'../demo2/src/modules'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'当前rootPath:'</span>,rootPath);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口文件配置</span></span><br><span class=\"line\">    entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 文件导出的配置</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'./build'</span>,</span><br><span class=\"line\">        filename: <span class=\"string\">'app.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当require的模块找不到时，添加这些后缀再次查找</span></span><br><span class=\"line\">        extentions: [<span class=\"string\">'js'</span>],</span><br><span class=\"line\">        <span class=\"comment\">// 修改require默认的路径，默认是在./node_modules下，现在修改到demo2/src/modules下</span></span><br><span class=\"line\">        root: rootPath,</span><br><span class=\"line\">        <span class=\"comment\">// 建立require别名</span></span><br><span class=\"line\">        alias: &#123;</span><br><span class=\"line\">            <span class=\"string\">'say'</span>: <span class=\"string\">'say/1.0/say'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"要说明注意的点\"><a href=\"#要说明注意的点\" class=\"headerlink\" title=\"要说明注意的点\"></a>要说明注意的点</h4><ul>\n<li>开头引入了<code>path</code>，这个是<code>node</code>自带模块。<code>path.resolve</code>可以将参数拼接，组成绝对路径。</li>\n<li><code>resolve.root</code>的值，可以是字符串，也可以是数组。数组相当于多个路径，一个一个查找</li>\n<li><code>resolve.root</code><strong>只支持绝对路径</strong>，相对路径不行的</li>\n<li>由于我们使用<code>root</code>修改了<code>require</code>处理依赖的工作路径，即不在当前运行的路径了，修改成为了<code>/webpack-demo/demo2/src/modules</code>，所以在<code>alias</code>里，也不能是<code>./</code>开头了，而应该直接写成 <code>say/1.0/say</code>，和上文中的<code>react</code>例子相同。如果继续使用<code>./</code>开头会自动在demo3目录下查找</li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>这篇文章，介绍了如何webpack入门，以及最基础的配置。</p>\n<p>配置里面，要有 <code>entry</code> <code>output</code>。</p>\n<p>处理代码中<code>require</code>的问题，可以配置<code>resolve</code>来解决。这里面有扩展名<code>extentions</code>和别名<code>alias</code>。常用的就这两个，其他方法我很少见别人用。</p>\n<p>还提及到了，如果打包出错，想看错误信息，这样执行：<code>webpack --display-error-details</code>。</p>\n","site":{"data":{}},"excerpt":"<p>花了很多时间，于研究webpack，结果发现很多项目开始转到webpack2或者rollup了，这叫一个尴尬。</p>\n<p>不过学习下webpack1也没什么坏处，至少可以比较平稳的升级webpack2。</p>\n<p>webpack配置参数太多了…真心太多了，还有多种配置方法，太灵活，这也导致它非常难，网上有的资料都不匹配，没办法四处借鉴来用。故此，还是自己摸索着来吧。</p>","more":"<h2 id=\"webpack是什么\"><a href=\"#webpack是什么\" class=\"headerlink\" title=\"webpack是什么\"></a>webpack是什么</h2><p>我的简单理解就是，将多个分散的文件（模块），打包成为一个或者指定形式的文件。</p>\n<p>比如说：有一个文件<code>main.js</code>，依赖<code>A.js</code> <code>B.js</code>，如果要想用<code>main.js</code>我们就需要对其进行打包（打包为<code>bundle.js</code>）。通过webpack打包，会自动把<code>A.js</code> <code>B.js</code>的代码打包到<code>bundle.js</code>。</p>\n<p>webpack自带有一些插件，也有第三方的组件，所以支持的功能比较多，也比较复杂。我通过一些配置文件，来介绍一些常用的用法写法。</p>\n<h2 id=\"wepack-准备说明\"><a href=\"#wepack-准备说明\" class=\"headerlink\" title=\"wepack 准备说明\"></a>wepack 准备说明</h2><p>首先要安装webpack。安装有两种方案：</p>\n<p>全局安装：<code>npm install -g webpack</code></p>\n<p>项目安装：<code>npm install -save-dev wepack</code></p>\n<p>启动终端/命令行，找到当前项目的路径，进入项目。</p>\n<p>如果是全局安装，那么之后可以直接输入<code>webpack ...</code>这样来进行使用。</p>\n<p>如果是项目安装，可以在<code>package.json</code>中的<code>scripts</code>字段中定义命令，之后执行<code>npm run 命令</code>来进行操作。</p>\n<p>为了省事，<strong>本系列文章</strong>是按照<strong>全局安装</strong>来使用的。</p>\n<p>还是那句话，也可以不用全局安装。可以<code>package.json</code>中的<code>scripts</code>中配置如下代码，来通过<code>npm run webpack</code>使用。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"webpack\"</span>: <span class=\"string\">\"webpack\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"所有例子的代码位置\"><a href=\"#所有例子的代码位置\" class=\"headerlink\" title=\"所有例子的代码位置\"></a>所有例子的代码位置</h2><p>可以访问 <a href=\"https://github.com/yukapril/learning/tree/master/webpack-demo\" target=\"_blank\" rel=\"noopener\">github</a> 进行查阅。</p>\n<h2 id=\"DEMO0-入门\"><a href=\"#DEMO0-入门\" class=\"headerlink\" title=\"DEMO0 - 入门\"></a>DEMO0 - 入门</h2><p>第一个最简单的打包例子。</p>\n<p>在<code>demo0</code>下，建立<code>src</code>文件夹</p>\n<p>新建一个<code>say.js</code>，有两个方法，但是仅仅导出了一个。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello, '</span> + msg + <span class=\"string\">'!'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> otherFn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is another function!'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = fn;</span><br></pre></td></tr></table></figure>\n\n<p>再新建一个<code>main.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> say = <span class=\"built_in\">require</span>(<span class=\"string\">'./say.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">say(<span class=\"string\">'world'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>例子很简单，公用方法文件<code>say.js</code>，被<code>main.js</code>调用。</p>\n<h4 id=\"请注意\"><a href=\"#请注意\" class=\"headerlink\" title=\"请注意\"></a>请注意</h4><p>引入的文件（模块），如果是npm安装的，那么代码执行过程中，会有路径处理，能找到这个依赖包，例如写<code>require(&#39;react&#39;)</code>即可；</p>\n<p>但是是自己写的文件（模块）的话，要写成<code>require(&#39;./say.js&#39;)</code>（可以省略扩展名），注意当前目录要加入<code>./</code>。否则找不到文件。下文会有如何建立别名的方法。</p>\n<h4 id=\"原因是这样的\"><a href=\"#原因是这样的\" class=\"headerlink\" title=\"原因是这样的\"></a>原因是这样的</h4><p><code>require</code>默认的工作路径，拿本例来说，不是<code>/webpack-demo/demo0</code>，而是<code>/webpack-demo/demo0/node_modules</code>。在这个目录里面，存在结构<code>react/index.js</code>，或者存在<code>react/package.json</code>文件，此文件中，定义了<code>main</code>入口文件。</p>\n<p>这样的话，你直接写<code>require(&#39;react&#39;)</code>，就是读取 <code>/webpack-demo/demo0/node_modules/react/index.js</code> （因为没有指定文件，所以读取默认文件<code>index.js</code>），所以是OK的。</p>\n<p>所以，如果是我们自己的模块，并没有在<code>node_modules</code>下的，直接写<code>require(&#39;say.js&#39;)</code>就会找不到。要写成当前目录<code>require(&#39;./say.js&#39;)</code>。</p>\n<p>了解完路径问题，我们回到例子，接下来进行webpack打包。</p>\n<h4 id=\"webpack打包\"><a href=\"#webpack打包\" class=\"headerlink\" title=\"webpack打包\"></a>webpack打包</h4><p>启动终端/命令行，首先进入目录：<code>cd demo0</code></p>\n<p>用webpack进行编译：<code>webpack src/main.js build/app.js</code>，第一个参数是入口文件，第二个参数是打包后文件</p>\n<p>之后可以发现，多了一个<code>build</code>目录，同时也有了我们要的<code>app.js</code>文件</p>\n<p>剩下的事情，就是编写<code>index.html</code>，并查看效果了。</p>\n<h4 id=\"重要的说明\"><a href=\"#重要的说明\" class=\"headerlink\" title=\"重要的说明\"></a>重要的说明</h4><p>请仔细查看编译后的<code>app.js</code>文件。在源文件<code>say.js</code>中，我故意加入了没有用到的函数<code>otherFn</code>，在编译后的最终文件内，是<strong>存在</strong>这个函数的。</p>\n<p>通过实验，不管用这种ES5风格，还是ES6风格，只要文件内有的东西，都会被编译到最终文件，不论是否被引用。这个是webpack1的问题，好在webpack2已经加入Tree-shaking技术来解决这个问题了。</p>\n<h2 id=\"DEMO1-使用配置文件webpack-config-js\"><a href=\"#DEMO1-使用配置文件webpack-config-js\" class=\"headerlink\" title=\"DEMO1 - 使用配置文件webpack.config.js\"></a>DEMO1 - 使用配置文件webpack.config.js</h2><p>这回，我们不再使用直接敲命令来控制webpack打包了，而是将要打包的东西，放到配置文件里。</p>\n<p>我们复制一份<code>src</code>目录，到<code>demo1</code>目录下。这样，最终的打包后结果会是相同的。</p>\n<p>我们在<code>demo1</code>下，建立一个<code>webpack.config.js</code>文件，这个是默认的配置文件名。</p>\n<p>除此外，还有其他的一些名字也是默认名。但是<code>webpack.config.js</code>是最流行的写法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'当前dirname:'</span>, __dirname);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口文件配置</span></span><br><span class=\"line\">    entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 文件导出的配置</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'./build'</span>,</span><br><span class=\"line\">        filename: <span class=\"string\">'app.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当require的模块找不到时，添加这些后缀再次查找</span></span><br><span class=\"line\">        extentions: [<span class=\"string\">'js'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里面，我们第一句打印出当前的工作环境目录，这个以后会用得到，可以注意下。</p>\n<p>之后，导出了一个配置对象。这个对象里面，有入口文件<code>entry</code>、打包文件<code>output</code> 和特殊查找处理<code>resolve</code>。其中，<strong>入口文件和打包文件是必须的</strong>，否则webpack不知道入口和出口啊。这两个配置太好理解了，我就不描述了。<code>resolve</code>下文再讲。</p>\n<p>这里一样需要注意，当前目录请写上<code>./</code>。</p>\n<p>之后，我们进入工作目录<code>cd demo1</code>，并执行<code>webpack</code>即可。</p>\n<p>如果你的配置文件不是默认名，那么需要这样执行<code>webpack --config somename.js</code>，就是指定配置文件。</p>\n<p>执行后，会看到当前dirname路径，因为例子比较简单，不会报错。</p>\n<p>如果写的比较复杂，报错了，怎么查看详情？请加参数执行打包：<code>webpack --display-error-details</code>，这样打包一旦遇到错误，会有错误信息。<strong>所有的命令参数，都是两条横线开头的。</strong></p>\n<h4 id=\"resolve是什么\"><a href=\"#resolve是什么\" class=\"headerlink\" title=\"resolve是什么\"></a>resolve是什么</h4><p>它相当于一个变通处理，<strong>基本上都是在解决代码中引用部分<code>require</code> <code>import</code>文件的问题</strong>。</p>\n<p>这里，用到了扩展名<code>extentions</code>参数，我们加入了<code>[&#39;js&#39;]</code>处理方案。意思是，针对引用的文件，自动尝试匹配扩展名。</p>\n<blockquote>\n<p>这里的数组值，可以写不带扩展名的<code>js</code>，也可以写成带有扩展名的<code>.js</code>，当然，还可以写 <code>.config.js</code> 这样的双重扩展名</p>\n<p> 一般你见到的，都是这样写的：<code>extensions: [&#39;&#39;, &#39;.jsx&#39;, &#39;.js&#39;]</code>，会用一个空串开头。我个人认为没什么意义。</p>\n</blockquote>\n<p>加入扩展名参数后，在我们的代码文件里，一旦有<code>require</code>(或者ES6的<code>import</code>)，默认会优先找当前文件。找不到，会自动加入我们配置的扩展名<code>js</code>。</p>\n<p>比如<code>main.js</code>中的<code>require(&#39;./say.js&#39;)</code>，默认去找当前目录下的<code>say.js</code>，结果找到了，OK。</p>\n<p>如果我们写成<code>require(&#39;./say&#39;)</code>，默认去找当前目录下的<code>say</code>，找不到！只好按配置的<code>extentions</code>顺序增加扩展名，再去找<code>say.js</code> <code>say/index.js</code>等，直到找到为止。</p>\n<p>所以，一旦我们在<code>resolve</code>中配置了<code>extentions</code>，就可以在代码引用环节省去对应的扩展名了。这个简写方案，非常常见。</p>\n<h2 id=\"DEMO2-resolve的alias参数-官网API\"><a href=\"#DEMO2-resolve的alias参数-官网API\" class=\"headerlink\" title=\"DEMO2 - resolve的alias参数 官网API\"></a>DEMO2 - resolve的alias参数 <a href=\"http://webpack.github.io/docs/configuration.html#resolve-alias\" target=\"_blank\" rel=\"noopener\">官网API</a></h2><p>这里，我们在提一个参数<code>alias</code>。</p>\n<p>接上一个DEMO1，复制一份为DEMO2。</p>\n<p>这次项目不一样了，我们要用到很多自己写的模块，这个例子中，我新加入了<code>take.js</code> <code>watch.js</code>文件，并和<code>say.js</code>一起放到了<code>modules</code>目录下，而且是按照分类和版本号存放。</p>\n<p>结构为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modules/say/1.0/say.js</span><br><span class=\"line\">modules/take/1.2/take.js</span><br><span class=\"line\">modules/watch/2.0/watch.js</span><br></pre></td></tr></table></figure>\n\n<p>在引用的文件<code>main.js</code>中，我们希望这么写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> say = <span class=\"built_in\">require</span>(<span class=\"string\">'say'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> take = <span class=\"built_in\">require</span>(<span class=\"string\">'take'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> watch = <span class=\"built_in\">require</span>(<span class=\"string\">'watch'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">say(<span class=\"string\">'world'</span>);</span><br><span class=\"line\">take();</span><br><span class=\"line\">watch();</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>，我们希望这里把<code>say</code> <code>take</code> <code>watch</code>定义了为别名，没有路径概念。</p>\n<p>这样好处是，就可以写模块的同事自己专心写模块，而写<code>main.js</code>的同事只需要关心引入对应模块就行了，不需要关心具体的版本和路径。至于别名的处理，只需要有一个人每次负责修改<code>webpack.config.js</code>就可以了。</p>\n<p>配置文件，需要修改成这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'当前dirname:'</span>, __dirname);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口文件配置</span></span><br><span class=\"line\">    entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 文件导出的配置</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'./build'</span>,</span><br><span class=\"line\">        filename: <span class=\"string\">'app.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当require的模块找不到时，添加这些后缀再次查找</span></span><br><span class=\"line\">        extentions: [<span class=\"string\">'js'</span>],</span><br><span class=\"line\">        <span class=\"comment\">// 建立require别名</span></span><br><span class=\"line\">        alias: &#123;</span><br><span class=\"line\">            <span class=\"string\">'say'</span>: <span class=\"string\">'./modules/say/1.0/say'</span>,</span><br><span class=\"line\">            <span class=\"string\">'take'</span>: <span class=\"string\">'./modules/take/1.2/take'</span>,</span><br><span class=\"line\">            <span class=\"string\">'watch'</span>: <span class=\"string\">'./modules/watch/2.0/watch'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样写之后，在<code>main.js</code>中，当遇到<code>require(&#39;say&#39;)</code>的时候，相当于变成了<code>require(&#39;./modules/say/1.0/say&#39;)</code>。这就是别名的作用。</p>\n<h2 id=\"DEMO3-resolve的更多参数（root）官网API\"><a href=\"#DEMO3-resolve的更多参数（root）官网API\" class=\"headerlink\" title=\"DEMO3 - resolve的更多参数（root）官网API\"></a>DEMO3 - resolve的更多参数（root）<a href=\"http://webpack.github.io/docs/configuration.html#resolve-root\" target=\"_blank\" rel=\"noopener\">官网API</a></h2><p><code>resolve.root</code>，用的人应该很少。这里仅做介绍。</p>\n<p>现在来个特殊的例子。我们在demo2中，写过一些公共方法，也写了一个调用的<code>main.js</code>。另一个开发小组，知道我们的公共方法了，觉得很好，也想使用，但是他们不希望自己去维护公共方法。怎么办？</p>\n<p>让require的默认路径设置为demo2的模块路径呗~</p>\n<p>他们的<code>main.js</code>是这样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> say = <span class=\"built_in\">require</span>(<span class=\"string\">'say'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">say(<span class=\"string\">'onather'</span>);</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack.config.js</code>需要这样配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> rootPath = path.resolve(<span class=\"string\">'../demo2/src/modules'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'当前rootPath:'</span>,rootPath);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口文件配置</span></span><br><span class=\"line\">    entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 文件导出的配置</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'./build'</span>,</span><br><span class=\"line\">        filename: <span class=\"string\">'app.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当require的模块找不到时，添加这些后缀再次查找</span></span><br><span class=\"line\">        extentions: [<span class=\"string\">'js'</span>],</span><br><span class=\"line\">        <span class=\"comment\">// 修改require默认的路径，默认是在./node_modules下，现在修改到demo2/src/modules下</span></span><br><span class=\"line\">        root: rootPath,</span><br><span class=\"line\">        <span class=\"comment\">// 建立require别名</span></span><br><span class=\"line\">        alias: &#123;</span><br><span class=\"line\">            <span class=\"string\">'say'</span>: <span class=\"string\">'say/1.0/say'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"要说明注意的点\"><a href=\"#要说明注意的点\" class=\"headerlink\" title=\"要说明注意的点\"></a>要说明注意的点</h4><ul>\n<li>开头引入了<code>path</code>，这个是<code>node</code>自带模块。<code>path.resolve</code>可以将参数拼接，组成绝对路径。</li>\n<li><code>resolve.root</code>的值，可以是字符串，也可以是数组。数组相当于多个路径，一个一个查找</li>\n<li><code>resolve.root</code><strong>只支持绝对路径</strong>，相对路径不行的</li>\n<li>由于我们使用<code>root</code>修改了<code>require</code>处理依赖的工作路径，即不在当前运行的路径了，修改成为了<code>/webpack-demo/demo2/src/modules</code>，所以在<code>alias</code>里，也不能是<code>./</code>开头了，而应该直接写成 <code>say/1.0/say</code>，和上文中的<code>react</code>例子相同。如果继续使用<code>./</code>开头会自动在demo3目录下查找</li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>这篇文章，介绍了如何webpack入门，以及最基础的配置。</p>\n<p>配置里面，要有 <code>entry</code> <code>output</code>。</p>\n<p>处理代码中<code>require</code>的问题，可以配置<code>resolve</code>来解决。这里面有扩展名<code>extentions</code>和别名<code>alias</code>。常用的就这两个，其他方法我很少见别人用。</p>\n<p>还提及到了，如果打包出错，想看错误信息，这样执行：<code>webpack --display-error-details</code>。</p>"},{"layout":"post","title":"chrome浏览器无法打开htpps网站的处理","date":"2017-01-09T00:34:00.000Z","_content":"\n在升级chrome53到54的时候，访问https站点经常会出现问题。\n\n<!-- more -->\n\n表现在：\n\n* 首先会提示https不授信，但是可以点击继续访问来处理。\n* 此时有的网站内容是有问题的。\n\n这个问题，今天再次复现时候，正好截图，这样就可以说下处理方法了。\n\n## 问题原因\n\n如果部分资源无法访问，原因很简单，和打开网站一样，也是资源不授信。我们只要是把资源的域名/网站也按照网站打开时候点一下授信就可以了。\n\n至于为什么https的网站chrome变得不授信了，目前我没看到可靠地消息解释。一般都是说更新新版本，大概是时间的问题（当前版本超过60天等）。鉴于国内的情况，更新基本上是很难的。\n\n## 处理方法\n\n今天访问稀土掘金，页面不能正常显示。使用<kbd>cmd</kbd> + <kbd>alt</kbd> + <kbd>I</kbd>（或者windows下<kbd>F12</kbd>）打开面板，切换到`console`栏目下，发现了大量链接访问错误。\n\n![image](https://cdn0.yukapril.com/blog/2017-01-09-chrome-https-error-1.png-wm.black)\n\n只需要右键选择无法访问的链接，新开窗口打开就行了。\n\n![image](https://cdn0.yukapril.com/blog/2017-01-09-chrome-https-error-2.png-wm.black)\n\n熟悉的页面又出现了，继续就可以了。\n\n![image](https://cdn0.yukapril.com/blog/2017-01-09-chrome-https-error-3.png-wm.black)\n\n之后就可以回到原网站，刷新看看效果了。\n\n如果还有失败的链接，继续再来一遍。一个链接的网站域名/端口不同，就算一个新网站，就需要重来一遍，一般网站最多3-4遍足够了。\n\n\n\n","source":"_posts/2017/2017-01-09-chrome-https-error.md","raw":"---\nlayout: post\ntitle: \"chrome浏览器无法打开htpps网站的处理\"\ndate: 2017-01-09 00:34:00 GMT+0800\ncategories: [随笔]\ntags:  [chrome,https,无法连接]\n---\n\n在升级chrome53到54的时候，访问https站点经常会出现问题。\n\n<!-- more -->\n\n表现在：\n\n* 首先会提示https不授信，但是可以点击继续访问来处理。\n* 此时有的网站内容是有问题的。\n\n这个问题，今天再次复现时候，正好截图，这样就可以说下处理方法了。\n\n## 问题原因\n\n如果部分资源无法访问，原因很简单，和打开网站一样，也是资源不授信。我们只要是把资源的域名/网站也按照网站打开时候点一下授信就可以了。\n\n至于为什么https的网站chrome变得不授信了，目前我没看到可靠地消息解释。一般都是说更新新版本，大概是时间的问题（当前版本超过60天等）。鉴于国内的情况，更新基本上是很难的。\n\n## 处理方法\n\n今天访问稀土掘金，页面不能正常显示。使用<kbd>cmd</kbd> + <kbd>alt</kbd> + <kbd>I</kbd>（或者windows下<kbd>F12</kbd>）打开面板，切换到`console`栏目下，发现了大量链接访问错误。\n\n![image](https://cdn0.yukapril.com/blog/2017-01-09-chrome-https-error-1.png-wm.black)\n\n只需要右键选择无法访问的链接，新开窗口打开就行了。\n\n![image](https://cdn0.yukapril.com/blog/2017-01-09-chrome-https-error-2.png-wm.black)\n\n熟悉的页面又出现了，继续就可以了。\n\n![image](https://cdn0.yukapril.com/blog/2017-01-09-chrome-https-error-3.png-wm.black)\n\n之后就可以回到原网站，刷新看看效果了。\n\n如果还有失败的链接，继续再来一遍。一个链接的网站域名/端口不同，就算一个新网站，就需要重来一遍，一般网站最多3-4遍足够了。\n\n\n\n","slug":"2017-2017-01-09-chrome-https-error","published":1,"updated":"2020-03-02T07:16:34.634Z","comments":1,"photos":[],"link":"","_id":"cka5ik8an0018nybgidlhxfg2","content":"<p>在升级chrome53到54的时候，访问https站点经常会出现问题。</p>\n<a id=\"more\"></a>\n\n<p>表现在：</p>\n<ul>\n<li>首先会提示https不授信，但是可以点击继续访问来处理。</li>\n<li>此时有的网站内容是有问题的。</li>\n</ul>\n<p>这个问题，今天再次复现时候，正好截图，这样就可以说下处理方法了。</p>\n<h2 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h2><p>如果部分资源无法访问，原因很简单，和打开网站一样，也是资源不授信。我们只要是把资源的域名/网站也按照网站打开时候点一下授信就可以了。</p>\n<p>至于为什么https的网站chrome变得不授信了，目前我没看到可靠地消息解释。一般都是说更新新版本，大概是时间的问题（当前版本超过60天等）。鉴于国内的情况，更新基本上是很难的。</p>\n<h2 id=\"处理方法\"><a href=\"#处理方法\" class=\"headerlink\" title=\"处理方法\"></a>处理方法</h2><p>今天访问稀土掘金，页面不能正常显示。使用<kbd>cmd</kbd> + <kbd>alt</kbd> + <kbd>I</kbd>（或者windows下<kbd>F12</kbd>）打开面板，切换到<code>console</code>栏目下，发现了大量链接访问错误。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-01-09-chrome-https-error-1.png-wm.black\" alt=\"image\"></p>\n<p>只需要右键选择无法访问的链接，新开窗口打开就行了。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-01-09-chrome-https-error-2.png-wm.black\" alt=\"image\"></p>\n<p>熟悉的页面又出现了，继续就可以了。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-01-09-chrome-https-error-3.png-wm.black\" alt=\"image\"></p>\n<p>之后就可以回到原网站，刷新看看效果了。</p>\n<p>如果还有失败的链接，继续再来一遍。一个链接的网站域名/端口不同，就算一个新网站，就需要重来一遍，一般网站最多3-4遍足够了。</p>\n","site":{"data":{}},"excerpt":"<p>在升级chrome53到54的时候，访问https站点经常会出现问题。</p>","more":"<p>表现在：</p>\n<ul>\n<li>首先会提示https不授信，但是可以点击继续访问来处理。</li>\n<li>此时有的网站内容是有问题的。</li>\n</ul>\n<p>这个问题，今天再次复现时候，正好截图，这样就可以说下处理方法了。</p>\n<h2 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h2><p>如果部分资源无法访问，原因很简单，和打开网站一样，也是资源不授信。我们只要是把资源的域名/网站也按照网站打开时候点一下授信就可以了。</p>\n<p>至于为什么https的网站chrome变得不授信了，目前我没看到可靠地消息解释。一般都是说更新新版本，大概是时间的问题（当前版本超过60天等）。鉴于国内的情况，更新基本上是很难的。</p>\n<h2 id=\"处理方法\"><a href=\"#处理方法\" class=\"headerlink\" title=\"处理方法\"></a>处理方法</h2><p>今天访问稀土掘金，页面不能正常显示。使用<kbd>cmd</kbd> + <kbd>alt</kbd> + <kbd>I</kbd>（或者windows下<kbd>F12</kbd>）打开面板，切换到<code>console</code>栏目下，发现了大量链接访问错误。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-01-09-chrome-https-error-1.png-wm.black\" alt=\"image\"></p>\n<p>只需要右键选择无法访问的链接，新开窗口打开就行了。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-01-09-chrome-https-error-2.png-wm.black\" alt=\"image\"></p>\n<p>熟悉的页面又出现了，继续就可以了。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-01-09-chrome-https-error-3.png-wm.black\" alt=\"image\"></p>\n<p>之后就可以回到原网站，刷新看看效果了。</p>\n<p>如果还有失败的链接，继续再来一遍。一个链接的网站域名/端口不同，就算一个新网站，就需要重来一遍，一般网站最多3-4遍足够了。</p>"},{"layout":"post","title":"js 模板编译的实现","date":"2017-01-09T21:03:00.000Z","_content":"\n看过很多模板，语法各不相同，执行效率也差异很大。在用angular 1 的时候，有一个名词是编译（$compile）。我很诧异，js作为解释型语言，为什么要编译？\n\n后来我也看过一些模板文章，终于明白的编译的用意。\n\n<!-- more -->\n\n## 编译是什么\n\n我认为编译是一种格式变成另一种格式的过程。编译会导致好的结果，比如书写简单的代码，编译出来复杂的代码；或者，提高代码的使用性能。\n\n比如说`jade` （现在改名叫做`pug`），就是编译从简单到复杂的过程\n\n```html\np hello!\n```\n\n这和html也相差太远了吧？所以，需要用插件对其进行编译，编译成`<p>hello!</p>`，之后我们就可以拿着编译后的内容随意使用了。\n\n**这里我更想说模板。** 写一个最简单的模板。\n\n```html\n<p>Hello, { {name} }!</p>\n```\n\n这个模板用数据`{name:'world'}`渲染后的结果就是：\n\n```html\n<p>Hello, world!</p>\n```\n\n来个问题，这个你怎么实现？\n\n## 模板的简单实现\n\n继续说上一个问题。来看看如何实现。\n\n如果项目非常简单，都不用任何框架，自己写一个就好。写法原理很简单：正则查找替换就行了。\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"UTF-8\">\n    <title>template</title>\n</head>\n\n<body>\n<script>\n    var template = function (tpl, data) {\n        var ret = tpl;\n        for (var item in data) {\n            // 遍历data每一个字段\n            if (data.hasOwnProperty(item)) {\n                var re = new RegExp('{ {' + item + '} }', 'g');\n                ret = ret.replace(re, data[item]);\n            }\n        }\n        return ret;\n    };\n\n    var tpl = \"<p>Hello, I'm { {name} }! { {age} } years old!</p>\";\n    var data = {\n        name: 'Jason',\n        age: 25\n    };\n    var result = template(tpl, data);\n    console.log(result);\n</script>\n</body>\n\n</html>\n```\n\n这个难度很低，直接正则替换就实现了，不做解释了。这个真的太简单了，因为除了正则替换字段，啥都干不了。\n\n不信看看这个简单的需求：\n\n模板：\n\n```html\n<p>Hello, I'm { {user.name} }! { {user.age} } years old!</p>\n```\n\n渲染数据是：\n\n```js\nvar data = {\n    user: {\n        name: 'Jason',\n        age: 25\n    }\n}\n```\n\n还用上面的方法，就失效了。还用正则的话，就很难来做了。因为需要做语法/词法分析，看看大括号内写的是什么了。\n\n## 模板编译\n\n我们先回到最简单的例子上来说。\n\n上面，我们实现的思路是，每次传入模板和数据，执行正则替换。假设10个字段，就是替换10次。这样性能也是个问题，因为每次都要跑循环去正则去替换。而且这还仅仅是单数据渲染，如果要是加上 `if` `for` 这样的语法可咋办？\n\n对于上面的这个模板，其实也可以这样来写：\n\n```js\nvar tpl = function(data){\n    return \"<p>Hello, I'm \" + data.name + \"! \" + data.age + \" years old!</p>\";\n}\n```\n\n这么写的好处：只需一次**编译**，之后再使用只需直接填充数据即可。而且可以方便的支持 `data.user.name` 这种形式。\n\n这里涉及一个功能点，一般可能用不到，我点一下。\n\n#### 通过字符串生成函数\n\n我们要生成一个函数，传入 `x` `y` ，执行 `return x + y`来获得求和功能。\n\n可以这样写：\n\n```js\nvar fn = new Function('x','y','return x + y');\n\nconsole.log(fn);\n\n// 返回\n(function(x,y\n/**/) {\nreturn x + y\n})\n```\n\n通过`new Function`，我们可以创造函数。下文会用到。\n\n#### 模板编译\n\n我们先整理下思路，应该是传入tpl模板字符串，通过 `new Function` 方式返回一个新函数。新函数接收一个对象，我叫做 `obj`。\n\n```js\nvar template = function (tpl) {\n    // 模板字符串\n    var retStr = '';\n    //...\n    return new Function('obj', retStr);\n};\n```\n\n我们接下来要做的是，把`{ {xxx.xxx} }`部分都找出来，替换为`obj.xxx.xxx`就行了。\n\n```js\nvar template = function (tpl) {\n    // 模板字符串\n    var retStr = tpl.replace(/{ {(.+?)} }/g, 'obj.$1');\n    retStr = 'return \"' + retStr + '\"';\n    return new Function('obj', retStr);\n};\n\nvar tpl = \"<p>Hello, I'm { {user.name} }! { {user.age} } years old!</p>\";\nvar render = template(tpl);\nconsole.log(render);\n```\n\n这样写，发现函数是\n\n```js\nfunction anonymous(obj\n/**/) {\nreturn \"<p>Hello, I'm obj.user.name! obj.user.age years old!</p>\"\n}\n```\n\n很明显不行，至少应该把正则替换那句修改下，前后加上引号和加号才行。最终变成这样子：\n\n```js\nvar template = function (tpl) {\n    // 模板字符串\n    var retStr = tpl.replace(/{ {(.+?)} }/g, '\" + obj.$1 + \"');\n    retStr = 'return \"' + retStr + '\"';\n    return new Function('obj', retStr);\n};\n\nvar tpl = \"<p>Hello, I'm { {user.name} }! { {user.age} } years old!</p>\";\nvar data = {\n    user: {\n        name: 'Jason',\n        age: 25\n    }\n};\nvar render = template(tpl);\nconsole.log(render);\nvar result = render(data);\nconsole.log(result);\n```\n\n我们可以看到结果正常了\n\n函数是：\n\n```js\nfunction anonymous(obj\n/**/) {\nreturn \"<p>Hello, I'm \" + obj.user.name + \"! \" + obj.user.age + \" years old!</p>\"\n}\n```\n\n渲染结果是：\n\n```html\n<p>Hello, I'm Jason! 25 years old!</p>\n```\n\n## 高级模板编译\n\n上面的例子，可以处理各种对象形式的赋值。我们还应该支持 `if` `for` 这样的语法。 这里我就不展开写了。代码我放在了 [Github - template-render](https://github.com/yukapril/template-render)。代码是ES6的，可以放在最新的浏览器执行，或者**自行**去编译。\n\n我说下过程：\n\n1. 字符串模板解析：要从模板中分析出那些是普通字符串，那些是模板代码。见 [`parse2array`](https://github.com/yukapril/template-render/blob/master/template.js#L27) 方法。\n2. 合成返回函数主体：可以直接写入字符串，也有人喜欢写入数组（最后执行`arr.join('')`）。要区分三种情况，普通字符串（直接简单处理返回就行），普通赋值语法（稍作处理返回），高级语法字符串（需要根据你自己定义的模板语法来写解释器）。见 [编译为函数](https://github.com/yukapril/template-render/blob/master/template.js#L92) 和 [高级语法处理 - syntaxParse](https://github.com/yukapril/template-render/blob/master/template.js#L67)。\n3. 将第二步的内容稍加处理，采用 `new Function` 返回就行了。见 [最后处理并返回](https://github.com/yukapril/template-render/blob/master/template.js#L109)\n\n还有一些经验可以借鉴：\n\n1. 使用`with`语法。这样可以方便的处理多层的对象，对上文来说，就是可以省去正则替换后中的`obj`了。这个灵感好像来源于Vue，我记得在哪里听说过。这个语法我没用过，曾经听说是效率低下，现在不太清楚。可以参见[这里](https://www.zhihu.com/question/49929356)。\n\n2. 我对逻辑循环等语法进行了设计，比如：\n\n```html\n{ {# each hobbys as item } }\n    <li>{ {$index+1} }/{ {$length} } - { {item} }</li>\n{ {# endeach } }\n```\n\n我也见有人这里干脆不设计，直接就用原生js语法，那么上面的三步过程，可以调整为两步：第一步解析，第二步当做js语法进行拼接处理。\n\n思路例子总归是例子，虽然功能可以用，但是还有许多需要完善的地方，比如要渲染的字符串是html怎么办，应该需要转义处理；模板换行等需要处理（例子里面我已经处理了），如果渲染的字段不是字符串而是函数要处理（例子里面部分位置已经处理），渲染数据缺失情况等处理。\n\n----\n\n通过做模板编译这个例子，就会感觉到React的JSX设计还是有道理的，方便解析，方便书写，就是不方便理解...","source":"_posts/2017/2017-01-09-js-template-compile.md","raw":"---\nlayout: post\ntitle: \"js 模板编译的实现\"\ndate: 2017-01-09 21:03:00 GMT+0800\ncategories: [前端]\ntags:  [模板,编译]\n---\n\n看过很多模板，语法各不相同，执行效率也差异很大。在用angular 1 的时候，有一个名词是编译（$compile）。我很诧异，js作为解释型语言，为什么要编译？\n\n后来我也看过一些模板文章，终于明白的编译的用意。\n\n<!-- more -->\n\n## 编译是什么\n\n我认为编译是一种格式变成另一种格式的过程。编译会导致好的结果，比如书写简单的代码，编译出来复杂的代码；或者，提高代码的使用性能。\n\n比如说`jade` （现在改名叫做`pug`），就是编译从简单到复杂的过程\n\n```html\np hello!\n```\n\n这和html也相差太远了吧？所以，需要用插件对其进行编译，编译成`<p>hello!</p>`，之后我们就可以拿着编译后的内容随意使用了。\n\n**这里我更想说模板。** 写一个最简单的模板。\n\n```html\n<p>Hello, { {name} }!</p>\n```\n\n这个模板用数据`{name:'world'}`渲染后的结果就是：\n\n```html\n<p>Hello, world!</p>\n```\n\n来个问题，这个你怎么实现？\n\n## 模板的简单实现\n\n继续说上一个问题。来看看如何实现。\n\n如果项目非常简单，都不用任何框架，自己写一个就好。写法原理很简单：正则查找替换就行了。\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"UTF-8\">\n    <title>template</title>\n</head>\n\n<body>\n<script>\n    var template = function (tpl, data) {\n        var ret = tpl;\n        for (var item in data) {\n            // 遍历data每一个字段\n            if (data.hasOwnProperty(item)) {\n                var re = new RegExp('{ {' + item + '} }', 'g');\n                ret = ret.replace(re, data[item]);\n            }\n        }\n        return ret;\n    };\n\n    var tpl = \"<p>Hello, I'm { {name} }! { {age} } years old!</p>\";\n    var data = {\n        name: 'Jason',\n        age: 25\n    };\n    var result = template(tpl, data);\n    console.log(result);\n</script>\n</body>\n\n</html>\n```\n\n这个难度很低，直接正则替换就实现了，不做解释了。这个真的太简单了，因为除了正则替换字段，啥都干不了。\n\n不信看看这个简单的需求：\n\n模板：\n\n```html\n<p>Hello, I'm { {user.name} }! { {user.age} } years old!</p>\n```\n\n渲染数据是：\n\n```js\nvar data = {\n    user: {\n        name: 'Jason',\n        age: 25\n    }\n}\n```\n\n还用上面的方法，就失效了。还用正则的话，就很难来做了。因为需要做语法/词法分析，看看大括号内写的是什么了。\n\n## 模板编译\n\n我们先回到最简单的例子上来说。\n\n上面，我们实现的思路是，每次传入模板和数据，执行正则替换。假设10个字段，就是替换10次。这样性能也是个问题，因为每次都要跑循环去正则去替换。而且这还仅仅是单数据渲染，如果要是加上 `if` `for` 这样的语法可咋办？\n\n对于上面的这个模板，其实也可以这样来写：\n\n```js\nvar tpl = function(data){\n    return \"<p>Hello, I'm \" + data.name + \"! \" + data.age + \" years old!</p>\";\n}\n```\n\n这么写的好处：只需一次**编译**，之后再使用只需直接填充数据即可。而且可以方便的支持 `data.user.name` 这种形式。\n\n这里涉及一个功能点，一般可能用不到，我点一下。\n\n#### 通过字符串生成函数\n\n我们要生成一个函数，传入 `x` `y` ，执行 `return x + y`来获得求和功能。\n\n可以这样写：\n\n```js\nvar fn = new Function('x','y','return x + y');\n\nconsole.log(fn);\n\n// 返回\n(function(x,y\n/**/) {\nreturn x + y\n})\n```\n\n通过`new Function`，我们可以创造函数。下文会用到。\n\n#### 模板编译\n\n我们先整理下思路，应该是传入tpl模板字符串，通过 `new Function` 方式返回一个新函数。新函数接收一个对象，我叫做 `obj`。\n\n```js\nvar template = function (tpl) {\n    // 模板字符串\n    var retStr = '';\n    //...\n    return new Function('obj', retStr);\n};\n```\n\n我们接下来要做的是，把`{ {xxx.xxx} }`部分都找出来，替换为`obj.xxx.xxx`就行了。\n\n```js\nvar template = function (tpl) {\n    // 模板字符串\n    var retStr = tpl.replace(/{ {(.+?)} }/g, 'obj.$1');\n    retStr = 'return \"' + retStr + '\"';\n    return new Function('obj', retStr);\n};\n\nvar tpl = \"<p>Hello, I'm { {user.name} }! { {user.age} } years old!</p>\";\nvar render = template(tpl);\nconsole.log(render);\n```\n\n这样写，发现函数是\n\n```js\nfunction anonymous(obj\n/**/) {\nreturn \"<p>Hello, I'm obj.user.name! obj.user.age years old!</p>\"\n}\n```\n\n很明显不行，至少应该把正则替换那句修改下，前后加上引号和加号才行。最终变成这样子：\n\n```js\nvar template = function (tpl) {\n    // 模板字符串\n    var retStr = tpl.replace(/{ {(.+?)} }/g, '\" + obj.$1 + \"');\n    retStr = 'return \"' + retStr + '\"';\n    return new Function('obj', retStr);\n};\n\nvar tpl = \"<p>Hello, I'm { {user.name} }! { {user.age} } years old!</p>\";\nvar data = {\n    user: {\n        name: 'Jason',\n        age: 25\n    }\n};\nvar render = template(tpl);\nconsole.log(render);\nvar result = render(data);\nconsole.log(result);\n```\n\n我们可以看到结果正常了\n\n函数是：\n\n```js\nfunction anonymous(obj\n/**/) {\nreturn \"<p>Hello, I'm \" + obj.user.name + \"! \" + obj.user.age + \" years old!</p>\"\n}\n```\n\n渲染结果是：\n\n```html\n<p>Hello, I'm Jason! 25 years old!</p>\n```\n\n## 高级模板编译\n\n上面的例子，可以处理各种对象形式的赋值。我们还应该支持 `if` `for` 这样的语法。 这里我就不展开写了。代码我放在了 [Github - template-render](https://github.com/yukapril/template-render)。代码是ES6的，可以放在最新的浏览器执行，或者**自行**去编译。\n\n我说下过程：\n\n1. 字符串模板解析：要从模板中分析出那些是普通字符串，那些是模板代码。见 [`parse2array`](https://github.com/yukapril/template-render/blob/master/template.js#L27) 方法。\n2. 合成返回函数主体：可以直接写入字符串，也有人喜欢写入数组（最后执行`arr.join('')`）。要区分三种情况，普通字符串（直接简单处理返回就行），普通赋值语法（稍作处理返回），高级语法字符串（需要根据你自己定义的模板语法来写解释器）。见 [编译为函数](https://github.com/yukapril/template-render/blob/master/template.js#L92) 和 [高级语法处理 - syntaxParse](https://github.com/yukapril/template-render/blob/master/template.js#L67)。\n3. 将第二步的内容稍加处理，采用 `new Function` 返回就行了。见 [最后处理并返回](https://github.com/yukapril/template-render/blob/master/template.js#L109)\n\n还有一些经验可以借鉴：\n\n1. 使用`with`语法。这样可以方便的处理多层的对象，对上文来说，就是可以省去正则替换后中的`obj`了。这个灵感好像来源于Vue，我记得在哪里听说过。这个语法我没用过，曾经听说是效率低下，现在不太清楚。可以参见[这里](https://www.zhihu.com/question/49929356)。\n\n2. 我对逻辑循环等语法进行了设计，比如：\n\n```html\n{ {# each hobbys as item } }\n    <li>{ {$index+1} }/{ {$length} } - { {item} }</li>\n{ {# endeach } }\n```\n\n我也见有人这里干脆不设计，直接就用原生js语法，那么上面的三步过程，可以调整为两步：第一步解析，第二步当做js语法进行拼接处理。\n\n思路例子总归是例子，虽然功能可以用，但是还有许多需要完善的地方，比如要渲染的字符串是html怎么办，应该需要转义处理；模板换行等需要处理（例子里面我已经处理了），如果渲染的字段不是字符串而是函数要处理（例子里面部分位置已经处理），渲染数据缺失情况等处理。\n\n----\n\n通过做模板编译这个例子，就会感觉到React的JSX设计还是有道理的，方便解析，方便书写，就是不方便理解...","slug":"2017-2017-01-09-js-template-compile","published":1,"updated":"2020-03-02T07:16:34.634Z","comments":1,"photos":[],"link":"","_id":"cka5ik8ap001bnybgftprgmg2","content":"<p>看过很多模板，语法各不相同，执行效率也差异很大。在用angular 1 的时候，有一个名词是编译（$compile）。我很诧异，js作为解释型语言，为什么要编译？</p>\n<p>后来我也看过一些模板文章，终于明白的编译的用意。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"编译是什么\"><a href=\"#编译是什么\" class=\"headerlink\" title=\"编译是什么\"></a>编译是什么</h2><p>我认为编译是一种格式变成另一种格式的过程。编译会导致好的结果，比如书写简单的代码，编译出来复杂的代码；或者，提高代码的使用性能。</p>\n<p>比如说<code>jade</code> （现在改名叫做<code>pug</code>），就是编译从简单到复杂的过程</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p hello!</span><br></pre></td></tr></table></figure>\n\n<p>这和html也相差太远了吧？所以，需要用插件对其进行编译，编译成<code>&lt;p&gt;hello!&lt;/p&gt;</code>，之后我们就可以拿着编译后的内容随意使用了。</p>\n<p><strong>这里我更想说模板。</strong> 写一个最简单的模板。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello, &#123; &#123;name&#125; &#125;!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个模板用数据<code>{name:&#39;world&#39;}</code>渲染后的结果就是：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>来个问题，这个你怎么实现？</p>\n<h2 id=\"模板的简单实现\"><a href=\"#模板的简单实现\" class=\"headerlink\" title=\"模板的简单实现\"></a>模板的简单实现</h2><p>继续说上一个问题。来看看如何实现。</p>\n<p>如果项目非常简单，都不用任何框架，自己写一个就好。写法原理很简单：正则查找替换就行了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>template<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> template = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tpl, data</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> ret = tpl;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> data) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 遍历data每一个字段</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">if</span> (data.hasOwnProperty(item)) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> re = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'&#123; &#123;'</span> + item + <span class=\"string\">'&#125; &#125;'</span>, <span class=\"string\">'g'</span>);</span></span><br><span class=\"line\">                ret = ret.replace(re, data[item]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> ret;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> tpl = <span class=\"string\">\"&lt;p&gt;Hello, I'm &#123; &#123;name&#125; &#125;! &#123; &#123;age&#125; &#125; years old!&lt;/p&gt;\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> data = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        name: <span class=\"string\">'Jason'</span>,</span></span><br><span class=\"line\">        age: 25</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> result = template(tpl, data);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(result);</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个难度很低，直接正则替换就实现了，不做解释了。这个真的太简单了，因为除了正则替换字段，啥都干不了。</p>\n<p>不信看看这个简单的需求：</p>\n<p>模板：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello, I'm &#123; &#123;user.name&#125; &#125;! &#123; &#123;user.age&#125; &#125; years old!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>渲染数据是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">    user: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'Jason'</span>,</span><br><span class=\"line\">        age: <span class=\"number\">25</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还用上面的方法，就失效了。还用正则的话，就很难来做了。因为需要做语法/词法分析，看看大括号内写的是什么了。</p>\n<h2 id=\"模板编译\"><a href=\"#模板编译\" class=\"headerlink\" title=\"模板编译\"></a>模板编译</h2><p>我们先回到最简单的例子上来说。</p>\n<p>上面，我们实现的思路是，每次传入模板和数据，执行正则替换。假设10个字段，就是替换10次。这样性能也是个问题，因为每次都要跑循环去正则去替换。而且这还仅仅是单数据渲染，如果要是加上 <code>if</code> <code>for</code> 这样的语法可咋办？</p>\n<p>对于上面的这个模板，其实也可以这样来写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tpl = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;p&gt;Hello, I'm \"</span> + data.name + <span class=\"string\">\"! \"</span> + data.age + <span class=\"string\">\" years old!&lt;/p&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这么写的好处：只需一次<strong>编译</strong>，之后再使用只需直接填充数据即可。而且可以方便的支持 <code>data.user.name</code> 这种形式。</p>\n<p>这里涉及一个功能点，一般可能用不到，我点一下。</p>\n<h4 id=\"通过字符串生成函数\"><a href=\"#通过字符串生成函数\" class=\"headerlink\" title=\"通过字符串生成函数\"></a>通过字符串生成函数</h4><p>我们要生成一个函数，传入 <code>x</code> <code>y</code> ，执行 <code>return x + y</code>来获得求和功能。</p>\n<p>可以这样写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'x'</span>,<span class=\"string\">'y'</span>,<span class=\"string\">'return x + y'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fn);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"regexp\">/**/</span></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>new Function</code>，我们可以创造函数。下文会用到。</p>\n<h4 id=\"模板编译-1\"><a href=\"#模板编译-1\" class=\"headerlink\" title=\"模板编译\"></a>模板编译</h4><p>我们先整理下思路，应该是传入tpl模板字符串，通过 <code>new Function</code> 方式返回一个新函数。新函数接收一个对象，我叫做 <code>obj</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> template = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tpl</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 模板字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> retStr = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'obj'</span>, retStr);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>我们接下来要做的是，把<code>{ {xxx.xxx} }</code>部分都找出来，替换为<code>obj.xxx.xxx</code>就行了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> template = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tpl</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 模板字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> retStr = tpl.replace(<span class=\"regexp\">/&#123; &#123;(.+?)&#125; &#125;/g</span>, <span class=\"string\">'obj.$1'</span>);</span><br><span class=\"line\">    retStr = <span class=\"string\">'return \"'</span> + retStr + <span class=\"string\">'\"'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'obj'</span>, retStr);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> tpl = <span class=\"string\">\"&lt;p&gt;Hello, I'm &#123; &#123;user.name&#125; &#125;! &#123; &#123;user.age&#125; &#125; years old!&lt;/p&gt;\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> render = template(tpl);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(render);</span><br></pre></td></tr></table></figure>\n\n<p>这样写，发现函数是</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">anonymous</span>(<span class=\"params\">obj</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"regexp\">/**/</span></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">\"&lt;p&gt;Hello, I'm obj.user.name! obj.user.age years old!&lt;/p&gt;\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>很明显不行，至少应该把正则替换那句修改下，前后加上引号和加号才行。最终变成这样子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> template = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tpl</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 模板字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> retStr = tpl.replace(<span class=\"regexp\">/&#123; &#123;(.+?)&#125; &#125;/g</span>, <span class=\"string\">'\" + obj.$1 + \"'</span>);</span><br><span class=\"line\">    retStr = <span class=\"string\">'return \"'</span> + retStr + <span class=\"string\">'\"'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'obj'</span>, retStr);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> tpl = <span class=\"string\">\"&lt;p&gt;Hello, I'm &#123; &#123;user.name&#125; &#125;! &#123; &#123;user.age&#125; &#125; years old!&lt;/p&gt;\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">    user: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'Jason'</span>,</span><br><span class=\"line\">        age: <span class=\"number\">25</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> render = template(tpl);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(render);</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = render(data);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到结果正常了</p>\n<p>函数是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">anonymous</span>(<span class=\"params\">obj</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"regexp\">/**/</span></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">\"&lt;p&gt;Hello, I'm \"</span> + obj.user.name + <span class=\"string\">\"! \"</span> + obj.user.age + <span class=\"string\">\" years old!&lt;/p&gt;\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>渲染结果是：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello, I'm Jason! 25 years old!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"高级模板编译\"><a href=\"#高级模板编译\" class=\"headerlink\" title=\"高级模板编译\"></a>高级模板编译</h2><p>上面的例子，可以处理各种对象形式的赋值。我们还应该支持 <code>if</code> <code>for</code> 这样的语法。 这里我就不展开写了。代码我放在了 <a href=\"https://github.com/yukapril/template-render\" target=\"_blank\" rel=\"noopener\">Github - template-render</a>。代码是ES6的，可以放在最新的浏览器执行，或者<strong>自行</strong>去编译。</p>\n<p>我说下过程：</p>\n<ol>\n<li>字符串模板解析：要从模板中分析出那些是普通字符串，那些是模板代码。见 <a href=\"https://github.com/yukapril/template-render/blob/master/template.js#L27\" target=\"_blank\" rel=\"noopener\"><code>parse2array</code></a> 方法。</li>\n<li>合成返回函数主体：可以直接写入字符串，也有人喜欢写入数组（最后执行<code>arr.join(&#39;&#39;)</code>）。要区分三种情况，普通字符串（直接简单处理返回就行），普通赋值语法（稍作处理返回），高级语法字符串（需要根据你自己定义的模板语法来写解释器）。见 <a href=\"https://github.com/yukapril/template-render/blob/master/template.js#L92\" target=\"_blank\" rel=\"noopener\">编译为函数</a> 和 <a href=\"https://github.com/yukapril/template-render/blob/master/template.js#L67\" target=\"_blank\" rel=\"noopener\">高级语法处理 - syntaxParse</a>。</li>\n<li>将第二步的内容稍加处理，采用 <code>new Function</code> 返回就行了。见 <a href=\"https://github.com/yukapril/template-render/blob/master/template.js#L109\" target=\"_blank\" rel=\"noopener\">最后处理并返回</a></li>\n</ol>\n<p>还有一些经验可以借鉴：</p>\n<ol>\n<li><p>使用<code>with</code>语法。这样可以方便的处理多层的对象，对上文来说，就是可以省去正则替换后中的<code>obj</code>了。这个灵感好像来源于Vue，我记得在哪里听说过。这个语法我没用过，曾经听说是效率低下，现在不太清楚。可以参见<a href=\"https://www.zhihu.com/question/49929356\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n</li>\n<li><p>我对逻辑循环等语法进行了设计，比如：</p>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; &#123;# each hobbys as item &#125; &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123; &#123;$index+1&#125; &#125;/&#123; &#123;$length&#125; &#125; - &#123; &#123;item&#125; &#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">&#123; &#123;# endeach &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>我也见有人这里干脆不设计，直接就用原生js语法，那么上面的三步过程，可以调整为两步：第一步解析，第二步当做js语法进行拼接处理。</p>\n<p>思路例子总归是例子，虽然功能可以用，但是还有许多需要完善的地方，比如要渲染的字符串是html怎么办，应该需要转义处理；模板换行等需要处理（例子里面我已经处理了），如果渲染的字段不是字符串而是函数要处理（例子里面部分位置已经处理），渲染数据缺失情况等处理。</p>\n<hr>\n<p>通过做模板编译这个例子，就会感觉到React的JSX设计还是有道理的，方便解析，方便书写，就是不方便理解…</p>\n","site":{"data":{}},"excerpt":"<p>看过很多模板，语法各不相同，执行效率也差异很大。在用angular 1 的时候，有一个名词是编译（$compile）。我很诧异，js作为解释型语言，为什么要编译？</p>\n<p>后来我也看过一些模板文章，终于明白的编译的用意。</p>","more":"<h2 id=\"编译是什么\"><a href=\"#编译是什么\" class=\"headerlink\" title=\"编译是什么\"></a>编译是什么</h2><p>我认为编译是一种格式变成另一种格式的过程。编译会导致好的结果，比如书写简单的代码，编译出来复杂的代码；或者，提高代码的使用性能。</p>\n<p>比如说<code>jade</code> （现在改名叫做<code>pug</code>），就是编译从简单到复杂的过程</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p hello!</span><br></pre></td></tr></table></figure>\n\n<p>这和html也相差太远了吧？所以，需要用插件对其进行编译，编译成<code>&lt;p&gt;hello!&lt;/p&gt;</code>，之后我们就可以拿着编译后的内容随意使用了。</p>\n<p><strong>这里我更想说模板。</strong> 写一个最简单的模板。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello, &#123; &#123;name&#125; &#125;!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个模板用数据<code>{name:&#39;world&#39;}</code>渲染后的结果就是：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>来个问题，这个你怎么实现？</p>\n<h2 id=\"模板的简单实现\"><a href=\"#模板的简单实现\" class=\"headerlink\" title=\"模板的简单实现\"></a>模板的简单实现</h2><p>继续说上一个问题。来看看如何实现。</p>\n<p>如果项目非常简单，都不用任何框架，自己写一个就好。写法原理很简单：正则查找替换就行了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>template<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> template = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tpl, data</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> ret = tpl;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> data) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 遍历data每一个字段</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">if</span> (data.hasOwnProperty(item)) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> re = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'&#123; &#123;'</span> + item + <span class=\"string\">'&#125; &#125;'</span>, <span class=\"string\">'g'</span>);</span></span><br><span class=\"line\">                ret = ret.replace(re, data[item]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> ret;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> tpl = <span class=\"string\">\"&lt;p&gt;Hello, I'm &#123; &#123;name&#125; &#125;! &#123; &#123;age&#125; &#125; years old!&lt;/p&gt;\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> data = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        name: <span class=\"string\">'Jason'</span>,</span></span><br><span class=\"line\">        age: 25</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> result = template(tpl, data);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(result);</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个难度很低，直接正则替换就实现了，不做解释了。这个真的太简单了，因为除了正则替换字段，啥都干不了。</p>\n<p>不信看看这个简单的需求：</p>\n<p>模板：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello, I'm &#123; &#123;user.name&#125; &#125;! &#123; &#123;user.age&#125; &#125; years old!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>渲染数据是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">    user: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'Jason'</span>,</span><br><span class=\"line\">        age: <span class=\"number\">25</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还用上面的方法，就失效了。还用正则的话，就很难来做了。因为需要做语法/词法分析，看看大括号内写的是什么了。</p>\n<h2 id=\"模板编译\"><a href=\"#模板编译\" class=\"headerlink\" title=\"模板编译\"></a>模板编译</h2><p>我们先回到最简单的例子上来说。</p>\n<p>上面，我们实现的思路是，每次传入模板和数据，执行正则替换。假设10个字段，就是替换10次。这样性能也是个问题，因为每次都要跑循环去正则去替换。而且这还仅仅是单数据渲染，如果要是加上 <code>if</code> <code>for</code> 这样的语法可咋办？</p>\n<p>对于上面的这个模板，其实也可以这样来写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tpl = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;p&gt;Hello, I'm \"</span> + data.name + <span class=\"string\">\"! \"</span> + data.age + <span class=\"string\">\" years old!&lt;/p&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这么写的好处：只需一次<strong>编译</strong>，之后再使用只需直接填充数据即可。而且可以方便的支持 <code>data.user.name</code> 这种形式。</p>\n<p>这里涉及一个功能点，一般可能用不到，我点一下。</p>\n<h4 id=\"通过字符串生成函数\"><a href=\"#通过字符串生成函数\" class=\"headerlink\" title=\"通过字符串生成函数\"></a>通过字符串生成函数</h4><p>我们要生成一个函数，传入 <code>x</code> <code>y</code> ，执行 <code>return x + y</code>来获得求和功能。</p>\n<p>可以这样写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'x'</span>,<span class=\"string\">'y'</span>,<span class=\"string\">'return x + y'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fn);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"regexp\">/**/</span></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>new Function</code>，我们可以创造函数。下文会用到。</p>\n<h4 id=\"模板编译-1\"><a href=\"#模板编译-1\" class=\"headerlink\" title=\"模板编译\"></a>模板编译</h4><p>我们先整理下思路，应该是传入tpl模板字符串，通过 <code>new Function</code> 方式返回一个新函数。新函数接收一个对象，我叫做 <code>obj</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> template = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tpl</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 模板字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> retStr = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'obj'</span>, retStr);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>我们接下来要做的是，把<code>{ {xxx.xxx} }</code>部分都找出来，替换为<code>obj.xxx.xxx</code>就行了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> template = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tpl</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 模板字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> retStr = tpl.replace(<span class=\"regexp\">/&#123; &#123;(.+?)&#125; &#125;/g</span>, <span class=\"string\">'obj.$1'</span>);</span><br><span class=\"line\">    retStr = <span class=\"string\">'return \"'</span> + retStr + <span class=\"string\">'\"'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'obj'</span>, retStr);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> tpl = <span class=\"string\">\"&lt;p&gt;Hello, I'm &#123; &#123;user.name&#125; &#125;! &#123; &#123;user.age&#125; &#125; years old!&lt;/p&gt;\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> render = template(tpl);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(render);</span><br></pre></td></tr></table></figure>\n\n<p>这样写，发现函数是</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">anonymous</span>(<span class=\"params\">obj</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"regexp\">/**/</span></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">\"&lt;p&gt;Hello, I'm obj.user.name! obj.user.age years old!&lt;/p&gt;\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>很明显不行，至少应该把正则替换那句修改下，前后加上引号和加号才行。最终变成这样子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> template = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tpl</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 模板字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> retStr = tpl.replace(<span class=\"regexp\">/&#123; &#123;(.+?)&#125; &#125;/g</span>, <span class=\"string\">'\" + obj.$1 + \"'</span>);</span><br><span class=\"line\">    retStr = <span class=\"string\">'return \"'</span> + retStr + <span class=\"string\">'\"'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'obj'</span>, retStr);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> tpl = <span class=\"string\">\"&lt;p&gt;Hello, I'm &#123; &#123;user.name&#125; &#125;! &#123; &#123;user.age&#125; &#125; years old!&lt;/p&gt;\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">    user: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'Jason'</span>,</span><br><span class=\"line\">        age: <span class=\"number\">25</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> render = template(tpl);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(render);</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = render(data);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到结果正常了</p>\n<p>函数是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">anonymous</span>(<span class=\"params\">obj</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"regexp\">/**/</span></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">\"&lt;p&gt;Hello, I'm \"</span> + obj.user.name + <span class=\"string\">\"! \"</span> + obj.user.age + <span class=\"string\">\" years old!&lt;/p&gt;\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>渲染结果是：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello, I'm Jason! 25 years old!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"高级模板编译\"><a href=\"#高级模板编译\" class=\"headerlink\" title=\"高级模板编译\"></a>高级模板编译</h2><p>上面的例子，可以处理各种对象形式的赋值。我们还应该支持 <code>if</code> <code>for</code> 这样的语法。 这里我就不展开写了。代码我放在了 <a href=\"https://github.com/yukapril/template-render\" target=\"_blank\" rel=\"noopener\">Github - template-render</a>。代码是ES6的，可以放在最新的浏览器执行，或者<strong>自行</strong>去编译。</p>\n<p>我说下过程：</p>\n<ol>\n<li>字符串模板解析：要从模板中分析出那些是普通字符串，那些是模板代码。见 <a href=\"https://github.com/yukapril/template-render/blob/master/template.js#L27\" target=\"_blank\" rel=\"noopener\"><code>parse2array</code></a> 方法。</li>\n<li>合成返回函数主体：可以直接写入字符串，也有人喜欢写入数组（最后执行<code>arr.join(&#39;&#39;)</code>）。要区分三种情况，普通字符串（直接简单处理返回就行），普通赋值语法（稍作处理返回），高级语法字符串（需要根据你自己定义的模板语法来写解释器）。见 <a href=\"https://github.com/yukapril/template-render/blob/master/template.js#L92\" target=\"_blank\" rel=\"noopener\">编译为函数</a> 和 <a href=\"https://github.com/yukapril/template-render/blob/master/template.js#L67\" target=\"_blank\" rel=\"noopener\">高级语法处理 - syntaxParse</a>。</li>\n<li>将第二步的内容稍加处理，采用 <code>new Function</code> 返回就行了。见 <a href=\"https://github.com/yukapril/template-render/blob/master/template.js#L109\" target=\"_blank\" rel=\"noopener\">最后处理并返回</a></li>\n</ol>\n<p>还有一些经验可以借鉴：</p>\n<ol>\n<li><p>使用<code>with</code>语法。这样可以方便的处理多层的对象，对上文来说，就是可以省去正则替换后中的<code>obj</code>了。这个灵感好像来源于Vue，我记得在哪里听说过。这个语法我没用过，曾经听说是效率低下，现在不太清楚。可以参见<a href=\"https://www.zhihu.com/question/49929356\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n</li>\n<li><p>我对逻辑循环等语法进行了设计，比如：</p>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; &#123;# each hobbys as item &#125; &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123; &#123;$index+1&#125; &#125;/&#123; &#123;$length&#125; &#125; - &#123; &#123;item&#125; &#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">&#123; &#123;# endeach &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>我也见有人这里干脆不设计，直接就用原生js语法，那么上面的三步过程，可以调整为两步：第一步解析，第二步当做js语法进行拼接处理。</p>\n<p>思路例子总归是例子，虽然功能可以用，但是还有许多需要完善的地方，比如要渲染的字符串是html怎么办，应该需要转义处理；模板换行等需要处理（例子里面我已经处理了），如果渲染的字段不是字符串而是函数要处理（例子里面部分位置已经处理），渲染数据缺失情况等处理。</p>\n<hr>\n<p>通过做模板编译这个例子，就会感觉到React的JSX设计还是有道理的，方便解析，方便书写，就是不方便理解…</p>"},{"layout":"post","title":"webpack入门-2","date":"2017-01-19T22:50:00.000Z","_content":"\n这次，研究一些稍微复杂一点的。\n\n<!-- more -->\n\n之前的操作，我们都是用ES5语法写的，打包直接进行合并/压缩就可以了。仅仅是让`webpack`负责处理代码`require`依赖而已。\n\n> 代码合并例子可以体现，但是代码压缩之前的例子里面是没有的。\n\n我们平时接触的项目，会远远比这复杂。\n\n比如你写angular2，那么它使用`typescript`，React呢，它用`JSX`，或者，你更喜欢原生的代码，使用ES6来书写。\n\n不仅如此，CSS也有很多“变种”，比如说`LESS`、`SASS`等。\n\n再或者，你希望仅仅书写\n\n```css\ntransition: all 2s;\n```\n\n但是最终代码希望是\n\n```css\n-webkit-transition: all 2s;\n-moz-transition: all 2s;\ntransition: all 2s;\n```\n\n这样子，自动帮你补全兼容处理。\n\n这时候，就需要对**源代码进行加工**，加工完之后，变成普通ES5代码或者CSS之后，在进行之前的打包工作。\n\n这就是`webpack`的`loaders`。\n\n## 所有例子的代码位置\n\n可以访问 [github](https://github.com/yukapril/learning/tree/master/webpack-demo) 进行查阅。\n\n## DEMO4 体验一次loaders\n\n首先创建项目工程，建立`demo4`目录\n\n建立一个`./src/mian.js`文件：\n\n```js\nvar hello = () => {\n    console.log('hello loaders!');\n};\n\n```\n我们写一句最简单的ES6语法——箭头函数。这样，打包之后，我们可以直接查看生成的JS就可以了，都不用镶嵌到html中在浏览器中查看效果~怎么样？岂不是很简单？\n\n下面，我们要做的事情是，配置`webpack.config.js`，越简单越好！\n\n我们在原有的基础上，进行精简。之后，再试试我们的`loaders`功能。\n\n等等！我们要把我们写的`./src/main.js`先转换为普通的ES5代码，才能使用我们之前的配置方案。\n\n这时候，需要引入其他组件了，根据经验，将ES6转换为ES5，大家用的比较多的是 `babel` 。我们需要用 `npm` 安装它。如果你不会用`npm`，请先查阅最基础的文章。\n\n首先在我们的`demo4`项目里，\n\n* 创建npm配置文件：`npm init`，使用默认参数即可\n* 安装babel插件：`npm install -save-dev babel-core babel-preset-es2015`\n* 安装webpack的babel适配器：`npm install -save-dev babel-loader`\n\n其中，`babel-core`是babel的核心文件，它可以对JS进行转码。但是转成什么呢，我们需要`babel-preset-es2015`，即ES5代码。\n\n为什么还要安装`babel-loader`呢？因为`babel`自己是一个独立的工具，可以直接运行的。我们想在 `webpack` 中应用它，就需要对它做兼容处理，`babel-loader` 就是这个兼容器，相当于连接桥。`webpack`下基本上所有的loaders（可以理解为工具/连接桥），都是`xxx-loader`这种形式的。\n\n恩，就这些，搞定了。检查下你的`package.json`文件，是不是和下面的很类似，应该不缺少任何一行！当然，版本号可以和我的有出入。\n\n```json\n{\n  \"name\": \"demo4\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"webpack.config.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"babel-core\": \"^6.21.0\",\n    \"babel-loader\": \"^6.2.10\",\n    \"babel-preset-es2015\": \"^6.18.0\"\n  }\n}\n```\n\n接下来，我们来写webpack配置文件`webpack.config.js`：\n\n```js\nmodule.exports = {\n    // 入口文件配置\n    entry: './src/main.js',\n    // 文件导出的配置\n    output: {\n        path: './build',\n        filename: 'app.js'\n    },\n    module: {\n        loaders: [{\n            test: /\\.js$/,\n            loader: 'babel-loader'\n        }]\n    },\n    babel: {\n        presets: ['es2015']\n    }\n}\n```\n\n`loaders`是一个数组，因为它可以配置多种处理器。每一种处理器，是一个对象。\n\n处理器对象要包括`test`字段，用正则或者路径进行匹配要处理的文件，比如上面这个，匹配所有`.js`结尾的文件。匹配成功后，会用`loader`内的处理器进行处理。我们这里用`babel-loader`。\n\n`loader`需要说明的是：\n\n* 它可以是字符串，也可以直接是数组。如果是字符串，使用`!`进行分割。\n* 它的插件默认都是`xxx-loader`形式，可以简写为`xxx`。比如上面的例子简写是`loader: 'babel'`。\n* 如果是多个loader，那么处理顺序是**从右往左**。例如 `loader: 'aaa!bbb!ccc'` ，那么相当于先进行 `ccc-loader` 处理，之后是 `bbb-loader` ，最后是 `aaa-loader` 。\n\n`babel`需要有自己的配置文件。我们可以在根目录下创建一个`.babelrc`的json文件，或者在上面的文件内配置`babel`字段。甚至还有其他的配置方法（比如在当前处理器对象中，加入`query`字段），反正条条大路通罗马。\n\n具体的插件如何配置，需要参考插件的文档。\n\n好了，不需要在进行其他配置了，我们直接当前目录下执行webpack命令就可以了：`webpack`\n\n程序自动生成了`./build/app.js`。我们只需要打开查看最后一点点代码：\n\n```js\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n    'use strict';\n\n    var hello = function hello() {\n        console.log('hello loaders!');\n    };\n\n/***/ }\n/******/ ]);\n```\n\n你看，babel已经帮我们把ES6转化为ES5了！多么神奇！\n\n\n## loaders的include和exclude参数\n\n这个参数我也查过一些文档，就是说在处理时候包含/排除那些规则的文件，但是目前没有测试成功具体的用法。网络上也没查到有什么特殊的用意。\n\n网上都是这么用的：\n\n```js\n{\n    module: {\n        loaders: [{\n            test: /\\.js$/,\n            loader: 'babel-loader',\n            include: [\n                path.resolve(__dirname, \"app/src\"),\n                path.resolve(__dirname, \"app/test\")\n            ],\n            exclude: /node_modules/\n        }]\n    }\n}\n```\n\n曾经测试过，加入`exclude`后确实管用，可以让打出来的包更小（但是不会差别很大），但是原因还不详。\n\n## DEMO5 编写自己的loader\n\n这次，我们自己简单的实现一个loader，来熟悉下loader的处理流程。\n\n这里，我不做过多的扩展字段说明，可以参考例子代码中的注释。\n\n新建一个目录，叫做demo5。入口文件 `./src/main.js` 如下：由于我们不打算加入babel，所以处理不了ES6语法，我们这次试用ES5的语法。\n\n```js\nvar someComponent = require('./some-component');\nvar foo = function () {\n    console.log('hi');\n};\nfoo();\nsomeComponent();\n```\n\n引用的文件`./src/some-component.js` 如下：\n\n```js\nmodule.exports = function(){\n    console.log('this is some-component');\n};\n```\n\n现在，我们做两个loader，这样可以更清楚的看到它的处理流程。第一个是针对当前处理的文件，通过注释的形式，给当前代码段加入文件名和版本号，第二个更简单，直接在当前代码段最前面加上 `'ususe strict'` 标志。\n\n先要写好 `webpack.config.js`文件：\n\n```js\nvar path = require('path');\n\nmodule.exports = {\n    entry: './src/main.js',\n    output: {\n        path: './build',\n        filename: 'app.js'\n    },\n    resolve: {\n        extentions: ['js']\n    },\n    module: {\n        loaders: [{\n            test: /\\.js$/,\n            loader: [path.resolve(__dirname, './strict-loader'), path.resolve(__dirname, './comment-loader')].join('!'),\n            //自有loader需要使用绝对路径，否则代码中的require部分后的代码，将无法找到！\n        }]\n    },\n    commentLoader: {\n        str: 'v1.0'\n    }\n}\n\n```\n\n这里要注意的是：\n\n* 引用的每个loader，需要使用绝对路径，这里我用 `path.resolve` 来解决。使用相对路径，require会找不到的！\n* loader如果是字符串或者数组，一定是从右往左写的。\n* `commnetLoader`字段，我们稍后学习在loader里面进行读取使用。相当于是loader的参数。\n\n#### 给代码段加入文件名和版本号注释\n\n我们就在根目录建立`./comment-loader.js`文件：\n\n```js\nconst path = require('path');\n\nmodule.exports = function (source) {\n    console.log('====进入comment模块====');\n    console.log(source);\n    console.log('======================');\n\n    var param = this.options['commentLoader'] || {};\n    var str = param.str || '';\n    var file = path.parse(this.resourcePath);\n    var ret = '\\n//--------' + file.base + ' ' + str + '--------\\n' + source + '\\n//------------------------';\n\n    //return ret;//同步模式，单参数返回（只能返回处理后的代码）\n    //this.callback(null, ret, null); //同步模式，多参数返回，第一个参数不详，第二个为处理后的代码，第三个参数为map\n    var cb = this.async();//异步模式，调用async函数\n\n    setTimeout(() => {\n        cb(null, ret, null);\n    }, 2000);\n\n};\n```\n\n**解释说明**\n\n所有的loader可以接收两个参数，分别为 `source` `map`，第一个是当前的源代码，第二个是sourceMap。第二个一般用不到，这里我们省略。\n\n当前环境内的 `this` ，比较复杂，是webpack提供的一些方法。\n\n通过打印 `source` 参数，我们可以看到内容如下：\n\n```\n====进入comment模块====\nvar someComponent = require('./some-component');\nvar foo = function () {\n    console.log('hi');\n};\nfoo();\nsomeComponent();\n======================\n\n====进入comment模块====\nmodule.exports = function(){\n    console.log('this is some-component');\n};\n======================\n```\n\n可以看到，访问了几个符合条件的文件，就要被执行几次。而参数 `source` 就是单纯的文件内容而已。\n\n之后，我发现 `this.options` 内包含了整个`webpack.config.js`内容，故直接采用 `var param = this.options['commentLoader'] || {};` 方式获取 `commentLoader` 字段内容，当然做了兼容处理，如果不存在则默认配置一个对象。\n\n下文也是， `var str = param.str || ''` ，读取 `param.str`字段，不存在则为空。\n\n通过测试发现， `this.resourcePath` 可以获得当前正在处理的文件路径。我使用NodeJS的 `path.parse` 进行解析。下文就可以直接用 `file.base` 来获得文件名了。\n\n最后，进行返回数据。\n\nloader返回数据的三种方案：\n\n* 代码是同步模式，可以最后直接返回，比如例子可以写成： `return ret;`。这个很明显有个缺陷，那就是：只能返回一个代码字符串！最上面说了，可以传入2个参数，那么第二个map参数呢？这个方法解决不了。\n* 代码是同步模式，可以解决直接 `return` 的单参数问题： `this.callback(null, ret, null)` 。第一个参数不详，第二个为处理后的代码，第三个参数为map。\n* 代码是异步模式，首先需要在同步代码中，调用 `var cb = this.async()` 。之后就可以在异步中调用 `cb()` 了。参数和同步模式一样的。\n\n上面的例子，为异步模式，意思为延时两秒后，进行回调。\n\n这个看懂之后，就好办了。我们来写`./strict-loader.js`文件：\n\n```js\nmodule.exports = function (source) {\n    console.log('====进入strict模块====');\n    console.log( source);\n    console.log('======================');\n    return '\\'use strict\\';\\n' + source;\n};\n```\n\n这个就不解释了。\n\n最终，我们执行webpack，首先看看终端中的显示内容：\n\n```\n====进入comment模块====\nvar someComponent = require('./some-component');\nvar foo = function () {\n    console.log('hi');\n};\nfoo();\nsomeComponent();\n======================\n====进入strict模块====\n\n//--------main.js v1.0--------\nvar someComponent = require('./some-component');\nvar foo = function () {\n    console.log('hi');\n};\nfoo();\nsomeComponent();\n//------------------------\n======================\n\n\n====进入comment模块====\nmodule.exports = function(){\n    console.log('this is some-component');\n};\n======================\n====进入strict模块====\n\n//--------some-component.js v1.0--------\nmodule.exports = function(){\n    console.log('this is some-component');\n};\n//------------------------\n======================\n```\n\n可以很清晰的看到，从入口开始，遇到一个符合条件的文件，开始进入loader处理。首先将源码带入 `comment-loader` ，之后将输出的代码带入 `strict-loader`。这样完成一个文件之后，在进行下一个文件。\n\n再看看最终生成的代码：\n\n```js\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t//--------main.js v1.0--------\n\tvar someComponent = __webpack_require__(1);\n\tvar foo = function () {\n\t    console.log('hi');\n\t};\n\tfoo();\n\tsomeComponent();\n\t//------------------------\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\t//--------some-component.js v1.0--------\n\tmodule.exports = function(){\n\t    console.log('this is some-component');\n\t};\n\t//------------------------\n\n/***/ }\n/******/ ]);\n```\n\n也是非常符合预期的。每个代码模块标有文件名和版本号，最上面还有严格模式标签。\n\n完成。","source":"_posts/2017/2017-01-19-webpack-2.md","raw":"---\nlayout: post\ntitle: \"webpack入门-2\"\ndate: 2017-01-19 22:50:00 GMT+0800\ncategories: [前端]\ntags:  [webpack]\n---\n\n这次，研究一些稍微复杂一点的。\n\n<!-- more -->\n\n之前的操作，我们都是用ES5语法写的，打包直接进行合并/压缩就可以了。仅仅是让`webpack`负责处理代码`require`依赖而已。\n\n> 代码合并例子可以体现，但是代码压缩之前的例子里面是没有的。\n\n我们平时接触的项目，会远远比这复杂。\n\n比如你写angular2，那么它使用`typescript`，React呢，它用`JSX`，或者，你更喜欢原生的代码，使用ES6来书写。\n\n不仅如此，CSS也有很多“变种”，比如说`LESS`、`SASS`等。\n\n再或者，你希望仅仅书写\n\n```css\ntransition: all 2s;\n```\n\n但是最终代码希望是\n\n```css\n-webkit-transition: all 2s;\n-moz-transition: all 2s;\ntransition: all 2s;\n```\n\n这样子，自动帮你补全兼容处理。\n\n这时候，就需要对**源代码进行加工**，加工完之后，变成普通ES5代码或者CSS之后，在进行之前的打包工作。\n\n这就是`webpack`的`loaders`。\n\n## 所有例子的代码位置\n\n可以访问 [github](https://github.com/yukapril/learning/tree/master/webpack-demo) 进行查阅。\n\n## DEMO4 体验一次loaders\n\n首先创建项目工程，建立`demo4`目录\n\n建立一个`./src/mian.js`文件：\n\n```js\nvar hello = () => {\n    console.log('hello loaders!');\n};\n\n```\n我们写一句最简单的ES6语法——箭头函数。这样，打包之后，我们可以直接查看生成的JS就可以了，都不用镶嵌到html中在浏览器中查看效果~怎么样？岂不是很简单？\n\n下面，我们要做的事情是，配置`webpack.config.js`，越简单越好！\n\n我们在原有的基础上，进行精简。之后，再试试我们的`loaders`功能。\n\n等等！我们要把我们写的`./src/main.js`先转换为普通的ES5代码，才能使用我们之前的配置方案。\n\n这时候，需要引入其他组件了，根据经验，将ES6转换为ES5，大家用的比较多的是 `babel` 。我们需要用 `npm` 安装它。如果你不会用`npm`，请先查阅最基础的文章。\n\n首先在我们的`demo4`项目里，\n\n* 创建npm配置文件：`npm init`，使用默认参数即可\n* 安装babel插件：`npm install -save-dev babel-core babel-preset-es2015`\n* 安装webpack的babel适配器：`npm install -save-dev babel-loader`\n\n其中，`babel-core`是babel的核心文件，它可以对JS进行转码。但是转成什么呢，我们需要`babel-preset-es2015`，即ES5代码。\n\n为什么还要安装`babel-loader`呢？因为`babel`自己是一个独立的工具，可以直接运行的。我们想在 `webpack` 中应用它，就需要对它做兼容处理，`babel-loader` 就是这个兼容器，相当于连接桥。`webpack`下基本上所有的loaders（可以理解为工具/连接桥），都是`xxx-loader`这种形式的。\n\n恩，就这些，搞定了。检查下你的`package.json`文件，是不是和下面的很类似，应该不缺少任何一行！当然，版本号可以和我的有出入。\n\n```json\n{\n  \"name\": \"demo4\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"webpack.config.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"babel-core\": \"^6.21.0\",\n    \"babel-loader\": \"^6.2.10\",\n    \"babel-preset-es2015\": \"^6.18.0\"\n  }\n}\n```\n\n接下来，我们来写webpack配置文件`webpack.config.js`：\n\n```js\nmodule.exports = {\n    // 入口文件配置\n    entry: './src/main.js',\n    // 文件导出的配置\n    output: {\n        path: './build',\n        filename: 'app.js'\n    },\n    module: {\n        loaders: [{\n            test: /\\.js$/,\n            loader: 'babel-loader'\n        }]\n    },\n    babel: {\n        presets: ['es2015']\n    }\n}\n```\n\n`loaders`是一个数组，因为它可以配置多种处理器。每一种处理器，是一个对象。\n\n处理器对象要包括`test`字段，用正则或者路径进行匹配要处理的文件，比如上面这个，匹配所有`.js`结尾的文件。匹配成功后，会用`loader`内的处理器进行处理。我们这里用`babel-loader`。\n\n`loader`需要说明的是：\n\n* 它可以是字符串，也可以直接是数组。如果是字符串，使用`!`进行分割。\n* 它的插件默认都是`xxx-loader`形式，可以简写为`xxx`。比如上面的例子简写是`loader: 'babel'`。\n* 如果是多个loader，那么处理顺序是**从右往左**。例如 `loader: 'aaa!bbb!ccc'` ，那么相当于先进行 `ccc-loader` 处理，之后是 `bbb-loader` ，最后是 `aaa-loader` 。\n\n`babel`需要有自己的配置文件。我们可以在根目录下创建一个`.babelrc`的json文件，或者在上面的文件内配置`babel`字段。甚至还有其他的配置方法（比如在当前处理器对象中，加入`query`字段），反正条条大路通罗马。\n\n具体的插件如何配置，需要参考插件的文档。\n\n好了，不需要在进行其他配置了，我们直接当前目录下执行webpack命令就可以了：`webpack`\n\n程序自动生成了`./build/app.js`。我们只需要打开查看最后一点点代码：\n\n```js\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n    'use strict';\n\n    var hello = function hello() {\n        console.log('hello loaders!');\n    };\n\n/***/ }\n/******/ ]);\n```\n\n你看，babel已经帮我们把ES6转化为ES5了！多么神奇！\n\n\n## loaders的include和exclude参数\n\n这个参数我也查过一些文档，就是说在处理时候包含/排除那些规则的文件，但是目前没有测试成功具体的用法。网络上也没查到有什么特殊的用意。\n\n网上都是这么用的：\n\n```js\n{\n    module: {\n        loaders: [{\n            test: /\\.js$/,\n            loader: 'babel-loader',\n            include: [\n                path.resolve(__dirname, \"app/src\"),\n                path.resolve(__dirname, \"app/test\")\n            ],\n            exclude: /node_modules/\n        }]\n    }\n}\n```\n\n曾经测试过，加入`exclude`后确实管用，可以让打出来的包更小（但是不会差别很大），但是原因还不详。\n\n## DEMO5 编写自己的loader\n\n这次，我们自己简单的实现一个loader，来熟悉下loader的处理流程。\n\n这里，我不做过多的扩展字段说明，可以参考例子代码中的注释。\n\n新建一个目录，叫做demo5。入口文件 `./src/main.js` 如下：由于我们不打算加入babel，所以处理不了ES6语法，我们这次试用ES5的语法。\n\n```js\nvar someComponent = require('./some-component');\nvar foo = function () {\n    console.log('hi');\n};\nfoo();\nsomeComponent();\n```\n\n引用的文件`./src/some-component.js` 如下：\n\n```js\nmodule.exports = function(){\n    console.log('this is some-component');\n};\n```\n\n现在，我们做两个loader，这样可以更清楚的看到它的处理流程。第一个是针对当前处理的文件，通过注释的形式，给当前代码段加入文件名和版本号，第二个更简单，直接在当前代码段最前面加上 `'ususe strict'` 标志。\n\n先要写好 `webpack.config.js`文件：\n\n```js\nvar path = require('path');\n\nmodule.exports = {\n    entry: './src/main.js',\n    output: {\n        path: './build',\n        filename: 'app.js'\n    },\n    resolve: {\n        extentions: ['js']\n    },\n    module: {\n        loaders: [{\n            test: /\\.js$/,\n            loader: [path.resolve(__dirname, './strict-loader'), path.resolve(__dirname, './comment-loader')].join('!'),\n            //自有loader需要使用绝对路径，否则代码中的require部分后的代码，将无法找到！\n        }]\n    },\n    commentLoader: {\n        str: 'v1.0'\n    }\n}\n\n```\n\n这里要注意的是：\n\n* 引用的每个loader，需要使用绝对路径，这里我用 `path.resolve` 来解决。使用相对路径，require会找不到的！\n* loader如果是字符串或者数组，一定是从右往左写的。\n* `commnetLoader`字段，我们稍后学习在loader里面进行读取使用。相当于是loader的参数。\n\n#### 给代码段加入文件名和版本号注释\n\n我们就在根目录建立`./comment-loader.js`文件：\n\n```js\nconst path = require('path');\n\nmodule.exports = function (source) {\n    console.log('====进入comment模块====');\n    console.log(source);\n    console.log('======================');\n\n    var param = this.options['commentLoader'] || {};\n    var str = param.str || '';\n    var file = path.parse(this.resourcePath);\n    var ret = '\\n//--------' + file.base + ' ' + str + '--------\\n' + source + '\\n//------------------------';\n\n    //return ret;//同步模式，单参数返回（只能返回处理后的代码）\n    //this.callback(null, ret, null); //同步模式，多参数返回，第一个参数不详，第二个为处理后的代码，第三个参数为map\n    var cb = this.async();//异步模式，调用async函数\n\n    setTimeout(() => {\n        cb(null, ret, null);\n    }, 2000);\n\n};\n```\n\n**解释说明**\n\n所有的loader可以接收两个参数，分别为 `source` `map`，第一个是当前的源代码，第二个是sourceMap。第二个一般用不到，这里我们省略。\n\n当前环境内的 `this` ，比较复杂，是webpack提供的一些方法。\n\n通过打印 `source` 参数，我们可以看到内容如下：\n\n```\n====进入comment模块====\nvar someComponent = require('./some-component');\nvar foo = function () {\n    console.log('hi');\n};\nfoo();\nsomeComponent();\n======================\n\n====进入comment模块====\nmodule.exports = function(){\n    console.log('this is some-component');\n};\n======================\n```\n\n可以看到，访问了几个符合条件的文件，就要被执行几次。而参数 `source` 就是单纯的文件内容而已。\n\n之后，我发现 `this.options` 内包含了整个`webpack.config.js`内容，故直接采用 `var param = this.options['commentLoader'] || {};` 方式获取 `commentLoader` 字段内容，当然做了兼容处理，如果不存在则默认配置一个对象。\n\n下文也是， `var str = param.str || ''` ，读取 `param.str`字段，不存在则为空。\n\n通过测试发现， `this.resourcePath` 可以获得当前正在处理的文件路径。我使用NodeJS的 `path.parse` 进行解析。下文就可以直接用 `file.base` 来获得文件名了。\n\n最后，进行返回数据。\n\nloader返回数据的三种方案：\n\n* 代码是同步模式，可以最后直接返回，比如例子可以写成： `return ret;`。这个很明显有个缺陷，那就是：只能返回一个代码字符串！最上面说了，可以传入2个参数，那么第二个map参数呢？这个方法解决不了。\n* 代码是同步模式，可以解决直接 `return` 的单参数问题： `this.callback(null, ret, null)` 。第一个参数不详，第二个为处理后的代码，第三个参数为map。\n* 代码是异步模式，首先需要在同步代码中，调用 `var cb = this.async()` 。之后就可以在异步中调用 `cb()` 了。参数和同步模式一样的。\n\n上面的例子，为异步模式，意思为延时两秒后，进行回调。\n\n这个看懂之后，就好办了。我们来写`./strict-loader.js`文件：\n\n```js\nmodule.exports = function (source) {\n    console.log('====进入strict模块====');\n    console.log( source);\n    console.log('======================');\n    return '\\'use strict\\';\\n' + source;\n};\n```\n\n这个就不解释了。\n\n最终，我们执行webpack，首先看看终端中的显示内容：\n\n```\n====进入comment模块====\nvar someComponent = require('./some-component');\nvar foo = function () {\n    console.log('hi');\n};\nfoo();\nsomeComponent();\n======================\n====进入strict模块====\n\n//--------main.js v1.0--------\nvar someComponent = require('./some-component');\nvar foo = function () {\n    console.log('hi');\n};\nfoo();\nsomeComponent();\n//------------------------\n======================\n\n\n====进入comment模块====\nmodule.exports = function(){\n    console.log('this is some-component');\n};\n======================\n====进入strict模块====\n\n//--------some-component.js v1.0--------\nmodule.exports = function(){\n    console.log('this is some-component');\n};\n//------------------------\n======================\n```\n\n可以很清晰的看到，从入口开始，遇到一个符合条件的文件，开始进入loader处理。首先将源码带入 `comment-loader` ，之后将输出的代码带入 `strict-loader`。这样完成一个文件之后，在进行下一个文件。\n\n再看看最终生成的代码：\n\n```js\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t//--------main.js v1.0--------\n\tvar someComponent = __webpack_require__(1);\n\tvar foo = function () {\n\t    console.log('hi');\n\t};\n\tfoo();\n\tsomeComponent();\n\t//------------------------\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\t//--------some-component.js v1.0--------\n\tmodule.exports = function(){\n\t    console.log('this is some-component');\n\t};\n\t//------------------------\n\n/***/ }\n/******/ ]);\n```\n\n也是非常符合预期的。每个代码模块标有文件名和版本号，最上面还有严格模式标签。\n\n完成。","slug":"2017-2017-01-19-webpack-2","published":1,"updated":"2020-03-02T07:16:34.635Z","comments":1,"photos":[],"link":"","_id":"cka5ik8aq001enybgkij23hpk","content":"<p>这次，研究一些稍微复杂一点的。</p>\n<a id=\"more\"></a>\n\n<p>之前的操作，我们都是用ES5语法写的，打包直接进行合并/压缩就可以了。仅仅是让<code>webpack</code>负责处理代码<code>require</code>依赖而已。</p>\n<blockquote>\n<p>代码合并例子可以体现，但是代码压缩之前的例子里面是没有的。</p>\n</blockquote>\n<p>我们平时接触的项目，会远远比这复杂。</p>\n<p>比如你写angular2，那么它使用<code>typescript</code>，React呢，它用<code>JSX</code>，或者，你更喜欢原生的代码，使用ES6来书写。</p>\n<p>不仅如此，CSS也有很多“变种”，比如说<code>LESS</code>、<code>SASS</code>等。</p>\n<p>再或者，你希望仅仅书写</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transition</span>: <span class=\"selector-tag\">all</span> 2<span class=\"selector-tag\">s</span>;</span><br></pre></td></tr></table></figure>\n\n<p>但是最终代码希望是</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">-webkit-transition</span>: <span class=\"selector-tag\">all</span> 2<span class=\"selector-tag\">s</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">-moz-transition</span>: <span class=\"selector-tag\">all</span> 2<span class=\"selector-tag\">s</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">transition</span>: <span class=\"selector-tag\">all</span> 2<span class=\"selector-tag\">s</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这样子，自动帮你补全兼容处理。</p>\n<p>这时候，就需要对<strong>源代码进行加工</strong>，加工完之后，变成普通ES5代码或者CSS之后，在进行之前的打包工作。</p>\n<p>这就是<code>webpack</code>的<code>loaders</code>。</p>\n<h2 id=\"所有例子的代码位置\"><a href=\"#所有例子的代码位置\" class=\"headerlink\" title=\"所有例子的代码位置\"></a>所有例子的代码位置</h2><p>可以访问 <a href=\"https://github.com/yukapril/learning/tree/master/webpack-demo\" target=\"_blank\" rel=\"noopener\">github</a> 进行查阅。</p>\n<h2 id=\"DEMO4-体验一次loaders\"><a href=\"#DEMO4-体验一次loaders\" class=\"headerlink\" title=\"DEMO4 体验一次loaders\"></a>DEMO4 体验一次loaders</h2><p>首先创建项目工程，建立<code>demo4</code>目录</p>\n<p>建立一个<code>./src/mian.js</code>文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hello = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello loaders!'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>我们写一句最简单的ES6语法——箭头函数。这样，打包之后，我们可以直接查看生成的JS就可以了，都不用镶嵌到html中在浏览器中查看效果~怎么样？岂不是很简单？</p>\n<p>下面，我们要做的事情是，配置<code>webpack.config.js</code>，越简单越好！</p>\n<p>我们在原有的基础上，进行精简。之后，再试试我们的<code>loaders</code>功能。</p>\n<p>等等！我们要把我们写的<code>./src/main.js</code>先转换为普通的ES5代码，才能使用我们之前的配置方案。</p>\n<p>这时候，需要引入其他组件了，根据经验，将ES6转换为ES5，大家用的比较多的是 <code>babel</code> 。我们需要用 <code>npm</code> 安装它。如果你不会用<code>npm</code>，请先查阅最基础的文章。</p>\n<p>首先在我们的<code>demo4</code>项目里，</p>\n<ul>\n<li>创建npm配置文件：<code>npm init</code>，使用默认参数即可</li>\n<li>安装babel插件：<code>npm install -save-dev babel-core babel-preset-es2015</code></li>\n<li>安装webpack的babel适配器：<code>npm install -save-dev babel-loader</code></li>\n</ul>\n<p>其中，<code>babel-core</code>是babel的核心文件，它可以对JS进行转码。但是转成什么呢，我们需要<code>babel-preset-es2015</code>，即ES5代码。</p>\n<p>为什么还要安装<code>babel-loader</code>呢？因为<code>babel</code>自己是一个独立的工具，可以直接运行的。我们想在 <code>webpack</code> 中应用它，就需要对它做兼容处理，<code>babel-loader</code> 就是这个兼容器，相当于连接桥。<code>webpack</code>下基本上所有的loaders（可以理解为工具/连接桥），都是<code>xxx-loader</code>这种形式的。</p>\n<p>恩，就这些，搞定了。检查下你的<code>package.json</code>文件，是不是和下面的很类似，应该不缺少任何一行！当然，版本号可以和我的有出入。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"demo4\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"webpack.config.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel-core\"</span>: <span class=\"string\">\"^6.21.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-loader\"</span>: <span class=\"string\">\"^6.2.10\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-es2015\"</span>: <span class=\"string\">\"^6.18.0\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来，我们来写webpack配置文件<code>webpack.config.js</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口文件配置</span></span><br><span class=\"line\">    entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 文件导出的配置</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'./build'</span>,</span><br><span class=\"line\">        filename: <span class=\"string\">'app.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            loader: <span class=\"string\">'babel-loader'</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    babel: &#123;</span><br><span class=\"line\">        presets: [<span class=\"string\">'es2015'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>loaders</code>是一个数组，因为它可以配置多种处理器。每一种处理器，是一个对象。</p>\n<p>处理器对象要包括<code>test</code>字段，用正则或者路径进行匹配要处理的文件，比如上面这个，匹配所有<code>.js</code>结尾的文件。匹配成功后，会用<code>loader</code>内的处理器进行处理。我们这里用<code>babel-loader</code>。</p>\n<p><code>loader</code>需要说明的是：</p>\n<ul>\n<li>它可以是字符串，也可以直接是数组。如果是字符串，使用<code>!</code>进行分割。</li>\n<li>它的插件默认都是<code>xxx-loader</code>形式，可以简写为<code>xxx</code>。比如上面的例子简写是<code>loader: &#39;babel&#39;</code>。</li>\n<li>如果是多个loader，那么处理顺序是<strong>从右往左</strong>。例如 <code>loader: &#39;aaa!bbb!ccc&#39;</code> ，那么相当于先进行 <code>ccc-loader</code> 处理，之后是 <code>bbb-loader</code> ，最后是 <code>aaa-loader</code> 。</li>\n</ul>\n<p><code>babel</code>需要有自己的配置文件。我们可以在根目录下创建一个<code>.babelrc</code>的json文件，或者在上面的文件内配置<code>babel</code>字段。甚至还有其他的配置方法（比如在当前处理器对象中，加入<code>query</code>字段），反正条条大路通罗马。</p>\n<p>具体的插件如何配置，需要参考插件的文档。</p>\n<p>好了，不需要在进行其他配置了，我们直接当前目录下执行webpack命令就可以了：<code>webpack</code></p>\n<p>程序自动生成了<code>./build/app.js</code>。我们只需要打开查看最后一点点代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/******/</span> ([</span><br><span class=\"line\"><span class=\"comment\">/* 0 */</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> hello = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello loaders!'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> ]);</span><br></pre></td></tr></table></figure>\n\n<p>你看，babel已经帮我们把ES6转化为ES5了！多么神奇！</p>\n<h2 id=\"loaders的include和exclude参数\"><a href=\"#loaders的include和exclude参数\" class=\"headerlink\" title=\"loaders的include和exclude参数\"></a>loaders的include和exclude参数</h2><p>这个参数我也查过一些文档，就是说在处理时候包含/排除那些规则的文件，但是目前没有测试成功具体的用法。网络上也没查到有什么特殊的用意。</p>\n<p>网上都是这么用的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">            include: [</span><br><span class=\"line\">                path.resolve(__dirname, <span class=\"string\">\"app/src\"</span>),</span><br><span class=\"line\">                path.resolve(__dirname, <span class=\"string\">\"app/test\"</span>)</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>曾经测试过，加入<code>exclude</code>后确实管用，可以让打出来的包更小（但是不会差别很大），但是原因还不详。</p>\n<h2 id=\"DEMO5-编写自己的loader\"><a href=\"#DEMO5-编写自己的loader\" class=\"headerlink\" title=\"DEMO5 编写自己的loader\"></a>DEMO5 编写自己的loader</h2><p>这次，我们自己简单的实现一个loader，来熟悉下loader的处理流程。</p>\n<p>这里，我不做过多的扩展字段说明，可以参考例子代码中的注释。</p>\n<p>新建一个目录，叫做demo5。入口文件 <code>./src/main.js</code> 如下：由于我们不打算加入babel，所以处理不了ES6语法，我们这次试用ES5的语法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someComponent = <span class=\"built_in\">require</span>(<span class=\"string\">'./some-component'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hi'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo();</span><br><span class=\"line\">someComponent();</span><br></pre></td></tr></table></figure>\n\n<p>引用的文件<code>./src/some-component.js</code> 如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is some-component'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>现在，我们做两个loader，这样可以更清楚的看到它的处理流程。第一个是针对当前处理的文件，通过注释的形式，给当前代码段加入文件名和版本号，第二个更简单，直接在当前代码段最前面加上 <code>&#39;ususe strict&#39;</code> 标志。</p>\n<p>先要写好 <code>webpack.config.js</code>文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'./build'</span>,</span><br><span class=\"line\">        filename: <span class=\"string\">'app.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        extentions: [<span class=\"string\">'js'</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            loader: [path.resolve(__dirname, <span class=\"string\">'./strict-loader'</span>), path.resolve(__dirname, <span class=\"string\">'./comment-loader'</span>)].join(<span class=\"string\">'!'</span>),</span><br><span class=\"line\">            <span class=\"comment\">//自有loader需要使用绝对路径，否则代码中的require部分后的代码，将无法找到！</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    commentLoader: &#123;</span><br><span class=\"line\">        str: <span class=\"string\">'v1.0'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里要注意的是：</p>\n<ul>\n<li>引用的每个loader，需要使用绝对路径，这里我用 <code>path.resolve</code> 来解决。使用相对路径，require会找不到的！</li>\n<li>loader如果是字符串或者数组，一定是从右往左写的。</li>\n<li><code>commnetLoader</code>字段，我们稍后学习在loader里面进行读取使用。相当于是loader的参数。</li>\n</ul>\n<h4 id=\"给代码段加入文件名和版本号注释\"><a href=\"#给代码段加入文件名和版本号注释\" class=\"headerlink\" title=\"给代码段加入文件名和版本号注释\"></a>给代码段加入文件名和版本号注释</h4><p>我们就在根目录建立<code>./comment-loader.js</code>文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'====进入comment模块===='</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(source);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'======================'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> param = <span class=\"keyword\">this</span>.options[<span class=\"string\">'commentLoader'</span>] || &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = param.str || <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> file = path.parse(<span class=\"keyword\">this</span>.resourcePath);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret = <span class=\"string\">'\\n//--------'</span> + file.base + <span class=\"string\">' '</span> + str + <span class=\"string\">'--------\\n'</span> + source + <span class=\"string\">'\\n//------------------------'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//return ret;//同步模式，单参数返回（只能返回处理后的代码）</span></span><br><span class=\"line\">    <span class=\"comment\">//this.callback(null, ret, null); //同步模式，多参数返回，第一个参数不详，第二个为处理后的代码，第三个参数为map</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cb = <span class=\"keyword\">this</span>.async();<span class=\"comment\">//异步模式，调用async函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        cb(<span class=\"literal\">null</span>, ret, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释说明</strong></p>\n<p>所有的loader可以接收两个参数，分别为 <code>source</code> <code>map</code>，第一个是当前的源代码，第二个是sourceMap。第二个一般用不到，这里我们省略。</p>\n<p>当前环境内的 <code>this</code> ，比较复杂，是webpack提供的一些方法。</p>\n<p>通过打印 <code>source</code> 参数，我们可以看到内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">====进入comment模块====</span><br><span class=\"line\">var someComponent = require(&apos;./some-component&apos;);</span><br><span class=\"line\">var foo = function () &#123;</span><br><span class=\"line\">    console.log(&apos;hi&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo();</span><br><span class=\"line\">someComponent();</span><br><span class=\"line\">======================</span><br><span class=\"line\"></span><br><span class=\"line\">====进入comment模块====</span><br><span class=\"line\">module.exports = function()&#123;</span><br><span class=\"line\">    console.log(&apos;this is some-component&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">======================</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，访问了几个符合条件的文件，就要被执行几次。而参数 <code>source</code> 就是单纯的文件内容而已。</p>\n<p>之后，我发现 <code>this.options</code> 内包含了整个<code>webpack.config.js</code>内容，故直接采用 <code>var param = this.options[&#39;commentLoader&#39;] || {};</code> 方式获取 <code>commentLoader</code> 字段内容，当然做了兼容处理，如果不存在则默认配置一个对象。</p>\n<p>下文也是， <code>var str = param.str || &#39;&#39;</code> ，读取 <code>param.str</code>字段，不存在则为空。</p>\n<p>通过测试发现， <code>this.resourcePath</code> 可以获得当前正在处理的文件路径。我使用NodeJS的 <code>path.parse</code> 进行解析。下文就可以直接用 <code>file.base</code> 来获得文件名了。</p>\n<p>最后，进行返回数据。</p>\n<p>loader返回数据的三种方案：</p>\n<ul>\n<li>代码是同步模式，可以最后直接返回，比如例子可以写成： <code>return ret;</code>。这个很明显有个缺陷，那就是：只能返回一个代码字符串！最上面说了，可以传入2个参数，那么第二个map参数呢？这个方法解决不了。</li>\n<li>代码是同步模式，可以解决直接 <code>return</code> 的单参数问题： <code>this.callback(null, ret, null)</code> 。第一个参数不详，第二个为处理后的代码，第三个参数为map。</li>\n<li>代码是异步模式，首先需要在同步代码中，调用 <code>var cb = this.async()</code> 。之后就可以在异步中调用 <code>cb()</code> 了。参数和同步模式一样的。</li>\n</ul>\n<p>上面的例子，为异步模式，意思为延时两秒后，进行回调。</p>\n<p>这个看懂之后，就好办了。我们来写<code>./strict-loader.js</code>文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'====进入strict模块===='</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( source);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'======================'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'\\'use strict\\';\\n'</span> + source;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这个就不解释了。</p>\n<p>最终，我们执行webpack，首先看看终端中的显示内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">====进入comment模块====</span><br><span class=\"line\">var someComponent = require(&apos;./some-component&apos;);</span><br><span class=\"line\">var foo = function () &#123;</span><br><span class=\"line\">    console.log(&apos;hi&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo();</span><br><span class=\"line\">someComponent();</span><br><span class=\"line\">======================</span><br><span class=\"line\">====进入strict模块====</span><br><span class=\"line\"></span><br><span class=\"line\">//--------main.js v1.0--------</span><br><span class=\"line\">var someComponent = require(&apos;./some-component&apos;);</span><br><span class=\"line\">var foo = function () &#123;</span><br><span class=\"line\">    console.log(&apos;hi&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo();</span><br><span class=\"line\">someComponent();</span><br><span class=\"line\">//------------------------</span><br><span class=\"line\">======================</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">====进入comment模块====</span><br><span class=\"line\">module.exports = function()&#123;</span><br><span class=\"line\">    console.log(&apos;this is some-component&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">======================</span><br><span class=\"line\">====进入strict模块====</span><br><span class=\"line\"></span><br><span class=\"line\">//--------some-component.js v1.0--------</span><br><span class=\"line\">module.exports = function()&#123;</span><br><span class=\"line\">    console.log(&apos;this is some-component&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//------------------------</span><br><span class=\"line\">======================</span><br></pre></td></tr></table></figure>\n\n<p>可以很清晰的看到，从入口开始，遇到一个符合条件的文件，开始进入loader处理。首先将源码带入 <code>comment-loader</code> ，之后将输出的代码带入 <code>strict-loader</code>。这样完成一个文件之后，在进行下一个文件。</p>\n<p>再看看最终生成的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/******/</span> ([</span><br><span class=\"line\"><span class=\"comment\">/* 0 */</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">\t'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//--------main.js v1.0--------</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> someComponent = __webpack_require__(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hi'</span>);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tfoo();</span><br><span class=\"line\">\tsomeComponent();</span><br><span class=\"line\">\t<span class=\"comment\">//------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;,</span><br><span class=\"line\"><span class=\"comment\">/* 1 */</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">\t'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//--------some-component.js v1.0--------</span></span><br><span class=\"line\">\t<span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is some-component'</span>);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">//------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> ]);</span><br></pre></td></tr></table></figure>\n\n<p>也是非常符合预期的。每个代码模块标有文件名和版本号，最上面还有严格模式标签。</p>\n<p>完成。</p>\n","site":{"data":{}},"excerpt":"<p>这次，研究一些稍微复杂一点的。</p>","more":"<p>之前的操作，我们都是用ES5语法写的，打包直接进行合并/压缩就可以了。仅仅是让<code>webpack</code>负责处理代码<code>require</code>依赖而已。</p>\n<blockquote>\n<p>代码合并例子可以体现，但是代码压缩之前的例子里面是没有的。</p>\n</blockquote>\n<p>我们平时接触的项目，会远远比这复杂。</p>\n<p>比如你写angular2，那么它使用<code>typescript</code>，React呢，它用<code>JSX</code>，或者，你更喜欢原生的代码，使用ES6来书写。</p>\n<p>不仅如此，CSS也有很多“变种”，比如说<code>LESS</code>、<code>SASS</code>等。</p>\n<p>再或者，你希望仅仅书写</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transition</span>: <span class=\"selector-tag\">all</span> 2<span class=\"selector-tag\">s</span>;</span><br></pre></td></tr></table></figure>\n\n<p>但是最终代码希望是</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">-webkit-transition</span>: <span class=\"selector-tag\">all</span> 2<span class=\"selector-tag\">s</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">-moz-transition</span>: <span class=\"selector-tag\">all</span> 2<span class=\"selector-tag\">s</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">transition</span>: <span class=\"selector-tag\">all</span> 2<span class=\"selector-tag\">s</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这样子，自动帮你补全兼容处理。</p>\n<p>这时候，就需要对<strong>源代码进行加工</strong>，加工完之后，变成普通ES5代码或者CSS之后，在进行之前的打包工作。</p>\n<p>这就是<code>webpack</code>的<code>loaders</code>。</p>\n<h2 id=\"所有例子的代码位置\"><a href=\"#所有例子的代码位置\" class=\"headerlink\" title=\"所有例子的代码位置\"></a>所有例子的代码位置</h2><p>可以访问 <a href=\"https://github.com/yukapril/learning/tree/master/webpack-demo\" target=\"_blank\" rel=\"noopener\">github</a> 进行查阅。</p>\n<h2 id=\"DEMO4-体验一次loaders\"><a href=\"#DEMO4-体验一次loaders\" class=\"headerlink\" title=\"DEMO4 体验一次loaders\"></a>DEMO4 体验一次loaders</h2><p>首先创建项目工程，建立<code>demo4</code>目录</p>\n<p>建立一个<code>./src/mian.js</code>文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hello = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello loaders!'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>我们写一句最简单的ES6语法——箭头函数。这样，打包之后，我们可以直接查看生成的JS就可以了，都不用镶嵌到html中在浏览器中查看效果~怎么样？岂不是很简单？</p>\n<p>下面，我们要做的事情是，配置<code>webpack.config.js</code>，越简单越好！</p>\n<p>我们在原有的基础上，进行精简。之后，再试试我们的<code>loaders</code>功能。</p>\n<p>等等！我们要把我们写的<code>./src/main.js</code>先转换为普通的ES5代码，才能使用我们之前的配置方案。</p>\n<p>这时候，需要引入其他组件了，根据经验，将ES6转换为ES5，大家用的比较多的是 <code>babel</code> 。我们需要用 <code>npm</code> 安装它。如果你不会用<code>npm</code>，请先查阅最基础的文章。</p>\n<p>首先在我们的<code>demo4</code>项目里，</p>\n<ul>\n<li>创建npm配置文件：<code>npm init</code>，使用默认参数即可</li>\n<li>安装babel插件：<code>npm install -save-dev babel-core babel-preset-es2015</code></li>\n<li>安装webpack的babel适配器：<code>npm install -save-dev babel-loader</code></li>\n</ul>\n<p>其中，<code>babel-core</code>是babel的核心文件，它可以对JS进行转码。但是转成什么呢，我们需要<code>babel-preset-es2015</code>，即ES5代码。</p>\n<p>为什么还要安装<code>babel-loader</code>呢？因为<code>babel</code>自己是一个独立的工具，可以直接运行的。我们想在 <code>webpack</code> 中应用它，就需要对它做兼容处理，<code>babel-loader</code> 就是这个兼容器，相当于连接桥。<code>webpack</code>下基本上所有的loaders（可以理解为工具/连接桥），都是<code>xxx-loader</code>这种形式的。</p>\n<p>恩，就这些，搞定了。检查下你的<code>package.json</code>文件，是不是和下面的很类似，应该不缺少任何一行！当然，版本号可以和我的有出入。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"demo4\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"webpack.config.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel-core\"</span>: <span class=\"string\">\"^6.21.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-loader\"</span>: <span class=\"string\">\"^6.2.10\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-es2015\"</span>: <span class=\"string\">\"^6.18.0\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来，我们来写webpack配置文件<code>webpack.config.js</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口文件配置</span></span><br><span class=\"line\">    entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 文件导出的配置</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'./build'</span>,</span><br><span class=\"line\">        filename: <span class=\"string\">'app.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            loader: <span class=\"string\">'babel-loader'</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    babel: &#123;</span><br><span class=\"line\">        presets: [<span class=\"string\">'es2015'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>loaders</code>是一个数组，因为它可以配置多种处理器。每一种处理器，是一个对象。</p>\n<p>处理器对象要包括<code>test</code>字段，用正则或者路径进行匹配要处理的文件，比如上面这个，匹配所有<code>.js</code>结尾的文件。匹配成功后，会用<code>loader</code>内的处理器进行处理。我们这里用<code>babel-loader</code>。</p>\n<p><code>loader</code>需要说明的是：</p>\n<ul>\n<li>它可以是字符串，也可以直接是数组。如果是字符串，使用<code>!</code>进行分割。</li>\n<li>它的插件默认都是<code>xxx-loader</code>形式，可以简写为<code>xxx</code>。比如上面的例子简写是<code>loader: &#39;babel&#39;</code>。</li>\n<li>如果是多个loader，那么处理顺序是<strong>从右往左</strong>。例如 <code>loader: &#39;aaa!bbb!ccc&#39;</code> ，那么相当于先进行 <code>ccc-loader</code> 处理，之后是 <code>bbb-loader</code> ，最后是 <code>aaa-loader</code> 。</li>\n</ul>\n<p><code>babel</code>需要有自己的配置文件。我们可以在根目录下创建一个<code>.babelrc</code>的json文件，或者在上面的文件内配置<code>babel</code>字段。甚至还有其他的配置方法（比如在当前处理器对象中，加入<code>query</code>字段），反正条条大路通罗马。</p>\n<p>具体的插件如何配置，需要参考插件的文档。</p>\n<p>好了，不需要在进行其他配置了，我们直接当前目录下执行webpack命令就可以了：<code>webpack</code></p>\n<p>程序自动生成了<code>./build/app.js</code>。我们只需要打开查看最后一点点代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/******/</span> ([</span><br><span class=\"line\"><span class=\"comment\">/* 0 */</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> hello = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello loaders!'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> ]);</span><br></pre></td></tr></table></figure>\n\n<p>你看，babel已经帮我们把ES6转化为ES5了！多么神奇！</p>\n<h2 id=\"loaders的include和exclude参数\"><a href=\"#loaders的include和exclude参数\" class=\"headerlink\" title=\"loaders的include和exclude参数\"></a>loaders的include和exclude参数</h2><p>这个参数我也查过一些文档，就是说在处理时候包含/排除那些规则的文件，但是目前没有测试成功具体的用法。网络上也没查到有什么特殊的用意。</p>\n<p>网上都是这么用的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">            include: [</span><br><span class=\"line\">                path.resolve(__dirname, <span class=\"string\">\"app/src\"</span>),</span><br><span class=\"line\">                path.resolve(__dirname, <span class=\"string\">\"app/test\"</span>)</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>曾经测试过，加入<code>exclude</code>后确实管用，可以让打出来的包更小（但是不会差别很大），但是原因还不详。</p>\n<h2 id=\"DEMO5-编写自己的loader\"><a href=\"#DEMO5-编写自己的loader\" class=\"headerlink\" title=\"DEMO5 编写自己的loader\"></a>DEMO5 编写自己的loader</h2><p>这次，我们自己简单的实现一个loader，来熟悉下loader的处理流程。</p>\n<p>这里，我不做过多的扩展字段说明，可以参考例子代码中的注释。</p>\n<p>新建一个目录，叫做demo5。入口文件 <code>./src/main.js</code> 如下：由于我们不打算加入babel，所以处理不了ES6语法，我们这次试用ES5的语法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someComponent = <span class=\"built_in\">require</span>(<span class=\"string\">'./some-component'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hi'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo();</span><br><span class=\"line\">someComponent();</span><br></pre></td></tr></table></figure>\n\n<p>引用的文件<code>./src/some-component.js</code> 如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is some-component'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>现在，我们做两个loader，这样可以更清楚的看到它的处理流程。第一个是针对当前处理的文件，通过注释的形式，给当前代码段加入文件名和版本号，第二个更简单，直接在当前代码段最前面加上 <code>&#39;ususe strict&#39;</code> 标志。</p>\n<p>先要写好 <code>webpack.config.js</code>文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'./build'</span>,</span><br><span class=\"line\">        filename: <span class=\"string\">'app.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        extentions: [<span class=\"string\">'js'</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            loader: [path.resolve(__dirname, <span class=\"string\">'./strict-loader'</span>), path.resolve(__dirname, <span class=\"string\">'./comment-loader'</span>)].join(<span class=\"string\">'!'</span>),</span><br><span class=\"line\">            <span class=\"comment\">//自有loader需要使用绝对路径，否则代码中的require部分后的代码，将无法找到！</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    commentLoader: &#123;</span><br><span class=\"line\">        str: <span class=\"string\">'v1.0'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里要注意的是：</p>\n<ul>\n<li>引用的每个loader，需要使用绝对路径，这里我用 <code>path.resolve</code> 来解决。使用相对路径，require会找不到的！</li>\n<li>loader如果是字符串或者数组，一定是从右往左写的。</li>\n<li><code>commnetLoader</code>字段，我们稍后学习在loader里面进行读取使用。相当于是loader的参数。</li>\n</ul>\n<h4 id=\"给代码段加入文件名和版本号注释\"><a href=\"#给代码段加入文件名和版本号注释\" class=\"headerlink\" title=\"给代码段加入文件名和版本号注释\"></a>给代码段加入文件名和版本号注释</h4><p>我们就在根目录建立<code>./comment-loader.js</code>文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'====进入comment模块===='</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(source);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'======================'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> param = <span class=\"keyword\">this</span>.options[<span class=\"string\">'commentLoader'</span>] || &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = param.str || <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> file = path.parse(<span class=\"keyword\">this</span>.resourcePath);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret = <span class=\"string\">'\\n//--------'</span> + file.base + <span class=\"string\">' '</span> + str + <span class=\"string\">'--------\\n'</span> + source + <span class=\"string\">'\\n//------------------------'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//return ret;//同步模式，单参数返回（只能返回处理后的代码）</span></span><br><span class=\"line\">    <span class=\"comment\">//this.callback(null, ret, null); //同步模式，多参数返回，第一个参数不详，第二个为处理后的代码，第三个参数为map</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cb = <span class=\"keyword\">this</span>.async();<span class=\"comment\">//异步模式，调用async函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        cb(<span class=\"literal\">null</span>, ret, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释说明</strong></p>\n<p>所有的loader可以接收两个参数，分别为 <code>source</code> <code>map</code>，第一个是当前的源代码，第二个是sourceMap。第二个一般用不到，这里我们省略。</p>\n<p>当前环境内的 <code>this</code> ，比较复杂，是webpack提供的一些方法。</p>\n<p>通过打印 <code>source</code> 参数，我们可以看到内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">====进入comment模块====</span><br><span class=\"line\">var someComponent = require(&apos;./some-component&apos;);</span><br><span class=\"line\">var foo = function () &#123;</span><br><span class=\"line\">    console.log(&apos;hi&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo();</span><br><span class=\"line\">someComponent();</span><br><span class=\"line\">======================</span><br><span class=\"line\"></span><br><span class=\"line\">====进入comment模块====</span><br><span class=\"line\">module.exports = function()&#123;</span><br><span class=\"line\">    console.log(&apos;this is some-component&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">======================</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，访问了几个符合条件的文件，就要被执行几次。而参数 <code>source</code> 就是单纯的文件内容而已。</p>\n<p>之后，我发现 <code>this.options</code> 内包含了整个<code>webpack.config.js</code>内容，故直接采用 <code>var param = this.options[&#39;commentLoader&#39;] || {};</code> 方式获取 <code>commentLoader</code> 字段内容，当然做了兼容处理，如果不存在则默认配置一个对象。</p>\n<p>下文也是， <code>var str = param.str || &#39;&#39;</code> ，读取 <code>param.str</code>字段，不存在则为空。</p>\n<p>通过测试发现， <code>this.resourcePath</code> 可以获得当前正在处理的文件路径。我使用NodeJS的 <code>path.parse</code> 进行解析。下文就可以直接用 <code>file.base</code> 来获得文件名了。</p>\n<p>最后，进行返回数据。</p>\n<p>loader返回数据的三种方案：</p>\n<ul>\n<li>代码是同步模式，可以最后直接返回，比如例子可以写成： <code>return ret;</code>。这个很明显有个缺陷，那就是：只能返回一个代码字符串！最上面说了，可以传入2个参数，那么第二个map参数呢？这个方法解决不了。</li>\n<li>代码是同步模式，可以解决直接 <code>return</code> 的单参数问题： <code>this.callback(null, ret, null)</code> 。第一个参数不详，第二个为处理后的代码，第三个参数为map。</li>\n<li>代码是异步模式，首先需要在同步代码中，调用 <code>var cb = this.async()</code> 。之后就可以在异步中调用 <code>cb()</code> 了。参数和同步模式一样的。</li>\n</ul>\n<p>上面的例子，为异步模式，意思为延时两秒后，进行回调。</p>\n<p>这个看懂之后，就好办了。我们来写<code>./strict-loader.js</code>文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'====进入strict模块===='</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( source);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'======================'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'\\'use strict\\';\\n'</span> + source;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这个就不解释了。</p>\n<p>最终，我们执行webpack，首先看看终端中的显示内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">====进入comment模块====</span><br><span class=\"line\">var someComponent = require(&apos;./some-component&apos;);</span><br><span class=\"line\">var foo = function () &#123;</span><br><span class=\"line\">    console.log(&apos;hi&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo();</span><br><span class=\"line\">someComponent();</span><br><span class=\"line\">======================</span><br><span class=\"line\">====进入strict模块====</span><br><span class=\"line\"></span><br><span class=\"line\">//--------main.js v1.0--------</span><br><span class=\"line\">var someComponent = require(&apos;./some-component&apos;);</span><br><span class=\"line\">var foo = function () &#123;</span><br><span class=\"line\">    console.log(&apos;hi&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo();</span><br><span class=\"line\">someComponent();</span><br><span class=\"line\">//------------------------</span><br><span class=\"line\">======================</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">====进入comment模块====</span><br><span class=\"line\">module.exports = function()&#123;</span><br><span class=\"line\">    console.log(&apos;this is some-component&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">======================</span><br><span class=\"line\">====进入strict模块====</span><br><span class=\"line\"></span><br><span class=\"line\">//--------some-component.js v1.0--------</span><br><span class=\"line\">module.exports = function()&#123;</span><br><span class=\"line\">    console.log(&apos;this is some-component&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//------------------------</span><br><span class=\"line\">======================</span><br></pre></td></tr></table></figure>\n\n<p>可以很清晰的看到，从入口开始，遇到一个符合条件的文件，开始进入loader处理。首先将源码带入 <code>comment-loader</code> ，之后将输出的代码带入 <code>strict-loader</code>。这样完成一个文件之后，在进行下一个文件。</p>\n<p>再看看最终生成的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/******/</span> ([</span><br><span class=\"line\"><span class=\"comment\">/* 0 */</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">\t'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//--------main.js v1.0--------</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> someComponent = __webpack_require__(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hi'</span>);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tfoo();</span><br><span class=\"line\">\tsomeComponent();</span><br><span class=\"line\">\t<span class=\"comment\">//------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;,</span><br><span class=\"line\"><span class=\"comment\">/* 1 */</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">\t'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//--------some-component.js v1.0--------</span></span><br><span class=\"line\">\t<span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is some-component'</span>);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">//------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> ]);</span><br></pre></td></tr></table></figure>\n\n<p>也是非常符合预期的。每个代码模块标有文件名和版本号，最上面还有严格模式标签。</p>\n<p>完成。</p>"},{"layout":"post","title":"webpack2入门-第一篇","date":"2017-02-04T22:58:00.000Z","_content":"\n2016年底，webpack2终于出来正式版了。改变的很少，基本上稍作修改就能兼容webpack1。改善了一些我认为太过于松散的配置，最终生成的代码质量更高。\n\nwebpack1系列的文章还没写完，其实也是有点乏了，后面还有一篇webpack-dev-server文章，初稿写好了，一直没审校，那就直接并入webpack2的入门文章吧~\n\n<!-- more -->\n\n## 第一个例子 demo1 入门 [webpack2-demo1](https://github.com/yukapril/learning/tree/master/webpack2-demo/demo1)\n\n### 建立项目\n\n由于之前的文章为了方便，全局安装了webpack，这次2.0的webpack我就采用项目内安装。\n\n首先要确保你在项目下初始化了 `package.json`文件\n\n```bash\nnpm init\n```\n\n之后项目安装webpack2\n\n```bash\nnpm i webpack -save-dev\n```\n\n`package.json` 中增加启动方法\n\n```json\n \"scripts\": {\n    \"webpack\":\"webpack\"\n  }\n```\n\n### 创建项目文件\n\n建立资源目录 `./src` ，以及组件目录 `./src/components`\n\n为了以后的插件部分，我这里使用了ES5，因为压缩混淆插件好像无法处理ES6代码，会报错。但是webpack2是完全支持ES6（import等语法）的。\n\n建立一个组件`./src/components/log.js`\n\n```js\nmodule.exports = function (s) {\n    console.log(s)\n}\n```\n\n建立两个入口文件，分别是`./src/page1.js` `./src/page2.js`\n\n```js\nvar log = require('./components/log')\nlog('this is page1')\n```\n\n```js\nvar log = require('./components/log')\nlog('this is page2')\n```\n\n### 配置webpack\n\n建立文件 `webpack.config.js`\n\n```js\nconst path = require('path');\n\nmodule.exports = {\n    entry: {\n        page1: './src/page1',\n        page2: './src/page2'\n    },\n    output: {\n        path: path.resolve(__dirname, \"dist\"),\n        filename: \"[name].bundle.js\"\n    }\n}\n```\n\n### 进行打包\n\n控制台执行 `npm run webpack` 即可。\n\n在目录下多出了`dist` 目录，并带有 `page1.bundle.js` `page2.bunlde.js`。\n\n我们最简单的例子完成了~\n\n## 第二个例子 demo2 引入loaders [webpack2-demo2](https://github.com/yukapril/learning/tree/master/webpack2-demo)\n\n首先复制一下demo1，我们在之前的代码基础上增加内容。\n\n为了简单，我自己写了两个loader。无需过多了解，知道能用就行了。\n\n`./strict-loader.js`\n\n严格模式插件，会在代码块（chunk）最前面加入 `'use strict;'` 标志。\n\n```js\nmodule.exports = function (source) {\n    return '\\'use strict\\';\\n' + source;\n};\n```\n\n`comment-loader.js`\n\n代码块（chunk）注释插件，会在代码块前后加入等号，并写入 `some-file.js comment v1.0` 这种形式标记。\n\n```js\nconst path = require('path');\nmodule.exports = function (source) {\n    var str = this.query.str || '';\n    var ver = this.query.ver || '';\n    var file = path.parse(this.resourcePath);\n    var ret = '//--------' + file.base + ' ' + str + ' ' + ver + '--------\\n' + source + '\\n//------------------------';\n    this.callback(null, ret, null);\n};\n```\n\n### 修改webpack配置文件\n\n我们要实现的功能是：\n* 自动处理入口文件\n* 每个非组件的代码块（chunk），要先进行版本显示，形式为 some-file.js MAIN v1.1，之后在加入严格模式\n* 每个组件的代码块（chunk），直接进行版本显示，形式为 some-file.js COMPONENTS v1.0\n\n\n我们要在`webpack.config.js`中增加一段 `module` 。最终如下：\n\n```js\nconst path = require('path');\n\nmodule.exports = {\n    entry: {\n        page1: './src/page1',\n        page2: './src/page2'\n    },\n    output: {\n        path: path.resolve(__dirname, \"dist\"),\n        filename: \"[name].bundle.js\"\n    },\n    module: {\n        rules: [{\n            test: /\\.js$/,\n            exclude: path.resolve(__dirname, './src/components/'),\n            use: [\n                // strict规则加载器，第二个执行\n                // 如果当前规则加载器不需要配置，可以直接使用字符串\n                path.resolve(__dirname, './strict-loader'),\n                // comment规则加载器，第一个执行\n                // 如果当前规则加载器需要配置，则需要使用array形式，并将加载器写成对象传入\n                {\n                    loader: path.resolve(__dirname, './comment-loader'),\n                    options: {\n                        str: 'MAIN',\n                        ver: 'v1.1'\n                    }\n                }\n            ]\n        }, {\n            test: /\\.js$/,\n            include: path.resolve(__dirname, './src/components/'),\n            use: [{\n                loader: path.resolve(__dirname, './comment-loader'),\n                options: {\n                    str: 'COMPONENTS',\n                    ver: 'v1.0'\n                }\n            }]\n        }]\n    }\n}\n```\n\n需要说明的是：\n* 现在的预处理规则，要放在 `module.rules` 下面，每个规则用一个对象表示。\n* 每个预处理规则中：\n    * `test` 一般用于匹配文件扩展名\n    * `include` 当前规则匹配的路径。如果匹配扩展名成功，匹配是否在 `include` 里面，如果是否，则不执行此条规则\n    * `exclude` 当前规则不能匹配的路径。同 `include` ，如果匹配扩展名成功，匹配是否被`exclude` 排除掉，如果是排除掉，则不执行此条规则\n    * 要想应用一条规则，相当于必须满足条件 (test && include && !exclude) === true\n    * `use`（也可以使用`loaders` `loader`） 此条规则应用哪些预处理器。接受参数为array或者string，其中string仍然使用!进行分割。执行顺序同webpack1，从右到左（string形式），从下到上（array形式）\n    * `use` 如果是写成对象形式的预处理器，直接使用`options`可以进行配置\n\n### 打包查看效果\n\n控制台执行 `npm run webpack` 即可。\n\n在目录下多出了`dist` 目录，并带有 `page1.bundle.js` `page2.bunlde.js`。\n\n检查其中一个文件，可以看到最后部分：\n\n```js\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n//--------log.js COMPONENTS v1.0--------\nmodule.exports = function (s) {\n    console.log(s)\n}\n//------------------------\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n//--------page1.js MAIN v1.1--------\nvar log = __webpack_require__(0)\nlog('this is page1')\n//------------------------\n\n/***/ })\n/******/ ]);\n```\n\n其中组件 `log.js` 中，加入了我们期望的注释。 `page1.js` 中，首先加入了期望的注释，同时最上面加入了严格模式标签。\n\n大功告成！\n","source":"_posts/2017/2017-02-04-webpack2-1.md","raw":"---\nlayout: post\ntitle: \"webpack2入门-第一篇\"\ndate: 2017-02-04 22:58:00 GMT+0800\ncategories: [前端]\ntags:  [webpack]\n---\n\n2016年底，webpack2终于出来正式版了。改变的很少，基本上稍作修改就能兼容webpack1。改善了一些我认为太过于松散的配置，最终生成的代码质量更高。\n\nwebpack1系列的文章还没写完，其实也是有点乏了，后面还有一篇webpack-dev-server文章，初稿写好了，一直没审校，那就直接并入webpack2的入门文章吧~\n\n<!-- more -->\n\n## 第一个例子 demo1 入门 [webpack2-demo1](https://github.com/yukapril/learning/tree/master/webpack2-demo/demo1)\n\n### 建立项目\n\n由于之前的文章为了方便，全局安装了webpack，这次2.0的webpack我就采用项目内安装。\n\n首先要确保你在项目下初始化了 `package.json`文件\n\n```bash\nnpm init\n```\n\n之后项目安装webpack2\n\n```bash\nnpm i webpack -save-dev\n```\n\n`package.json` 中增加启动方法\n\n```json\n \"scripts\": {\n    \"webpack\":\"webpack\"\n  }\n```\n\n### 创建项目文件\n\n建立资源目录 `./src` ，以及组件目录 `./src/components`\n\n为了以后的插件部分，我这里使用了ES5，因为压缩混淆插件好像无法处理ES6代码，会报错。但是webpack2是完全支持ES6（import等语法）的。\n\n建立一个组件`./src/components/log.js`\n\n```js\nmodule.exports = function (s) {\n    console.log(s)\n}\n```\n\n建立两个入口文件，分别是`./src/page1.js` `./src/page2.js`\n\n```js\nvar log = require('./components/log')\nlog('this is page1')\n```\n\n```js\nvar log = require('./components/log')\nlog('this is page2')\n```\n\n### 配置webpack\n\n建立文件 `webpack.config.js`\n\n```js\nconst path = require('path');\n\nmodule.exports = {\n    entry: {\n        page1: './src/page1',\n        page2: './src/page2'\n    },\n    output: {\n        path: path.resolve(__dirname, \"dist\"),\n        filename: \"[name].bundle.js\"\n    }\n}\n```\n\n### 进行打包\n\n控制台执行 `npm run webpack` 即可。\n\n在目录下多出了`dist` 目录，并带有 `page1.bundle.js` `page2.bunlde.js`。\n\n我们最简单的例子完成了~\n\n## 第二个例子 demo2 引入loaders [webpack2-demo2](https://github.com/yukapril/learning/tree/master/webpack2-demo)\n\n首先复制一下demo1，我们在之前的代码基础上增加内容。\n\n为了简单，我自己写了两个loader。无需过多了解，知道能用就行了。\n\n`./strict-loader.js`\n\n严格模式插件，会在代码块（chunk）最前面加入 `'use strict;'` 标志。\n\n```js\nmodule.exports = function (source) {\n    return '\\'use strict\\';\\n' + source;\n};\n```\n\n`comment-loader.js`\n\n代码块（chunk）注释插件，会在代码块前后加入等号，并写入 `some-file.js comment v1.0` 这种形式标记。\n\n```js\nconst path = require('path');\nmodule.exports = function (source) {\n    var str = this.query.str || '';\n    var ver = this.query.ver || '';\n    var file = path.parse(this.resourcePath);\n    var ret = '//--------' + file.base + ' ' + str + ' ' + ver + '--------\\n' + source + '\\n//------------------------';\n    this.callback(null, ret, null);\n};\n```\n\n### 修改webpack配置文件\n\n我们要实现的功能是：\n* 自动处理入口文件\n* 每个非组件的代码块（chunk），要先进行版本显示，形式为 some-file.js MAIN v1.1，之后在加入严格模式\n* 每个组件的代码块（chunk），直接进行版本显示，形式为 some-file.js COMPONENTS v1.0\n\n\n我们要在`webpack.config.js`中增加一段 `module` 。最终如下：\n\n```js\nconst path = require('path');\n\nmodule.exports = {\n    entry: {\n        page1: './src/page1',\n        page2: './src/page2'\n    },\n    output: {\n        path: path.resolve(__dirname, \"dist\"),\n        filename: \"[name].bundle.js\"\n    },\n    module: {\n        rules: [{\n            test: /\\.js$/,\n            exclude: path.resolve(__dirname, './src/components/'),\n            use: [\n                // strict规则加载器，第二个执行\n                // 如果当前规则加载器不需要配置，可以直接使用字符串\n                path.resolve(__dirname, './strict-loader'),\n                // comment规则加载器，第一个执行\n                // 如果当前规则加载器需要配置，则需要使用array形式，并将加载器写成对象传入\n                {\n                    loader: path.resolve(__dirname, './comment-loader'),\n                    options: {\n                        str: 'MAIN',\n                        ver: 'v1.1'\n                    }\n                }\n            ]\n        }, {\n            test: /\\.js$/,\n            include: path.resolve(__dirname, './src/components/'),\n            use: [{\n                loader: path.resolve(__dirname, './comment-loader'),\n                options: {\n                    str: 'COMPONENTS',\n                    ver: 'v1.0'\n                }\n            }]\n        }]\n    }\n}\n```\n\n需要说明的是：\n* 现在的预处理规则，要放在 `module.rules` 下面，每个规则用一个对象表示。\n* 每个预处理规则中：\n    * `test` 一般用于匹配文件扩展名\n    * `include` 当前规则匹配的路径。如果匹配扩展名成功，匹配是否在 `include` 里面，如果是否，则不执行此条规则\n    * `exclude` 当前规则不能匹配的路径。同 `include` ，如果匹配扩展名成功，匹配是否被`exclude` 排除掉，如果是排除掉，则不执行此条规则\n    * 要想应用一条规则，相当于必须满足条件 (test && include && !exclude) === true\n    * `use`（也可以使用`loaders` `loader`） 此条规则应用哪些预处理器。接受参数为array或者string，其中string仍然使用!进行分割。执行顺序同webpack1，从右到左（string形式），从下到上（array形式）\n    * `use` 如果是写成对象形式的预处理器，直接使用`options`可以进行配置\n\n### 打包查看效果\n\n控制台执行 `npm run webpack` 即可。\n\n在目录下多出了`dist` 目录，并带有 `page1.bundle.js` `page2.bunlde.js`。\n\n检查其中一个文件，可以看到最后部分：\n\n```js\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n//--------log.js COMPONENTS v1.0--------\nmodule.exports = function (s) {\n    console.log(s)\n}\n//------------------------\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n//--------page1.js MAIN v1.1--------\nvar log = __webpack_require__(0)\nlog('this is page1')\n//------------------------\n\n/***/ })\n/******/ ]);\n```\n\n其中组件 `log.js` 中，加入了我们期望的注释。 `page1.js` 中，首先加入了期望的注释，同时最上面加入了严格模式标签。\n\n大功告成！\n","slug":"2017-2017-02-04-webpack2-1","published":1,"updated":"2020-03-02T07:16:34.635Z","comments":1,"photos":[],"link":"","_id":"cka5ik8as001gnybgbwx3s5b1","content":"<p>2016年底，webpack2终于出来正式版了。改变的很少，基本上稍作修改就能兼容webpack1。改善了一些我认为太过于松散的配置，最终生成的代码质量更高。</p>\n<p>webpack1系列的文章还没写完，其实也是有点乏了，后面还有一篇webpack-dev-server文章，初稿写好了，一直没审校，那就直接并入webpack2的入门文章吧~</p>\n<a id=\"more\"></a>\n\n<h2 id=\"第一个例子-demo1-入门-webpack2-demo1\"><a href=\"#第一个例子-demo1-入门-webpack2-demo1\" class=\"headerlink\" title=\"第一个例子 demo1 入门 webpack2-demo1\"></a>第一个例子 demo1 入门 <a href=\"https://github.com/yukapril/learning/tree/master/webpack2-demo/demo1\" target=\"_blank\" rel=\"noopener\">webpack2-demo1</a></h2><h3 id=\"建立项目\"><a href=\"#建立项目\" class=\"headerlink\" title=\"建立项目\"></a>建立项目</h3><p>由于之前的文章为了方便，全局安装了webpack，这次2.0的webpack我就采用项目内安装。</p>\n<p>首先要确保你在项目下初始化了 <code>package.json</code>文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n\n<p>之后项目安装webpack2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack -save-dev</span><br></pre></td></tr></table></figure>\n\n<p><code>package.json</code> 中增加启动方法</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">   \"webpack\":\"webpack\"</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建项目文件\"><a href=\"#创建项目文件\" class=\"headerlink\" title=\"创建项目文件\"></a>创建项目文件</h3><p>建立资源目录 <code>./src</code> ，以及组件目录 <code>./src/components</code></p>\n<p>为了以后的插件部分，我这里使用了ES5，因为压缩混淆插件好像无法处理ES6代码，会报错。但是webpack2是完全支持ES6（import等语法）的。</p>\n<p>建立一个组件<code>./src/components/log.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(s)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>建立两个入口文件，分别是<code>./src/page1.js</code> <code>./src/page2.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> log = <span class=\"built_in\">require</span>(<span class=\"string\">'./components/log'</span>)</span><br><span class=\"line\">log(<span class=\"string\">'this is page1'</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> log = <span class=\"built_in\">require</span>(<span class=\"string\">'./components/log'</span>)</span><br><span class=\"line\">log(<span class=\"string\">'this is page2'</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置webpack\"><a href=\"#配置webpack\" class=\"headerlink\" title=\"配置webpack\"></a>配置webpack</h3><p>建立文件 <code>webpack.config.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        page1: <span class=\"string\">'./src/page1'</span>,</span><br><span class=\"line\">        page2: <span class=\"string\">'./src/page2'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">\"dist\"</span>),</span><br><span class=\"line\">        filename: <span class=\"string\">\"[name].bundle.js\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"进行打包\"><a href=\"#进行打包\" class=\"headerlink\" title=\"进行打包\"></a>进行打包</h3><p>控制台执行 <code>npm run webpack</code> 即可。</p>\n<p>在目录下多出了<code>dist</code> 目录，并带有 <code>page1.bundle.js</code> <code>page2.bunlde.js</code>。</p>\n<p>我们最简单的例子完成了~</p>\n<h2 id=\"第二个例子-demo2-引入loaders-webpack2-demo2\"><a href=\"#第二个例子-demo2-引入loaders-webpack2-demo2\" class=\"headerlink\" title=\"第二个例子 demo2 引入loaders webpack2-demo2\"></a>第二个例子 demo2 引入loaders <a href=\"https://github.com/yukapril/learning/tree/master/webpack2-demo\" target=\"_blank\" rel=\"noopener\">webpack2-demo2</a></h2><p>首先复制一下demo1，我们在之前的代码基础上增加内容。</p>\n<p>为了简单，我自己写了两个loader。无需过多了解，知道能用就行了。</p>\n<p><code>./strict-loader.js</code></p>\n<p>严格模式插件，会在代码块（chunk）最前面加入 <code>&#39;use strict;&#39;</code> 标志。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'\\'use strict\\';\\n'</span> + source;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>comment-loader.js</code></p>\n<p>代码块（chunk）注释插件，会在代码块前后加入等号，并写入 <code>some-file.js comment v1.0</code> 这种形式标记。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"keyword\">this</span>.query.str || <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ver = <span class=\"keyword\">this</span>.query.ver || <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> file = path.parse(<span class=\"keyword\">this</span>.resourcePath);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret = <span class=\"string\">'//--------'</span> + file.base + <span class=\"string\">' '</span> + str + <span class=\"string\">' '</span> + ver + <span class=\"string\">'--------\\n'</span> + source + <span class=\"string\">'\\n//------------------------'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callback(<span class=\"literal\">null</span>, ret, <span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改webpack配置文件\"><a href=\"#修改webpack配置文件\" class=\"headerlink\" title=\"修改webpack配置文件\"></a>修改webpack配置文件</h3><p>我们要实现的功能是：</p>\n<ul>\n<li>自动处理入口文件</li>\n<li>每个非组件的代码块（chunk），要先进行版本显示，形式为 some-file.js MAIN v1.1，之后在加入严格模式</li>\n<li>每个组件的代码块（chunk），直接进行版本显示，形式为 some-file.js COMPONENTS v1.0</li>\n</ul>\n<p>我们要在<code>webpack.config.js</code>中增加一段 <code>module</code> 。最终如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        page1: <span class=\"string\">'./src/page1'</span>,</span><br><span class=\"line\">        page2: <span class=\"string\">'./src/page2'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">\"dist\"</span>),</span><br><span class=\"line\">        filename: <span class=\"string\">\"[name].bundle.js\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            exclude: path.resolve(__dirname, <span class=\"string\">'./src/components/'</span>),</span><br><span class=\"line\">            use: [</span><br><span class=\"line\">                <span class=\"comment\">// strict规则加载器，第二个执行</span></span><br><span class=\"line\">                <span class=\"comment\">// 如果当前规则加载器不需要配置，可以直接使用字符串</span></span><br><span class=\"line\">                path.resolve(__dirname, <span class=\"string\">'./strict-loader'</span>),</span><br><span class=\"line\">                <span class=\"comment\">// comment规则加载器，第一个执行</span></span><br><span class=\"line\">                <span class=\"comment\">// 如果当前规则加载器需要配置，则需要使用array形式，并将加载器写成对象传入</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    loader: path.resolve(__dirname, <span class=\"string\">'./comment-loader'</span>),</span><br><span class=\"line\">                    options: &#123;</span><br><span class=\"line\">                        str: <span class=\"string\">'MAIN'</span>,</span><br><span class=\"line\">                        ver: <span class=\"string\">'v1.1'</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            include: path.resolve(__dirname, <span class=\"string\">'./src/components/'</span>),</span><br><span class=\"line\">            use: [&#123;</span><br><span class=\"line\">                loader: path.resolve(__dirname, <span class=\"string\">'./comment-loader'</span>),</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                    str: <span class=\"string\">'COMPONENTS'</span>,</span><br><span class=\"line\">                    ver: <span class=\"string\">'v1.0'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;]</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要说明的是：</p>\n<ul>\n<li>现在的预处理规则，要放在 <code>module.rules</code> 下面，每个规则用一个对象表示。</li>\n<li>每个预处理规则中：<ul>\n<li><code>test</code> 一般用于匹配文件扩展名</li>\n<li><code>include</code> 当前规则匹配的路径。如果匹配扩展名成功，匹配是否在 <code>include</code> 里面，如果是否，则不执行此条规则</li>\n<li><code>exclude</code> 当前规则不能匹配的路径。同 <code>include</code> ，如果匹配扩展名成功，匹配是否被<code>exclude</code> 排除掉，如果是排除掉，则不执行此条规则</li>\n<li>要想应用一条规则，相当于必须满足条件 (test &amp;&amp; include &amp;&amp; !exclude) === true</li>\n<li><code>use</code>（也可以使用<code>loaders</code> <code>loader</code>） 此条规则应用哪些预处理器。接受参数为array或者string，其中string仍然使用!进行分割。执行顺序同webpack1，从右到左（string形式），从下到上（array形式）</li>\n<li><code>use</code> 如果是写成对象形式的预处理器，直接使用<code>options</code>可以进行配置</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"打包查看效果\"><a href=\"#打包查看效果\" class=\"headerlink\" title=\"打包查看效果\"></a>打包查看效果</h3><p>控制台执行 <code>npm run webpack</code> 即可。</p>\n<p>在目录下多出了<code>dist</code> 目录，并带有 <code>page1.bundle.js</code> <code>page2.bunlde.js</code>。</p>\n<p>检查其中一个文件，可以看到最后部分：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/************************************************************************/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> ([</span><br><span class=\"line\"><span class=\"comment\">/* 0 */</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//--------log.js COMPONENTS v1.0--------</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;),</span><br><span class=\"line\"><span class=\"comment\">/* 1 */</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//--------page1.js MAIN v1.1--------</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> log = __webpack_require__(<span class=\"number\">0</span>)</span><br><span class=\"line\">log(<span class=\"string\">'this is page1'</span>)</span><br><span class=\"line\"><span class=\"comment\">//------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">/******/</span> ]);</span><br></pre></td></tr></table></figure>\n\n<p>其中组件 <code>log.js</code> 中，加入了我们期望的注释。 <code>page1.js</code> 中，首先加入了期望的注释，同时最上面加入了严格模式标签。</p>\n<p>大功告成！</p>\n","site":{"data":{}},"excerpt":"<p>2016年底，webpack2终于出来正式版了。改变的很少，基本上稍作修改就能兼容webpack1。改善了一些我认为太过于松散的配置，最终生成的代码质量更高。</p>\n<p>webpack1系列的文章还没写完，其实也是有点乏了，后面还有一篇webpack-dev-server文章，初稿写好了，一直没审校，那就直接并入webpack2的入门文章吧~</p>","more":"<h2 id=\"第一个例子-demo1-入门-webpack2-demo1\"><a href=\"#第一个例子-demo1-入门-webpack2-demo1\" class=\"headerlink\" title=\"第一个例子 demo1 入门 webpack2-demo1\"></a>第一个例子 demo1 入门 <a href=\"https://github.com/yukapril/learning/tree/master/webpack2-demo/demo1\" target=\"_blank\" rel=\"noopener\">webpack2-demo1</a></h2><h3 id=\"建立项目\"><a href=\"#建立项目\" class=\"headerlink\" title=\"建立项目\"></a>建立项目</h3><p>由于之前的文章为了方便，全局安装了webpack，这次2.0的webpack我就采用项目内安装。</p>\n<p>首先要确保你在项目下初始化了 <code>package.json</code>文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n\n<p>之后项目安装webpack2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack -save-dev</span><br></pre></td></tr></table></figure>\n\n<p><code>package.json</code> 中增加启动方法</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">   \"webpack\":\"webpack\"</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建项目文件\"><a href=\"#创建项目文件\" class=\"headerlink\" title=\"创建项目文件\"></a>创建项目文件</h3><p>建立资源目录 <code>./src</code> ，以及组件目录 <code>./src/components</code></p>\n<p>为了以后的插件部分，我这里使用了ES5，因为压缩混淆插件好像无法处理ES6代码，会报错。但是webpack2是完全支持ES6（import等语法）的。</p>\n<p>建立一个组件<code>./src/components/log.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(s)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>建立两个入口文件，分别是<code>./src/page1.js</code> <code>./src/page2.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> log = <span class=\"built_in\">require</span>(<span class=\"string\">'./components/log'</span>)</span><br><span class=\"line\">log(<span class=\"string\">'this is page1'</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> log = <span class=\"built_in\">require</span>(<span class=\"string\">'./components/log'</span>)</span><br><span class=\"line\">log(<span class=\"string\">'this is page2'</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置webpack\"><a href=\"#配置webpack\" class=\"headerlink\" title=\"配置webpack\"></a>配置webpack</h3><p>建立文件 <code>webpack.config.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        page1: <span class=\"string\">'./src/page1'</span>,</span><br><span class=\"line\">        page2: <span class=\"string\">'./src/page2'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">\"dist\"</span>),</span><br><span class=\"line\">        filename: <span class=\"string\">\"[name].bundle.js\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"进行打包\"><a href=\"#进行打包\" class=\"headerlink\" title=\"进行打包\"></a>进行打包</h3><p>控制台执行 <code>npm run webpack</code> 即可。</p>\n<p>在目录下多出了<code>dist</code> 目录，并带有 <code>page1.bundle.js</code> <code>page2.bunlde.js</code>。</p>\n<p>我们最简单的例子完成了~</p>\n<h2 id=\"第二个例子-demo2-引入loaders-webpack2-demo2\"><a href=\"#第二个例子-demo2-引入loaders-webpack2-demo2\" class=\"headerlink\" title=\"第二个例子 demo2 引入loaders webpack2-demo2\"></a>第二个例子 demo2 引入loaders <a href=\"https://github.com/yukapril/learning/tree/master/webpack2-demo\" target=\"_blank\" rel=\"noopener\">webpack2-demo2</a></h2><p>首先复制一下demo1，我们在之前的代码基础上增加内容。</p>\n<p>为了简单，我自己写了两个loader。无需过多了解，知道能用就行了。</p>\n<p><code>./strict-loader.js</code></p>\n<p>严格模式插件，会在代码块（chunk）最前面加入 <code>&#39;use strict;&#39;</code> 标志。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'\\'use strict\\';\\n'</span> + source;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>comment-loader.js</code></p>\n<p>代码块（chunk）注释插件，会在代码块前后加入等号，并写入 <code>some-file.js comment v1.0</code> 这种形式标记。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"keyword\">this</span>.query.str || <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ver = <span class=\"keyword\">this</span>.query.ver || <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> file = path.parse(<span class=\"keyword\">this</span>.resourcePath);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret = <span class=\"string\">'//--------'</span> + file.base + <span class=\"string\">' '</span> + str + <span class=\"string\">' '</span> + ver + <span class=\"string\">'--------\\n'</span> + source + <span class=\"string\">'\\n//------------------------'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callback(<span class=\"literal\">null</span>, ret, <span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改webpack配置文件\"><a href=\"#修改webpack配置文件\" class=\"headerlink\" title=\"修改webpack配置文件\"></a>修改webpack配置文件</h3><p>我们要实现的功能是：</p>\n<ul>\n<li>自动处理入口文件</li>\n<li>每个非组件的代码块（chunk），要先进行版本显示，形式为 some-file.js MAIN v1.1，之后在加入严格模式</li>\n<li>每个组件的代码块（chunk），直接进行版本显示，形式为 some-file.js COMPONENTS v1.0</li>\n</ul>\n<p>我们要在<code>webpack.config.js</code>中增加一段 <code>module</code> 。最终如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        page1: <span class=\"string\">'./src/page1'</span>,</span><br><span class=\"line\">        page2: <span class=\"string\">'./src/page2'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">\"dist\"</span>),</span><br><span class=\"line\">        filename: <span class=\"string\">\"[name].bundle.js\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            exclude: path.resolve(__dirname, <span class=\"string\">'./src/components/'</span>),</span><br><span class=\"line\">            use: [</span><br><span class=\"line\">                <span class=\"comment\">// strict规则加载器，第二个执行</span></span><br><span class=\"line\">                <span class=\"comment\">// 如果当前规则加载器不需要配置，可以直接使用字符串</span></span><br><span class=\"line\">                path.resolve(__dirname, <span class=\"string\">'./strict-loader'</span>),</span><br><span class=\"line\">                <span class=\"comment\">// comment规则加载器，第一个执行</span></span><br><span class=\"line\">                <span class=\"comment\">// 如果当前规则加载器需要配置，则需要使用array形式，并将加载器写成对象传入</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    loader: path.resolve(__dirname, <span class=\"string\">'./comment-loader'</span>),</span><br><span class=\"line\">                    options: &#123;</span><br><span class=\"line\">                        str: <span class=\"string\">'MAIN'</span>,</span><br><span class=\"line\">                        ver: <span class=\"string\">'v1.1'</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            include: path.resolve(__dirname, <span class=\"string\">'./src/components/'</span>),</span><br><span class=\"line\">            use: [&#123;</span><br><span class=\"line\">                loader: path.resolve(__dirname, <span class=\"string\">'./comment-loader'</span>),</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                    str: <span class=\"string\">'COMPONENTS'</span>,</span><br><span class=\"line\">                    ver: <span class=\"string\">'v1.0'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;]</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要说明的是：</p>\n<ul>\n<li>现在的预处理规则，要放在 <code>module.rules</code> 下面，每个规则用一个对象表示。</li>\n<li>每个预处理规则中：<ul>\n<li><code>test</code> 一般用于匹配文件扩展名</li>\n<li><code>include</code> 当前规则匹配的路径。如果匹配扩展名成功，匹配是否在 <code>include</code> 里面，如果是否，则不执行此条规则</li>\n<li><code>exclude</code> 当前规则不能匹配的路径。同 <code>include</code> ，如果匹配扩展名成功，匹配是否被<code>exclude</code> 排除掉，如果是排除掉，则不执行此条规则</li>\n<li>要想应用一条规则，相当于必须满足条件 (test &amp;&amp; include &amp;&amp; !exclude) === true</li>\n<li><code>use</code>（也可以使用<code>loaders</code> <code>loader</code>） 此条规则应用哪些预处理器。接受参数为array或者string，其中string仍然使用!进行分割。执行顺序同webpack1，从右到左（string形式），从下到上（array形式）</li>\n<li><code>use</code> 如果是写成对象形式的预处理器，直接使用<code>options</code>可以进行配置</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"打包查看效果\"><a href=\"#打包查看效果\" class=\"headerlink\" title=\"打包查看效果\"></a>打包查看效果</h3><p>控制台执行 <code>npm run webpack</code> 即可。</p>\n<p>在目录下多出了<code>dist</code> 目录，并带有 <code>page1.bundle.js</code> <code>page2.bunlde.js</code>。</p>\n<p>检查其中一个文件，可以看到最后部分：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/************************************************************************/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> ([</span><br><span class=\"line\"><span class=\"comment\">/* 0 */</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//--------log.js COMPONENTS v1.0--------</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;),</span><br><span class=\"line\"><span class=\"comment\">/* 1 */</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//--------page1.js MAIN v1.1--------</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> log = __webpack_require__(<span class=\"number\">0</span>)</span><br><span class=\"line\">log(<span class=\"string\">'this is page1'</span>)</span><br><span class=\"line\"><span class=\"comment\">//------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">/******/</span> ]);</span><br></pre></td></tr></table></figure>\n\n<p>其中组件 <code>log.js</code> 中，加入了我们期望的注释。 <code>page1.js</code> 中，首先加入了期望的注释，同时最上面加入了严格模式标签。</p>\n<p>大功告成！</p>"},{"layout":"post","title":"[转载] 关于CSS一些细节问题","date":"2017-02-05T22:44:00.000Z","_content":"\ncss每天都要接触，但是有很多值计算你不一定非常清楚。我看过一些视频，这篇文章把常见的问题总结了一下。\n\n<!-- more -->\n\nhttp://ghmagical.com/article/page/id/tQOOxx1N1K1a\n\n","source":"_posts/2017/2017-02-05-zz.md","raw":"---\nlayout: post\ntitle: \"[转载] 关于CSS一些细节问题\"\ndate: 2017-02-05 22:44:00 GMT+0800\ncategories: [前端]\ntags:  [css]\n---\n\ncss每天都要接触，但是有很多值计算你不一定非常清楚。我看过一些视频，这篇文章把常见的问题总结了一下。\n\n<!-- more -->\n\nhttp://ghmagical.com/article/page/id/tQOOxx1N1K1a\n\n","slug":"2017-2017-02-05-zz","published":1,"updated":"2020-03-02T07:16:34.635Z","comments":1,"photos":[],"link":"","_id":"cka5ik8au001knybgi1p95xuj","content":"<p>css每天都要接触，但是有很多值计算你不一定非常清楚。我看过一些视频，这篇文章把常见的问题总结了一下。</p>\n<a id=\"more\"></a>\n\n<p><a href=\"http://ghmagical.com/article/page/id/tQOOxx1N1K1a\" target=\"_blank\" rel=\"noopener\">http://ghmagical.com/article/page/id/tQOOxx1N1K1a</a></p>\n","site":{"data":{}},"excerpt":"<p>css每天都要接触，但是有很多值计算你不一定非常清楚。我看过一些视频，这篇文章把常见的问题总结了一下。</p>","more":"<p><a href=\"http://ghmagical.com/article/page/id/tQOOxx1N1K1a\" target=\"_blank\" rel=\"noopener\">http://ghmagical.com/article/page/id/tQOOxx1N1K1a</a></p>"},{"layout":"post","title":"webpack2入门-第二篇 公共代码提取插件","date":"2017-02-19T11:01:00.000Z","_content":"\n这次，我们来看看 webpack 中一些常见的插件如何来使用。\n\n接上篇。\n\n<!-- more -->\n\n## 第三个例子 demo3 CommonsChunkPlugin [webpack2-demo3](https://github.com/yukapril/learning/tree/master/webpack2-demo/demo3)\n\n复制一个demo1。\n\n首先介绍下，在本例子中，page1.js和page2.js 均引用了一个公共模块（log.js），按照demo1的方案来做，最终page1.bundle.js和page2.bundle.js中均含有公共模块（log.js），在项目里是冗余的，我们应该把公共部分提取出来，建立一个commons.js才对。\n\n> 其实 webpack 加载器代码也是公共部分\n\n我们来修改下webpack.config.js\n\n```js\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {\n    entry: {\n        page1: './src/page1',\n        page2: './src/page2'\n    },\n    output: {\n        path: path.resolve(__dirname, \"dist\"),\n        filename: \"[name].bundle.js\"\n    },\n    plugins: [\n        // 通用代码独立文件插件\n        new webpack.optimize.CommonsChunkPlugin({\n            name: 'common',\n            filename: 'commons.js',\n            chunks: ['page1', 'page2'],\n            minChunks: 2\n        })\n    ]\n}\n```\n\n**代码说明**\n\n* 首先需要引入webpack，因为CommonsChunkPlugin是存在于 `webpack.optimize.CommonsChunkPlugin` 这里的，这个是webapck自带组件，无需npm额外安装。\n* 入口上，我们是用对象表示的，其中page1、page2是叫做chunk（代码块），这个chunk应该是唯一的，如果不唯一，会被覆盖掉。\n\n**配置说明**\n* `name` 这个就是最终抽离出来的代码的chunk（代码块）名字，应该是唯一的，必须填。如果与entry等字段的chunk不同，则新建立一个代码块并最终生成单独文件；如果和其他chunk相同，会把其他chunk覆盖掉，最终的文件中就不会有被覆盖的chunk代码的文件了。\n* `filename` 最终打包文件名字\n* `chunks` 配置chunks入口，比如当前有5个chunks（page1,page2,page3,page4,page5），但是你只想把page1和page2的chunks进行提取，那么这里只需要配置两个就行了。如果不配置，则表示所有chunks都处理。\n* `minChunks` 模块最少要被依赖多少次，才能算作公共模块。首先，webpack处理模块部分以及第三方依赖库（如果有的话）会写入commons.js；之后检查每个入口chunk相同的依赖，如果该依赖存在大于等于2次chunk调用（本例子是2个，以此举例），则写入commons.js，否则写入到相应js文件中，就不算做公共代码。如果 `minChunks: 1`，那么所有以来的组件均算作公共代码了。\n\n都弄好了，我们在执行打包看看效果。\n\n```bash\nnpm run webpack\n```\n\n检查下dist目录，多出了一个`commons.js`，这里面包含了webpack的加载器代码，同时还有公共代码（log.js）。\n\n在看看page1.js和page2.js，每个文件都变得非常小了，之后相应的业务代码，没有了对应的模块被打到当前文件中。\n\n这样，公共模块就提取好啦~","source":"_posts/2017/2017-02-19-webpack2-2.md","raw":"---\nlayout: post\ntitle: \"webpack2入门-第二篇 公共代码提取插件\"\ndate: 2017-02-19 11:01:00 GMT+0800\ncategories: [前端]\ntags:  [webpack]\n---\n\n这次，我们来看看 webpack 中一些常见的插件如何来使用。\n\n接上篇。\n\n<!-- more -->\n\n## 第三个例子 demo3 CommonsChunkPlugin [webpack2-demo3](https://github.com/yukapril/learning/tree/master/webpack2-demo/demo3)\n\n复制一个demo1。\n\n首先介绍下，在本例子中，page1.js和page2.js 均引用了一个公共模块（log.js），按照demo1的方案来做，最终page1.bundle.js和page2.bundle.js中均含有公共模块（log.js），在项目里是冗余的，我们应该把公共部分提取出来，建立一个commons.js才对。\n\n> 其实 webpack 加载器代码也是公共部分\n\n我们来修改下webpack.config.js\n\n```js\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {\n    entry: {\n        page1: './src/page1',\n        page2: './src/page2'\n    },\n    output: {\n        path: path.resolve(__dirname, \"dist\"),\n        filename: \"[name].bundle.js\"\n    },\n    plugins: [\n        // 通用代码独立文件插件\n        new webpack.optimize.CommonsChunkPlugin({\n            name: 'common',\n            filename: 'commons.js',\n            chunks: ['page1', 'page2'],\n            minChunks: 2\n        })\n    ]\n}\n```\n\n**代码说明**\n\n* 首先需要引入webpack，因为CommonsChunkPlugin是存在于 `webpack.optimize.CommonsChunkPlugin` 这里的，这个是webapck自带组件，无需npm额外安装。\n* 入口上，我们是用对象表示的，其中page1、page2是叫做chunk（代码块），这个chunk应该是唯一的，如果不唯一，会被覆盖掉。\n\n**配置说明**\n* `name` 这个就是最终抽离出来的代码的chunk（代码块）名字，应该是唯一的，必须填。如果与entry等字段的chunk不同，则新建立一个代码块并最终生成单独文件；如果和其他chunk相同，会把其他chunk覆盖掉，最终的文件中就不会有被覆盖的chunk代码的文件了。\n* `filename` 最终打包文件名字\n* `chunks` 配置chunks入口，比如当前有5个chunks（page1,page2,page3,page4,page5），但是你只想把page1和page2的chunks进行提取，那么这里只需要配置两个就行了。如果不配置，则表示所有chunks都处理。\n* `minChunks` 模块最少要被依赖多少次，才能算作公共模块。首先，webpack处理模块部分以及第三方依赖库（如果有的话）会写入commons.js；之后检查每个入口chunk相同的依赖，如果该依赖存在大于等于2次chunk调用（本例子是2个，以此举例），则写入commons.js，否则写入到相应js文件中，就不算做公共代码。如果 `minChunks: 1`，那么所有以来的组件均算作公共代码了。\n\n都弄好了，我们在执行打包看看效果。\n\n```bash\nnpm run webpack\n```\n\n检查下dist目录，多出了一个`commons.js`，这里面包含了webpack的加载器代码，同时还有公共代码（log.js）。\n\n在看看page1.js和page2.js，每个文件都变得非常小了，之后相应的业务代码，没有了对应的模块被打到当前文件中。\n\n这样，公共模块就提取好啦~","slug":"2017-2017-02-19-webpack2-2","published":1,"updated":"2020-03-02T07:16:34.640Z","comments":1,"photos":[],"link":"","_id":"cka5ik8aw001onybg4hbt2net","content":"<p>这次，我们来看看 webpack 中一些常见的插件如何来使用。</p>\n<p>接上篇。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"第三个例子-demo3-CommonsChunkPlugin-webpack2-demo3\"><a href=\"#第三个例子-demo3-CommonsChunkPlugin-webpack2-demo3\" class=\"headerlink\" title=\"第三个例子 demo3 CommonsChunkPlugin webpack2-demo3\"></a>第三个例子 demo3 CommonsChunkPlugin <a href=\"https://github.com/yukapril/learning/tree/master/webpack2-demo/demo3\" target=\"_blank\" rel=\"noopener\">webpack2-demo3</a></h2><p>复制一个demo1。</p>\n<p>首先介绍下，在本例子中，page1.js和page2.js 均引用了一个公共模块（log.js），按照demo1的方案来做，最终page1.bundle.js和page2.bundle.js中均含有公共模块（log.js），在项目里是冗余的，我们应该把公共部分提取出来，建立一个commons.js才对。</p>\n<blockquote>\n<p>其实 webpack 加载器代码也是公共部分</p>\n</blockquote>\n<p>我们来修改下webpack.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        page1: <span class=\"string\">'./src/page1'</span>,</span><br><span class=\"line\">        page2: <span class=\"string\">'./src/page2'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">\"dist\"</span>),</span><br><span class=\"line\">        filename: <span class=\"string\">\"[name].bundle.js\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"comment\">// 通用代码独立文件插件</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">            name: <span class=\"string\">'common'</span>,</span><br><span class=\"line\">            filename: <span class=\"string\">'commons.js'</span>,</span><br><span class=\"line\">            chunks: [<span class=\"string\">'page1'</span>, <span class=\"string\">'page2'</span>],</span><br><span class=\"line\">            minChunks: <span class=\"number\">2</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>代码说明</strong></p>\n<ul>\n<li>首先需要引入webpack，因为CommonsChunkPlugin是存在于 <code>webpack.optimize.CommonsChunkPlugin</code> 这里的，这个是webapck自带组件，无需npm额外安装。</li>\n<li>入口上，我们是用对象表示的，其中page1、page2是叫做chunk（代码块），这个chunk应该是唯一的，如果不唯一，会被覆盖掉。</li>\n</ul>\n<p><strong>配置说明</strong></p>\n<ul>\n<li><code>name</code> 这个就是最终抽离出来的代码的chunk（代码块）名字，应该是唯一的，必须填。如果与entry等字段的chunk不同，则新建立一个代码块并最终生成单独文件；如果和其他chunk相同，会把其他chunk覆盖掉，最终的文件中就不会有被覆盖的chunk代码的文件了。</li>\n<li><code>filename</code> 最终打包文件名字</li>\n<li><code>chunks</code> 配置chunks入口，比如当前有5个chunks（page1,page2,page3,page4,page5），但是你只想把page1和page2的chunks进行提取，那么这里只需要配置两个就行了。如果不配置，则表示所有chunks都处理。</li>\n<li><code>minChunks</code> 模块最少要被依赖多少次，才能算作公共模块。首先，webpack处理模块部分以及第三方依赖库（如果有的话）会写入commons.js；之后检查每个入口chunk相同的依赖，如果该依赖存在大于等于2次chunk调用（本例子是2个，以此举例），则写入commons.js，否则写入到相应js文件中，就不算做公共代码。如果 <code>minChunks: 1</code>，那么所有以来的组件均算作公共代码了。</li>\n</ul>\n<p>都弄好了，我们在执行打包看看效果。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run webpack</span><br></pre></td></tr></table></figure>\n\n<p>检查下dist目录，多出了一个<code>commons.js</code>，这里面包含了webpack的加载器代码，同时还有公共代码（log.js）。</p>\n<p>在看看page1.js和page2.js，每个文件都变得非常小了，之后相应的业务代码，没有了对应的模块被打到当前文件中。</p>\n<p>这样，公共模块就提取好啦~</p>\n","site":{"data":{}},"excerpt":"<p>这次，我们来看看 webpack 中一些常见的插件如何来使用。</p>\n<p>接上篇。</p>","more":"<h2 id=\"第三个例子-demo3-CommonsChunkPlugin-webpack2-demo3\"><a href=\"#第三个例子-demo3-CommonsChunkPlugin-webpack2-demo3\" class=\"headerlink\" title=\"第三个例子 demo3 CommonsChunkPlugin webpack2-demo3\"></a>第三个例子 demo3 CommonsChunkPlugin <a href=\"https://github.com/yukapril/learning/tree/master/webpack2-demo/demo3\" target=\"_blank\" rel=\"noopener\">webpack2-demo3</a></h2><p>复制一个demo1。</p>\n<p>首先介绍下，在本例子中，page1.js和page2.js 均引用了一个公共模块（log.js），按照demo1的方案来做，最终page1.bundle.js和page2.bundle.js中均含有公共模块（log.js），在项目里是冗余的，我们应该把公共部分提取出来，建立一个commons.js才对。</p>\n<blockquote>\n<p>其实 webpack 加载器代码也是公共部分</p>\n</blockquote>\n<p>我们来修改下webpack.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        page1: <span class=\"string\">'./src/page1'</span>,</span><br><span class=\"line\">        page2: <span class=\"string\">'./src/page2'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">\"dist\"</span>),</span><br><span class=\"line\">        filename: <span class=\"string\">\"[name].bundle.js\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"comment\">// 通用代码独立文件插件</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">            name: <span class=\"string\">'common'</span>,</span><br><span class=\"line\">            filename: <span class=\"string\">'commons.js'</span>,</span><br><span class=\"line\">            chunks: [<span class=\"string\">'page1'</span>, <span class=\"string\">'page2'</span>],</span><br><span class=\"line\">            minChunks: <span class=\"number\">2</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>代码说明</strong></p>\n<ul>\n<li>首先需要引入webpack，因为CommonsChunkPlugin是存在于 <code>webpack.optimize.CommonsChunkPlugin</code> 这里的，这个是webapck自带组件，无需npm额外安装。</li>\n<li>入口上，我们是用对象表示的，其中page1、page2是叫做chunk（代码块），这个chunk应该是唯一的，如果不唯一，会被覆盖掉。</li>\n</ul>\n<p><strong>配置说明</strong></p>\n<ul>\n<li><code>name</code> 这个就是最终抽离出来的代码的chunk（代码块）名字，应该是唯一的，必须填。如果与entry等字段的chunk不同，则新建立一个代码块并最终生成单独文件；如果和其他chunk相同，会把其他chunk覆盖掉，最终的文件中就不会有被覆盖的chunk代码的文件了。</li>\n<li><code>filename</code> 最终打包文件名字</li>\n<li><code>chunks</code> 配置chunks入口，比如当前有5个chunks（page1,page2,page3,page4,page5），但是你只想把page1和page2的chunks进行提取，那么这里只需要配置两个就行了。如果不配置，则表示所有chunks都处理。</li>\n<li><code>minChunks</code> 模块最少要被依赖多少次，才能算作公共模块。首先，webpack处理模块部分以及第三方依赖库（如果有的话）会写入commons.js；之后检查每个入口chunk相同的依赖，如果该依赖存在大于等于2次chunk调用（本例子是2个，以此举例），则写入commons.js，否则写入到相应js文件中，就不算做公共代码。如果 <code>minChunks: 1</code>，那么所有以来的组件均算作公共代码了。</li>\n</ul>\n<p>都弄好了，我们在执行打包看看效果。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run webpack</span><br></pre></td></tr></table></figure>\n\n<p>检查下dist目录，多出了一个<code>commons.js</code>，这里面包含了webpack的加载器代码，同时还有公共代码（log.js）。</p>\n<p>在看看page1.js和page2.js，每个文件都变得非常小了，之后相应的业务代码，没有了对应的模块被打到当前文件中。</p>\n<p>这样，公共模块就提取好啦~</p>"},{"layout":"post","title":"JS的new关键字考题一则","date":"2017-02-21T22:25:00.000Z","_content":"\n在sf.gg看到这样一个[问题](https://segmentfault.com/q/1010000008430170)：\n\n<!-- more -->\n\n```js\nfunction Foo() {\n  getName = function () {\n    alert(1);\n  };\n  return this;\n}\nFoo.prototype.getName = function () {\n  alert(3);\n};\nvar getName = function () {\n  alert(4);\n};\nfunction getName() {\n  alert(5);\n}\n\nnew Foo().getName();\n```\n\n自己也尝试解答下。\n\n从上至下，扫一遍，首先要处理下声明提升问题。\n\n这个不难理解，处理后的代码是\n\n```js\nvar getName = undefined;\n\nfunction Foo() {\n  getName = function () {\n    alert(1);\n  };\n  return this;\n}\nFoo.prototype.getName = function () {\n  alert(3);\n};\n\ngetName = function () {\n  alert(4);\n};\n\nfunction getName() {\n  alert(5);\n}\n\nnew Foo().getName();\n```\n\n这里能看出，4是不能被弹出的，因为被5覆盖了。而且，`getName` 是定义在了全局上，访问的话是 `window.getName`。\n\n但是，如果执行了 `Foo()`，则会把 `getName` 再次覆盖，此时只能弹出1。\n\n不过，这个其实和最终的答案没啥关系...\n\n主要可以看出 `Foo` 是构造函数，在其原型链上增加了方法 `getName`。\n\n最后一句我已开始也看错了，主要是少看了括号。\n\n最后一句可以看成\n\n```js\nvar test = new Foo();\ntest.getName(); // 3\n```\n\n这样就好理解了。新创建的对象访问`Foo`的原型链，就可以得到结果3。\n\n我把最后一句看成了 `new Foo.getName`，结果没有找到\n\n```js\nFoo.getName = function(){\n  ...\n  return this;  \n};\n```\n\n这种内容...\n\n看来是我想的太复杂了...\n","source":"_posts/2017/2017-02-21-js-new.md","raw":"---\nlayout: post\ntitle: \"JS的new关键字考题一则\"\ndate: 2017-02-21 22:25:00 GMT+0800\ncategories: [前端]\ntags:  [js, new]\n---\n\n在sf.gg看到这样一个[问题](https://segmentfault.com/q/1010000008430170)：\n\n<!-- more -->\n\n```js\nfunction Foo() {\n  getName = function () {\n    alert(1);\n  };\n  return this;\n}\nFoo.prototype.getName = function () {\n  alert(3);\n};\nvar getName = function () {\n  alert(4);\n};\nfunction getName() {\n  alert(5);\n}\n\nnew Foo().getName();\n```\n\n自己也尝试解答下。\n\n从上至下，扫一遍，首先要处理下声明提升问题。\n\n这个不难理解，处理后的代码是\n\n```js\nvar getName = undefined;\n\nfunction Foo() {\n  getName = function () {\n    alert(1);\n  };\n  return this;\n}\nFoo.prototype.getName = function () {\n  alert(3);\n};\n\ngetName = function () {\n  alert(4);\n};\n\nfunction getName() {\n  alert(5);\n}\n\nnew Foo().getName();\n```\n\n这里能看出，4是不能被弹出的，因为被5覆盖了。而且，`getName` 是定义在了全局上，访问的话是 `window.getName`。\n\n但是，如果执行了 `Foo()`，则会把 `getName` 再次覆盖，此时只能弹出1。\n\n不过，这个其实和最终的答案没啥关系...\n\n主要可以看出 `Foo` 是构造函数，在其原型链上增加了方法 `getName`。\n\n最后一句我已开始也看错了，主要是少看了括号。\n\n最后一句可以看成\n\n```js\nvar test = new Foo();\ntest.getName(); // 3\n```\n\n这样就好理解了。新创建的对象访问`Foo`的原型链，就可以得到结果3。\n\n我把最后一句看成了 `new Foo.getName`，结果没有找到\n\n```js\nFoo.getName = function(){\n  ...\n  return this;  \n};\n```\n\n这种内容...\n\n看来是我想的太复杂了...\n","slug":"2017-2017-02-21-js-new","published":1,"updated":"2020-03-02T07:16:34.640Z","comments":1,"photos":[],"link":"","_id":"cka5ik8ax001rnybgr6d1pn3p","content":"<p>在sf.gg看到这样一个<a href=\"https://segmentfault.com/q/1010000008430170\" target=\"_blank\" rel=\"noopener\">问题</a>：</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo().getName();</span><br></pre></td></tr></table></figure>\n\n<p>自己也尝试解答下。</p>\n<p>从上至下，扫一遍，首先要处理下声明提升问题。</p>\n<p>这个不难理解，处理后的代码是</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo().getName();</span><br></pre></td></tr></table></figure>\n\n<p>这里能看出，4是不能被弹出的，因为被5覆盖了。而且，<code>getName</code> 是定义在了全局上，访问的话是 <code>window.getName</code>。</p>\n<p>但是，如果执行了 <code>Foo()</code>，则会把 <code>getName</code> 再次覆盖，此时只能弹出1。</p>\n<p>不过，这个其实和最终的答案没啥关系…</p>\n<p>主要可以看出 <code>Foo</code> 是构造函数，在其原型链上增加了方法 <code>getName</code>。</p>\n<p>最后一句我已开始也看错了，主要是少看了括号。</p>\n<p>最后一句可以看成</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\">test.getName(); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p>这样就好理解了。新创建的对象访问<code>Foo</code>的原型链，就可以得到结果3。</p>\n<p>我把最后一句看成了 <code>new Foo.getName</code>，结果没有找到</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Foo.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这种内容…</p>\n<p>看来是我想的太复杂了…</p>\n","site":{"data":{}},"excerpt":"<p>在sf.gg看到这样一个<a href=\"https://segmentfault.com/q/1010000008430170\" target=\"_blank\" rel=\"noopener\">问题</a>：</p>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo().getName();</span><br></pre></td></tr></table></figure>\n\n<p>自己也尝试解答下。</p>\n<p>从上至下，扫一遍，首先要处理下声明提升问题。</p>\n<p>这个不难理解，处理后的代码是</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo().getName();</span><br></pre></td></tr></table></figure>\n\n<p>这里能看出，4是不能被弹出的，因为被5覆盖了。而且，<code>getName</code> 是定义在了全局上，访问的话是 <code>window.getName</code>。</p>\n<p>但是，如果执行了 <code>Foo()</code>，则会把 <code>getName</code> 再次覆盖，此时只能弹出1。</p>\n<p>不过，这个其实和最终的答案没啥关系…</p>\n<p>主要可以看出 <code>Foo</code> 是构造函数，在其原型链上增加了方法 <code>getName</code>。</p>\n<p>最后一句我已开始也看错了，主要是少看了括号。</p>\n<p>最后一句可以看成</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\">test.getName(); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p>这样就好理解了。新创建的对象访问<code>Foo</code>的原型链，就可以得到结果3。</p>\n<p>我把最后一句看成了 <code>new Foo.getName</code>，结果没有找到</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Foo.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这种内容…</p>\n<p>看来是我想的太复杂了…</p>"},{"layout":"post","title":"JS的__proto__ prototype constructor理解","date":"2017-02-26T23:51:00.000Z","_content":"\nJavascript 下的 `__proto__` `prototype` `constructor`，我一直都很困惑。\n\n看过了一些文章，加上自己粗浅的理解，整理如下。\n\n<!-- more -->\n\n首先，要想明白这三个对象的含义，就需要先知道JS的类型。这里简单说下：\n\n```js\n// js的五个基本类型（值类型）和对象类型（引用类型）\n// typeof 的结果\n\nvar str = 'asdf'; // string\n\nvar num = 1234; // number\n\nvar bool = true; // boolean（但是有constructor）\n\nvar nullObj = null; // object\n\nvar undefinedObj = undefined; // undefined\n\nvar obj = {}; // object\n\n// 对象类型种类非常多，比如object / array / function等。\n\n// 唯独，这三个比较特殊，一般也没人这么写，暂时忽略\n// 这种写法仅仅是给值类型的数据包裹了一层而已\nvar str2 = new String('asdf') // object\nvar num2 = new Number(1234) // object\nvar bool2 = new Boolean(true); // object\n```\n\n## 先来聊一聊 原型 `__proto__`\n\n首先呢，这个东西，是现代浏览器才能看到的，比如chrome的devtools。但是这个概念是一直有的，只不过老的浏览器禁止查看而已。\n\n要想好好解释，那就说来话长。我还是简短的说吧。\n\n一开始没有对象，只有 `null` 类型，后来在 `null` 基础上扩展出了 `object` 类型。再后来，有了 `function` 等类型。\n\n**可以说，每个对象都有 `__proto__`，他就是指向自己的直接父辈。**\n\n来看张图：\n\n![image](https://cdn0.yukapril.com/blog/2017-02-26-javascript-proto.png-wm.black)\n\n对象 `obj` 的父辈是 `Object`，对象 `arr` 的父辈是 `Array`。\n\n可以写作\n\n```js\nvar obj = {};\nvar arr = [];\nobj.__proto__ === Object.prototype\narr.__proto__ === Array.prototype\n\nArray.__proto__ === Object\n```\n\n这里为什么不是 `obj.__proto__ === Object` 呢？`Object` 是个构造函数，它的操作方法都放在 `prototype` 原型对象上。下文会说到。\n\n而且：\n\n```js\narr.__proto__ === Array.prototype\nArray.prototype.__proto__ === Object.prototype\nObject.prototype.__proto__ === null\n\n// 综上，可以为\narr.__proto__.__proto__.__proto__ === null \n```\n\n这样，一层一层的往自己的父辈上找原型，就是原型链了。\n\n由于 `__proto__` 是个内部方法，所以其实不必太在意，知道有这个东西就行了。\n\n这玩意除了别人考你 new关键字的原理时候会用到，其他时候我没注意有啥用途。\n\n```js\nfunction New (f) { \n    var n = {};\n    n.__proto__ = f.prototype;\n    return function () { \n        f.apply(n, arguments); \n        return n; \n   }; \n}\n```\n\n**当然，你应该知道，js一切皆对象，所以创建的一切变量（也就是一切都是对象）都是有 `__proto__` 的，`null` 除外。**\n\n## 再聊一聊 原型对象 `prototype`\n\n这个应该最常见。比如ES5代码中：\n\n```js\nfunction Person (){}\nPerson.prototype.canSpeak = true;\n\nvar p = new Person();\nconsole.log(p.canSpeak); // true\n```\n\n这里面有几个重要的点：\n* `Person` 是函数，准确地讲，是构造函数。直白一点，这个函数最终主要使用方法是 `new Person` 这种形式。\n* 绑定的 `canSpeak` 方法，可以是函数，也可以直接是字面量（字符串/数字等），这个无所谓。\n* 由于`canSpeak`绑定在 `prototype` 上，所以必须要实例化（`var p = new Person()`），`p` 就是实例化后的对象。\n* 实例化的 `p`，是对象。它绝对不是函数！\n\n在有一个`Person`构造函数上，我们在它的原型对象上（`prototype`）绑有一个`canSpeak`方法，结果他的实例化对象就有了这个方法。原因就是上文的new原理。\n\n我们查看下这个对象的结构：\n\n![image](https://cdn0.yukapril.com/blog/2017-02-26-javascript-prototype.png-wm.black)\n\n当我们访问 `p.canSpeak`时候，由于对象上本身没有 `canSpeak` 方法，就去它的原型去找此方法。说白了，自己没有，就去看看父辈那里有没有这种方法。\n\n这里有一个有意思的实验：\n\n```js\nfunction Person (){}\nPerson.prototype.canSpeak = true;\n\nvar p = new Person();\np.canSpeak = 123;\n\nconsole.log(p.canSpeak); // 123\n```\n\n我们看看它的结果：\n\n![image](https://cdn0.yukapril.com/blog/2017-02-26-javascript-prototype2.png-wm.black)\n\n这就说明了，如果自己本身有这个方法，是不会去父辈（原型链）那里寻找的。\n\n**小结**\n\n* 只有函数（function）才会有原型对象 `prototype`\n* 一个函数，当做构造函数被new之后，每个实例都可以使用原型对象的方法，`prototype` 相当于共享方法。\n* 如果我们想生成一些对象，默认每个对象都拥有一些相同的方法，就可以创建构造函数，然后实例化的对象就是我们想要的东西。\n\n在ES6里面，构造函数有了新的定义方法：\n\n```js\nclass Person{\n    constructor(){}\n    canSpeak(){\n        return 'yes';\n    };\n}\n\nvar p = new Person();\nconsole.log(p.canSpeak());\n```\n\n不过，我不太清楚如何想上面一样定义返回普通值的方法，而不是现在ES6中的函数。\n\n\n## 最后提一提 构造器 `constructor`\n\n先来说普通对象（万物皆对象）\n\n```js\nvar str = 'abc';\n\nstr.prototype; //是不存在的，prototype存在于构造函数中\nstr.__proto__ === String.prototype; // 字符串的父辈是String\n\nString.prototype.constructor === String;\n// 即\nstr.__proto__.constructor === String; \n// 每个构造函数，其prototype中，constructor是指向自己的\n\n// 同时有\nstr.__proto__.constructor === str.constructor;\n// 即\nstr.constructor === String;\n```\n\n它存在于 `.__proto__.constructor` 下。因为他的 `__proto__` 是 `父辈.prototype` ，相当于父辈是构造函数。（当然，你也可以直接通过 `.constructor`  访问到，因为自己找不到就会到原型中找啊~）\n\n再来说构造函数\n\n```js\nvar Foo = function(){};\nFoo.prototype.bar = function(){};\nFoo.prototype.constructor === Foo; //  每个构造函数，其prototype中，constructor是指向自己的\n\n// 同时有\nFoo.__proto__ === Function.prototype;\nFoo.__proto__.constructor === Function; // Foo的原型是Function，所以其原型的constructor是Function\n\n// 再来看看构造函数的实例，和普通对象没区别\nvar f = new Foo();\nf.prototype; //是不存在的，prototype存在于构造函数中\nf.__proto__ ===Foo.prototype;\nf.__proto__.constructor === Foo;\n```\n\n看到这里，我们得到结论，所有构造函数，自己的 `prototype`中，除了我们定义的原型对象外，还有一个隐藏的 `constructor`，他不是通过其 `__proto__`得到的，而是真真正正自己的。而且 `constructor` 指向自己。\n\n**小结**\n* `constructor` 是构造函数特有的东西。\n* 构造函数本身自己的 `prototype` 中要有一个`constructor`，这样自己的实例才能指向到构造函数本身。\n* 所有对象，都是被父辈构造函数实例化出来的，所以他们`.__proto__.constructor`指向父辈。\n* **“`constructor`指向自己” —— 很关键，js实现继承的时候，需要提到。**\n\n\n## 说一下js的继承\n\n在ES6之前，没有class extend方法，只能使用ES5的 `Object.create` 方法，或者下文：\n\n```js\nfunction extend(Child, Parent) {\n    var F = function () {}; \n    \n    F.prototype = Parent.prototype; \n    \n    Child.prototype = new F();\n    \n    Child.prototype.constructor ===Child;\n    \n    Child.uber = Parent.prototype;\n    // 这句话写不写无所谓，给Child构造函数增加一个静态方法，指向父辈原型对象，纯粹为了使用方便而已，不影响继承\n}\n```\n\n解释下：\n\n```js\nvar F = function () {}; \n```\n\n创建一个新的构造函数，下文可以使用。\n\n```js\nF.prototype = Parent.prototype; \n```\n把F构造函数的原型对象指向父辈原型对象，相当于把父辈的共享方法拷贝过来。\n\n这样通过 new Foo() 的实例，才会具有父辈的共享方法。\n\n```js\nChild.prototype = new F();\n```\n\n为了好说明，我们先定义 f，这样看的清晰：\n\n```js\nvar f = new F(); \nChild.prototype = f;\n```\n\n此时有：`f.__proto__ === F.prototype`\n\n但是 `f.__proto__.constructor !== F`，\n\n因为 `F.prototype = Parent.prototype`，\n\n所以 `f.__proto__.constructor === Parent`。\n\n综合一下，本处的结果是：\n\n```js\nChild.prototype = f;\nChild.prototype.__proto__ === F.prototype;\nChild.prototype.__proto__.constructor === Parent;\n```\n\n也就是说，经过本函数传入的Child只能是空构造函数  `function(){...}`，绝对不能带有原定对象内容。\n\n因为如果进入本函数前定义了其原型对象 `Child.prototype.testChild = function(){}`，经过本函数后，原型对象也会被覆盖！\n\n既然被覆盖，那么Child.prototype里面没有任何内容，\n\n此时 `Child.prototype.constructor` 也就指向了  `Child.prototype.__proto__.constructor`\n\n即：`Child.prototype.constructor === Parent`。\n\n**晕，Child的构造器指向了Parent，这是问题！**\n\n所以继承函数中，应该有这一行代码：\n\n```js\nChild.prototype.constructor === Child;\n```\n\n我们必须修正下构造器指向。\n\n分析结束。\n\n我们测试下：\n\n```js\nvar Parent = function(){};\nParent.prototype.running = function(){}; // 父亲会跑步\nParent.prototype.swiming = function(){}; // 父亲会游泳\n\nvar Child = function(){};\nChild.prototype.pingpong = function(){}; //孩子会乒乓球\n\nextend(Child,Parent);\n\n\nvar xiaoming = new Child();\nxiaoming.running();\nxiaoming.swiming();\nxiaoming.pingpong(); // TypeError，Child没有pingpong方法\n```\n\n我们先定义父亲和孩子两个构造函数，并赋予他们不同的能力，经过继承后，结果孩子的能力消失了！因为在继承前，子类任何原型对象均会被覆盖！\n\n所以一定要在继承后，在添加原型对象：\n\n```js\nvar Parent = function(){};\nParent.prototype.running = function(){}; // 父亲会跑步\nParent.prototype.swiming = function(){}; // 父亲会游泳\n\nvar Child = function(){};\n\nextend(Child,Parent);\n\nChild.prototype.pingpong = function(){}; //孩子会乒乓球\n\n\nvar xiaohua = new Child();\nxiaohua.running();\nxiaohua.swiming();\nxiaohua.pingpong(); \n```\n\n== 本文完 ==","source":"_posts/2017/2017-02-26-js-prototype.md","raw":"---\nlayout: post\ntitle: \"JS的__proto__ prototype constructor理解\"\ndate: 2017-02-26 23:51:00 GMT+0800\ncategories: [前端]\ntags:  [js, proto, prototype, constructor]\n---\n\nJavascript 下的 `__proto__` `prototype` `constructor`，我一直都很困惑。\n\n看过了一些文章，加上自己粗浅的理解，整理如下。\n\n<!-- more -->\n\n首先，要想明白这三个对象的含义，就需要先知道JS的类型。这里简单说下：\n\n```js\n// js的五个基本类型（值类型）和对象类型（引用类型）\n// typeof 的结果\n\nvar str = 'asdf'; // string\n\nvar num = 1234; // number\n\nvar bool = true; // boolean（但是有constructor）\n\nvar nullObj = null; // object\n\nvar undefinedObj = undefined; // undefined\n\nvar obj = {}; // object\n\n// 对象类型种类非常多，比如object / array / function等。\n\n// 唯独，这三个比较特殊，一般也没人这么写，暂时忽略\n// 这种写法仅仅是给值类型的数据包裹了一层而已\nvar str2 = new String('asdf') // object\nvar num2 = new Number(1234) // object\nvar bool2 = new Boolean(true); // object\n```\n\n## 先来聊一聊 原型 `__proto__`\n\n首先呢，这个东西，是现代浏览器才能看到的，比如chrome的devtools。但是这个概念是一直有的，只不过老的浏览器禁止查看而已。\n\n要想好好解释，那就说来话长。我还是简短的说吧。\n\n一开始没有对象，只有 `null` 类型，后来在 `null` 基础上扩展出了 `object` 类型。再后来，有了 `function` 等类型。\n\n**可以说，每个对象都有 `__proto__`，他就是指向自己的直接父辈。**\n\n来看张图：\n\n![image](https://cdn0.yukapril.com/blog/2017-02-26-javascript-proto.png-wm.black)\n\n对象 `obj` 的父辈是 `Object`，对象 `arr` 的父辈是 `Array`。\n\n可以写作\n\n```js\nvar obj = {};\nvar arr = [];\nobj.__proto__ === Object.prototype\narr.__proto__ === Array.prototype\n\nArray.__proto__ === Object\n```\n\n这里为什么不是 `obj.__proto__ === Object` 呢？`Object` 是个构造函数，它的操作方法都放在 `prototype` 原型对象上。下文会说到。\n\n而且：\n\n```js\narr.__proto__ === Array.prototype\nArray.prototype.__proto__ === Object.prototype\nObject.prototype.__proto__ === null\n\n// 综上，可以为\narr.__proto__.__proto__.__proto__ === null \n```\n\n这样，一层一层的往自己的父辈上找原型，就是原型链了。\n\n由于 `__proto__` 是个内部方法，所以其实不必太在意，知道有这个东西就行了。\n\n这玩意除了别人考你 new关键字的原理时候会用到，其他时候我没注意有啥用途。\n\n```js\nfunction New (f) { \n    var n = {};\n    n.__proto__ = f.prototype;\n    return function () { \n        f.apply(n, arguments); \n        return n; \n   }; \n}\n```\n\n**当然，你应该知道，js一切皆对象，所以创建的一切变量（也就是一切都是对象）都是有 `__proto__` 的，`null` 除外。**\n\n## 再聊一聊 原型对象 `prototype`\n\n这个应该最常见。比如ES5代码中：\n\n```js\nfunction Person (){}\nPerson.prototype.canSpeak = true;\n\nvar p = new Person();\nconsole.log(p.canSpeak); // true\n```\n\n这里面有几个重要的点：\n* `Person` 是函数，准确地讲，是构造函数。直白一点，这个函数最终主要使用方法是 `new Person` 这种形式。\n* 绑定的 `canSpeak` 方法，可以是函数，也可以直接是字面量（字符串/数字等），这个无所谓。\n* 由于`canSpeak`绑定在 `prototype` 上，所以必须要实例化（`var p = new Person()`），`p` 就是实例化后的对象。\n* 实例化的 `p`，是对象。它绝对不是函数！\n\n在有一个`Person`构造函数上，我们在它的原型对象上（`prototype`）绑有一个`canSpeak`方法，结果他的实例化对象就有了这个方法。原因就是上文的new原理。\n\n我们查看下这个对象的结构：\n\n![image](https://cdn0.yukapril.com/blog/2017-02-26-javascript-prototype.png-wm.black)\n\n当我们访问 `p.canSpeak`时候，由于对象上本身没有 `canSpeak` 方法，就去它的原型去找此方法。说白了，自己没有，就去看看父辈那里有没有这种方法。\n\n这里有一个有意思的实验：\n\n```js\nfunction Person (){}\nPerson.prototype.canSpeak = true;\n\nvar p = new Person();\np.canSpeak = 123;\n\nconsole.log(p.canSpeak); // 123\n```\n\n我们看看它的结果：\n\n![image](https://cdn0.yukapril.com/blog/2017-02-26-javascript-prototype2.png-wm.black)\n\n这就说明了，如果自己本身有这个方法，是不会去父辈（原型链）那里寻找的。\n\n**小结**\n\n* 只有函数（function）才会有原型对象 `prototype`\n* 一个函数，当做构造函数被new之后，每个实例都可以使用原型对象的方法，`prototype` 相当于共享方法。\n* 如果我们想生成一些对象，默认每个对象都拥有一些相同的方法，就可以创建构造函数，然后实例化的对象就是我们想要的东西。\n\n在ES6里面，构造函数有了新的定义方法：\n\n```js\nclass Person{\n    constructor(){}\n    canSpeak(){\n        return 'yes';\n    };\n}\n\nvar p = new Person();\nconsole.log(p.canSpeak());\n```\n\n不过，我不太清楚如何想上面一样定义返回普通值的方法，而不是现在ES6中的函数。\n\n\n## 最后提一提 构造器 `constructor`\n\n先来说普通对象（万物皆对象）\n\n```js\nvar str = 'abc';\n\nstr.prototype; //是不存在的，prototype存在于构造函数中\nstr.__proto__ === String.prototype; // 字符串的父辈是String\n\nString.prototype.constructor === String;\n// 即\nstr.__proto__.constructor === String; \n// 每个构造函数，其prototype中，constructor是指向自己的\n\n// 同时有\nstr.__proto__.constructor === str.constructor;\n// 即\nstr.constructor === String;\n```\n\n它存在于 `.__proto__.constructor` 下。因为他的 `__proto__` 是 `父辈.prototype` ，相当于父辈是构造函数。（当然，你也可以直接通过 `.constructor`  访问到，因为自己找不到就会到原型中找啊~）\n\n再来说构造函数\n\n```js\nvar Foo = function(){};\nFoo.prototype.bar = function(){};\nFoo.prototype.constructor === Foo; //  每个构造函数，其prototype中，constructor是指向自己的\n\n// 同时有\nFoo.__proto__ === Function.prototype;\nFoo.__proto__.constructor === Function; // Foo的原型是Function，所以其原型的constructor是Function\n\n// 再来看看构造函数的实例，和普通对象没区别\nvar f = new Foo();\nf.prototype; //是不存在的，prototype存在于构造函数中\nf.__proto__ ===Foo.prototype;\nf.__proto__.constructor === Foo;\n```\n\n看到这里，我们得到结论，所有构造函数，自己的 `prototype`中，除了我们定义的原型对象外，还有一个隐藏的 `constructor`，他不是通过其 `__proto__`得到的，而是真真正正自己的。而且 `constructor` 指向自己。\n\n**小结**\n* `constructor` 是构造函数特有的东西。\n* 构造函数本身自己的 `prototype` 中要有一个`constructor`，这样自己的实例才能指向到构造函数本身。\n* 所有对象，都是被父辈构造函数实例化出来的，所以他们`.__proto__.constructor`指向父辈。\n* **“`constructor`指向自己” —— 很关键，js实现继承的时候，需要提到。**\n\n\n## 说一下js的继承\n\n在ES6之前，没有class extend方法，只能使用ES5的 `Object.create` 方法，或者下文：\n\n```js\nfunction extend(Child, Parent) {\n    var F = function () {}; \n    \n    F.prototype = Parent.prototype; \n    \n    Child.prototype = new F();\n    \n    Child.prototype.constructor ===Child;\n    \n    Child.uber = Parent.prototype;\n    // 这句话写不写无所谓，给Child构造函数增加一个静态方法，指向父辈原型对象，纯粹为了使用方便而已，不影响继承\n}\n```\n\n解释下：\n\n```js\nvar F = function () {}; \n```\n\n创建一个新的构造函数，下文可以使用。\n\n```js\nF.prototype = Parent.prototype; \n```\n把F构造函数的原型对象指向父辈原型对象，相当于把父辈的共享方法拷贝过来。\n\n这样通过 new Foo() 的实例，才会具有父辈的共享方法。\n\n```js\nChild.prototype = new F();\n```\n\n为了好说明，我们先定义 f，这样看的清晰：\n\n```js\nvar f = new F(); \nChild.prototype = f;\n```\n\n此时有：`f.__proto__ === F.prototype`\n\n但是 `f.__proto__.constructor !== F`，\n\n因为 `F.prototype = Parent.prototype`，\n\n所以 `f.__proto__.constructor === Parent`。\n\n综合一下，本处的结果是：\n\n```js\nChild.prototype = f;\nChild.prototype.__proto__ === F.prototype;\nChild.prototype.__proto__.constructor === Parent;\n```\n\n也就是说，经过本函数传入的Child只能是空构造函数  `function(){...}`，绝对不能带有原定对象内容。\n\n因为如果进入本函数前定义了其原型对象 `Child.prototype.testChild = function(){}`，经过本函数后，原型对象也会被覆盖！\n\n既然被覆盖，那么Child.prototype里面没有任何内容，\n\n此时 `Child.prototype.constructor` 也就指向了  `Child.prototype.__proto__.constructor`\n\n即：`Child.prototype.constructor === Parent`。\n\n**晕，Child的构造器指向了Parent，这是问题！**\n\n所以继承函数中，应该有这一行代码：\n\n```js\nChild.prototype.constructor === Child;\n```\n\n我们必须修正下构造器指向。\n\n分析结束。\n\n我们测试下：\n\n```js\nvar Parent = function(){};\nParent.prototype.running = function(){}; // 父亲会跑步\nParent.prototype.swiming = function(){}; // 父亲会游泳\n\nvar Child = function(){};\nChild.prototype.pingpong = function(){}; //孩子会乒乓球\n\nextend(Child,Parent);\n\n\nvar xiaoming = new Child();\nxiaoming.running();\nxiaoming.swiming();\nxiaoming.pingpong(); // TypeError，Child没有pingpong方法\n```\n\n我们先定义父亲和孩子两个构造函数，并赋予他们不同的能力，经过继承后，结果孩子的能力消失了！因为在继承前，子类任何原型对象均会被覆盖！\n\n所以一定要在继承后，在添加原型对象：\n\n```js\nvar Parent = function(){};\nParent.prototype.running = function(){}; // 父亲会跑步\nParent.prototype.swiming = function(){}; // 父亲会游泳\n\nvar Child = function(){};\n\nextend(Child,Parent);\n\nChild.prototype.pingpong = function(){}; //孩子会乒乓球\n\n\nvar xiaohua = new Child();\nxiaohua.running();\nxiaohua.swiming();\nxiaohua.pingpong(); \n```\n\n== 本文完 ==","slug":"2017-2017-02-26-js-prototype","published":1,"updated":"2020-03-02T07:16:34.640Z","comments":1,"photos":[],"link":"","_id":"cka5ik8az001unybghsrgxymz","content":"<p>Javascript 下的 <code>__proto__</code> <code>prototype</code> <code>constructor</code>，我一直都很困惑。</p>\n<p>看过了一些文章，加上自己粗浅的理解，整理如下。</p>\n<a id=\"more\"></a>\n\n<p>首先，要想明白这三个对象的含义，就需要先知道JS的类型。这里简单说下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js的五个基本类型（值类型）和对象类型（引用类型）</span></span><br><span class=\"line\"><span class=\"comment\">// typeof 的结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'asdf'</span>; <span class=\"comment\">// string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">1234</span>; <span class=\"comment\">// number</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bool = <span class=\"literal\">true</span>; <span class=\"comment\">// boolean（但是有constructor）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nullObj = <span class=\"literal\">null</span>; <span class=\"comment\">// object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> undefinedObj = <span class=\"literal\">undefined</span>; <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;; <span class=\"comment\">// object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对象类型种类非常多，比如object / array / function等。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 唯独，这三个比较特殊，一般也没人这么写，暂时忽略</span></span><br><span class=\"line\"><span class=\"comment\">// 这种写法仅仅是给值类型的数据包裹了一层而已</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'asdf'</span>) <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">1234</span>) <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bool2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>(<span class=\"literal\">true</span>); <span class=\"comment\">// object</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"先来聊一聊-原型-proto\"><a href=\"#先来聊一聊-原型-proto\" class=\"headerlink\" title=\"先来聊一聊 原型 __proto__\"></a>先来聊一聊 原型 <code>__proto__</code></h2><p>首先呢，这个东西，是现代浏览器才能看到的，比如chrome的devtools。但是这个概念是一直有的，只不过老的浏览器禁止查看而已。</p>\n<p>要想好好解释，那就说来话长。我还是简短的说吧。</p>\n<p>一开始没有对象，只有 <code>null</code> 类型，后来在 <code>null</code> 基础上扩展出了 <code>object</code> 类型。再后来，有了 <code>function</code> 等类型。</p>\n<p><strong>可以说，每个对象都有 <code>__proto__</code>，他就是指向自己的直接父辈。</strong></p>\n<p>来看张图：</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-02-26-javascript-proto.png-wm.black\" alt=\"image\"></p>\n<p>对象 <code>obj</code> 的父辈是 <code>Object</code>，对象 <code>arr</code> 的父辈是 <code>Array</code>。</p>\n<p>可以写作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">obj.__proto__ === <span class=\"built_in\">Object</span>.prototype</span><br><span class=\"line\">arr.__proto__ === <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.__proto__ === <span class=\"built_in\">Object</span></span><br></pre></td></tr></table></figure>\n\n<p>这里为什么不是 <code>obj.__proto__ === Object</code> 呢？<code>Object</code> 是个构造函数，它的操作方法都放在 <code>prototype</code> 原型对象上。下文会说到。</p>\n<p>而且：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.__proto__ === <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.__proto__ === <span class=\"built_in\">Object</span>.prototype</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.__proto__ === <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 综上，可以为</span></span><br><span class=\"line\">arr.__proto__.__proto__.__proto__ === <span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n\n<p>这样，一层一层的往自己的父辈上找原型，就是原型链了。</p>\n<p>由于 <code>__proto__</code> 是个内部方法，所以其实不必太在意，知道有这个东西就行了。</p>\n<p>这玩意除了别人考你 new关键字的原理时候会用到，其他时候我没注意有啥用途。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">New</span> (<span class=\"params\">f</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = &#123;&#125;;</span><br><span class=\"line\">    n.__proto__ = f.prototype;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">        f.apply(n, <span class=\"built_in\">arguments</span>); </span><br><span class=\"line\">        <span class=\"keyword\">return</span> n; </span><br><span class=\"line\">   &#125;; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>当然，你应该知道，js一切皆对象，所以创建的一切变量（也就是一切都是对象）都是有 <code>__proto__</code> 的，<code>null</code> 除外。</strong></p>\n<h2 id=\"再聊一聊-原型对象-prototype\"><a href=\"#再聊一聊-原型对象-prototype\" class=\"headerlink\" title=\"再聊一聊 原型对象 prototype\"></a>再聊一聊 原型对象 <code>prototype</code></h2><p>这个应该最常见。比如ES5代码中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">Person.prototype.canSpeak = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.canSpeak); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>这里面有几个重要的点：</p>\n<ul>\n<li><code>Person</code> 是函数，准确地讲，是构造函数。直白一点，这个函数最终主要使用方法是 <code>new Person</code> 这种形式。</li>\n<li>绑定的 <code>canSpeak</code> 方法，可以是函数，也可以直接是字面量（字符串/数字等），这个无所谓。</li>\n<li>由于<code>canSpeak</code>绑定在 <code>prototype</code> 上，所以必须要实例化（<code>var p = new Person()</code>），<code>p</code> 就是实例化后的对象。</li>\n<li>实例化的 <code>p</code>，是对象。它绝对不是函数！</li>\n</ul>\n<p>在有一个<code>Person</code>构造函数上，我们在它的原型对象上（<code>prototype</code>）绑有一个<code>canSpeak</code>方法，结果他的实例化对象就有了这个方法。原因就是上文的new原理。</p>\n<p>我们查看下这个对象的结构：</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-02-26-javascript-prototype.png-wm.black\" alt=\"image\"></p>\n<p>当我们访问 <code>p.canSpeak</code>时候，由于对象上本身没有 <code>canSpeak</code> 方法，就去它的原型去找此方法。说白了，自己没有，就去看看父辈那里有没有这种方法。</p>\n<p>这里有一个有意思的实验：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">Person.prototype.canSpeak = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">p.canSpeak = <span class=\"number\">123</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.canSpeak); <span class=\"comment\">// 123</span></span><br></pre></td></tr></table></figure>\n\n<p>我们看看它的结果：</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-02-26-javascript-prototype2.png-wm.black\" alt=\"image\"></p>\n<p>这就说明了，如果自己本身有这个方法，是不会去父辈（原型链）那里寻找的。</p>\n<p><strong>小结</strong></p>\n<ul>\n<li>只有函数（function）才会有原型对象 <code>prototype</code></li>\n<li>一个函数，当做构造函数被new之后，每个实例都可以使用原型对象的方法，<code>prototype</code> 相当于共享方法。</li>\n<li>如果我们想生成一些对象，默认每个对象都拥有一些相同的方法，就可以创建构造函数，然后实例化的对象就是我们想要的东西。</li>\n</ul>\n<p>在ES6里面，构造函数有了新的定义方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;&#125;</span><br><span class=\"line\">    canSpeak()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'yes'</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.canSpeak());</span><br></pre></td></tr></table></figure>\n\n<p>不过，我不太清楚如何想上面一样定义返回普通值的方法，而不是现在ES6中的函数。</p>\n<h2 id=\"最后提一提-构造器-constructor\"><a href=\"#最后提一提-构造器-constructor\" class=\"headerlink\" title=\"最后提一提 构造器 constructor\"></a>最后提一提 构造器 <code>constructor</code></h2><p>先来说普通对象（万物皆对象）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'abc'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">str.prototype; <span class=\"comment\">//是不存在的，prototype存在于构造函数中</span></span><br><span class=\"line\">str.__proto__ === <span class=\"built_in\">String</span>.prototype; <span class=\"comment\">// 字符串的父辈是String</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">String</span>.prototype.constructor === <span class=\"built_in\">String</span>;</span><br><span class=\"line\"><span class=\"comment\">// 即</span></span><br><span class=\"line\">str.__proto__.constructor === <span class=\"built_in\">String</span>; </span><br><span class=\"line\"><span class=\"comment\">// 每个构造函数，其prototype中，constructor是指向自己的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 同时有</span></span><br><span class=\"line\">str.__proto__.constructor === str.constructor;</span><br><span class=\"line\"><span class=\"comment\">// 即</span></span><br><span class=\"line\">str.constructor === <span class=\"built_in\">String</span>;</span><br></pre></td></tr></table></figure>\n\n<p>它存在于 <code>.__proto__.constructor</code> 下。因为他的 <code>__proto__</code> 是 <code>父辈.prototype</code> ，相当于父辈是构造函数。（当然，你也可以直接通过 <code>.constructor</code>  访问到，因为自己找不到就会到原型中找啊~）</p>\n<p>再来说构造函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Foo.prototype.bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Foo.prototype.constructor === Foo; <span class=\"comment\">//  每个构造函数，其prototype中，constructor是指向自己的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 同时有</span></span><br><span class=\"line\">Foo.__proto__ === <span class=\"built_in\">Function</span>.prototype;</span><br><span class=\"line\">Foo.__proto__.constructor === <span class=\"built_in\">Function</span>; <span class=\"comment\">// Foo的原型是Function，所以其原型的constructor是Function</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 再来看看构造函数的实例，和普通对象没区别</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\">f.prototype; <span class=\"comment\">//是不存在的，prototype存在于构造函数中</span></span><br><span class=\"line\">f.__proto__ ===Foo.prototype;</span><br><span class=\"line\">f.__proto__.constructor === Foo;</span><br></pre></td></tr></table></figure>\n\n<p>看到这里，我们得到结论，所有构造函数，自己的 <code>prototype</code>中，除了我们定义的原型对象外，还有一个隐藏的 <code>constructor</code>，他不是通过其 <code>__proto__</code>得到的，而是真真正正自己的。而且 <code>constructor</code> 指向自己。</p>\n<p><strong>小结</strong></p>\n<ul>\n<li><code>constructor</code> 是构造函数特有的东西。</li>\n<li>构造函数本身自己的 <code>prototype</code> 中要有一个<code>constructor</code>，这样自己的实例才能指向到构造函数本身。</li>\n<li>所有对象，都是被父辈构造函数实例化出来的，所以他们<code>.__proto__.constructor</code>指向父辈。</li>\n<li><strong>“<code>constructor</code>指向自己” —— 很关键，js实现继承的时候，需要提到。</strong></li>\n</ul>\n<h2 id=\"说一下js的继承\"><a href=\"#说一下js的继承\" class=\"headerlink\" title=\"说一下js的继承\"></a>说一下js的继承</h2><p>在ES6之前，没有class extend方法，只能使用ES5的 <code>Object.create</code> 方法，或者下文：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extend</span>(<span class=\"params\">Child, Parent</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;; </span><br><span class=\"line\">    </span><br><span class=\"line\">    F.prototype = Parent.prototype; </span><br><span class=\"line\">    </span><br><span class=\"line\">    Child.prototype = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">    </span><br><span class=\"line\">    Child.prototype.constructor ===Child;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Child.uber = Parent.prototype;</span><br><span class=\"line\">    <span class=\"comment\">// 这句话写不写无所谓，给Child构造函数增加一个静态方法，指向父辈原型对象，纯粹为了使用方便而已，不影响继承</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解释下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>创建一个新的构造函数，下文可以使用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F.prototype = Parent.prototype;</span><br></pre></td></tr></table></figure>\n\n<p>把F构造函数的原型对象指向父辈原型对象，相当于把父辈的共享方法拷贝过来。</p>\n<p>这样通过 new Foo() 的实例，才会具有父辈的共享方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> F();</span><br></pre></td></tr></table></figure>\n\n<p>为了好说明，我们先定义 f，这样看的清晰：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> F(); </span><br><span class=\"line\">Child.prototype = f;</span><br></pre></td></tr></table></figure>\n\n<p>此时有：<code>f.__proto__ === F.prototype</code></p>\n<p>但是 <code>f.__proto__.constructor !== F</code>，</p>\n<p>因为 <code>F.prototype = Parent.prototype</code>，</p>\n<p>所以 <code>f.__proto__.constructor === Parent</code>。</p>\n<p>综合一下，本处的结果是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Child.prototype = f;</span><br><span class=\"line\">Child.prototype.__proto__ === F.prototype;</span><br><span class=\"line\">Child.prototype.__proto__.constructor === Parent;</span><br></pre></td></tr></table></figure>\n\n<p>也就是说，经过本函数传入的Child只能是空构造函数  <code>function(){...}</code>，绝对不能带有原定对象内容。</p>\n<p>因为如果进入本函数前定义了其原型对象 <code>Child.prototype.testChild = function(){}</code>，经过本函数后，原型对象也会被覆盖！</p>\n<p>既然被覆盖，那么Child.prototype里面没有任何内容，</p>\n<p>此时 <code>Child.prototype.constructor</code> 也就指向了  <code>Child.prototype.__proto__.constructor</code></p>\n<p>即：<code>Child.prototype.constructor === Parent</code>。</p>\n<p><strong>晕，Child的构造器指向了Parent，这是问题！</strong></p>\n<p>所以继承函数中，应该有这一行代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Child.prototype.constructor === Child;</span><br></pre></td></tr></table></figure>\n\n<p>我们必须修正下构造器指向。</p>\n<p>分析结束。</p>\n<p>我们测试下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Parent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Parent.prototype.running = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 父亲会跑步</span></span><br><span class=\"line\">Parent.prototype.swiming = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 父亲会游泳</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Child.prototype.pingpong = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">//孩子会乒乓球</span></span><br><span class=\"line\"></span><br><span class=\"line\">extend(Child,Parent);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xiaoming = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\">xiaoming.running();</span><br><span class=\"line\">xiaoming.swiming();</span><br><span class=\"line\">xiaoming.pingpong(); <span class=\"comment\">// TypeError，Child没有pingpong方法</span></span><br></pre></td></tr></table></figure>\n\n<p>我们先定义父亲和孩子两个构造函数，并赋予他们不同的能力，经过继承后，结果孩子的能力消失了！因为在继承前，子类任何原型对象均会被覆盖！</p>\n<p>所以一定要在继承后，在添加原型对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Parent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Parent.prototype.running = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 父亲会跑步</span></span><br><span class=\"line\">Parent.prototype.swiming = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 父亲会游泳</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">extend(Child,Parent);</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype.pingpong = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">//孩子会乒乓球</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xiaohua = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\">xiaohua.running();</span><br><span class=\"line\">xiaohua.swiming();</span><br><span class=\"line\">xiaohua.pingpong();</span><br></pre></td></tr></table></figure>\n\n<p>== 本文完 ==</p>\n","site":{"data":{}},"excerpt":"<p>Javascript 下的 <code>__proto__</code> <code>prototype</code> <code>constructor</code>，我一直都很困惑。</p>\n<p>看过了一些文章，加上自己粗浅的理解，整理如下。</p>","more":"<p>首先，要想明白这三个对象的含义，就需要先知道JS的类型。这里简单说下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js的五个基本类型（值类型）和对象类型（引用类型）</span></span><br><span class=\"line\"><span class=\"comment\">// typeof 的结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'asdf'</span>; <span class=\"comment\">// string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">1234</span>; <span class=\"comment\">// number</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bool = <span class=\"literal\">true</span>; <span class=\"comment\">// boolean（但是有constructor）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nullObj = <span class=\"literal\">null</span>; <span class=\"comment\">// object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> undefinedObj = <span class=\"literal\">undefined</span>; <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;; <span class=\"comment\">// object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对象类型种类非常多，比如object / array / function等。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 唯独，这三个比较特殊，一般也没人这么写，暂时忽略</span></span><br><span class=\"line\"><span class=\"comment\">// 这种写法仅仅是给值类型的数据包裹了一层而已</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'asdf'</span>) <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">1234</span>) <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bool2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>(<span class=\"literal\">true</span>); <span class=\"comment\">// object</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"先来聊一聊-原型-proto\"><a href=\"#先来聊一聊-原型-proto\" class=\"headerlink\" title=\"先来聊一聊 原型 __proto__\"></a>先来聊一聊 原型 <code>__proto__</code></h2><p>首先呢，这个东西，是现代浏览器才能看到的，比如chrome的devtools。但是这个概念是一直有的，只不过老的浏览器禁止查看而已。</p>\n<p>要想好好解释，那就说来话长。我还是简短的说吧。</p>\n<p>一开始没有对象，只有 <code>null</code> 类型，后来在 <code>null</code> 基础上扩展出了 <code>object</code> 类型。再后来，有了 <code>function</code> 等类型。</p>\n<p><strong>可以说，每个对象都有 <code>__proto__</code>，他就是指向自己的直接父辈。</strong></p>\n<p>来看张图：</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-02-26-javascript-proto.png-wm.black\" alt=\"image\"></p>\n<p>对象 <code>obj</code> 的父辈是 <code>Object</code>，对象 <code>arr</code> 的父辈是 <code>Array</code>。</p>\n<p>可以写作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">obj.__proto__ === <span class=\"built_in\">Object</span>.prototype</span><br><span class=\"line\">arr.__proto__ === <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.__proto__ === <span class=\"built_in\">Object</span></span><br></pre></td></tr></table></figure>\n\n<p>这里为什么不是 <code>obj.__proto__ === Object</code> 呢？<code>Object</code> 是个构造函数，它的操作方法都放在 <code>prototype</code> 原型对象上。下文会说到。</p>\n<p>而且：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.__proto__ === <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.__proto__ === <span class=\"built_in\">Object</span>.prototype</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.__proto__ === <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 综上，可以为</span></span><br><span class=\"line\">arr.__proto__.__proto__.__proto__ === <span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n\n<p>这样，一层一层的往自己的父辈上找原型，就是原型链了。</p>\n<p>由于 <code>__proto__</code> 是个内部方法，所以其实不必太在意，知道有这个东西就行了。</p>\n<p>这玩意除了别人考你 new关键字的原理时候会用到，其他时候我没注意有啥用途。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">New</span> (<span class=\"params\">f</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = &#123;&#125;;</span><br><span class=\"line\">    n.__proto__ = f.prototype;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">        f.apply(n, <span class=\"built_in\">arguments</span>); </span><br><span class=\"line\">        <span class=\"keyword\">return</span> n; </span><br><span class=\"line\">   &#125;; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>当然，你应该知道，js一切皆对象，所以创建的一切变量（也就是一切都是对象）都是有 <code>__proto__</code> 的，<code>null</code> 除外。</strong></p>\n<h2 id=\"再聊一聊-原型对象-prototype\"><a href=\"#再聊一聊-原型对象-prototype\" class=\"headerlink\" title=\"再聊一聊 原型对象 prototype\"></a>再聊一聊 原型对象 <code>prototype</code></h2><p>这个应该最常见。比如ES5代码中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">Person.prototype.canSpeak = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.canSpeak); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>这里面有几个重要的点：</p>\n<ul>\n<li><code>Person</code> 是函数，准确地讲，是构造函数。直白一点，这个函数最终主要使用方法是 <code>new Person</code> 这种形式。</li>\n<li>绑定的 <code>canSpeak</code> 方法，可以是函数，也可以直接是字面量（字符串/数字等），这个无所谓。</li>\n<li>由于<code>canSpeak</code>绑定在 <code>prototype</code> 上，所以必须要实例化（<code>var p = new Person()</code>），<code>p</code> 就是实例化后的对象。</li>\n<li>实例化的 <code>p</code>，是对象。它绝对不是函数！</li>\n</ul>\n<p>在有一个<code>Person</code>构造函数上，我们在它的原型对象上（<code>prototype</code>）绑有一个<code>canSpeak</code>方法，结果他的实例化对象就有了这个方法。原因就是上文的new原理。</p>\n<p>我们查看下这个对象的结构：</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-02-26-javascript-prototype.png-wm.black\" alt=\"image\"></p>\n<p>当我们访问 <code>p.canSpeak</code>时候，由于对象上本身没有 <code>canSpeak</code> 方法，就去它的原型去找此方法。说白了，自己没有，就去看看父辈那里有没有这种方法。</p>\n<p>这里有一个有意思的实验：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">Person.prototype.canSpeak = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">p.canSpeak = <span class=\"number\">123</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.canSpeak); <span class=\"comment\">// 123</span></span><br></pre></td></tr></table></figure>\n\n<p>我们看看它的结果：</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-02-26-javascript-prototype2.png-wm.black\" alt=\"image\"></p>\n<p>这就说明了，如果自己本身有这个方法，是不会去父辈（原型链）那里寻找的。</p>\n<p><strong>小结</strong></p>\n<ul>\n<li>只有函数（function）才会有原型对象 <code>prototype</code></li>\n<li>一个函数，当做构造函数被new之后，每个实例都可以使用原型对象的方法，<code>prototype</code> 相当于共享方法。</li>\n<li>如果我们想生成一些对象，默认每个对象都拥有一些相同的方法，就可以创建构造函数，然后实例化的对象就是我们想要的东西。</li>\n</ul>\n<p>在ES6里面，构造函数有了新的定义方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;&#125;</span><br><span class=\"line\">    canSpeak()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'yes'</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.canSpeak());</span><br></pre></td></tr></table></figure>\n\n<p>不过，我不太清楚如何想上面一样定义返回普通值的方法，而不是现在ES6中的函数。</p>\n<h2 id=\"最后提一提-构造器-constructor\"><a href=\"#最后提一提-构造器-constructor\" class=\"headerlink\" title=\"最后提一提 构造器 constructor\"></a>最后提一提 构造器 <code>constructor</code></h2><p>先来说普通对象（万物皆对象）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'abc'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">str.prototype; <span class=\"comment\">//是不存在的，prototype存在于构造函数中</span></span><br><span class=\"line\">str.__proto__ === <span class=\"built_in\">String</span>.prototype; <span class=\"comment\">// 字符串的父辈是String</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">String</span>.prototype.constructor === <span class=\"built_in\">String</span>;</span><br><span class=\"line\"><span class=\"comment\">// 即</span></span><br><span class=\"line\">str.__proto__.constructor === <span class=\"built_in\">String</span>; </span><br><span class=\"line\"><span class=\"comment\">// 每个构造函数，其prototype中，constructor是指向自己的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 同时有</span></span><br><span class=\"line\">str.__proto__.constructor === str.constructor;</span><br><span class=\"line\"><span class=\"comment\">// 即</span></span><br><span class=\"line\">str.constructor === <span class=\"built_in\">String</span>;</span><br></pre></td></tr></table></figure>\n\n<p>它存在于 <code>.__proto__.constructor</code> 下。因为他的 <code>__proto__</code> 是 <code>父辈.prototype</code> ，相当于父辈是构造函数。（当然，你也可以直接通过 <code>.constructor</code>  访问到，因为自己找不到就会到原型中找啊~）</p>\n<p>再来说构造函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Foo.prototype.bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Foo.prototype.constructor === Foo; <span class=\"comment\">//  每个构造函数，其prototype中，constructor是指向自己的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 同时有</span></span><br><span class=\"line\">Foo.__proto__ === <span class=\"built_in\">Function</span>.prototype;</span><br><span class=\"line\">Foo.__proto__.constructor === <span class=\"built_in\">Function</span>; <span class=\"comment\">// Foo的原型是Function，所以其原型的constructor是Function</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 再来看看构造函数的实例，和普通对象没区别</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\">f.prototype; <span class=\"comment\">//是不存在的，prototype存在于构造函数中</span></span><br><span class=\"line\">f.__proto__ ===Foo.prototype;</span><br><span class=\"line\">f.__proto__.constructor === Foo;</span><br></pre></td></tr></table></figure>\n\n<p>看到这里，我们得到结论，所有构造函数，自己的 <code>prototype</code>中，除了我们定义的原型对象外，还有一个隐藏的 <code>constructor</code>，他不是通过其 <code>__proto__</code>得到的，而是真真正正自己的。而且 <code>constructor</code> 指向自己。</p>\n<p><strong>小结</strong></p>\n<ul>\n<li><code>constructor</code> 是构造函数特有的东西。</li>\n<li>构造函数本身自己的 <code>prototype</code> 中要有一个<code>constructor</code>，这样自己的实例才能指向到构造函数本身。</li>\n<li>所有对象，都是被父辈构造函数实例化出来的，所以他们<code>.__proto__.constructor</code>指向父辈。</li>\n<li><strong>“<code>constructor</code>指向自己” —— 很关键，js实现继承的时候，需要提到。</strong></li>\n</ul>\n<h2 id=\"说一下js的继承\"><a href=\"#说一下js的继承\" class=\"headerlink\" title=\"说一下js的继承\"></a>说一下js的继承</h2><p>在ES6之前，没有class extend方法，只能使用ES5的 <code>Object.create</code> 方法，或者下文：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extend</span>(<span class=\"params\">Child, Parent</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;; </span><br><span class=\"line\">    </span><br><span class=\"line\">    F.prototype = Parent.prototype; </span><br><span class=\"line\">    </span><br><span class=\"line\">    Child.prototype = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">    </span><br><span class=\"line\">    Child.prototype.constructor ===Child;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Child.uber = Parent.prototype;</span><br><span class=\"line\">    <span class=\"comment\">// 这句话写不写无所谓，给Child构造函数增加一个静态方法，指向父辈原型对象，纯粹为了使用方便而已，不影响继承</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解释下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>创建一个新的构造函数，下文可以使用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F.prototype = Parent.prototype;</span><br></pre></td></tr></table></figure>\n\n<p>把F构造函数的原型对象指向父辈原型对象，相当于把父辈的共享方法拷贝过来。</p>\n<p>这样通过 new Foo() 的实例，才会具有父辈的共享方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> F();</span><br></pre></td></tr></table></figure>\n\n<p>为了好说明，我们先定义 f，这样看的清晰：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> F(); </span><br><span class=\"line\">Child.prototype = f;</span><br></pre></td></tr></table></figure>\n\n<p>此时有：<code>f.__proto__ === F.prototype</code></p>\n<p>但是 <code>f.__proto__.constructor !== F</code>，</p>\n<p>因为 <code>F.prototype = Parent.prototype</code>，</p>\n<p>所以 <code>f.__proto__.constructor === Parent</code>。</p>\n<p>综合一下，本处的结果是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Child.prototype = f;</span><br><span class=\"line\">Child.prototype.__proto__ === F.prototype;</span><br><span class=\"line\">Child.prototype.__proto__.constructor === Parent;</span><br></pre></td></tr></table></figure>\n\n<p>也就是说，经过本函数传入的Child只能是空构造函数  <code>function(){...}</code>，绝对不能带有原定对象内容。</p>\n<p>因为如果进入本函数前定义了其原型对象 <code>Child.prototype.testChild = function(){}</code>，经过本函数后，原型对象也会被覆盖！</p>\n<p>既然被覆盖，那么Child.prototype里面没有任何内容，</p>\n<p>此时 <code>Child.prototype.constructor</code> 也就指向了  <code>Child.prototype.__proto__.constructor</code></p>\n<p>即：<code>Child.prototype.constructor === Parent</code>。</p>\n<p><strong>晕，Child的构造器指向了Parent，这是问题！</strong></p>\n<p>所以继承函数中，应该有这一行代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Child.prototype.constructor === Child;</span><br></pre></td></tr></table></figure>\n\n<p>我们必须修正下构造器指向。</p>\n<p>分析结束。</p>\n<p>我们测试下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Parent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Parent.prototype.running = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 父亲会跑步</span></span><br><span class=\"line\">Parent.prototype.swiming = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 父亲会游泳</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Child.prototype.pingpong = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">//孩子会乒乓球</span></span><br><span class=\"line\"></span><br><span class=\"line\">extend(Child,Parent);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xiaoming = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\">xiaoming.running();</span><br><span class=\"line\">xiaoming.swiming();</span><br><span class=\"line\">xiaoming.pingpong(); <span class=\"comment\">// TypeError，Child没有pingpong方法</span></span><br></pre></td></tr></table></figure>\n\n<p>我们先定义父亲和孩子两个构造函数，并赋予他们不同的能力，经过继承后，结果孩子的能力消失了！因为在继承前，子类任何原型对象均会被覆盖！</p>\n<p>所以一定要在继承后，在添加原型对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Parent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Parent.prototype.running = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 父亲会跑步</span></span><br><span class=\"line\">Parent.prototype.swiming = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 父亲会游泳</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">extend(Child,Parent);</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype.pingpong = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">//孩子会乒乓球</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xiaohua = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\">xiaohua.running();</span><br><span class=\"line\">xiaohua.swiming();</span><br><span class=\"line\">xiaohua.pingpong();</span><br></pre></td></tr></table></figure>\n\n<p>== 本文完 ==</p>"},{"layout":"post","title":"jekyll 下文章无法显示双大括号{{ }}和{% %}的处理","date":"2017-03-01T21:25:00.000Z","_content":"\n在前些天写一篇渲染的文章时候，文章内容反复出现了 `{ { name } }` 这种格式的代码。\n\n之前也遇到过一次，是代码中有 `{ %  % }` 的部分，也没办法处理。\n\n思考很久，也查阅了很多文章，始终无法解决。\n\n<!-- more -->\n\njekyll 会把模板中 `{ { ... } }` 当做语法串进行处理，最终传输到页面就是空串了。\n\n查阅 jekyll 的文档，没发现有能忽略 `{ { } }` 的配置。我尝试用 `{ { \"...\" | html } }` 这种形式，通过管道运算符来处理，结果还是不行。\n\n最终考虑一种方案，将符号转义，让 jekyll 直接将符号输出到页面吧，多出的转义符号，交给js来处理。\n\n经过研究，只能使用 `\\{ \\{ ... \\} \\}`(去掉空格) 这种形式，不能用 `{\\{ ... }\\}` 这种形式，原因在于，后者代码的展现配色效果不如前者好。\n\n之后，加入js代码，作用很简单，找到页面存在问题的部分，然后依次用正则替换为正确的展现。\n\n```js\nvar fixBrace = function () {\n    var list = document.querySelectorAll('code');\n    list.forEach(function(item){\n        if (item.innerHTML.indexOf('\\\\{\\\\{') >= 0) {\n            item.innerHTML = item.innerHTML.replace(/\\\\{\\\\{/g,'{ {');\n        } \n        if (item.innerHTML.indexOf('\\\\}\\\\}') >= 0) {\n            item.innerHTML = item.innerHTML.replace(/\\\\}\\\\}/g,'} }');\n        }\n        if (item.innerHTML.indexOf('\\\\{\\\\%') >= 0) {\n            item.innerHTML = item.innerHTML.replace(/\\\\{\\\\%/g,'\\{\\%');\n        }\n        if (item.innerHTML.indexOf('\\\\%\\\\}') >= 0) {\n            item.innerHTML = item.innerHTML.replace(/\\\\%\\\\}/g,'\\%\\}');\n        }\n    });\n};\n```\n\n\n完毕，搞定。","source":"_posts/2017/2017-03-01-jekyll-brace.md","raw":"---\nlayout: post\ntitle: \"jekyll 下文章无法显示双大括号{{ }}和{% %}的处理\"\ndate: 2017-03-01 21:25:00 GMT+0800\ncategories: [前端]\ntags:  [jekyll,括号,转义]\n---\n\n在前些天写一篇渲染的文章时候，文章内容反复出现了 `{ { name } }` 这种格式的代码。\n\n之前也遇到过一次，是代码中有 `{ %  % }` 的部分，也没办法处理。\n\n思考很久，也查阅了很多文章，始终无法解决。\n\n<!-- more -->\n\njekyll 会把模板中 `{ { ... } }` 当做语法串进行处理，最终传输到页面就是空串了。\n\n查阅 jekyll 的文档，没发现有能忽略 `{ { } }` 的配置。我尝试用 `{ { \"...\" | html } }` 这种形式，通过管道运算符来处理，结果还是不行。\n\n最终考虑一种方案，将符号转义，让 jekyll 直接将符号输出到页面吧，多出的转义符号，交给js来处理。\n\n经过研究，只能使用 `\\{ \\{ ... \\} \\}`(去掉空格) 这种形式，不能用 `{\\{ ... }\\}` 这种形式，原因在于，后者代码的展现配色效果不如前者好。\n\n之后，加入js代码，作用很简单，找到页面存在问题的部分，然后依次用正则替换为正确的展现。\n\n```js\nvar fixBrace = function () {\n    var list = document.querySelectorAll('code');\n    list.forEach(function(item){\n        if (item.innerHTML.indexOf('\\\\{\\\\{') >= 0) {\n            item.innerHTML = item.innerHTML.replace(/\\\\{\\\\{/g,'{ {');\n        } \n        if (item.innerHTML.indexOf('\\\\}\\\\}') >= 0) {\n            item.innerHTML = item.innerHTML.replace(/\\\\}\\\\}/g,'} }');\n        }\n        if (item.innerHTML.indexOf('\\\\{\\\\%') >= 0) {\n            item.innerHTML = item.innerHTML.replace(/\\\\{\\\\%/g,'\\{\\%');\n        }\n        if (item.innerHTML.indexOf('\\\\%\\\\}') >= 0) {\n            item.innerHTML = item.innerHTML.replace(/\\\\%\\\\}/g,'\\%\\}');\n        }\n    });\n};\n```\n\n\n完毕，搞定。","slug":"2017-2017-03-01-jekyll-brace","published":1,"updated":"2020-03-02T07:16:34.640Z","comments":1,"photos":[],"link":"","_id":"cka5ik8b1001ynybgkzjdhth7","content":"<p>在前些天写一篇渲染的文章时候，文章内容反复出现了 <code>{ { name } }</code> 这种格式的代码。</p>\n<p>之前也遇到过一次，是代码中有 <code>{ %  % }</code> 的部分，也没办法处理。</p>\n<p>思考很久，也查阅了很多文章，始终无法解决。</p>\n<a id=\"more\"></a>\n\n<p>jekyll 会把模板中 <code>{ { ... } }</code> 当做语法串进行处理，最终传输到页面就是空串了。</p>\n<p>查阅 jekyll 的文档，没发现有能忽略 <code>{ { } }</code> 的配置。我尝试用 <code>{ { &quot;...&quot; | html } }</code> 这种形式，通过管道运算符来处理，结果还是不行。</p>\n<p>最终考虑一种方案，将符号转义，让 jekyll 直接将符号输出到页面吧，多出的转义符号，交给js来处理。</p>\n<p>经过研究，只能使用 <code>\\{ \\{ ... \\} \\}</code>(去掉空格) 这种形式，不能用 <code>{\\{ ... }\\}</code> 这种形式，原因在于，后者代码的展现配色效果不如前者好。</p>\n<p>之后，加入js代码，作用很简单，找到页面存在问题的部分，然后依次用正则替换为正确的展现。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fixBrace = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> list = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'code'</span>);</span><br><span class=\"line\">    list.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.innerHTML.indexOf(<span class=\"string\">'\\\\&#123;\\\\&#123;'</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            item.innerHTML = item.innerHTML.replace(<span class=\"regexp\">/\\\\&#123;\\\\&#123;/g</span>,<span class=\"string\">'&#123; &#123;'</span>);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.innerHTML.indexOf(<span class=\"string\">'\\\\&#125;\\\\&#125;'</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            item.innerHTML = item.innerHTML.replace(<span class=\"regexp\">/\\\\&#125;\\\\&#125;/g</span>,<span class=\"string\">'&#125; &#125;'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.innerHTML.indexOf(<span class=\"string\">'\\\\&#123;\\\\%'</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            item.innerHTML = item.innerHTML.replace(<span class=\"regexp\">/\\\\&#123;\\\\%/g</span>,<span class=\"string\">'\\&#123;\\%'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.innerHTML.indexOf(<span class=\"string\">'\\\\%\\\\&#125;'</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            item.innerHTML = item.innerHTML.replace(<span class=\"regexp\">/\\\\%\\\\&#125;/g</span>,<span class=\"string\">'\\%\\&#125;'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>完毕，搞定。</p>\n","site":{"data":{}},"excerpt":"<p>在前些天写一篇渲染的文章时候，文章内容反复出现了 <code>{ { name } }</code> 这种格式的代码。</p>\n<p>之前也遇到过一次，是代码中有 <code>{ %  % }</code> 的部分，也没办法处理。</p>\n<p>思考很久，也查阅了很多文章，始终无法解决。</p>","more":"<p>jekyll 会把模板中 <code>{ { ... } }</code> 当做语法串进行处理，最终传输到页面就是空串了。</p>\n<p>查阅 jekyll 的文档，没发现有能忽略 <code>{ { } }</code> 的配置。我尝试用 <code>{ { &quot;...&quot; | html } }</code> 这种形式，通过管道运算符来处理，结果还是不行。</p>\n<p>最终考虑一种方案，将符号转义，让 jekyll 直接将符号输出到页面吧，多出的转义符号，交给js来处理。</p>\n<p>经过研究，只能使用 <code>\\{ \\{ ... \\} \\}</code>(去掉空格) 这种形式，不能用 <code>{\\{ ... }\\}</code> 这种形式，原因在于，后者代码的展现配色效果不如前者好。</p>\n<p>之后，加入js代码，作用很简单，找到页面存在问题的部分，然后依次用正则替换为正确的展现。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fixBrace = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> list = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'code'</span>);</span><br><span class=\"line\">    list.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.innerHTML.indexOf(<span class=\"string\">'\\\\&#123;\\\\&#123;'</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            item.innerHTML = item.innerHTML.replace(<span class=\"regexp\">/\\\\&#123;\\\\&#123;/g</span>,<span class=\"string\">'&#123; &#123;'</span>);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.innerHTML.indexOf(<span class=\"string\">'\\\\&#125;\\\\&#125;'</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            item.innerHTML = item.innerHTML.replace(<span class=\"regexp\">/\\\\&#125;\\\\&#125;/g</span>,<span class=\"string\">'&#125; &#125;'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.innerHTML.indexOf(<span class=\"string\">'\\\\&#123;\\\\%'</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            item.innerHTML = item.innerHTML.replace(<span class=\"regexp\">/\\\\&#123;\\\\%/g</span>,<span class=\"string\">'\\&#123;\\%'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.innerHTML.indexOf(<span class=\"string\">'\\\\%\\\\&#125;'</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            item.innerHTML = item.innerHTML.replace(<span class=\"regexp\">/\\\\%\\\\&#125;/g</span>,<span class=\"string\">'\\%\\&#125;'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>完毕，搞定。</p>"},{"layout":"post","title":"移动端采用flexible布局 安卓机华为vivo 10rem大于屏幕宽度的解决办法","date":"2017-03-05T22:35:00.000Z","_content":"\n在我们的新项目中，依旧采用了传统的flexible思路，对屏幕进行分割，通过 rem 来进行比例适配。\n\n<!-- more -->\n\n## 简易 flexible 的思路\n\n首先获得屏幕宽度，并将其平均分10份，比如安卓机，屏幕宽度360px，每一份就是36px。\n\n然后把一份的宽度写入根节点。 `html style=\"font-size:36px\"`。之后，如果想用25%的屏幕宽度，直接写2.5rem就行了。这样好处是不用从父级到子级一层一层的传递宽度，尤其是每次都要写100%。\n\n之后，还应该把body元素字体重设下。这样em也可以很好的使用。`body style=\"font-size:16px\"`。\n\n正常情况下，只需要四行代码就可以搞定。\n\n* 获取屏幕宽度\n* 将屏幕宽度分成10份\n* 将每一份宽度写入根节点\n* 重设下body字体大小\n\n如果你更希望更好一些，可以把屏幕旋转加上，旋转后触发这四步操作。\n\n基本上就这样，在不考虑dpr为 2 或者 3 的时候，这样做已经完全满足了。\n\n> 为什么不是平分100份呢？比如iPhone 6s Plus，屏幕宽度414px（默认dpr=1），如果分成100份，每份是4.14px，太小了，很多时候支持不了。和文字过小被限制差不多。如果分成25份，额，计算太麻烦了而已。\n\n## 问题出现\n\n之前一直按照上文那么做，也没发现问题。应该是也没接到问题反馈。\n\n但是这次遇到了一个奇葩情况。\n\n360px宽度的安卓机vivo，html已经设置为36px。有元素10rem，正常情况下，别的机型都是等于360px宽（屏宽），但是此机型奇葩，通过js计算后获取，值为392.03125px。如果不用rem，用100%，则没有问题。\n\n问题出现在安卓APP的webview中。至于手机浏览器中是否会出问题，我忘记了。\n\n网上也没有关于这方面的资料。\n\n唯独一条记录在这里：[segmentfault](https://segmentfault.com/q/1010000006851410)\n\n## 问题的解决\n\n后来曾经巧合，阅读到一篇文章，大概也是说页面缩放-375px屏幕的实现。出的问题结果和我们的情况是一致的。意思是 `initial-scale` 要进行设置。我检查了下，我们的代码也写好了。但还是不行。[文章见此](https://github.com/ShowJoy-com/showjoy-blog/issues/6) ，以及他的文章参考了[这里](http://lvdada.org/2016/01/28/viewport-and-flexibleJs/)。\n\n他的文章思路是修改scale数值，以便达到用360px宽度的屏幕，显示375px的内容。\n\n而我们思考的方向，是针对出问题的机型，进行fontSize修复。\n\n我们的思路是，首先用标准方案（上文四步方法），然后进行检查。安卓机全部要添加一个10rem元素，检查其计算宽度和屏幕宽度的比例，如果10rem元素超过屏幕宽度了，那就是当前机器出问题，此时需要进行修复。\n\n修复方法和他们的计算一致，看看尺寸比正常的屏幕宽度大了多少倍。大了多少倍，就把fontSize缩小多少倍。\n\n\n**这两种方式的区别：**\n\n* 他们的是定宽（此时所有机器都采用了设计稿的一半，375px）但是修复起来简单质量高，缺点是414px的iPhone，也要降低屏幕宽度，在文字显示上吃亏，因为屏幕最多只有375px，文字是按照px定义的。（我这么认为的）\n* 我们是常规宽，大屏机用自己的大宽度，小屏机用自己的小屏宽度，图片缩放和他们一样都是屏幕比例，但是文字展示上不会受影响。\n\n\n> 一般情况下，用了flexible方案，仅仅对布局使用rem，而对文字之类，还是使用px或em为单位。用了rem或进行等比缩小，小屏手机文字会看不清或者浏览器禁止设置过小的字体。\n\n## 最后，附上我们的解决方案代码\n\n```js\n    (function (win) {\n        // html根元素\n        var HTML_ELEMENT = document.documentElement;\n        // 屏幕宽度\n        var SCREEN_WIDTH = 0;\n        // 标准fontSize计算值\n        var BASE_FONT_SIZE = 0;\n        // 处理后的fontSize计算值\n        var REAL_BASE_FONT_SIZE = 0;\n\n        /**\n        * 修复异常的fontSize代码\n        */\n        var fix = function () {\n            var ua = navigator.userAgent;\n            var isIOS = /(iPhone|iPad|iPod)/.test(ua);\n            // 非苹果设备，均进行检测\n            if (!isIOS) {\n                var div = win.document.createElement('div');\n                div.style.width = '10rem';\n                win.document.body.appendChild(div);\n                win.setTimeout(function () {\n                    var getWidth = parseFloat(win.getComputedStyle(div).width);\n                    if (getWidth > SCREEN_WIDTH) {\n                        // 此时是出问题的情况\n                        var ratio = getWidth / SCREEN_WIDTH;\n                        REAL_BASE_FONT_SIZE = (BASE_FONT_SIZE / ratio).toFixed(4);\n                        HTML_ELEMENT.style.fontSize = REAL_BASE_FONT_SIZE + 'px';\n                    }\n                    div.remove();\n                }, 100);\n            }\n        };\n\n        /**\n         * 调整根元素fontSize\n         */\n        var setBaseFontSize = function () {\n            // 获取屏幕宽度\n            SCREEN_WIDTH = HTML_ELEMENT.clientWidth;\n            // 将屏幕分成10份，获取每一份宽度\n            BASE_FONT_SIZE = SCREEN_WIDTH / 10;\n            // 写入html元素fontSize\n            HTML_ELEMENT.style.fontSize = BASE_FONT_SIZE + 'px';\n            fix();\n        };\n\n        /**\n         *手机旋转控制\n         */\n        var tid;\n        if (win.onorientationchange) {\n            win.onorientationchange = function () {\n                clearTimeout(tid);\n                tid = setTimeout(function () {\n                    setBaseFontSize();\n                }, 300);\n            }\n        } else {\n            win.onresize = function () {\n                clearTimeout(tid);\n                tid = setTimeout(function () {\n                    setBaseFontSize();\n                }, 300);\n            };\n        }\n        setBaseFontSize();\n    })(window);\n```","source":"_posts/2017/2017-03-05-js-flexible.md","raw":"---\nlayout: post\ntitle: \"移动端采用flexible布局 安卓机华为vivo 10rem大于屏幕宽度的解决办法\"\ndate: 2017-03-05 22:35:00 GMT+0800\ncategories: [前端]\ntags:  [flexible]\n---\n\n在我们的新项目中，依旧采用了传统的flexible思路，对屏幕进行分割，通过 rem 来进行比例适配。\n\n<!-- more -->\n\n## 简易 flexible 的思路\n\n首先获得屏幕宽度，并将其平均分10份，比如安卓机，屏幕宽度360px，每一份就是36px。\n\n然后把一份的宽度写入根节点。 `html style=\"font-size:36px\"`。之后，如果想用25%的屏幕宽度，直接写2.5rem就行了。这样好处是不用从父级到子级一层一层的传递宽度，尤其是每次都要写100%。\n\n之后，还应该把body元素字体重设下。这样em也可以很好的使用。`body style=\"font-size:16px\"`。\n\n正常情况下，只需要四行代码就可以搞定。\n\n* 获取屏幕宽度\n* 将屏幕宽度分成10份\n* 将每一份宽度写入根节点\n* 重设下body字体大小\n\n如果你更希望更好一些，可以把屏幕旋转加上，旋转后触发这四步操作。\n\n基本上就这样，在不考虑dpr为 2 或者 3 的时候，这样做已经完全满足了。\n\n> 为什么不是平分100份呢？比如iPhone 6s Plus，屏幕宽度414px（默认dpr=1），如果分成100份，每份是4.14px，太小了，很多时候支持不了。和文字过小被限制差不多。如果分成25份，额，计算太麻烦了而已。\n\n## 问题出现\n\n之前一直按照上文那么做，也没发现问题。应该是也没接到问题反馈。\n\n但是这次遇到了一个奇葩情况。\n\n360px宽度的安卓机vivo，html已经设置为36px。有元素10rem，正常情况下，别的机型都是等于360px宽（屏宽），但是此机型奇葩，通过js计算后获取，值为392.03125px。如果不用rem，用100%，则没有问题。\n\n问题出现在安卓APP的webview中。至于手机浏览器中是否会出问题，我忘记了。\n\n网上也没有关于这方面的资料。\n\n唯独一条记录在这里：[segmentfault](https://segmentfault.com/q/1010000006851410)\n\n## 问题的解决\n\n后来曾经巧合，阅读到一篇文章，大概也是说页面缩放-375px屏幕的实现。出的问题结果和我们的情况是一致的。意思是 `initial-scale` 要进行设置。我检查了下，我们的代码也写好了。但还是不行。[文章见此](https://github.com/ShowJoy-com/showjoy-blog/issues/6) ，以及他的文章参考了[这里](http://lvdada.org/2016/01/28/viewport-and-flexibleJs/)。\n\n他的文章思路是修改scale数值，以便达到用360px宽度的屏幕，显示375px的内容。\n\n而我们思考的方向，是针对出问题的机型，进行fontSize修复。\n\n我们的思路是，首先用标准方案（上文四步方法），然后进行检查。安卓机全部要添加一个10rem元素，检查其计算宽度和屏幕宽度的比例，如果10rem元素超过屏幕宽度了，那就是当前机器出问题，此时需要进行修复。\n\n修复方法和他们的计算一致，看看尺寸比正常的屏幕宽度大了多少倍。大了多少倍，就把fontSize缩小多少倍。\n\n\n**这两种方式的区别：**\n\n* 他们的是定宽（此时所有机器都采用了设计稿的一半，375px）但是修复起来简单质量高，缺点是414px的iPhone，也要降低屏幕宽度，在文字显示上吃亏，因为屏幕最多只有375px，文字是按照px定义的。（我这么认为的）\n* 我们是常规宽，大屏机用自己的大宽度，小屏机用自己的小屏宽度，图片缩放和他们一样都是屏幕比例，但是文字展示上不会受影响。\n\n\n> 一般情况下，用了flexible方案，仅仅对布局使用rem，而对文字之类，还是使用px或em为单位。用了rem或进行等比缩小，小屏手机文字会看不清或者浏览器禁止设置过小的字体。\n\n## 最后，附上我们的解决方案代码\n\n```js\n    (function (win) {\n        // html根元素\n        var HTML_ELEMENT = document.documentElement;\n        // 屏幕宽度\n        var SCREEN_WIDTH = 0;\n        // 标准fontSize计算值\n        var BASE_FONT_SIZE = 0;\n        // 处理后的fontSize计算值\n        var REAL_BASE_FONT_SIZE = 0;\n\n        /**\n        * 修复异常的fontSize代码\n        */\n        var fix = function () {\n            var ua = navigator.userAgent;\n            var isIOS = /(iPhone|iPad|iPod)/.test(ua);\n            // 非苹果设备，均进行检测\n            if (!isIOS) {\n                var div = win.document.createElement('div');\n                div.style.width = '10rem';\n                win.document.body.appendChild(div);\n                win.setTimeout(function () {\n                    var getWidth = parseFloat(win.getComputedStyle(div).width);\n                    if (getWidth > SCREEN_WIDTH) {\n                        // 此时是出问题的情况\n                        var ratio = getWidth / SCREEN_WIDTH;\n                        REAL_BASE_FONT_SIZE = (BASE_FONT_SIZE / ratio).toFixed(4);\n                        HTML_ELEMENT.style.fontSize = REAL_BASE_FONT_SIZE + 'px';\n                    }\n                    div.remove();\n                }, 100);\n            }\n        };\n\n        /**\n         * 调整根元素fontSize\n         */\n        var setBaseFontSize = function () {\n            // 获取屏幕宽度\n            SCREEN_WIDTH = HTML_ELEMENT.clientWidth;\n            // 将屏幕分成10份，获取每一份宽度\n            BASE_FONT_SIZE = SCREEN_WIDTH / 10;\n            // 写入html元素fontSize\n            HTML_ELEMENT.style.fontSize = BASE_FONT_SIZE + 'px';\n            fix();\n        };\n\n        /**\n         *手机旋转控制\n         */\n        var tid;\n        if (win.onorientationchange) {\n            win.onorientationchange = function () {\n                clearTimeout(tid);\n                tid = setTimeout(function () {\n                    setBaseFontSize();\n                }, 300);\n            }\n        } else {\n            win.onresize = function () {\n                clearTimeout(tid);\n                tid = setTimeout(function () {\n                    setBaseFontSize();\n                }, 300);\n            };\n        }\n        setBaseFontSize();\n    })(window);\n```","slug":"2017-2017-03-05-js-flexible","published":1,"updated":"2020-03-02T07:16:34.640Z","comments":1,"photos":[],"link":"","_id":"cka5ik8b30021nybgb8ujo2gj","content":"<p>在我们的新项目中，依旧采用了传统的flexible思路，对屏幕进行分割，通过 rem 来进行比例适配。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"简易-flexible-的思路\"><a href=\"#简易-flexible-的思路\" class=\"headerlink\" title=\"简易 flexible 的思路\"></a>简易 flexible 的思路</h2><p>首先获得屏幕宽度，并将其平均分10份，比如安卓机，屏幕宽度360px，每一份就是36px。</p>\n<p>然后把一份的宽度写入根节点。 <code>html style=&quot;font-size:36px&quot;</code>。之后，如果想用25%的屏幕宽度，直接写2.5rem就行了。这样好处是不用从父级到子级一层一层的传递宽度，尤其是每次都要写100%。</p>\n<p>之后，还应该把body元素字体重设下。这样em也可以很好的使用。<code>body style=&quot;font-size:16px&quot;</code>。</p>\n<p>正常情况下，只需要四行代码就可以搞定。</p>\n<ul>\n<li>获取屏幕宽度</li>\n<li>将屏幕宽度分成10份</li>\n<li>将每一份宽度写入根节点</li>\n<li>重设下body字体大小</li>\n</ul>\n<p>如果你更希望更好一些，可以把屏幕旋转加上，旋转后触发这四步操作。</p>\n<p>基本上就这样，在不考虑dpr为 2 或者 3 的时候，这样做已经完全满足了。</p>\n<blockquote>\n<p>为什么不是平分100份呢？比如iPhone 6s Plus，屏幕宽度414px（默认dpr=1），如果分成100份，每份是4.14px，太小了，很多时候支持不了。和文字过小被限制差不多。如果分成25份，额，计算太麻烦了而已。</p>\n</blockquote>\n<h2 id=\"问题出现\"><a href=\"#问题出现\" class=\"headerlink\" title=\"问题出现\"></a>问题出现</h2><p>之前一直按照上文那么做，也没发现问题。应该是也没接到问题反馈。</p>\n<p>但是这次遇到了一个奇葩情况。</p>\n<p>360px宽度的安卓机vivo，html已经设置为36px。有元素10rem，正常情况下，别的机型都是等于360px宽（屏宽），但是此机型奇葩，通过js计算后获取，值为392.03125px。如果不用rem，用100%，则没有问题。</p>\n<p>问题出现在安卓APP的webview中。至于手机浏览器中是否会出问题，我忘记了。</p>\n<p>网上也没有关于这方面的资料。</p>\n<p>唯独一条记录在这里：<a href=\"https://segmentfault.com/q/1010000006851410\" target=\"_blank\" rel=\"noopener\">segmentfault</a></p>\n<h2 id=\"问题的解决\"><a href=\"#问题的解决\" class=\"headerlink\" title=\"问题的解决\"></a>问题的解决</h2><p>后来曾经巧合，阅读到一篇文章，大概也是说页面缩放-375px屏幕的实现。出的问题结果和我们的情况是一致的。意思是 <code>initial-scale</code> 要进行设置。我检查了下，我们的代码也写好了。但还是不行。<a href=\"https://github.com/ShowJoy-com/showjoy-blog/issues/6\" target=\"_blank\" rel=\"noopener\">文章见此</a> ，以及他的文章参考了<a href=\"http://lvdada.org/2016/01/28/viewport-and-flexibleJs/\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>他的文章思路是修改scale数值，以便达到用360px宽度的屏幕，显示375px的内容。</p>\n<p>而我们思考的方向，是针对出问题的机型，进行fontSize修复。</p>\n<p>我们的思路是，首先用标准方案（上文四步方法），然后进行检查。安卓机全部要添加一个10rem元素，检查其计算宽度和屏幕宽度的比例，如果10rem元素超过屏幕宽度了，那就是当前机器出问题，此时需要进行修复。</p>\n<p>修复方法和他们的计算一致，看看尺寸比正常的屏幕宽度大了多少倍。大了多少倍，就把fontSize缩小多少倍。</p>\n<p><strong>这两种方式的区别：</strong></p>\n<ul>\n<li>他们的是定宽（此时所有机器都采用了设计稿的一半，375px）但是修复起来简单质量高，缺点是414px的iPhone，也要降低屏幕宽度，在文字显示上吃亏，因为屏幕最多只有375px，文字是按照px定义的。（我这么认为的）</li>\n<li>我们是常规宽，大屏机用自己的大宽度，小屏机用自己的小屏宽度，图片缩放和他们一样都是屏幕比例，但是文字展示上不会受影响。</li>\n</ul>\n<blockquote>\n<p>一般情况下，用了flexible方案，仅仅对布局使用rem，而对文字之类，还是使用px或em为单位。用了rem或进行等比缩小，小屏手机文字会看不清或者浏览器禁止设置过小的字体。</p>\n</blockquote>\n<h2 id=\"最后，附上我们的解决方案代码\"><a href=\"#最后，附上我们的解决方案代码\" class=\"headerlink\" title=\"最后，附上我们的解决方案代码\"></a>最后，附上我们的解决方案代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">win</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// html根元素</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> HTML_ELEMENT = <span class=\"built_in\">document</span>.documentElement;</span><br><span class=\"line\">    <span class=\"comment\">// 屏幕宽度</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> SCREEN_WIDTH = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 标准fontSize计算值</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> BASE_FONT_SIZE = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 处理后的fontSize计算值</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> REAL_BASE_FONT_SIZE = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 修复异常的fontSize代码</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> fix = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ua = navigator.userAgent;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> isIOS = <span class=\"regexp\">/(iPhone|iPad|iPod)/</span>.test(ua);</span><br><span class=\"line\">        <span class=\"comment\">// 非苹果设备，均进行检测</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isIOS) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> div = win.document.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">            div.style.width = <span class=\"string\">'10rem'</span>;</span><br><span class=\"line\">            win.document.body.appendChild(div);</span><br><span class=\"line\">            win.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> getWidth = <span class=\"built_in\">parseFloat</span>(win.getComputedStyle(div).width);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (getWidth &gt; SCREEN_WIDTH) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 此时是出问题的情况</span></span><br><span class=\"line\">                    <span class=\"keyword\">var</span> ratio = getWidth / SCREEN_WIDTH;</span><br><span class=\"line\">                    REAL_BASE_FONT_SIZE = (BASE_FONT_SIZE / ratio).toFixed(<span class=\"number\">4</span>);</span><br><span class=\"line\">                    HTML_ELEMENT.style.fontSize = REAL_BASE_FONT_SIZE + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                div.remove();</span><br><span class=\"line\">            &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 调整根元素fontSize</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> setBaseFontSize = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取屏幕宽度</span></span><br><span class=\"line\">        SCREEN_WIDTH = HTML_ELEMENT.clientWidth;</span><br><span class=\"line\">        <span class=\"comment\">// 将屏幕分成10份，获取每一份宽度</span></span><br><span class=\"line\">        BASE_FONT_SIZE = SCREEN_WIDTH / <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 写入html元素fontSize</span></span><br><span class=\"line\">        HTML_ELEMENT.style.fontSize = BASE_FONT_SIZE + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">        fix();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *手机旋转控制</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> tid;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (win.onorientationchange) &#123;</span><br><span class=\"line\">        win.onorientationchange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            clearTimeout(tid);</span><br><span class=\"line\">            tid = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                setBaseFontSize();</span><br><span class=\"line\">            &#125;, <span class=\"number\">300</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        win.onresize = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            clearTimeout(tid);</span><br><span class=\"line\">            tid = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                setBaseFontSize();</span><br><span class=\"line\">            &#125;, <span class=\"number\">300</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setBaseFontSize();</span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>在我们的新项目中，依旧采用了传统的flexible思路，对屏幕进行分割，通过 rem 来进行比例适配。</p>","more":"<h2 id=\"简易-flexible-的思路\"><a href=\"#简易-flexible-的思路\" class=\"headerlink\" title=\"简易 flexible 的思路\"></a>简易 flexible 的思路</h2><p>首先获得屏幕宽度，并将其平均分10份，比如安卓机，屏幕宽度360px，每一份就是36px。</p>\n<p>然后把一份的宽度写入根节点。 <code>html style=&quot;font-size:36px&quot;</code>。之后，如果想用25%的屏幕宽度，直接写2.5rem就行了。这样好处是不用从父级到子级一层一层的传递宽度，尤其是每次都要写100%。</p>\n<p>之后，还应该把body元素字体重设下。这样em也可以很好的使用。<code>body style=&quot;font-size:16px&quot;</code>。</p>\n<p>正常情况下，只需要四行代码就可以搞定。</p>\n<ul>\n<li>获取屏幕宽度</li>\n<li>将屏幕宽度分成10份</li>\n<li>将每一份宽度写入根节点</li>\n<li>重设下body字体大小</li>\n</ul>\n<p>如果你更希望更好一些，可以把屏幕旋转加上，旋转后触发这四步操作。</p>\n<p>基本上就这样，在不考虑dpr为 2 或者 3 的时候，这样做已经完全满足了。</p>\n<blockquote>\n<p>为什么不是平分100份呢？比如iPhone 6s Plus，屏幕宽度414px（默认dpr=1），如果分成100份，每份是4.14px，太小了，很多时候支持不了。和文字过小被限制差不多。如果分成25份，额，计算太麻烦了而已。</p>\n</blockquote>\n<h2 id=\"问题出现\"><a href=\"#问题出现\" class=\"headerlink\" title=\"问题出现\"></a>问题出现</h2><p>之前一直按照上文那么做，也没发现问题。应该是也没接到问题反馈。</p>\n<p>但是这次遇到了一个奇葩情况。</p>\n<p>360px宽度的安卓机vivo，html已经设置为36px。有元素10rem，正常情况下，别的机型都是等于360px宽（屏宽），但是此机型奇葩，通过js计算后获取，值为392.03125px。如果不用rem，用100%，则没有问题。</p>\n<p>问题出现在安卓APP的webview中。至于手机浏览器中是否会出问题，我忘记了。</p>\n<p>网上也没有关于这方面的资料。</p>\n<p>唯独一条记录在这里：<a href=\"https://segmentfault.com/q/1010000006851410\" target=\"_blank\" rel=\"noopener\">segmentfault</a></p>\n<h2 id=\"问题的解决\"><a href=\"#问题的解决\" class=\"headerlink\" title=\"问题的解决\"></a>问题的解决</h2><p>后来曾经巧合，阅读到一篇文章，大概也是说页面缩放-375px屏幕的实现。出的问题结果和我们的情况是一致的。意思是 <code>initial-scale</code> 要进行设置。我检查了下，我们的代码也写好了。但还是不行。<a href=\"https://github.com/ShowJoy-com/showjoy-blog/issues/6\" target=\"_blank\" rel=\"noopener\">文章见此</a> ，以及他的文章参考了<a href=\"http://lvdada.org/2016/01/28/viewport-and-flexibleJs/\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>他的文章思路是修改scale数值，以便达到用360px宽度的屏幕，显示375px的内容。</p>\n<p>而我们思考的方向，是针对出问题的机型，进行fontSize修复。</p>\n<p>我们的思路是，首先用标准方案（上文四步方法），然后进行检查。安卓机全部要添加一个10rem元素，检查其计算宽度和屏幕宽度的比例，如果10rem元素超过屏幕宽度了，那就是当前机器出问题，此时需要进行修复。</p>\n<p>修复方法和他们的计算一致，看看尺寸比正常的屏幕宽度大了多少倍。大了多少倍，就把fontSize缩小多少倍。</p>\n<p><strong>这两种方式的区别：</strong></p>\n<ul>\n<li>他们的是定宽（此时所有机器都采用了设计稿的一半，375px）但是修复起来简单质量高，缺点是414px的iPhone，也要降低屏幕宽度，在文字显示上吃亏，因为屏幕最多只有375px，文字是按照px定义的。（我这么认为的）</li>\n<li>我们是常规宽，大屏机用自己的大宽度，小屏机用自己的小屏宽度，图片缩放和他们一样都是屏幕比例，但是文字展示上不会受影响。</li>\n</ul>\n<blockquote>\n<p>一般情况下，用了flexible方案，仅仅对布局使用rem，而对文字之类，还是使用px或em为单位。用了rem或进行等比缩小，小屏手机文字会看不清或者浏览器禁止设置过小的字体。</p>\n</blockquote>\n<h2 id=\"最后，附上我们的解决方案代码\"><a href=\"#最后，附上我们的解决方案代码\" class=\"headerlink\" title=\"最后，附上我们的解决方案代码\"></a>最后，附上我们的解决方案代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">win</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// html根元素</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> HTML_ELEMENT = <span class=\"built_in\">document</span>.documentElement;</span><br><span class=\"line\">    <span class=\"comment\">// 屏幕宽度</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> SCREEN_WIDTH = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 标准fontSize计算值</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> BASE_FONT_SIZE = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 处理后的fontSize计算值</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> REAL_BASE_FONT_SIZE = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 修复异常的fontSize代码</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> fix = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ua = navigator.userAgent;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> isIOS = <span class=\"regexp\">/(iPhone|iPad|iPod)/</span>.test(ua);</span><br><span class=\"line\">        <span class=\"comment\">// 非苹果设备，均进行检测</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isIOS) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> div = win.document.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">            div.style.width = <span class=\"string\">'10rem'</span>;</span><br><span class=\"line\">            win.document.body.appendChild(div);</span><br><span class=\"line\">            win.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> getWidth = <span class=\"built_in\">parseFloat</span>(win.getComputedStyle(div).width);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (getWidth &gt; SCREEN_WIDTH) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 此时是出问题的情况</span></span><br><span class=\"line\">                    <span class=\"keyword\">var</span> ratio = getWidth / SCREEN_WIDTH;</span><br><span class=\"line\">                    REAL_BASE_FONT_SIZE = (BASE_FONT_SIZE / ratio).toFixed(<span class=\"number\">4</span>);</span><br><span class=\"line\">                    HTML_ELEMENT.style.fontSize = REAL_BASE_FONT_SIZE + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                div.remove();</span><br><span class=\"line\">            &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 调整根元素fontSize</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> setBaseFontSize = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取屏幕宽度</span></span><br><span class=\"line\">        SCREEN_WIDTH = HTML_ELEMENT.clientWidth;</span><br><span class=\"line\">        <span class=\"comment\">// 将屏幕分成10份，获取每一份宽度</span></span><br><span class=\"line\">        BASE_FONT_SIZE = SCREEN_WIDTH / <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 写入html元素fontSize</span></span><br><span class=\"line\">        HTML_ELEMENT.style.fontSize = BASE_FONT_SIZE + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">        fix();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *手机旋转控制</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> tid;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (win.onorientationchange) &#123;</span><br><span class=\"line\">        win.onorientationchange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            clearTimeout(tid);</span><br><span class=\"line\">            tid = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                setBaseFontSize();</span><br><span class=\"line\">            &#125;, <span class=\"number\">300</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        win.onresize = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            clearTimeout(tid);</span><br><span class=\"line\">            tid = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                setBaseFontSize();</span><br><span class=\"line\">            &#125;, <span class=\"number\">300</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setBaseFontSize();</span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>);</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"Keka - 可视化多格式压缩工具 [MAC]","date":"2017-03-06T21:42:00.000Z","_content":"\n在 MAC 下，想找一款好用的压缩软件，绝对很难。我找了很久，也试过了很多，基本上没有特别好用的。\n\n<!-- more -->\n\n首先说便捷性，可以说系统自带的最方便。但是功能却是最少的，格式不能选择（虽然很多时候只需要zip格式就够了），不能设置密码等等。\n\n很多软件也仿照系统的风格，所以也没什么特色。\n\n这里想插一句，**无论选择什么软件，都不能压缩成 rar 格式。**这个是 winRAR 专有的，winRAR 是没有 MAC 和 linux 版本的。貌似也没有开源或者其他第三方 rar 的插件。\n\n除去 rar，我觉得用的最顺手的就是 Keka 了。\n\n![image](https://cdn0.yukapril.com/blog/2017-03-06-share-keka.png-wm.black)\n\n选好要压缩的格式，比如 Zip，还可以进行选项配置。之后直接把目录或文件拖拽到软件界面上就 OK 了。\n\n当然，他还可以有默认配置。绝对算是好用。\n\n![image](https://cdn0.yukapril.com/blog/2017-03-06-share-keka2.png-wm.black)\n\n不仅如此，Keka 还能解压缩。同样是用它打开压缩文件就可以了。和系统一样，自动解压到当前目录。不过我还是喜欢 (Dr.Unarchiver)[http://yukapril.com/2016/11/18/share-drunarchiver.html]\n\n至于 rar 格式，MAC 下不支持压缩，所以也没有机会尝试...但是官网说是支持的。\n\n---\n\n##### 软件信息\n\n软件名：Keka \n\n价格：免费\n\n下载地址：[官网](http://www.kekaosx.com/en/)\n\n注：iTunes也提供下载，但是价格是12元。不知道为什么。","source":"_posts/2017/2017-03-06-share-keka.md","raw":"---\nlayout: post\ntitle: \"Keka - 可视化多格式压缩工具 [MAC]\"\ndate: 2017-03-06 21:42:00 GMT+0800\ncategories: [软件]\ntags:  [keka]\n---\n\n在 MAC 下，想找一款好用的压缩软件，绝对很难。我找了很久，也试过了很多，基本上没有特别好用的。\n\n<!-- more -->\n\n首先说便捷性，可以说系统自带的最方便。但是功能却是最少的，格式不能选择（虽然很多时候只需要zip格式就够了），不能设置密码等等。\n\n很多软件也仿照系统的风格，所以也没什么特色。\n\n这里想插一句，**无论选择什么软件，都不能压缩成 rar 格式。**这个是 winRAR 专有的，winRAR 是没有 MAC 和 linux 版本的。貌似也没有开源或者其他第三方 rar 的插件。\n\n除去 rar，我觉得用的最顺手的就是 Keka 了。\n\n![image](https://cdn0.yukapril.com/blog/2017-03-06-share-keka.png-wm.black)\n\n选好要压缩的格式，比如 Zip，还可以进行选项配置。之后直接把目录或文件拖拽到软件界面上就 OK 了。\n\n当然，他还可以有默认配置。绝对算是好用。\n\n![image](https://cdn0.yukapril.com/blog/2017-03-06-share-keka2.png-wm.black)\n\n不仅如此，Keka 还能解压缩。同样是用它打开压缩文件就可以了。和系统一样，自动解压到当前目录。不过我还是喜欢 (Dr.Unarchiver)[http://yukapril.com/2016/11/18/share-drunarchiver.html]\n\n至于 rar 格式，MAC 下不支持压缩，所以也没有机会尝试...但是官网说是支持的。\n\n---\n\n##### 软件信息\n\n软件名：Keka \n\n价格：免费\n\n下载地址：[官网](http://www.kekaosx.com/en/)\n\n注：iTunes也提供下载，但是价格是12元。不知道为什么。","slug":"2017-2017-03-06-share-keka","published":1,"updated":"2020-03-02T07:16:34.641Z","comments":1,"photos":[],"link":"","_id":"cka5ik8b50026nybgzwcav7gn","content":"<p>在 MAC 下，想找一款好用的压缩软件，绝对很难。我找了很久，也试过了很多，基本上没有特别好用的。</p>\n<a id=\"more\"></a>\n\n<p>首先说便捷性，可以说系统自带的最方便。但是功能却是最少的，格式不能选择（虽然很多时候只需要zip格式就够了），不能设置密码等等。</p>\n<p>很多软件也仿照系统的风格，所以也没什么特色。</p>\n<p>这里想插一句，<strong>无论选择什么软件，都不能压缩成 rar 格式。</strong>这个是 winRAR 专有的，winRAR 是没有 MAC 和 linux 版本的。貌似也没有开源或者其他第三方 rar 的插件。</p>\n<p>除去 rar，我觉得用的最顺手的就是 Keka 了。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-03-06-share-keka.png-wm.black\" alt=\"image\"></p>\n<p>选好要压缩的格式，比如 Zip，还可以进行选项配置。之后直接把目录或文件拖拽到软件界面上就 OK 了。</p>\n<p>当然，他还可以有默认配置。绝对算是好用。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-03-06-share-keka2.png-wm.black\" alt=\"image\"></p>\n<p>不仅如此，Keka 还能解压缩。同样是用它打开压缩文件就可以了。和系统一样，自动解压到当前目录。不过我还是喜欢 (Dr.Unarchiver)[<a href=\"http://yukapril.com/2016/11/18/share-drunarchiver.html]\" target=\"_blank\" rel=\"noopener\">http://yukapril.com/2016/11/18/share-drunarchiver.html]</a></p>\n<p>至于 rar 格式，MAC 下不支持压缩，所以也没有机会尝试…但是官网说是支持的。</p>\n<hr>\n<h5 id=\"软件信息\"><a href=\"#软件信息\" class=\"headerlink\" title=\"软件信息\"></a>软件信息</h5><p>软件名：Keka </p>\n<p>价格：免费</p>\n<p>下载地址：<a href=\"http://www.kekaosx.com/en/\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<p>注：iTunes也提供下载，但是价格是12元。不知道为什么。</p>\n","site":{"data":{}},"excerpt":"<p>在 MAC 下，想找一款好用的压缩软件，绝对很难。我找了很久，也试过了很多，基本上没有特别好用的。</p>","more":"<p>首先说便捷性，可以说系统自带的最方便。但是功能却是最少的，格式不能选择（虽然很多时候只需要zip格式就够了），不能设置密码等等。</p>\n<p>很多软件也仿照系统的风格，所以也没什么特色。</p>\n<p>这里想插一句，<strong>无论选择什么软件，都不能压缩成 rar 格式。</strong>这个是 winRAR 专有的，winRAR 是没有 MAC 和 linux 版本的。貌似也没有开源或者其他第三方 rar 的插件。</p>\n<p>除去 rar，我觉得用的最顺手的就是 Keka 了。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-03-06-share-keka.png-wm.black\" alt=\"image\"></p>\n<p>选好要压缩的格式，比如 Zip，还可以进行选项配置。之后直接把目录或文件拖拽到软件界面上就 OK 了。</p>\n<p>当然，他还可以有默认配置。绝对算是好用。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2017-03-06-share-keka2.png-wm.black\" alt=\"image\"></p>\n<p>不仅如此，Keka 还能解压缩。同样是用它打开压缩文件就可以了。和系统一样，自动解压到当前目录。不过我还是喜欢 (Dr.Unarchiver)[<a href=\"http://yukapril.com/2016/11/18/share-drunarchiver.html]\" target=\"_blank\" rel=\"noopener\">http://yukapril.com/2016/11/18/share-drunarchiver.html]</a></p>\n<p>至于 rar 格式，MAC 下不支持压缩，所以也没有机会尝试…但是官网说是支持的。</p>\n<hr>\n<h5 id=\"软件信息\"><a href=\"#软件信息\" class=\"headerlink\" title=\"软件信息\"></a>软件信息</h5><p>软件名：Keka </p>\n<p>价格：免费</p>\n<p>下载地址：<a href=\"http://www.kekaosx.com/en/\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<p>注：iTunes也提供下载，但是价格是12元。不知道为什么。</p>"},{"layout":"post","title":"GO 语言学习片段","date":"2017-03-31T00:09:00.000Z","_content":"\ngo 语言入门笔记。\n\n<!-- more -->\n\n### 循环输出字符\n\n```go\npackage main\nimport \"fmt\"\n\nfunc main() {\n    var max int = 25\n    var c string = \"G\"\n    \n    for i := 1; i <= max; i++{\n        var str = \"\"\n        for j := 1; j <= i; j++{\n            str += c\n        }\n        fmt.Println(str)\n    }\n}\n```\n\n### 函数多返回值，解构赋值\n\n```go\npackage main\nimport \"fmt\"\n\nfunc twoNumbers (a int, b int, c int) (x int, y int){\n    x = a + b\n    y = b + c\n    return // 省略 x和y\n}\n\nfunc main() {\n    m,n := twoNumbers(3, 5, 8) //等同于Javascript的解构赋值\n    fmt.Printf(\"第一个数:%d, 第二个数:%d\", m, n)\n}\n```\n\n### 函数变长参数（展开运算符）\n\n```go\npackage main\nimport \"fmt\"\n\nfunc add (args ...int) (sum int){\n    for ix,v := range args {\n        fmt.Printf(\"index:%d,current:%d\\n\", ix, v)\n        sum += v\n    }\n    return\n}\n\nfunc main() {\n    sum := add(3, 5, 8, 9, 12)\n    fmt.Printf(\"sum:%d\", sum)\n}\n```\n\n### defer推迟执行（异步执行）\n\n```go\npackage main\nimport \"fmt\"\n\nfunc say (str string){\n    fmt.Println(str)\n}\n\nfunc f1 (){\n    fmt.Println(\"entry f1...\")\n    defer say(\"defer f1\")\n    fmt.Println(\"leave f1...\")\n    f2()\n}\n\nfunc f2 (){\n    fmt.Println(\"entry f2...\")\n    defer say(\"defer f2\")\n    fmt.Println(\"leave f2...\")\n}\n\nfunc main() {\n    fmt.Println(\"entry main...\")\n    f1()\n    fmt.Println(\"leave main...\")\n}\n\n// entry main...\n// entry f1...\n// leave f1...\n// entry f2...\n// leave f2...\n// defer f2\n// defer f1\n// leave main...\n```\n\n需要注意的是，`leave main...`是最后执行的，推迟执行并没有在其之后。而且 defer 的函数类似栈操作，先进后出，后进先出。\n\n### 关于指针的使用\n\n`*` 是获取值，`&`获取地址。\n\n声明 `*p`，此时 `*p` 是地址。\n\n声明 `q`，此时 `q` 是值，`&q`是取址。\n\n```go\npackage main\nimport \"fmt\"\n\n// 传入普通数组\nfunc f(a [3]int) { \n    a[2] = 5\n}\n\n// 传入指针类型\nfunc fp(a *[3]int) { \n    a[1] = 3\n}\n\nfunc main() {\n    var ar [3]int\n    fmt.Println(ar)\n\n    f(ar)\n    fmt.Println(ar)\n\n    fp(&ar) // 此处需要传入地址\n    fmt.Println(ar)\n}\n\n// [0 0 0]\n// [0 0 0]\n// [0 3 0]\n```\n","source":"_posts/2017/2017-03-31-go-snippet.md","raw":"---\nlayout: post\ntitle: \"GO 语言学习片段\"\ndate: 2017-03-31 00:09:00 GMT+0800\ncategories: [编程]\ntags:  [go,指针]\n---\n\ngo 语言入门笔记。\n\n<!-- more -->\n\n### 循环输出字符\n\n```go\npackage main\nimport \"fmt\"\n\nfunc main() {\n    var max int = 25\n    var c string = \"G\"\n    \n    for i := 1; i <= max; i++{\n        var str = \"\"\n        for j := 1; j <= i; j++{\n            str += c\n        }\n        fmt.Println(str)\n    }\n}\n```\n\n### 函数多返回值，解构赋值\n\n```go\npackage main\nimport \"fmt\"\n\nfunc twoNumbers (a int, b int, c int) (x int, y int){\n    x = a + b\n    y = b + c\n    return // 省略 x和y\n}\n\nfunc main() {\n    m,n := twoNumbers(3, 5, 8) //等同于Javascript的解构赋值\n    fmt.Printf(\"第一个数:%d, 第二个数:%d\", m, n)\n}\n```\n\n### 函数变长参数（展开运算符）\n\n```go\npackage main\nimport \"fmt\"\n\nfunc add (args ...int) (sum int){\n    for ix,v := range args {\n        fmt.Printf(\"index:%d,current:%d\\n\", ix, v)\n        sum += v\n    }\n    return\n}\n\nfunc main() {\n    sum := add(3, 5, 8, 9, 12)\n    fmt.Printf(\"sum:%d\", sum)\n}\n```\n\n### defer推迟执行（异步执行）\n\n```go\npackage main\nimport \"fmt\"\n\nfunc say (str string){\n    fmt.Println(str)\n}\n\nfunc f1 (){\n    fmt.Println(\"entry f1...\")\n    defer say(\"defer f1\")\n    fmt.Println(\"leave f1...\")\n    f2()\n}\n\nfunc f2 (){\n    fmt.Println(\"entry f2...\")\n    defer say(\"defer f2\")\n    fmt.Println(\"leave f2...\")\n}\n\nfunc main() {\n    fmt.Println(\"entry main...\")\n    f1()\n    fmt.Println(\"leave main...\")\n}\n\n// entry main...\n// entry f1...\n// leave f1...\n// entry f2...\n// leave f2...\n// defer f2\n// defer f1\n// leave main...\n```\n\n需要注意的是，`leave main...`是最后执行的，推迟执行并没有在其之后。而且 defer 的函数类似栈操作，先进后出，后进先出。\n\n### 关于指针的使用\n\n`*` 是获取值，`&`获取地址。\n\n声明 `*p`，此时 `*p` 是地址。\n\n声明 `q`，此时 `q` 是值，`&q`是取址。\n\n```go\npackage main\nimport \"fmt\"\n\n// 传入普通数组\nfunc f(a [3]int) { \n    a[2] = 5\n}\n\n// 传入指针类型\nfunc fp(a *[3]int) { \n    a[1] = 3\n}\n\nfunc main() {\n    var ar [3]int\n    fmt.Println(ar)\n\n    f(ar)\n    fmt.Println(ar)\n\n    fp(&ar) // 此处需要传入地址\n    fmt.Println(ar)\n}\n\n// [0 0 0]\n// [0 0 0]\n// [0 3 0]\n```\n","slug":"2017-2017-03-31-go-snippet","published":1,"updated":"2020-03-06T01:26:59.844Z","comments":1,"photos":[],"link":"","_id":"cka5ik8b60028nybgu6ri4nap","content":"<p>go 语言入门笔记。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"循环输出字符\"><a href=\"#循环输出字符\" class=\"headerlink\" title=\"循环输出字符\"></a>循环输出字符</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> max <span class=\"keyword\">int</span> = <span class=\"number\">25</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> c <span class=\"keyword\">string</span> = <span class=\"string\">\"G\"</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= max; i++&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> str = <span class=\"string\">\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j := <span class=\"number\">1</span>; j &lt;= i; j++&#123;</span><br><span class=\"line\">            str += c</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fmt.Println(str)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数多返回值，解构赋值\"><a href=\"#函数多返回值，解构赋值\" class=\"headerlink\" title=\"函数多返回值，解构赋值\"></a>函数多返回值，解构赋值</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">twoNumbers</span> <span class=\"params\">(a <span class=\"keyword\">int</span>, b <span class=\"keyword\">int</span>, c <span class=\"keyword\">int</span>)</span> <span class=\"params\">(x <span class=\"keyword\">int</span>, y <span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">    x = a + b</span><br><span class=\"line\">    y = b + c</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"comment\">// 省略 x和y</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    m,n := twoNumbers(<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>) <span class=\"comment\">//等同于Javascript的解构赋值</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"第一个数:%d, 第二个数:%d\"</span>, m, n)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数变长参数（展开运算符）\"><a href=\"#函数变长参数（展开运算符）\" class=\"headerlink\" title=\"函数变长参数（展开运算符）\"></a>函数变长参数（展开运算符）</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span> <span class=\"params\">(args ...<span class=\"keyword\">int</span>)</span> <span class=\"params\">(sum <span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ix,v := <span class=\"keyword\">range</span> args &#123;</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"index:%d,current:%d\\n\"</span>, ix, v)</span><br><span class=\"line\">        sum += v</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    sum := add(<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"sum:%d\"</span>, sum)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"defer推迟执行（异步执行）\"><a href=\"#defer推迟执行（异步执行）\" class=\"headerlink\" title=\"defer推迟执行（异步执行）\"></a>defer推迟执行（异步执行）</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">say</span> <span class=\"params\">(str <span class=\"keyword\">string</span>)</span></span>&#123;</span><br><span class=\"line\">    fmt.Println(str)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f1</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"entry f1...\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> say(<span class=\"string\">\"defer f1\"</span>)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"leave f1...\"</span>)</span><br><span class=\"line\">    f2()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f2</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"entry f2...\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> say(<span class=\"string\">\"defer f2\"</span>)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"leave f2...\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"entry main...\"</span>)</span><br><span class=\"line\">    f1()</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"leave main...\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// entry main...</span></span><br><span class=\"line\"><span class=\"comment\">// entry f1...</span></span><br><span class=\"line\"><span class=\"comment\">// leave f1...</span></span><br><span class=\"line\"><span class=\"comment\">// entry f2...</span></span><br><span class=\"line\"><span class=\"comment\">// leave f2...</span></span><br><span class=\"line\"><span class=\"comment\">// defer f2</span></span><br><span class=\"line\"><span class=\"comment\">// defer f1</span></span><br><span class=\"line\"><span class=\"comment\">// leave main...</span></span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，<code>leave main...</code>是最后执行的，推迟执行并没有在其之后。而且 defer 的函数类似栈操作，先进后出，后进先出。</p>\n<h3 id=\"关于指针的使用\"><a href=\"#关于指针的使用\" class=\"headerlink\" title=\"关于指针的使用\"></a>关于指针的使用</h3><p><code>*</code> 是获取值，<code>&amp;</code>获取地址。</p>\n<p>声明 <code>*p</code>，此时 <code>*p</code> 是地址。</p>\n<p>声明 <code>q</code>，此时 <code>q</code> 是值，<code>&amp;q</code>是取址。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传入普通数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span><span class=\"params\">(a [3]<span class=\"keyword\">int</span>)</span></span> &#123; </span><br><span class=\"line\">    a[<span class=\"number\">2</span>] = <span class=\"number\">5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传入指针类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fp</span><span class=\"params\">(a *[3]<span class=\"keyword\">int</span>)</span></span> &#123; </span><br><span class=\"line\">    a[<span class=\"number\">1</span>] = <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ar [<span class=\"number\">3</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">    fmt.Println(ar)</span><br><span class=\"line\"></span><br><span class=\"line\">    f(ar)</span><br><span class=\"line\">    fmt.Println(ar)</span><br><span class=\"line\"></span><br><span class=\"line\">    fp(&amp;ar) <span class=\"comment\">// 此处需要传入地址</span></span><br><span class=\"line\">    fmt.Println(ar)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [0 0 0]</span></span><br><span class=\"line\"><span class=\"comment\">// [0 0 0]</span></span><br><span class=\"line\"><span class=\"comment\">// [0 3 0]</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>go 语言入门笔记。</p>","more":"<h3 id=\"循环输出字符\"><a href=\"#循环输出字符\" class=\"headerlink\" title=\"循环输出字符\"></a>循环输出字符</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> max <span class=\"keyword\">int</span> = <span class=\"number\">25</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> c <span class=\"keyword\">string</span> = <span class=\"string\">\"G\"</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= max; i++&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> str = <span class=\"string\">\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j := <span class=\"number\">1</span>; j &lt;= i; j++&#123;</span><br><span class=\"line\">            str += c</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fmt.Println(str)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数多返回值，解构赋值\"><a href=\"#函数多返回值，解构赋值\" class=\"headerlink\" title=\"函数多返回值，解构赋值\"></a>函数多返回值，解构赋值</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">twoNumbers</span> <span class=\"params\">(a <span class=\"keyword\">int</span>, b <span class=\"keyword\">int</span>, c <span class=\"keyword\">int</span>)</span> <span class=\"params\">(x <span class=\"keyword\">int</span>, y <span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">    x = a + b</span><br><span class=\"line\">    y = b + c</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"comment\">// 省略 x和y</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    m,n := twoNumbers(<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>) <span class=\"comment\">//等同于Javascript的解构赋值</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"第一个数:%d, 第二个数:%d\"</span>, m, n)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数变长参数（展开运算符）\"><a href=\"#函数变长参数（展开运算符）\" class=\"headerlink\" title=\"函数变长参数（展开运算符）\"></a>函数变长参数（展开运算符）</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span> <span class=\"params\">(args ...<span class=\"keyword\">int</span>)</span> <span class=\"params\">(sum <span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ix,v := <span class=\"keyword\">range</span> args &#123;</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"index:%d,current:%d\\n\"</span>, ix, v)</span><br><span class=\"line\">        sum += v</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    sum := add(<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"sum:%d\"</span>, sum)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"defer推迟执行（异步执行）\"><a href=\"#defer推迟执行（异步执行）\" class=\"headerlink\" title=\"defer推迟执行（异步执行）\"></a>defer推迟执行（异步执行）</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">say</span> <span class=\"params\">(str <span class=\"keyword\">string</span>)</span></span>&#123;</span><br><span class=\"line\">    fmt.Println(str)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f1</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"entry f1...\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> say(<span class=\"string\">\"defer f1\"</span>)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"leave f1...\"</span>)</span><br><span class=\"line\">    f2()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f2</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"entry f2...\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> say(<span class=\"string\">\"defer f2\"</span>)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"leave f2...\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"entry main...\"</span>)</span><br><span class=\"line\">    f1()</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"leave main...\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// entry main...</span></span><br><span class=\"line\"><span class=\"comment\">// entry f1...</span></span><br><span class=\"line\"><span class=\"comment\">// leave f1...</span></span><br><span class=\"line\"><span class=\"comment\">// entry f2...</span></span><br><span class=\"line\"><span class=\"comment\">// leave f2...</span></span><br><span class=\"line\"><span class=\"comment\">// defer f2</span></span><br><span class=\"line\"><span class=\"comment\">// defer f1</span></span><br><span class=\"line\"><span class=\"comment\">// leave main...</span></span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，<code>leave main...</code>是最后执行的，推迟执行并没有在其之后。而且 defer 的函数类似栈操作，先进后出，后进先出。</p>\n<h3 id=\"关于指针的使用\"><a href=\"#关于指针的使用\" class=\"headerlink\" title=\"关于指针的使用\"></a>关于指针的使用</h3><p><code>*</code> 是获取值，<code>&amp;</code>获取地址。</p>\n<p>声明 <code>*p</code>，此时 <code>*p</code> 是地址。</p>\n<p>声明 <code>q</code>，此时 <code>q</code> 是值，<code>&amp;q</code>是取址。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传入普通数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span><span class=\"params\">(a [3]<span class=\"keyword\">int</span>)</span></span> &#123; </span><br><span class=\"line\">    a[<span class=\"number\">2</span>] = <span class=\"number\">5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传入指针类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fp</span><span class=\"params\">(a *[3]<span class=\"keyword\">int</span>)</span></span> &#123; </span><br><span class=\"line\">    a[<span class=\"number\">1</span>] = <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ar [<span class=\"number\">3</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">    fmt.Println(ar)</span><br><span class=\"line\"></span><br><span class=\"line\">    f(ar)</span><br><span class=\"line\">    fmt.Println(ar)</span><br><span class=\"line\"></span><br><span class=\"line\">    fp(&amp;ar) <span class=\"comment\">// 此处需要传入地址</span></span><br><span class=\"line\">    fmt.Println(ar)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [0 0 0]</span></span><br><span class=\"line\"><span class=\"comment\">// [0 0 0]</span></span><br><span class=\"line\"><span class=\"comment\">// [0 3 0]</span></span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"[转载] 在 Node.js 中引入模块：你所需要知道的一切都在这里","date":"2017-04-14T17:52:00.000Z","_content":"\n非常好的翻译文章，对node中的模块概念阐述的非常清楚。模块的查找路径/顺序，文件名，如何去加载，又如何去调用。\n\n<!-- more -->\n\nhttp://huziketang.com/blog/posts/detail?postId=58eaf471a58c240ae35bb8e3","source":"_posts/2017/2017-04-14-zz-node-require.md","raw":"---\nlayout: post\ntitle: \"[转载] 在 Node.js 中引入模块：你所需要知道的一切都在这里\"\ndate: 2017-04-14 17:52:00 GMT+0800\ncategories: [前端]\ntags:  [node,module,require]\n---\n\n非常好的翻译文章，对node中的模块概念阐述的非常清楚。模块的查找路径/顺序，文件名，如何去加载，又如何去调用。\n\n<!-- more -->\n\nhttp://huziketang.com/blog/posts/detail?postId=58eaf471a58c240ae35bb8e3","slug":"2017-2017-04-14-zz-node-require","published":1,"updated":"2020-03-02T07:16:34.641Z","comments":1,"photos":[],"link":"","_id":"cka5ik8b7002bnybg0v59l6xd","content":"<p>非常好的翻译文章，对node中的模块概念阐述的非常清楚。模块的查找路径/顺序，文件名，如何去加载，又如何去调用。</p>\n<a id=\"more\"></a>\n\n<p><a href=\"http://huziketang.com/blog/posts/detail?postId=58eaf471a58c240ae35bb8e3\" target=\"_blank\" rel=\"noopener\">http://huziketang.com/blog/posts/detail?postId=58eaf471a58c240ae35bb8e3</a></p>\n","site":{"data":{}},"excerpt":"<p>非常好的翻译文章，对node中的模块概念阐述的非常清楚。模块的查找路径/顺序，文件名，如何去加载，又如何去调用。</p>","more":"<p><a href=\"http://huziketang.com/blog/posts/detail?postId=58eaf471a58c240ae35bb8e3\" target=\"_blank\" rel=\"noopener\">http://huziketang.com/blog/posts/detail?postId=58eaf471a58c240ae35bb8e3</a></p>"},{"layout":"post","title":"苹果MAC系统读写NTFS格式u盘硬盘方法","date":"2017-04-22T16:04:00.000Z","_content":"\n平时用U盘传数据时候，如果是windows或者linux，一般不会有问题，但是如果要从MAC下拷文件，那基本上就会遇到无法写入NTFS格式U盘的问题。\n\n<!-- more -->\n\n解决方案无非就三种：\n\n* 更换U盘格式，比如Fat32，或者exFat格式。\n* 花钱，购买苹果软件，让MAC支持NTFS。\n* 更换U盘格式，变成苹果的HFS格式。给Windows/linux都安装支持软件。\n\n这三种方案：\n\n* 第一种最省事，全平台兼容。但是据说MAC下操作可能会导致U盘文件丢失，而且最大的缺点是如果不是你的U盘，人家可能不会照顾你，不一定就是Fat32/exFat格式。\n* 第二种简单粗暴，貌似问题很少。缺点就是花钱。\n* 第三种比较不推荐，主要是如果涉及的非MAC机器太多，那也太麻烦了，还不如第二种花钱方案。但是好处是非常稳定，比如对于windows平台，兼容性极佳，各种格式都可以通吃。\n\n整体来看，如果为了踏实使用，让MAC支持NTFS是最好的方案。\n\n幸好，经过查询和试用，发现了一种免费的方案，让MAC原生支持NTFS。\n\n据说，MAC本身就支持NTFS的，只不过算是技术屏蔽了而已。\n\n## 让MAC原生支持NTFS格式U盘\n\n> 原文有一阵打不开了，不知道什么原因。原文[见此](http://bbs.feng.com/read-htm-tid-9932031.html)。\n\n### 方法步骤：\n\n我自己整理的方案，与上文有出入。\n\n**1. 插入设备（u盘）**\n\n**2. 在桌面上查看U盘的卷标（就是刚刚多出的硬盘标志的名字啦），这个记下来**\n\n当然，如果不显示或者其他问题，也可以通过终端中输入 `diskutil list`\n\n返回内容有多段，一般参考最后一段，如下：\n\n```\n/dev/disk2 (external, physical):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:     FDisk_partition_scheme                        *62.1 GB    disk2\n   1:               Windows_NTFS KINGSTON                62.1 GB    disk2s1\n```\n\n看最后一条，是ntfs格式的u盘，他的name是`KINGSTON`，这个名字就是卷标。\n\n**3. 打开配置文件，将卷标写入。**\n\n终端中输入 `sudo nano /etc/fstab`。当然，你愿意用vim也可以啦~ `nano` 换成 `vim` 就行。\n\n注意，这个文件 `fstab` 可能不存在，那就自己创建就好。\n\n打开文件后，新增加一行，写入如下内容：\n\n```\nLABEL=KINGSTON none ntfs rw,auto,nobrowse\n```\n\n这里的`KINGSTON`换成你的卷标就好。如果下次还要有新的设备，那么在加入一行就行。\n\n按照原文所说，如果你的卷标如果是`ABC DEFG`这种带有空格的话，那么这里要写成`ABC\\040DEFG`，就是用`\\040`代表空格。\n\n至于含义，我也不懂，粘贴如下：\n\n>后面的ntfs rw表示把这个分区挂载为可读写的ntfs格式\n>\n>最后nobrowse非常重要，因为这个代表了在finder里不显示这个分区，这个选项非常重要，如果不打开的话挂载是不会成功的。\n\n最后，保存文件。\n\n用nano打开的，按`Ctrl+X`关闭，会提示保存，按`y`即可保存。\n\n用vim打开的，按下`ESC`，输入`:wq`即可。\n\n**4. 重新插拔U盘，这步是必须的**\n\n**5. 进入U盘目录**\n\n这步还说？对，这步还真得说下。因为上文配置的原因，他是**不出现**在桌面的。那怎么找打它？\n\n右键点击 `Finder`，选择 `前往文件夹`，输入 `/Volumes`，进入磁盘目录。我想你会看到刚才的卷标的这个文件夹。比如我的是`KINGSTON`。\n\n## 题外话\n\n原文作者还给出了制作快捷方式的命令行方法，当然也给出了`直接将u盘目录拖拽`的快捷方式方法。\n\n我推荐就是拖拽，所以不给出命令了。\n\n虽然步骤有好几步，但是整体操作很简单，而且一个卷标看样子只需要一次就行了。如果固定几个u盘，那么一旦设置好，还是很方便的。\n\n此方法最主要是免费，而且配置好就省心了，唯独就是没有测试，没有卷标的情况。在终端中查阅卷标就会显示空，此情况目前还没尝试过。所以建议还是有个卷标比较好。\n\n用了这么多年U盘，从来不用卷标，现在终于知道重要性了。","source":"_posts/2017/2017-04-22-mac-use-ntfs.md","raw":"---\nlayout: post\ntitle: \"苹果MAC系统读写NTFS格式u盘硬盘方法\"\ndate: 2017-04-22 16:04:00 GMT+0800\ncategories: [技术]\ntags:  [MAC,NFTS,U盘]\n---\n\n平时用U盘传数据时候，如果是windows或者linux，一般不会有问题，但是如果要从MAC下拷文件，那基本上就会遇到无法写入NTFS格式U盘的问题。\n\n<!-- more -->\n\n解决方案无非就三种：\n\n* 更换U盘格式，比如Fat32，或者exFat格式。\n* 花钱，购买苹果软件，让MAC支持NTFS。\n* 更换U盘格式，变成苹果的HFS格式。给Windows/linux都安装支持软件。\n\n这三种方案：\n\n* 第一种最省事，全平台兼容。但是据说MAC下操作可能会导致U盘文件丢失，而且最大的缺点是如果不是你的U盘，人家可能不会照顾你，不一定就是Fat32/exFat格式。\n* 第二种简单粗暴，貌似问题很少。缺点就是花钱。\n* 第三种比较不推荐，主要是如果涉及的非MAC机器太多，那也太麻烦了，还不如第二种花钱方案。但是好处是非常稳定，比如对于windows平台，兼容性极佳，各种格式都可以通吃。\n\n整体来看，如果为了踏实使用，让MAC支持NTFS是最好的方案。\n\n幸好，经过查询和试用，发现了一种免费的方案，让MAC原生支持NTFS。\n\n据说，MAC本身就支持NTFS的，只不过算是技术屏蔽了而已。\n\n## 让MAC原生支持NTFS格式U盘\n\n> 原文有一阵打不开了，不知道什么原因。原文[见此](http://bbs.feng.com/read-htm-tid-9932031.html)。\n\n### 方法步骤：\n\n我自己整理的方案，与上文有出入。\n\n**1. 插入设备（u盘）**\n\n**2. 在桌面上查看U盘的卷标（就是刚刚多出的硬盘标志的名字啦），这个记下来**\n\n当然，如果不显示或者其他问题，也可以通过终端中输入 `diskutil list`\n\n返回内容有多段，一般参考最后一段，如下：\n\n```\n/dev/disk2 (external, physical):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:     FDisk_partition_scheme                        *62.1 GB    disk2\n   1:               Windows_NTFS KINGSTON                62.1 GB    disk2s1\n```\n\n看最后一条，是ntfs格式的u盘，他的name是`KINGSTON`，这个名字就是卷标。\n\n**3. 打开配置文件，将卷标写入。**\n\n终端中输入 `sudo nano /etc/fstab`。当然，你愿意用vim也可以啦~ `nano` 换成 `vim` 就行。\n\n注意，这个文件 `fstab` 可能不存在，那就自己创建就好。\n\n打开文件后，新增加一行，写入如下内容：\n\n```\nLABEL=KINGSTON none ntfs rw,auto,nobrowse\n```\n\n这里的`KINGSTON`换成你的卷标就好。如果下次还要有新的设备，那么在加入一行就行。\n\n按照原文所说，如果你的卷标如果是`ABC DEFG`这种带有空格的话，那么这里要写成`ABC\\040DEFG`，就是用`\\040`代表空格。\n\n至于含义，我也不懂，粘贴如下：\n\n>后面的ntfs rw表示把这个分区挂载为可读写的ntfs格式\n>\n>最后nobrowse非常重要，因为这个代表了在finder里不显示这个分区，这个选项非常重要，如果不打开的话挂载是不会成功的。\n\n最后，保存文件。\n\n用nano打开的，按`Ctrl+X`关闭，会提示保存，按`y`即可保存。\n\n用vim打开的，按下`ESC`，输入`:wq`即可。\n\n**4. 重新插拔U盘，这步是必须的**\n\n**5. 进入U盘目录**\n\n这步还说？对，这步还真得说下。因为上文配置的原因，他是**不出现**在桌面的。那怎么找打它？\n\n右键点击 `Finder`，选择 `前往文件夹`，输入 `/Volumes`，进入磁盘目录。我想你会看到刚才的卷标的这个文件夹。比如我的是`KINGSTON`。\n\n## 题外话\n\n原文作者还给出了制作快捷方式的命令行方法，当然也给出了`直接将u盘目录拖拽`的快捷方式方法。\n\n我推荐就是拖拽，所以不给出命令了。\n\n虽然步骤有好几步，但是整体操作很简单，而且一个卷标看样子只需要一次就行了。如果固定几个u盘，那么一旦设置好，还是很方便的。\n\n此方法最主要是免费，而且配置好就省心了，唯独就是没有测试，没有卷标的情况。在终端中查阅卷标就会显示空，此情况目前还没尝试过。所以建议还是有个卷标比较好。\n\n用了这么多年U盘，从来不用卷标，现在终于知道重要性了。","slug":"2017-2017-04-22-mac-use-ntfs","published":1,"updated":"2020-03-06T01:20:00.651Z","comments":1,"photos":[],"link":"","_id":"cka5ik8b8002enybg7daxsc6s","content":"<p>平时用U盘传数据时候，如果是windows或者linux，一般不会有问题，但是如果要从MAC下拷文件，那基本上就会遇到无法写入NTFS格式U盘的问题。</p>\n<a id=\"more\"></a>\n\n<p>解决方案无非就三种：</p>\n<ul>\n<li>更换U盘格式，比如Fat32，或者exFat格式。</li>\n<li>花钱，购买苹果软件，让MAC支持NTFS。</li>\n<li>更换U盘格式，变成苹果的HFS格式。给Windows/linux都安装支持软件。</li>\n</ul>\n<p>这三种方案：</p>\n<ul>\n<li>第一种最省事，全平台兼容。但是据说MAC下操作可能会导致U盘文件丢失，而且最大的缺点是如果不是你的U盘，人家可能不会照顾你，不一定就是Fat32/exFat格式。</li>\n<li>第二种简单粗暴，貌似问题很少。缺点就是花钱。</li>\n<li>第三种比较不推荐，主要是如果涉及的非MAC机器太多，那也太麻烦了，还不如第二种花钱方案。但是好处是非常稳定，比如对于windows平台，兼容性极佳，各种格式都可以通吃。</li>\n</ul>\n<p>整体来看，如果为了踏实使用，让MAC支持NTFS是最好的方案。</p>\n<p>幸好，经过查询和试用，发现了一种免费的方案，让MAC原生支持NTFS。</p>\n<p>据说，MAC本身就支持NTFS的，只不过算是技术屏蔽了而已。</p>\n<h2 id=\"让MAC原生支持NTFS格式U盘\"><a href=\"#让MAC原生支持NTFS格式U盘\" class=\"headerlink\" title=\"让MAC原生支持NTFS格式U盘\"></a>让MAC原生支持NTFS格式U盘</h2><blockquote>\n<p>原文有一阵打不开了，不知道什么原因。原文<a href=\"http://bbs.feng.com/read-htm-tid-9932031.html\" target=\"_blank\" rel=\"noopener\">见此</a>。</p>\n</blockquote>\n<h3 id=\"方法步骤：\"><a href=\"#方法步骤：\" class=\"headerlink\" title=\"方法步骤：\"></a>方法步骤：</h3><p>我自己整理的方案，与上文有出入。</p>\n<p><strong>1. 插入设备（u盘）</strong></p>\n<p><strong>2. 在桌面上查看U盘的卷标（就是刚刚多出的硬盘标志的名字啦），这个记下来</strong></p>\n<p>当然，如果不显示或者其他问题，也可以通过终端中输入 <code>diskutil list</code></p>\n<p>返回内容有多段，一般参考最后一段，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev/disk2 (external, physical):</span><br><span class=\"line\">   #:                       TYPE NAME                    SIZE       IDENTIFIER</span><br><span class=\"line\">   0:     FDisk_partition_scheme                        *62.1 GB    disk2</span><br><span class=\"line\">   1:               Windows_NTFS KINGSTON                62.1 GB    disk2s1</span><br></pre></td></tr></table></figure>\n\n<p>看最后一条，是ntfs格式的u盘，他的name是<code>KINGSTON</code>，这个名字就是卷标。</p>\n<p><strong>3. 打开配置文件，将卷标写入。</strong></p>\n<p>终端中输入 <code>sudo nano /etc/fstab</code>。当然，你愿意用vim也可以啦~ <code>nano</code> 换成 <code>vim</code> 就行。</p>\n<p>注意，这个文件 <code>fstab</code> 可能不存在，那就自己创建就好。</p>\n<p>打开文件后，新增加一行，写入如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LABEL=KINGSTON none ntfs rw,auto,nobrowse</span><br></pre></td></tr></table></figure>\n\n<p>这里的<code>KINGSTON</code>换成你的卷标就好。如果下次还要有新的设备，那么在加入一行就行。</p>\n<p>按照原文所说，如果你的卷标如果是<code>ABC DEFG</code>这种带有空格的话，那么这里要写成<code>ABC\\040DEFG</code>，就是用<code>\\040</code>代表空格。</p>\n<p>至于含义，我也不懂，粘贴如下：</p>\n<blockquote>\n<p>后面的ntfs rw表示把这个分区挂载为可读写的ntfs格式</p>\n<p>最后nobrowse非常重要，因为这个代表了在finder里不显示这个分区，这个选项非常重要，如果不打开的话挂载是不会成功的。</p>\n</blockquote>\n<p>最后，保存文件。</p>\n<p>用nano打开的，按<code>Ctrl+X</code>关闭，会提示保存，按<code>y</code>即可保存。</p>\n<p>用vim打开的，按下<code>ESC</code>，输入<code>:wq</code>即可。</p>\n<p><strong>4. 重新插拔U盘，这步是必须的</strong></p>\n<p><strong>5. 进入U盘目录</strong></p>\n<p>这步还说？对，这步还真得说下。因为上文配置的原因，他是<strong>不出现</strong>在桌面的。那怎么找打它？</p>\n<p>右键点击 <code>Finder</code>，选择 <code>前往文件夹</code>，输入 <code>/Volumes</code>，进入磁盘目录。我想你会看到刚才的卷标的这个文件夹。比如我的是<code>KINGSTON</code>。</p>\n<h2 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h2><p>原文作者还给出了制作快捷方式的命令行方法，当然也给出了<code>直接将u盘目录拖拽</code>的快捷方式方法。</p>\n<p>我推荐就是拖拽，所以不给出命令了。</p>\n<p>虽然步骤有好几步，但是整体操作很简单，而且一个卷标看样子只需要一次就行了。如果固定几个u盘，那么一旦设置好，还是很方便的。</p>\n<p>此方法最主要是免费，而且配置好就省心了，唯独就是没有测试，没有卷标的情况。在终端中查阅卷标就会显示空，此情况目前还没尝试过。所以建议还是有个卷标比较好。</p>\n<p>用了这么多年U盘，从来不用卷标，现在终于知道重要性了。</p>\n","site":{"data":{}},"excerpt":"<p>平时用U盘传数据时候，如果是windows或者linux，一般不会有问题，但是如果要从MAC下拷文件，那基本上就会遇到无法写入NTFS格式U盘的问题。</p>","more":"<p>解决方案无非就三种：</p>\n<ul>\n<li>更换U盘格式，比如Fat32，或者exFat格式。</li>\n<li>花钱，购买苹果软件，让MAC支持NTFS。</li>\n<li>更换U盘格式，变成苹果的HFS格式。给Windows/linux都安装支持软件。</li>\n</ul>\n<p>这三种方案：</p>\n<ul>\n<li>第一种最省事，全平台兼容。但是据说MAC下操作可能会导致U盘文件丢失，而且最大的缺点是如果不是你的U盘，人家可能不会照顾你，不一定就是Fat32/exFat格式。</li>\n<li>第二种简单粗暴，貌似问题很少。缺点就是花钱。</li>\n<li>第三种比较不推荐，主要是如果涉及的非MAC机器太多，那也太麻烦了，还不如第二种花钱方案。但是好处是非常稳定，比如对于windows平台，兼容性极佳，各种格式都可以通吃。</li>\n</ul>\n<p>整体来看，如果为了踏实使用，让MAC支持NTFS是最好的方案。</p>\n<p>幸好，经过查询和试用，发现了一种免费的方案，让MAC原生支持NTFS。</p>\n<p>据说，MAC本身就支持NTFS的，只不过算是技术屏蔽了而已。</p>\n<h2 id=\"让MAC原生支持NTFS格式U盘\"><a href=\"#让MAC原生支持NTFS格式U盘\" class=\"headerlink\" title=\"让MAC原生支持NTFS格式U盘\"></a>让MAC原生支持NTFS格式U盘</h2><blockquote>\n<p>原文有一阵打不开了，不知道什么原因。原文<a href=\"http://bbs.feng.com/read-htm-tid-9932031.html\" target=\"_blank\" rel=\"noopener\">见此</a>。</p>\n</blockquote>\n<h3 id=\"方法步骤：\"><a href=\"#方法步骤：\" class=\"headerlink\" title=\"方法步骤：\"></a>方法步骤：</h3><p>我自己整理的方案，与上文有出入。</p>\n<p><strong>1. 插入设备（u盘）</strong></p>\n<p><strong>2. 在桌面上查看U盘的卷标（就是刚刚多出的硬盘标志的名字啦），这个记下来</strong></p>\n<p>当然，如果不显示或者其他问题，也可以通过终端中输入 <code>diskutil list</code></p>\n<p>返回内容有多段，一般参考最后一段，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev/disk2 (external, physical):</span><br><span class=\"line\">   #:                       TYPE NAME                    SIZE       IDENTIFIER</span><br><span class=\"line\">   0:     FDisk_partition_scheme                        *62.1 GB    disk2</span><br><span class=\"line\">   1:               Windows_NTFS KINGSTON                62.1 GB    disk2s1</span><br></pre></td></tr></table></figure>\n\n<p>看最后一条，是ntfs格式的u盘，他的name是<code>KINGSTON</code>，这个名字就是卷标。</p>\n<p><strong>3. 打开配置文件，将卷标写入。</strong></p>\n<p>终端中输入 <code>sudo nano /etc/fstab</code>。当然，你愿意用vim也可以啦~ <code>nano</code> 换成 <code>vim</code> 就行。</p>\n<p>注意，这个文件 <code>fstab</code> 可能不存在，那就自己创建就好。</p>\n<p>打开文件后，新增加一行，写入如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LABEL=KINGSTON none ntfs rw,auto,nobrowse</span><br></pre></td></tr></table></figure>\n\n<p>这里的<code>KINGSTON</code>换成你的卷标就好。如果下次还要有新的设备，那么在加入一行就行。</p>\n<p>按照原文所说，如果你的卷标如果是<code>ABC DEFG</code>这种带有空格的话，那么这里要写成<code>ABC\\040DEFG</code>，就是用<code>\\040</code>代表空格。</p>\n<p>至于含义，我也不懂，粘贴如下：</p>\n<blockquote>\n<p>后面的ntfs rw表示把这个分区挂载为可读写的ntfs格式</p>\n<p>最后nobrowse非常重要，因为这个代表了在finder里不显示这个分区，这个选项非常重要，如果不打开的话挂载是不会成功的。</p>\n</blockquote>\n<p>最后，保存文件。</p>\n<p>用nano打开的，按<code>Ctrl+X</code>关闭，会提示保存，按<code>y</code>即可保存。</p>\n<p>用vim打开的，按下<code>ESC</code>，输入<code>:wq</code>即可。</p>\n<p><strong>4. 重新插拔U盘，这步是必须的</strong></p>\n<p><strong>5. 进入U盘目录</strong></p>\n<p>这步还说？对，这步还真得说下。因为上文配置的原因，他是<strong>不出现</strong>在桌面的。那怎么找打它？</p>\n<p>右键点击 <code>Finder</code>，选择 <code>前往文件夹</code>，输入 <code>/Volumes</code>，进入磁盘目录。我想你会看到刚才的卷标的这个文件夹。比如我的是<code>KINGSTON</code>。</p>\n<h2 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h2><p>原文作者还给出了制作快捷方式的命令行方法，当然也给出了<code>直接将u盘目录拖拽</code>的快捷方式方法。</p>\n<p>我推荐就是拖拽，所以不给出命令了。</p>\n<p>虽然步骤有好几步，但是整体操作很简单，而且一个卷标看样子只需要一次就行了。如果固定几个u盘，那么一旦设置好，还是很方便的。</p>\n<p>此方法最主要是免费，而且配置好就省心了，唯独就是没有测试，没有卷标的情况。在终端中查阅卷标就会显示空，此情况目前还没尝试过。所以建议还是有个卷标比较好。</p>\n<p>用了这么多年U盘，从来不用卷标，现在终于知道重要性了。</p>"},{"layout":"post","title":"js array数组方法整理总结","date":"2017-05-22T11:40:00.000Z","_content":"\n之前学习使用了`[].reduce()`方法，觉得非常好用。也知道数组有很多方法，比如数组迭代遍历，可以实现的方式太多太多了。 而且有的又是返回新数组，而有的却是操作原数组，所以在此总结下。\n\n<!-- more -->\n\n**本文注意：**\n\n* 如果使用ES6的箭头函数写法，函数内 `this` 永远指代函数上一级的环境上下文。\n* 本文在 js 非严格模式下执行。严格模式下，部分的 `this` 为 `undifined`。\n\n## 数组迭代\n\n> 数组遍历方法均支持2个参数，第一个为迭代方法，第二个为 this 指向。不指定 this 的话，默认为 window 。\n\n### Array.prototype.forEach()\n\n* 数组遍历\n* 遍历每一个值\n* 遍历迭代函数无返回值\n* 无返回值\n\n```js\nvar arr = ['aab', 'aac', 'aad', 'bbc', 'bbd'];\nvar result = arr.forEach(function(value, index, _this){\n    // 此时 this === window\n    console.log(value, index, _this);\n    // aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // aac 1 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // aad 2 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // bbc 3 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // bbd 4 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n});\nconsole.log(result);\n// undefined\n```\n\n### Array.prototype.every()\n\n* 数组遍历\n* 至少遍历一个值\n* 遍历迭代函数须有返回值\n* 检查每一个值是否能通过函数，如果有一个不符合，则立刻停止遍历，返回 `false`，如果所有数值均符合，则返回 `true`\n* 有返回值\n\n```js\nvar arr = ['aab', 'aac', 'aad', 'bbc', 'bbd'];\nvar result = arr.every(function(value, index, _this){\n    // 此时 this === 'for this'\n    console.log(value, index, _this);\n    // aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // aac 1 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // aad 2 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // bbc 3 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // bbd 4 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    return 'string' === typeof value;\n},'for this');\nconsole.log(result);\n// true\n```\n\n### Array.prototype.some()\n\n* 数组遍历\n* 至少遍历一个值\n* 遍历迭代函数须有返回值\n* 检查每一个值是否能通过函数，如果有一个符合，则立刻停止遍历，返回 `true`，如果所有数值均不符合，则返回 `false`\n* 有返回值\n\n```js\nvar arr = ['aab', 'aac', 'aad', 'bbc', 'bbd'];\nvar result = arr.some(function(value, index, _this){\n    // 此时 this === 'for this'\n    console.log(value, index, _this);\n    // aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // 由于第一轮符合要求，则不进行后续遍历\n    return 'string' === typeof value;\n},'for this');\nconsole.log(result);\n// true\n```\n\n### Array.prototype.map()\n\n* 数组遍历\n* 遍历每一个值\n* 遍历迭代函数须有返回值\n* 遍历数组每一个值，并将迭代函数返回值放入新数组\n* 有返回值\n\n```js\nvar arr = ['aab', 'aac', 'aad', 'bbc', 'bbd'];\n\nvar result = arr.map(function(value, index, _this){\n    console.log(value, index, _this);\n    // aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // aac 1 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // aad 2 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // bbc 3 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // bbd 4 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    return value + value;\n});\nconsole.log(result);\n// [\"aabaab\", \"aacaac\", \"aadaad\", \"bbcbbc\", \"bbdbbd\"]\nconsole.log(arr);\n// [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n```\n\n### Array.prototype.filter()\n\n* 数组遍历\n* 遍历每一个值\n* 遍历迭代函数须有返回值\n* 遍历数组每一个值，并根据迭代函数返回值放入新数组\n* 有返回值\n\n```js\nvar arr = [2, 4, 6, 8, 10];\nvar result = arr.filter(function(value, index, _this){\n    console.log(value, index, _this);\n    // 2 0 [2, 4, 6, 8, 10]\n    // ...\n    return value > 5;\n});\nconsole.log(result);\n// [6, 8, 10]\nconsole.log(arr);\n// [2, 4, 6, 8, 10]\n```\n\n### Array.prototype.reduce() / Array.prototype.reduceRight()\n\n* 数组遍历\n* 遍历每一个值\n* 遍历迭代函数须有返回值\n* 有返回值\n\n这个我自己太熟了。真的熟的都不想写了~\n\n最常见的应用就是数字叠加求和。\n\n```js\nvar arr = [2, 5, 8, 9];\nvar result = arr.reduce(function(cur,next,index,_this){\n    // this === window\n    console.log(cur, next, index, _this);\n    // 4  2 0 [2, 5, 8, 9]\n    // 6  5 1 [2, 5, 8, 9]\n    // 11 8 2 [2, 5, 8, 9]\n    // 19 9 3 [2, 5, 8, 9]\n    return cur + next; // 将本轮初始值加上本轮遍历值 本轮迭代后的返回值，将作为下轮迭代的初始值\n},4); // 初始值为4 \nconsole.log(result);\n// 28 (4+2+5+8+9)\n```\n\n## 数组编辑\n\n### Array.prototype.unshift()\n\n* 数组开头插入\n* 有返回值（数组长度）\n* 改变原数组\n\n```js\nvar arr = ['aa', 'bb', 'cc', 'dd'];\nvar result = arr.unshift(11, 12);\nconsole.log(arr, result);\n// [11, 12, \"aa\", \"bb\", \"cc\", \"dd\"] 6\n```\n\n### Array.prototype.shift() \n\n* 数组开头删除\n* 有返回值（数组的第一个值）\n* 改变原数组\n\n```js\nvar arr = ['aa', 'bb', 'cc', 'dd'];\nvar result = arr.shift();\nconsole.log(arr, result);\n// [\"bb\", \"cc\", \"dd\"] \"aa\"\n```\n\n### Array.prototype.push() \n\n* 数组结尾插入\n* 有返回值（数组长度）\n* 改变原数组\n\n```js\nvar arr = ['aa', 'bb', 'cc', 'dd'];\nvar result = arr.push(21, 22);\nconsole.log(arr, result);\n// [\"aa\", \"bb\", \"cc\", \"dd\", 21, 22] 6\n```\n\n### Array.prototype.pop()\n\n* 数组结尾删除\n* 有返回值（数组的最后一个值）\n* 改变原数组\n\n```js\nvar arr = ['aa', 'bb', 'cc', 'dd'];\nvar result = arr.pop();\nconsole.log(arr, result);\n// [\"aa\", \"bb\", \"cc\"] \"dd\"\n```\n\n### Array.prototype.concat()\n* 数组合并（不展开数组）\n* 有返回值\n\n```js\nvar arr1 = [1, 2, 3];\nvar arr2 = ['a','b',['c1','c2']];\nvar result = arr1.concat(arr2);\nconsole.log(result);\n// [1, 2, 3, \"a\", \"b\", [\"c1\", \"c2\"]]\nconsole.log(arr1);\n// [1, 2, 3]\nconsole.log(arr2);\n// [\"a\", \"b\", [\"c1\", \"c2\"]]\n```\n\n### Array.prototype.fill()\n\n* 数组填充\n* 改变原数组\n* 返回改变后的数组\n\n```js\nvar arr = [1, 2, 3]\nvar result = arr.fill('a', 1, 2); // 填充'a'，从1位到2位，不含第2位\nconsole.log(result);\n// [1, \"a\", 3]\nconsole.log(arr);\n// [1, \"a\", 3]\n```\n\n### Array.prototype.splice()\n\n* 数组删除\n* 数组插入数据\n* 操作原数组\n* 有返回值\n\n```js\nvar arr = ['aab', 'aac', 'aad', 'bbc', 'bbd'];\n\nvar result = arr.splice(2, 1); // 从2号位置，删除1个。\nconsole.log(arr, result);\n// [\"aab\", \"aac\", \"bbc\", \"bbd\"] [\"aad\"]\n\nvar result2 = arr.splice(2, 0, 'test', 'test2'); // 从2号位置，删除0个，并在此位置增加test和test2\nconsole.log(arr, result2);\n// [\"aab\", \"aac\", \"test\", \"test2\", \"bbc\", \"bbd\"] []\n```\n\n### Array.prototype.slice()\n\n* 选取元素\n* 有返回值\n\n```js\nvar arr = ['aab', 'aac', 'aad', 'bbc', 'bbd'];\nvar result = arr.slice(2, 4); // 从2号位置，选取到4号位置（不含4号）\nconsole.log(arr, result);\n// [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"] [\"aad\", \"bbc\"]\n```\n\n我觉得\b最常见的用法是用于数组复制，或者在函数内将 `arguments` 转为数组：\n\n```\nvar arr = [1,2,3,4];\nvar copies = arr.slice(0);\nconsole.log(copies);\n\nvar fn = function(){\n    var args = [].slice.call(arguments,0);\n    console.log(args);\n}\nfn(1,2,3,4);\n```\n\n## 数组查找定位元素\n\n### Array.prototype.find()\n* 查找符合要求的第一个元素值\n* 传入查找函数\n* 支持传入this指向\n\n```js\nvar arr = [3, 9, 12, 18];\nvar result = arr.find((v) => {\n    return v > 10;\n});\nconsole.log(result);\n//12\n```\n\n### Array.prototype.findIndex()\n* 查找符合要求的第一个元素的索引值\n* 传入查找函数\n* 支持传入this指向\n\n```js\nvar arr = [3, 9, 12, 18];\nvar result = arr.findIndex((v) => {\n    return v > 10;\n});\nconsole.log(result);\n// 2\n```\n\n### Array.prototype.includes()\n* 查找元素是否存在\n\n```js\nvar arr = [3, 9, 12, 18, 22, 35];\nvar result = arr.includes(12, 4);\nconsole.log(result);\n// false\n```\n\n### Array.prototype.indexOf() / Array.prototype.lastIndexOf()\n* 查找元素的索引值\n\n```js\nvar arr = [3, 9, 12, 18, 22, 35];\nvar result = arr.indexOf(12, 1);\nconsole.log(result);\n// 2\n```\n\n## 数组排序\n\n### Array.prototype.sort() \n* 正向排序\n* 支持传入排序函数\n* 排序函数必须有返回值\n* 修改原数组\n* 有返回值，为排序后结果\n\n```js\nvar arr = [{name:'jason',value:1},{name:'john',value:0}]\nvar result = arr.sort(function(a, b){\n   return a.value - b.value;\n});\nconsole.log(result);\n// [{name:'john',value:0},{name:'jason',value:1}]\nconsole.log(arr);\n// [{name:'john',value:0},{name:'jason',value:1}]\n```\n\n### Array.prototype.reverse()\n\n* 反向排序\n* 不支持传函数\n* 直接修改数组\n* 有返回值（修改后的数组）\n\n## 其他\n\n### Array.prototype.join()\n\n* 数组数据拼合\n\n```js\nvar arr = ['aa', 'bb', 'cc'];\nvar result = arr.join('-');\nconsole.log(result);\n// aa-bb-cc\n```\n\n\n### Array.prototype.keys() / Array.prototype.values() / Array.prototype.entries()\n\n* 获取数组key / value\n* 有返回值（迭代器）\n\n```js\nvar arr = ['aab', 'aac', 'aad', 'bbc', 'bbd'];\n\nvar keys = arr.keys();\nfor (let k of keys){\n    //迭代器只能用 for of，for in 事遍历不了的\n    console.log(k);\n    // 0\n    // 1\n    // 2\n    // 3\n    // 4\n    // 5\n}\n\nvar entries = arr.entries();\nfor (let k of entries){\n    console.log(k);\n    // [0, \"aab\"]\n    // [1, \"aac\"]\n    // [2, \"aad\"]\n    // [3, \"bbc\"]\n    // [4, \"bbd\"]\n}\n```\n\n## 小结\n\n| 类型 | 方法 | 无返回 | 返回非数组结果 | 返回新数组 | 操作原数组 | 备注 |\n|---|---|:---:|:---:|:---:|:---:|:---:|\n| 迭代  | forEach       | O |   |   |   |   |\n| 迭代  | every         |   | O |   |   |   |\n| 迭代  | some          |   | O |   |   |   |\n| 迭代  | map           |   |   | O |   |   |\n| 迭代  | filter        |   |   | O |   |   |\n| 迭代  | reduce        |   | O |   |   |   |\n| 迭代  | reduceRight   |   | O |   |   |   |\n| 编辑  | unshift       |   | O |   | O | 修改原数组，返回长度 |\n| 编辑  | shift         |   | O |   | O | 修改原数组，返回其中一个值 |\n| 编辑  | push          |   | O |   | O | 修改原数组，返回长度 |\n| 编辑  | pop           |   | O |   | O | 修改原数组，返回其中一个值 |\n| 编辑  | concat        |   |   | O |   |   |\n| 编辑  | fill          |   |   | O | O | 修改原数组，并返回该数组 |\n| 编辑  | splice        |   |   | O | O | 原数组被修剪，返回修剪内容 |\n| 编辑  | slice         |   |   | O |   |   |\n| 查找  | find<br>findIndex<br>includes<br>lastIndexOf |   | O |   |   |   |\n| 排序  | sort          |   |   |   | O |   |\n| 排序  | reverse       |   |   |   | O |   |\n\n\n\n\n\n","source":"_posts/2017/2017-05-22-js-array.md","raw":"---\nlayout: post\ntitle: \"js array数组方法整理总结\"\ndate: 2017-05-22 11:40:00 GMT+0800\ncategories: [前端]\ntags:  [array]\n---\n\n之前学习使用了`[].reduce()`方法，觉得非常好用。也知道数组有很多方法，比如数组迭代遍历，可以实现的方式太多太多了。 而且有的又是返回新数组，而有的却是操作原数组，所以在此总结下。\n\n<!-- more -->\n\n**本文注意：**\n\n* 如果使用ES6的箭头函数写法，函数内 `this` 永远指代函数上一级的环境上下文。\n* 本文在 js 非严格模式下执行。严格模式下，部分的 `this` 为 `undifined`。\n\n## 数组迭代\n\n> 数组遍历方法均支持2个参数，第一个为迭代方法，第二个为 this 指向。不指定 this 的话，默认为 window 。\n\n### Array.prototype.forEach()\n\n* 数组遍历\n* 遍历每一个值\n* 遍历迭代函数无返回值\n* 无返回值\n\n```js\nvar arr = ['aab', 'aac', 'aad', 'bbc', 'bbd'];\nvar result = arr.forEach(function(value, index, _this){\n    // 此时 this === window\n    console.log(value, index, _this);\n    // aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // aac 1 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // aad 2 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // bbc 3 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // bbd 4 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n});\nconsole.log(result);\n// undefined\n```\n\n### Array.prototype.every()\n\n* 数组遍历\n* 至少遍历一个值\n* 遍历迭代函数须有返回值\n* 检查每一个值是否能通过函数，如果有一个不符合，则立刻停止遍历，返回 `false`，如果所有数值均符合，则返回 `true`\n* 有返回值\n\n```js\nvar arr = ['aab', 'aac', 'aad', 'bbc', 'bbd'];\nvar result = arr.every(function(value, index, _this){\n    // 此时 this === 'for this'\n    console.log(value, index, _this);\n    // aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // aac 1 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // aad 2 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // bbc 3 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // bbd 4 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    return 'string' === typeof value;\n},'for this');\nconsole.log(result);\n// true\n```\n\n### Array.prototype.some()\n\n* 数组遍历\n* 至少遍历一个值\n* 遍历迭代函数须有返回值\n* 检查每一个值是否能通过函数，如果有一个符合，则立刻停止遍历，返回 `true`，如果所有数值均不符合，则返回 `false`\n* 有返回值\n\n```js\nvar arr = ['aab', 'aac', 'aad', 'bbc', 'bbd'];\nvar result = arr.some(function(value, index, _this){\n    // 此时 this === 'for this'\n    console.log(value, index, _this);\n    // aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // 由于第一轮符合要求，则不进行后续遍历\n    return 'string' === typeof value;\n},'for this');\nconsole.log(result);\n// true\n```\n\n### Array.prototype.map()\n\n* 数组遍历\n* 遍历每一个值\n* 遍历迭代函数须有返回值\n* 遍历数组每一个值，并将迭代函数返回值放入新数组\n* 有返回值\n\n```js\nvar arr = ['aab', 'aac', 'aad', 'bbc', 'bbd'];\n\nvar result = arr.map(function(value, index, _this){\n    console.log(value, index, _this);\n    // aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // aac 1 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // aad 2 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // bbc 3 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    // bbd 4 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n    return value + value;\n});\nconsole.log(result);\n// [\"aabaab\", \"aacaac\", \"aadaad\", \"bbcbbc\", \"bbdbbd\"]\nconsole.log(arr);\n// [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]\n```\n\n### Array.prototype.filter()\n\n* 数组遍历\n* 遍历每一个值\n* 遍历迭代函数须有返回值\n* 遍历数组每一个值，并根据迭代函数返回值放入新数组\n* 有返回值\n\n```js\nvar arr = [2, 4, 6, 8, 10];\nvar result = arr.filter(function(value, index, _this){\n    console.log(value, index, _this);\n    // 2 0 [2, 4, 6, 8, 10]\n    // ...\n    return value > 5;\n});\nconsole.log(result);\n// [6, 8, 10]\nconsole.log(arr);\n// [2, 4, 6, 8, 10]\n```\n\n### Array.prototype.reduce() / Array.prototype.reduceRight()\n\n* 数组遍历\n* 遍历每一个值\n* 遍历迭代函数须有返回值\n* 有返回值\n\n这个我自己太熟了。真的熟的都不想写了~\n\n最常见的应用就是数字叠加求和。\n\n```js\nvar arr = [2, 5, 8, 9];\nvar result = arr.reduce(function(cur,next,index,_this){\n    // this === window\n    console.log(cur, next, index, _this);\n    // 4  2 0 [2, 5, 8, 9]\n    // 6  5 1 [2, 5, 8, 9]\n    // 11 8 2 [2, 5, 8, 9]\n    // 19 9 3 [2, 5, 8, 9]\n    return cur + next; // 将本轮初始值加上本轮遍历值 本轮迭代后的返回值，将作为下轮迭代的初始值\n},4); // 初始值为4 \nconsole.log(result);\n// 28 (4+2+5+8+9)\n```\n\n## 数组编辑\n\n### Array.prototype.unshift()\n\n* 数组开头插入\n* 有返回值（数组长度）\n* 改变原数组\n\n```js\nvar arr = ['aa', 'bb', 'cc', 'dd'];\nvar result = arr.unshift(11, 12);\nconsole.log(arr, result);\n// [11, 12, \"aa\", \"bb\", \"cc\", \"dd\"] 6\n```\n\n### Array.prototype.shift() \n\n* 数组开头删除\n* 有返回值（数组的第一个值）\n* 改变原数组\n\n```js\nvar arr = ['aa', 'bb', 'cc', 'dd'];\nvar result = arr.shift();\nconsole.log(arr, result);\n// [\"bb\", \"cc\", \"dd\"] \"aa\"\n```\n\n### Array.prototype.push() \n\n* 数组结尾插入\n* 有返回值（数组长度）\n* 改变原数组\n\n```js\nvar arr = ['aa', 'bb', 'cc', 'dd'];\nvar result = arr.push(21, 22);\nconsole.log(arr, result);\n// [\"aa\", \"bb\", \"cc\", \"dd\", 21, 22] 6\n```\n\n### Array.prototype.pop()\n\n* 数组结尾删除\n* 有返回值（数组的最后一个值）\n* 改变原数组\n\n```js\nvar arr = ['aa', 'bb', 'cc', 'dd'];\nvar result = arr.pop();\nconsole.log(arr, result);\n// [\"aa\", \"bb\", \"cc\"] \"dd\"\n```\n\n### Array.prototype.concat()\n* 数组合并（不展开数组）\n* 有返回值\n\n```js\nvar arr1 = [1, 2, 3];\nvar arr2 = ['a','b',['c1','c2']];\nvar result = arr1.concat(arr2);\nconsole.log(result);\n// [1, 2, 3, \"a\", \"b\", [\"c1\", \"c2\"]]\nconsole.log(arr1);\n// [1, 2, 3]\nconsole.log(arr2);\n// [\"a\", \"b\", [\"c1\", \"c2\"]]\n```\n\n### Array.prototype.fill()\n\n* 数组填充\n* 改变原数组\n* 返回改变后的数组\n\n```js\nvar arr = [1, 2, 3]\nvar result = arr.fill('a', 1, 2); // 填充'a'，从1位到2位，不含第2位\nconsole.log(result);\n// [1, \"a\", 3]\nconsole.log(arr);\n// [1, \"a\", 3]\n```\n\n### Array.prototype.splice()\n\n* 数组删除\n* 数组插入数据\n* 操作原数组\n* 有返回值\n\n```js\nvar arr = ['aab', 'aac', 'aad', 'bbc', 'bbd'];\n\nvar result = arr.splice(2, 1); // 从2号位置，删除1个。\nconsole.log(arr, result);\n// [\"aab\", \"aac\", \"bbc\", \"bbd\"] [\"aad\"]\n\nvar result2 = arr.splice(2, 0, 'test', 'test2'); // 从2号位置，删除0个，并在此位置增加test和test2\nconsole.log(arr, result2);\n// [\"aab\", \"aac\", \"test\", \"test2\", \"bbc\", \"bbd\"] []\n```\n\n### Array.prototype.slice()\n\n* 选取元素\n* 有返回值\n\n```js\nvar arr = ['aab', 'aac', 'aad', 'bbc', 'bbd'];\nvar result = arr.slice(2, 4); // 从2号位置，选取到4号位置（不含4号）\nconsole.log(arr, result);\n// [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"] [\"aad\", \"bbc\"]\n```\n\n我觉得\b最常见的用法是用于数组复制，或者在函数内将 `arguments` 转为数组：\n\n```\nvar arr = [1,2,3,4];\nvar copies = arr.slice(0);\nconsole.log(copies);\n\nvar fn = function(){\n    var args = [].slice.call(arguments,0);\n    console.log(args);\n}\nfn(1,2,3,4);\n```\n\n## 数组查找定位元素\n\n### Array.prototype.find()\n* 查找符合要求的第一个元素值\n* 传入查找函数\n* 支持传入this指向\n\n```js\nvar arr = [3, 9, 12, 18];\nvar result = arr.find((v) => {\n    return v > 10;\n});\nconsole.log(result);\n//12\n```\n\n### Array.prototype.findIndex()\n* 查找符合要求的第一个元素的索引值\n* 传入查找函数\n* 支持传入this指向\n\n```js\nvar arr = [3, 9, 12, 18];\nvar result = arr.findIndex((v) => {\n    return v > 10;\n});\nconsole.log(result);\n// 2\n```\n\n### Array.prototype.includes()\n* 查找元素是否存在\n\n```js\nvar arr = [3, 9, 12, 18, 22, 35];\nvar result = arr.includes(12, 4);\nconsole.log(result);\n// false\n```\n\n### Array.prototype.indexOf() / Array.prototype.lastIndexOf()\n* 查找元素的索引值\n\n```js\nvar arr = [3, 9, 12, 18, 22, 35];\nvar result = arr.indexOf(12, 1);\nconsole.log(result);\n// 2\n```\n\n## 数组排序\n\n### Array.prototype.sort() \n* 正向排序\n* 支持传入排序函数\n* 排序函数必须有返回值\n* 修改原数组\n* 有返回值，为排序后结果\n\n```js\nvar arr = [{name:'jason',value:1},{name:'john',value:0}]\nvar result = arr.sort(function(a, b){\n   return a.value - b.value;\n});\nconsole.log(result);\n// [{name:'john',value:0},{name:'jason',value:1}]\nconsole.log(arr);\n// [{name:'john',value:0},{name:'jason',value:1}]\n```\n\n### Array.prototype.reverse()\n\n* 反向排序\n* 不支持传函数\n* 直接修改数组\n* 有返回值（修改后的数组）\n\n## 其他\n\n### Array.prototype.join()\n\n* 数组数据拼合\n\n```js\nvar arr = ['aa', 'bb', 'cc'];\nvar result = arr.join('-');\nconsole.log(result);\n// aa-bb-cc\n```\n\n\n### Array.prototype.keys() / Array.prototype.values() / Array.prototype.entries()\n\n* 获取数组key / value\n* 有返回值（迭代器）\n\n```js\nvar arr = ['aab', 'aac', 'aad', 'bbc', 'bbd'];\n\nvar keys = arr.keys();\nfor (let k of keys){\n    //迭代器只能用 for of，for in 事遍历不了的\n    console.log(k);\n    // 0\n    // 1\n    // 2\n    // 3\n    // 4\n    // 5\n}\n\nvar entries = arr.entries();\nfor (let k of entries){\n    console.log(k);\n    // [0, \"aab\"]\n    // [1, \"aac\"]\n    // [2, \"aad\"]\n    // [3, \"bbc\"]\n    // [4, \"bbd\"]\n}\n```\n\n## 小结\n\n| 类型 | 方法 | 无返回 | 返回非数组结果 | 返回新数组 | 操作原数组 | 备注 |\n|---|---|:---:|:---:|:---:|:---:|:---:|\n| 迭代  | forEach       | O |   |   |   |   |\n| 迭代  | every         |   | O |   |   |   |\n| 迭代  | some          |   | O |   |   |   |\n| 迭代  | map           |   |   | O |   |   |\n| 迭代  | filter        |   |   | O |   |   |\n| 迭代  | reduce        |   | O |   |   |   |\n| 迭代  | reduceRight   |   | O |   |   |   |\n| 编辑  | unshift       |   | O |   | O | 修改原数组，返回长度 |\n| 编辑  | shift         |   | O |   | O | 修改原数组，返回其中一个值 |\n| 编辑  | push          |   | O |   | O | 修改原数组，返回长度 |\n| 编辑  | pop           |   | O |   | O | 修改原数组，返回其中一个值 |\n| 编辑  | concat        |   |   | O |   |   |\n| 编辑  | fill          |   |   | O | O | 修改原数组，并返回该数组 |\n| 编辑  | splice        |   |   | O | O | 原数组被修剪，返回修剪内容 |\n| 编辑  | slice         |   |   | O |   |   |\n| 查找  | find<br>findIndex<br>includes<br>lastIndexOf |   | O |   |   |   |\n| 排序  | sort          |   |   |   | O |   |\n| 排序  | reverse       |   |   |   | O |   |\n\n\n\n\n\n","slug":"2017-2017-05-22-js-array","published":1,"updated":"2020-03-02T07:16:34.641Z","comments":1,"photos":[],"link":"","_id":"cka5ik8ba002hnybgca12ps2c","content":"<p>之前学习使用了<code>[].reduce()</code>方法，觉得非常好用。也知道数组有很多方法，比如数组迭代遍历，可以实现的方式太多太多了。 而且有的又是返回新数组，而有的却是操作原数组，所以在此总结下。</p>\n<a id=\"more\"></a>\n\n<p><strong>本文注意：</strong></p>\n<ul>\n<li>如果使用ES6的箭头函数写法，函数内 <code>this</code> 永远指代函数上一级的环境上下文。</li>\n<li>本文在 js 非严格模式下执行。严格模式下，部分的 <code>this</code> 为 <code>undifined</code>。</li>\n</ul>\n<h2 id=\"数组迭代\"><a href=\"#数组迭代\" class=\"headerlink\" title=\"数组迭代\"></a>数组迭代</h2><blockquote>\n<p>数组遍历方法均支持2个参数，第一个为迭代方法，第二个为 this 指向。不指定 this 的话，默认为 window 。</p>\n</blockquote>\n<h3 id=\"Array-prototype-forEach\"><a href=\"#Array-prototype-forEach\" class=\"headerlink\" title=\"Array.prototype.forEach()\"></a>Array.prototype.forEach()</h3><ul>\n<li>数组遍历</li>\n<li>遍历每一个值</li>\n<li>遍历迭代函数无返回值</li>\n<li>无返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aab'</span>, <span class=\"string\">'aac'</span>, <span class=\"string\">'aad'</span>, <span class=\"string\">'bbc'</span>, <span class=\"string\">'bbd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, _this</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此时 this === window</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value, index, _this);</span><br><span class=\"line\">    <span class=\"comment\">// aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// aac 1 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// aad 2 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// bbc 3 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// bbd 4 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-every\"><a href=\"#Array-prototype-every\" class=\"headerlink\" title=\"Array.prototype.every()\"></a>Array.prototype.every()</h3><ul>\n<li>数组遍历</li>\n<li>至少遍历一个值</li>\n<li>遍历迭代函数须有返回值</li>\n<li>检查每一个值是否能通过函数，如果有一个不符合，则立刻停止遍历，返回 <code>false</code>，如果所有数值均符合，则返回 <code>true</code></li>\n<li>有返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aab'</span>, <span class=\"string\">'aac'</span>, <span class=\"string\">'aad'</span>, <span class=\"string\">'bbc'</span>, <span class=\"string\">'bbd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, _this</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此时 this === 'for this'</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value, index, _this);</span><br><span class=\"line\">    <span class=\"comment\">// aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// aac 1 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// aad 2 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// bbc 3 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// bbd 4 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'string'</span> === <span class=\"keyword\">typeof</span> value;</span><br><span class=\"line\">&#125;,<span class=\"string\">'for this'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-some\"><a href=\"#Array-prototype-some\" class=\"headerlink\" title=\"Array.prototype.some()\"></a>Array.prototype.some()</h3><ul>\n<li>数组遍历</li>\n<li>至少遍历一个值</li>\n<li>遍历迭代函数须有返回值</li>\n<li>检查每一个值是否能通过函数，如果有一个符合，则立刻停止遍历，返回 <code>true</code>，如果所有数值均不符合，则返回 <code>false</code></li>\n<li>有返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aab'</span>, <span class=\"string\">'aac'</span>, <span class=\"string\">'aad'</span>, <span class=\"string\">'bbc'</span>, <span class=\"string\">'bbd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, _this</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此时 this === 'for this'</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value, index, _this);</span><br><span class=\"line\">    <span class=\"comment\">// aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// 由于第一轮符合要求，则不进行后续遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'string'</span> === <span class=\"keyword\">typeof</span> value;</span><br><span class=\"line\">&#125;,<span class=\"string\">'for this'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-map\"><a href=\"#Array-prototype-map\" class=\"headerlink\" title=\"Array.prototype.map()\"></a>Array.prototype.map()</h3><ul>\n<li>数组遍历</li>\n<li>遍历每一个值</li>\n<li>遍历迭代函数须有返回值</li>\n<li>遍历数组每一个值，并将迭代函数返回值放入新数组</li>\n<li>有返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aab'</span>, <span class=\"string\">'aac'</span>, <span class=\"string\">'aad'</span>, <span class=\"string\">'bbc'</span>, <span class=\"string\">'bbd'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, _this</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value, index, _this);</span><br><span class=\"line\">    <span class=\"comment\">// aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// aac 1 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// aad 2 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// bbc 3 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// bbd 4 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value + value;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// [\"aabaab\", \"aacaac\", \"aadaad\", \"bbcbbc\", \"bbdbbd\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-filter\"><a href=\"#Array-prototype-filter\" class=\"headerlink\" title=\"Array.prototype.filter()\"></a>Array.prototype.filter()</h3><ul>\n<li>数组遍历</li>\n<li>遍历每一个值</li>\n<li>遍历迭代函数须有返回值</li>\n<li>遍历数组每一个值，并根据迭代函数返回值放入新数组</li>\n<li>有返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, _this</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value, index, _this);</span><br><span class=\"line\">    <span class=\"comment\">// 2 0 [2, 4, 6, 8, 10]</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value &gt; <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// [6, 8, 10]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-reduce-Array-prototype-reduceRight\"><a href=\"#Array-prototype-reduce-Array-prototype-reduceRight\" class=\"headerlink\" title=\"Array.prototype.reduce() / Array.prototype.reduceRight()\"></a>Array.prototype.reduce() / Array.prototype.reduceRight()</h3><ul>\n<li>数组遍历</li>\n<li>遍历每一个值</li>\n<li>遍历迭代函数须有返回值</li>\n<li>有返回值</li>\n</ul>\n<p>这个我自己太熟了。真的熟的都不想写了~</p>\n<p>最常见的应用就是数字叠加求和。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cur,next,index,_this</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// this === window</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(cur, next, index, _this);</span><br><span class=\"line\">    <span class=\"comment\">// 4  2 0 [2, 5, 8, 9]</span></span><br><span class=\"line\">    <span class=\"comment\">// 6  5 1 [2, 5, 8, 9]</span></span><br><span class=\"line\">    <span class=\"comment\">// 11 8 2 [2, 5, 8, 9]</span></span><br><span class=\"line\">    <span class=\"comment\">// 19 9 3 [2, 5, 8, 9]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cur + next; <span class=\"comment\">// 将本轮初始值加上本轮遍历值 本轮迭代后的返回值，将作为下轮迭代的初始值</span></span><br><span class=\"line\">&#125;,<span class=\"number\">4</span>); <span class=\"comment\">// 初始值为4 </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// 28 (4+2+5+8+9)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组编辑\"><a href=\"#数组编辑\" class=\"headerlink\" title=\"数组编辑\"></a>数组编辑</h2><h3 id=\"Array-prototype-unshift\"><a href=\"#Array-prototype-unshift\" class=\"headerlink\" title=\"Array.prototype.unshift()\"></a>Array.prototype.unshift()</h3><ul>\n<li>数组开头插入</li>\n<li>有返回值（数组长度）</li>\n<li>改变原数组</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aa'</span>, <span class=\"string\">'bb'</span>, <span class=\"string\">'cc'</span>, <span class=\"string\">'dd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.unshift(<span class=\"number\">11</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, result);</span><br><span class=\"line\"><span class=\"comment\">// [11, 12, \"aa\", \"bb\", \"cc\", \"dd\"] 6</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-shift\"><a href=\"#Array-prototype-shift\" class=\"headerlink\" title=\"Array.prototype.shift()\"></a>Array.prototype.shift()</h3><ul>\n<li>数组开头删除</li>\n<li>有返回值（数组的第一个值）</li>\n<li>改变原数组</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aa'</span>, <span class=\"string\">'bb'</span>, <span class=\"string\">'cc'</span>, <span class=\"string\">'dd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.shift();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, result);</span><br><span class=\"line\"><span class=\"comment\">// [\"bb\", \"cc\", \"dd\"] \"aa\"</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-push\"><a href=\"#Array-prototype-push\" class=\"headerlink\" title=\"Array.prototype.push()\"></a>Array.prototype.push()</h3><ul>\n<li>数组结尾插入</li>\n<li>有返回值（数组长度）</li>\n<li>改变原数组</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aa'</span>, <span class=\"string\">'bb'</span>, <span class=\"string\">'cc'</span>, <span class=\"string\">'dd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.push(<span class=\"number\">21</span>, <span class=\"number\">22</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, result);</span><br><span class=\"line\"><span class=\"comment\">// [\"aa\", \"bb\", \"cc\", \"dd\", 21, 22] 6</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-pop\"><a href=\"#Array-prototype-pop\" class=\"headerlink\" title=\"Array.prototype.pop()\"></a>Array.prototype.pop()</h3><ul>\n<li>数组结尾删除</li>\n<li>有返回值（数组的最后一个值）</li>\n<li>改变原数组</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aa'</span>, <span class=\"string\">'bb'</span>, <span class=\"string\">'cc'</span>, <span class=\"string\">'dd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.pop();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, result);</span><br><span class=\"line\"><span class=\"comment\">// [\"aa\", \"bb\", \"cc\"] \"dd\"</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-concat\"><a href=\"#Array-prototype-concat\" class=\"headerlink\" title=\"Array.prototype.concat()\"></a>Array.prototype.concat()</h3><ul>\n<li>数组合并（不展开数组）</li>\n<li>有返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,[<span class=\"string\">'c1'</span>,<span class=\"string\">'c2'</span>]];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr1.concat(arr2);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3, \"a\", \"b\", [\"c1\", \"c2\"]]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1);</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);</span><br><span class=\"line\"><span class=\"comment\">// [\"a\", \"b\", [\"c1\", \"c2\"]]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-fill\"><a href=\"#Array-prototype-fill\" class=\"headerlink\" title=\"Array.prototype.fill()\"></a>Array.prototype.fill()</h3><ul>\n<li>数组填充</li>\n<li>改变原数组</li>\n<li>返回改变后的数组</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.fill(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// 填充'a'，从1位到2位，不含第2位</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// [1, \"a\", 3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// [1, \"a\", 3]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-splice\"><a href=\"#Array-prototype-splice\" class=\"headerlink\" title=\"Array.prototype.splice()\"></a>Array.prototype.splice()</h3><ul>\n<li>数组删除</li>\n<li>数组插入数据</li>\n<li>操作原数组</li>\n<li>有返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aab'</span>, <span class=\"string\">'aac'</span>, <span class=\"string\">'aad'</span>, <span class=\"string\">'bbc'</span>, <span class=\"string\">'bbd'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.splice(<span class=\"number\">2</span>, <span class=\"number\">1</span>); <span class=\"comment\">// 从2号位置，删除1个。</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, result);</span><br><span class=\"line\"><span class=\"comment\">// [\"aab\", \"aac\", \"bbc\", \"bbd\"] [\"aad\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result2 = arr.splice(<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"string\">'test'</span>, <span class=\"string\">'test2'</span>); <span class=\"comment\">// 从2号位置，删除0个，并在此位置增加test和test2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, result2);</span><br><span class=\"line\"><span class=\"comment\">// [\"aab\", \"aac\", \"test\", \"test2\", \"bbc\", \"bbd\"] []</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-slice\"><a href=\"#Array-prototype-slice\" class=\"headerlink\" title=\"Array.prototype.slice()\"></a>Array.prototype.slice()</h3><ul>\n<li>选取元素</li>\n<li>有返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aab'</span>, <span class=\"string\">'aac'</span>, <span class=\"string\">'aad'</span>, <span class=\"string\">'bbc'</span>, <span class=\"string\">'bbd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.slice(<span class=\"number\">2</span>, <span class=\"number\">4</span>); <span class=\"comment\">// 从2号位置，选取到4号位置（不含4号）</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, result);</span><br><span class=\"line\"><span class=\"comment\">// [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"] [\"aad\", \"bbc\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>我觉得\b最常见的用法是用于数组复制，或者在函数内将 <code>arguments</code> 转为数组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1,2,3,4];</span><br><span class=\"line\">var copies = arr.slice(0);</span><br><span class=\"line\">console.log(copies);</span><br><span class=\"line\"></span><br><span class=\"line\">var fn = function()&#123;</span><br><span class=\"line\">    var args = [].slice.call(arguments,0);</span><br><span class=\"line\">    console.log(args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(1,2,3,4);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组查找定位元素\"><a href=\"#数组查找定位元素\" class=\"headerlink\" title=\"数组查找定位元素\"></a>数组查找定位元素</h2><h3 id=\"Array-prototype-find\"><a href=\"#Array-prototype-find\" class=\"headerlink\" title=\"Array.prototype.find()\"></a>Array.prototype.find()</h3><ul>\n<li>查找符合要求的第一个元素值</li>\n<li>传入查找函数</li>\n<li>支持传入this指向</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">18</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.find(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v &gt; <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">//12</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-findIndex\"><a href=\"#Array-prototype-findIndex\" class=\"headerlink\" title=\"Array.prototype.findIndex()\"></a>Array.prototype.findIndex()</h3><ul>\n<li>查找符合要求的第一个元素的索引值</li>\n<li>传入查找函数</li>\n<li>支持传入this指向</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">18</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.findIndex(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v &gt; <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-includes\"><a href=\"#Array-prototype-includes\" class=\"headerlink\" title=\"Array.prototype.includes()\"></a>Array.prototype.includes()</h3><ul>\n<li>查找元素是否存在</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">18</span>, <span class=\"number\">22</span>, <span class=\"number\">35</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.includes(<span class=\"number\">12</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-indexOf-Array-prototype-lastIndexOf\"><a href=\"#Array-prototype-indexOf-Array-prototype-lastIndexOf\" class=\"headerlink\" title=\"Array.prototype.indexOf() / Array.prototype.lastIndexOf()\"></a>Array.prototype.indexOf() / Array.prototype.lastIndexOf()</h3><ul>\n<li>查找元素的索引值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">18</span>, <span class=\"number\">22</span>, <span class=\"number\">35</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.indexOf(<span class=\"number\">12</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组排序\"><a href=\"#数组排序\" class=\"headerlink\" title=\"数组排序\"></a>数组排序</h2><h3 id=\"Array-prototype-sort\"><a href=\"#Array-prototype-sort\" class=\"headerlink\" title=\"Array.prototype.sort()\"></a>Array.prototype.sort()</h3><ul>\n<li>正向排序</li>\n<li>支持传入排序函数</li>\n<li>排序函数必须有返回值</li>\n<li>修改原数组</li>\n<li>有返回值，为排序后结果</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jason'</span>,<span class=\"attr\">value</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">name</span>:<span class=\"string\">'john'</span>,<span class=\"attr\">value</span>:<span class=\"number\">0</span>&#125;]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> a.value - b.value;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// [&#123;name:'john',value:0&#125;,&#123;name:'jason',value:1&#125;]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// [&#123;name:'john',value:0&#125;,&#123;name:'jason',value:1&#125;]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-reverse\"><a href=\"#Array-prototype-reverse\" class=\"headerlink\" title=\"Array.prototype.reverse()\"></a>Array.prototype.reverse()</h3><ul>\n<li>反向排序</li>\n<li>不支持传函数</li>\n<li>直接修改数组</li>\n<li>有返回值（修改后的数组）</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"Array-prototype-join\"><a href=\"#Array-prototype-join\" class=\"headerlink\" title=\"Array.prototype.join()\"></a>Array.prototype.join()</h3><ul>\n<li>数组数据拼合</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aa'</span>, <span class=\"string\">'bb'</span>, <span class=\"string\">'cc'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.join(<span class=\"string\">'-'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// aa-bb-cc</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-keys-Array-prototype-values-Array-prototype-entries\"><a href=\"#Array-prototype-keys-Array-prototype-values-Array-prototype-entries\" class=\"headerlink\" title=\"Array.prototype.keys() / Array.prototype.values() / Array.prototype.entries()\"></a>Array.prototype.keys() / Array.prototype.values() / Array.prototype.entries()</h3><ul>\n<li>获取数组key / value</li>\n<li>有返回值（迭代器）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aab'</span>, <span class=\"string\">'aac'</span>, <span class=\"string\">'aad'</span>, <span class=\"string\">'bbc'</span>, <span class=\"string\">'bbd'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> keys = arr.keys();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> k <span class=\"keyword\">of</span> keys)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//迭代器只能用 for of，for in 事遍历不了的</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(k);</span><br><span class=\"line\">    <span class=\"comment\">// 0</span></span><br><span class=\"line\">    <span class=\"comment\">// 1</span></span><br><span class=\"line\">    <span class=\"comment\">// 2</span></span><br><span class=\"line\">    <span class=\"comment\">// 3</span></span><br><span class=\"line\">    <span class=\"comment\">// 4</span></span><br><span class=\"line\">    <span class=\"comment\">// 5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> entries = arr.entries();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> k <span class=\"keyword\">of</span> entries)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(k);</span><br><span class=\"line\">    <span class=\"comment\">// [0, \"aab\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// [1, \"aac\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// [2, \"aad\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// [3, \"bbc\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// [4, \"bbd\"]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>方法</th>\n<th align=\"center\">无返回</th>\n<th align=\"center\">返回非数组结果</th>\n<th align=\"center\">返回新数组</th>\n<th align=\"center\">操作原数组</th>\n<th align=\"center\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>迭代</td>\n<td>forEach</td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>every</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>some</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>map</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>filter</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>reduce</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>reduceRight</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>unshift</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\">修改原数组，返回长度</td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>shift</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\">修改原数组，返回其中一个值</td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>push</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\">修改原数组，返回长度</td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>pop</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\">修改原数组，返回其中一个值</td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>concat</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>fill</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\">O</td>\n<td align=\"center\">修改原数组，并返回该数组</td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>splice</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\">O</td>\n<td align=\"center\">原数组被修剪，返回修剪内容</td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>slice</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>查找</td>\n<td>find<br>findIndex<br>includes<br>lastIndexOf</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>排序</td>\n<td>sort</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>排序</td>\n<td>reverse</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"<p>之前学习使用了<code>[].reduce()</code>方法，觉得非常好用。也知道数组有很多方法，比如数组迭代遍历，可以实现的方式太多太多了。 而且有的又是返回新数组，而有的却是操作原数组，所以在此总结下。</p>","more":"<p><strong>本文注意：</strong></p>\n<ul>\n<li>如果使用ES6的箭头函数写法，函数内 <code>this</code> 永远指代函数上一级的环境上下文。</li>\n<li>本文在 js 非严格模式下执行。严格模式下，部分的 <code>this</code> 为 <code>undifined</code>。</li>\n</ul>\n<h2 id=\"数组迭代\"><a href=\"#数组迭代\" class=\"headerlink\" title=\"数组迭代\"></a>数组迭代</h2><blockquote>\n<p>数组遍历方法均支持2个参数，第一个为迭代方法，第二个为 this 指向。不指定 this 的话，默认为 window 。</p>\n</blockquote>\n<h3 id=\"Array-prototype-forEach\"><a href=\"#Array-prototype-forEach\" class=\"headerlink\" title=\"Array.prototype.forEach()\"></a>Array.prototype.forEach()</h3><ul>\n<li>数组遍历</li>\n<li>遍历每一个值</li>\n<li>遍历迭代函数无返回值</li>\n<li>无返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aab'</span>, <span class=\"string\">'aac'</span>, <span class=\"string\">'aad'</span>, <span class=\"string\">'bbc'</span>, <span class=\"string\">'bbd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, _this</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此时 this === window</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value, index, _this);</span><br><span class=\"line\">    <span class=\"comment\">// aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// aac 1 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// aad 2 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// bbc 3 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// bbd 4 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-every\"><a href=\"#Array-prototype-every\" class=\"headerlink\" title=\"Array.prototype.every()\"></a>Array.prototype.every()</h3><ul>\n<li>数组遍历</li>\n<li>至少遍历一个值</li>\n<li>遍历迭代函数须有返回值</li>\n<li>检查每一个值是否能通过函数，如果有一个不符合，则立刻停止遍历，返回 <code>false</code>，如果所有数值均符合，则返回 <code>true</code></li>\n<li>有返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aab'</span>, <span class=\"string\">'aac'</span>, <span class=\"string\">'aad'</span>, <span class=\"string\">'bbc'</span>, <span class=\"string\">'bbd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, _this</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此时 this === 'for this'</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value, index, _this);</span><br><span class=\"line\">    <span class=\"comment\">// aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// aac 1 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// aad 2 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// bbc 3 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// bbd 4 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'string'</span> === <span class=\"keyword\">typeof</span> value;</span><br><span class=\"line\">&#125;,<span class=\"string\">'for this'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-some\"><a href=\"#Array-prototype-some\" class=\"headerlink\" title=\"Array.prototype.some()\"></a>Array.prototype.some()</h3><ul>\n<li>数组遍历</li>\n<li>至少遍历一个值</li>\n<li>遍历迭代函数须有返回值</li>\n<li>检查每一个值是否能通过函数，如果有一个符合，则立刻停止遍历，返回 <code>true</code>，如果所有数值均不符合，则返回 <code>false</code></li>\n<li>有返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aab'</span>, <span class=\"string\">'aac'</span>, <span class=\"string\">'aad'</span>, <span class=\"string\">'bbc'</span>, <span class=\"string\">'bbd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, _this</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此时 this === 'for this'</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value, index, _this);</span><br><span class=\"line\">    <span class=\"comment\">// aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// 由于第一轮符合要求，则不进行后续遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'string'</span> === <span class=\"keyword\">typeof</span> value;</span><br><span class=\"line\">&#125;,<span class=\"string\">'for this'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-map\"><a href=\"#Array-prototype-map\" class=\"headerlink\" title=\"Array.prototype.map()\"></a>Array.prototype.map()</h3><ul>\n<li>数组遍历</li>\n<li>遍历每一个值</li>\n<li>遍历迭代函数须有返回值</li>\n<li>遍历数组每一个值，并将迭代函数返回值放入新数组</li>\n<li>有返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aab'</span>, <span class=\"string\">'aac'</span>, <span class=\"string\">'aad'</span>, <span class=\"string\">'bbc'</span>, <span class=\"string\">'bbd'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, _this</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value, index, _this);</span><br><span class=\"line\">    <span class=\"comment\">// aab 0 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// aac 1 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// aad 2 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// bbc 3 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// bbd 4 [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value + value;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// [\"aabaab\", \"aacaac\", \"aadaad\", \"bbcbbc\", \"bbdbbd\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-filter\"><a href=\"#Array-prototype-filter\" class=\"headerlink\" title=\"Array.prototype.filter()\"></a>Array.prototype.filter()</h3><ul>\n<li>数组遍历</li>\n<li>遍历每一个值</li>\n<li>遍历迭代函数须有返回值</li>\n<li>遍历数组每一个值，并根据迭代函数返回值放入新数组</li>\n<li>有返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, _this</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value, index, _this);</span><br><span class=\"line\">    <span class=\"comment\">// 2 0 [2, 4, 6, 8, 10]</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value &gt; <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// [6, 8, 10]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-reduce-Array-prototype-reduceRight\"><a href=\"#Array-prototype-reduce-Array-prototype-reduceRight\" class=\"headerlink\" title=\"Array.prototype.reduce() / Array.prototype.reduceRight()\"></a>Array.prototype.reduce() / Array.prototype.reduceRight()</h3><ul>\n<li>数组遍历</li>\n<li>遍历每一个值</li>\n<li>遍历迭代函数须有返回值</li>\n<li>有返回值</li>\n</ul>\n<p>这个我自己太熟了。真的熟的都不想写了~</p>\n<p>最常见的应用就是数字叠加求和。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cur,next,index,_this</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// this === window</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(cur, next, index, _this);</span><br><span class=\"line\">    <span class=\"comment\">// 4  2 0 [2, 5, 8, 9]</span></span><br><span class=\"line\">    <span class=\"comment\">// 6  5 1 [2, 5, 8, 9]</span></span><br><span class=\"line\">    <span class=\"comment\">// 11 8 2 [2, 5, 8, 9]</span></span><br><span class=\"line\">    <span class=\"comment\">// 19 9 3 [2, 5, 8, 9]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cur + next; <span class=\"comment\">// 将本轮初始值加上本轮遍历值 本轮迭代后的返回值，将作为下轮迭代的初始值</span></span><br><span class=\"line\">&#125;,<span class=\"number\">4</span>); <span class=\"comment\">// 初始值为4 </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// 28 (4+2+5+8+9)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组编辑\"><a href=\"#数组编辑\" class=\"headerlink\" title=\"数组编辑\"></a>数组编辑</h2><h3 id=\"Array-prototype-unshift\"><a href=\"#Array-prototype-unshift\" class=\"headerlink\" title=\"Array.prototype.unshift()\"></a>Array.prototype.unshift()</h3><ul>\n<li>数组开头插入</li>\n<li>有返回值（数组长度）</li>\n<li>改变原数组</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aa'</span>, <span class=\"string\">'bb'</span>, <span class=\"string\">'cc'</span>, <span class=\"string\">'dd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.unshift(<span class=\"number\">11</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, result);</span><br><span class=\"line\"><span class=\"comment\">// [11, 12, \"aa\", \"bb\", \"cc\", \"dd\"] 6</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-shift\"><a href=\"#Array-prototype-shift\" class=\"headerlink\" title=\"Array.prototype.shift()\"></a>Array.prototype.shift()</h3><ul>\n<li>数组开头删除</li>\n<li>有返回值（数组的第一个值）</li>\n<li>改变原数组</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aa'</span>, <span class=\"string\">'bb'</span>, <span class=\"string\">'cc'</span>, <span class=\"string\">'dd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.shift();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, result);</span><br><span class=\"line\"><span class=\"comment\">// [\"bb\", \"cc\", \"dd\"] \"aa\"</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-push\"><a href=\"#Array-prototype-push\" class=\"headerlink\" title=\"Array.prototype.push()\"></a>Array.prototype.push()</h3><ul>\n<li>数组结尾插入</li>\n<li>有返回值（数组长度）</li>\n<li>改变原数组</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aa'</span>, <span class=\"string\">'bb'</span>, <span class=\"string\">'cc'</span>, <span class=\"string\">'dd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.push(<span class=\"number\">21</span>, <span class=\"number\">22</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, result);</span><br><span class=\"line\"><span class=\"comment\">// [\"aa\", \"bb\", \"cc\", \"dd\", 21, 22] 6</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-pop\"><a href=\"#Array-prototype-pop\" class=\"headerlink\" title=\"Array.prototype.pop()\"></a>Array.prototype.pop()</h3><ul>\n<li>数组结尾删除</li>\n<li>有返回值（数组的最后一个值）</li>\n<li>改变原数组</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aa'</span>, <span class=\"string\">'bb'</span>, <span class=\"string\">'cc'</span>, <span class=\"string\">'dd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.pop();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, result);</span><br><span class=\"line\"><span class=\"comment\">// [\"aa\", \"bb\", \"cc\"] \"dd\"</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-concat\"><a href=\"#Array-prototype-concat\" class=\"headerlink\" title=\"Array.prototype.concat()\"></a>Array.prototype.concat()</h3><ul>\n<li>数组合并（不展开数组）</li>\n<li>有返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,[<span class=\"string\">'c1'</span>,<span class=\"string\">'c2'</span>]];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr1.concat(arr2);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3, \"a\", \"b\", [\"c1\", \"c2\"]]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1);</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);</span><br><span class=\"line\"><span class=\"comment\">// [\"a\", \"b\", [\"c1\", \"c2\"]]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-fill\"><a href=\"#Array-prototype-fill\" class=\"headerlink\" title=\"Array.prototype.fill()\"></a>Array.prototype.fill()</h3><ul>\n<li>数组填充</li>\n<li>改变原数组</li>\n<li>返回改变后的数组</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.fill(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// 填充'a'，从1位到2位，不含第2位</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// [1, \"a\", 3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// [1, \"a\", 3]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-splice\"><a href=\"#Array-prototype-splice\" class=\"headerlink\" title=\"Array.prototype.splice()\"></a>Array.prototype.splice()</h3><ul>\n<li>数组删除</li>\n<li>数组插入数据</li>\n<li>操作原数组</li>\n<li>有返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aab'</span>, <span class=\"string\">'aac'</span>, <span class=\"string\">'aad'</span>, <span class=\"string\">'bbc'</span>, <span class=\"string\">'bbd'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.splice(<span class=\"number\">2</span>, <span class=\"number\">1</span>); <span class=\"comment\">// 从2号位置，删除1个。</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, result);</span><br><span class=\"line\"><span class=\"comment\">// [\"aab\", \"aac\", \"bbc\", \"bbd\"] [\"aad\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result2 = arr.splice(<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"string\">'test'</span>, <span class=\"string\">'test2'</span>); <span class=\"comment\">// 从2号位置，删除0个，并在此位置增加test和test2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, result2);</span><br><span class=\"line\"><span class=\"comment\">// [\"aab\", \"aac\", \"test\", \"test2\", \"bbc\", \"bbd\"] []</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-slice\"><a href=\"#Array-prototype-slice\" class=\"headerlink\" title=\"Array.prototype.slice()\"></a>Array.prototype.slice()</h3><ul>\n<li>选取元素</li>\n<li>有返回值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aab'</span>, <span class=\"string\">'aac'</span>, <span class=\"string\">'aad'</span>, <span class=\"string\">'bbc'</span>, <span class=\"string\">'bbd'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.slice(<span class=\"number\">2</span>, <span class=\"number\">4</span>); <span class=\"comment\">// 从2号位置，选取到4号位置（不含4号）</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, result);</span><br><span class=\"line\"><span class=\"comment\">// [\"aab\", \"aac\", \"aad\", \"bbc\", \"bbd\"] [\"aad\", \"bbc\"]</span></span><br></pre></td></tr></table></figure>\n\n<p>我觉得\b最常见的用法是用于数组复制，或者在函数内将 <code>arguments</code> 转为数组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1,2,3,4];</span><br><span class=\"line\">var copies = arr.slice(0);</span><br><span class=\"line\">console.log(copies);</span><br><span class=\"line\"></span><br><span class=\"line\">var fn = function()&#123;</span><br><span class=\"line\">    var args = [].slice.call(arguments,0);</span><br><span class=\"line\">    console.log(args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(1,2,3,4);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组查找定位元素\"><a href=\"#数组查找定位元素\" class=\"headerlink\" title=\"数组查找定位元素\"></a>数组查找定位元素</h2><h3 id=\"Array-prototype-find\"><a href=\"#Array-prototype-find\" class=\"headerlink\" title=\"Array.prototype.find()\"></a>Array.prototype.find()</h3><ul>\n<li>查找符合要求的第一个元素值</li>\n<li>传入查找函数</li>\n<li>支持传入this指向</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">18</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.find(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v &gt; <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">//12</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-findIndex\"><a href=\"#Array-prototype-findIndex\" class=\"headerlink\" title=\"Array.prototype.findIndex()\"></a>Array.prototype.findIndex()</h3><ul>\n<li>查找符合要求的第一个元素的索引值</li>\n<li>传入查找函数</li>\n<li>支持传入this指向</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">18</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.findIndex(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v &gt; <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-includes\"><a href=\"#Array-prototype-includes\" class=\"headerlink\" title=\"Array.prototype.includes()\"></a>Array.prototype.includes()</h3><ul>\n<li>查找元素是否存在</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">18</span>, <span class=\"number\">22</span>, <span class=\"number\">35</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.includes(<span class=\"number\">12</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-indexOf-Array-prototype-lastIndexOf\"><a href=\"#Array-prototype-indexOf-Array-prototype-lastIndexOf\" class=\"headerlink\" title=\"Array.prototype.indexOf() / Array.prototype.lastIndexOf()\"></a>Array.prototype.indexOf() / Array.prototype.lastIndexOf()</h3><ul>\n<li>查找元素的索引值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">18</span>, <span class=\"number\">22</span>, <span class=\"number\">35</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.indexOf(<span class=\"number\">12</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组排序\"><a href=\"#数组排序\" class=\"headerlink\" title=\"数组排序\"></a>数组排序</h2><h3 id=\"Array-prototype-sort\"><a href=\"#Array-prototype-sort\" class=\"headerlink\" title=\"Array.prototype.sort()\"></a>Array.prototype.sort()</h3><ul>\n<li>正向排序</li>\n<li>支持传入排序函数</li>\n<li>排序函数必须有返回值</li>\n<li>修改原数组</li>\n<li>有返回值，为排序后结果</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [&#123;<span class=\"attr\">name</span>:<span class=\"string\">'jason'</span>,<span class=\"attr\">value</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">name</span>:<span class=\"string\">'john'</span>,<span class=\"attr\">value</span>:<span class=\"number\">0</span>&#125;]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> a.value - b.value;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// [&#123;name:'john',value:0&#125;,&#123;name:'jason',value:1&#125;]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">// [&#123;name:'john',value:0&#125;,&#123;name:'jason',value:1&#125;]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-reverse\"><a href=\"#Array-prototype-reverse\" class=\"headerlink\" title=\"Array.prototype.reverse()\"></a>Array.prototype.reverse()</h3><ul>\n<li>反向排序</li>\n<li>不支持传函数</li>\n<li>直接修改数组</li>\n<li>有返回值（修改后的数组）</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"Array-prototype-join\"><a href=\"#Array-prototype-join\" class=\"headerlink\" title=\"Array.prototype.join()\"></a>Array.prototype.join()</h3><ul>\n<li>数组数据拼合</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aa'</span>, <span class=\"string\">'bb'</span>, <span class=\"string\">'cc'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.join(<span class=\"string\">'-'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">// aa-bb-cc</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-keys-Array-prototype-values-Array-prototype-entries\"><a href=\"#Array-prototype-keys-Array-prototype-values-Array-prototype-entries\" class=\"headerlink\" title=\"Array.prototype.keys() / Array.prototype.values() / Array.prototype.entries()\"></a>Array.prototype.keys() / Array.prototype.values() / Array.prototype.entries()</h3><ul>\n<li>获取数组key / value</li>\n<li>有返回值（迭代器）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aab'</span>, <span class=\"string\">'aac'</span>, <span class=\"string\">'aad'</span>, <span class=\"string\">'bbc'</span>, <span class=\"string\">'bbd'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> keys = arr.keys();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> k <span class=\"keyword\">of</span> keys)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//迭代器只能用 for of，for in 事遍历不了的</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(k);</span><br><span class=\"line\">    <span class=\"comment\">// 0</span></span><br><span class=\"line\">    <span class=\"comment\">// 1</span></span><br><span class=\"line\">    <span class=\"comment\">// 2</span></span><br><span class=\"line\">    <span class=\"comment\">// 3</span></span><br><span class=\"line\">    <span class=\"comment\">// 4</span></span><br><span class=\"line\">    <span class=\"comment\">// 5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> entries = arr.entries();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> k <span class=\"keyword\">of</span> entries)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(k);</span><br><span class=\"line\">    <span class=\"comment\">// [0, \"aab\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// [1, \"aac\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// [2, \"aad\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// [3, \"bbc\"]</span></span><br><span class=\"line\">    <span class=\"comment\">// [4, \"bbd\"]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>方法</th>\n<th align=\"center\">无返回</th>\n<th align=\"center\">返回非数组结果</th>\n<th align=\"center\">返回新数组</th>\n<th align=\"center\">操作原数组</th>\n<th align=\"center\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>迭代</td>\n<td>forEach</td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>every</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>some</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>map</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>filter</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>reduce</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>reduceRight</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>unshift</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\">修改原数组，返回长度</td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>shift</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\">修改原数组，返回其中一个值</td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>push</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\">修改原数组，返回长度</td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>pop</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\">修改原数组，返回其中一个值</td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>concat</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>fill</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\">O</td>\n<td align=\"center\">修改原数组，并返回该数组</td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>splice</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\">O</td>\n<td align=\"center\">原数组被修剪，返回修剪内容</td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>slice</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>查找</td>\n<td>find<br>findIndex<br>includes<br>lastIndexOf</td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>排序</td>\n<td>sort</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>排序</td>\n<td>reverse</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>"},{"layout":"post","title":"端午节带对象回家，家长要带身份证学位证","date":"2017-05-31T13:46:00.000Z","_content":"\n在知乎上面，看到了这两个问题，突然想到了一段视频...视频是滴滴公司广告，我有删减。\n\n<!-- more -->\n\n[端午节请女朋友回家，家长要带身份证学位证？](https://www.zhihu.com/question/60478176)\n\n[端午节叫男朋友上门，家人要他带身份证和毕业证，男朋友很生气，说这是作践他的人格，硬是不带，怎么办？](https://www.zhihu.com/question/60416551)\n\n<video width=\"320\" height=\"240\" controls>\n<source src=\"https://cdn0.yukapril.com/blog/2017-05-31-before-marry.mp4\" type=\"video/mp4\">\n</video>","source":"_posts/2017/2017-05-31-before-marry.md","raw":"---\nlayout: post\ntitle: \"端午节带对象回家，家长要带身份证学位证\"\ndate: 2017-05-31 13:46:00 GMT+0800\ncategories: [随笔]\ntags:  [恋爱, 长辈相处]\n---\n\n在知乎上面，看到了这两个问题，突然想到了一段视频...视频是滴滴公司广告，我有删减。\n\n<!-- more -->\n\n[端午节请女朋友回家，家长要带身份证学位证？](https://www.zhihu.com/question/60478176)\n\n[端午节叫男朋友上门，家人要他带身份证和毕业证，男朋友很生气，说这是作践他的人格，硬是不带，怎么办？](https://www.zhihu.com/question/60416551)\n\n<video width=\"320\" height=\"240\" controls>\n<source src=\"https://cdn0.yukapril.com/blog/2017-05-31-before-marry.mp4\" type=\"video/mp4\">\n</video>","slug":"2017-2017-05-31-before-marry","published":1,"updated":"2020-03-02T07:16:34.642Z","comments":1,"photos":[],"link":"","_id":"cka5ik8bf002knybgfgd1o64m","content":"<p>在知乎上面，看到了这两个问题，突然想到了一段视频…视频是滴滴公司广告，我有删减。</p>\n<a id=\"more\"></a>\n\n<p><a href=\"https://www.zhihu.com/question/60478176\" target=\"_blank\" rel=\"noopener\">端午节请女朋友回家，家长要带身份证学位证？</a></p>\n<p><a href=\"https://www.zhihu.com/question/60416551\" target=\"_blank\" rel=\"noopener\">端午节叫男朋友上门，家人要他带身份证和毕业证，男朋友很生气，说这是作践他的人格，硬是不带，怎么办？</a></p>\n<video width=\"320\" height=\"240\" controls>\n<source src=\"https://cdn0.yukapril.com/blog/2017-05-31-before-marry.mp4\" type=\"video/mp4\">\n</video>","site":{"data":{}},"excerpt":"<p>在知乎上面，看到了这两个问题，突然想到了一段视频…视频是滴滴公司广告，我有删减。</p>","more":"<p><a href=\"https://www.zhihu.com/question/60478176\" target=\"_blank\" rel=\"noopener\">端午节请女朋友回家，家长要带身份证学位证？</a></p>\n<p><a href=\"https://www.zhihu.com/question/60416551\" target=\"_blank\" rel=\"noopener\">端午节叫男朋友上门，家人要他带身份证和毕业证，男朋友很生气，说这是作践他的人格，硬是不带，怎么办？</a></p>\n<video width=\"320\" height=\"240\" controls>\n<source src=\"https://cdn0.yukapril.com/blog/2017-05-31-before-marry.mp4\" type=\"video/mp4\">\n</video>"},{"layout":"post","title":"学习 React - MobX","date":"2017-06-03T14:16:00.000Z","_content":"\n计划学习 React，就接触到了 MobX。之前听过 Redux，因为我接触过 Vuex，感觉差不太多，就没有再去学习。还听说 Redux 的作者推荐 MobX，看来在不是很复杂的数据流动选择 MobX 是非常正确的。\n\n<!-- more -->\n\n## 一个简单的 React 例子\n\n做一个最简单的 React 页面——页面实时显示时间。\n\n其中有一个组件 `Timer` ，负责显示时间，并完成实时更新。\n\n### 用 React直接来写\n\n那么，`app.js` 如下：\n\n```jsx\nimport React from \"react\";\nimport \"./App.css\";\n\nconst now = () => {\n    let t = new Date().toISOString().replace('T', ' ');\n    return t.substring(0, t.length - 5);\n};\n\nclass Timer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            timer: null,\n            timeString: now()\n        }\n    }\n    componentDidMount() {\n        let timer = setInterval(() => {\n            this.setState({\n                timeString: now()\n            });\n        }, 1000);\n        this.setState({timer});\n    }\n    componentWillUnmount() {\n        clearInterval(this.state.timer);\n    }\n    render() {\n        return (<span>now: { this.state.timeString } </span> )\n    }\n}\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className=\"app\">\n                <Timer></Timer>\n            </div>\n        )\n    }\n}\n\nexport default App;\n```\n\n由于我们需要实时更新时间，在 `Timer` 组件内，定义内部状态（ `state`），并且在挂载组件后启动定时，组件移除时清除定时器。\n\n这样做有这些问题：\n\n- 如果有两个组件公用一个时间，那么没办法写在其中一个组件内，否则第二个组件获得不到时间\n- 为了解决第一点，一般就是采用 Redux，创建公共的 store，接收公共状态\n- 当然，如果两个组件是父子关系，可以通过 `props` 来进行传递，可以不用 Redux\n\n而一旦使用 Redux，那么项目规模立刻变大许多，而且 Redux 也比较复杂，不易于学习。所以就有了 MobX。😘\n\n### 使用 MobX\n\n引入 MobX 包，我们改写下 `app.js` ：\n\n```jsx\nimport React from \"react\";\nimport \"./App.css\";\n\nimport {observable} from \"mobx\";\nimport {observer} from \"mobx-react\";\n\nconst now = () => {\n    let t = new Date().toISOString().replace('T', ' ');\n    return t.substring(0, t.length - 5);\n};\n\nlet store = observable({\n    timerString: now()\n});\n\nsetInterval(() => {\n    store.timerString = now();\n}, 1000);\n\n@observer\nclass Timer extends React.Component {\n    render() {\n        return (<span>now: { store.timerString } </span> )\n    }\n}\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className=\"app\">\n                <Timer></Timer>\n            </div>\n        )\n    }\n}\n\nexport default App;\n```\n\n修改之后，是不是简单多了？\n\n修改的内容有：\n\n- 引入了新包 `mobx` 和 `mobx-react`\n- 共享的状态，直接写到了全局下，而且还是 `observable` （可观察的）\n- 状态的修改，也直接放到了全局下，当然，这个放在那里都无所谓，也可以放到组件内\n- 原有的 `Timer` 组件，直接引用全局共享状态，并且加上了装饰器 `observer` \n- 需要说明的一点：**observable 如果使用装饰器形式，只能写在类（ `class` ）内，所以这里没办法写成装饰器形式**\n\n## 小结\n\n通过使用 MobX，可以大大简化状态共享的代码量，原本需要使用 Redux 的项目，如果数据流动不是特别复杂，换成 MobX 可以开发效率更高。但是据说项目有一定规模的话，MobX 也会比较难于管理，还是 Redux 比较适合。\n","source":"_posts/2017/2017-06-03-react-mobx.md","raw":"---\nlayout: post\ntitle: \"学习 React - MobX\"\ndate: 2017-06-03 14:16:00 GMT+0800\ncategories: [前端]\ntags:  [react,mobx]\n---\n\n计划学习 React，就接触到了 MobX。之前听过 Redux，因为我接触过 Vuex，感觉差不太多，就没有再去学习。还听说 Redux 的作者推荐 MobX，看来在不是很复杂的数据流动选择 MobX 是非常正确的。\n\n<!-- more -->\n\n## 一个简单的 React 例子\n\n做一个最简单的 React 页面——页面实时显示时间。\n\n其中有一个组件 `Timer` ，负责显示时间，并完成实时更新。\n\n### 用 React直接来写\n\n那么，`app.js` 如下：\n\n```jsx\nimport React from \"react\";\nimport \"./App.css\";\n\nconst now = () => {\n    let t = new Date().toISOString().replace('T', ' ');\n    return t.substring(0, t.length - 5);\n};\n\nclass Timer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            timer: null,\n            timeString: now()\n        }\n    }\n    componentDidMount() {\n        let timer = setInterval(() => {\n            this.setState({\n                timeString: now()\n            });\n        }, 1000);\n        this.setState({timer});\n    }\n    componentWillUnmount() {\n        clearInterval(this.state.timer);\n    }\n    render() {\n        return (<span>now: { this.state.timeString } </span> )\n    }\n}\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className=\"app\">\n                <Timer></Timer>\n            </div>\n        )\n    }\n}\n\nexport default App;\n```\n\n由于我们需要实时更新时间，在 `Timer` 组件内，定义内部状态（ `state`），并且在挂载组件后启动定时，组件移除时清除定时器。\n\n这样做有这些问题：\n\n- 如果有两个组件公用一个时间，那么没办法写在其中一个组件内，否则第二个组件获得不到时间\n- 为了解决第一点，一般就是采用 Redux，创建公共的 store，接收公共状态\n- 当然，如果两个组件是父子关系，可以通过 `props` 来进行传递，可以不用 Redux\n\n而一旦使用 Redux，那么项目规模立刻变大许多，而且 Redux 也比较复杂，不易于学习。所以就有了 MobX。😘\n\n### 使用 MobX\n\n引入 MobX 包，我们改写下 `app.js` ：\n\n```jsx\nimport React from \"react\";\nimport \"./App.css\";\n\nimport {observable} from \"mobx\";\nimport {observer} from \"mobx-react\";\n\nconst now = () => {\n    let t = new Date().toISOString().replace('T', ' ');\n    return t.substring(0, t.length - 5);\n};\n\nlet store = observable({\n    timerString: now()\n});\n\nsetInterval(() => {\n    store.timerString = now();\n}, 1000);\n\n@observer\nclass Timer extends React.Component {\n    render() {\n        return (<span>now: { store.timerString } </span> )\n    }\n}\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className=\"app\">\n                <Timer></Timer>\n            </div>\n        )\n    }\n}\n\nexport default App;\n```\n\n修改之后，是不是简单多了？\n\n修改的内容有：\n\n- 引入了新包 `mobx` 和 `mobx-react`\n- 共享的状态，直接写到了全局下，而且还是 `observable` （可观察的）\n- 状态的修改，也直接放到了全局下，当然，这个放在那里都无所谓，也可以放到组件内\n- 原有的 `Timer` 组件，直接引用全局共享状态，并且加上了装饰器 `observer` \n- 需要说明的一点：**observable 如果使用装饰器形式，只能写在类（ `class` ）内，所以这里没办法写成装饰器形式**\n\n## 小结\n\n通过使用 MobX，可以大大简化状态共享的代码量，原本需要使用 Redux 的项目，如果数据流动不是特别复杂，换成 MobX 可以开发效率更高。但是据说项目有一定规模的话，MobX 也会比较难于管理，还是 Redux 比较适合。\n","slug":"2017-2017-06-03-react-mobx","published":1,"updated":"2020-03-02T07:16:34.642Z","comments":1,"photos":[],"link":"","_id":"cka5ik8bg002pnybgmfqn1t7q","content":"<p>计划学习 React，就接触到了 MobX。之前听过 Redux，因为我接触过 Vuex，感觉差不太多，就没有再去学习。还听说 Redux 的作者推荐 MobX，看来在不是很复杂的数据流动选择 MobX 是非常正确的。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"一个简单的-React-例子\"><a href=\"#一个简单的-React-例子\" class=\"headerlink\" title=\"一个简单的 React 例子\"></a>一个简单的 React 例子</h2><p>做一个最简单的 React 页面——页面实时显示时间。</p>\n<p>其中有一个组件 <code>Timer</code> ，负责显示时间，并完成实时更新。</p>\n<h3 id=\"用-React直接来写\"><a href=\"#用-React直接来写\" class=\"headerlink\" title=\"用 React直接来写\"></a>用 React直接来写</h3><p>那么，<code>app.js</code> 如下：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"./App.css\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> now = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> t = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toISOString().replace(<span class=\"string\">'T'</span>, <span class=\"string\">' '</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t.substring(<span class=\"number\">0</span>, t.length - <span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Timer</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">            timer: <span class=\"literal\">null</span>,</span><br><span class=\"line\">            timeString: now()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    componentDidMount() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> timer = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">                timeString: now()</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;timer&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    componentWillUnmount() &#123;</span><br><span class=\"line\">        clearInterval(<span class=\"keyword\">this</span>.state.timer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>now: &#123; this.state.timeString &#125; <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span> )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div className=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">                &lt;Timer&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">Timer</span>&gt;</span></span></span><br><span class=\"line\">            &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        )</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default App;</span></span><br></pre></td></tr></table></figure>\n\n<p>由于我们需要实时更新时间，在 <code>Timer</code> 组件内，定义内部状态（ <code>state</code>），并且在挂载组件后启动定时，组件移除时清除定时器。</p>\n<p>这样做有这些问题：</p>\n<ul>\n<li>如果有两个组件公用一个时间，那么没办法写在其中一个组件内，否则第二个组件获得不到时间</li>\n<li>为了解决第一点，一般就是采用 Redux，创建公共的 store，接收公共状态</li>\n<li>当然，如果两个组件是父子关系，可以通过 <code>props</code> 来进行传递，可以不用 Redux</li>\n</ul>\n<p>而一旦使用 Redux，那么项目规模立刻变大许多，而且 Redux 也比较复杂，不易于学习。所以就有了 MobX。😘</p>\n<h3 id=\"使用-MobX\"><a href=\"#使用-MobX\" class=\"headerlink\" title=\"使用 MobX\"></a>使用 MobX</h3><p>引入 MobX 包，我们改写下 <code>app.js</code> ：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"./App.css\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;observable&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"mobx\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;observer&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"mobx-react\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> now = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> t = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toISOString().replace(<span class=\"string\">'T'</span>, <span class=\"string\">' '</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t.substring(<span class=\"number\">0</span>, t.length - <span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> store = observable(&#123;</span><br><span class=\"line\">    timerString: now()</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    store.timerString = now();</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">@observer</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Timer</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>now: &#123; store.timerString &#125; <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span> )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div className=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">                &lt;Timer&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">Timer</span>&gt;</span></span></span><br><span class=\"line\">            &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        )</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default App;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改之后，是不是简单多了？</p>\n<p>修改的内容有：</p>\n<ul>\n<li>引入了新包 <code>mobx</code> 和 <code>mobx-react</code></li>\n<li>共享的状态，直接写到了全局下，而且还是 <code>observable</code> （可观察的）</li>\n<li>状态的修改，也直接放到了全局下，当然，这个放在那里都无所谓，也可以放到组件内</li>\n<li>原有的 <code>Timer</code> 组件，直接引用全局共享状态，并且加上了装饰器 <code>observer</code> </li>\n<li>需要说明的一点：<strong>observable 如果使用装饰器形式，只能写在类（ <code>class</code> ）内，所以这里没办法写成装饰器形式</strong></li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>通过使用 MobX，可以大大简化状态共享的代码量，原本需要使用 Redux 的项目，如果数据流动不是特别复杂，换成 MobX 可以开发效率更高。但是据说项目有一定规模的话，MobX 也会比较难于管理，还是 Redux 比较适合。</p>\n","site":{"data":{}},"excerpt":"<p>计划学习 React，就接触到了 MobX。之前听过 Redux，因为我接触过 Vuex，感觉差不太多，就没有再去学习。还听说 Redux 的作者推荐 MobX，看来在不是很复杂的数据流动选择 MobX 是非常正确的。</p>","more":"<h2 id=\"一个简单的-React-例子\"><a href=\"#一个简单的-React-例子\" class=\"headerlink\" title=\"一个简单的 React 例子\"></a>一个简单的 React 例子</h2><p>做一个最简单的 React 页面——页面实时显示时间。</p>\n<p>其中有一个组件 <code>Timer</code> ，负责显示时间，并完成实时更新。</p>\n<h3 id=\"用-React直接来写\"><a href=\"#用-React直接来写\" class=\"headerlink\" title=\"用 React直接来写\"></a>用 React直接来写</h3><p>那么，<code>app.js</code> 如下：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"./App.css\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> now = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> t = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toISOString().replace(<span class=\"string\">'T'</span>, <span class=\"string\">' '</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t.substring(<span class=\"number\">0</span>, t.length - <span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Timer</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">            timer: <span class=\"literal\">null</span>,</span><br><span class=\"line\">            timeString: now()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    componentDidMount() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> timer = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">                timeString: now()</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;timer&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    componentWillUnmount() &#123;</span><br><span class=\"line\">        clearInterval(<span class=\"keyword\">this</span>.state.timer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>now: &#123; this.state.timeString &#125; <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span> )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div className=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">                &lt;Timer&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">Timer</span>&gt;</span></span></span><br><span class=\"line\">            &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        )</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default App;</span></span><br></pre></td></tr></table></figure>\n\n<p>由于我们需要实时更新时间，在 <code>Timer</code> 组件内，定义内部状态（ <code>state</code>），并且在挂载组件后启动定时，组件移除时清除定时器。</p>\n<p>这样做有这些问题：</p>\n<ul>\n<li>如果有两个组件公用一个时间，那么没办法写在其中一个组件内，否则第二个组件获得不到时间</li>\n<li>为了解决第一点，一般就是采用 Redux，创建公共的 store，接收公共状态</li>\n<li>当然，如果两个组件是父子关系，可以通过 <code>props</code> 来进行传递，可以不用 Redux</li>\n</ul>\n<p>而一旦使用 Redux，那么项目规模立刻变大许多，而且 Redux 也比较复杂，不易于学习。所以就有了 MobX。😘</p>\n<h3 id=\"使用-MobX\"><a href=\"#使用-MobX\" class=\"headerlink\" title=\"使用 MobX\"></a>使用 MobX</h3><p>引入 MobX 包，我们改写下 <code>app.js</code> ：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"./App.css\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;observable&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"mobx\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;observer&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"mobx-react\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> now = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> t = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toISOString().replace(<span class=\"string\">'T'</span>, <span class=\"string\">' '</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t.substring(<span class=\"number\">0</span>, t.length - <span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> store = observable(&#123;</span><br><span class=\"line\">    timerString: now()</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    store.timerString = now();</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">@observer</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Timer</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>now: &#123; store.timerString &#125; <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span> )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div className=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">                &lt;Timer&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">Timer</span>&gt;</span></span></span><br><span class=\"line\">            &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        )</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default App;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改之后，是不是简单多了？</p>\n<p>修改的内容有：</p>\n<ul>\n<li>引入了新包 <code>mobx</code> 和 <code>mobx-react</code></li>\n<li>共享的状态，直接写到了全局下，而且还是 <code>observable</code> （可观察的）</li>\n<li>状态的修改，也直接放到了全局下，当然，这个放在那里都无所谓，也可以放到组件内</li>\n<li>原有的 <code>Timer</code> 组件，直接引用全局共享状态，并且加上了装饰器 <code>observer</code> </li>\n<li>需要说明的一点：<strong>observable 如果使用装饰器形式，只能写在类（ <code>class</code> ）内，所以这里没办法写成装饰器形式</strong></li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>通过使用 MobX，可以大大简化状态共享的代码量，原本需要使用 Redux 的项目，如果数据流动不是特别复杂，换成 MobX 可以开发效率更高。但是据说项目有一定规模的话，MobX 也会比较难于管理，还是 Redux 比较适合。</p>"},{"layout":"post","title":"ubuntu 只能以访客登录的问题处理","date":"2017-06-09T21:47:00.000Z","_content":"\n今天打开笔记本，发现 Ubuntu 没有让输入密码，直接回车就进入了桌面，并且无法看到数据了。\n\n这才发现，是以访客身份登录的系统。\n\n我直接切换用户，发现黑屏。\n\n<!-- more -->\n\n重启，选择用户，输入密码，黑屏。\n\n经过上网查询，主要是桌面环境配置可能有了问题，建议删除配置文件就好。\n\n方法记录如下：\n\n1. 重启，启动后按 <kbd>ctrl</kbd> + <kbd>alt</kbd> + <kbd>F1</kbd>（<kbd>F1</kbd> ~ <kbd>F5</kbd>都行，看到让你登录就好）\n2. 输入账号，密码，登录。\n3. 删除配置文件，以 `.Xaut` 开头的文件\n```sh\ncd ~ \nrm -rf .Xaut*\n```\n4. 重启，正常","source":"_posts/2017/2017-06-09-ubuntu-login.md","raw":"---\nlayout: post\ntitle: \"ubuntu 只能以访客登录的问题处理\"\ndate: 2017-06-09 21:47:00 GMT+0800\ncategories: [技术]\ntags:  [ubuntu,访客,登录]\n---\n\n今天打开笔记本，发现 Ubuntu 没有让输入密码，直接回车就进入了桌面，并且无法看到数据了。\n\n这才发现，是以访客身份登录的系统。\n\n我直接切换用户，发现黑屏。\n\n<!-- more -->\n\n重启，选择用户，输入密码，黑屏。\n\n经过上网查询，主要是桌面环境配置可能有了问题，建议删除配置文件就好。\n\n方法记录如下：\n\n1. 重启，启动后按 <kbd>ctrl</kbd> + <kbd>alt</kbd> + <kbd>F1</kbd>（<kbd>F1</kbd> ~ <kbd>F5</kbd>都行，看到让你登录就好）\n2. 输入账号，密码，登录。\n3. 删除配置文件，以 `.Xaut` 开头的文件\n```sh\ncd ~ \nrm -rf .Xaut*\n```\n4. 重启，正常","slug":"2017-2017-06-09-ubuntu-login","published":1,"updated":"2020-03-06T01:19:48.085Z","comments":1,"photos":[],"link":"","_id":"cka5ik8bh002rnybgl2ojz3xi","content":"<p>今天打开笔记本，发现 Ubuntu 没有让输入密码，直接回车就进入了桌面，并且无法看到数据了。</p>\n<p>这才发现，是以访客身份登录的系统。</p>\n<p>我直接切换用户，发现黑屏。</p>\n<a id=\"more\"></a>\n\n<p>重启，选择用户，输入密码，黑屏。</p>\n<p>经过上网查询，主要是桌面环境配置可能有了问题，建议删除配置文件就好。</p>\n<p>方法记录如下：</p>\n<ol>\n<li><p>重启，启动后按 <kbd>ctrl</kbd> + <kbd>alt</kbd> + <kbd>F1</kbd>（<kbd>F1</kbd> ~ <kbd>F5</kbd>都行，看到让你登录就好）</p>\n</li>\n<li><p>输入账号，密码，登录。</p>\n</li>\n<li><p>删除配置文件，以 <code>.Xaut</code> 开头的文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~ </span><br><span class=\"line\">rm -rf .Xaut*</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启，正常</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>今天打开笔记本，发现 Ubuntu 没有让输入密码，直接回车就进入了桌面，并且无法看到数据了。</p>\n<p>这才发现，是以访客身份登录的系统。</p>\n<p>我直接切换用户，发现黑屏。</p>","more":"<p>重启，选择用户，输入密码，黑屏。</p>\n<p>经过上网查询，主要是桌面环境配置可能有了问题，建议删除配置文件就好。</p>\n<p>方法记录如下：</p>\n<ol>\n<li><p>重启，启动后按 <kbd>ctrl</kbd> + <kbd>alt</kbd> + <kbd>F1</kbd>（<kbd>F1</kbd> ~ <kbd>F5</kbd>都行，看到让你登录就好）</p>\n</li>\n<li><p>输入账号，密码，登录。</p>\n</li>\n<li><p>删除配置文件，以 <code>.Xaut</code> 开头的文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~ </span><br><span class=\"line\">rm -rf .Xaut*</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启，正常</p>\n</li>\n</ol>"},{"layout":"post","title":"git 命令学习","date":"2017-06-17T22:11:00.000Z","_content":"\n一直使用 git，但都是通过软件进行操作，基本上也没有实际用过 git 命令。本着多掌握一些英语单词的思想，还是学习一下 git 使用为好。\n\n<!-- more -->\n\n>  因为我的机器里面已经用 sourceTree 登录过 github / coding.net 了，所以 git 不会再要求输入密码了。\n\n## 从服务器克隆（下载）代码仓库\n\n假设代码存放在 coding.net。项目地址：`https://git.coding.net/yukapril/git-study.git`。\n\n一般很少需要直接本地建立 git 仓库，之后上传到服务器上，这些活都应该是版本管理员做的，所以我就省略了。\n\n**首先，克隆代码到本地**\n\n```sh\n# 首先通过 cd 切换到你要克隆到的位置\ngit clone https://git.coding.net/yukapril/git-study.git git-study\n# 也可以简写为\ngit clone https://git.coding.net/yukapril/git-study.git\n```\n\n命令格式为：`git clone 远程地址 本地目录名字`，其中本地目录名字经常不写，使用 git 的项目名字。\n\n这样，代码就被我们克隆到本地了。\n\n\n\n## git 操作流程\n\n我们下载代码后，进行修改，要想最终上传到服务器，流程是这样的。\n\n1. 确定要提交的文件，添加到版本库的暂存区中。你可能这次修改了10个文件，但是仅仅打算提交2个文件。\n2. 针对第一步确定的文件，填写注释并提交到本地 git 仓库。\n3. 将本地仓库的变更，推送到服务器仓库。\n\n注意：流程可以是1->2->3，也可以是反复的1->2，或者1->1->1再提交2，最后一起推送3。\n\n\n## 修改了代码，添加文件到暂存区\n\n首先，我们先要添加一些文件，就叫做 `index.html` 和 `src/index.js`吧。随便写点什么都行。\n\n**检查下 git 文件状态**\n\n```sh\ngit status\n# 或者简单模式查看\ngit status -s\n```\n\n结果为：\n\n```sh\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n\tindex.html\n\tsrc/\n\n```\n\ngit 提示我们有 （红色的）`index.html` 和 `src/` 没有添加到版本中。\n\n\n\n**添加文件到版本库中**\n\n我们要把本次即将提交的文件添加到版本库中，这样 git 才会追踪文件的修改。\n\n添加方法很简单，常用有以下几种方法：\n\n```sh\ngit add . # 添加所有文件\ngit add index.html # 添加指定的文件(index.html)\ngit add src/ # 添加指定的目录\ngit add *.html # 添加扩展名是html的文件\n```\n\n如果本次我仅仅想提交 `index.html`，但是我使用了 `git add .`命令，这样会导致把其他目录也添加到本次待提交暂存区。咋办？我比较笨，不知道如何移除单独的目录，所以用的笨方法，将本次添加的文件全部重置掉：\n\n```sh\ngit reset\n```\n\n之后重新添加就好了。\n\n你可以试试 `git status`，查看下状态：\n\n```sh\nnew file:   index.html\nnew file:   src/index.js\n```\n\n会有绿色的文件提示了。绿色表示新增加。\n\n\n\n## 填写注释，提交代码到本地仓库\n\n首先说明的是，必须要有上一步 `git add`，添加文件到暂存区，否则这步没办法提交。\n\n提交上一步的代码，建议写一点注释：\n\n```sh\ngit commit -m \"add files\"\n```\n\n这里 `-m` 表示 `message` ，后面写注释就好了。\n\n之后，我们查看下状态吧， `git status`：\n\n```sh\nOn branch master\nYour branch is ahead of 'origin/master' by 1 commit.\n  (use \"git push\" to publish your local commits)\nnothing to commit, working tree clean\n```\n\n它提示我们，现在本地的分支，比服务器的 `origin/master` 分支多了一条。\n\n\n\n## 将本地的修改，推送到服务器\n\n上面一步已经提示我们，本地比服务器代码更加超前，那么需要将本地的代码，推送到服务器上面。\n\ngit 命令是 `git push <远程主机名> <本地分支名>  <远程分支名>`\n\n```sh\ngit push origin master master # 远程主机叫做origin，本地分支默认为master，提交到远程分支master上\ngit push origin master # 远程主机叫做origin，本地分支默认为master，远程主机分支不写则同本地分支\ngit push origin # 将本地当前分支直接推送到远程主机当前分支\ngit push # 将本地当前分支直接推送到默认远程分支\n# 所有的操作，如果远程分支不存在则自动创建分支\n```\n\n一般来讲，我们都用最简单的，第四句。除非需要拉一个新的分支，否则其他写法很少用到。\n\n这里还有一点需要说明，假设你是在17:00进行了 `git commit`，之后忘记同步到服务器了。到了17:30想起来了，进行了 `git push`。在服务器上查看你的提交历史，**是17:00提交的**，绝不是17:30。\n\n\n\n## 总结\n\n这次，学习了以下命令：\n\n* `git clone` 从服务器克隆代码到本地\n* `git status` 查看文件状态\n* `git add` 添加文件到暂存区\n* `git reset` 重置文件暂存区\n* `git commit -m \"message\"` 提交当前暂存区并加入注释\n* `git push` 提交本地git变更到服务器\n\n","source":"_posts/2017/2017-06-17-git-study.md","raw":"---\nlayout: post\ntitle: \"git 命令学习\"\ndate: 2017-06-17 22:11:00 GMT+0800\ncategories: [编程]\ntags:  [git]\n---\n\n一直使用 git，但都是通过软件进行操作，基本上也没有实际用过 git 命令。本着多掌握一些英语单词的思想，还是学习一下 git 使用为好。\n\n<!-- more -->\n\n>  因为我的机器里面已经用 sourceTree 登录过 github / coding.net 了，所以 git 不会再要求输入密码了。\n\n## 从服务器克隆（下载）代码仓库\n\n假设代码存放在 coding.net。项目地址：`https://git.coding.net/yukapril/git-study.git`。\n\n一般很少需要直接本地建立 git 仓库，之后上传到服务器上，这些活都应该是版本管理员做的，所以我就省略了。\n\n**首先，克隆代码到本地**\n\n```sh\n# 首先通过 cd 切换到你要克隆到的位置\ngit clone https://git.coding.net/yukapril/git-study.git git-study\n# 也可以简写为\ngit clone https://git.coding.net/yukapril/git-study.git\n```\n\n命令格式为：`git clone 远程地址 本地目录名字`，其中本地目录名字经常不写，使用 git 的项目名字。\n\n这样，代码就被我们克隆到本地了。\n\n\n\n## git 操作流程\n\n我们下载代码后，进行修改，要想最终上传到服务器，流程是这样的。\n\n1. 确定要提交的文件，添加到版本库的暂存区中。你可能这次修改了10个文件，但是仅仅打算提交2个文件。\n2. 针对第一步确定的文件，填写注释并提交到本地 git 仓库。\n3. 将本地仓库的变更，推送到服务器仓库。\n\n注意：流程可以是1->2->3，也可以是反复的1->2，或者1->1->1再提交2，最后一起推送3。\n\n\n## 修改了代码，添加文件到暂存区\n\n首先，我们先要添加一些文件，就叫做 `index.html` 和 `src/index.js`吧。随便写点什么都行。\n\n**检查下 git 文件状态**\n\n```sh\ngit status\n# 或者简单模式查看\ngit status -s\n```\n\n结果为：\n\n```sh\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n\tindex.html\n\tsrc/\n\n```\n\ngit 提示我们有 （红色的）`index.html` 和 `src/` 没有添加到版本中。\n\n\n\n**添加文件到版本库中**\n\n我们要把本次即将提交的文件添加到版本库中，这样 git 才会追踪文件的修改。\n\n添加方法很简单，常用有以下几种方法：\n\n```sh\ngit add . # 添加所有文件\ngit add index.html # 添加指定的文件(index.html)\ngit add src/ # 添加指定的目录\ngit add *.html # 添加扩展名是html的文件\n```\n\n如果本次我仅仅想提交 `index.html`，但是我使用了 `git add .`命令，这样会导致把其他目录也添加到本次待提交暂存区。咋办？我比较笨，不知道如何移除单独的目录，所以用的笨方法，将本次添加的文件全部重置掉：\n\n```sh\ngit reset\n```\n\n之后重新添加就好了。\n\n你可以试试 `git status`，查看下状态：\n\n```sh\nnew file:   index.html\nnew file:   src/index.js\n```\n\n会有绿色的文件提示了。绿色表示新增加。\n\n\n\n## 填写注释，提交代码到本地仓库\n\n首先说明的是，必须要有上一步 `git add`，添加文件到暂存区，否则这步没办法提交。\n\n提交上一步的代码，建议写一点注释：\n\n```sh\ngit commit -m \"add files\"\n```\n\n这里 `-m` 表示 `message` ，后面写注释就好了。\n\n之后，我们查看下状态吧， `git status`：\n\n```sh\nOn branch master\nYour branch is ahead of 'origin/master' by 1 commit.\n  (use \"git push\" to publish your local commits)\nnothing to commit, working tree clean\n```\n\n它提示我们，现在本地的分支，比服务器的 `origin/master` 分支多了一条。\n\n\n\n## 将本地的修改，推送到服务器\n\n上面一步已经提示我们，本地比服务器代码更加超前，那么需要将本地的代码，推送到服务器上面。\n\ngit 命令是 `git push <远程主机名> <本地分支名>  <远程分支名>`\n\n```sh\ngit push origin master master # 远程主机叫做origin，本地分支默认为master，提交到远程分支master上\ngit push origin master # 远程主机叫做origin，本地分支默认为master，远程主机分支不写则同本地分支\ngit push origin # 将本地当前分支直接推送到远程主机当前分支\ngit push # 将本地当前分支直接推送到默认远程分支\n# 所有的操作，如果远程分支不存在则自动创建分支\n```\n\n一般来讲，我们都用最简单的，第四句。除非需要拉一个新的分支，否则其他写法很少用到。\n\n这里还有一点需要说明，假设你是在17:00进行了 `git commit`，之后忘记同步到服务器了。到了17:30想起来了，进行了 `git push`。在服务器上查看你的提交历史，**是17:00提交的**，绝不是17:30。\n\n\n\n## 总结\n\n这次，学习了以下命令：\n\n* `git clone` 从服务器克隆代码到本地\n* `git status` 查看文件状态\n* `git add` 添加文件到暂存区\n* `git reset` 重置文件暂存区\n* `git commit -m \"message\"` 提交当前暂存区并加入注释\n* `git push` 提交本地git变更到服务器\n\n","slug":"2017-2017-06-17-git-study","published":1,"updated":"2020-03-06T01:27:17.606Z","comments":1,"photos":[],"link":"","_id":"cka5ik8bj002tnybglw3ukyzm","content":"<p>一直使用 git，但都是通过软件进行操作，基本上也没有实际用过 git 命令。本着多掌握一些英语单词的思想，还是学习一下 git 使用为好。</p>\n<a id=\"more\"></a>\n\n<blockquote>\n<p> 因为我的机器里面已经用 sourceTree 登录过 github / coding.net 了，所以 git 不会再要求输入密码了。</p>\n</blockquote>\n<h2 id=\"从服务器克隆（下载）代码仓库\"><a href=\"#从服务器克隆（下载）代码仓库\" class=\"headerlink\" title=\"从服务器克隆（下载）代码仓库\"></a>从服务器克隆（下载）代码仓库</h2><p>假设代码存放在 coding.net。项目地址：<code>https://git.coding.net/yukapril/git-study.git</code>。</p>\n<p>一般很少需要直接本地建立 git 仓库，之后上传到服务器上，这些活都应该是版本管理员做的，所以我就省略了。</p>\n<p><strong>首先，克隆代码到本地</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 首先通过 cd 切换到你要克隆到的位置</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://git.coding.net/yukapril/git-study.git git-study</span><br><span class=\"line\"><span class=\"comment\"># 也可以简写为</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://git.coding.net/yukapril/git-study.git</span><br></pre></td></tr></table></figure>\n\n<p>命令格式为：<code>git clone 远程地址 本地目录名字</code>，其中本地目录名字经常不写，使用 git 的项目名字。</p>\n<p>这样，代码就被我们克隆到本地了。</p>\n<h2 id=\"git-操作流程\"><a href=\"#git-操作流程\" class=\"headerlink\" title=\"git 操作流程\"></a>git 操作流程</h2><p>我们下载代码后，进行修改，要想最终上传到服务器，流程是这样的。</p>\n<ol>\n<li>确定要提交的文件，添加到版本库的暂存区中。你可能这次修改了10个文件，但是仅仅打算提交2个文件。</li>\n<li>针对第一步确定的文件，填写注释并提交到本地 git 仓库。</li>\n<li>将本地仓库的变更，推送到服务器仓库。</li>\n</ol>\n<p>注意：流程可以是1-&gt;2-&gt;3，也可以是反复的1-&gt;2，或者1-&gt;1-&gt;1再提交2，最后一起推送3。</p>\n<h2 id=\"修改了代码，添加文件到暂存区\"><a href=\"#修改了代码，添加文件到暂存区\" class=\"headerlink\" title=\"修改了代码，添加文件到暂存区\"></a>修改了代码，添加文件到暂存区</h2><p>首先，我们先要添加一些文件，就叫做 <code>index.html</code> 和 <code>src/index.js</code>吧。随便写点什么都行。</p>\n<p><strong>检查下 git 文件状态</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br><span class=\"line\"><span class=\"comment\"># 或者简单模式查看</span></span><br><span class=\"line\">git status -s</span><br></pre></td></tr></table></figure>\n\n<p>结果为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">On branch master</span><br><span class=\"line\">Your branch is up-to-date with <span class=\"string\">'origin/master'</span>.</span><br><span class=\"line\">Untracked files:</span><br><span class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to include <span class=\"keyword\">in</span> what will be committed)</span><br><span class=\"line\"></span><br><span class=\"line\">\tindex.html</span><br><span class=\"line\">\tsrc/</span><br></pre></td></tr></table></figure>\n\n<p>git 提示我们有 （红色的）<code>index.html</code> 和 <code>src/</code> 没有添加到版本中。</p>\n<p><strong>添加文件到版本库中</strong></p>\n<p>我们要把本次即将提交的文件添加到版本库中，这样 git 才会追踪文件的修改。</p>\n<p>添加方法很简单，常用有以下几种方法：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add . <span class=\"comment\"># 添加所有文件</span></span><br><span class=\"line\">git add index.html <span class=\"comment\"># 添加指定的文件(index.html)</span></span><br><span class=\"line\">git add src/ <span class=\"comment\"># 添加指定的目录</span></span><br><span class=\"line\">git add *.html <span class=\"comment\"># 添加扩展名是html的文件</span></span><br></pre></td></tr></table></figure>\n\n<p>如果本次我仅仅想提交 <code>index.html</code>，但是我使用了 <code>git add .</code>命令，这样会导致把其他目录也添加到本次待提交暂存区。咋办？我比较笨，不知道如何移除单独的目录，所以用的笨方法，将本次添加的文件全部重置掉：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset</span><br></pre></td></tr></table></figure>\n\n<p>之后重新添加就好了。</p>\n<p>你可以试试 <code>git status</code>，查看下状态：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new file:   index.html</span><br><span class=\"line\">new file:   src/index.js</span><br></pre></td></tr></table></figure>\n\n<p>会有绿色的文件提示了。绿色表示新增加。</p>\n<h2 id=\"填写注释，提交代码到本地仓库\"><a href=\"#填写注释，提交代码到本地仓库\" class=\"headerlink\" title=\"填写注释，提交代码到本地仓库\"></a>填写注释，提交代码到本地仓库</h2><p>首先说明的是，必须要有上一步 <code>git add</code>，添加文件到暂存区，否则这步没办法提交。</p>\n<p>提交上一步的代码，建议写一点注释：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">\"add files\"</span></span><br></pre></td></tr></table></figure>\n\n<p>这里 <code>-m</code> 表示 <code>message</code> ，后面写注释就好了。</p>\n<p>之后，我们查看下状态吧， <code>git status</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">On branch master</span><br><span class=\"line\">Your branch is ahead of <span class=\"string\">'origin/master'</span> by 1 commit.</span><br><span class=\"line\">  (use <span class=\"string\">\"git push\"</span> to publish your <span class=\"built_in\">local</span> commits)</span><br><span class=\"line\">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>\n\n<p>它提示我们，现在本地的分支，比服务器的 <code>origin/master</code> 分支多了一条。</p>\n<h2 id=\"将本地的修改，推送到服务器\"><a href=\"#将本地的修改，推送到服务器\" class=\"headerlink\" title=\"将本地的修改，推送到服务器\"></a>将本地的修改，推送到服务器</h2><p>上面一步已经提示我们，本地比服务器代码更加超前，那么需要将本地的代码，推送到服务器上面。</p>\n<p>git 命令是 <code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;  &lt;远程分支名&gt;</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master master <span class=\"comment\"># 远程主机叫做origin，本地分支默认为master，提交到远程分支master上</span></span><br><span class=\"line\">git push origin master <span class=\"comment\"># 远程主机叫做origin，本地分支默认为master，远程主机分支不写则同本地分支</span></span><br><span class=\"line\">git push origin <span class=\"comment\"># 将本地当前分支直接推送到远程主机当前分支</span></span><br><span class=\"line\">git push <span class=\"comment\"># 将本地当前分支直接推送到默认远程分支</span></span><br><span class=\"line\"><span class=\"comment\"># 所有的操作，如果远程分支不存在则自动创建分支</span></span><br></pre></td></tr></table></figure>\n\n<p>一般来讲，我们都用最简单的，第四句。除非需要拉一个新的分支，否则其他写法很少用到。</p>\n<p>这里还有一点需要说明，假设你是在17:00进行了 <code>git commit</code>，之后忘记同步到服务器了。到了17:30想起来了，进行了 <code>git push</code>。在服务器上查看你的提交历史，<strong>是17:00提交的</strong>，绝不是17:30。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这次，学习了以下命令：</p>\n<ul>\n<li><code>git clone</code> 从服务器克隆代码到本地</li>\n<li><code>git status</code> 查看文件状态</li>\n<li><code>git add</code> 添加文件到暂存区</li>\n<li><code>git reset</code> 重置文件暂存区</li>\n<li><code>git commit -m &quot;message&quot;</code> 提交当前暂存区并加入注释</li>\n<li><code>git push</code> 提交本地git变更到服务器</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>一直使用 git，但都是通过软件进行操作，基本上也没有实际用过 git 命令。本着多掌握一些英语单词的思想，还是学习一下 git 使用为好。</p>","more":"<blockquote>\n<p> 因为我的机器里面已经用 sourceTree 登录过 github / coding.net 了，所以 git 不会再要求输入密码了。</p>\n</blockquote>\n<h2 id=\"从服务器克隆（下载）代码仓库\"><a href=\"#从服务器克隆（下载）代码仓库\" class=\"headerlink\" title=\"从服务器克隆（下载）代码仓库\"></a>从服务器克隆（下载）代码仓库</h2><p>假设代码存放在 coding.net。项目地址：<code>https://git.coding.net/yukapril/git-study.git</code>。</p>\n<p>一般很少需要直接本地建立 git 仓库，之后上传到服务器上，这些活都应该是版本管理员做的，所以我就省略了。</p>\n<p><strong>首先，克隆代码到本地</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 首先通过 cd 切换到你要克隆到的位置</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://git.coding.net/yukapril/git-study.git git-study</span><br><span class=\"line\"><span class=\"comment\"># 也可以简写为</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://git.coding.net/yukapril/git-study.git</span><br></pre></td></tr></table></figure>\n\n<p>命令格式为：<code>git clone 远程地址 本地目录名字</code>，其中本地目录名字经常不写，使用 git 的项目名字。</p>\n<p>这样，代码就被我们克隆到本地了。</p>\n<h2 id=\"git-操作流程\"><a href=\"#git-操作流程\" class=\"headerlink\" title=\"git 操作流程\"></a>git 操作流程</h2><p>我们下载代码后，进行修改，要想最终上传到服务器，流程是这样的。</p>\n<ol>\n<li>确定要提交的文件，添加到版本库的暂存区中。你可能这次修改了10个文件，但是仅仅打算提交2个文件。</li>\n<li>针对第一步确定的文件，填写注释并提交到本地 git 仓库。</li>\n<li>将本地仓库的变更，推送到服务器仓库。</li>\n</ol>\n<p>注意：流程可以是1-&gt;2-&gt;3，也可以是反复的1-&gt;2，或者1-&gt;1-&gt;1再提交2，最后一起推送3。</p>\n<h2 id=\"修改了代码，添加文件到暂存区\"><a href=\"#修改了代码，添加文件到暂存区\" class=\"headerlink\" title=\"修改了代码，添加文件到暂存区\"></a>修改了代码，添加文件到暂存区</h2><p>首先，我们先要添加一些文件，就叫做 <code>index.html</code> 和 <code>src/index.js</code>吧。随便写点什么都行。</p>\n<p><strong>检查下 git 文件状态</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br><span class=\"line\"><span class=\"comment\"># 或者简单模式查看</span></span><br><span class=\"line\">git status -s</span><br></pre></td></tr></table></figure>\n\n<p>结果为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">On branch master</span><br><span class=\"line\">Your branch is up-to-date with <span class=\"string\">'origin/master'</span>.</span><br><span class=\"line\">Untracked files:</span><br><span class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to include <span class=\"keyword\">in</span> what will be committed)</span><br><span class=\"line\"></span><br><span class=\"line\">\tindex.html</span><br><span class=\"line\">\tsrc/</span><br></pre></td></tr></table></figure>\n\n<p>git 提示我们有 （红色的）<code>index.html</code> 和 <code>src/</code> 没有添加到版本中。</p>\n<p><strong>添加文件到版本库中</strong></p>\n<p>我们要把本次即将提交的文件添加到版本库中，这样 git 才会追踪文件的修改。</p>\n<p>添加方法很简单，常用有以下几种方法：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add . <span class=\"comment\"># 添加所有文件</span></span><br><span class=\"line\">git add index.html <span class=\"comment\"># 添加指定的文件(index.html)</span></span><br><span class=\"line\">git add src/ <span class=\"comment\"># 添加指定的目录</span></span><br><span class=\"line\">git add *.html <span class=\"comment\"># 添加扩展名是html的文件</span></span><br></pre></td></tr></table></figure>\n\n<p>如果本次我仅仅想提交 <code>index.html</code>，但是我使用了 <code>git add .</code>命令，这样会导致把其他目录也添加到本次待提交暂存区。咋办？我比较笨，不知道如何移除单独的目录，所以用的笨方法，将本次添加的文件全部重置掉：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset</span><br></pre></td></tr></table></figure>\n\n<p>之后重新添加就好了。</p>\n<p>你可以试试 <code>git status</code>，查看下状态：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new file:   index.html</span><br><span class=\"line\">new file:   src/index.js</span><br></pre></td></tr></table></figure>\n\n<p>会有绿色的文件提示了。绿色表示新增加。</p>\n<h2 id=\"填写注释，提交代码到本地仓库\"><a href=\"#填写注释，提交代码到本地仓库\" class=\"headerlink\" title=\"填写注释，提交代码到本地仓库\"></a>填写注释，提交代码到本地仓库</h2><p>首先说明的是，必须要有上一步 <code>git add</code>，添加文件到暂存区，否则这步没办法提交。</p>\n<p>提交上一步的代码，建议写一点注释：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">\"add files\"</span></span><br></pre></td></tr></table></figure>\n\n<p>这里 <code>-m</code> 表示 <code>message</code> ，后面写注释就好了。</p>\n<p>之后，我们查看下状态吧， <code>git status</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">On branch master</span><br><span class=\"line\">Your branch is ahead of <span class=\"string\">'origin/master'</span> by 1 commit.</span><br><span class=\"line\">  (use <span class=\"string\">\"git push\"</span> to publish your <span class=\"built_in\">local</span> commits)</span><br><span class=\"line\">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>\n\n<p>它提示我们，现在本地的分支，比服务器的 <code>origin/master</code> 分支多了一条。</p>\n<h2 id=\"将本地的修改，推送到服务器\"><a href=\"#将本地的修改，推送到服务器\" class=\"headerlink\" title=\"将本地的修改，推送到服务器\"></a>将本地的修改，推送到服务器</h2><p>上面一步已经提示我们，本地比服务器代码更加超前，那么需要将本地的代码，推送到服务器上面。</p>\n<p>git 命令是 <code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;  &lt;远程分支名&gt;</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master master <span class=\"comment\"># 远程主机叫做origin，本地分支默认为master，提交到远程分支master上</span></span><br><span class=\"line\">git push origin master <span class=\"comment\"># 远程主机叫做origin，本地分支默认为master，远程主机分支不写则同本地分支</span></span><br><span class=\"line\">git push origin <span class=\"comment\"># 将本地当前分支直接推送到远程主机当前分支</span></span><br><span class=\"line\">git push <span class=\"comment\"># 将本地当前分支直接推送到默认远程分支</span></span><br><span class=\"line\"><span class=\"comment\"># 所有的操作，如果远程分支不存在则自动创建分支</span></span><br></pre></td></tr></table></figure>\n\n<p>一般来讲，我们都用最简单的，第四句。除非需要拉一个新的分支，否则其他写法很少用到。</p>\n<p>这里还有一点需要说明，假设你是在17:00进行了 <code>git commit</code>，之后忘记同步到服务器了。到了17:30想起来了，进行了 <code>git push</code>。在服务器上查看你的提交历史，<strong>是17:00提交的</strong>，绝不是17:30。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这次，学习了以下命令：</p>\n<ul>\n<li><code>git clone</code> 从服务器克隆代码到本地</li>\n<li><code>git status</code> 查看文件状态</li>\n<li><code>git add</code> 添加文件到暂存区</li>\n<li><code>git reset</code> 重置文件暂存区</li>\n<li><code>git commit -m &quot;message&quot;</code> 提交当前暂存区并加入注释</li>\n<li><code>git push</code> 提交本地git变更到服务器</li>\n</ul>"},{"layout":"post","title":"elementUI Message 独立引入的用法","date":"2017-07-12T13:04:00.000Z","_content":"\n今天在做项目时候，用到了 elementUI 的 Message 组件。因为我是按需 `import` 引入的方法，结果按照原本的文档API代码不生效。\n\n<!-- more -->\n\n## 查看文档\n\n来看下，[elementUI - Message 文档](http://element.eleme.io/#/zh-CN/component/message) 的说明如下\n\n> **全局方法**\n>\n> Element 为 Vue.prototype 添加了全局方法 $message。因此在 vue instance 中可以采用本页面中的方式调用 Message。\n>\n> **单独引用**\n>\n> 单独引入 Message：\n>\n> `import { Message } from 'element-ui';`\n>\n> 此时调用方法为 `Message(options)`。我们也为每个 type 定义了各自的方法，如 `Message.success(options)`。 并且可以调用 `Message.closeAll()` 手动关闭所有实例。\n\n简答来说，如果是全局引入的话，直接按照文档方法就可以使用了，见下：\n\n```js\nexport default {\n  methods: {\n    open() {\n      this.$message.error('错误信息');\n    }\n  }\n}\n```\n\n但是如果是单独引入的，就只能在某个vue单文件组件中这样来实现：\n\n```js\nimport { Message } from 'element-ui';\nexport default {\n  methods: {\n    open() {\n      Message.error('错误信息');\n    }\n  }\n}\n```\n\n每个组件中，都需要引入 Message，太繁琐了。能不能像全局引入一样用 `this.$message` 呢\n\n## 问题原因及解决\n\n查看下 `element-ui/package/message/index.js` 的实现方法，结果发现：\n\n```js\nimport Message from './src/main.js';\nexport default Message;\n```\n\n直接返回了。\n\n而其他的组件，一般都是有 `install` 方法供Vue来操作的。\n\n知道问题所在就好解决了，给 Message 添加 install 方法就行了。\n\n```js\n// 和其他组件一样，一并引入\nimport {Button, Message} from 'element-ui'\n\n// 在调用 Vue.use 前，给 Message 添加 install 方法\nMessage.install = function (Vue, options) {\n  Vue.prototype.$message = Message\n}\n\n// 和所有组件一样，一并进行use\nVue.use(Button)\nVue.use(Message)\n```\n\n当然，也可以不用 Vue.use 来实现，比如直接写在 Vue 实例上：\n```js\n// 和其他组件一样，一并引入\nimport {Button, Message} from 'element-ui'\n\nVue.use(Button)\n\n// 将 Message 直接挂在 Vue 实例上\nVue.prototype.$message = Message\n```\n\n我比较倾向第一种方案，写法比较规矩而已。\n","source":"_posts/2017/2017-07-12-vue-elementui-message.md","raw":"---\nlayout: post\ntitle: \"elementUI Message 独立引入的用法\"\ndate: 2017-07-12 13:04:00 GMT+0800\ncategories: [前端]\ntags:  [vue,elementUI]\n---\n\n今天在做项目时候，用到了 elementUI 的 Message 组件。因为我是按需 `import` 引入的方法，结果按照原本的文档API代码不生效。\n\n<!-- more -->\n\n## 查看文档\n\n来看下，[elementUI - Message 文档](http://element.eleme.io/#/zh-CN/component/message) 的说明如下\n\n> **全局方法**\n>\n> Element 为 Vue.prototype 添加了全局方法 $message。因此在 vue instance 中可以采用本页面中的方式调用 Message。\n>\n> **单独引用**\n>\n> 单独引入 Message：\n>\n> `import { Message } from 'element-ui';`\n>\n> 此时调用方法为 `Message(options)`。我们也为每个 type 定义了各自的方法，如 `Message.success(options)`。 并且可以调用 `Message.closeAll()` 手动关闭所有实例。\n\n简答来说，如果是全局引入的话，直接按照文档方法就可以使用了，见下：\n\n```js\nexport default {\n  methods: {\n    open() {\n      this.$message.error('错误信息');\n    }\n  }\n}\n```\n\n但是如果是单独引入的，就只能在某个vue单文件组件中这样来实现：\n\n```js\nimport { Message } from 'element-ui';\nexport default {\n  methods: {\n    open() {\n      Message.error('错误信息');\n    }\n  }\n}\n```\n\n每个组件中，都需要引入 Message，太繁琐了。能不能像全局引入一样用 `this.$message` 呢\n\n## 问题原因及解决\n\n查看下 `element-ui/package/message/index.js` 的实现方法，结果发现：\n\n```js\nimport Message from './src/main.js';\nexport default Message;\n```\n\n直接返回了。\n\n而其他的组件，一般都是有 `install` 方法供Vue来操作的。\n\n知道问题所在就好解决了，给 Message 添加 install 方法就行了。\n\n```js\n// 和其他组件一样，一并引入\nimport {Button, Message} from 'element-ui'\n\n// 在调用 Vue.use 前，给 Message 添加 install 方法\nMessage.install = function (Vue, options) {\n  Vue.prototype.$message = Message\n}\n\n// 和所有组件一样，一并进行use\nVue.use(Button)\nVue.use(Message)\n```\n\n当然，也可以不用 Vue.use 来实现，比如直接写在 Vue 实例上：\n```js\n// 和其他组件一样，一并引入\nimport {Button, Message} from 'element-ui'\n\nVue.use(Button)\n\n// 将 Message 直接挂在 Vue 实例上\nVue.prototype.$message = Message\n```\n\n我比较倾向第一种方案，写法比较规矩而已。\n","slug":"2017-2017-07-12-vue-elementui-message","published":1,"updated":"2020-03-02T07:16:34.652Z","comments":1,"photos":[],"link":"","_id":"cka5ik8bk002wnybg0aikv8c7","content":"<p>今天在做项目时候，用到了 elementUI 的 Message 组件。因为我是按需 <code>import</code> 引入的方法，结果按照原本的文档API代码不生效。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"查看文档\"><a href=\"#查看文档\" class=\"headerlink\" title=\"查看文档\"></a>查看文档</h2><p>来看下，<a href=\"http://element.eleme.io/#/zh-CN/component/message\" target=\"_blank\" rel=\"noopener\">elementUI - Message 文档</a> 的说明如下</p>\n<blockquote>\n<p><strong>全局方法</strong></p>\n<p>Element 为 Vue.prototype 添加了全局方法 $message。因此在 vue instance 中可以采用本页面中的方式调用 Message。</p>\n<p><strong>单独引用</strong></p>\n<p>单独引入 Message：</p>\n<p><code>import { Message } from &#39;element-ui&#39;;</code></p>\n<p>此时调用方法为 <code>Message(options)</code>。我们也为每个 type 定义了各自的方法，如 <code>Message.success(options)</code>。 并且可以调用 <code>Message.closeAll()</code> 手动关闭所有实例。</p>\n</blockquote>\n<p>简答来说，如果是全局引入的话，直接按照文档方法就可以使用了，见下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    open() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$message.error(<span class=\"string\">'错误信息'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是如果是单独引入的，就只能在某个vue单文件组件中这样来实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Message &#125; <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    open() &#123;</span><br><span class=\"line\">      Message.error(<span class=\"string\">'错误信息'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每个组件中，都需要引入 Message，太繁琐了。能不能像全局引入一样用 <code>this.$message</code> 呢</p>\n<h2 id=\"问题原因及解决\"><a href=\"#问题原因及解决\" class=\"headerlink\" title=\"问题原因及解决\"></a>问题原因及解决</h2><p>查看下 <code>element-ui/package/message/index.js</code> 的实现方法，结果发现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Message <span class=\"keyword\">from</span> <span class=\"string\">'./src/main.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Message;</span><br></pre></td></tr></table></figure>\n\n<p>直接返回了。</p>\n<p>而其他的组件，一般都是有 <code>install</code> 方法供Vue来操作的。</p>\n<p>知道问题所在就好解决了，给 Message 添加 install 方法就行了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 和其他组件一样，一并引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Button, Message&#125; <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在调用 Vue.use 前，给 Message 添加 install 方法</span></span><br><span class=\"line\">Message.install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue, options</span>) </span>&#123;</span><br><span class=\"line\">  Vue.prototype.$message = Message</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 和所有组件一样，一并进行use</span></span><br><span class=\"line\">Vue.use(Button)</span><br><span class=\"line\">Vue.use(Message)</span><br></pre></td></tr></table></figure>\n\n<p>当然，也可以不用 Vue.use 来实现，比如直接写在 Vue 实例上：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 和其他组件一样，一并引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Button, Message&#125; <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Button)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 Message 直接挂在 Vue 实例上</span></span><br><span class=\"line\">Vue.prototype.$message = Message</span><br></pre></td></tr></table></figure>\n\n<p>我比较倾向第一种方案，写法比较规矩而已。</p>\n","site":{"data":{}},"excerpt":"<p>今天在做项目时候，用到了 elementUI 的 Message 组件。因为我是按需 <code>import</code> 引入的方法，结果按照原本的文档API代码不生效。</p>","more":"<h2 id=\"查看文档\"><a href=\"#查看文档\" class=\"headerlink\" title=\"查看文档\"></a>查看文档</h2><p>来看下，<a href=\"http://element.eleme.io/#/zh-CN/component/message\" target=\"_blank\" rel=\"noopener\">elementUI - Message 文档</a> 的说明如下</p>\n<blockquote>\n<p><strong>全局方法</strong></p>\n<p>Element 为 Vue.prototype 添加了全局方法 $message。因此在 vue instance 中可以采用本页面中的方式调用 Message。</p>\n<p><strong>单独引用</strong></p>\n<p>单独引入 Message：</p>\n<p><code>import { Message } from &#39;element-ui&#39;;</code></p>\n<p>此时调用方法为 <code>Message(options)</code>。我们也为每个 type 定义了各自的方法，如 <code>Message.success(options)</code>。 并且可以调用 <code>Message.closeAll()</code> 手动关闭所有实例。</p>\n</blockquote>\n<p>简答来说，如果是全局引入的话，直接按照文档方法就可以使用了，见下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    open() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$message.error(<span class=\"string\">'错误信息'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是如果是单独引入的，就只能在某个vue单文件组件中这样来实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Message &#125; <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    open() &#123;</span><br><span class=\"line\">      Message.error(<span class=\"string\">'错误信息'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每个组件中，都需要引入 Message，太繁琐了。能不能像全局引入一样用 <code>this.$message</code> 呢</p>\n<h2 id=\"问题原因及解决\"><a href=\"#问题原因及解决\" class=\"headerlink\" title=\"问题原因及解决\"></a>问题原因及解决</h2><p>查看下 <code>element-ui/package/message/index.js</code> 的实现方法，结果发现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Message <span class=\"keyword\">from</span> <span class=\"string\">'./src/main.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Message;</span><br></pre></td></tr></table></figure>\n\n<p>直接返回了。</p>\n<p>而其他的组件，一般都是有 <code>install</code> 方法供Vue来操作的。</p>\n<p>知道问题所在就好解决了，给 Message 添加 install 方法就行了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 和其他组件一样，一并引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Button, Message&#125; <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在调用 Vue.use 前，给 Message 添加 install 方法</span></span><br><span class=\"line\">Message.install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue, options</span>) </span>&#123;</span><br><span class=\"line\">  Vue.prototype.$message = Message</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 和所有组件一样，一并进行use</span></span><br><span class=\"line\">Vue.use(Button)</span><br><span class=\"line\">Vue.use(Message)</span><br></pre></td></tr></table></figure>\n\n<p>当然，也可以不用 Vue.use 来实现，比如直接写在 Vue 实例上：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 和其他组件一样，一并引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Button, Message&#125; <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Button)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 Message 直接挂在 Vue 实例上</span></span><br><span class=\"line\">Vue.prototype.$message = Message</span><br></pre></td></tr></table></figure>\n\n<p>我比较倾向第一种方案，写法比较规矩而已。</p>"},{"layout":"post","title":"ruby jekyll 的安装","date":"2017-07-27T22:50:00.000Z","_content":"\n突然发现，自己博客没有 `jekyll` 的安装方法。\n\n之前笔记本重装系统，也就没有安装 `ruby`，装好后记录一下。\n\n<!-- more -->\n\n## 首先安装 ruby\n\n下载地址： http://www.ruby-lang.org/en/documentation/installation/\n\n### windows\n\n需要选择 [RubyInstaller](https://rubyinstaller.org/downloads/)，其他系统就没那么多事情。至于DevKit，我觉得无所谓，可以不下载。\n\n### MacOS\n\n自带ruby，需要升级。一般都是采用 rvm 独立安装一套。\n\n``` bash\n$ curl -L get.rvm.io | bash -s stable\n```\n\n之后有提示，会要求把一行代码写入 `~/.bash_profile` 中，按要求写入就行了。之后重启一个控制台就可以使用 rvm 了。\n\n之后就可以安装 ruby 了：\n\n```bash\nrvm install 2.4.1\n```\n\n其中2.4.1是目前最新的版本。\n\n装好之后，验证一下：\n\n```bash\nruby -v\ngem -v\n```\n\n可以查看安装的版本号。\n\n## 安装 jekyll\n\n需要通过 `gem` 安装 `jekyll` 和 `bundle`，不安装 `bundle` 就没办法启动打包。\n\n```bash\ngem install jekyll bundler\n```\n\n装好之后，验证一下：\n\n```bash\njekyll -v\nbundle -v\n```\n\n可以查看安装的版本号。\n\n## 使用 jekyll 创建博客\n\n进入一个目录，然后：\n\n```bash\njekyll new blog\n```\n\n这样就创建了一个叫做 blog 的默认博客了。\n\n\n## 启动报错\n\n最常见的问题就是从网上找到的 jekyll 主题，他们用了插件，你没有安装。\n\n比如会有提示缺少 `jekyll-paginate` 分页插件，安装即可：\n\n```bash\ngem install jekyll-paginate\n```","source":"_posts/2017/2017-07-27-ruby.md","raw":"---\nlayout: post\ntitle: \"ruby jekyll 的安装\"\ndate: 2017-07-27 22:50:00 GMT+0800\ncategories: [技术]\ntags:  [ruby,jekyll]\n---\n\n突然发现，自己博客没有 `jekyll` 的安装方法。\n\n之前笔记本重装系统，也就没有安装 `ruby`，装好后记录一下。\n\n<!-- more -->\n\n## 首先安装 ruby\n\n下载地址： http://www.ruby-lang.org/en/documentation/installation/\n\n### windows\n\n需要选择 [RubyInstaller](https://rubyinstaller.org/downloads/)，其他系统就没那么多事情。至于DevKit，我觉得无所谓，可以不下载。\n\n### MacOS\n\n自带ruby，需要升级。一般都是采用 rvm 独立安装一套。\n\n``` bash\n$ curl -L get.rvm.io | bash -s stable\n```\n\n之后有提示，会要求把一行代码写入 `~/.bash_profile` 中，按要求写入就行了。之后重启一个控制台就可以使用 rvm 了。\n\n之后就可以安装 ruby 了：\n\n```bash\nrvm install 2.4.1\n```\n\n其中2.4.1是目前最新的版本。\n\n装好之后，验证一下：\n\n```bash\nruby -v\ngem -v\n```\n\n可以查看安装的版本号。\n\n## 安装 jekyll\n\n需要通过 `gem` 安装 `jekyll` 和 `bundle`，不安装 `bundle` 就没办法启动打包。\n\n```bash\ngem install jekyll bundler\n```\n\n装好之后，验证一下：\n\n```bash\njekyll -v\nbundle -v\n```\n\n可以查看安装的版本号。\n\n## 使用 jekyll 创建博客\n\n进入一个目录，然后：\n\n```bash\njekyll new blog\n```\n\n这样就创建了一个叫做 blog 的默认博客了。\n\n\n## 启动报错\n\n最常见的问题就是从网上找到的 jekyll 主题，他们用了插件，你没有安装。\n\n比如会有提示缺少 `jekyll-paginate` 分页插件，安装即可：\n\n```bash\ngem install jekyll-paginate\n```","slug":"2017-2017-07-27-ruby","published":1,"updated":"2020-03-06T01:42:19.623Z","comments":1,"photos":[],"link":"","_id":"cka5ik8bl002ynybga146zs7y","content":"<p>突然发现，自己博客没有 <code>jekyll</code> 的安装方法。</p>\n<p>之前笔记本重装系统，也就没有安装 <code>ruby</code>，装好后记录一下。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"首先安装-ruby\"><a href=\"#首先安装-ruby\" class=\"headerlink\" title=\"首先安装 ruby\"></a>首先安装 ruby</h2><p>下载地址： <a href=\"http://www.ruby-lang.org/en/documentation/installation/\" target=\"_blank\" rel=\"noopener\">http://www.ruby-lang.org/en/documentation/installation/</a></p>\n<h3 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h3><p>需要选择 <a href=\"https://rubyinstaller.org/downloads/\" target=\"_blank\" rel=\"noopener\">RubyInstaller</a>，其他系统就没那么多事情。至于DevKit，我觉得无所谓，可以不下载。</p>\n<h3 id=\"MacOS\"><a href=\"#MacOS\" class=\"headerlink\" title=\"MacOS\"></a>MacOS</h3><p>自带ruby，需要升级。一般都是采用 rvm 独立安装一套。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -L get.rvm.io | bash -s stable</span><br></pre></td></tr></table></figure>\n\n<p>之后有提示，会要求把一行代码写入 <code>~/.bash_profile</code> 中，按要求写入就行了。之后重启一个控制台就可以使用 rvm 了。</p>\n<p>之后就可以安装 ruby 了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm install 2.4.1</span><br></pre></td></tr></table></figure>\n\n<p>其中2.4.1是目前最新的版本。</p>\n<p>装好之后，验证一下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby -v</span><br><span class=\"line\">gem -v</span><br></pre></td></tr></table></figure>\n\n<p>可以查看安装的版本号。</p>\n<h2 id=\"安装-jekyll\"><a href=\"#安装-jekyll\" class=\"headerlink\" title=\"安装 jekyll\"></a>安装 jekyll</h2><p>需要通过 <code>gem</code> 安装 <code>jekyll</code> 和 <code>bundle</code>，不安装 <code>bundle</code> 就没办法启动打包。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install jekyll bundler</span><br></pre></td></tr></table></figure>\n\n<p>装好之后，验证一下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jekyll -v</span><br><span class=\"line\">bundle -v</span><br></pre></td></tr></table></figure>\n\n<p>可以查看安装的版本号。</p>\n<h2 id=\"使用-jekyll-创建博客\"><a href=\"#使用-jekyll-创建博客\" class=\"headerlink\" title=\"使用 jekyll 创建博客\"></a>使用 jekyll 创建博客</h2><p>进入一个目录，然后：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jekyll new blog</span><br></pre></td></tr></table></figure>\n\n<p>这样就创建了一个叫做 blog 的默认博客了。</p>\n<h2 id=\"启动报错\"><a href=\"#启动报错\" class=\"headerlink\" title=\"启动报错\"></a>启动报错</h2><p>最常见的问题就是从网上找到的 jekyll 主题，他们用了插件，你没有安装。</p>\n<p>比如会有提示缺少 <code>jekyll-paginate</code> 分页插件，安装即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install jekyll-paginate</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>突然发现，自己博客没有 <code>jekyll</code> 的安装方法。</p>\n<p>之前笔记本重装系统，也就没有安装 <code>ruby</code>，装好后记录一下。</p>","more":"<h2 id=\"首先安装-ruby\"><a href=\"#首先安装-ruby\" class=\"headerlink\" title=\"首先安装 ruby\"></a>首先安装 ruby</h2><p>下载地址： <a href=\"http://www.ruby-lang.org/en/documentation/installation/\" target=\"_blank\" rel=\"noopener\">http://www.ruby-lang.org/en/documentation/installation/</a></p>\n<h3 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h3><p>需要选择 <a href=\"https://rubyinstaller.org/downloads/\" target=\"_blank\" rel=\"noopener\">RubyInstaller</a>，其他系统就没那么多事情。至于DevKit，我觉得无所谓，可以不下载。</p>\n<h3 id=\"MacOS\"><a href=\"#MacOS\" class=\"headerlink\" title=\"MacOS\"></a>MacOS</h3><p>自带ruby，需要升级。一般都是采用 rvm 独立安装一套。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -L get.rvm.io | bash -s stable</span><br></pre></td></tr></table></figure>\n\n<p>之后有提示，会要求把一行代码写入 <code>~/.bash_profile</code> 中，按要求写入就行了。之后重启一个控制台就可以使用 rvm 了。</p>\n<p>之后就可以安装 ruby 了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm install 2.4.1</span><br></pre></td></tr></table></figure>\n\n<p>其中2.4.1是目前最新的版本。</p>\n<p>装好之后，验证一下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby -v</span><br><span class=\"line\">gem -v</span><br></pre></td></tr></table></figure>\n\n<p>可以查看安装的版本号。</p>\n<h2 id=\"安装-jekyll\"><a href=\"#安装-jekyll\" class=\"headerlink\" title=\"安装 jekyll\"></a>安装 jekyll</h2><p>需要通过 <code>gem</code> 安装 <code>jekyll</code> 和 <code>bundle</code>，不安装 <code>bundle</code> 就没办法启动打包。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install jekyll bundler</span><br></pre></td></tr></table></figure>\n\n<p>装好之后，验证一下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jekyll -v</span><br><span class=\"line\">bundle -v</span><br></pre></td></tr></table></figure>\n\n<p>可以查看安装的版本号。</p>\n<h2 id=\"使用-jekyll-创建博客\"><a href=\"#使用-jekyll-创建博客\" class=\"headerlink\" title=\"使用 jekyll 创建博客\"></a>使用 jekyll 创建博客</h2><p>进入一个目录，然后：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jekyll new blog</span><br></pre></td></tr></table></figure>\n\n<p>这样就创建了一个叫做 blog 的默认博客了。</p>\n<h2 id=\"启动报错\"><a href=\"#启动报错\" class=\"headerlink\" title=\"启动报错\"></a>启动报错</h2><p>最常见的问题就是从网上找到的 jekyll 主题，他们用了插件，你没有安装。</p>\n<p>比如会有提示缺少 <code>jekyll-paginate</code> 分页插件，安装即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install jekyll-paginate</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"webpack uglifyJS 在 IE8 下的兼容处理","date":"2017-08-05T11:34:00.000Z","_content":"\n最近在做组件项目，写 ES6 代码，通过 webpack3 进行打包，中途用 uglifyjs-webpack-plugin 插件进行压缩。\n\n考虑到各个项目都能用得上，所以最终打包格式选择了 `umd`。\n\n<!-- more -->\n\n## 基础处理\n\n首先，IE8 不支持的东西太多了，所以必须用垫片修补下。\n\n由于我确实不了解 `babel-polyfill`，而且组件可能不只这一个，也不可能只在一个项目中去用，看了下 `babel-polyfill` 的引入方式，基本上都是直接放到最终代码中的，在大项目中我认为算是首选。\n\n所以采用了 `shim` + `sham` 的方案，个别功能（比如 `Element.prototype.classList`），采用自己写补丁的方式实现。\n\n最终，在页面这样写：\n\n```html\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\"\n          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Test</title>\n    <!--[if lt IE 9]>\n    <script src=\"../lib/es5-shim.min.js\"></script>\n    <script src=\"../lib/es5-sham.min.js\"></script>\n    <![endif]-->\n    <!--[if lte IE 9]>\n    <script src=\"../lib/ie.min.js\"></script>\n    <![endif]-->\n</head>\n<body>\n  ...\n</body>\n</html>\n```\n\n通过 IE 的注释语法，特定情况下加载特定 JS 来实现。\n\n由于我需要针对 IE9 做一些补丁，所以额外打了一个 ie.min.js 补丁。\n\n这样，大部分ES5 的兼容性问题都可以解决了。\n\n\n\n## webpack\n\n首先说说 webpack，这个网上有人说，webpack1 支持 IE8，从 webpack2 开始不支持了。\n\n具体我没有深究，但是我用 webpack3，是可以实现兼容的。\n\n首先是必须打上面的补丁，让 IE8 支持 ES5，最重要的是 `sham` 也是必须的，主要用来实现 `Object.defineProperty` ，虽然可能稳定性欠佳。\n\nwebpack 打包（`umd` 方式）后，未压缩的代码部分：\n\n```js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Checkbox = function () {\n  function Checkbox(element) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Checkbox);\n  }\n  _createClass(Checkbox, [{\n    key: 'on',\n    value: function on() {    }\n  }]);\n  return Checkbox;\n}();\n```\n\n之后，webpack 采用 defineProperty 进行定义属性，所以才必须打这个补丁。\n\n可能 webpack1 最终打包的方式不同，不需要对 `Object.defineProperty` 打补丁，才有人说 webpack1 才支持 IE8 这种说法。\n\n本身，webpack 不需要做任何兼容处理修改，只需要之前的补丁即可。\n\n#### 小问题\n\n但是，在编译过程中，曾经遇到了一个问题，随后莫名其妙自己没问题了，尚不清楚原因所在。\n\n在上面代码中，有一步 `_classCallCheck(this,Checkbox)`，这个竟然 `throw new TypeError` 了，原本上用 `class Checkbox`，改成了 `function Checkbox(){}`，最后又改回去了，自己就好了。\n\n\n\n## 代码压缩 uglifyJS\n\n这个问题比较大，不过还好可以通过配置来解决。\n\n首先，webpack3 的插件 `uglifyjs-webpack-plugin` 目前只支持 `uglify-js` 2.x 系列。所以必须确保 `uglify-js` 是2.x 版本。\n\n> 就在写这篇文章前 9 天，`uglifyjs-webpack-plugin` 开始支持 `uglify-js` 3.x 系列了。\n\n上面这个解决，下面的问题就好说了。\n\n说先明确下，uglifyJS 默认压缩，不兼容 IE8 的，但是它有一个配置，可以兼容 IE8。\n\n方法描述摘抄如下：\n\n>```\n>--screw-ie8     Use this flag if you don't wish to support\n>                Internet Explorer 6/7/8.\n>                By default UglifyJS will not try to be IE-proof.\n>--support-ie8   Use this flag to support Internet Explorer 6/7/8.\n>                Equivalent to setting `screw_ie8: false` in `minify()`\n>                for `compress`, `mangle` and `output` options.\n>```\n\n意思是说， `--screw-ie8` 开启后，不支持IE6/7/8。但是可以关闭啊。默认是开启的。`--support-ie8` 也行，等同于设置 balabala 很多兼容 IE 的参数。\n\n这里有个坑，那就是：`uglifyjs-webpack-plugin` 不支持 `--support-ie8` 这个参数。[issue 见此](https://github.com/webpack/webpack/issues/3614)\n\n所以换成 `--screw-ie8`  就好了。具体配置如下：\n\n```js\nnew UglifyJSPlugin({\n    compress: {screw_ie8: false},\n    output: {screw_ie8: false},\n    mangle: {\n      screw_ie8: false, \n      except: ['$']\n    },\n    support_ie8: true\n})\n```\n\n就是在 `compress` 中写入 `screw_ie8` 就好了。\n\n**至于网上说的什么 IE8 不能支持混淆啥的，我没发现问题，可以使用混淆。**\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2017/2017-08-05-webpack-uglifyjs-ie8.md","raw":"---\nlayout: post\ntitle: \"webpack uglifyJS 在 IE8 下的兼容处理\"\ndate: 2017-08-05 11:34:00 GMT+0800\ncategories: [前端]\ntags:  [webpack,uglifyjs,ie8]\n---\n\n最近在做组件项目，写 ES6 代码，通过 webpack3 进行打包，中途用 uglifyjs-webpack-plugin 插件进行压缩。\n\n考虑到各个项目都能用得上，所以最终打包格式选择了 `umd`。\n\n<!-- more -->\n\n## 基础处理\n\n首先，IE8 不支持的东西太多了，所以必须用垫片修补下。\n\n由于我确实不了解 `babel-polyfill`，而且组件可能不只这一个，也不可能只在一个项目中去用，看了下 `babel-polyfill` 的引入方式，基本上都是直接放到最终代码中的，在大项目中我认为算是首选。\n\n所以采用了 `shim` + `sham` 的方案，个别功能（比如 `Element.prototype.classList`），采用自己写补丁的方式实现。\n\n最终，在页面这样写：\n\n```html\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\"\n          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Test</title>\n    <!--[if lt IE 9]>\n    <script src=\"../lib/es5-shim.min.js\"></script>\n    <script src=\"../lib/es5-sham.min.js\"></script>\n    <![endif]-->\n    <!--[if lte IE 9]>\n    <script src=\"../lib/ie.min.js\"></script>\n    <![endif]-->\n</head>\n<body>\n  ...\n</body>\n</html>\n```\n\n通过 IE 的注释语法，特定情况下加载特定 JS 来实现。\n\n由于我需要针对 IE9 做一些补丁，所以额外打了一个 ie.min.js 补丁。\n\n这样，大部分ES5 的兼容性问题都可以解决了。\n\n\n\n## webpack\n\n首先说说 webpack，这个网上有人说，webpack1 支持 IE8，从 webpack2 开始不支持了。\n\n具体我没有深究，但是我用 webpack3，是可以实现兼容的。\n\n首先是必须打上面的补丁，让 IE8 支持 ES5，最重要的是 `sham` 也是必须的，主要用来实现 `Object.defineProperty` ，虽然可能稳定性欠佳。\n\nwebpack 打包（`umd` 方式）后，未压缩的代码部分：\n\n```js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Checkbox = function () {\n  function Checkbox(element) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Checkbox);\n  }\n  _createClass(Checkbox, [{\n    key: 'on',\n    value: function on() {    }\n  }]);\n  return Checkbox;\n}();\n```\n\n之后，webpack 采用 defineProperty 进行定义属性，所以才必须打这个补丁。\n\n可能 webpack1 最终打包的方式不同，不需要对 `Object.defineProperty` 打补丁，才有人说 webpack1 才支持 IE8 这种说法。\n\n本身，webpack 不需要做任何兼容处理修改，只需要之前的补丁即可。\n\n#### 小问题\n\n但是，在编译过程中，曾经遇到了一个问题，随后莫名其妙自己没问题了，尚不清楚原因所在。\n\n在上面代码中，有一步 `_classCallCheck(this,Checkbox)`，这个竟然 `throw new TypeError` 了，原本上用 `class Checkbox`，改成了 `function Checkbox(){}`，最后又改回去了，自己就好了。\n\n\n\n## 代码压缩 uglifyJS\n\n这个问题比较大，不过还好可以通过配置来解决。\n\n首先，webpack3 的插件 `uglifyjs-webpack-plugin` 目前只支持 `uglify-js` 2.x 系列。所以必须确保 `uglify-js` 是2.x 版本。\n\n> 就在写这篇文章前 9 天，`uglifyjs-webpack-plugin` 开始支持 `uglify-js` 3.x 系列了。\n\n上面这个解决，下面的问题就好说了。\n\n说先明确下，uglifyJS 默认压缩，不兼容 IE8 的，但是它有一个配置，可以兼容 IE8。\n\n方法描述摘抄如下：\n\n>```\n>--screw-ie8     Use this flag if you don't wish to support\n>                Internet Explorer 6/7/8.\n>                By default UglifyJS will not try to be IE-proof.\n>--support-ie8   Use this flag to support Internet Explorer 6/7/8.\n>                Equivalent to setting `screw_ie8: false` in `minify()`\n>                for `compress`, `mangle` and `output` options.\n>```\n\n意思是说， `--screw-ie8` 开启后，不支持IE6/7/8。但是可以关闭啊。默认是开启的。`--support-ie8` 也行，等同于设置 balabala 很多兼容 IE 的参数。\n\n这里有个坑，那就是：`uglifyjs-webpack-plugin` 不支持 `--support-ie8` 这个参数。[issue 见此](https://github.com/webpack/webpack/issues/3614)\n\n所以换成 `--screw-ie8`  就好了。具体配置如下：\n\n```js\nnew UglifyJSPlugin({\n    compress: {screw_ie8: false},\n    output: {screw_ie8: false},\n    mangle: {\n      screw_ie8: false, \n      except: ['$']\n    },\n    support_ie8: true\n})\n```\n\n就是在 `compress` 中写入 `screw_ie8` 就好了。\n\n**至于网上说的什么 IE8 不能支持混淆啥的，我没发现问题，可以使用混淆。**\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"2017-2017-08-05-webpack-uglifyjs-ie8","published":1,"updated":"2020-03-02T07:16:34.653Z","comments":1,"photos":[],"link":"","_id":"cka5ik8bm0031nybgrsp8k1vk","content":"<p>最近在做组件项目，写 ES6 代码，通过 webpack3 进行打包，中途用 uglifyjs-webpack-plugin 插件进行压缩。</p>\n<p>考虑到各个项目都能用得上，所以最终打包格式选择了 <code>umd</code>。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"基础处理\"><a href=\"#基础处理\" class=\"headerlink\" title=\"基础处理\"></a>基础处理</h2><p>首先，IE8 不支持的东西太多了，所以必须用垫片修补下。</p>\n<p>由于我确实不了解 <code>babel-polyfill</code>，而且组件可能不只这一个，也不可能只在一个项目中去用，看了下 <code>babel-polyfill</code> 的引入方式，基本上都是直接放到最终代码中的，在大项目中我认为算是首选。</p>\n<p>所以采用了 <code>shim</code> + <code>sham</code> 的方案，个别功能（比如 <code>Element.prototype.classList</code>），采用自己写补丁的方式实现。</p>\n<p>最终，在页面这样写：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--[if lt IE 9]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;script src=\"../lib/es5-shim.min.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;script src=\"../lib/es5-sham.min.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;![endif]--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--[if lte IE 9]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;script src=\"../lib/ie.min.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;![endif]--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过 IE 的注释语法，特定情况下加载特定 JS 来实现。</p>\n<p>由于我需要针对 IE9 做一些补丁，所以额外打了一个 ie.min.js 补丁。</p>\n<p>这样，大部分ES5 的兼容性问题都可以解决了。</p>\n<h2 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h2><p>首先说说 webpack，这个网上有人说，webpack1 支持 IE8，从 webpack2 开始不支持了。</p>\n<p>具体我没有深究，但是我用 webpack3，是可以实现兼容的。</p>\n<p>首先是必须打上面的补丁，让 IE8 支持 ES5，最重要的是 <code>sham</code> 也是必须的，主要用来实现 <code>Object.defineProperty</code> ，虽然可能稳定性欠佳。</p>\n<p>webpack 打包（<code>umd</code> 方式）后，未压缩的代码部分：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_classCallCheck</span>(<span class=\"params\">instance, Constructor</span>) </span>&#123; <span class=\"keyword\">if</span> (!(instance <span class=\"keyword\">instanceof</span> Constructor)) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"Cannot call a class as a function\"</span>); &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Checkbox = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Checkbox</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> opts = <span class=\"built_in\">arguments</span>.length &gt; <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>] !== <span class=\"literal\">undefined</span> ? <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>] : &#123;&#125;;</span><br><span class=\"line\">    _classCallCheck(<span class=\"keyword\">this</span>, Checkbox);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _createClass(Checkbox, [&#123;</span><br><span class=\"line\">    key: <span class=\"string\">'on'</span>,</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">on</span>(<span class=\"params\"></span>) </span>&#123;    &#125;</span><br><span class=\"line\">  &#125;]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Checkbox;</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n\n<p>之后，webpack 采用 defineProperty 进行定义属性，所以才必须打这个补丁。</p>\n<p>可能 webpack1 最终打包的方式不同，不需要对 <code>Object.defineProperty</code> 打补丁，才有人说 webpack1 才支持 IE8 这种说法。</p>\n<p>本身，webpack 不需要做任何兼容处理修改，只需要之前的补丁即可。</p>\n<h4 id=\"小问题\"><a href=\"#小问题\" class=\"headerlink\" title=\"小问题\"></a>小问题</h4><p>但是，在编译过程中，曾经遇到了一个问题，随后莫名其妙自己没问题了，尚不清楚原因所在。</p>\n<p>在上面代码中，有一步 <code>_classCallCheck(this,Checkbox)</code>，这个竟然 <code>throw new TypeError</code> 了，原本上用 <code>class Checkbox</code>，改成了 <code>function Checkbox(){}</code>，最后又改回去了，自己就好了。</p>\n<h2 id=\"代码压缩-uglifyJS\"><a href=\"#代码压缩-uglifyJS\" class=\"headerlink\" title=\"代码压缩 uglifyJS\"></a>代码压缩 uglifyJS</h2><p>这个问题比较大，不过还好可以通过配置来解决。</p>\n<p>首先，webpack3 的插件 <code>uglifyjs-webpack-plugin</code> 目前只支持 <code>uglify-js</code> 2.x 系列。所以必须确保 <code>uglify-js</code> 是2.x 版本。</p>\n<blockquote>\n<p>就在写这篇文章前 9 天，<code>uglifyjs-webpack-plugin</code> 开始支持 <code>uglify-js</code> 3.x 系列了。</p>\n</blockquote>\n<p>上面这个解决，下面的问题就好说了。</p>\n<p>说先明确下，uglifyJS 默认压缩，不兼容 IE8 的，但是它有一个配置，可以兼容 IE8。</p>\n<p>方法描述摘抄如下：</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;--screw-ie8     Use this flag if you don&apos;t wish to support</span><br><span class=\"line\">&gt;                Internet Explorer 6/7/8.</span><br><span class=\"line\">&gt;                By default UglifyJS will not try to be IE-proof.</span><br><span class=\"line\">&gt;--support-ie8   Use this flag to support Internet Explorer 6/7/8.</span><br><span class=\"line\">&gt;                Equivalent to setting `screw_ie8: false` in `minify()`</span><br><span class=\"line\">&gt;                for `compress`, `mangle` and `output` options.</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>意思是说， <code>--screw-ie8</code> 开启后，不支持IE6/7/8。但是可以关闭啊。默认是开启的。<code>--support-ie8</code> 也行，等同于设置 balabala 很多兼容 IE 的参数。</p>\n<p>这里有个坑，那就是：<code>uglifyjs-webpack-plugin</code> 不支持 <code>--support-ie8</code> 这个参数。<a href=\"https://github.com/webpack/webpack/issues/3614\" target=\"_blank\" rel=\"noopener\">issue 见此</a></p>\n<p>所以换成 <code>--screw-ie8</code>  就好了。具体配置如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> UglifyJSPlugin(&#123;</span><br><span class=\"line\">    compress: &#123;<span class=\"attr\">screw_ie8</span>: <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">    output: &#123;<span class=\"attr\">screw_ie8</span>: <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">    mangle: &#123;</span><br><span class=\"line\">      screw_ie8: <span class=\"literal\">false</span>, </span><br><span class=\"line\">      except: [<span class=\"string\">'$'</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    support_ie8: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>就是在 <code>compress</code> 中写入 <code>screw_ie8</code> 就好了。</p>\n<p><strong>至于网上说的什么 IE8 不能支持混淆啥的，我没发现问题，可以使用混淆。</strong></p>\n","site":{"data":{}},"excerpt":"<p>最近在做组件项目，写 ES6 代码，通过 webpack3 进行打包，中途用 uglifyjs-webpack-plugin 插件进行压缩。</p>\n<p>考虑到各个项目都能用得上，所以最终打包格式选择了 <code>umd</code>。</p>","more":"<h2 id=\"基础处理\"><a href=\"#基础处理\" class=\"headerlink\" title=\"基础处理\"></a>基础处理</h2><p>首先，IE8 不支持的东西太多了，所以必须用垫片修补下。</p>\n<p>由于我确实不了解 <code>babel-polyfill</code>，而且组件可能不只这一个，也不可能只在一个项目中去用，看了下 <code>babel-polyfill</code> 的引入方式，基本上都是直接放到最终代码中的，在大项目中我认为算是首选。</p>\n<p>所以采用了 <code>shim</code> + <code>sham</code> 的方案，个别功能（比如 <code>Element.prototype.classList</code>），采用自己写补丁的方式实现。</p>\n<p>最终，在页面这样写：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--[if lt IE 9]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;script src=\"../lib/es5-shim.min.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;script src=\"../lib/es5-sham.min.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;![endif]--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--[if lte IE 9]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;script src=\"../lib/ie.min.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;![endif]--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过 IE 的注释语法，特定情况下加载特定 JS 来实现。</p>\n<p>由于我需要针对 IE9 做一些补丁，所以额外打了一个 ie.min.js 补丁。</p>\n<p>这样，大部分ES5 的兼容性问题都可以解决了。</p>\n<h2 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h2><p>首先说说 webpack，这个网上有人说，webpack1 支持 IE8，从 webpack2 开始不支持了。</p>\n<p>具体我没有深究，但是我用 webpack3，是可以实现兼容的。</p>\n<p>首先是必须打上面的补丁，让 IE8 支持 ES5，最重要的是 <code>sham</code> 也是必须的，主要用来实现 <code>Object.defineProperty</code> ，虽然可能稳定性欠佳。</p>\n<p>webpack 打包（<code>umd</code> 方式）后，未压缩的代码部分：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_classCallCheck</span>(<span class=\"params\">instance, Constructor</span>) </span>&#123; <span class=\"keyword\">if</span> (!(instance <span class=\"keyword\">instanceof</span> Constructor)) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"Cannot call a class as a function\"</span>); &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Checkbox = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Checkbox</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> opts = <span class=\"built_in\">arguments</span>.length &gt; <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>] !== <span class=\"literal\">undefined</span> ? <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>] : &#123;&#125;;</span><br><span class=\"line\">    _classCallCheck(<span class=\"keyword\">this</span>, Checkbox);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _createClass(Checkbox, [&#123;</span><br><span class=\"line\">    key: <span class=\"string\">'on'</span>,</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">on</span>(<span class=\"params\"></span>) </span>&#123;    &#125;</span><br><span class=\"line\">  &#125;]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Checkbox;</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n\n<p>之后，webpack 采用 defineProperty 进行定义属性，所以才必须打这个补丁。</p>\n<p>可能 webpack1 最终打包的方式不同，不需要对 <code>Object.defineProperty</code> 打补丁，才有人说 webpack1 才支持 IE8 这种说法。</p>\n<p>本身，webpack 不需要做任何兼容处理修改，只需要之前的补丁即可。</p>\n<h4 id=\"小问题\"><a href=\"#小问题\" class=\"headerlink\" title=\"小问题\"></a>小问题</h4><p>但是，在编译过程中，曾经遇到了一个问题，随后莫名其妙自己没问题了，尚不清楚原因所在。</p>\n<p>在上面代码中，有一步 <code>_classCallCheck(this,Checkbox)</code>，这个竟然 <code>throw new TypeError</code> 了，原本上用 <code>class Checkbox</code>，改成了 <code>function Checkbox(){}</code>，最后又改回去了，自己就好了。</p>\n<h2 id=\"代码压缩-uglifyJS\"><a href=\"#代码压缩-uglifyJS\" class=\"headerlink\" title=\"代码压缩 uglifyJS\"></a>代码压缩 uglifyJS</h2><p>这个问题比较大，不过还好可以通过配置来解决。</p>\n<p>首先，webpack3 的插件 <code>uglifyjs-webpack-plugin</code> 目前只支持 <code>uglify-js</code> 2.x 系列。所以必须确保 <code>uglify-js</code> 是2.x 版本。</p>\n<blockquote>\n<p>就在写这篇文章前 9 天，<code>uglifyjs-webpack-plugin</code> 开始支持 <code>uglify-js</code> 3.x 系列了。</p>\n</blockquote>\n<p>上面这个解决，下面的问题就好说了。</p>\n<p>说先明确下，uglifyJS 默认压缩，不兼容 IE8 的，但是它有一个配置，可以兼容 IE8。</p>\n<p>方法描述摘抄如下：</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;--screw-ie8     Use this flag if you don&apos;t wish to support</span><br><span class=\"line\">&gt;                Internet Explorer 6/7/8.</span><br><span class=\"line\">&gt;                By default UglifyJS will not try to be IE-proof.</span><br><span class=\"line\">&gt;--support-ie8   Use this flag to support Internet Explorer 6/7/8.</span><br><span class=\"line\">&gt;                Equivalent to setting `screw_ie8: false` in `minify()`</span><br><span class=\"line\">&gt;                for `compress`, `mangle` and `output` options.</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>意思是说， <code>--screw-ie8</code> 开启后，不支持IE6/7/8。但是可以关闭啊。默认是开启的。<code>--support-ie8</code> 也行，等同于设置 balabala 很多兼容 IE 的参数。</p>\n<p>这里有个坑，那就是：<code>uglifyjs-webpack-plugin</code> 不支持 <code>--support-ie8</code> 这个参数。<a href=\"https://github.com/webpack/webpack/issues/3614\" target=\"_blank\" rel=\"noopener\">issue 见此</a></p>\n<p>所以换成 <code>--screw-ie8</code>  就好了。具体配置如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> UglifyJSPlugin(&#123;</span><br><span class=\"line\">    compress: &#123;<span class=\"attr\">screw_ie8</span>: <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">    output: &#123;<span class=\"attr\">screw_ie8</span>: <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">    mangle: &#123;</span><br><span class=\"line\">      screw_ie8: <span class=\"literal\">false</span>, </span><br><span class=\"line\">      except: [<span class=\"string\">'$'</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    support_ie8: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>就是在 <code>compress</code> 中写入 <code>screw_ie8</code> 就好了。</p>\n<p><strong>至于网上说的什么 IE8 不能支持混淆啥的，我没发现问题，可以使用混淆。</strong></p>"},{"layout":"post","title":"嵌套结构的处理与渲染","date":"2017-09-21T21:45:00.000Z","_content":"\n公司组件库项目，有个同事做菜单功能，处理迭代弄不好。我写了一个简单的 DEMO，同时放出来参考：\n\n<!-- more -->\n\n> 在这里查看效果 [JSFiddle](https://jsfiddle.net/yukapril/egogr2h1/)\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Test</title>\n    <style>\n        .lv1 {\n            margin: 10px 10px;\n            border: 1px solid #ccc;\n        }\n\n        .lv2 {\n            margin: 10px 20px;\n            border: 1px solid #ccc;\n        }\n\n        .lv3 {\n            margin: 10px 30px;\n            border: 1px solid #ccc;\n        }\n    </style>\n</head>\n<body>\n<div id=\"nav\">\n    <div data-color=\"red\">1</div>\n    <div>\n        <div data-color=\"blue\">2 - 1</div>\n        <div data-color=\"purple\">2 - 2</div>\n        <div data-color=\"black\">2 - 3</div>\n    </div>\n    <div>\n        <div data-color=\"magenta\">3 - 1</div>\n        <div>\n            <div data-color=\"green\">3 - 2 - 1</div>\n            <div data-color=\"brown\">3 - 2 - 2</div>\n        </div>\n    </div>\n</div>\n\n<script>\n  const rootElement = el => {\n    if (typeof el === 'string') {\n      return document.querySelector(el)\n    }\n    return el\n  }\n\n  const AST = root => {\n    const children = (el, lv = 0) => {\n      let color = el.dataset.color || null\n      let text = null\n      let child = el.children\n      if (child.length === 0) text = el.textContent\n      return {\n        color,\n        text,\n        lv: lv,\n        children: Array.prototype.map.call(child, v => children(v, lv + 1))\n      }\n    }\n    return children(root).children\n  }\n\n  const render = list => {\n    const htmlArr = children => {\n      return children.map(child => {\n        let color = child.color\n        let text = child.text\n        let ch = child.children\n        let lv = child.lv\n        if (ch.length > 0) {\n          return `<div class=\"lv${lv}\">${htmlArr(ch)}</div>`\n        } else {\n          return `<div class=\"lv${lv}\" style=\"color:${color}\">${text}</div>`\n        }\n      }).join('')\n    }\n    return htmlArr(list)\n  }\n\n  class Test {\n    constructor (el) {\n      let $el = rootElement(el)\n      let list = AST($el)\n      console.log(list)\n      let html = render(list)\n      console.log(html)\n      $el.innerHTML = html\n    }\n  }\n</script>\n\n<script>\n  new Test('#nav')\n</script>\n</body>\n</html>\n```\n\n\n","source":"_posts/2017/2017-09-21-nesting-element.md","raw":"---\nlayout: post\ntitle: \"嵌套结构的处理与渲染\"\ndate: 2017-09-21 21:45:00 GMT+0800\ncategories: [前端]\ntags:  [js,render]\n---\n\n公司组件库项目，有个同事做菜单功能，处理迭代弄不好。我写了一个简单的 DEMO，同时放出来参考：\n\n<!-- more -->\n\n> 在这里查看效果 [JSFiddle](https://jsfiddle.net/yukapril/egogr2h1/)\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Test</title>\n    <style>\n        .lv1 {\n            margin: 10px 10px;\n            border: 1px solid #ccc;\n        }\n\n        .lv2 {\n            margin: 10px 20px;\n            border: 1px solid #ccc;\n        }\n\n        .lv3 {\n            margin: 10px 30px;\n            border: 1px solid #ccc;\n        }\n    </style>\n</head>\n<body>\n<div id=\"nav\">\n    <div data-color=\"red\">1</div>\n    <div>\n        <div data-color=\"blue\">2 - 1</div>\n        <div data-color=\"purple\">2 - 2</div>\n        <div data-color=\"black\">2 - 3</div>\n    </div>\n    <div>\n        <div data-color=\"magenta\">3 - 1</div>\n        <div>\n            <div data-color=\"green\">3 - 2 - 1</div>\n            <div data-color=\"brown\">3 - 2 - 2</div>\n        </div>\n    </div>\n</div>\n\n<script>\n  const rootElement = el => {\n    if (typeof el === 'string') {\n      return document.querySelector(el)\n    }\n    return el\n  }\n\n  const AST = root => {\n    const children = (el, lv = 0) => {\n      let color = el.dataset.color || null\n      let text = null\n      let child = el.children\n      if (child.length === 0) text = el.textContent\n      return {\n        color,\n        text,\n        lv: lv,\n        children: Array.prototype.map.call(child, v => children(v, lv + 1))\n      }\n    }\n    return children(root).children\n  }\n\n  const render = list => {\n    const htmlArr = children => {\n      return children.map(child => {\n        let color = child.color\n        let text = child.text\n        let ch = child.children\n        let lv = child.lv\n        if (ch.length > 0) {\n          return `<div class=\"lv${lv}\">${htmlArr(ch)}</div>`\n        } else {\n          return `<div class=\"lv${lv}\" style=\"color:${color}\">${text}</div>`\n        }\n      }).join('')\n    }\n    return htmlArr(list)\n  }\n\n  class Test {\n    constructor (el) {\n      let $el = rootElement(el)\n      let list = AST($el)\n      console.log(list)\n      let html = render(list)\n      console.log(html)\n      $el.innerHTML = html\n    }\n  }\n</script>\n\n<script>\n  new Test('#nav')\n</script>\n</body>\n</html>\n```\n\n\n","slug":"2017-2017-09-21-nesting-element","published":1,"updated":"2020-03-02T07:16:34.653Z","comments":1,"photos":[],"link":"","_id":"cka5ik8bn0034nybgl1g9cae5","content":"<p>公司组件库项目，有个同事做菜单功能，处理迭代弄不好。我写了一个简单的 DEMO，同时放出来参考：</p>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>在这里查看效果 <a href=\"https://jsfiddle.net/yukapril/egogr2h1/\" target=\"_blank\" rel=\"noopener\">JSFiddle</a></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.lv1</span> &#123;</span></span><br><span class=\"line\">            margin: 10px 10px;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">border</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#ccc</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.lv2</span> &#123;</span></span><br><span class=\"line\">            margin: 10px 20px;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">border</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#ccc</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.lv3</span> &#123;</span></span><br><span class=\"line\">            margin: 10px 30px;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">border</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#ccc</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"nav\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-color</span>=<span class=\"string\">\"red\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-color</span>=<span class=\"string\">\"blue\"</span>&gt;</span>2 - 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-color</span>=<span class=\"string\">\"purple\"</span>&gt;</span>2 - 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-color</span>=<span class=\"string\">\"black\"</span>&gt;</span>2 - 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-color</span>=<span class=\"string\">\"magenta\"</span>&gt;</span>3 - 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-color</span>=<span class=\"string\">\"green\"</span>&gt;</span>3 - 2 - 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-color</span>=<span class=\"string\">\"brown\"</span>&gt;</span>3 - 2 - 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">const</span> rootElement = <span class=\"function\"><span class=\"params\">el</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> el === <span class=\"string\">'string'</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.querySelector(el)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> el</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">const</span> AST = <span class=\"function\"><span class=\"params\">root</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> children = <span class=\"function\">(<span class=\"params\">el, lv = <span class=\"number\">0</span></span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> color = el.dataset.color || <span class=\"literal\">null</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> text = <span class=\"literal\">null</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> child = el.children</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">if</span> (child.length === <span class=\"number\">0</span>) text = el.textContent</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">        color,</span><br><span class=\"line\">        text,</span><br><span class=\"line\">        lv: lv,</span><br><span class=\"line\"><span class=\"javascript\">        children: <span class=\"built_in\">Array</span>.prototype.map.call(child, v =&gt; children(v, lv + <span class=\"number\">1</span>))</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> children(root).children</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">const</span> render = <span class=\"function\"><span class=\"params\">list</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> htmlArr = <span class=\"function\"><span class=\"params\">children</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> children.map(<span class=\"function\"><span class=\"params\">child</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> color = child.color</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> text = child.text</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> ch = child.children</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> lv = child.lv</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (ch.length &gt; <span class=\"number\">0</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">return</span> <span class=\"string\">`&lt;div class=\"lv<span class=\"subst\">$&#123;lv&#125;</span>\"&gt;<span class=\"subst\">$&#123;htmlArr(ch)&#125;</span>&lt;/div&gt;`</span></span></span><br><span class=\"line\"><span class=\"javascript\">        &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">return</span> <span class=\"string\">`&lt;div class=\"lv<span class=\"subst\">$&#123;lv&#125;</span>\" style=\"color:<span class=\"subst\">$&#123;color&#125;</span>\"&gt;<span class=\"subst\">$&#123;text&#125;</span>&lt;/div&gt;`</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">      &#125;).join(<span class=\"string\">''</span>)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> htmlArr(list)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">constructor</span> (el) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> $el = rootElement(el)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> list = AST($el)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(list)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> html = render(list)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(html)</span></span><br><span class=\"line\">      $el.innerHTML = html</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Test(<span class=\"string\">'#nav'</span>)</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>公司组件库项目，有个同事做菜单功能，处理迭代弄不好。我写了一个简单的 DEMO，同时放出来参考：</p>","more":"<blockquote>\n<p>在这里查看效果 <a href=\"https://jsfiddle.net/yukapril/egogr2h1/\" target=\"_blank\" rel=\"noopener\">JSFiddle</a></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.lv1</span> &#123;</span></span><br><span class=\"line\">            margin: 10px 10px;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">border</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#ccc</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.lv2</span> &#123;</span></span><br><span class=\"line\">            margin: 10px 20px;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">border</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#ccc</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-class\">.lv3</span> &#123;</span></span><br><span class=\"line\">            margin: 10px 30px;</span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">border</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#ccc</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"nav\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-color</span>=<span class=\"string\">\"red\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-color</span>=<span class=\"string\">\"blue\"</span>&gt;</span>2 - 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-color</span>=<span class=\"string\">\"purple\"</span>&gt;</span>2 - 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-color</span>=<span class=\"string\">\"black\"</span>&gt;</span>2 - 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-color</span>=<span class=\"string\">\"magenta\"</span>&gt;</span>3 - 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-color</span>=<span class=\"string\">\"green\"</span>&gt;</span>3 - 2 - 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-color</span>=<span class=\"string\">\"brown\"</span>&gt;</span>3 - 2 - 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">const</span> rootElement = <span class=\"function\"><span class=\"params\">el</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> el === <span class=\"string\">'string'</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.querySelector(el)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> el</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">const</span> AST = <span class=\"function\"><span class=\"params\">root</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> children = <span class=\"function\">(<span class=\"params\">el, lv = <span class=\"number\">0</span></span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> color = el.dataset.color || <span class=\"literal\">null</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> text = <span class=\"literal\">null</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> child = el.children</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">if</span> (child.length === <span class=\"number\">0</span>) text = el.textContent</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">        color,</span><br><span class=\"line\">        text,</span><br><span class=\"line\">        lv: lv,</span><br><span class=\"line\"><span class=\"javascript\">        children: <span class=\"built_in\">Array</span>.prototype.map.call(child, v =&gt; children(v, lv + <span class=\"number\">1</span>))</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> children(root).children</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">const</span> render = <span class=\"function\"><span class=\"params\">list</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> htmlArr = <span class=\"function\"><span class=\"params\">children</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> children.map(<span class=\"function\"><span class=\"params\">child</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> color = child.color</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> text = child.text</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> ch = child.children</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> lv = child.lv</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (ch.length &gt; <span class=\"number\">0</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">return</span> <span class=\"string\">`&lt;div class=\"lv<span class=\"subst\">$&#123;lv&#125;</span>\"&gt;<span class=\"subst\">$&#123;htmlArr(ch)&#125;</span>&lt;/div&gt;`</span></span></span><br><span class=\"line\"><span class=\"javascript\">        &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">return</span> <span class=\"string\">`&lt;div class=\"lv<span class=\"subst\">$&#123;lv&#125;</span>\" style=\"color:<span class=\"subst\">$&#123;color&#125;</span>\"&gt;<span class=\"subst\">$&#123;text&#125;</span>&lt;/div&gt;`</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">      &#125;).join(<span class=\"string\">''</span>)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> htmlArr(list)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">constructor</span> (el) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> $el = rootElement(el)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> list = AST($el)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(list)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> html = render(list)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(html)</span></span><br><span class=\"line\">      $el.innerHTML = html</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">new</span> Test(<span class=\"string\">'#nav'</span>)</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"Objective-C 学习（一）- 字符串 数字 数组 NSIndexSet","date":"2017-10-03T23:35:00.000Z","_content":"\n记录学习过程，做好笔记。\n\n<!-- more -->\n\n## 字符串\n\n#### 创建\n\n```objective-c\n// 直接创建\nNSString *str1 = @\"test\";\n\n// 从C字符串创建\nNSString *str21 = [[NSString alloc] initWithUTF8String:\"hello\"];\nNSString *str22 = [NSString stringWithUTF8String:\"hello\"];\n\n// 格式化创建\nNSString *str31 = [[NSString alloc] initWithFormat:@\"hello %@\", @\"world\"];\nNSString *str32 = [NSString stringWithFormat:@\"hello %@\", @\"world\"];\n```\n\n#### 比较\n\n```objective-c\nNSString *str41 = @\"abc\";\nNSString *str42 = @\"bcd\";\n// 直接比较\nBOOL result41 = [str41 isEqualToString:str42];\n// 忽略大小写比较\nBOOL result42 = [str41 compare:str42 options:NSCaseInsensitiveSearch] == 0;\n```\n\n#### 获取长度\n\n```objective-c\nNSString *str5 = @\"abcde\";\nNSUInteger length5 = str5.length;\nNSLog(@\"len: %lu\", (unsigned long)length5);\n```\n\n#### 查找替换\n\n```objective-c\nNSString *str6 = @\"abcdxyzabcd\";\nNSRange range6 = [str6 rangeOfString:@\"xyz\"];\nif (range6.location == NSNotFound) {\n  NSLog(@\"not found!\");\n} else {\n  NSLog(@\"location: %ld, length:%ld\", range6.location, range6.length);\n}\n```\n\n#### 修改原文\n\n```objective-c\nNSString *str71 = @\"hello world\";\nstr71 = [str71 stringByReplacingOccurrencesOfString:@\"world\" withString:@\"yukapril\"];\nNSLog(@\"%@\", str71);\nNSMutableString *str72 = [NSMutableString stringWithUTF8String:\"hello world\"];\n[str72 appendString:@\"!\"];\nNSLog(@\"%@\", str72);\n```\n\n## 数字\n\n#### 转换\n\n```objective-c\nNSNumber *num1 = @(100);\nNSInteger int1 = [num1 integerValue];\n```\n\n## 数组\n\n#### 创建和读取\n\n```objective-c\nNSArray<NSString *> *arr1 = @[@\"a\", @\"b\"];\nNSString *arr1Temp = arr1[1];\nNSLog(@\"%@\", arr1Temp);\n\nNSInteger arr2Temp = 10;\nNSArray<NSNumber *> *arr2 = @[@1, @2, @3, @(arr2Temp)];\nfor (NSNumber *v in arr2) {\n  NSLog(@\"arr2: %@\", v);\n}\n\nNSArray <id> *arr3 = @[@\"a\", @1, @(YES)];\nfor (id v in arr3) {\n  NSLog(@\"arr3:%@\", v);\n}\n\nNSArray *arr4 = [[NSArray alloc] initWithObjects:@1, @2, @3, [NSNull null], @5, nil];\nfor (id v in arr4) {\n  NSLog(@\"arr4:%@\", v);\n}\n\nNSNumber *valueFirst = arr4.firstObject;\nNSNumber *valueLast = arr4.lastObject;\nNSLog(@\"valueFirst:%@, valueLast: %@\", valueFirst, valueLast);\nif ([arr4 count] >= 4) {\n  NSLog(@\"someValue:%@\", arr4[3]);\n}\n```\n\n#### 查找\n\n```objective-c\nNSArray<NSString *> *arr5 = @[@\"a\", @\"b\"];\nNSUInteger index5 = [arr5 indexOfObject:@\"b\"];\nNSLog(@\"index5:%@, count5:%@\", @(index5), @([arr5 count]));\n```\n\n#### 替换\n\n```objective-c\nNSMutableArray *arr6 = [@[@\"a\", @\"b\", @\"c\"] mutableCopy];\n// NSMutableArray *arr6 = [[NSMutableArray alloc] initWithObjects:@\"a\", @\"b\", @\"c\", nil];\n[arr6 addObject:@\"d\"];\n[arr6 removeLastObject];\n[arr6 removeObject:@\"c\"];\nNSLog(@\"%@\", arr6);\n```\n\n## NSIndexSet\n\n```objective-c\nNSMutableArray *arr = [@[@1, @2, @3, @4, @5] mutableCopy];\nNSMutableIndexSet *indexSet = [NSMutableIndexSet indexSetWithIndex:1];\n[indexSet addIndexesInRange:NSMakeRange(3, 2)];\n[arr removeObjectsAtIndexes:indexSet];\nNSLog(@\"NSIndexSet %@\", arr);\n```\n","source":"_posts/2017/2017-10-03-objective-c.md","raw":"---\nlayout: post\ntitle: \"Objective-C 学习（一）- 字符串 数字 数组 NSIndexSet\"\ndate: 2017-10-03 23:35:00 GMT+0800\ncategories: [编程]\ntags:  [Objective-C]\n---\n\n记录学习过程，做好笔记。\n\n<!-- more -->\n\n## 字符串\n\n#### 创建\n\n```objective-c\n// 直接创建\nNSString *str1 = @\"test\";\n\n// 从C字符串创建\nNSString *str21 = [[NSString alloc] initWithUTF8String:\"hello\"];\nNSString *str22 = [NSString stringWithUTF8String:\"hello\"];\n\n// 格式化创建\nNSString *str31 = [[NSString alloc] initWithFormat:@\"hello %@\", @\"world\"];\nNSString *str32 = [NSString stringWithFormat:@\"hello %@\", @\"world\"];\n```\n\n#### 比较\n\n```objective-c\nNSString *str41 = @\"abc\";\nNSString *str42 = @\"bcd\";\n// 直接比较\nBOOL result41 = [str41 isEqualToString:str42];\n// 忽略大小写比较\nBOOL result42 = [str41 compare:str42 options:NSCaseInsensitiveSearch] == 0;\n```\n\n#### 获取长度\n\n```objective-c\nNSString *str5 = @\"abcde\";\nNSUInteger length5 = str5.length;\nNSLog(@\"len: %lu\", (unsigned long)length5);\n```\n\n#### 查找替换\n\n```objective-c\nNSString *str6 = @\"abcdxyzabcd\";\nNSRange range6 = [str6 rangeOfString:@\"xyz\"];\nif (range6.location == NSNotFound) {\n  NSLog(@\"not found!\");\n} else {\n  NSLog(@\"location: %ld, length:%ld\", range6.location, range6.length);\n}\n```\n\n#### 修改原文\n\n```objective-c\nNSString *str71 = @\"hello world\";\nstr71 = [str71 stringByReplacingOccurrencesOfString:@\"world\" withString:@\"yukapril\"];\nNSLog(@\"%@\", str71);\nNSMutableString *str72 = [NSMutableString stringWithUTF8String:\"hello world\"];\n[str72 appendString:@\"!\"];\nNSLog(@\"%@\", str72);\n```\n\n## 数字\n\n#### 转换\n\n```objective-c\nNSNumber *num1 = @(100);\nNSInteger int1 = [num1 integerValue];\n```\n\n## 数组\n\n#### 创建和读取\n\n```objective-c\nNSArray<NSString *> *arr1 = @[@\"a\", @\"b\"];\nNSString *arr1Temp = arr1[1];\nNSLog(@\"%@\", arr1Temp);\n\nNSInteger arr2Temp = 10;\nNSArray<NSNumber *> *arr2 = @[@1, @2, @3, @(arr2Temp)];\nfor (NSNumber *v in arr2) {\n  NSLog(@\"arr2: %@\", v);\n}\n\nNSArray <id> *arr3 = @[@\"a\", @1, @(YES)];\nfor (id v in arr3) {\n  NSLog(@\"arr3:%@\", v);\n}\n\nNSArray *arr4 = [[NSArray alloc] initWithObjects:@1, @2, @3, [NSNull null], @5, nil];\nfor (id v in arr4) {\n  NSLog(@\"arr4:%@\", v);\n}\n\nNSNumber *valueFirst = arr4.firstObject;\nNSNumber *valueLast = arr4.lastObject;\nNSLog(@\"valueFirst:%@, valueLast: %@\", valueFirst, valueLast);\nif ([arr4 count] >= 4) {\n  NSLog(@\"someValue:%@\", arr4[3]);\n}\n```\n\n#### 查找\n\n```objective-c\nNSArray<NSString *> *arr5 = @[@\"a\", @\"b\"];\nNSUInteger index5 = [arr5 indexOfObject:@\"b\"];\nNSLog(@\"index5:%@, count5:%@\", @(index5), @([arr5 count]));\n```\n\n#### 替换\n\n```objective-c\nNSMutableArray *arr6 = [@[@\"a\", @\"b\", @\"c\"] mutableCopy];\n// NSMutableArray *arr6 = [[NSMutableArray alloc] initWithObjects:@\"a\", @\"b\", @\"c\", nil];\n[arr6 addObject:@\"d\"];\n[arr6 removeLastObject];\n[arr6 removeObject:@\"c\"];\nNSLog(@\"%@\", arr6);\n```\n\n## NSIndexSet\n\n```objective-c\nNSMutableArray *arr = [@[@1, @2, @3, @4, @5] mutableCopy];\nNSMutableIndexSet *indexSet = [NSMutableIndexSet indexSetWithIndex:1];\n[indexSet addIndexesInRange:NSMakeRange(3, 2)];\n[arr removeObjectsAtIndexes:indexSet];\nNSLog(@\"NSIndexSet %@\", arr);\n```\n","slug":"2017-2017-10-03-objective-c","published":1,"updated":"2020-03-06T01:27:05.812Z","comments":1,"photos":[],"link":"","_id":"cka5ik8bo0038nybgkwq32c66","content":"<p>记录学习过程，做好笔记。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 直接创建</span><br><span class=\"line\">NSString *str1 = @&quot;test&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 从C字符串创建</span><br><span class=\"line\">NSString *str21 = [[NSString alloc] initWithUTF8String:&quot;hello&quot;];</span><br><span class=\"line\">NSString *str22 = [NSString stringWithUTF8String:&quot;hello&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">// 格式化创建</span><br><span class=\"line\">NSString *str31 = [[NSString alloc] initWithFormat:@&quot;hello %@&quot;, @&quot;world&quot;];</span><br><span class=\"line\">NSString *str32 = [NSString stringWithFormat:@&quot;hello %@&quot;, @&quot;world&quot;];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str41 = @&quot;abc&quot;;</span><br><span class=\"line\">NSString *str42 = @&quot;bcd&quot;;</span><br><span class=\"line\">// 直接比较</span><br><span class=\"line\">BOOL result41 = [str41 isEqualToString:str42];</span><br><span class=\"line\">// 忽略大小写比较</span><br><span class=\"line\">BOOL result42 = [str41 compare:str42 options:NSCaseInsensitiveSearch] == 0;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"获取长度\"><a href=\"#获取长度\" class=\"headerlink\" title=\"获取长度\"></a>获取长度</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str5 = @&quot;abcde&quot;;</span><br><span class=\"line\">NSUInteger length5 = str5.length;</span><br><span class=\"line\">NSLog(@&quot;len: %lu&quot;, (unsigned long)length5);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查找替换\"><a href=\"#查找替换\" class=\"headerlink\" title=\"查找替换\"></a>查找替换</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str6 = @&quot;abcdxyzabcd&quot;;</span><br><span class=\"line\">NSRange range6 = [str6 rangeOfString:@&quot;xyz&quot;];</span><br><span class=\"line\">if (range6.location == NSNotFound) &#123;</span><br><span class=\"line\">  NSLog(@&quot;not found!&quot;);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  NSLog(@&quot;location: %ld, length:%ld&quot;, range6.location, range6.length);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改原文\"><a href=\"#修改原文\" class=\"headerlink\" title=\"修改原文\"></a>修改原文</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str71 = @&quot;hello world&quot;;</span><br><span class=\"line\">str71 = [str71 stringByReplacingOccurrencesOfString:@&quot;world&quot; withString:@&quot;yukapril&quot;];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, str71);</span><br><span class=\"line\">NSMutableString *str72 = [NSMutableString stringWithUTF8String:&quot;hello world&quot;];</span><br><span class=\"line\">[str72 appendString:@&quot;!&quot;];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, str72);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a>数字</h2><h4 id=\"转换\"><a href=\"#转换\" class=\"headerlink\" title=\"转换\"></a>转换</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSNumber *num1 = @(100);</span><br><span class=\"line\">NSInteger int1 = [num1 integerValue];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><h4 id=\"创建和读取\"><a href=\"#创建和读取\" class=\"headerlink\" title=\"创建和读取\"></a>创建和读取</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray&lt;NSString *&gt; *arr1 = @[@&quot;a&quot;, @&quot;b&quot;];</span><br><span class=\"line\">NSString *arr1Temp = arr1[1];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, arr1Temp);</span><br><span class=\"line\"></span><br><span class=\"line\">NSInteger arr2Temp = 10;</span><br><span class=\"line\">NSArray&lt;NSNumber *&gt; *arr2 = @[@1, @2, @3, @(arr2Temp)];</span><br><span class=\"line\">for (NSNumber *v in arr2) &#123;</span><br><span class=\"line\">  NSLog(@&quot;arr2: %@&quot;, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NSArray &lt;id&gt; *arr3 = @[@&quot;a&quot;, @1, @(YES)];</span><br><span class=\"line\">for (id v in arr3) &#123;</span><br><span class=\"line\">  NSLog(@&quot;arr3:%@&quot;, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NSArray *arr4 = [[NSArray alloc] initWithObjects:@1, @2, @3, [NSNull null], @5, nil];</span><br><span class=\"line\">for (id v in arr4) &#123;</span><br><span class=\"line\">  NSLog(@&quot;arr4:%@&quot;, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NSNumber *valueFirst = arr4.firstObject;</span><br><span class=\"line\">NSNumber *valueLast = arr4.lastObject;</span><br><span class=\"line\">NSLog(@&quot;valueFirst:%@, valueLast: %@&quot;, valueFirst, valueLast);</span><br><span class=\"line\">if ([arr4 count] &gt;= 4) &#123;</span><br><span class=\"line\">  NSLog(@&quot;someValue:%@&quot;, arr4[3]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray&lt;NSString *&gt; *arr5 = @[@&quot;a&quot;, @&quot;b&quot;];</span><br><span class=\"line\">NSUInteger index5 = [arr5 indexOfObject:@&quot;b&quot;];</span><br><span class=\"line\">NSLog(@&quot;index5:%@, count5:%@&quot;, @(index5), @([arr5 count]));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableArray *arr6 = [@[@&quot;a&quot;, @&quot;b&quot;, @&quot;c&quot;] mutableCopy];</span><br><span class=\"line\">// NSMutableArray *arr6 = [[NSMutableArray alloc] initWithObjects:@&quot;a&quot;, @&quot;b&quot;, @&quot;c&quot;, nil];</span><br><span class=\"line\">[arr6 addObject:@&quot;d&quot;];</span><br><span class=\"line\">[arr6 removeLastObject];</span><br><span class=\"line\">[arr6 removeObject:@&quot;c&quot;];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, arr6);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NSIndexSet\"><a href=\"#NSIndexSet\" class=\"headerlink\" title=\"NSIndexSet\"></a>NSIndexSet</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableArray *arr = [@[@1, @2, @3, @4, @5] mutableCopy];</span><br><span class=\"line\">NSMutableIndexSet *indexSet = [NSMutableIndexSet indexSetWithIndex:1];</span><br><span class=\"line\">[indexSet addIndexesInRange:NSMakeRange(3, 2)];</span><br><span class=\"line\">[arr removeObjectsAtIndexes:indexSet];</span><br><span class=\"line\">NSLog(@&quot;NSIndexSet %@&quot;, arr);</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>记录学习过程，做好笔记。</p>","more":"<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 直接创建</span><br><span class=\"line\">NSString *str1 = @&quot;test&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 从C字符串创建</span><br><span class=\"line\">NSString *str21 = [[NSString alloc] initWithUTF8String:&quot;hello&quot;];</span><br><span class=\"line\">NSString *str22 = [NSString stringWithUTF8String:&quot;hello&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">// 格式化创建</span><br><span class=\"line\">NSString *str31 = [[NSString alloc] initWithFormat:@&quot;hello %@&quot;, @&quot;world&quot;];</span><br><span class=\"line\">NSString *str32 = [NSString stringWithFormat:@&quot;hello %@&quot;, @&quot;world&quot;];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str41 = @&quot;abc&quot;;</span><br><span class=\"line\">NSString *str42 = @&quot;bcd&quot;;</span><br><span class=\"line\">// 直接比较</span><br><span class=\"line\">BOOL result41 = [str41 isEqualToString:str42];</span><br><span class=\"line\">// 忽略大小写比较</span><br><span class=\"line\">BOOL result42 = [str41 compare:str42 options:NSCaseInsensitiveSearch] == 0;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"获取长度\"><a href=\"#获取长度\" class=\"headerlink\" title=\"获取长度\"></a>获取长度</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str5 = @&quot;abcde&quot;;</span><br><span class=\"line\">NSUInteger length5 = str5.length;</span><br><span class=\"line\">NSLog(@&quot;len: %lu&quot;, (unsigned long)length5);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查找替换\"><a href=\"#查找替换\" class=\"headerlink\" title=\"查找替换\"></a>查找替换</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str6 = @&quot;abcdxyzabcd&quot;;</span><br><span class=\"line\">NSRange range6 = [str6 rangeOfString:@&quot;xyz&quot;];</span><br><span class=\"line\">if (range6.location == NSNotFound) &#123;</span><br><span class=\"line\">  NSLog(@&quot;not found!&quot;);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  NSLog(@&quot;location: %ld, length:%ld&quot;, range6.location, range6.length);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改原文\"><a href=\"#修改原文\" class=\"headerlink\" title=\"修改原文\"></a>修改原文</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str71 = @&quot;hello world&quot;;</span><br><span class=\"line\">str71 = [str71 stringByReplacingOccurrencesOfString:@&quot;world&quot; withString:@&quot;yukapril&quot;];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, str71);</span><br><span class=\"line\">NSMutableString *str72 = [NSMutableString stringWithUTF8String:&quot;hello world&quot;];</span><br><span class=\"line\">[str72 appendString:@&quot;!&quot;];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, str72);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a>数字</h2><h4 id=\"转换\"><a href=\"#转换\" class=\"headerlink\" title=\"转换\"></a>转换</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSNumber *num1 = @(100);</span><br><span class=\"line\">NSInteger int1 = [num1 integerValue];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><h4 id=\"创建和读取\"><a href=\"#创建和读取\" class=\"headerlink\" title=\"创建和读取\"></a>创建和读取</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray&lt;NSString *&gt; *arr1 = @[@&quot;a&quot;, @&quot;b&quot;];</span><br><span class=\"line\">NSString *arr1Temp = arr1[1];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, arr1Temp);</span><br><span class=\"line\"></span><br><span class=\"line\">NSInteger arr2Temp = 10;</span><br><span class=\"line\">NSArray&lt;NSNumber *&gt; *arr2 = @[@1, @2, @3, @(arr2Temp)];</span><br><span class=\"line\">for (NSNumber *v in arr2) &#123;</span><br><span class=\"line\">  NSLog(@&quot;arr2: %@&quot;, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NSArray &lt;id&gt; *arr3 = @[@&quot;a&quot;, @1, @(YES)];</span><br><span class=\"line\">for (id v in arr3) &#123;</span><br><span class=\"line\">  NSLog(@&quot;arr3:%@&quot;, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NSArray *arr4 = [[NSArray alloc] initWithObjects:@1, @2, @3, [NSNull null], @5, nil];</span><br><span class=\"line\">for (id v in arr4) &#123;</span><br><span class=\"line\">  NSLog(@&quot;arr4:%@&quot;, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NSNumber *valueFirst = arr4.firstObject;</span><br><span class=\"line\">NSNumber *valueLast = arr4.lastObject;</span><br><span class=\"line\">NSLog(@&quot;valueFirst:%@, valueLast: %@&quot;, valueFirst, valueLast);</span><br><span class=\"line\">if ([arr4 count] &gt;= 4) &#123;</span><br><span class=\"line\">  NSLog(@&quot;someValue:%@&quot;, arr4[3]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray&lt;NSString *&gt; *arr5 = @[@&quot;a&quot;, @&quot;b&quot;];</span><br><span class=\"line\">NSUInteger index5 = [arr5 indexOfObject:@&quot;b&quot;];</span><br><span class=\"line\">NSLog(@&quot;index5:%@, count5:%@&quot;, @(index5), @([arr5 count]));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableArray *arr6 = [@[@&quot;a&quot;, @&quot;b&quot;, @&quot;c&quot;] mutableCopy];</span><br><span class=\"line\">// NSMutableArray *arr6 = [[NSMutableArray alloc] initWithObjects:@&quot;a&quot;, @&quot;b&quot;, @&quot;c&quot;, nil];</span><br><span class=\"line\">[arr6 addObject:@&quot;d&quot;];</span><br><span class=\"line\">[arr6 removeLastObject];</span><br><span class=\"line\">[arr6 removeObject:@&quot;c&quot;];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, arr6);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NSIndexSet\"><a href=\"#NSIndexSet\" class=\"headerlink\" title=\"NSIndexSet\"></a>NSIndexSet</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableArray *arr = [@[@1, @2, @3, @4, @5] mutableCopy];</span><br><span class=\"line\">NSMutableIndexSet *indexSet = [NSMutableIndexSet indexSetWithIndex:1];</span><br><span class=\"line\">[indexSet addIndexesInRange:NSMakeRange(3, 2)];</span><br><span class=\"line\">[arr removeObjectsAtIndexes:indexSet];</span><br><span class=\"line\">NSLog(@&quot;NSIndexSet %@&quot;, arr);</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"Objective-C 学习（二）- NSDictionary NSSet 类型转换 NSData NSError","date":"2017-10-08T18:03:00.000Z","_content":"\n记录学习过程，做好笔记。\n\n<!-- more -->\n\n## NSDictionary\n\n#### 创建\n\n```objective-c\nNSDictionary *dic1 = @{@\"apple\": @1.5, @\"banana\": @1.2};\nNSDictionary<NSString *, NSNumber *> *dic2 = [NSDictionary dictionaryWithObjectsAndKeys:@1.5, @\"apple\", @1.2, @\"banana\", nil];s\n```\n\n#### 读取\n\n```objective-c\nfor (id key in dic1.allKeys) {\n  id v = dic1[key];\n  // id v = [dic1 objectForKey:key];\n  NSLog(@\"<1>key:%@, value:%@\", key, v);\n}\nfor (NSString *key in dic2.allKeys) {\n  NSNumber *v = dic1[key];\n  NSLog(@\"<2>key:%@, value:%@\", key, v);\n}\n\nfor (id key in dic1.allKeys) {\n  id v = dic1[key];\n  // id v = [dic1 objectForKey:key];\n  NSLog(@\"<1>key:%@, value:%@\", key, v);\n}\nfor (NSString *key in dic2.allKeys) {\n  NSNumber *v = dic1[key];\n  NSLog(@\"<2>key:%@, value:%@\", key, v);\n}\n```\n\n#### 转换\n\n```objective-c\nNSArray *keys = dic2.allKeys;\nNSArray *values = dic2.allValues;\nNSLog(@\"keys: %@\", keys);\nNSLog(@\"values: %@\", values);\n```\n\n#### 写入读取\n\n```objective-c\nNSMutableDictionary *dicm1 = [NSMutableDictionary dictionaryWithObjectsAndKeys:@1.5, @\"apple\", nil];\n// [dicm1 setObject:@1.2 forKey:@\"banana\"];\ndicm1[@\"banana\"] = @1.2;\nNSLog(@\"dicm1: %@\", dicm1);\n```\n\n## NSSet\n\n#### 创建读取\n\n```objective-c\nNSSet *set1 = [NSSet setWithObjects:@1, @2, @3, @4, @1, nil];\nNSLog(@\"set1: %@\", set1);\nfor (NSNumber *n in set1) {\n  NSLog(@\"set1 value: %@\", n);\n}\n\nNSMutableSet *setu1 = [NSMutableSet setWithObjects:@1, @2, @3, @4, nil];\n[setu1 removeObject:@4];\n[setu1 addObject:@5];\nNSLog(@\"setu1: %@\", setu1);\n```\n\n## 类型转换\n\n#### NSString <==> NSNumber\n\n```objective-c\nNSString *ageStr1 = @\"18\";\nNSNumber *age1 = @([ageStr1 integerValue]);\n\nNSNumber *age2 = @19;\nNSString *ageStr2 = [age2 stringValue];\n```\n\n#### NSString <==> NSArray\n\n```objective-c\nNSString *names = @\"apple,banana\";\nNSArray *nameArr = [names componentsSeparatedByString:@\",\"];\nNSLog(@\"%@\", nameArr);\n\nNSArray *arr = @[@\"apple\",@\"banana\"];\nNSString *arrStr = [arr componentsJoinedByString:@\"-\"];\nNSLog(@\"%@\", arrStr);\n```\n\n#### NSArray <==> NSSet\n\n```objective-c\nNSArray *arr = @[@\"apple\", @\"banana\", @\"apple\", @\"orange\"];\nNSSet *set = [NSSet setWithArray:arr];\nNSLog(@\"set %@\", set);\n\nNSSet *set2 = [NSSet setWithObjects:@\"orange\", @\"banana\", @\"apple\", nil];\nNSMutableArray *arrm2 = [NSMutableArray array];\nfor (id value in set2) {\n  [arrm2 addObject:value];\n}\nNSLog(@\"arrm2: %@\", arrm2);\n```\n\n#### NSArray <==> NSDictionary\n\n```objective-c\nNSArray *arr1 = @[@\"apple\", @\"banana\"];\nNSArray *arr2 = @[@1.5, @1.2];\nNSDictionary *dic = [NSDictionary dictionaryWithObjects:arr2 forKeys:arr1];\nNSLog(@\"%@\", dic);\n\nNSDictionary *dic2 = @{@\"apple\": @1.5, @\"banana\": @1.2};\nNSArray *arr3 = dic2.allKeys;\nNSArray *arr4 = dic2.allValues;\n```\n\n## NSData\n\n```objective-c\nNSString *str = @\"apple\";\nNSData *data = [str dataUsingEncoding:NSUTF8StringEncoding];\nNSLog(@\"%@\", data);\n\nNSString *str2 = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\nNSLog(@\"%@\", str2);\n```\n\n## NSError\n\n```objective-c\n#import <Foundation/Foundation.h>\n\ntypedef NS_ENUM(NSUInteger, CheckError) {\n    CheckErrorTooMax = 1\n};\n\nNSError *check(NSArray *arr) {\n    for (NSNumber *v in arr) {\n        int r = [v compare:@10];\n        NSLog(@\"value:%@, result:%i\", v, r);\n        if ([v compare:@10] == 1) {\n            NSDictionary *userInfo = @{@\"number\": v};\n            return [NSError errorWithDomain:@\"check failed\" code:CheckErrorTooMax userInfo:userInfo];\n        }\n    }\n    return nil;\n}\n\nint main(int argc, const char *argv[]) {\n    @autoreleasepool {\n        NSArray *arr = @[@1, @4, @7, @9, @12];\n        NSError *err = check(arr);\n        NSLog(@\"%@\", err);\n    }\n    return 0;\n}\n```","source":"_posts/2017/2017-10-08-objective-c-2.md","raw":"---\nlayout: post\ntitle: \"Objective-C 学习（二）- NSDictionary NSSet 类型转换 NSData NSError\"\ndate: 2017-10-08 18:03:00 GMT+0800\ncategories: [编程]\ntags:  [Objective-C]\n---\n\n记录学习过程，做好笔记。\n\n<!-- more -->\n\n## NSDictionary\n\n#### 创建\n\n```objective-c\nNSDictionary *dic1 = @{@\"apple\": @1.5, @\"banana\": @1.2};\nNSDictionary<NSString *, NSNumber *> *dic2 = [NSDictionary dictionaryWithObjectsAndKeys:@1.5, @\"apple\", @1.2, @\"banana\", nil];s\n```\n\n#### 读取\n\n```objective-c\nfor (id key in dic1.allKeys) {\n  id v = dic1[key];\n  // id v = [dic1 objectForKey:key];\n  NSLog(@\"<1>key:%@, value:%@\", key, v);\n}\nfor (NSString *key in dic2.allKeys) {\n  NSNumber *v = dic1[key];\n  NSLog(@\"<2>key:%@, value:%@\", key, v);\n}\n\nfor (id key in dic1.allKeys) {\n  id v = dic1[key];\n  // id v = [dic1 objectForKey:key];\n  NSLog(@\"<1>key:%@, value:%@\", key, v);\n}\nfor (NSString *key in dic2.allKeys) {\n  NSNumber *v = dic1[key];\n  NSLog(@\"<2>key:%@, value:%@\", key, v);\n}\n```\n\n#### 转换\n\n```objective-c\nNSArray *keys = dic2.allKeys;\nNSArray *values = dic2.allValues;\nNSLog(@\"keys: %@\", keys);\nNSLog(@\"values: %@\", values);\n```\n\n#### 写入读取\n\n```objective-c\nNSMutableDictionary *dicm1 = [NSMutableDictionary dictionaryWithObjectsAndKeys:@1.5, @\"apple\", nil];\n// [dicm1 setObject:@1.2 forKey:@\"banana\"];\ndicm1[@\"banana\"] = @1.2;\nNSLog(@\"dicm1: %@\", dicm1);\n```\n\n## NSSet\n\n#### 创建读取\n\n```objective-c\nNSSet *set1 = [NSSet setWithObjects:@1, @2, @3, @4, @1, nil];\nNSLog(@\"set1: %@\", set1);\nfor (NSNumber *n in set1) {\n  NSLog(@\"set1 value: %@\", n);\n}\n\nNSMutableSet *setu1 = [NSMutableSet setWithObjects:@1, @2, @3, @4, nil];\n[setu1 removeObject:@4];\n[setu1 addObject:@5];\nNSLog(@\"setu1: %@\", setu1);\n```\n\n## 类型转换\n\n#### NSString <==> NSNumber\n\n```objective-c\nNSString *ageStr1 = @\"18\";\nNSNumber *age1 = @([ageStr1 integerValue]);\n\nNSNumber *age2 = @19;\nNSString *ageStr2 = [age2 stringValue];\n```\n\n#### NSString <==> NSArray\n\n```objective-c\nNSString *names = @\"apple,banana\";\nNSArray *nameArr = [names componentsSeparatedByString:@\",\"];\nNSLog(@\"%@\", nameArr);\n\nNSArray *arr = @[@\"apple\",@\"banana\"];\nNSString *arrStr = [arr componentsJoinedByString:@\"-\"];\nNSLog(@\"%@\", arrStr);\n```\n\n#### NSArray <==> NSSet\n\n```objective-c\nNSArray *arr = @[@\"apple\", @\"banana\", @\"apple\", @\"orange\"];\nNSSet *set = [NSSet setWithArray:arr];\nNSLog(@\"set %@\", set);\n\nNSSet *set2 = [NSSet setWithObjects:@\"orange\", @\"banana\", @\"apple\", nil];\nNSMutableArray *arrm2 = [NSMutableArray array];\nfor (id value in set2) {\n  [arrm2 addObject:value];\n}\nNSLog(@\"arrm2: %@\", arrm2);\n```\n\n#### NSArray <==> NSDictionary\n\n```objective-c\nNSArray *arr1 = @[@\"apple\", @\"banana\"];\nNSArray *arr2 = @[@1.5, @1.2];\nNSDictionary *dic = [NSDictionary dictionaryWithObjects:arr2 forKeys:arr1];\nNSLog(@\"%@\", dic);\n\nNSDictionary *dic2 = @{@\"apple\": @1.5, @\"banana\": @1.2};\nNSArray *arr3 = dic2.allKeys;\nNSArray *arr4 = dic2.allValues;\n```\n\n## NSData\n\n```objective-c\nNSString *str = @\"apple\";\nNSData *data = [str dataUsingEncoding:NSUTF8StringEncoding];\nNSLog(@\"%@\", data);\n\nNSString *str2 = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\nNSLog(@\"%@\", str2);\n```\n\n## NSError\n\n```objective-c\n#import <Foundation/Foundation.h>\n\ntypedef NS_ENUM(NSUInteger, CheckError) {\n    CheckErrorTooMax = 1\n};\n\nNSError *check(NSArray *arr) {\n    for (NSNumber *v in arr) {\n        int r = [v compare:@10];\n        NSLog(@\"value:%@, result:%i\", v, r);\n        if ([v compare:@10] == 1) {\n            NSDictionary *userInfo = @{@\"number\": v};\n            return [NSError errorWithDomain:@\"check failed\" code:CheckErrorTooMax userInfo:userInfo];\n        }\n    }\n    return nil;\n}\n\nint main(int argc, const char *argv[]) {\n    @autoreleasepool {\n        NSArray *arr = @[@1, @4, @7, @9, @12];\n        NSError *err = check(arr);\n        NSLog(@\"%@\", err);\n    }\n    return 0;\n}\n```","slug":"2017-2017-10-08-objective-c-2","published":1,"updated":"2020-03-06T01:27:01.540Z","comments":1,"photos":[],"link":"","_id":"cka5ik8bp003bnybguuq88ob1","content":"<p>记录学习过程，做好笔记。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"NSDictionary\"><a href=\"#NSDictionary\" class=\"headerlink\" title=\"NSDictionary\"></a>NSDictionary</h2><h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSDictionary *dic1 = @&#123;@&quot;apple&quot;: @1.5, @&quot;banana&quot;: @1.2&#125;;</span><br><span class=\"line\">NSDictionary&lt;NSString *, NSNumber *&gt; *dic2 = [NSDictionary dictionaryWithObjectsAndKeys:@1.5, @&quot;apple&quot;, @1.2, @&quot;banana&quot;, nil];s</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"读取\"><a href=\"#读取\" class=\"headerlink\" title=\"读取\"></a>读取</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (id key in dic1.allKeys) &#123;</span><br><span class=\"line\">  id v = dic1[key];</span><br><span class=\"line\">  // id v = [dic1 objectForKey:key];</span><br><span class=\"line\">  NSLog(@&quot;&lt;1&gt;key:%@, value:%@&quot;, key, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for (NSString *key in dic2.allKeys) &#123;</span><br><span class=\"line\">  NSNumber *v = dic1[key];</span><br><span class=\"line\">  NSLog(@&quot;&lt;2&gt;key:%@, value:%@&quot;, key, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">for (id key in dic1.allKeys) &#123;</span><br><span class=\"line\">  id v = dic1[key];</span><br><span class=\"line\">  // id v = [dic1 objectForKey:key];</span><br><span class=\"line\">  NSLog(@&quot;&lt;1&gt;key:%@, value:%@&quot;, key, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for (NSString *key in dic2.allKeys) &#123;</span><br><span class=\"line\">  NSNumber *v = dic1[key];</span><br><span class=\"line\">  NSLog(@&quot;&lt;2&gt;key:%@, value:%@&quot;, key, v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"转换\"><a href=\"#转换\" class=\"headerlink\" title=\"转换\"></a>转换</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray *keys = dic2.allKeys;</span><br><span class=\"line\">NSArray *values = dic2.allValues;</span><br><span class=\"line\">NSLog(@&quot;keys: %@&quot;, keys);</span><br><span class=\"line\">NSLog(@&quot;values: %@&quot;, values);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"写入读取\"><a href=\"#写入读取\" class=\"headerlink\" title=\"写入读取\"></a>写入读取</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableDictionary *dicm1 = [NSMutableDictionary dictionaryWithObjectsAndKeys:@1.5, @&quot;apple&quot;, nil];</span><br><span class=\"line\">// [dicm1 setObject:@1.2 forKey:@&quot;banana&quot;];</span><br><span class=\"line\">dicm1[@&quot;banana&quot;] = @1.2;</span><br><span class=\"line\">NSLog(@&quot;dicm1: %@&quot;, dicm1);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NSSet\"><a href=\"#NSSet\" class=\"headerlink\" title=\"NSSet\"></a>NSSet</h2><h4 id=\"创建读取\"><a href=\"#创建读取\" class=\"headerlink\" title=\"创建读取\"></a>创建读取</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSSet *set1 = [NSSet setWithObjects:@1, @2, @3, @4, @1, nil];</span><br><span class=\"line\">NSLog(@&quot;set1: %@&quot;, set1);</span><br><span class=\"line\">for (NSNumber *n in set1) &#123;</span><br><span class=\"line\">  NSLog(@&quot;set1 value: %@&quot;, n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NSMutableSet *setu1 = [NSMutableSet setWithObjects:@1, @2, @3, @4, nil];</span><br><span class=\"line\">[setu1 removeObject:@4];</span><br><span class=\"line\">[setu1 addObject:@5];</span><br><span class=\"line\">NSLog(@&quot;setu1: %@&quot;, setu1);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><h4 id=\"NSString-lt-gt-NSNumber\"><a href=\"#NSString-lt-gt-NSNumber\" class=\"headerlink\" title=\"NSString &lt;==&gt; NSNumber\"></a>NSString &lt;==&gt; NSNumber</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *ageStr1 = @&quot;18&quot;;</span><br><span class=\"line\">NSNumber *age1 = @([ageStr1 integerValue]);</span><br><span class=\"line\"></span><br><span class=\"line\">NSNumber *age2 = @19;</span><br><span class=\"line\">NSString *ageStr2 = [age2 stringValue];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"NSString-lt-gt-NSArray\"><a href=\"#NSString-lt-gt-NSArray\" class=\"headerlink\" title=\"NSString &lt;==&gt; NSArray\"></a>NSString &lt;==&gt; NSArray</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *names = @&quot;apple,banana&quot;;</span><br><span class=\"line\">NSArray *nameArr = [names componentsSeparatedByString:@&quot;,&quot;];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, nameArr);</span><br><span class=\"line\"></span><br><span class=\"line\">NSArray *arr = @[@&quot;apple&quot;,@&quot;banana&quot;];</span><br><span class=\"line\">NSString *arrStr = [arr componentsJoinedByString:@&quot;-&quot;];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, arrStr);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"NSArray-lt-gt-NSSet\"><a href=\"#NSArray-lt-gt-NSSet\" class=\"headerlink\" title=\"NSArray &lt;==&gt; NSSet\"></a>NSArray &lt;==&gt; NSSet</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray *arr = @[@&quot;apple&quot;, @&quot;banana&quot;, @&quot;apple&quot;, @&quot;orange&quot;];</span><br><span class=\"line\">NSSet *set = [NSSet setWithArray:arr];</span><br><span class=\"line\">NSLog(@&quot;set %@&quot;, set);</span><br><span class=\"line\"></span><br><span class=\"line\">NSSet *set2 = [NSSet setWithObjects:@&quot;orange&quot;, @&quot;banana&quot;, @&quot;apple&quot;, nil];</span><br><span class=\"line\">NSMutableArray *arrm2 = [NSMutableArray array];</span><br><span class=\"line\">for (id value in set2) &#123;</span><br><span class=\"line\">  [arrm2 addObject:value];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">NSLog(@&quot;arrm2: %@&quot;, arrm2);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"NSArray-lt-gt-NSDictionary\"><a href=\"#NSArray-lt-gt-NSDictionary\" class=\"headerlink\" title=\"NSArray &lt;==&gt; NSDictionary\"></a>NSArray &lt;==&gt; NSDictionary</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray *arr1 = @[@&quot;apple&quot;, @&quot;banana&quot;];</span><br><span class=\"line\">NSArray *arr2 = @[@1.5, @1.2];</span><br><span class=\"line\">NSDictionary *dic = [NSDictionary dictionaryWithObjects:arr2 forKeys:arr1];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, dic);</span><br><span class=\"line\"></span><br><span class=\"line\">NSDictionary *dic2 = @&#123;@&quot;apple&quot;: @1.5, @&quot;banana&quot;: @1.2&#125;;</span><br><span class=\"line\">NSArray *arr3 = dic2.allKeys;</span><br><span class=\"line\">NSArray *arr4 = dic2.allValues;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NSData\"><a href=\"#NSData\" class=\"headerlink\" title=\"NSData\"></a>NSData</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str = @&quot;apple&quot;;</span><br><span class=\"line\">NSData *data = [str dataUsingEncoding:NSUTF8StringEncoding];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, data);</span><br><span class=\"line\"></span><br><span class=\"line\">NSString *str2 = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, str2);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NSError\"><a href=\"#NSError\" class=\"headerlink\" title=\"NSError\"></a>NSError</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef NS_ENUM(NSUInteger, CheckError) &#123;</span><br><span class=\"line\">    CheckErrorTooMax = 1</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">NSError *check(NSArray *arr) &#123;</span><br><span class=\"line\">    for (NSNumber *v in arr) &#123;</span><br><span class=\"line\">        int r = [v compare:@10];</span><br><span class=\"line\">        NSLog(@&quot;value:%@, result:%i&quot;, v, r);</span><br><span class=\"line\">        if ([v compare:@10] == 1) &#123;</span><br><span class=\"line\">            NSDictionary *userInfo = @&#123;@&quot;number&quot;: v&#125;;</span><br><span class=\"line\">            return [NSError errorWithDomain:@&quot;check failed&quot; code:CheckErrorTooMax userInfo:userInfo];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return nil;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, const char *argv[]) &#123;</span><br><span class=\"line\">    @autoreleasepool &#123;</span><br><span class=\"line\">        NSArray *arr = @[@1, @4, @7, @9, @12];</span><br><span class=\"line\">        NSError *err = check(arr);</span><br><span class=\"line\">        NSLog(@&quot;%@&quot;, err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>记录学习过程，做好笔记。</p>","more":"<h2 id=\"NSDictionary\"><a href=\"#NSDictionary\" class=\"headerlink\" title=\"NSDictionary\"></a>NSDictionary</h2><h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSDictionary *dic1 = @&#123;@&quot;apple&quot;: @1.5, @&quot;banana&quot;: @1.2&#125;;</span><br><span class=\"line\">NSDictionary&lt;NSString *, NSNumber *&gt; *dic2 = [NSDictionary dictionaryWithObjectsAndKeys:@1.5, @&quot;apple&quot;, @1.2, @&quot;banana&quot;, nil];s</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"读取\"><a href=\"#读取\" class=\"headerlink\" title=\"读取\"></a>读取</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (id key in dic1.allKeys) &#123;</span><br><span class=\"line\">  id v = dic1[key];</span><br><span class=\"line\">  // id v = [dic1 objectForKey:key];</span><br><span class=\"line\">  NSLog(@&quot;&lt;1&gt;key:%@, value:%@&quot;, key, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for (NSString *key in dic2.allKeys) &#123;</span><br><span class=\"line\">  NSNumber *v = dic1[key];</span><br><span class=\"line\">  NSLog(@&quot;&lt;2&gt;key:%@, value:%@&quot;, key, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">for (id key in dic1.allKeys) &#123;</span><br><span class=\"line\">  id v = dic1[key];</span><br><span class=\"line\">  // id v = [dic1 objectForKey:key];</span><br><span class=\"line\">  NSLog(@&quot;&lt;1&gt;key:%@, value:%@&quot;, key, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for (NSString *key in dic2.allKeys) &#123;</span><br><span class=\"line\">  NSNumber *v = dic1[key];</span><br><span class=\"line\">  NSLog(@&quot;&lt;2&gt;key:%@, value:%@&quot;, key, v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"转换\"><a href=\"#转换\" class=\"headerlink\" title=\"转换\"></a>转换</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray *keys = dic2.allKeys;</span><br><span class=\"line\">NSArray *values = dic2.allValues;</span><br><span class=\"line\">NSLog(@&quot;keys: %@&quot;, keys);</span><br><span class=\"line\">NSLog(@&quot;values: %@&quot;, values);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"写入读取\"><a href=\"#写入读取\" class=\"headerlink\" title=\"写入读取\"></a>写入读取</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableDictionary *dicm1 = [NSMutableDictionary dictionaryWithObjectsAndKeys:@1.5, @&quot;apple&quot;, nil];</span><br><span class=\"line\">// [dicm1 setObject:@1.2 forKey:@&quot;banana&quot;];</span><br><span class=\"line\">dicm1[@&quot;banana&quot;] = @1.2;</span><br><span class=\"line\">NSLog(@&quot;dicm1: %@&quot;, dicm1);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NSSet\"><a href=\"#NSSet\" class=\"headerlink\" title=\"NSSet\"></a>NSSet</h2><h4 id=\"创建读取\"><a href=\"#创建读取\" class=\"headerlink\" title=\"创建读取\"></a>创建读取</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSSet *set1 = [NSSet setWithObjects:@1, @2, @3, @4, @1, nil];</span><br><span class=\"line\">NSLog(@&quot;set1: %@&quot;, set1);</span><br><span class=\"line\">for (NSNumber *n in set1) &#123;</span><br><span class=\"line\">  NSLog(@&quot;set1 value: %@&quot;, n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NSMutableSet *setu1 = [NSMutableSet setWithObjects:@1, @2, @3, @4, nil];</span><br><span class=\"line\">[setu1 removeObject:@4];</span><br><span class=\"line\">[setu1 addObject:@5];</span><br><span class=\"line\">NSLog(@&quot;setu1: %@&quot;, setu1);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><h4 id=\"NSString-lt-gt-NSNumber\"><a href=\"#NSString-lt-gt-NSNumber\" class=\"headerlink\" title=\"NSString &lt;==&gt; NSNumber\"></a>NSString &lt;==&gt; NSNumber</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *ageStr1 = @&quot;18&quot;;</span><br><span class=\"line\">NSNumber *age1 = @([ageStr1 integerValue]);</span><br><span class=\"line\"></span><br><span class=\"line\">NSNumber *age2 = @19;</span><br><span class=\"line\">NSString *ageStr2 = [age2 stringValue];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"NSString-lt-gt-NSArray\"><a href=\"#NSString-lt-gt-NSArray\" class=\"headerlink\" title=\"NSString &lt;==&gt; NSArray\"></a>NSString &lt;==&gt; NSArray</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *names = @&quot;apple,banana&quot;;</span><br><span class=\"line\">NSArray *nameArr = [names componentsSeparatedByString:@&quot;,&quot;];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, nameArr);</span><br><span class=\"line\"></span><br><span class=\"line\">NSArray *arr = @[@&quot;apple&quot;,@&quot;banana&quot;];</span><br><span class=\"line\">NSString *arrStr = [arr componentsJoinedByString:@&quot;-&quot;];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, arrStr);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"NSArray-lt-gt-NSSet\"><a href=\"#NSArray-lt-gt-NSSet\" class=\"headerlink\" title=\"NSArray &lt;==&gt; NSSet\"></a>NSArray &lt;==&gt; NSSet</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray *arr = @[@&quot;apple&quot;, @&quot;banana&quot;, @&quot;apple&quot;, @&quot;orange&quot;];</span><br><span class=\"line\">NSSet *set = [NSSet setWithArray:arr];</span><br><span class=\"line\">NSLog(@&quot;set %@&quot;, set);</span><br><span class=\"line\"></span><br><span class=\"line\">NSSet *set2 = [NSSet setWithObjects:@&quot;orange&quot;, @&quot;banana&quot;, @&quot;apple&quot;, nil];</span><br><span class=\"line\">NSMutableArray *arrm2 = [NSMutableArray array];</span><br><span class=\"line\">for (id value in set2) &#123;</span><br><span class=\"line\">  [arrm2 addObject:value];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">NSLog(@&quot;arrm2: %@&quot;, arrm2);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"NSArray-lt-gt-NSDictionary\"><a href=\"#NSArray-lt-gt-NSDictionary\" class=\"headerlink\" title=\"NSArray &lt;==&gt; NSDictionary\"></a>NSArray &lt;==&gt; NSDictionary</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray *arr1 = @[@&quot;apple&quot;, @&quot;banana&quot;];</span><br><span class=\"line\">NSArray *arr2 = @[@1.5, @1.2];</span><br><span class=\"line\">NSDictionary *dic = [NSDictionary dictionaryWithObjects:arr2 forKeys:arr1];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, dic);</span><br><span class=\"line\"></span><br><span class=\"line\">NSDictionary *dic2 = @&#123;@&quot;apple&quot;: @1.5, @&quot;banana&quot;: @1.2&#125;;</span><br><span class=\"line\">NSArray *arr3 = dic2.allKeys;</span><br><span class=\"line\">NSArray *arr4 = dic2.allValues;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NSData\"><a href=\"#NSData\" class=\"headerlink\" title=\"NSData\"></a>NSData</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str = @&quot;apple&quot;;</span><br><span class=\"line\">NSData *data = [str dataUsingEncoding:NSUTF8StringEncoding];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, data);</span><br><span class=\"line\"></span><br><span class=\"line\">NSString *str2 = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];</span><br><span class=\"line\">NSLog(@&quot;%@&quot;, str2);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NSError\"><a href=\"#NSError\" class=\"headerlink\" title=\"NSError\"></a>NSError</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef NS_ENUM(NSUInteger, CheckError) &#123;</span><br><span class=\"line\">    CheckErrorTooMax = 1</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">NSError *check(NSArray *arr) &#123;</span><br><span class=\"line\">    for (NSNumber *v in arr) &#123;</span><br><span class=\"line\">        int r = [v compare:@10];</span><br><span class=\"line\">        NSLog(@&quot;value:%@, result:%i&quot;, v, r);</span><br><span class=\"line\">        if ([v compare:@10] == 1) &#123;</span><br><span class=\"line\">            NSDictionary *userInfo = @&#123;@&quot;number&quot;: v&#125;;</span><br><span class=\"line\">            return [NSError errorWithDomain:@&quot;check failed&quot; code:CheckErrorTooMax userInfo:userInfo];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return nil;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, const char *argv[]) &#123;</span><br><span class=\"line\">    @autoreleasepool &#123;</span><br><span class=\"line\">        NSArray *arr = @[@1, @4, @7, @9, @12];</span><br><span class=\"line\">        NSError *err = check(arr);</span><br><span class=\"line\">        NSLog(@&quot;%@&quot;, err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"Objective-C 学习（三） - 内存管理 KVC","date":"2017-10-10T22:23:00.000Z","_content":"\n记录学习过程，做好笔记。\n\n<!-- more -->\n\n## 内存管理\n\n#### ARC 管理\n\nARC 管理下，一般情况下，无需手动管理内存。\n\n需要注意的是，防止出现循环引用。此时可使用弱引用来解决。\n\n```objective-c\n@property (weak) NSString *str;\n```\n\n#### 手动管理\n\n在OC 1.0时，需要手动调用 `release`来进行触发。\n\n在使用 `CoreFoundation` 对象中，使用 `CFRelease(str)`。\n\n#### 内容释放通知\n\n```objective-c\n- (void)dealloc {\n  NSLog(@\"dealloc\");\n}\n```\n\n#### 变量在 ARC 和手动管理下转换\n\n* `__bridge` 不修改内存管理方式\n* `__bridge_retained` 修改为手动管理\n* `__bridge_transfer` 修改为 ARC 管理\n\n\n```objective-c\nNSString *str1 = @\"apple\";\n// str1 强转，并且保留 str1 的 ARC 管理\nCFStringRef str2 = (__bridge CFStringRef) str1;\n// str1 强转，并修改内存管理方式为手动管理\nCFStringRef str21 = (__bridge_retained CFStringRef) str1;\n\nCFStringRef str3 = CFStringCreateWithCString(NULL, \"apple\", kCFStringEncodingUTF8);\n// str3 强转，并且保留 str3 的 ARC 管理\nNSString *str4 = (__bridge NSString *) str3;\n// str3 强转，并修改内存管理方式为手动管理\nNSString *str41 = (__bridge_transfer NSString *) str3;\n```\n\n\n## @property\n\n```objective-c\n@property (weak) NSString *str;\n@property (strong) NSString *str;\n@property (assign) CGFloat *num; \n\n@property (assign) NSString *str;\n// 等同于\n@property (unsafe_unretained) NSString *str;\n\n@property (copy) NSString *str;\n\n@property (readonly) NSString *str;\n```\n\nOC对象：默认修饰符是 `strong`\n\n非OC对象：默认修饰符是 `assign`\n\n`assign` 可以修饰 OC 对象，也可以修饰非 OC 对象，均表示弱引用（引用计数不增加）\n\n内存回收后，`weak` 的对象返回 nil，`assign` 的对象返回原始值\n\n## KVC\n\n通过 `setValue: forKey:` 快速赋值：\n\n```objective-c\n- (instancetype)initWithDict:(NSDictionary *)dict {\n    self = [super init];\n    if (self) {\n        [dict enumerateKeysAndObjectsUsingBlock:^(id key, id obj, BOOL *stop) {\n            [self setValue:obj forKey:key];\n        }];\n    }\n    return self;\n}\n```\n\n赋值时，对于不存在的 key，则会调用 `setValue: forUndefinedKey:`：\n\n```objective-c\n- (void)setValue:(id)value forUndefinedKey:(NSString *)key {\n    NSLog(@\"undefined key:%@, value:%@\", key, value);\n}\n```\n\n读取时候，不存在 key，则会调用 `valueForUndefinedKey:`：\n\n```objective-c\n- (id)valueForUndefinedKey:(NSString *)key {\n    return nil;\n}\n```\n\n读取嵌套对象\n\n```objective-c\nAddress *addr = [[Address alloc] initWithProvince:@\"北京\" city:@\"北京\" county:@\"东城区\"];\nNSDictionary *dict = @{@\"name\": @\"小明\", @\"age\": @18, @\"address\": addr};\nUser *user = [[User alloc] initWithDict:dict];\nNSString *city1 = [[user valueForKey:@\"address\"] valueForKey:@\"city\"];\nNSString *city2 = [user valueForKeyPath:@\"address.city\"];\n```\n\nKVC集合操作：\n\n```objective-c\nNSMutableArray *arr = [NSMutableArray array];\n{\n  NSDictionary *dict = @{@\"name\": @\"小明\", @\"age\": @18};\n  User *user = [[User alloc] initWithDict:dict];\n  [arr addObject:user];\n}\n{\n  NSDictionary *dict = @{@\"name\": @\"小王\", @\"age\": @16};\n  User *user = [[User alloc] initWithDict:dict];\n  [arr addObject:user];\n}\n{\n  NSDictionary *dict = @{@\"name\": @\"小刘\", @\"age\": @20};\n  User *user = [[User alloc] initWithDict:dict];\n  [arr addObject:user];\n}\n\n// 计算平均年龄\n// CGFloat sum = 0;\n// for (User *user in arr) {\n//     sum = user.age;\n// }\n// CGFloat avg = sum / arr.count;\nCGFloat avg = [[arr valueForKeyPath:@\"@avg.age\"] floatValue];\n```\n\n支持的5种语法：\n\n```objective-c\n[arr valueForKeyPath:@\"@avg.age\"];\n[arr valueForKeyPath:@\"@sum.age\"];\n[arr valueForKeyPath:@\"@max.age\"];\n[arr valueForKeyPath:@\"@min.age\"];\n[arr valueForKeyPath:@\"@count\"];\n```","source":"_posts/2017/2017-10-10-objective-c-3.md","raw":"---\nlayout: post\ntitle: \"Objective-C 学习（三） - 内存管理 KVC\"\ndate: 2017-10-10 22:23:00 GMT+0800\ncategories: [编程]\ntags:  [Objective-C]\n---\n\n记录学习过程，做好笔记。\n\n<!-- more -->\n\n## 内存管理\n\n#### ARC 管理\n\nARC 管理下，一般情况下，无需手动管理内存。\n\n需要注意的是，防止出现循环引用。此时可使用弱引用来解决。\n\n```objective-c\n@property (weak) NSString *str;\n```\n\n#### 手动管理\n\n在OC 1.0时，需要手动调用 `release`来进行触发。\n\n在使用 `CoreFoundation` 对象中，使用 `CFRelease(str)`。\n\n#### 内容释放通知\n\n```objective-c\n- (void)dealloc {\n  NSLog(@\"dealloc\");\n}\n```\n\n#### 变量在 ARC 和手动管理下转换\n\n* `__bridge` 不修改内存管理方式\n* `__bridge_retained` 修改为手动管理\n* `__bridge_transfer` 修改为 ARC 管理\n\n\n```objective-c\nNSString *str1 = @\"apple\";\n// str1 强转，并且保留 str1 的 ARC 管理\nCFStringRef str2 = (__bridge CFStringRef) str1;\n// str1 强转，并修改内存管理方式为手动管理\nCFStringRef str21 = (__bridge_retained CFStringRef) str1;\n\nCFStringRef str3 = CFStringCreateWithCString(NULL, \"apple\", kCFStringEncodingUTF8);\n// str3 强转，并且保留 str3 的 ARC 管理\nNSString *str4 = (__bridge NSString *) str3;\n// str3 强转，并修改内存管理方式为手动管理\nNSString *str41 = (__bridge_transfer NSString *) str3;\n```\n\n\n## @property\n\n```objective-c\n@property (weak) NSString *str;\n@property (strong) NSString *str;\n@property (assign) CGFloat *num; \n\n@property (assign) NSString *str;\n// 等同于\n@property (unsafe_unretained) NSString *str;\n\n@property (copy) NSString *str;\n\n@property (readonly) NSString *str;\n```\n\nOC对象：默认修饰符是 `strong`\n\n非OC对象：默认修饰符是 `assign`\n\n`assign` 可以修饰 OC 对象，也可以修饰非 OC 对象，均表示弱引用（引用计数不增加）\n\n内存回收后，`weak` 的对象返回 nil，`assign` 的对象返回原始值\n\n## KVC\n\n通过 `setValue: forKey:` 快速赋值：\n\n```objective-c\n- (instancetype)initWithDict:(NSDictionary *)dict {\n    self = [super init];\n    if (self) {\n        [dict enumerateKeysAndObjectsUsingBlock:^(id key, id obj, BOOL *stop) {\n            [self setValue:obj forKey:key];\n        }];\n    }\n    return self;\n}\n```\n\n赋值时，对于不存在的 key，则会调用 `setValue: forUndefinedKey:`：\n\n```objective-c\n- (void)setValue:(id)value forUndefinedKey:(NSString *)key {\n    NSLog(@\"undefined key:%@, value:%@\", key, value);\n}\n```\n\n读取时候，不存在 key，则会调用 `valueForUndefinedKey:`：\n\n```objective-c\n- (id)valueForUndefinedKey:(NSString *)key {\n    return nil;\n}\n```\n\n读取嵌套对象\n\n```objective-c\nAddress *addr = [[Address alloc] initWithProvince:@\"北京\" city:@\"北京\" county:@\"东城区\"];\nNSDictionary *dict = @{@\"name\": @\"小明\", @\"age\": @18, @\"address\": addr};\nUser *user = [[User alloc] initWithDict:dict];\nNSString *city1 = [[user valueForKey:@\"address\"] valueForKey:@\"city\"];\nNSString *city2 = [user valueForKeyPath:@\"address.city\"];\n```\n\nKVC集合操作：\n\n```objective-c\nNSMutableArray *arr = [NSMutableArray array];\n{\n  NSDictionary *dict = @{@\"name\": @\"小明\", @\"age\": @18};\n  User *user = [[User alloc] initWithDict:dict];\n  [arr addObject:user];\n}\n{\n  NSDictionary *dict = @{@\"name\": @\"小王\", @\"age\": @16};\n  User *user = [[User alloc] initWithDict:dict];\n  [arr addObject:user];\n}\n{\n  NSDictionary *dict = @{@\"name\": @\"小刘\", @\"age\": @20};\n  User *user = [[User alloc] initWithDict:dict];\n  [arr addObject:user];\n}\n\n// 计算平均年龄\n// CGFloat sum = 0;\n// for (User *user in arr) {\n//     sum = user.age;\n// }\n// CGFloat avg = sum / arr.count;\nCGFloat avg = [[arr valueForKeyPath:@\"@avg.age\"] floatValue];\n```\n\n支持的5种语法：\n\n```objective-c\n[arr valueForKeyPath:@\"@avg.age\"];\n[arr valueForKeyPath:@\"@sum.age\"];\n[arr valueForKeyPath:@\"@max.age\"];\n[arr valueForKeyPath:@\"@min.age\"];\n[arr valueForKeyPath:@\"@count\"];\n```","slug":"2017-2017-10-10-objective-c-3","published":1,"updated":"2020-03-06T01:26:56.957Z","comments":1,"photos":[],"link":"","_id":"cka5ik8br003enybg1tgjrue8","content":"<p>记录学习过程，做好笔记。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h2><h4 id=\"ARC-管理\"><a href=\"#ARC-管理\" class=\"headerlink\" title=\"ARC 管理\"></a>ARC 管理</h4><p>ARC 管理下，一般情况下，无需手动管理内存。</p>\n<p>需要注意的是，防止出现循环引用。此时可使用弱引用来解决。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (weak) NSString *str;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"手动管理\"><a href=\"#手动管理\" class=\"headerlink\" title=\"手动管理\"></a>手动管理</h4><p>在OC 1.0时，需要手动调用 <code>release</code>来进行触发。</p>\n<p>在使用 <code>CoreFoundation</code> 对象中，使用 <code>CFRelease(str)</code>。</p>\n<h4 id=\"内容释放通知\"><a href=\"#内容释放通知\" class=\"headerlink\" title=\"内容释放通知\"></a>内容释放通知</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)dealloc &#123;</span><br><span class=\"line\">  NSLog(@&quot;dealloc&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"变量在-ARC-和手动管理下转换\"><a href=\"#变量在-ARC-和手动管理下转换\" class=\"headerlink\" title=\"变量在 ARC 和手动管理下转换\"></a>变量在 ARC 和手动管理下转换</h4><ul>\n<li><code>__bridge</code> 不修改内存管理方式</li>\n<li><code>__bridge_retained</code> 修改为手动管理</li>\n<li><code>__bridge_transfer</code> 修改为 ARC 管理</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str1 = @&quot;apple&quot;;</span><br><span class=\"line\">// str1 强转，并且保留 str1 的 ARC 管理</span><br><span class=\"line\">CFStringRef str2 = (__bridge CFStringRef) str1;</span><br><span class=\"line\">// str1 强转，并修改内存管理方式为手动管理</span><br><span class=\"line\">CFStringRef str21 = (__bridge_retained CFStringRef) str1;</span><br><span class=\"line\"></span><br><span class=\"line\">CFStringRef str3 = CFStringCreateWithCString(NULL, &quot;apple&quot;, kCFStringEncodingUTF8);</span><br><span class=\"line\">// str3 强转，并且保留 str3 的 ARC 管理</span><br><span class=\"line\">NSString *str4 = (__bridge NSString *) str3;</span><br><span class=\"line\">// str3 强转，并修改内存管理方式为手动管理</span><br><span class=\"line\">NSString *str41 = (__bridge_transfer NSString *) str3;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"property\"><a href=\"#property\" class=\"headerlink\" title=\"@property\"></a>@property</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (weak) NSString *str;</span><br><span class=\"line\">@property (strong) NSString *str;</span><br><span class=\"line\">@property (assign) CGFloat *num; </span><br><span class=\"line\"></span><br><span class=\"line\">@property (assign) NSString *str;</span><br><span class=\"line\">// 等同于</span><br><span class=\"line\">@property (unsafe_unretained) NSString *str;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (copy) NSString *str;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (readonly) NSString *str;</span><br></pre></td></tr></table></figure>\n\n<p>OC对象：默认修饰符是 <code>strong</code></p>\n<p>非OC对象：默认修饰符是 <code>assign</code></p>\n<p><code>assign</code> 可以修饰 OC 对象，也可以修饰非 OC 对象，均表示弱引用（引用计数不增加）</p>\n<p>内存回收后，<code>weak</code> 的对象返回 nil，<code>assign</code> 的对象返回原始值</p>\n<h2 id=\"KVC\"><a href=\"#KVC\" class=\"headerlink\" title=\"KVC\"></a>KVC</h2><p>通过 <code>setValue: forKey:</code> 快速赋值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (instancetype)initWithDict:(NSDictionary *)dict &#123;</span><br><span class=\"line\">    self = [super init];</span><br><span class=\"line\">    if (self) &#123;</span><br><span class=\"line\">        [dict enumerateKeysAndObjectsUsingBlock:^(id key, id obj, BOOL *stop) &#123;</span><br><span class=\"line\">            [self setValue:obj forKey:key];</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>赋值时，对于不存在的 key，则会调用 <code>setValue: forUndefinedKey:</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)setValue:(id)value forUndefinedKey:(NSString *)key &#123;</span><br><span class=\"line\">    NSLog(@&quot;undefined key:%@, value:%@&quot;, key, value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>读取时候，不存在 key，则会调用 <code>valueForUndefinedKey:</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (id)valueForUndefinedKey:(NSString *)key &#123;</span><br><span class=\"line\">    return nil;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>读取嵌套对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Address *addr = [[Address alloc] initWithProvince:@&quot;北京&quot; city:@&quot;北京&quot; county:@&quot;东城区&quot;];</span><br><span class=\"line\">NSDictionary *dict = @&#123;@&quot;name&quot;: @&quot;小明&quot;, @&quot;age&quot;: @18, @&quot;address&quot;: addr&#125;;</span><br><span class=\"line\">User *user = [[User alloc] initWithDict:dict];</span><br><span class=\"line\">NSString *city1 = [[user valueForKey:@&quot;address&quot;] valueForKey:@&quot;city&quot;];</span><br><span class=\"line\">NSString *city2 = [user valueForKeyPath:@&quot;address.city&quot;];</span><br></pre></td></tr></table></figure>\n\n<p>KVC集合操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableArray *arr = [NSMutableArray array];</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  NSDictionary *dict = @&#123;@&quot;name&quot;: @&quot;小明&quot;, @&quot;age&quot;: @18&#125;;</span><br><span class=\"line\">  User *user = [[User alloc] initWithDict:dict];</span><br><span class=\"line\">  [arr addObject:user];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  NSDictionary *dict = @&#123;@&quot;name&quot;: @&quot;小王&quot;, @&quot;age&quot;: @16&#125;;</span><br><span class=\"line\">  User *user = [[User alloc] initWithDict:dict];</span><br><span class=\"line\">  [arr addObject:user];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  NSDictionary *dict = @&#123;@&quot;name&quot;: @&quot;小刘&quot;, @&quot;age&quot;: @20&#125;;</span><br><span class=\"line\">  User *user = [[User alloc] initWithDict:dict];</span><br><span class=\"line\">  [arr addObject:user];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 计算平均年龄</span><br><span class=\"line\">// CGFloat sum = 0;</span><br><span class=\"line\">// for (User *user in arr) &#123;</span><br><span class=\"line\">//     sum = user.age;</span><br><span class=\"line\">// &#125;</span><br><span class=\"line\">// CGFloat avg = sum / arr.count;</span><br><span class=\"line\">CGFloat avg = [[arr valueForKeyPath:@&quot;@avg.age&quot;] floatValue];</span><br></pre></td></tr></table></figure>\n\n<p>支持的5种语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[arr valueForKeyPath:@&quot;@avg.age&quot;];</span><br><span class=\"line\">[arr valueForKeyPath:@&quot;@sum.age&quot;];</span><br><span class=\"line\">[arr valueForKeyPath:@&quot;@max.age&quot;];</span><br><span class=\"line\">[arr valueForKeyPath:@&quot;@min.age&quot;];</span><br><span class=\"line\">[arr valueForKeyPath:@&quot;@count&quot;];</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>记录学习过程，做好笔记。</p>","more":"<h2 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h2><h4 id=\"ARC-管理\"><a href=\"#ARC-管理\" class=\"headerlink\" title=\"ARC 管理\"></a>ARC 管理</h4><p>ARC 管理下，一般情况下，无需手动管理内存。</p>\n<p>需要注意的是，防止出现循环引用。此时可使用弱引用来解决。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (weak) NSString *str;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"手动管理\"><a href=\"#手动管理\" class=\"headerlink\" title=\"手动管理\"></a>手动管理</h4><p>在OC 1.0时，需要手动调用 <code>release</code>来进行触发。</p>\n<p>在使用 <code>CoreFoundation</code> 对象中，使用 <code>CFRelease(str)</code>。</p>\n<h4 id=\"内容释放通知\"><a href=\"#内容释放通知\" class=\"headerlink\" title=\"内容释放通知\"></a>内容释放通知</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)dealloc &#123;</span><br><span class=\"line\">  NSLog(@&quot;dealloc&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"变量在-ARC-和手动管理下转换\"><a href=\"#变量在-ARC-和手动管理下转换\" class=\"headerlink\" title=\"变量在 ARC 和手动管理下转换\"></a>变量在 ARC 和手动管理下转换</h4><ul>\n<li><code>__bridge</code> 不修改内存管理方式</li>\n<li><code>__bridge_retained</code> 修改为手动管理</li>\n<li><code>__bridge_transfer</code> 修改为 ARC 管理</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *str1 = @&quot;apple&quot;;</span><br><span class=\"line\">// str1 强转，并且保留 str1 的 ARC 管理</span><br><span class=\"line\">CFStringRef str2 = (__bridge CFStringRef) str1;</span><br><span class=\"line\">// str1 强转，并修改内存管理方式为手动管理</span><br><span class=\"line\">CFStringRef str21 = (__bridge_retained CFStringRef) str1;</span><br><span class=\"line\"></span><br><span class=\"line\">CFStringRef str3 = CFStringCreateWithCString(NULL, &quot;apple&quot;, kCFStringEncodingUTF8);</span><br><span class=\"line\">// str3 强转，并且保留 str3 的 ARC 管理</span><br><span class=\"line\">NSString *str4 = (__bridge NSString *) str3;</span><br><span class=\"line\">// str3 强转，并修改内存管理方式为手动管理</span><br><span class=\"line\">NSString *str41 = (__bridge_transfer NSString *) str3;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"property\"><a href=\"#property\" class=\"headerlink\" title=\"@property\"></a>@property</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (weak) NSString *str;</span><br><span class=\"line\">@property (strong) NSString *str;</span><br><span class=\"line\">@property (assign) CGFloat *num; </span><br><span class=\"line\"></span><br><span class=\"line\">@property (assign) NSString *str;</span><br><span class=\"line\">// 等同于</span><br><span class=\"line\">@property (unsafe_unretained) NSString *str;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (copy) NSString *str;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (readonly) NSString *str;</span><br></pre></td></tr></table></figure>\n\n<p>OC对象：默认修饰符是 <code>strong</code></p>\n<p>非OC对象：默认修饰符是 <code>assign</code></p>\n<p><code>assign</code> 可以修饰 OC 对象，也可以修饰非 OC 对象，均表示弱引用（引用计数不增加）</p>\n<p>内存回收后，<code>weak</code> 的对象返回 nil，<code>assign</code> 的对象返回原始值</p>\n<h2 id=\"KVC\"><a href=\"#KVC\" class=\"headerlink\" title=\"KVC\"></a>KVC</h2><p>通过 <code>setValue: forKey:</code> 快速赋值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (instancetype)initWithDict:(NSDictionary *)dict &#123;</span><br><span class=\"line\">    self = [super init];</span><br><span class=\"line\">    if (self) &#123;</span><br><span class=\"line\">        [dict enumerateKeysAndObjectsUsingBlock:^(id key, id obj, BOOL *stop) &#123;</span><br><span class=\"line\">            [self setValue:obj forKey:key];</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>赋值时，对于不存在的 key，则会调用 <code>setValue: forUndefinedKey:</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)setValue:(id)value forUndefinedKey:(NSString *)key &#123;</span><br><span class=\"line\">    NSLog(@&quot;undefined key:%@, value:%@&quot;, key, value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>读取时候，不存在 key，则会调用 <code>valueForUndefinedKey:</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (id)valueForUndefinedKey:(NSString *)key &#123;</span><br><span class=\"line\">    return nil;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>读取嵌套对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Address *addr = [[Address alloc] initWithProvince:@&quot;北京&quot; city:@&quot;北京&quot; county:@&quot;东城区&quot;];</span><br><span class=\"line\">NSDictionary *dict = @&#123;@&quot;name&quot;: @&quot;小明&quot;, @&quot;age&quot;: @18, @&quot;address&quot;: addr&#125;;</span><br><span class=\"line\">User *user = [[User alloc] initWithDict:dict];</span><br><span class=\"line\">NSString *city1 = [[user valueForKey:@&quot;address&quot;] valueForKey:@&quot;city&quot;];</span><br><span class=\"line\">NSString *city2 = [user valueForKeyPath:@&quot;address.city&quot;];</span><br></pre></td></tr></table></figure>\n\n<p>KVC集合操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableArray *arr = [NSMutableArray array];</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  NSDictionary *dict = @&#123;@&quot;name&quot;: @&quot;小明&quot;, @&quot;age&quot;: @18&#125;;</span><br><span class=\"line\">  User *user = [[User alloc] initWithDict:dict];</span><br><span class=\"line\">  [arr addObject:user];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  NSDictionary *dict = @&#123;@&quot;name&quot;: @&quot;小王&quot;, @&quot;age&quot;: @16&#125;;</span><br><span class=\"line\">  User *user = [[User alloc] initWithDict:dict];</span><br><span class=\"line\">  [arr addObject:user];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  NSDictionary *dict = @&#123;@&quot;name&quot;: @&quot;小刘&quot;, @&quot;age&quot;: @20&#125;;</span><br><span class=\"line\">  User *user = [[User alloc] initWithDict:dict];</span><br><span class=\"line\">  [arr addObject:user];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 计算平均年龄</span><br><span class=\"line\">// CGFloat sum = 0;</span><br><span class=\"line\">// for (User *user in arr) &#123;</span><br><span class=\"line\">//     sum = user.age;</span><br><span class=\"line\">// &#125;</span><br><span class=\"line\">// CGFloat avg = sum / arr.count;</span><br><span class=\"line\">CGFloat avg = [[arr valueForKeyPath:@&quot;@avg.age&quot;] floatValue];</span><br></pre></td></tr></table></figure>\n\n<p>支持的5种语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[arr valueForKeyPath:@&quot;@avg.age&quot;];</span><br><span class=\"line\">[arr valueForKeyPath:@&quot;@sum.age&quot;];</span><br><span class=\"line\">[arr valueForKeyPath:@&quot;@max.age&quot;];</span><br><span class=\"line\">[arr valueForKeyPath:@&quot;@min.age&quot;];</span><br><span class=\"line\">[arr valueForKeyPath:@&quot;@count&quot;];</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"iOS 学习（一） 绑定事件","date":"2017-10-17T23:46:00.000Z","_content":"\n学习事件绑定方法。\n\n<!-- more -->\n\n## 直接对按钮组件进行绑定\n\n在 `Main.storyboard` 中，拖拽组件到 implementation 中。唯一问题就是必须是可点击组件，其他组件不支持。\n\n## 直接代码绑定触摸\n\n使用 `UITapGestureRecognizer` 处理。也要注意，组件 `userInteractionEnabled` 需要是 `YES`。\n\n```objective-c\n#import \"ViewController.h\"\n\n@interface ViewController ()\n\n@end\n\n@implementation ViewController\n\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self setupView];\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n}\n\n- (void)setupView {\n    UIView *view = [[UIView alloc] init];\n    view.frame = CGRectMake(0, 20, 200, 50);\n    view.backgroundColor = [UIColor lightGrayColor];\n    [self.view addSubview:view];\n\n    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(10, 10, 100, 20)];\n    [label setText:@\"tap here\"];\n    [label setTextColor:[UIColor whiteColor]];\n    [view addSubview:label];\n\n    label.userInteractionEnabled = YES;\n    UITapGestureRecognizer *labelTapGestureRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(labelTouchUpInside:)];\n    [label addGestureRecognizer:labelTapGestureRecognizer];\n}\n\n- (void)labelTouchUpInside:(UITapGestureRecognizer *)recognizer {\n    NSLog(@\"tap label,text(%@)\", ((UILabel *) recognizer.view).text);\n}\n\n- (IBAction)buttonTouchUpInside:(id)sender {\n    NSLog(@\"tap button\");\n}\n\n@end\n```","source":"_posts/2017/2017-10-17-ios-1.md","raw":"---\nlayout: post\ntitle: \"iOS 学习（一） 绑定事件\"\ndate: 2017-10-17 23:46:00 GMT+0800\ncategories: [编程]\ntags:  [Objective-C]\n---\n\n学习事件绑定方法。\n\n<!-- more -->\n\n## 直接对按钮组件进行绑定\n\n在 `Main.storyboard` 中，拖拽组件到 implementation 中。唯一问题就是必须是可点击组件，其他组件不支持。\n\n## 直接代码绑定触摸\n\n使用 `UITapGestureRecognizer` 处理。也要注意，组件 `userInteractionEnabled` 需要是 `YES`。\n\n```objective-c\n#import \"ViewController.h\"\n\n@interface ViewController ()\n\n@end\n\n@implementation ViewController\n\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self setupView];\n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n}\n\n- (void)setupView {\n    UIView *view = [[UIView alloc] init];\n    view.frame = CGRectMake(0, 20, 200, 50);\n    view.backgroundColor = [UIColor lightGrayColor];\n    [self.view addSubview:view];\n\n    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(10, 10, 100, 20)];\n    [label setText:@\"tap here\"];\n    [label setTextColor:[UIColor whiteColor]];\n    [view addSubview:label];\n\n    label.userInteractionEnabled = YES;\n    UITapGestureRecognizer *labelTapGestureRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(labelTouchUpInside:)];\n    [label addGestureRecognizer:labelTapGestureRecognizer];\n}\n\n- (void)labelTouchUpInside:(UITapGestureRecognizer *)recognizer {\n    NSLog(@\"tap label,text(%@)\", ((UILabel *) recognizer.view).text);\n}\n\n- (IBAction)buttonTouchUpInside:(id)sender {\n    NSLog(@\"tap button\");\n}\n\n@end\n```","slug":"2017-2017-10-17-ios-1","published":1,"updated":"2020-03-06T01:27:08.430Z","comments":1,"photos":[],"link":"","_id":"cka5ik8bs003hnybgvi8nv6bl","content":"<p>学习事件绑定方法。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"直接对按钮组件进行绑定\"><a href=\"#直接对按钮组件进行绑定\" class=\"headerlink\" title=\"直接对按钮组件进行绑定\"></a>直接对按钮组件进行绑定</h2><p>在 <code>Main.storyboard</code> 中，拖拽组件到 implementation 中。唯一问题就是必须是可点击组件，其他组件不支持。</p>\n<h2 id=\"直接代码绑定触摸\"><a href=\"#直接代码绑定触摸\" class=\"headerlink\" title=\"直接代码绑定触摸\"></a>直接代码绑定触摸</h2><p>使用 <code>UITapGestureRecognizer</code> 处理。也要注意，组件 <code>userInteractionEnabled</code> 需要是 <code>YES</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;ViewController.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface ViewController ()</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation ViewController</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (void)viewDidLoad &#123;</span><br><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\">    [self setupView];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)didReceiveMemoryWarning &#123;</span><br><span class=\"line\">    [super didReceiveMemoryWarning];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)setupView &#123;</span><br><span class=\"line\">    UIView *view = [[UIView alloc] init];</span><br><span class=\"line\">    view.frame = CGRectMake(0, 20, 200, 50);</span><br><span class=\"line\">    view.backgroundColor = [UIColor lightGrayColor];</span><br><span class=\"line\">    [self.view addSubview:view];</span><br><span class=\"line\"></span><br><span class=\"line\">    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(10, 10, 100, 20)];</span><br><span class=\"line\">    [label setText:@&quot;tap here&quot;];</span><br><span class=\"line\">    [label setTextColor:[UIColor whiteColor]];</span><br><span class=\"line\">    [view addSubview:label];</span><br><span class=\"line\"></span><br><span class=\"line\">    label.userInteractionEnabled = YES;</span><br><span class=\"line\">    UITapGestureRecognizer *labelTapGestureRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(labelTouchUpInside:)];</span><br><span class=\"line\">    [label addGestureRecognizer:labelTapGestureRecognizer];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)labelTouchUpInside:(UITapGestureRecognizer *)recognizer &#123;</span><br><span class=\"line\">    NSLog(@&quot;tap label,text(%@)&quot;, ((UILabel *) recognizer.view).text);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (IBAction)buttonTouchUpInside:(id)sender &#123;</span><br><span class=\"line\">    NSLog(@&quot;tap button&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>学习事件绑定方法。</p>","more":"<h2 id=\"直接对按钮组件进行绑定\"><a href=\"#直接对按钮组件进行绑定\" class=\"headerlink\" title=\"直接对按钮组件进行绑定\"></a>直接对按钮组件进行绑定</h2><p>在 <code>Main.storyboard</code> 中，拖拽组件到 implementation 中。唯一问题就是必须是可点击组件，其他组件不支持。</p>\n<h2 id=\"直接代码绑定触摸\"><a href=\"#直接代码绑定触摸\" class=\"headerlink\" title=\"直接代码绑定触摸\"></a>直接代码绑定触摸</h2><p>使用 <code>UITapGestureRecognizer</code> 处理。也要注意，组件 <code>userInteractionEnabled</code> 需要是 <code>YES</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;ViewController.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface ViewController ()</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation ViewController</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (void)viewDidLoad &#123;</span><br><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\">    [self setupView];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)didReceiveMemoryWarning &#123;</span><br><span class=\"line\">    [super didReceiveMemoryWarning];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)setupView &#123;</span><br><span class=\"line\">    UIView *view = [[UIView alloc] init];</span><br><span class=\"line\">    view.frame = CGRectMake(0, 20, 200, 50);</span><br><span class=\"line\">    view.backgroundColor = [UIColor lightGrayColor];</span><br><span class=\"line\">    [self.view addSubview:view];</span><br><span class=\"line\"></span><br><span class=\"line\">    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(10, 10, 100, 20)];</span><br><span class=\"line\">    [label setText:@&quot;tap here&quot;];</span><br><span class=\"line\">    [label setTextColor:[UIColor whiteColor]];</span><br><span class=\"line\">    [view addSubview:label];</span><br><span class=\"line\"></span><br><span class=\"line\">    label.userInteractionEnabled = YES;</span><br><span class=\"line\">    UITapGestureRecognizer *labelTapGestureRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(labelTouchUpInside:)];</span><br><span class=\"line\">    [label addGestureRecognizer:labelTapGestureRecognizer];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)labelTouchUpInside:(UITapGestureRecognizer *)recognizer &#123;</span><br><span class=\"line\">    NSLog(@&quot;tap label,text(%@)&quot;, ((UILabel *) recognizer.view).text);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (IBAction)buttonTouchUpInside:(id)sender &#123;</span><br><span class=\"line\">    NSLog(@&quot;tap button&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"iOS 学习（二） 周期钩子","date":"2017-10-19T00:07:00.000Z","_content":"\n学习生命周期及钩子函数。\n\n<!-- more -->\n\n| 钩子 | 说明 |\n|----|----|\n|`loadView` | 创建 self.view （懒加载）|\n|`viewDidLoad` | view 加载完成，处理 view 相关功能 |\n|`viewWillAppear` | view 即将展现到 APP |\n|`viewDidAppear` | view 已经展现到 APP |\n|`viewWillDisappear` | view 即将移除 |\n|`viewDidDisappear` | view 已经移除 |\n\n在转场动画中，可能顺序是：\n\n\n正常操作： `secondWillDisappear` -> `firstWillAppear` -> `firstDidAppear` -> `secondDidDisappear`\n\n转场取消： `secondWillDisappear` -> `firstWillAppear` -> `firstWillDisappear` -> `firstDidDisappear` -> `secondWillApear` -> `secondWillAppear`","source":"_posts/2017/2017-10-19-ios-2.md","raw":"---\nlayout: post\ntitle: \"iOS 学习（二） 周期钩子\"\ndate: 2017-10-19 00:07:00 GMT+0800\ncategories: [编程]\ntags:  [Objective-C]\n---\n\n学习生命周期及钩子函数。\n\n<!-- more -->\n\n| 钩子 | 说明 |\n|----|----|\n|`loadView` | 创建 self.view （懒加载）|\n|`viewDidLoad` | view 加载完成，处理 view 相关功能 |\n|`viewWillAppear` | view 即将展现到 APP |\n|`viewDidAppear` | view 已经展现到 APP |\n|`viewWillDisappear` | view 即将移除 |\n|`viewDidDisappear` | view 已经移除 |\n\n在转场动画中，可能顺序是：\n\n\n正常操作： `secondWillDisappear` -> `firstWillAppear` -> `firstDidAppear` -> `secondDidDisappear`\n\n转场取消： `secondWillDisappear` -> `firstWillAppear` -> `firstWillDisappear` -> `firstDidDisappear` -> `secondWillApear` -> `secondWillAppear`","slug":"2017-2017-10-19-ios-2","published":1,"updated":"2020-03-06T01:27:12.564Z","comments":1,"photos":[],"link":"","_id":"cka5ik8bt003knybg7ohss4vh","content":"<p>学习生命周期及钩子函数。</p>\n<a id=\"more\"></a>\n\n<table>\n<thead>\n<tr>\n<th>钩子</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>loadView</code></td>\n<td>创建 self.view （懒加载）</td>\n</tr>\n<tr>\n<td><code>viewDidLoad</code></td>\n<td>view 加载完成，处理 view 相关功能</td>\n</tr>\n<tr>\n<td><code>viewWillAppear</code></td>\n<td>view 即将展现到 APP</td>\n</tr>\n<tr>\n<td><code>viewDidAppear</code></td>\n<td>view 已经展现到 APP</td>\n</tr>\n<tr>\n<td><code>viewWillDisappear</code></td>\n<td>view 即将移除</td>\n</tr>\n<tr>\n<td><code>viewDidDisappear</code></td>\n<td>view 已经移除</td>\n</tr>\n</tbody></table>\n<p>在转场动画中，可能顺序是：</p>\n<p>正常操作： <code>secondWillDisappear</code> -&gt; <code>firstWillAppear</code> -&gt; <code>firstDidAppear</code> -&gt; <code>secondDidDisappear</code></p>\n<p>转场取消： <code>secondWillDisappear</code> -&gt; <code>firstWillAppear</code> -&gt; <code>firstWillDisappear</code> -&gt; <code>firstDidDisappear</code> -&gt; <code>secondWillApear</code> -&gt; <code>secondWillAppear</code></p>\n","site":{"data":{}},"excerpt":"<p>学习生命周期及钩子函数。</p>","more":"<table>\n<thead>\n<tr>\n<th>钩子</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>loadView</code></td>\n<td>创建 self.view （懒加载）</td>\n</tr>\n<tr>\n<td><code>viewDidLoad</code></td>\n<td>view 加载完成，处理 view 相关功能</td>\n</tr>\n<tr>\n<td><code>viewWillAppear</code></td>\n<td>view 即将展现到 APP</td>\n</tr>\n<tr>\n<td><code>viewDidAppear</code></td>\n<td>view 已经展现到 APP</td>\n</tr>\n<tr>\n<td><code>viewWillDisappear</code></td>\n<td>view 即将移除</td>\n</tr>\n<tr>\n<td><code>viewDidDisappear</code></td>\n<td>view 已经移除</td>\n</tr>\n</tbody></table>\n<p>在转场动画中，可能顺序是：</p>\n<p>正常操作： <code>secondWillDisappear</code> -&gt; <code>firstWillAppear</code> -&gt; <code>firstDidAppear</code> -&gt; <code>secondDidDisappear</code></p>\n<p>转场取消： <code>secondWillDisappear</code> -&gt; <code>firstWillAppear</code> -&gt; <code>firstWillDisappear</code> -&gt; <code>firstDidDisappear</code> -&gt; <code>secondWillApear</code> -&gt; <code>secondWillAppear</code></p>"},{"layout":"post","title":"苹果 App Store 的计费思考","date":"2017-12-21T22:00:00.000Z","_content":"\n前两天，看 Pin 的作者出了新的软件 JSBox，感觉他是个非常认真做软件的工程师，就决定买下他的所有软件。\n\n原本上，我是在限免时间段，免费下载了 Pin。这是个前提。\n\n<!-- more -->\n\n现在有如下软件：\n\n| 软件                   | 价格   |\n| -------------------- | ---- |\n| Pin                  | 18   |\n| TodayMind            | 6    |\n| 小历                   | 1    |\n| JSBox                | 30   |\n| 套装1 Pin/TodayMind/小历 | 18   |\n| 套装2 Pin/JSBox        | 30   |\n\n我的想法是，先购买套装1，这样拥有3个授权，在购买套装2，这样由于有了 Pin 授权，应该可以用差价12元（30-18）来购买套装2。\n\n结果发现，根本不是这样子的。\n\n购买了套装1，可以下载套装1的所有 App 没问题。但是仅仅是下载使用而已，并不代表拥有 Pin 的独立授权（仅仅是使用权）。可以理解为，以优惠价格购买了3个 App，实际上你一个 App 都没有拥有。\n\n这时候购买套装2，还是以 30元的价格购买。此次购买，相当于重复购买了 Pin。\n\n这样非常不划算。\n\n所以，以后这种情况，我觉得基本上无解。因为关键 App （Pin）我是限免下载的，没办法再次付费了。也就是永远不能享受 Pin 的套装了。\n\n此时最好的解法是：独立购买 JSBox，虽然也是30元，但是拥有了独立授权。在独立购买 TodayMind 和小历。这样花钱最少，只需要 37 元（30+6+1）。而且除了 Pin，都是独立授权，未来如果有套装，还可能减免。\n\n如果没有限免时候下载 Pin，这样买最划算：购买独立 Pin （18元），购买套装1（免费），购买套装2（补差价12元）。此时 30 元享可以受所有 App。\n\n通过以上可以总结出：如果你购买拥有一个App，他是套装的核心，此时购买套装是价格优惠的，但是不能获得相应 App 的授权。如果你是限免下载的，那么就远离套装吧。\n\n我查了下，可以通过购买礼品卡形式，将App送给自己，但是不确定自己接收到App是拥有授权还是仅仅是使用权。\n\nEND","source":"_posts/2017/2017-12-21-app-store.md","raw":"---\nlayout: post\ntitle: \"苹果 App Store 的计费思考\"\ndate: 2017-12-21 22:00:00 GMT+0800\ncategories: [杂谈]\ntags:  [App Store, Pin]\n---\n\n前两天，看 Pin 的作者出了新的软件 JSBox，感觉他是个非常认真做软件的工程师，就决定买下他的所有软件。\n\n原本上，我是在限免时间段，免费下载了 Pin。这是个前提。\n\n<!-- more -->\n\n现在有如下软件：\n\n| 软件                   | 价格   |\n| -------------------- | ---- |\n| Pin                  | 18   |\n| TodayMind            | 6    |\n| 小历                   | 1    |\n| JSBox                | 30   |\n| 套装1 Pin/TodayMind/小历 | 18   |\n| 套装2 Pin/JSBox        | 30   |\n\n我的想法是，先购买套装1，这样拥有3个授权，在购买套装2，这样由于有了 Pin 授权，应该可以用差价12元（30-18）来购买套装2。\n\n结果发现，根本不是这样子的。\n\n购买了套装1，可以下载套装1的所有 App 没问题。但是仅仅是下载使用而已，并不代表拥有 Pin 的独立授权（仅仅是使用权）。可以理解为，以优惠价格购买了3个 App，实际上你一个 App 都没有拥有。\n\n这时候购买套装2，还是以 30元的价格购买。此次购买，相当于重复购买了 Pin。\n\n这样非常不划算。\n\n所以，以后这种情况，我觉得基本上无解。因为关键 App （Pin）我是限免下载的，没办法再次付费了。也就是永远不能享受 Pin 的套装了。\n\n此时最好的解法是：独立购买 JSBox，虽然也是30元，但是拥有了独立授权。在独立购买 TodayMind 和小历。这样花钱最少，只需要 37 元（30+6+1）。而且除了 Pin，都是独立授权，未来如果有套装，还可能减免。\n\n如果没有限免时候下载 Pin，这样买最划算：购买独立 Pin （18元），购买套装1（免费），购买套装2（补差价12元）。此时 30 元享可以受所有 App。\n\n通过以上可以总结出：如果你购买拥有一个App，他是套装的核心，此时购买套装是价格优惠的，但是不能获得相应 App 的授权。如果你是限免下载的，那么就远离套装吧。\n\n我查了下，可以通过购买礼品卡形式，将App送给自己，但是不确定自己接收到App是拥有授权还是仅仅是使用权。\n\nEND","slug":"2017-2017-12-21-app-store","published":1,"updated":"2020-03-06T01:18:28.026Z","comments":1,"photos":[],"link":"","_id":"cka5ik8bv003nnybg5c0xrjqe","content":"<p>前两天，看 Pin 的作者出了新的软件 JSBox，感觉他是个非常认真做软件的工程师，就决定买下他的所有软件。</p>\n<p>原本上，我是在限免时间段，免费下载了 Pin。这是个前提。</p>\n<a id=\"more\"></a>\n\n<p>现在有如下软件：</p>\n<table>\n<thead>\n<tr>\n<th>软件</th>\n<th>价格</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Pin</td>\n<td>18</td>\n</tr>\n<tr>\n<td>TodayMind</td>\n<td>6</td>\n</tr>\n<tr>\n<td>小历</td>\n<td>1</td>\n</tr>\n<tr>\n<td>JSBox</td>\n<td>30</td>\n</tr>\n<tr>\n<td>套装1 Pin/TodayMind/小历</td>\n<td>18</td>\n</tr>\n<tr>\n<td>套装2 Pin/JSBox</td>\n<td>30</td>\n</tr>\n</tbody></table>\n<p>我的想法是，先购买套装1，这样拥有3个授权，在购买套装2，这样由于有了 Pin 授权，应该可以用差价12元（30-18）来购买套装2。</p>\n<p>结果发现，根本不是这样子的。</p>\n<p>购买了套装1，可以下载套装1的所有 App 没问题。但是仅仅是下载使用而已，并不代表拥有 Pin 的独立授权（仅仅是使用权）。可以理解为，以优惠价格购买了3个 App，实际上你一个 App 都没有拥有。</p>\n<p>这时候购买套装2，还是以 30元的价格购买。此次购买，相当于重复购买了 Pin。</p>\n<p>这样非常不划算。</p>\n<p>所以，以后这种情况，我觉得基本上无解。因为关键 App （Pin）我是限免下载的，没办法再次付费了。也就是永远不能享受 Pin 的套装了。</p>\n<p>此时最好的解法是：独立购买 JSBox，虽然也是30元，但是拥有了独立授权。在独立购买 TodayMind 和小历。这样花钱最少，只需要 37 元（30+6+1）。而且除了 Pin，都是独立授权，未来如果有套装，还可能减免。</p>\n<p>如果没有限免时候下载 Pin，这样买最划算：购买独立 Pin （18元），购买套装1（免费），购买套装2（补差价12元）。此时 30 元享可以受所有 App。</p>\n<p>通过以上可以总结出：如果你购买拥有一个App，他是套装的核心，此时购买套装是价格优惠的，但是不能获得相应 App 的授权。如果你是限免下载的，那么就远离套装吧。</p>\n<p>我查了下，可以通过购买礼品卡形式，将App送给自己，但是不确定自己接收到App是拥有授权还是仅仅是使用权。</p>\n<p>END</p>\n","site":{"data":{}},"excerpt":"<p>前两天，看 Pin 的作者出了新的软件 JSBox，感觉他是个非常认真做软件的工程师，就决定买下他的所有软件。</p>\n<p>原本上，我是在限免时间段，免费下载了 Pin。这是个前提。</p>","more":"<p>现在有如下软件：</p>\n<table>\n<thead>\n<tr>\n<th>软件</th>\n<th>价格</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Pin</td>\n<td>18</td>\n</tr>\n<tr>\n<td>TodayMind</td>\n<td>6</td>\n</tr>\n<tr>\n<td>小历</td>\n<td>1</td>\n</tr>\n<tr>\n<td>JSBox</td>\n<td>30</td>\n</tr>\n<tr>\n<td>套装1 Pin/TodayMind/小历</td>\n<td>18</td>\n</tr>\n<tr>\n<td>套装2 Pin/JSBox</td>\n<td>30</td>\n</tr>\n</tbody></table>\n<p>我的想法是，先购买套装1，这样拥有3个授权，在购买套装2，这样由于有了 Pin 授权，应该可以用差价12元（30-18）来购买套装2。</p>\n<p>结果发现，根本不是这样子的。</p>\n<p>购买了套装1，可以下载套装1的所有 App 没问题。但是仅仅是下载使用而已，并不代表拥有 Pin 的独立授权（仅仅是使用权）。可以理解为，以优惠价格购买了3个 App，实际上你一个 App 都没有拥有。</p>\n<p>这时候购买套装2，还是以 30元的价格购买。此次购买，相当于重复购买了 Pin。</p>\n<p>这样非常不划算。</p>\n<p>所以，以后这种情况，我觉得基本上无解。因为关键 App （Pin）我是限免下载的，没办法再次付费了。也就是永远不能享受 Pin 的套装了。</p>\n<p>此时最好的解法是：独立购买 JSBox，虽然也是30元，但是拥有了独立授权。在独立购买 TodayMind 和小历。这样花钱最少，只需要 37 元（30+6+1）。而且除了 Pin，都是独立授权，未来如果有套装，还可能减免。</p>\n<p>如果没有限免时候下载 Pin，这样买最划算：购买独立 Pin （18元），购买套装1（免费），购买套装2（补差价12元）。此时 30 元享可以受所有 App。</p>\n<p>通过以上可以总结出：如果你购买拥有一个App，他是套装的核心，此时购买套装是价格优惠的，但是不能获得相应 App 的授权。如果你是限免下载的，那么就远离套装吧。</p>\n<p>我查了下，可以通过购买礼品卡形式，将App送给自己，但是不确定自己接收到App是拥有授权还是仅仅是使用权。</p>\n<p>END</p>"},{"layout":"post","title":"HTML DOM 和 XML DOM 操作","date":"2018-01-06T18:37:00.000Z","_content":"\n今天看到一篇[文章](https://segmentfault.com/a/1190000012674948)，突然发现自己之前对 DOM 操作有很大的误解。\n\n<!-- more -->\n\n## 获取元素的属性值\n\n对于页面的 DOM 元素，一般获取其 `id` `class` `dataset` 都有 HTML DOM 的获取方法，但是在我面试的时候，几乎所有的面试者都给出了让我意外的结果，那就是通过 XML DOM 的 `getAttribute` 方法来进行获取。\n\n## 一个例子\n\n基础模版如下：\n\n```html\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>DOM</title>\n</head>\n<body>\n<input type=\"text\" id=\"input0\" class=\"input-box\" value=\"hello world!\" data-view=\"abc\">\n\n<script>\n  var input = document.querySelector('#input0')\n</script>\n</body>\n</html>\n```\n\n首先测试 `class`：\n\n```js\nconsole.log('HTML - class before:', input.className)\nconsole.log('XML - class before:', input.getAttribute('class'))\ninput.classList.add('red')\ninput.className += ' blue'\nvar className = input.getAttribute('class')\ninput.setAttribute('class', className + ' green')\nconsole.log('HTML - class after:', input.className)\nconsole.log('XML - class after:', input.getAttribute('class'))\n\n\n// result\nHTML - class before: input-box\nXML - class before: input-box\nHTML - class after: input-box red blue green\nXML - class after: input-box red blue green\n```\n\n可以说，对于 `class` 不管用 HTML 还是 XML 的 DOM 方法，获取结果都是一致的。\n\n我们再测试下 `value`：\n\n```js\nconsole.log('HTML - value before:', input.value)\nconsole.log('XML - value before:', input.getAttribute('value'))\ninput.value += '123'\nconsole.log('HTML - value after:', input.value)\nconsole.log('XML - value after:', input.getAttribute('value'))\n//  input.addEventListener('input', function () {\n//    console.log('HTML - value after:', input.value)\n//    console.log('XML - value after:', input.getAttribute('value'))\n//  })\n\n// result\nHTML - value before: hello world!\nXML - value before: hello world!\nHTML - value after: hello world!123\nXML - value after: hello world!\n```\n\n不论是通过 JS 改变还是页面编辑触发，都会导致两者获得的值不同。其中 XML-DOM 方法获取的永远是原始值。\n\n其他属性，也可以进行测试，大部分情况下两者还是相同的。\n\n出现这种现象，我认为主要是 `操作是否在HTML上进行响应`。在操作 `class` 时，HTML 发生了改变。而 `value` 这个属性，不会随之改变。\n\n所以，常规的 `dataset` `id` `checked` 属性两种方案都可以正常获取。\n\n但是如果我们对 DOM 增加属性，如 `input.aaa = 111`，此时数据仅仅记录在 DOM 对象上，并没有反馈到 HTML 节点，所以 `getAttribute` 就无法获取。\n\n## 小结\n\n对于本次例子整体来说，HTML-DOM 是对象级别操作，可以对对象进行读取修改增加等，并不是所有的操作都需要反馈到 XML-DOM节点上。\n\n而XML-DOM是对XML节点（HTML 字符串）的读取和写入操作，其中写入操作必定还会反馈到HTML-DOM对象上。","source":"_posts/2018/2018-01-06-dom-html.md","raw":"---\nlayout: post\ntitle: \"HTML DOM 和 XML DOM 操作\"\ndate: 2018-01-06 18:37:00 GMT+0800\ncategories: [前端]\ntags:  [DOM]\n---\n\n今天看到一篇[文章](https://segmentfault.com/a/1190000012674948)，突然发现自己之前对 DOM 操作有很大的误解。\n\n<!-- more -->\n\n## 获取元素的属性值\n\n对于页面的 DOM 元素，一般获取其 `id` `class` `dataset` 都有 HTML DOM 的获取方法，但是在我面试的时候，几乎所有的面试者都给出了让我意外的结果，那就是通过 XML DOM 的 `getAttribute` 方法来进行获取。\n\n## 一个例子\n\n基础模版如下：\n\n```html\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>DOM</title>\n</head>\n<body>\n<input type=\"text\" id=\"input0\" class=\"input-box\" value=\"hello world!\" data-view=\"abc\">\n\n<script>\n  var input = document.querySelector('#input0')\n</script>\n</body>\n</html>\n```\n\n首先测试 `class`：\n\n```js\nconsole.log('HTML - class before:', input.className)\nconsole.log('XML - class before:', input.getAttribute('class'))\ninput.classList.add('red')\ninput.className += ' blue'\nvar className = input.getAttribute('class')\ninput.setAttribute('class', className + ' green')\nconsole.log('HTML - class after:', input.className)\nconsole.log('XML - class after:', input.getAttribute('class'))\n\n\n// result\nHTML - class before: input-box\nXML - class before: input-box\nHTML - class after: input-box red blue green\nXML - class after: input-box red blue green\n```\n\n可以说，对于 `class` 不管用 HTML 还是 XML 的 DOM 方法，获取结果都是一致的。\n\n我们再测试下 `value`：\n\n```js\nconsole.log('HTML - value before:', input.value)\nconsole.log('XML - value before:', input.getAttribute('value'))\ninput.value += '123'\nconsole.log('HTML - value after:', input.value)\nconsole.log('XML - value after:', input.getAttribute('value'))\n//  input.addEventListener('input', function () {\n//    console.log('HTML - value after:', input.value)\n//    console.log('XML - value after:', input.getAttribute('value'))\n//  })\n\n// result\nHTML - value before: hello world!\nXML - value before: hello world!\nHTML - value after: hello world!123\nXML - value after: hello world!\n```\n\n不论是通过 JS 改变还是页面编辑触发，都会导致两者获得的值不同。其中 XML-DOM 方法获取的永远是原始值。\n\n其他属性，也可以进行测试，大部分情况下两者还是相同的。\n\n出现这种现象，我认为主要是 `操作是否在HTML上进行响应`。在操作 `class` 时，HTML 发生了改变。而 `value` 这个属性，不会随之改变。\n\n所以，常规的 `dataset` `id` `checked` 属性两种方案都可以正常获取。\n\n但是如果我们对 DOM 增加属性，如 `input.aaa = 111`，此时数据仅仅记录在 DOM 对象上，并没有反馈到 HTML 节点，所以 `getAttribute` 就无法获取。\n\n## 小结\n\n对于本次例子整体来说，HTML-DOM 是对象级别操作，可以对对象进行读取修改增加等，并不是所有的操作都需要反馈到 XML-DOM节点上。\n\n而XML-DOM是对XML节点（HTML 字符串）的读取和写入操作，其中写入操作必定还会反馈到HTML-DOM对象上。","slug":"2018-2018-01-06-dom-html","published":1,"updated":"2020-03-02T07:16:34.683Z","comments":1,"photos":[],"link":"","_id":"cka5ik8bw003pnybg54r3loa3","content":"<p>今天看到一篇<a href=\"https://segmentfault.com/a/1190000012674948\" target=\"_blank\" rel=\"noopener\">文章</a>，突然发现自己之前对 DOM 操作有很大的误解。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"获取元素的属性值\"><a href=\"#获取元素的属性值\" class=\"headerlink\" title=\"获取元素的属性值\"></a>获取元素的属性值</h2><p>对于页面的 DOM 元素，一般获取其 <code>id</code> <code>class</code> <code>dataset</code> 都有 HTML DOM 的获取方法，但是在我面试的时候，几乎所有的面试者都给出了让我意外的结果，那就是通过 XML DOM 的 <code>getAttribute</code> 方法来进行获取。</p>\n<h2 id=\"一个例子\"><a href=\"#一个例子\" class=\"headerlink\" title=\"一个例子\"></a>一个例子</h2><p>基础模版如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DOM<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"input0\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-box\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"hello world!\"</span> <span class=\"attr\">data-view</span>=<span class=\"string\">\"abc\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> input = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#input0'</span>)</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>首先测试 <code>class</code>：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'HTML - class before:'</span>, input.className)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'XML - class before:'</span>, input.getAttribute(<span class=\"string\">'class'</span>))</span><br><span class=\"line\">input.classList.add(<span class=\"string\">'red'</span>)</span><br><span class=\"line\">input.className += <span class=\"string\">' blue'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> className = input.getAttribute(<span class=\"string\">'class'</span>)</span><br><span class=\"line\">input.setAttribute(<span class=\"string\">'class'</span>, className + <span class=\"string\">' green'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'HTML - class after:'</span>, input.className)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'XML - class after:'</span>, input.getAttribute(<span class=\"string\">'class'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// result</span></span><br><span class=\"line\">HTML - class before: input-box</span><br><span class=\"line\">XML - class before: input-box</span><br><span class=\"line\">HTML - class after: input-box red blue green</span><br><span class=\"line\">XML - class after: input-box red blue green</span><br></pre></td></tr></table></figure>\n\n<p>可以说，对于 <code>class</code> 不管用 HTML 还是 XML 的 DOM 方法，获取结果都是一致的。</p>\n<p>我们再测试下 <code>value</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'HTML - value before:'</span>, input.value)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'XML - value before:'</span>, input.getAttribute(<span class=\"string\">'value'</span>))</span><br><span class=\"line\">input.value += <span class=\"string\">'123'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'HTML - value after:'</span>, input.value)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'XML - value after:'</span>, input.getAttribute(<span class=\"string\">'value'</span>))</span><br><span class=\"line\"><span class=\"comment\">//  input.addEventListener('input', function () &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    console.log('HTML - value after:', input.value)</span></span><br><span class=\"line\"><span class=\"comment\">//    console.log('XML - value after:', input.getAttribute('value'))</span></span><br><span class=\"line\"><span class=\"comment\">//  &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// result</span></span><br><span class=\"line\">HTML - value before: hello world!</span><br><span class=\"line\">XML - value before: hello world!</span><br><span class=\"line\">HTML - value after: hello world!<span class=\"number\">123</span></span><br><span class=\"line\">XML - value after: hello world!</span><br></pre></td></tr></table></figure>\n\n<p>不论是通过 JS 改变还是页面编辑触发，都会导致两者获得的值不同。其中 XML-DOM 方法获取的永远是原始值。</p>\n<p>其他属性，也可以进行测试，大部分情况下两者还是相同的。</p>\n<p>出现这种现象，我认为主要是 <code>操作是否在HTML上进行响应</code>。在操作 <code>class</code> 时，HTML 发生了改变。而 <code>value</code> 这个属性，不会随之改变。</p>\n<p>所以，常规的 <code>dataset</code> <code>id</code> <code>checked</code> 属性两种方案都可以正常获取。</p>\n<p>但是如果我们对 DOM 增加属性，如 <code>input.aaa = 111</code>，此时数据仅仅记录在 DOM 对象上，并没有反馈到 HTML 节点，所以 <code>getAttribute</code> 就无法获取。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>对于本次例子整体来说，HTML-DOM 是对象级别操作，可以对对象进行读取修改增加等，并不是所有的操作都需要反馈到 XML-DOM节点上。</p>\n<p>而XML-DOM是对XML节点（HTML 字符串）的读取和写入操作，其中写入操作必定还会反馈到HTML-DOM对象上。</p>\n","site":{"data":{}},"excerpt":"<p>今天看到一篇<a href=\"https://segmentfault.com/a/1190000012674948\" target=\"_blank\" rel=\"noopener\">文章</a>，突然发现自己之前对 DOM 操作有很大的误解。</p>","more":"<h2 id=\"获取元素的属性值\"><a href=\"#获取元素的属性值\" class=\"headerlink\" title=\"获取元素的属性值\"></a>获取元素的属性值</h2><p>对于页面的 DOM 元素，一般获取其 <code>id</code> <code>class</code> <code>dataset</code> 都有 HTML DOM 的获取方法，但是在我面试的时候，几乎所有的面试者都给出了让我意外的结果，那就是通过 XML DOM 的 <code>getAttribute</code> 方法来进行获取。</p>\n<h2 id=\"一个例子\"><a href=\"#一个例子\" class=\"headerlink\" title=\"一个例子\"></a>一个例子</h2><p>基础模版如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DOM<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"input0\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-box\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"hello world!\"</span> <span class=\"attr\">data-view</span>=<span class=\"string\">\"abc\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> input = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#input0'</span>)</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>首先测试 <code>class</code>：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'HTML - class before:'</span>, input.className)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'XML - class before:'</span>, input.getAttribute(<span class=\"string\">'class'</span>))</span><br><span class=\"line\">input.classList.add(<span class=\"string\">'red'</span>)</span><br><span class=\"line\">input.className += <span class=\"string\">' blue'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> className = input.getAttribute(<span class=\"string\">'class'</span>)</span><br><span class=\"line\">input.setAttribute(<span class=\"string\">'class'</span>, className + <span class=\"string\">' green'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'HTML - class after:'</span>, input.className)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'XML - class after:'</span>, input.getAttribute(<span class=\"string\">'class'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// result</span></span><br><span class=\"line\">HTML - class before: input-box</span><br><span class=\"line\">XML - class before: input-box</span><br><span class=\"line\">HTML - class after: input-box red blue green</span><br><span class=\"line\">XML - class after: input-box red blue green</span><br></pre></td></tr></table></figure>\n\n<p>可以说，对于 <code>class</code> 不管用 HTML 还是 XML 的 DOM 方法，获取结果都是一致的。</p>\n<p>我们再测试下 <code>value</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'HTML - value before:'</span>, input.value)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'XML - value before:'</span>, input.getAttribute(<span class=\"string\">'value'</span>))</span><br><span class=\"line\">input.value += <span class=\"string\">'123'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'HTML - value after:'</span>, input.value)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'XML - value after:'</span>, input.getAttribute(<span class=\"string\">'value'</span>))</span><br><span class=\"line\"><span class=\"comment\">//  input.addEventListener('input', function () &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    console.log('HTML - value after:', input.value)</span></span><br><span class=\"line\"><span class=\"comment\">//    console.log('XML - value after:', input.getAttribute('value'))</span></span><br><span class=\"line\"><span class=\"comment\">//  &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// result</span></span><br><span class=\"line\">HTML - value before: hello world!</span><br><span class=\"line\">XML - value before: hello world!</span><br><span class=\"line\">HTML - value after: hello world!<span class=\"number\">123</span></span><br><span class=\"line\">XML - value after: hello world!</span><br></pre></td></tr></table></figure>\n\n<p>不论是通过 JS 改变还是页面编辑触发，都会导致两者获得的值不同。其中 XML-DOM 方法获取的永远是原始值。</p>\n<p>其他属性，也可以进行测试，大部分情况下两者还是相同的。</p>\n<p>出现这种现象，我认为主要是 <code>操作是否在HTML上进行响应</code>。在操作 <code>class</code> 时，HTML 发生了改变。而 <code>value</code> 这个属性，不会随之改变。</p>\n<p>所以，常规的 <code>dataset</code> <code>id</code> <code>checked</code> 属性两种方案都可以正常获取。</p>\n<p>但是如果我们对 DOM 增加属性，如 <code>input.aaa = 111</code>，此时数据仅仅记录在 DOM 对象上，并没有反馈到 HTML 节点，所以 <code>getAttribute</code> 就无法获取。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>对于本次例子整体来说，HTML-DOM 是对象级别操作，可以对对象进行读取修改增加等，并不是所有的操作都需要反馈到 XML-DOM节点上。</p>\n<p>而XML-DOM是对XML节点（HTML 字符串）的读取和写入操作，其中写入操作必定还会反馈到HTML-DOM对象上。</p>"},{"layout":"post","title":"虚拟主机 Apache 一个目录划分多个域名使用","date":"2018-01-19T22:52:00.000Z","_content":"\napache 下的空间，其实很容易实现一个目录下，绑定多个网站域名。\n\n<!-- more -->\n\n这都要说到想当初，在阿里云域名转入后，提示了一个广告，允许低价购买共享虚拟主机，这个阿里云的空间一直就保留着。现在续费大概也就是每年 60 块左右。虽然是垃圾配置，也不能弄 https，但是国内访问速度绝对一流，做个博客还是很适合的。\n\n本身虚拟主机是 apache + php 的方案，也带有 mySql，但是我还是用了 jekyll 静态页面博客。这么说就远了...回归主题。\n\n## 如何配置\n\n首先要能通过 ftp 连接到虚拟主机，因为不是 vps 机器，通过 ftp 是我们和虚拟主机唯一的通讯方式...\n\n在网页目录下，可以上传一个 `.htaccess` 文件。\n\n这个有技巧，有的系统不方便创建和操作（比如 Mac 和 linux 会隐藏，Windows 下貌似是非法文件），可以直接创建一个 `htaccess` 文件，上传到 ftp 后，再进行改名。\n\n## 访问地址 301，302 跳转\n\n比如我可以配置凡是访问 `/about` 路径，直接访问 `aboutme/about.php`\n\n```\nRedirect permanent about aboutme/about.php\norder deny,allow\n```\n\n## 根据主机头访问不同目录\n\n这才是这篇文章的重点。\n\n我希望用户访问 `yukapril.com` 后，访问 `yukapril_com` 目录；\n\n访问 `my.yukapril.com` 后，访问 `my_yukapril_com` 目录。\n\n```\nRewriteEngine on\n\nRewriteCond %{HTTP_HOST} yukapril.com\nRewriteCond %{REQUEST_URI} !^/yukapril_com\nRewriteRule ^(.*)$ /yukapril_com/$1\n\nRewriteCond %{HTTP_HOST} my.yukapril.com\nRewriteCond %{REQUEST_URI} !^/my_yukapril_com\nRewriteRule ^(.*)$ /my_yukapril_com/$1\n\norder deny,allow\n```\n\n每配置一个域名，复制三行就行了。\n\n`.htaccess` 还有很多玩法，可以自行搜索看看～\n\n## 小问题\n\n按照上面这么配置，也会有一些体验上的问题。\n\n比如，你的网站有链接 `http://yukapril.com/2018/01/01.html`，此时如果你访问 `http://yukapril.com/2018` 那么肯定是 403 错误（Forbidden）。\n\n此时因为我是静态页面，没有进行错误处理，所以错误消息会提示 `The requested URL /yukapril_com/2018/ was not found on this server.`\n\n这个我就不会直接配置了。\n\n一般虚拟主机商支持配置一个通用的错误页面，你的各个域名，如果相同错误码，错误页面也相同，那就好办。直接配置下就行了。但是如果不同的域名要求错误页不同，这个需要变换思路解决。\n\n变相的解决方案是，在每个域名对应目录里面，再次添加 `.htaccess` 文件。\n\n大致写法如下：\n\n```\nErrorDocument 403 /403.html\nErrorDocument 404 /404.html\norder deny,allow\n```","source":"_posts/2018/2018-01-19-apache-htaccess.md","raw":"---\nlayout: post\ntitle: \"虚拟主机 Apache 一个目录划分多个域名使用\"\ndate: 2018-01-19 22:52:00 GMT+0800\ncategories: [前端]\ntags:  [apache, htaccess]\n---\n\napache 下的空间，其实很容易实现一个目录下，绑定多个网站域名。\n\n<!-- more -->\n\n这都要说到想当初，在阿里云域名转入后，提示了一个广告，允许低价购买共享虚拟主机，这个阿里云的空间一直就保留着。现在续费大概也就是每年 60 块左右。虽然是垃圾配置，也不能弄 https，但是国内访问速度绝对一流，做个博客还是很适合的。\n\n本身虚拟主机是 apache + php 的方案，也带有 mySql，但是我还是用了 jekyll 静态页面博客。这么说就远了...回归主题。\n\n## 如何配置\n\n首先要能通过 ftp 连接到虚拟主机，因为不是 vps 机器，通过 ftp 是我们和虚拟主机唯一的通讯方式...\n\n在网页目录下，可以上传一个 `.htaccess` 文件。\n\n这个有技巧，有的系统不方便创建和操作（比如 Mac 和 linux 会隐藏，Windows 下貌似是非法文件），可以直接创建一个 `htaccess` 文件，上传到 ftp 后，再进行改名。\n\n## 访问地址 301，302 跳转\n\n比如我可以配置凡是访问 `/about` 路径，直接访问 `aboutme/about.php`\n\n```\nRedirect permanent about aboutme/about.php\norder deny,allow\n```\n\n## 根据主机头访问不同目录\n\n这才是这篇文章的重点。\n\n我希望用户访问 `yukapril.com` 后，访问 `yukapril_com` 目录；\n\n访问 `my.yukapril.com` 后，访问 `my_yukapril_com` 目录。\n\n```\nRewriteEngine on\n\nRewriteCond %{HTTP_HOST} yukapril.com\nRewriteCond %{REQUEST_URI} !^/yukapril_com\nRewriteRule ^(.*)$ /yukapril_com/$1\n\nRewriteCond %{HTTP_HOST} my.yukapril.com\nRewriteCond %{REQUEST_URI} !^/my_yukapril_com\nRewriteRule ^(.*)$ /my_yukapril_com/$1\n\norder deny,allow\n```\n\n每配置一个域名，复制三行就行了。\n\n`.htaccess` 还有很多玩法，可以自行搜索看看～\n\n## 小问题\n\n按照上面这么配置，也会有一些体验上的问题。\n\n比如，你的网站有链接 `http://yukapril.com/2018/01/01.html`，此时如果你访问 `http://yukapril.com/2018` 那么肯定是 403 错误（Forbidden）。\n\n此时因为我是静态页面，没有进行错误处理，所以错误消息会提示 `The requested URL /yukapril_com/2018/ was not found on this server.`\n\n这个我就不会直接配置了。\n\n一般虚拟主机商支持配置一个通用的错误页面，你的各个域名，如果相同错误码，错误页面也相同，那就好办。直接配置下就行了。但是如果不同的域名要求错误页不同，这个需要变换思路解决。\n\n变相的解决方案是，在每个域名对应目录里面，再次添加 `.htaccess` 文件。\n\n大致写法如下：\n\n```\nErrorDocument 403 /403.html\nErrorDocument 404 /404.html\norder deny,allow\n```","slug":"2018-2018-01-19-apache-htaccess","published":1,"updated":"2020-03-02T07:16:34.683Z","comments":1,"photos":[],"link":"","_id":"cka5ik8by003tnybg893n3faj","content":"<p>apache 下的空间，其实很容易实现一个目录下，绑定多个网站域名。</p>\n<a id=\"more\"></a>\n\n<p>这都要说到想当初，在阿里云域名转入后，提示了一个广告，允许低价购买共享虚拟主机，这个阿里云的空间一直就保留着。现在续费大概也就是每年 60 块左右。虽然是垃圾配置，也不能弄 https，但是国内访问速度绝对一流，做个博客还是很适合的。</p>\n<p>本身虚拟主机是 apache + php 的方案，也带有 mySql，但是我还是用了 jekyll 静态页面博客。这么说就远了…回归主题。</p>\n<h2 id=\"如何配置\"><a href=\"#如何配置\" class=\"headerlink\" title=\"如何配置\"></a>如何配置</h2><p>首先要能通过 ftp 连接到虚拟主机，因为不是 vps 机器，通过 ftp 是我们和虚拟主机唯一的通讯方式…</p>\n<p>在网页目录下，可以上传一个 <code>.htaccess</code> 文件。</p>\n<p>这个有技巧，有的系统不方便创建和操作（比如 Mac 和 linux 会隐藏，Windows 下貌似是非法文件），可以直接创建一个 <code>htaccess</code> 文件，上传到 ftp 后，再进行改名。</p>\n<h2 id=\"访问地址-301，302-跳转\"><a href=\"#访问地址-301，302-跳转\" class=\"headerlink\" title=\"访问地址 301，302 跳转\"></a>访问地址 301，302 跳转</h2><p>比如我可以配置凡是访问 <code>/about</code> 路径，直接访问 <code>aboutme/about.php</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redirect permanent about aboutme/about.php</span><br><span class=\"line\">order deny,allow</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"根据主机头访问不同目录\"><a href=\"#根据主机头访问不同目录\" class=\"headerlink\" title=\"根据主机头访问不同目录\"></a>根据主机头访问不同目录</h2><p>这才是这篇文章的重点。</p>\n<p>我希望用户访问 <code>yukapril.com</code> 后，访问 <code>yukapril_com</code> 目录；</p>\n<p>访问 <code>my.yukapril.com</code> 后，访问 <code>my_yukapril_com</code> 目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RewriteEngine on</span><br><span class=\"line\"></span><br><span class=\"line\">RewriteCond %&#123;HTTP_HOST&#125; yukapril.com</span><br><span class=\"line\">RewriteCond %&#123;REQUEST_URI&#125; !^/yukapril_com</span><br><span class=\"line\">RewriteRule ^(.*)$ /yukapril_com/$1</span><br><span class=\"line\"></span><br><span class=\"line\">RewriteCond %&#123;HTTP_HOST&#125; my.yukapril.com</span><br><span class=\"line\">RewriteCond %&#123;REQUEST_URI&#125; !^/my_yukapril_com</span><br><span class=\"line\">RewriteRule ^(.*)$ /my_yukapril_com/$1</span><br><span class=\"line\"></span><br><span class=\"line\">order deny,allow</span><br></pre></td></tr></table></figure>\n\n<p>每配置一个域名，复制三行就行了。</p>\n<p><code>.htaccess</code> 还有很多玩法，可以自行搜索看看～</p>\n<h2 id=\"小问题\"><a href=\"#小问题\" class=\"headerlink\" title=\"小问题\"></a>小问题</h2><p>按照上面这么配置，也会有一些体验上的问题。</p>\n<p>比如，你的网站有链接 <code>http://yukapril.com/2018/01/01.html</code>，此时如果你访问 <code>http://yukapril.com/2018</code> 那么肯定是 403 错误（Forbidden）。</p>\n<p>此时因为我是静态页面，没有进行错误处理，所以错误消息会提示 <code>The requested URL /yukapril_com/2018/ was not found on this server.</code></p>\n<p>这个我就不会直接配置了。</p>\n<p>一般虚拟主机商支持配置一个通用的错误页面，你的各个域名，如果相同错误码，错误页面也相同，那就好办。直接配置下就行了。但是如果不同的域名要求错误页不同，这个需要变换思路解决。</p>\n<p>变相的解决方案是，在每个域名对应目录里面，再次添加 <code>.htaccess</code> 文件。</p>\n<p>大致写法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ErrorDocument 403 /403.html</span><br><span class=\"line\">ErrorDocument 404 /404.html</span><br><span class=\"line\">order deny,allow</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>apache 下的空间，其实很容易实现一个目录下，绑定多个网站域名。</p>","more":"<p>这都要说到想当初，在阿里云域名转入后，提示了一个广告，允许低价购买共享虚拟主机，这个阿里云的空间一直就保留着。现在续费大概也就是每年 60 块左右。虽然是垃圾配置，也不能弄 https，但是国内访问速度绝对一流，做个博客还是很适合的。</p>\n<p>本身虚拟主机是 apache + php 的方案，也带有 mySql，但是我还是用了 jekyll 静态页面博客。这么说就远了…回归主题。</p>\n<h2 id=\"如何配置\"><a href=\"#如何配置\" class=\"headerlink\" title=\"如何配置\"></a>如何配置</h2><p>首先要能通过 ftp 连接到虚拟主机，因为不是 vps 机器，通过 ftp 是我们和虚拟主机唯一的通讯方式…</p>\n<p>在网页目录下，可以上传一个 <code>.htaccess</code> 文件。</p>\n<p>这个有技巧，有的系统不方便创建和操作（比如 Mac 和 linux 会隐藏，Windows 下貌似是非法文件），可以直接创建一个 <code>htaccess</code> 文件，上传到 ftp 后，再进行改名。</p>\n<h2 id=\"访问地址-301，302-跳转\"><a href=\"#访问地址-301，302-跳转\" class=\"headerlink\" title=\"访问地址 301，302 跳转\"></a>访问地址 301，302 跳转</h2><p>比如我可以配置凡是访问 <code>/about</code> 路径，直接访问 <code>aboutme/about.php</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redirect permanent about aboutme/about.php</span><br><span class=\"line\">order deny,allow</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"根据主机头访问不同目录\"><a href=\"#根据主机头访问不同目录\" class=\"headerlink\" title=\"根据主机头访问不同目录\"></a>根据主机头访问不同目录</h2><p>这才是这篇文章的重点。</p>\n<p>我希望用户访问 <code>yukapril.com</code> 后，访问 <code>yukapril_com</code> 目录；</p>\n<p>访问 <code>my.yukapril.com</code> 后，访问 <code>my_yukapril_com</code> 目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RewriteEngine on</span><br><span class=\"line\"></span><br><span class=\"line\">RewriteCond %&#123;HTTP_HOST&#125; yukapril.com</span><br><span class=\"line\">RewriteCond %&#123;REQUEST_URI&#125; !^/yukapril_com</span><br><span class=\"line\">RewriteRule ^(.*)$ /yukapril_com/$1</span><br><span class=\"line\"></span><br><span class=\"line\">RewriteCond %&#123;HTTP_HOST&#125; my.yukapril.com</span><br><span class=\"line\">RewriteCond %&#123;REQUEST_URI&#125; !^/my_yukapril_com</span><br><span class=\"line\">RewriteRule ^(.*)$ /my_yukapril_com/$1</span><br><span class=\"line\"></span><br><span class=\"line\">order deny,allow</span><br></pre></td></tr></table></figure>\n\n<p>每配置一个域名，复制三行就行了。</p>\n<p><code>.htaccess</code> 还有很多玩法，可以自行搜索看看～</p>\n<h2 id=\"小问题\"><a href=\"#小问题\" class=\"headerlink\" title=\"小问题\"></a>小问题</h2><p>按照上面这么配置，也会有一些体验上的问题。</p>\n<p>比如，你的网站有链接 <code>http://yukapril.com/2018/01/01.html</code>，此时如果你访问 <code>http://yukapril.com/2018</code> 那么肯定是 403 错误（Forbidden）。</p>\n<p>此时因为我是静态页面，没有进行错误处理，所以错误消息会提示 <code>The requested URL /yukapril_com/2018/ was not found on this server.</code></p>\n<p>这个我就不会直接配置了。</p>\n<p>一般虚拟主机商支持配置一个通用的错误页面，你的各个域名，如果相同错误码，错误页面也相同，那就好办。直接配置下就行了。但是如果不同的域名要求错误页不同，这个需要变换思路解决。</p>\n<p>变相的解决方案是，在每个域名对应目录里面，再次添加 <code>.htaccess</code> 文件。</p>\n<p>大致写法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ErrorDocument 403 /403.html</span><br><span class=\"line\">ErrorDocument 404 /404.html</span><br><span class=\"line\">order deny,allow</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"使用 nodejs 发送邮件","date":"2018-01-20T22:50:00.000Z","_content":"\n一直打算用 nodejs 做一些服务类功能，比如说定时抓取资料什么的，当拿到数据后，就需要进行通知我们。\n\n<!-- more -->\n\n比较简单的方案是，之际准备一个账号，用这个账号给自己发邮件。\n\nnodejs 实现比较简单，主要依赖 `nodemailer` 这个包。\n\n大概例子如下：\n\n```js\nconst nodemailer = require('nodemailer')\n\nconst mailTransport = nodemailer.createTransport({\n    host: 'smtp.qq.com', \n    secureConnection: true, \n    auth: {\n        user: 'abcd@foxmail.com',\n        pass: '123456'\n    }\n})\n\nconst options = {\n    from: '\"yukapril\" <fake@qq.com>',\n    to: '\"JasonLee\" <someone@163.com>',\n    cc: ''\n    bcc: ''\n    subject: 'test',\n    text: 'test text',\n    html: '<h1>test test</h1>'\n};\n\nmailTransport.sendMail(options, (err, msg) => {\n    if (err) {\n        console.log(err)\n        return\n    }\n    console.log(msg)\n})\n```\n\n其中：\n\n`mailTransport.host` 邮件 smtp 服务器地址\n\n`mailTransport.secureConnection` 表示使用 SSL 方式连接\n\n`mailTransport.auth` 邮箱账号密码，如果是网易 QQ 等邮箱，可能需要使用授权码替代密码\n\n`options.from` 对方显示的发件人（可以和上面的账号不同）\n\n`options.to` 收件人\n\n`options.cc` 抄送\n\n`options.bcc` 密送\n\n支持多种附件，如果是图片附件，可以设置sid，在正文中可以直接引用。\n\n","source":"_posts/2018/2018-01-20-node-mail.md","raw":"---\nlayout: post\ntitle: \"使用 nodejs 发送邮件\"\ndate: 2018-01-20 22:50:00 GMT+0800\ncategories: [前端]\ntags:  [node, mail, nodemailer]\n---\n\n一直打算用 nodejs 做一些服务类功能，比如说定时抓取资料什么的，当拿到数据后，就需要进行通知我们。\n\n<!-- more -->\n\n比较简单的方案是，之际准备一个账号，用这个账号给自己发邮件。\n\nnodejs 实现比较简单，主要依赖 `nodemailer` 这个包。\n\n大概例子如下：\n\n```js\nconst nodemailer = require('nodemailer')\n\nconst mailTransport = nodemailer.createTransport({\n    host: 'smtp.qq.com', \n    secureConnection: true, \n    auth: {\n        user: 'abcd@foxmail.com',\n        pass: '123456'\n    }\n})\n\nconst options = {\n    from: '\"yukapril\" <fake@qq.com>',\n    to: '\"JasonLee\" <someone@163.com>',\n    cc: ''\n    bcc: ''\n    subject: 'test',\n    text: 'test text',\n    html: '<h1>test test</h1>'\n};\n\nmailTransport.sendMail(options, (err, msg) => {\n    if (err) {\n        console.log(err)\n        return\n    }\n    console.log(msg)\n})\n```\n\n其中：\n\n`mailTransport.host` 邮件 smtp 服务器地址\n\n`mailTransport.secureConnection` 表示使用 SSL 方式连接\n\n`mailTransport.auth` 邮箱账号密码，如果是网易 QQ 等邮箱，可能需要使用授权码替代密码\n\n`options.from` 对方显示的发件人（可以和上面的账号不同）\n\n`options.to` 收件人\n\n`options.cc` 抄送\n\n`options.bcc` 密送\n\n支持多种附件，如果是图片附件，可以设置sid，在正文中可以直接引用。\n\n","slug":"2018-2018-01-20-node-mail","published":1,"updated":"2020-03-02T07:16:34.683Z","comments":1,"photos":[],"link":"","_id":"cka5ik8bz003vnybg5i61f6as","content":"<p>一直打算用 nodejs 做一些服务类功能，比如说定时抓取资料什么的，当拿到数据后，就需要进行通知我们。</p>\n<a id=\"more\"></a>\n\n<p>比较简单的方案是，之际准备一个账号，用这个账号给自己发邮件。</p>\n<p>nodejs 实现比较简单，主要依赖 <code>nodemailer</code> 这个包。</p>\n<p>大概例子如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> nodemailer = <span class=\"built_in\">require</span>(<span class=\"string\">'nodemailer'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mailTransport = nodemailer.createTransport(&#123;</span><br><span class=\"line\">    host: <span class=\"string\">'smtp.qq.com'</span>, </span><br><span class=\"line\">    secureConnection: <span class=\"literal\">true</span>, </span><br><span class=\"line\">    auth: &#123;</span><br><span class=\"line\">        user: <span class=\"string\">'abcd@foxmail.com'</span>,</span><br><span class=\"line\">        pass: <span class=\"string\">'123456'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">from</span>: <span class=\"string\">'\"yukapril\" &lt;fake@qq.com&gt;'</span>,</span><br><span class=\"line\">    to: <span class=\"string\">'\"JasonLee\" &lt;someone@163.com&gt;'</span>,</span><br><span class=\"line\">    cc: <span class=\"string\">''</span></span><br><span class=\"line\">    bcc: <span class=\"string\">''</span></span><br><span class=\"line\">    subject: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">    text: <span class=\"string\">'test text'</span>,</span><br><span class=\"line\">    html: <span class=\"string\">'&lt;h1&gt;test test&lt;/h1&gt;'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">mailTransport.sendMail(options, (err, msg) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(msg)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>其中：</p>\n<p><code>mailTransport.host</code> 邮件 smtp 服务器地址</p>\n<p><code>mailTransport.secureConnection</code> 表示使用 SSL 方式连接</p>\n<p><code>mailTransport.auth</code> 邮箱账号密码，如果是网易 QQ 等邮箱，可能需要使用授权码替代密码</p>\n<p><code>options.from</code> 对方显示的发件人（可以和上面的账号不同）</p>\n<p><code>options.to</code> 收件人</p>\n<p><code>options.cc</code> 抄送</p>\n<p><code>options.bcc</code> 密送</p>\n<p>支持多种附件，如果是图片附件，可以设置sid，在正文中可以直接引用。</p>\n","site":{"data":{}},"excerpt":"<p>一直打算用 nodejs 做一些服务类功能，比如说定时抓取资料什么的，当拿到数据后，就需要进行通知我们。</p>","more":"<p>比较简单的方案是，之际准备一个账号，用这个账号给自己发邮件。</p>\n<p>nodejs 实现比较简单，主要依赖 <code>nodemailer</code> 这个包。</p>\n<p>大概例子如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> nodemailer = <span class=\"built_in\">require</span>(<span class=\"string\">'nodemailer'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mailTransport = nodemailer.createTransport(&#123;</span><br><span class=\"line\">    host: <span class=\"string\">'smtp.qq.com'</span>, </span><br><span class=\"line\">    secureConnection: <span class=\"literal\">true</span>, </span><br><span class=\"line\">    auth: &#123;</span><br><span class=\"line\">        user: <span class=\"string\">'abcd@foxmail.com'</span>,</span><br><span class=\"line\">        pass: <span class=\"string\">'123456'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">from</span>: <span class=\"string\">'\"yukapril\" &lt;fake@qq.com&gt;'</span>,</span><br><span class=\"line\">    to: <span class=\"string\">'\"JasonLee\" &lt;someone@163.com&gt;'</span>,</span><br><span class=\"line\">    cc: <span class=\"string\">''</span></span><br><span class=\"line\">    bcc: <span class=\"string\">''</span></span><br><span class=\"line\">    subject: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">    text: <span class=\"string\">'test text'</span>,</span><br><span class=\"line\">    html: <span class=\"string\">'&lt;h1&gt;test test&lt;/h1&gt;'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">mailTransport.sendMail(options, (err, msg) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(msg)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>其中：</p>\n<p><code>mailTransport.host</code> 邮件 smtp 服务器地址</p>\n<p><code>mailTransport.secureConnection</code> 表示使用 SSL 方式连接</p>\n<p><code>mailTransport.auth</code> 邮箱账号密码，如果是网易 QQ 等邮箱，可能需要使用授权码替代密码</p>\n<p><code>options.from</code> 对方显示的发件人（可以和上面的账号不同）</p>\n<p><code>options.to</code> 收件人</p>\n<p><code>options.cc</code> 抄送</p>\n<p><code>options.bcc</code> 密送</p>\n<p>支持多种附件，如果是图片附件，可以设置sid，在正文中可以直接引用。</p>"},{"layout":"post","title":"通过 js 让元素失去焦点","date":"2018-01-29T21:10:00.000Z","_content":"\n今天做项目，遇到一个需求。点击输入框获取焦点，按下回车后，执行搜索，失去焦点。\n\n<!-- more -->\n\n## 为什么会有这样的需求\n\n> 以下内容，不考虑部分输入法等兼容性问题\n\n项目大致要求是这样子的：\n\n* 页面提供搜索框，同时提供搜索历史方便直接选择；\n* 输入内容后，按回车，自动进行搜索，结果显示在下方区域。同时历史记录隐藏；\n* 再次进行输入内容时候，搜索结果移除，继续显示搜索记录提供方便选择。\n\n## 问题点\n\n梳理需求后，其实可以简单理解整个流程，用一个状态进行表示：\n\n> 搜索框获得焦点 => 显示历史记录\n>\n> 搜索框失去焦点 => 显示搜索结果\n\n这个状态改变的规则为：\n\n> 搜索框输入完毕（回车） => 搜索框失去焦点\n>\n> 搜索框被点击 => 搜索框获得焦点\n\n## 第一版代码\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>test</title>\n  <style>\n    * {\n      margin: 0;\n      padding: 0;\n      font-size: 16px;\n    }\n\n    h1 {\n      font-size: 18px;\n    }\n\n    .wrapper {\n      margin: 8px;\n    }\n\n    .search {\n      width: 100%;\n      border: 0;\n      border-bottom: 1px solid #333;\n      outline: none;\n    }\n  </style>\n</head>\n\n<body>\n  <div class=\"wrapper\">\n    <h1>搜索：</h1>\n    <input class=\"search\" id=\"J_Search\" type=\"search\" autocomplete=\"off\">\n  </div>\n\n  <div class=\"wrapper\" id=\"J_History\">\n    <h1>搜索历史：</h1>\n    <div>历史 bala bala...</div>\n  </div>\n\n  <div class=\"wrapper\" id=\"J_Result\">\n    <h1>搜索结果：</h1>\n    <div>结果 bala bala...</div>\n  </div>\n\n  <script>\n    let $search = document.querySelector('#J_Search')\n    let $history = document.querySelector('#J_History')\n    let $result = document.querySelector('#J_Result')\n\n    // 搜索框数据提交\n    const searchSubmit = word => {\n      $history.style.display = 'none'\n      $result.style.display = 'block'\n    }\n\n    // 搜索框获得焦点\n    $search.addEventListener('focus', () => {\n      $history.style.display = 'block'\n      $result.style.display = 'none'\n    })\n\n    // 搜索框输入\n    $search.addEventListener('keyup', e => {\n      if (e.keyCode === 13) {\n        // 判断按回车键\n        searchSubmit(e.target.value)\n      }\n    })\n\n    // 默认显示形态\n    $search.focus()\n  </script>\n</body>\n\n</html>\n```\n\n整体逻辑没问题，唯独就是，输入完毕提交后，输入框不会失去焦点，也就无法通过点击再次出发 `focus` 事件了。\n\n## 第二版调整\n\n考虑到要让输入框失去焦点，采用增加一个元素，并让其获得焦点即可。\n\n但是增加的元素要有一些要求：\n\n* 这个元素能获得焦点，那就得是控件元素\n* 这个元素必须在页面内，还必须得显示，否则不能获得焦点\n\n综合这两点，我选择 `input-radio` 控件，比较小巧不明显，而且不会触发移动端的输入法，同时，只能定位到屏幕外侧。\n\n```js\n// new\n// 失去焦点元素\nconst createBlurElment = () => {\n  let $input = document.createElement('input')\n  $input.type = 'radio'\n  $input.style.position = 'absolute'\n  $input.style.top = '-1000px'\n  $input.style.height = '0'\n  document.body.appendChild($input)\n  return $input\n}\n\nlet $search = document.querySelector('#J_Search')\nlet $history = document.querySelector('#J_History')\nlet $result = document.querySelector('#J_Result')\n// new\nlet $blurElement = createBlurElment()\n\n// 搜索框数据提交\nconst searchSubmit = word => {\n  $history.style.display = 'none'\n  $result.style.display = 'block'\n}\n\n// 搜索框获得焦点\n$search.addEventListener('focus', () => {\n  $history.style.display = 'block'\n  $result.style.display = 'none'\n})\n\n// 搜索框输入\n$search.addEventListener('keyup', e => {\n  if (e.keyCode === 13) {\n    // 判断按回车键\n    searchSubmit(e.target.value)\n    // new\n    $blurElement.focus()\n  }\n})\n\n// 默认显示形态\n$search.focus()\n```\n\n这样就曲线救国，通过 js 让指定元素失去焦点了。\n","source":"_posts/2018/2018-01-29-js-focus.md","raw":"---\nlayout: post\ntitle: \"通过 js 让元素失去焦点\"\ndate: 2018-01-29 21:10:00 GMT+0800\ncategories: [前端]\ntags:  [js, focus, blur]\n---\n\n今天做项目，遇到一个需求。点击输入框获取焦点，按下回车后，执行搜索，失去焦点。\n\n<!-- more -->\n\n## 为什么会有这样的需求\n\n> 以下内容，不考虑部分输入法等兼容性问题\n\n项目大致要求是这样子的：\n\n* 页面提供搜索框，同时提供搜索历史方便直接选择；\n* 输入内容后，按回车，自动进行搜索，结果显示在下方区域。同时历史记录隐藏；\n* 再次进行输入内容时候，搜索结果移除，继续显示搜索记录提供方便选择。\n\n## 问题点\n\n梳理需求后，其实可以简单理解整个流程，用一个状态进行表示：\n\n> 搜索框获得焦点 => 显示历史记录\n>\n> 搜索框失去焦点 => 显示搜索结果\n\n这个状态改变的规则为：\n\n> 搜索框输入完毕（回车） => 搜索框失去焦点\n>\n> 搜索框被点击 => 搜索框获得焦点\n\n## 第一版代码\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>test</title>\n  <style>\n    * {\n      margin: 0;\n      padding: 0;\n      font-size: 16px;\n    }\n\n    h1 {\n      font-size: 18px;\n    }\n\n    .wrapper {\n      margin: 8px;\n    }\n\n    .search {\n      width: 100%;\n      border: 0;\n      border-bottom: 1px solid #333;\n      outline: none;\n    }\n  </style>\n</head>\n\n<body>\n  <div class=\"wrapper\">\n    <h1>搜索：</h1>\n    <input class=\"search\" id=\"J_Search\" type=\"search\" autocomplete=\"off\">\n  </div>\n\n  <div class=\"wrapper\" id=\"J_History\">\n    <h1>搜索历史：</h1>\n    <div>历史 bala bala...</div>\n  </div>\n\n  <div class=\"wrapper\" id=\"J_Result\">\n    <h1>搜索结果：</h1>\n    <div>结果 bala bala...</div>\n  </div>\n\n  <script>\n    let $search = document.querySelector('#J_Search')\n    let $history = document.querySelector('#J_History')\n    let $result = document.querySelector('#J_Result')\n\n    // 搜索框数据提交\n    const searchSubmit = word => {\n      $history.style.display = 'none'\n      $result.style.display = 'block'\n    }\n\n    // 搜索框获得焦点\n    $search.addEventListener('focus', () => {\n      $history.style.display = 'block'\n      $result.style.display = 'none'\n    })\n\n    // 搜索框输入\n    $search.addEventListener('keyup', e => {\n      if (e.keyCode === 13) {\n        // 判断按回车键\n        searchSubmit(e.target.value)\n      }\n    })\n\n    // 默认显示形态\n    $search.focus()\n  </script>\n</body>\n\n</html>\n```\n\n整体逻辑没问题，唯独就是，输入完毕提交后，输入框不会失去焦点，也就无法通过点击再次出发 `focus` 事件了。\n\n## 第二版调整\n\n考虑到要让输入框失去焦点，采用增加一个元素，并让其获得焦点即可。\n\n但是增加的元素要有一些要求：\n\n* 这个元素能获得焦点，那就得是控件元素\n* 这个元素必须在页面内，还必须得显示，否则不能获得焦点\n\n综合这两点，我选择 `input-radio` 控件，比较小巧不明显，而且不会触发移动端的输入法，同时，只能定位到屏幕外侧。\n\n```js\n// new\n// 失去焦点元素\nconst createBlurElment = () => {\n  let $input = document.createElement('input')\n  $input.type = 'radio'\n  $input.style.position = 'absolute'\n  $input.style.top = '-1000px'\n  $input.style.height = '0'\n  document.body.appendChild($input)\n  return $input\n}\n\nlet $search = document.querySelector('#J_Search')\nlet $history = document.querySelector('#J_History')\nlet $result = document.querySelector('#J_Result')\n// new\nlet $blurElement = createBlurElment()\n\n// 搜索框数据提交\nconst searchSubmit = word => {\n  $history.style.display = 'none'\n  $result.style.display = 'block'\n}\n\n// 搜索框获得焦点\n$search.addEventListener('focus', () => {\n  $history.style.display = 'block'\n  $result.style.display = 'none'\n})\n\n// 搜索框输入\n$search.addEventListener('keyup', e => {\n  if (e.keyCode === 13) {\n    // 判断按回车键\n    searchSubmit(e.target.value)\n    // new\n    $blurElement.focus()\n  }\n})\n\n// 默认显示形态\n$search.focus()\n```\n\n这样就曲线救国，通过 js 让指定元素失去焦点了。\n","slug":"2018-2018-01-29-js-focus","published":1,"updated":"2020-03-02T07:16:34.683Z","comments":1,"photos":[],"link":"","_id":"cka5ik8c0003ynybgs6fo9lit","content":"<p>今天做项目，遇到一个需求。点击输入框获取焦点，按下回车后，执行搜索，失去焦点。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"为什么会有这样的需求\"><a href=\"#为什么会有这样的需求\" class=\"headerlink\" title=\"为什么会有这样的需求\"></a>为什么会有这样的需求</h2><blockquote>\n<p>以下内容，不考虑部分输入法等兼容性问题</p>\n</blockquote>\n<p>项目大致要求是这样子的：</p>\n<ul>\n<li>页面提供搜索框，同时提供搜索历史方便直接选择；</li>\n<li>输入内容后，按回车，自动进行搜索，结果显示在下方区域。同时历史记录隐藏；</li>\n<li>再次进行输入内容时候，搜索结果移除，继续显示搜索记录提供方便选择。</li>\n</ul>\n<h2 id=\"问题点\"><a href=\"#问题点\" class=\"headerlink\" title=\"问题点\"></a>问题点</h2><p>梳理需求后，其实可以简单理解整个流程，用一个状态进行表示：</p>\n<blockquote>\n<p>搜索框获得焦点 =&gt; 显示历史记录</p>\n<p>搜索框失去焦点 =&gt; 显示搜索结果</p>\n</blockquote>\n<p>这个状态改变的规则为：</p>\n<blockquote>\n<p>搜索框输入完毕（回车） =&gt; 搜索框失去焦点</p>\n<p>搜索框被点击 =&gt; 搜索框获得焦点</p>\n</blockquote>\n<h2 id=\"第一版代码\"><a href=\"#第一版代码\" class=\"headerlink\" title=\"第一版代码\"></a>第一版代码</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    * &#123;</span><br><span class=\"line\">      margin: 0;</span><br><span class=\"line\">      padding: 0;</span><br><span class=\"line\">      font-size: 16px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    h1 &#123;</span><br><span class=\"line\">      font-size: 18px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrapper</span> &#123;</span></span><br><span class=\"line\">      margin: 8px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.search</span> &#123;</span></span><br><span class=\"line\">      width: 100%;</span><br><span class=\"line\">      border: 0;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">border-bottom</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#333</span>;</span></span><br><span class=\"line\">      outline: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>搜索：<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Search\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"search\"</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">\"off\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_History\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>搜索历史：<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>历史 bala bala...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Result\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>搜索结果：<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>结果 bala bala...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> $search = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Search'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> $history = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_History'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> $result = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Result'</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 搜索框数据提交</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> searchSubmit = <span class=\"function\"><span class=\"params\">word</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      $history.style.display = <span class=\"string\">'none'</span></span></span><br><span class=\"line\"><span class=\"javascript\">      $result.style.display = <span class=\"string\">'block'</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 搜索框获得焦点</span></span></span><br><span class=\"line\"><span class=\"javascript\">    $search.addEventListener(<span class=\"string\">'focus'</span>, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      $history.style.display = <span class=\"string\">'block'</span></span></span><br><span class=\"line\"><span class=\"javascript\">      $result.style.display = <span class=\"string\">'none'</span></span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 搜索框输入</span></span></span><br><span class=\"line\"><span class=\"javascript\">    $search.addEventListener(<span class=\"string\">'keyup'</span>, e =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">if</span> (e.keyCode === <span class=\"number\">13</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 判断按回车键</span></span></span><br><span class=\"line\">        searchSubmit(e.target.value)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 默认显示形态</span></span></span><br><span class=\"line\">    $search.focus()</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>整体逻辑没问题，唯独就是，输入完毕提交后，输入框不会失去焦点，也就无法通过点击再次出发 <code>focus</code> 事件了。</p>\n<h2 id=\"第二版调整\"><a href=\"#第二版调整\" class=\"headerlink\" title=\"第二版调整\"></a>第二版调整</h2><p>考虑到要让输入框失去焦点，采用增加一个元素，并让其获得焦点即可。</p>\n<p>但是增加的元素要有一些要求：</p>\n<ul>\n<li>这个元素能获得焦点，那就得是控件元素</li>\n<li>这个元素必须在页面内，还必须得显示，否则不能获得焦点</li>\n</ul>\n<p>综合这两点，我选择 <code>input-radio</code> 控件，比较小巧不明显，而且不会触发移动端的输入法，同时，只能定位到屏幕外侧。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// new</span></span><br><span class=\"line\"><span class=\"comment\">// 失去焦点元素</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> createBlurElment = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> $input = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'input'</span>)</span><br><span class=\"line\">  $input.type = <span class=\"string\">'radio'</span></span><br><span class=\"line\">  $input.style.position = <span class=\"string\">'absolute'</span></span><br><span class=\"line\">  $input.style.top = <span class=\"string\">'-1000px'</span></span><br><span class=\"line\">  $input.style.height = <span class=\"string\">'0'</span></span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild($input)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> $input</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> $search = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Search'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> $history = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_History'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> $result = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Result'</span>)</span><br><span class=\"line\"><span class=\"comment\">// new</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> $blurElement = createBlurElment()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 搜索框数据提交</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> searchSubmit = <span class=\"function\"><span class=\"params\">word</span> =&gt;</span> &#123;</span><br><span class=\"line\">  $history.style.display = <span class=\"string\">'none'</span></span><br><span class=\"line\">  $result.style.display = <span class=\"string\">'block'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 搜索框获得焦点</span></span><br><span class=\"line\">$search.addEventListener(<span class=\"string\">'focus'</span>, () =&gt; &#123;</span><br><span class=\"line\">  $history.style.display = <span class=\"string\">'block'</span></span><br><span class=\"line\">  $result.style.display = <span class=\"string\">'none'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 搜索框输入</span></span><br><span class=\"line\">$search.addEventListener(<span class=\"string\">'keyup'</span>, e =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.keyCode === <span class=\"number\">13</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断按回车键</span></span><br><span class=\"line\">    searchSubmit(e.target.value)</span><br><span class=\"line\">    <span class=\"comment\">// new</span></span><br><span class=\"line\">    $blurElement.focus()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 默认显示形态</span></span><br><span class=\"line\">$search.focus()</span><br></pre></td></tr></table></figure>\n\n<p>这样就曲线救国，通过 js 让指定元素失去焦点了。</p>\n","site":{"data":{}},"excerpt":"<p>今天做项目，遇到一个需求。点击输入框获取焦点，按下回车后，执行搜索，失去焦点。</p>","more":"<h2 id=\"为什么会有这样的需求\"><a href=\"#为什么会有这样的需求\" class=\"headerlink\" title=\"为什么会有这样的需求\"></a>为什么会有这样的需求</h2><blockquote>\n<p>以下内容，不考虑部分输入法等兼容性问题</p>\n</blockquote>\n<p>项目大致要求是这样子的：</p>\n<ul>\n<li>页面提供搜索框，同时提供搜索历史方便直接选择；</li>\n<li>输入内容后，按回车，自动进行搜索，结果显示在下方区域。同时历史记录隐藏；</li>\n<li>再次进行输入内容时候，搜索结果移除，继续显示搜索记录提供方便选择。</li>\n</ul>\n<h2 id=\"问题点\"><a href=\"#问题点\" class=\"headerlink\" title=\"问题点\"></a>问题点</h2><p>梳理需求后，其实可以简单理解整个流程，用一个状态进行表示：</p>\n<blockquote>\n<p>搜索框获得焦点 =&gt; 显示历史记录</p>\n<p>搜索框失去焦点 =&gt; 显示搜索结果</p>\n</blockquote>\n<p>这个状态改变的规则为：</p>\n<blockquote>\n<p>搜索框输入完毕（回车） =&gt; 搜索框失去焦点</p>\n<p>搜索框被点击 =&gt; 搜索框获得焦点</p>\n</blockquote>\n<h2 id=\"第一版代码\"><a href=\"#第一版代码\" class=\"headerlink\" title=\"第一版代码\"></a>第一版代码</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    * &#123;</span><br><span class=\"line\">      margin: 0;</span><br><span class=\"line\">      padding: 0;</span><br><span class=\"line\">      font-size: 16px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    h1 &#123;</span><br><span class=\"line\">      font-size: 18px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.wrapper</span> &#123;</span></span><br><span class=\"line\">      margin: 8px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.search</span> &#123;</span></span><br><span class=\"line\">      width: 100%;</span><br><span class=\"line\">      border: 0;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">border-bottom</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#333</span>;</span></span><br><span class=\"line\">      outline: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>搜索：<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Search\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"search\"</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">\"off\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_History\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>搜索历史：<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>历史 bala bala...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Result\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>搜索结果：<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>结果 bala bala...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> $search = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Search'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> $history = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_History'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> $result = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Result'</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 搜索框数据提交</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> searchSubmit = <span class=\"function\"><span class=\"params\">word</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      $history.style.display = <span class=\"string\">'none'</span></span></span><br><span class=\"line\"><span class=\"javascript\">      $result.style.display = <span class=\"string\">'block'</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 搜索框获得焦点</span></span></span><br><span class=\"line\"><span class=\"javascript\">    $search.addEventListener(<span class=\"string\">'focus'</span>, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      $history.style.display = <span class=\"string\">'block'</span></span></span><br><span class=\"line\"><span class=\"javascript\">      $result.style.display = <span class=\"string\">'none'</span></span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 搜索框输入</span></span></span><br><span class=\"line\"><span class=\"javascript\">    $search.addEventListener(<span class=\"string\">'keyup'</span>, e =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">if</span> (e.keyCode === <span class=\"number\">13</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 判断按回车键</span></span></span><br><span class=\"line\">        searchSubmit(e.target.value)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 默认显示形态</span></span></span><br><span class=\"line\">    $search.focus()</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>整体逻辑没问题，唯独就是，输入完毕提交后，输入框不会失去焦点，也就无法通过点击再次出发 <code>focus</code> 事件了。</p>\n<h2 id=\"第二版调整\"><a href=\"#第二版调整\" class=\"headerlink\" title=\"第二版调整\"></a>第二版调整</h2><p>考虑到要让输入框失去焦点，采用增加一个元素，并让其获得焦点即可。</p>\n<p>但是增加的元素要有一些要求：</p>\n<ul>\n<li>这个元素能获得焦点，那就得是控件元素</li>\n<li>这个元素必须在页面内，还必须得显示，否则不能获得焦点</li>\n</ul>\n<p>综合这两点，我选择 <code>input-radio</code> 控件，比较小巧不明显，而且不会触发移动端的输入法，同时，只能定位到屏幕外侧。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// new</span></span><br><span class=\"line\"><span class=\"comment\">// 失去焦点元素</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> createBlurElment = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> $input = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'input'</span>)</span><br><span class=\"line\">  $input.type = <span class=\"string\">'radio'</span></span><br><span class=\"line\">  $input.style.position = <span class=\"string\">'absolute'</span></span><br><span class=\"line\">  $input.style.top = <span class=\"string\">'-1000px'</span></span><br><span class=\"line\">  $input.style.height = <span class=\"string\">'0'</span></span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild($input)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> $input</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> $search = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Search'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> $history = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_History'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> $result = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Result'</span>)</span><br><span class=\"line\"><span class=\"comment\">// new</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> $blurElement = createBlurElment()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 搜索框数据提交</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> searchSubmit = <span class=\"function\"><span class=\"params\">word</span> =&gt;</span> &#123;</span><br><span class=\"line\">  $history.style.display = <span class=\"string\">'none'</span></span><br><span class=\"line\">  $result.style.display = <span class=\"string\">'block'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 搜索框获得焦点</span></span><br><span class=\"line\">$search.addEventListener(<span class=\"string\">'focus'</span>, () =&gt; &#123;</span><br><span class=\"line\">  $history.style.display = <span class=\"string\">'block'</span></span><br><span class=\"line\">  $result.style.display = <span class=\"string\">'none'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 搜索框输入</span></span><br><span class=\"line\">$search.addEventListener(<span class=\"string\">'keyup'</span>, e =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.keyCode === <span class=\"number\">13</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断按回车键</span></span><br><span class=\"line\">    searchSubmit(e.target.value)</span><br><span class=\"line\">    <span class=\"comment\">// new</span></span><br><span class=\"line\">    $blurElement.focus()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 默认显示形态</span></span><br><span class=\"line\">$search.focus()</span><br></pre></td></tr></table></figure>\n\n<p>这样就曲线救国，通过 js 让指定元素失去焦点了。</p>"},{"layout":"post","title":"(a ==1 && a== 2 && a==3) 能为 true 吗？","date":"2018-01-21T22:40:00.000Z","_content":"\nstackoverflow 上看到一道题 [Can (a ==1 && a== 2 && a==3) ever evaluate to true?](https://stackoverflow.com/questions/48270127/can-a-1-a-2-a-3-ever-evaluate-to-true)\n\n<!-- more -->\n\n题目大致是：\n\n```js\n// TODO\n\nif(a == 1 && a == 2 && a == 3) {\n  console.log('Hello World!');\n}\n```\n\n## 解答\n\n这道题稍有点经验，并不难。\n\n> 主要是单年网易前端微专业有考过 `toString` 的题目。我被坑过...\n\n答案简单明了：\n\n```js\nvar a = {\n  n: 0,\n  valueOf: function() {\n    return ++this.n\n  }\n}\n\nif(a == 1 && a == 2 && a == 3) {\n  console.log('Hello World!');\n}\n```\n\n> 当然，用 `valueOf` `toString` 都是可以的。\n\n看了下别人的回复，基本上主流都是这个思路，写法稍有不同而已。\n\n## 其他的解法\n\n### 对象法\n\n```js\nvar val = 0;\nObject.defineProperty(window, 'a', {\n  get: function() {\n    return ++val;\n  }\n});\nif (a == 1 && a == 2 && a == 3) {\n  console.log('yay');\n}\n```\n\n和上面一样，也很容易想到，尤其是现在 MVVM 框架遍地开花的时代，就是书写量感觉有点大...还有个我自认为经常拼错的单词。\n\n还有一种 ES6 的写法，这个我没在全局 window 上用过，没想到用 `with` 处理，所以\b也很喜欢：\n\n```js\nvar i = 0;\n\nwith({\n  get a() {\n    return ++i;\n  }\n}) {\n  if (a == 1 && a == 2 && a == 3)\n    console.log(\"wohoo\");\n}\n```\n\n### 数组法\n\n```js\na = [1,2,3];\na.join = a.shift;\nconsole.log(a == 1 && a == 2 && a == 3);\n```\n\n方法清新，只不过是不用字符串和对象实现了，换成了数组。其实思路也是大同小异，不过很有创意。\n\n### 编码法\n\n> 以下方案，都是编码障眼法\n\n我自认为这个是最流氓的写法：\n\n```js\nvar aﾠ = 1;\nvar a = 2;\nvar ﾠa = 3;\nif(aﾠ == 1 && a == 2 && ﾠa == 3) {\n    console.log(\"Why hello there!\")\n}\n```\n\n简言之，你看着是一个变量 `a`，其实是三个变量，就是编码不同而已，长得和 `a` 一样。\n\n虽然我知道这种写法，但是自己不会写...具体可以看 SOF 上的解答，因为我觉得没用，所以也不打算去了解学习。\n\n你以为这么写就完了？还有更变态的：\n\n```js\nvar a = 1;\nvar ﾠ1 = a;\nvar ﾠ2 = a;\nvar ﾠ3 = a;\nconsole.log( a ==ﾠ1 && a ==ﾠ2 && a ==ﾠ3 );\n```\n\n山不转水转，数字正常来讲是不能当作变量名字的，但是...你懂的...\n\n如果到这里就算完了，那怎么行？\n\n```js\nvar a = 9;\n\nif‌(a==1 && a== 2 && a==3)\n{\n    document.write(\"<h1>Yes, it is possible!😎</h1>\")\n}\n\nfunction if‌(){return true;}\n```\n\n流氓耍到底...看到这个解法时候，我真的是...\b😂\n\n这个一样，是特殊的字符 `if`，否则正常是不让重写保留词汇的...\n\n由于 js 不能操作双等号，所以就不粘贴了。如果是 Ruby，竟然还可以定义双等号...\n\n\n## 最完美答案\n\n这个答案\b我认为是最完美的，可惜 SOF 赞同只有\b几十票...可惜了。\n\n```js\na = 100000000000000000\nif (a == a+1 && a == a+2 && a == a+3){\n  console.log(\"Precision loss!\");\n}\n```\n\n","source":"_posts/2018/2018-01-21-js-if-eq.md","raw":"---\nlayout: post\ntitle: \"(a ==1 && a== 2 && a==3) 能为 true 吗？\"\ndate: 2018-01-21 22:40:00 GMT+0800\ncategories: [前端]\ntags:  [js, if, equal]\n---\n\nstackoverflow 上看到一道题 [Can (a ==1 && a== 2 && a==3) ever evaluate to true?](https://stackoverflow.com/questions/48270127/can-a-1-a-2-a-3-ever-evaluate-to-true)\n\n<!-- more -->\n\n题目大致是：\n\n```js\n// TODO\n\nif(a == 1 && a == 2 && a == 3) {\n  console.log('Hello World!');\n}\n```\n\n## 解答\n\n这道题稍有点经验，并不难。\n\n> 主要是单年网易前端微专业有考过 `toString` 的题目。我被坑过...\n\n答案简单明了：\n\n```js\nvar a = {\n  n: 0,\n  valueOf: function() {\n    return ++this.n\n  }\n}\n\nif(a == 1 && a == 2 && a == 3) {\n  console.log('Hello World!');\n}\n```\n\n> 当然，用 `valueOf` `toString` 都是可以的。\n\n看了下别人的回复，基本上主流都是这个思路，写法稍有不同而已。\n\n## 其他的解法\n\n### 对象法\n\n```js\nvar val = 0;\nObject.defineProperty(window, 'a', {\n  get: function() {\n    return ++val;\n  }\n});\nif (a == 1 && a == 2 && a == 3) {\n  console.log('yay');\n}\n```\n\n和上面一样，也很容易想到，尤其是现在 MVVM 框架遍地开花的时代，就是书写量感觉有点大...还有个我自认为经常拼错的单词。\n\n还有一种 ES6 的写法，这个我没在全局 window 上用过，没想到用 `with` 处理，所以\b也很喜欢：\n\n```js\nvar i = 0;\n\nwith({\n  get a() {\n    return ++i;\n  }\n}) {\n  if (a == 1 && a == 2 && a == 3)\n    console.log(\"wohoo\");\n}\n```\n\n### 数组法\n\n```js\na = [1,2,3];\na.join = a.shift;\nconsole.log(a == 1 && a == 2 && a == 3);\n```\n\n方法清新，只不过是不用字符串和对象实现了，换成了数组。其实思路也是大同小异，不过很有创意。\n\n### 编码法\n\n> 以下方案，都是编码障眼法\n\n我自认为这个是最流氓的写法：\n\n```js\nvar aﾠ = 1;\nvar a = 2;\nvar ﾠa = 3;\nif(aﾠ == 1 && a == 2 && ﾠa == 3) {\n    console.log(\"Why hello there!\")\n}\n```\n\n简言之，你看着是一个变量 `a`，其实是三个变量，就是编码不同而已，长得和 `a` 一样。\n\n虽然我知道这种写法，但是自己不会写...具体可以看 SOF 上的解答，因为我觉得没用，所以也不打算去了解学习。\n\n你以为这么写就完了？还有更变态的：\n\n```js\nvar a = 1;\nvar ﾠ1 = a;\nvar ﾠ2 = a;\nvar ﾠ3 = a;\nconsole.log( a ==ﾠ1 && a ==ﾠ2 && a ==ﾠ3 );\n```\n\n山不转水转，数字正常来讲是不能当作变量名字的，但是...你懂的...\n\n如果到这里就算完了，那怎么行？\n\n```js\nvar a = 9;\n\nif‌(a==1 && a== 2 && a==3)\n{\n    document.write(\"<h1>Yes, it is possible!😎</h1>\")\n}\n\nfunction if‌(){return true;}\n```\n\n流氓耍到底...看到这个解法时候，我真的是...\b😂\n\n这个一样，是特殊的字符 `if`，否则正常是不让重写保留词汇的...\n\n由于 js 不能操作双等号，所以就不粘贴了。如果是 Ruby，竟然还可以定义双等号...\n\n\n## 最完美答案\n\n这个答案\b我认为是最完美的，可惜 SOF 赞同只有\b几十票...可惜了。\n\n```js\na = 100000000000000000\nif (a == a+1 && a == a+2 && a == a+3){\n  console.log(\"Precision loss!\");\n}\n```\n\n","slug":"2018-2018-01-21-js-if-eq","published":1,"updated":"2020-03-02T07:16:34.683Z","comments":1,"photos":[],"link":"","_id":"cka5ik8c10040nybgch0tfnj3","content":"<p>stackoverflow 上看到一道题 <a href=\"https://stackoverflow.com/questions/48270127/can-a-1-a-2-a-3-ever-evaluate-to-true\" target=\"_blank\" rel=\"noopener\">Can (a ==1 &amp;&amp; a== 2 &amp;&amp; a==3) ever evaluate to true?</a></p>\n<a id=\"more\"></a>\n\n<p>题目大致是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TODO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World!'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><p>这道题稍有点经验，并不难。</p>\n<blockquote>\n<p>主要是单年网易前端微专业有考过 <code>toString</code> 的题目。我被坑过…</p>\n</blockquote>\n<p>答案简单明了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">  n: <span class=\"number\">0</span>,</span><br><span class=\"line\">  valueOf: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ++<span class=\"keyword\">this</span>.n</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World!'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>当然，用 <code>valueOf</code> <code>toString</code> 都是可以的。</p>\n</blockquote>\n<p>看了下别人的回复，基本上主流都是这个思路，写法稍有不同而已。</p>\n<h2 id=\"其他的解法\"><a href=\"#其他的解法\" class=\"headerlink\" title=\"其他的解法\"></a>其他的解法</h2><h3 id=\"对象法\"><a href=\"#对象法\" class=\"headerlink\" title=\"对象法\"></a>对象法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">window</span>, <span class=\"string\">'a'</span>, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: function() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ++val;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'yay'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>和上面一样，也很容易想到，尤其是现在 MVVM 框架遍地开花的时代，就是书写量感觉有点大…还有个我自认为经常拼错的单词。</p>\n<p>还有一种 ES6 的写法，这个我没在全局 window 上用过，没想到用 <code>with</code> 处理，所以\b也很喜欢：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span>(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> a() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ++i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"wohoo\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数组法\"><a href=\"#数组法\" class=\"headerlink\" title=\"数组法\"></a>数组法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">a.join = a.shift;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n<p>方法清新，只不过是不用字符串和对象实现了，换成了数组。其实思路也是大同小异，不过很有创意。</p>\n<h3 id=\"编码法\"><a href=\"#编码法\" class=\"headerlink\" title=\"编码法\"></a>编码法</h3><blockquote>\n<p>以下方案，都是编码障眼法</p>\n</blockquote>\n<p>我自认为这个是最流氓的写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> aﾠ = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ﾠa = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(aﾠ == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; ﾠa == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Why hello there!\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简言之，你看着是一个变量 <code>a</code>，其实是三个变量，就是编码不同而已，长得和 <code>a</code> 一样。</p>\n<p>虽然我知道这种写法，但是自己不会写…具体可以看 SOF 上的解答，因为我觉得没用，所以也不打算去了解学习。</p>\n<p>你以为这么写就完了？还有更变态的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ﾠ<span class=\"number\">1</span> = a;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ﾠ<span class=\"number\">2</span> = a;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ﾠ<span class=\"number\">3</span> = a;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( a ==ﾠ<span class=\"number\">1</span> &amp;&amp; a ==ﾠ<span class=\"number\">2</span> &amp;&amp; a ==ﾠ<span class=\"number\">3</span> );</span><br></pre></td></tr></table></figure>\n\n<p>山不转水转，数字正常来讲是不能当作变量名字的，但是…你懂的…</p>\n<p>如果到这里就算完了，那怎么行？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>‌(a==<span class=\"number\">1</span> &amp;&amp; a== <span class=\"number\">2</span> &amp;&amp; a==<span class=\"number\">3</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;h1&gt;Yes, it is possible!😎&lt;/h1&gt;\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">if</span>‌(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>流氓耍到底…看到这个解法时候，我真的是…\b😂</p>\n<p>这个一样，是特殊的字符 <code>if</code>，否则正常是不让重写保留词汇的…</p>\n<p>由于 js 不能操作双等号，所以就不粘贴了。如果是 Ruby，竟然还可以定义双等号…</p>\n<h2 id=\"最完美答案\"><a href=\"#最完美答案\" class=\"headerlink\" title=\"最完美答案\"></a>最完美答案</h2><p>这个答案\b我认为是最完美的，可惜 SOF 赞同只有\b几十票…可惜了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">100000000000000000</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a == a+<span class=\"number\">1</span> &amp;&amp; a == a+<span class=\"number\">2</span> &amp;&amp; a == a+<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Precision loss!\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>stackoverflow 上看到一道题 <a href=\"https://stackoverflow.com/questions/48270127/can-a-1-a-2-a-3-ever-evaluate-to-true\" target=\"_blank\" rel=\"noopener\">Can (a ==1 &amp;&amp; a== 2 &amp;&amp; a==3) ever evaluate to true?</a></p>","more":"<p>题目大致是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TODO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World!'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h2><p>这道题稍有点经验，并不难。</p>\n<blockquote>\n<p>主要是单年网易前端微专业有考过 <code>toString</code> 的题目。我被坑过…</p>\n</blockquote>\n<p>答案简单明了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">  n: <span class=\"number\">0</span>,</span><br><span class=\"line\">  valueOf: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ++<span class=\"keyword\">this</span>.n</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World!'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>当然，用 <code>valueOf</code> <code>toString</code> 都是可以的。</p>\n</blockquote>\n<p>看了下别人的回复，基本上主流都是这个思路，写法稍有不同而已。</p>\n<h2 id=\"其他的解法\"><a href=\"#其他的解法\" class=\"headerlink\" title=\"其他的解法\"></a>其他的解法</h2><h3 id=\"对象法\"><a href=\"#对象法\" class=\"headerlink\" title=\"对象法\"></a>对象法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">window</span>, <span class=\"string\">'a'</span>, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: function() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ++val;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'yay'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>和上面一样，也很容易想到，尤其是现在 MVVM 框架遍地开花的时代，就是书写量感觉有点大…还有个我自认为经常拼错的单词。</p>\n<p>还有一种 ES6 的写法，这个我没在全局 window 上用过，没想到用 <code>with</code> 处理，所以\b也很喜欢：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span>(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> a() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ++i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"wohoo\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数组法\"><a href=\"#数组法\" class=\"headerlink\" title=\"数组法\"></a>数组法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">a.join = a.shift;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n<p>方法清新，只不过是不用字符串和对象实现了，换成了数组。其实思路也是大同小异，不过很有创意。</p>\n<h3 id=\"编码法\"><a href=\"#编码法\" class=\"headerlink\" title=\"编码法\"></a>编码法</h3><blockquote>\n<p>以下方案，都是编码障眼法</p>\n</blockquote>\n<p>我自认为这个是最流氓的写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> aﾠ = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ﾠa = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(aﾠ == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; ﾠa == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Why hello there!\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简言之，你看着是一个变量 <code>a</code>，其实是三个变量，就是编码不同而已，长得和 <code>a</code> 一样。</p>\n<p>虽然我知道这种写法，但是自己不会写…具体可以看 SOF 上的解答，因为我觉得没用，所以也不打算去了解学习。</p>\n<p>你以为这么写就完了？还有更变态的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ﾠ<span class=\"number\">1</span> = a;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ﾠ<span class=\"number\">2</span> = a;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ﾠ<span class=\"number\">3</span> = a;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( a ==ﾠ<span class=\"number\">1</span> &amp;&amp; a ==ﾠ<span class=\"number\">2</span> &amp;&amp; a ==ﾠ<span class=\"number\">3</span> );</span><br></pre></td></tr></table></figure>\n\n<p>山不转水转，数字正常来讲是不能当作变量名字的，但是…你懂的…</p>\n<p>如果到这里就算完了，那怎么行？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>‌(a==<span class=\"number\">1</span> &amp;&amp; a== <span class=\"number\">2</span> &amp;&amp; a==<span class=\"number\">3</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;h1&gt;Yes, it is possible!😎&lt;/h1&gt;\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">if</span>‌(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>流氓耍到底…看到这个解法时候，我真的是…\b😂</p>\n<p>这个一样，是特殊的字符 <code>if</code>，否则正常是不让重写保留词汇的…</p>\n<p>由于 js 不能操作双等号，所以就不粘贴了。如果是 Ruby，竟然还可以定义双等号…</p>\n<h2 id=\"最完美答案\"><a href=\"#最完美答案\" class=\"headerlink\" title=\"最完美答案\"></a>最完美答案</h2><p>这个答案\b我认为是最完美的，可惜 SOF 赞同只有\b几十票…可惜了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">100000000000000000</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a == a+<span class=\"number\">1</span> &amp;&amp; a == a+<span class=\"number\">2</span> &amp;&amp; a == a+<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Precision loss!\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"再次体验 ubuntu","date":"2018-02-05T12:10:00.000Z","_content":"\n昨天开始重新拾起 ubuntu，再次尝试使用 ubuntu作为开发机器。\n\n<!-- more -->\n\n## 查询下系统版本\n\n```bash\ncat /etc/issue\n```\n\n发现是 ubuntu 17.10，新版本不是说不好，但是就我的现状实力来讲，还是用稳定版 LTS 吧。\n\n> 在服务器上用 17.04 发现，很多源已经不再继续提供了，导致没办法装软件...所以还是 LTS 比较省心。\n\n换回 ubuntu 16.04后，发现笔记本 wifi 不正常，就是特别慢，发现 ping 值都特别高，但是插入有线网络就正常了。这个自己也是上网随便摸索，按照 bcm43xx系列，瞎捣鼓的，目前感觉速度上去了，但是貌似还会复发。\n\n![image](https://cdn0.yukapril.com/blog/2018-02-05-ubuntu.png-wm.white)\n\n## 稍微装了个主题和图标\n\n```bash\nsudo add-apt-repository ppa:noobslab/themes\nsudo add-apt-repository ppa:noobslab/icons\nsudo apt-get update\nsudo apt-get install flatabulous-theme\nsudo apt-get install ultra-flat-icons\n\nsudo apt-get install unity-tweak-tool\n```\n\n装上了一个字体，但是还没用到。后续计划下载思源黑体（恩，下载中...1.6G...）\n\n```bash\nsudo apt-get install fonts-wqy-microhei\n```\n\n## 安装软件\n\n软件上，开发常用的都可以比较方便的安装上。要么是直接下载 deb 安装，要么就是添加 ppa 源后直接 apt 安装。\n\n> InteliJ 系列\n>\n> VS code\n>\n> sublime\n>\n> filezilla\n\n连接服务器也方便了，直接 ssh 就行了。如果像我懒得敲命令，我用 chrome 插件实现（Termius）。\n\n![image](https://cdn0.yukapril.com/blog/2018-02-05-ubuntu-2.png-wm.white)\n\n各种开发环境的话...本身就是 linux，和服务器一样，啥都能直接用...\n\n浏览器的话，自带 firefox，安装 chrome，可以使用国内的镜像什么的。\n\n听音乐的话，有网易云音乐。不过我不听音乐～\n\n看视频，有mpv 播放器。\n\n下载，基本上就靠浏览器和 wget 了。还可以选择 aria2，我还没有尝试。\n\n对了，项目图片，可以用 GIMP 打开。项目 pdf，一般用 chrome 直接看。\n\n## 小结\n\n整体来说，我认为日常使用是没问题的。除了公司项目需要特殊的 vpn 不太好解决，其他都没问题，娱乐来说，也不会太守影响。反正我也不玩游戏。\n\n最蛋疼的问题，基本上就是需要解决驱动问题，比如显卡驱动和 wifi 网卡驱动。我记得 nvidia 显卡想当年不能换成闭源的那个 test 驱动，否则会花屏。现在也一样不敢换。网卡驱动一般都是大问题，要么支持，要么非常难解决。\n\n输入法的话，我就凑合用自带的了，输入没问题就行，没那么讲究。计划装个搜狗试试看。","source":"_posts/2018/2018-02-05-ubuntu.md","raw":"---\nlayout: post\ntitle: \"再次体验 ubuntu\"\ndate: 2018-02-05 12:10:00 GMT+0800\ncategories: [随笔]\ntags:  [ubuntu]\n---\n\n昨天开始重新拾起 ubuntu，再次尝试使用 ubuntu作为开发机器。\n\n<!-- more -->\n\n## 查询下系统版本\n\n```bash\ncat /etc/issue\n```\n\n发现是 ubuntu 17.10，新版本不是说不好，但是就我的现状实力来讲，还是用稳定版 LTS 吧。\n\n> 在服务器上用 17.04 发现，很多源已经不再继续提供了，导致没办法装软件...所以还是 LTS 比较省心。\n\n换回 ubuntu 16.04后，发现笔记本 wifi 不正常，就是特别慢，发现 ping 值都特别高，但是插入有线网络就正常了。这个自己也是上网随便摸索，按照 bcm43xx系列，瞎捣鼓的，目前感觉速度上去了，但是貌似还会复发。\n\n![image](https://cdn0.yukapril.com/blog/2018-02-05-ubuntu.png-wm.white)\n\n## 稍微装了个主题和图标\n\n```bash\nsudo add-apt-repository ppa:noobslab/themes\nsudo add-apt-repository ppa:noobslab/icons\nsudo apt-get update\nsudo apt-get install flatabulous-theme\nsudo apt-get install ultra-flat-icons\n\nsudo apt-get install unity-tweak-tool\n```\n\n装上了一个字体，但是还没用到。后续计划下载思源黑体（恩，下载中...1.6G...）\n\n```bash\nsudo apt-get install fonts-wqy-microhei\n```\n\n## 安装软件\n\n软件上，开发常用的都可以比较方便的安装上。要么是直接下载 deb 安装，要么就是添加 ppa 源后直接 apt 安装。\n\n> InteliJ 系列\n>\n> VS code\n>\n> sublime\n>\n> filezilla\n\n连接服务器也方便了，直接 ssh 就行了。如果像我懒得敲命令，我用 chrome 插件实现（Termius）。\n\n![image](https://cdn0.yukapril.com/blog/2018-02-05-ubuntu-2.png-wm.white)\n\n各种开发环境的话...本身就是 linux，和服务器一样，啥都能直接用...\n\n浏览器的话，自带 firefox，安装 chrome，可以使用国内的镜像什么的。\n\n听音乐的话，有网易云音乐。不过我不听音乐～\n\n看视频，有mpv 播放器。\n\n下载，基本上就靠浏览器和 wget 了。还可以选择 aria2，我还没有尝试。\n\n对了，项目图片，可以用 GIMP 打开。项目 pdf，一般用 chrome 直接看。\n\n## 小结\n\n整体来说，我认为日常使用是没问题的。除了公司项目需要特殊的 vpn 不太好解决，其他都没问题，娱乐来说，也不会太守影响。反正我也不玩游戏。\n\n最蛋疼的问题，基本上就是需要解决驱动问题，比如显卡驱动和 wifi 网卡驱动。我记得 nvidia 显卡想当年不能换成闭源的那个 test 驱动，否则会花屏。现在也一样不敢换。网卡驱动一般都是大问题，要么支持，要么非常难解决。\n\n输入法的话，我就凑合用自带的了，输入没问题就行，没那么讲究。计划装个搜狗试试看。","slug":"2018-2018-02-05-ubuntu","published":1,"updated":"2020-03-02T07:16:34.684Z","comments":1,"photos":[],"link":"","_id":"cka5ik8c20043nybghlgvqg9g","content":"<p>昨天开始重新拾起 ubuntu，再次尝试使用 ubuntu作为开发机器。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"查询下系统版本\"><a href=\"#查询下系统版本\" class=\"headerlink\" title=\"查询下系统版本\"></a>查询下系统版本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/issue</span><br></pre></td></tr></table></figure>\n\n<p>发现是 ubuntu 17.10，新版本不是说不好，但是就我的现状实力来讲，还是用稳定版 LTS 吧。</p>\n<blockquote>\n<p>在服务器上用 17.04 发现，很多源已经不再继续提供了，导致没办法装软件…所以还是 LTS 比较省心。</p>\n</blockquote>\n<p>换回 ubuntu 16.04后，发现笔记本 wifi 不正常，就是特别慢，发现 ping 值都特别高，但是插入有线网络就正常了。这个自己也是上网随便摸索，按照 bcm43xx系列，瞎捣鼓的，目前感觉速度上去了，但是貌似还会复发。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-02-05-ubuntu.png-wm.white\" alt=\"image\"></p>\n<h2 id=\"稍微装了个主题和图标\"><a href=\"#稍微装了个主题和图标\" class=\"headerlink\" title=\"稍微装了个主题和图标\"></a>稍微装了个主题和图标</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:noobslab/themes</span><br><span class=\"line\">sudo add-apt-repository ppa:noobslab/icons</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install flatabulous-theme</span><br><span class=\"line\">sudo apt-get install ultra-flat-icons</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install unity-tweak-tool</span><br></pre></td></tr></table></figure>\n\n<p>装上了一个字体，但是还没用到。后续计划下载思源黑体（恩，下载中…1.6G…）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install fonts-wqy-microhei</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装软件\"><a href=\"#安装软件\" class=\"headerlink\" title=\"安装软件\"></a>安装软件</h2><p>软件上，开发常用的都可以比较方便的安装上。要么是直接下载 deb 安装，要么就是添加 ppa 源后直接 apt 安装。</p>\n<blockquote>\n<p>InteliJ 系列</p>\n<p>VS code</p>\n<p>sublime</p>\n<p>filezilla</p>\n</blockquote>\n<p>连接服务器也方便了，直接 ssh 就行了。如果像我懒得敲命令，我用 chrome 插件实现（Termius）。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-02-05-ubuntu-2.png-wm.white\" alt=\"image\"></p>\n<p>各种开发环境的话…本身就是 linux，和服务器一样，啥都能直接用…</p>\n<p>浏览器的话，自带 firefox，安装 chrome，可以使用国内的镜像什么的。</p>\n<p>听音乐的话，有网易云音乐。不过我不听音乐～</p>\n<p>看视频，有mpv 播放器。</p>\n<p>下载，基本上就靠浏览器和 wget 了。还可以选择 aria2，我还没有尝试。</p>\n<p>对了，项目图片，可以用 GIMP 打开。项目 pdf，一般用 chrome 直接看。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>整体来说，我认为日常使用是没问题的。除了公司项目需要特殊的 vpn 不太好解决，其他都没问题，娱乐来说，也不会太守影响。反正我也不玩游戏。</p>\n<p>最蛋疼的问题，基本上就是需要解决驱动问题，比如显卡驱动和 wifi 网卡驱动。我记得 nvidia 显卡想当年不能换成闭源的那个 test 驱动，否则会花屏。现在也一样不敢换。网卡驱动一般都是大问题，要么支持，要么非常难解决。</p>\n<p>输入法的话，我就凑合用自带的了，输入没问题就行，没那么讲究。计划装个搜狗试试看。</p>\n","site":{"data":{}},"excerpt":"<p>昨天开始重新拾起 ubuntu，再次尝试使用 ubuntu作为开发机器。</p>","more":"<h2 id=\"查询下系统版本\"><a href=\"#查询下系统版本\" class=\"headerlink\" title=\"查询下系统版本\"></a>查询下系统版本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/issue</span><br></pre></td></tr></table></figure>\n\n<p>发现是 ubuntu 17.10，新版本不是说不好，但是就我的现状实力来讲，还是用稳定版 LTS 吧。</p>\n<blockquote>\n<p>在服务器上用 17.04 发现，很多源已经不再继续提供了，导致没办法装软件…所以还是 LTS 比较省心。</p>\n</blockquote>\n<p>换回 ubuntu 16.04后，发现笔记本 wifi 不正常，就是特别慢，发现 ping 值都特别高，但是插入有线网络就正常了。这个自己也是上网随便摸索，按照 bcm43xx系列，瞎捣鼓的，目前感觉速度上去了，但是貌似还会复发。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-02-05-ubuntu.png-wm.white\" alt=\"image\"></p>\n<h2 id=\"稍微装了个主题和图标\"><a href=\"#稍微装了个主题和图标\" class=\"headerlink\" title=\"稍微装了个主题和图标\"></a>稍微装了个主题和图标</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:noobslab/themes</span><br><span class=\"line\">sudo add-apt-repository ppa:noobslab/icons</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install flatabulous-theme</span><br><span class=\"line\">sudo apt-get install ultra-flat-icons</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install unity-tweak-tool</span><br></pre></td></tr></table></figure>\n\n<p>装上了一个字体，但是还没用到。后续计划下载思源黑体（恩，下载中…1.6G…）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install fonts-wqy-microhei</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装软件\"><a href=\"#安装软件\" class=\"headerlink\" title=\"安装软件\"></a>安装软件</h2><p>软件上，开发常用的都可以比较方便的安装上。要么是直接下载 deb 安装，要么就是添加 ppa 源后直接 apt 安装。</p>\n<blockquote>\n<p>InteliJ 系列</p>\n<p>VS code</p>\n<p>sublime</p>\n<p>filezilla</p>\n</blockquote>\n<p>连接服务器也方便了，直接 ssh 就行了。如果像我懒得敲命令，我用 chrome 插件实现（Termius）。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-02-05-ubuntu-2.png-wm.white\" alt=\"image\"></p>\n<p>各种开发环境的话…本身就是 linux，和服务器一样，啥都能直接用…</p>\n<p>浏览器的话，自带 firefox，安装 chrome，可以使用国内的镜像什么的。</p>\n<p>听音乐的话，有网易云音乐。不过我不听音乐～</p>\n<p>看视频，有mpv 播放器。</p>\n<p>下载，基本上就靠浏览器和 wget 了。还可以选择 aria2，我还没有尝试。</p>\n<p>对了，项目图片，可以用 GIMP 打开。项目 pdf，一般用 chrome 直接看。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>整体来说，我认为日常使用是没问题的。除了公司项目需要特殊的 vpn 不太好解决，其他都没问题，娱乐来说，也不会太守影响。反正我也不玩游戏。</p>\n<p>最蛋疼的问题，基本上就是需要解决驱动问题，比如显卡驱动和 wifi 网卡驱动。我记得 nvidia 显卡想当年不能换成闭源的那个 test 驱动，否则会花屏。现在也一样不敢换。网卡驱动一般都是大问题，要么支持，要么非常难解决。</p>\n<p>输入法的话，我就凑合用自带的了，输入没问题就行，没那么讲究。计划装个搜狗试试看。</p>"},{"layout":"post","title":"使用 webpack 编译 less 后 z-index 值改变处理","date":"2018-02-10T17:10:00.000Z","_content":"\n在一个老项目中新增加了功能，使用 webpack 编译后，发现其 `z-index` 被改变了，原本有的组件设置类似为 999 的都被优化为 1～9 了。看来得在插件上找问题。\n\n老项目仅仅是用 webpack 进行打包，同时使用了 less 进行开发。首先可以判断不是 less 转码的问题，否则 less 就太乱来了。\n\n剩下就是在js 中完成 css 的抽取，以及 css 的压缩优化。\n\n<!-- more -->\n\n## 问题处理\n\n重点需要关注 css 优化部分，使用的是 `optimize-css-assets-webpack-plugin` 插件，插件内部调用 `cssnano` 处理器。\n\n项目编译配置如下：\n\n```js\nlet OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin')\n// ...\n\nnew OptimizeCssAssetsPlugin({\n    assetNameRegExp: /\\.css$/g,\n    cssProcessor: require('cssnano'),\n    cssProcessorOptions: {\n        discardComments: {removeAll: true},\n        autoprefixer: {add: true, browsers: ['last 2 versions']},\n        reduceIdents: false\n     },\n    canPrint: true\n})\n```\n\n查阅 [optimize-css-assets-webpack-plugin](https://github.com/NMFR/optimize-css-assets-webpack-plugin) 简陋的文档：\n\n![image](https://cdn0.yukapril.com/blog/2018-02-10-webpack-less.png-wm.black)\n\n\n意思是说，啥都没做，只是把 `cssProcessorOptions` 的配置传给处理器 `cssProcessor` 而已。\n\n再查阅 [cssnano](http://cssnano.co/guides/optimisations/) 文档：\n\n可以看到，默认情况下，`autoprefixer` `postcss-discard-unused` `postcss-merge-idents` `postcss-reduce-idents` `postcss-zindex` 都是不开启的，但是在项目中莫名其妙默认开启了。\n\n其中 `autoprefixer` 确实需要，所以进行了配置。`postcss-discard-unused` 和 `postcss-merge-idents` 没有什么危害，也就没有注意到。\n\n但是曾经遇到过 `@keyframes` 样式被改名的情况（效果参见[这里](http://cssnano.co/optimisations/reduceidents/)），所以特意进行配置 `false` 了。\n\n所以这次还应该进行配置，增加一条：\n\n```js\nnew OptimizeCssAssetsPlugin({\n    assetNameRegExp: /\\.css$/g,\n    cssProcessor: require('cssnano'),\n    cssProcessorOptions: {\n        discardComments: {removeAll: true},\n        autoprefixer: {add: true, browsers: ['last 2 versions']},\n        reduceIdents: false,\n        zindex:false\n     },\n    canPrint: true\n})\n```\n\n这样问题就解决了。\n\n## 后记\n\n仔细检查了下，项目中使用的 `cssnano` 是 3.10.0 版本。也就是说，v3 系列默认都是开启的，文档看的是 v4 的。可以参考这个 [issue](https://github.com/ben-eb/cssnano/issues/358)。\n\n同时，3.10.0 源码中也有注意到：\n\n```js\n// Prevent PostCSS from throwing when safe is defined\nif (options.safe === true) {\n    options.isSafe = true;\n    options.safe = null;\n}\n\nconst safe = options.isSafe;\n```\n\n```js\nopts = assign({},\n    defaultOptions[plugin],\n    safe ? safeOptions[plugin] : null,\n    opts\n);\n```\n\n如果在参数里面加上 `safe/isSafe` 字段，也可以解决此问题。`safe` 是老版本遗留下来的字段，`isSafe`是新字段而已。","source":"_posts/2018/2018-02-10-less-zindex.md","raw":"---\nlayout: post\ntitle: \"使用 webpack 编译 less 后 z-index 值改变处理\"\ndate: 2018-02-10 17:10:00 GMT+0800\ncategories: [前端]\ntags:  [webpack, less, OptimizeCssAssetsPlugin, cssnano]\n---\n\n在一个老项目中新增加了功能，使用 webpack 编译后，发现其 `z-index` 被改变了，原本有的组件设置类似为 999 的都被优化为 1～9 了。看来得在插件上找问题。\n\n老项目仅仅是用 webpack 进行打包，同时使用了 less 进行开发。首先可以判断不是 less 转码的问题，否则 less 就太乱来了。\n\n剩下就是在js 中完成 css 的抽取，以及 css 的压缩优化。\n\n<!-- more -->\n\n## 问题处理\n\n重点需要关注 css 优化部分，使用的是 `optimize-css-assets-webpack-plugin` 插件，插件内部调用 `cssnano` 处理器。\n\n项目编译配置如下：\n\n```js\nlet OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin')\n// ...\n\nnew OptimizeCssAssetsPlugin({\n    assetNameRegExp: /\\.css$/g,\n    cssProcessor: require('cssnano'),\n    cssProcessorOptions: {\n        discardComments: {removeAll: true},\n        autoprefixer: {add: true, browsers: ['last 2 versions']},\n        reduceIdents: false\n     },\n    canPrint: true\n})\n```\n\n查阅 [optimize-css-assets-webpack-plugin](https://github.com/NMFR/optimize-css-assets-webpack-plugin) 简陋的文档：\n\n![image](https://cdn0.yukapril.com/blog/2018-02-10-webpack-less.png-wm.black)\n\n\n意思是说，啥都没做，只是把 `cssProcessorOptions` 的配置传给处理器 `cssProcessor` 而已。\n\n再查阅 [cssnano](http://cssnano.co/guides/optimisations/) 文档：\n\n可以看到，默认情况下，`autoprefixer` `postcss-discard-unused` `postcss-merge-idents` `postcss-reduce-idents` `postcss-zindex` 都是不开启的，但是在项目中莫名其妙默认开启了。\n\n其中 `autoprefixer` 确实需要，所以进行了配置。`postcss-discard-unused` 和 `postcss-merge-idents` 没有什么危害，也就没有注意到。\n\n但是曾经遇到过 `@keyframes` 样式被改名的情况（效果参见[这里](http://cssnano.co/optimisations/reduceidents/)），所以特意进行配置 `false` 了。\n\n所以这次还应该进行配置，增加一条：\n\n```js\nnew OptimizeCssAssetsPlugin({\n    assetNameRegExp: /\\.css$/g,\n    cssProcessor: require('cssnano'),\n    cssProcessorOptions: {\n        discardComments: {removeAll: true},\n        autoprefixer: {add: true, browsers: ['last 2 versions']},\n        reduceIdents: false,\n        zindex:false\n     },\n    canPrint: true\n})\n```\n\n这样问题就解决了。\n\n## 后记\n\n仔细检查了下，项目中使用的 `cssnano` 是 3.10.0 版本。也就是说，v3 系列默认都是开启的，文档看的是 v4 的。可以参考这个 [issue](https://github.com/ben-eb/cssnano/issues/358)。\n\n同时，3.10.0 源码中也有注意到：\n\n```js\n// Prevent PostCSS from throwing when safe is defined\nif (options.safe === true) {\n    options.isSafe = true;\n    options.safe = null;\n}\n\nconst safe = options.isSafe;\n```\n\n```js\nopts = assign({},\n    defaultOptions[plugin],\n    safe ? safeOptions[plugin] : null,\n    opts\n);\n```\n\n如果在参数里面加上 `safe/isSafe` 字段，也可以解决此问题。`safe` 是老版本遗留下来的字段，`isSafe`是新字段而已。","slug":"2018-2018-02-10-less-zindex","published":1,"updated":"2020-03-02T07:16:34.684Z","comments":1,"photos":[],"link":"","_id":"cka5ik8c40045nybg2914m57d","content":"<p>在一个老项目中新增加了功能，使用 webpack 编译后，发现其 <code>z-index</code> 被改变了，原本有的组件设置类似为 999 的都被优化为 1～9 了。看来得在插件上找问题。</p>\n<p>老项目仅仅是用 webpack 进行打包，同时使用了 less 进行开发。首先可以判断不是 less 转码的问题，否则 less 就太乱来了。</p>\n<p>剩下就是在js 中完成 css 的抽取，以及 css 的压缩优化。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"问题处理\"><a href=\"#问题处理\" class=\"headerlink\" title=\"问题处理\"></a>问题处理</h2><p>重点需要关注 css 优化部分，使用的是 <code>optimize-css-assets-webpack-plugin</code> 插件，插件内部调用 <code>cssnano</code> 处理器。</p>\n<p>项目编译配置如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> OptimizeCssAssetsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'optimize-css-assets-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> OptimizeCssAssetsPlugin(&#123;</span><br><span class=\"line\">    assetNameRegExp: <span class=\"regexp\">/\\.css$/g</span>,</span><br><span class=\"line\">    cssProcessor: <span class=\"built_in\">require</span>(<span class=\"string\">'cssnano'</span>),</span><br><span class=\"line\">    cssProcessorOptions: &#123;</span><br><span class=\"line\">        discardComments: &#123;<span class=\"attr\">removeAll</span>: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">        autoprefixer: &#123;<span class=\"attr\">add</span>: <span class=\"literal\">true</span>, <span class=\"attr\">browsers</span>: [<span class=\"string\">'last 2 versions'</span>]&#125;,</span><br><span class=\"line\">        reduceIdents: <span class=\"literal\">false</span></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">    canPrint: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>查阅 <a href=\"https://github.com/NMFR/optimize-css-assets-webpack-plugin\" target=\"_blank\" rel=\"noopener\">optimize-css-assets-webpack-plugin</a> 简陋的文档：</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-02-10-webpack-less.png-wm.black\" alt=\"image\"></p>\n<p>意思是说，啥都没做，只是把 <code>cssProcessorOptions</code> 的配置传给处理器 <code>cssProcessor</code> 而已。</p>\n<p>再查阅 <a href=\"http://cssnano.co/guides/optimisations/\" target=\"_blank\" rel=\"noopener\">cssnano</a> 文档：</p>\n<p>可以看到，默认情况下，<code>autoprefixer</code> <code>postcss-discard-unused</code> <code>postcss-merge-idents</code> <code>postcss-reduce-idents</code> <code>postcss-zindex</code> 都是不开启的，但是在项目中莫名其妙默认开启了。</p>\n<p>其中 <code>autoprefixer</code> 确实需要，所以进行了配置。<code>postcss-discard-unused</code> 和 <code>postcss-merge-idents</code> 没有什么危害，也就没有注意到。</p>\n<p>但是曾经遇到过 <code>@keyframes</code> 样式被改名的情况（效果参见<a href=\"http://cssnano.co/optimisations/reduceidents/\" target=\"_blank\" rel=\"noopener\">这里</a>），所以特意进行配置 <code>false</code> 了。</p>\n<p>所以这次还应该进行配置，增加一条：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> OptimizeCssAssetsPlugin(&#123;</span><br><span class=\"line\">    assetNameRegExp: <span class=\"regexp\">/\\.css$/g</span>,</span><br><span class=\"line\">    cssProcessor: <span class=\"built_in\">require</span>(<span class=\"string\">'cssnano'</span>),</span><br><span class=\"line\">    cssProcessorOptions: &#123;</span><br><span class=\"line\">        discardComments: &#123;<span class=\"attr\">removeAll</span>: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">        autoprefixer: &#123;<span class=\"attr\">add</span>: <span class=\"literal\">true</span>, <span class=\"attr\">browsers</span>: [<span class=\"string\">'last 2 versions'</span>]&#125;,</span><br><span class=\"line\">        reduceIdents: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        zindex:<span class=\"literal\">false</span></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">    canPrint: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这样问题就解决了。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>仔细检查了下，项目中使用的 <code>cssnano</code> 是 3.10.0 版本。也就是说，v3 系列默认都是开启的，文档看的是 v4 的。可以参考这个 <a href=\"https://github.com/ben-eb/cssnano/issues/358\" target=\"_blank\" rel=\"noopener\">issue</a>。</p>\n<p>同时，3.10.0 源码中也有注意到：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Prevent PostCSS from throwing when safe is defined</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (options.safe === <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    options.isSafe = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    options.safe = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> safe = options.isSafe;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opts = assign(&#123;&#125;,</span><br><span class=\"line\">    defaultOptions[plugin],</span><br><span class=\"line\">    safe ? safeOptions[plugin] : <span class=\"literal\">null</span>,</span><br><span class=\"line\">    opts</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>如果在参数里面加上 <code>safe/isSafe</code> 字段，也可以解决此问题。<code>safe</code> 是老版本遗留下来的字段，<code>isSafe</code>是新字段而已。</p>\n","site":{"data":{}},"excerpt":"<p>在一个老项目中新增加了功能，使用 webpack 编译后，发现其 <code>z-index</code> 被改变了，原本有的组件设置类似为 999 的都被优化为 1～9 了。看来得在插件上找问题。</p>\n<p>老项目仅仅是用 webpack 进行打包，同时使用了 less 进行开发。首先可以判断不是 less 转码的问题，否则 less 就太乱来了。</p>\n<p>剩下就是在js 中完成 css 的抽取，以及 css 的压缩优化。</p>","more":"<h2 id=\"问题处理\"><a href=\"#问题处理\" class=\"headerlink\" title=\"问题处理\"></a>问题处理</h2><p>重点需要关注 css 优化部分，使用的是 <code>optimize-css-assets-webpack-plugin</code> 插件，插件内部调用 <code>cssnano</code> 处理器。</p>\n<p>项目编译配置如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> OptimizeCssAssetsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'optimize-css-assets-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> OptimizeCssAssetsPlugin(&#123;</span><br><span class=\"line\">    assetNameRegExp: <span class=\"regexp\">/\\.css$/g</span>,</span><br><span class=\"line\">    cssProcessor: <span class=\"built_in\">require</span>(<span class=\"string\">'cssnano'</span>),</span><br><span class=\"line\">    cssProcessorOptions: &#123;</span><br><span class=\"line\">        discardComments: &#123;<span class=\"attr\">removeAll</span>: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">        autoprefixer: &#123;<span class=\"attr\">add</span>: <span class=\"literal\">true</span>, <span class=\"attr\">browsers</span>: [<span class=\"string\">'last 2 versions'</span>]&#125;,</span><br><span class=\"line\">        reduceIdents: <span class=\"literal\">false</span></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">    canPrint: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>查阅 <a href=\"https://github.com/NMFR/optimize-css-assets-webpack-plugin\" target=\"_blank\" rel=\"noopener\">optimize-css-assets-webpack-plugin</a> 简陋的文档：</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-02-10-webpack-less.png-wm.black\" alt=\"image\"></p>\n<p>意思是说，啥都没做，只是把 <code>cssProcessorOptions</code> 的配置传给处理器 <code>cssProcessor</code> 而已。</p>\n<p>再查阅 <a href=\"http://cssnano.co/guides/optimisations/\" target=\"_blank\" rel=\"noopener\">cssnano</a> 文档：</p>\n<p>可以看到，默认情况下，<code>autoprefixer</code> <code>postcss-discard-unused</code> <code>postcss-merge-idents</code> <code>postcss-reduce-idents</code> <code>postcss-zindex</code> 都是不开启的，但是在项目中莫名其妙默认开启了。</p>\n<p>其中 <code>autoprefixer</code> 确实需要，所以进行了配置。<code>postcss-discard-unused</code> 和 <code>postcss-merge-idents</code> 没有什么危害，也就没有注意到。</p>\n<p>但是曾经遇到过 <code>@keyframes</code> 样式被改名的情况（效果参见<a href=\"http://cssnano.co/optimisations/reduceidents/\" target=\"_blank\" rel=\"noopener\">这里</a>），所以特意进行配置 <code>false</code> 了。</p>\n<p>所以这次还应该进行配置，增加一条：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> OptimizeCssAssetsPlugin(&#123;</span><br><span class=\"line\">    assetNameRegExp: <span class=\"regexp\">/\\.css$/g</span>,</span><br><span class=\"line\">    cssProcessor: <span class=\"built_in\">require</span>(<span class=\"string\">'cssnano'</span>),</span><br><span class=\"line\">    cssProcessorOptions: &#123;</span><br><span class=\"line\">        discardComments: &#123;<span class=\"attr\">removeAll</span>: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">        autoprefixer: &#123;<span class=\"attr\">add</span>: <span class=\"literal\">true</span>, <span class=\"attr\">browsers</span>: [<span class=\"string\">'last 2 versions'</span>]&#125;,</span><br><span class=\"line\">        reduceIdents: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        zindex:<span class=\"literal\">false</span></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">    canPrint: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这样问题就解决了。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>仔细检查了下，项目中使用的 <code>cssnano</code> 是 3.10.0 版本。也就是说，v3 系列默认都是开启的，文档看的是 v4 的。可以参考这个 <a href=\"https://github.com/ben-eb/cssnano/issues/358\" target=\"_blank\" rel=\"noopener\">issue</a>。</p>\n<p>同时，3.10.0 源码中也有注意到：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Prevent PostCSS from throwing when safe is defined</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (options.safe === <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    options.isSafe = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    options.safe = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> safe = options.isSafe;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opts = assign(&#123;&#125;,</span><br><span class=\"line\">    defaultOptions[plugin],</span><br><span class=\"line\">    safe ? safeOptions[plugin] : <span class=\"literal\">null</span>,</span><br><span class=\"line\">    opts</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>如果在参数里面加上 <code>safe/isSafe</code> 字段，也可以解决此问题。<code>safe</code> 是老版本遗留下来的字段，<code>isSafe</code>是新字段而已。</p>"},{"layout":"post","title":"cdn 入门","date":"2018-03-11T18:51:00.000Z","_content":"\n抽空好好研究了下 cdn，算是小有收获。\n\n在研究期间，接触了阿里云，腾讯云，七牛云。这三个都很好，不过阿里云是需要付费才能使用的，腾讯云和七牛云都有免费额度。在协议上，基本上 https 流量都是收费服务。此外，七牛云可能有些特殊，它的对象存储域名访问是和 cdn  绑定的，所以一开始我也绕了很大的弯路。\n\n这里，我只讨论 cdn，先不考虑对象存储。\n\n<!-- more -->\n\n## cdn 是什么\n\n维基百科对其的定义是：\n\n> 内容分发网络（英语：Content delivery network或Content distribution network，缩写：CDN）是指一种通过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、视频、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。\n\n简单来说，就是提供数据分发的服务器。你有一个数据要分享，只需要交给它，它可以帮你完成分享给多人的过程。\n\n一般的，cdn 服务商都会在国内部署大量节点。每个用户访问 cdn 域名时候，会自动匹配离他最近的节点（速度最快）。\n\n比如，你有一个文件想要分享，但是你的服务器在北方地区，南方地区访问很慢，此时需要 cdn 支撑。把你的文件交给 cdn，由它负责快速的分享给朋友们。而且，一般 cdn 默认提供默认的 http 和 https 域名供使用，也可以自定义域名使用。\n\n## cdn 简单原理\n\n上面已经说到，cdn 厂商会在各个地区增加节点，让用户直接连接最近的节点，起到加速作用。\n\n具体的加速流程也很简单：\n\n假设网站地址 yukapril.com，部署在北京，期望访问 cdn.yukapril.com 进行加速。\n\n配置好以后，东北用户 A 访问 cdn.yukapril.com 资源，自动路由到最近的东北节点。此时东北节点没有需要的资源，只好访问网站 yukapril.com 先获取一下（这个过程叫做**回源**），再分发给用户。\n\n此时 A 用户感觉速度不一定快，还可能变慢了，因为原本 A 用户可以直接访问北京的服务器，现在由东北的一个节点服务器负责代理传输数据了，这个过程可能快可能慢。\n\n之后，东北用户 B 在访问 cdn.yukapril.com 相同资源后，由于东北节点存在当前资源，所以直接返回了，用户 B 感觉速度快多了。\n\n> cdn 没有相应数据的时候，就会回源查询。\n>\n> 每个资源都有自己的缓存时间，超过这个时间，cdn 也会进行回源查询。\n\n所以，cdn 解决的是相同地区第二次几以后访问的速度。除了第一此外，其余访问均可以通过 cdn 缓存进行处理，减少了服务器出口带宽压力。\n\n**所以，常见的场景是：**\n\n- 你的服务器访问比较慢，比如服务器在国外，或者国内距离客户很远。\n- 你的服务器带宽很小，出口流量不能支持多人同时访问，比如是 1M 带宽主机。\n- 服务器没办法配置 https（ssl），比如是虚拟主机，此时用 cdn 做 https 代理。\n\n## 使用 cdn 的流程\n\n在服务云厂商注册后，建议查看下具体的 cdn 自费，不同厂商计费方式都可能有一定出入。\n\n一般来讲，cdn 计费主要有包含：用户访问 cdn产生的上下行流量费，以及 cdn 访问你的服务器的回源费用。不同服务商可能会有免费策略。\n\n这里不考虑任何费用问题，只考虑如何接入和使用 cdn。主要需要三点：\n\n* 域名接入\n* 配置回源地址\n* 配置加速内容的策略\n\n这三点有的厂商在第一步时候就进行配置，也有在后续流程或者详细设置中配置的。\n\n## 具体实践\n\n下文以七牛云为例子进行配置\n\n假设原域名是 `yukapril.com` 服务器在国外，访问慢。你希望对中国用户进行提速，提速 cdn 域名为 `cdn.yukapril.com`\n\n> 图片供参考，内容以实际为准。\n\n![img](https://cdn0.yukapril.com/blog/2018-03-11-cdn.png-wm.white)\n\n* 加速域名：就是填写加速后的域名，这里我填写 `cdn.yukapril.com`\n\n* 通信协议：一般就是 http，如果你需要 https 也可以。这里配置 https 后，需要添加证书，可以是在 cdn 厂商购买（可能有免费证书），也可以是自己已有的证书。这里配置 https，不限制源站必须也是 https，所以这样配置 cdn 可以起到对源站 http 协议进行一次加密传输的效果。**此外注意查看 https 计费**。\n\n* 源站配置：\n\n  * 基础设置，一般使用源站域名或者 IP 地址，而且有的厂商支持多域名多 IP 方案。后续文章我会说到对象存储，届时可以选择云存储。\n  * 源站域名：就是 cdn 没有资源的时候，去哪里获取。此处就是填写自己的网站。\n  * 回源 HOST：这个需要说下，cdn 没有资源的时候，会去“源站域名”的网站获取，但是请求数据需要有主机头。如果不填写，默认是用 cdn 地址代替。鉴于省事，所以回源 HOST 就和“源站域名”一致，这样源站服务器不需要额外配置主机头（域名绑定）。详细说明见下文。\n  * 源站测试：这个好像只有七牛云有，需要确保你的服务器有一个测试文件而已\n* 缓存配置：主要进行控制每个路径、资源的缓存策略，不同厂商不同。基本上常用“遵循源站”，如果源站没有缓存策略，这里必须配置，否则每个资源都不缓存，cdn 没有起到作用。\n\n\n> 回源 HOST\n>\n> 一个服务器的一个端口，可以配置多个主机头，不同的主机头可以对应不同的网站。主机头相当于一个访问网站的标志。\n>\n> 访问 yukapril.com 服务器 80 端口，但是主机头是 cdn.yukapril.com。此时就要额外配置主机头 cdn.yukapril.com，否则服务器找对了，但是没有对应主机头信息，也不能访问网站。\n\n配置好以后，会给出一个 CNAME 地址，要求把 cdn 域名（cdn.yukapril.com）配置到此上面。\n\n之后就是稍微等待下，一般不会很久。访问 cdn 资源后，直接可以显示原来的内容。如果查阅自己的服务器日志，应该只有第一次的访问记录。\n\n## cdn 缓存的刷新\n\ncdn 数据一旦缓存，除了缓存到期，否则就不会在回源查询了。如果我们的资源有了问题，更新后，此时 cdn 还是老数据...\n\n这时候就需要对 cdn 缓存进行刷新了。目前所有的厂商都支持 cdn 缓存刷新功能，但是刷新频率都有限制。\n\n刷新上，支持资源文件级别的精准刷新，也支持目录级的刷新。基本上刷新后半分钟左右都可以见效。\n\n## cdn 与前端的结合\n\ncdn 可以支持全站 cdn 和部分资源 cdn 两种形式。\n\n全站 cdn 就是所有流量都走 cdn，其中包括访问页面等。这样配置时候，需要注意缓存配置，页面不缓存，其他静态资源视情况而定；对于地址参数上，需要注意不能忽略。而且，可以把 cdn 地址配置成主站域名，把源地址配置为其他域名。\n\n部分资源走 cdn 比较主流，仅仅是对图片 css，js 文件进行 cdn 加速。一般还会和对象存储进行结合。主要问题在于 js 资源发送 ajax 会跨站，此时需要对接口进行 CORS 处理。这就需要后端进行一些配置了。\n","source":"_posts/2018/2018-03-11-cdn.md","raw":"---\nlayout: post\ntitle: \"cdn 入门\"\ndate: 2018-03-11 18:51:00 GMT+0800\ncategories: [前端]\ntags:  [cdn]\n---\n\n抽空好好研究了下 cdn，算是小有收获。\n\n在研究期间，接触了阿里云，腾讯云，七牛云。这三个都很好，不过阿里云是需要付费才能使用的，腾讯云和七牛云都有免费额度。在协议上，基本上 https 流量都是收费服务。此外，七牛云可能有些特殊，它的对象存储域名访问是和 cdn  绑定的，所以一开始我也绕了很大的弯路。\n\n这里，我只讨论 cdn，先不考虑对象存储。\n\n<!-- more -->\n\n## cdn 是什么\n\n维基百科对其的定义是：\n\n> 内容分发网络（英语：Content delivery network或Content distribution network，缩写：CDN）是指一种通过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、视频、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。\n\n简单来说，就是提供数据分发的服务器。你有一个数据要分享，只需要交给它，它可以帮你完成分享给多人的过程。\n\n一般的，cdn 服务商都会在国内部署大量节点。每个用户访问 cdn 域名时候，会自动匹配离他最近的节点（速度最快）。\n\n比如，你有一个文件想要分享，但是你的服务器在北方地区，南方地区访问很慢，此时需要 cdn 支撑。把你的文件交给 cdn，由它负责快速的分享给朋友们。而且，一般 cdn 默认提供默认的 http 和 https 域名供使用，也可以自定义域名使用。\n\n## cdn 简单原理\n\n上面已经说到，cdn 厂商会在各个地区增加节点，让用户直接连接最近的节点，起到加速作用。\n\n具体的加速流程也很简单：\n\n假设网站地址 yukapril.com，部署在北京，期望访问 cdn.yukapril.com 进行加速。\n\n配置好以后，东北用户 A 访问 cdn.yukapril.com 资源，自动路由到最近的东北节点。此时东北节点没有需要的资源，只好访问网站 yukapril.com 先获取一下（这个过程叫做**回源**），再分发给用户。\n\n此时 A 用户感觉速度不一定快，还可能变慢了，因为原本 A 用户可以直接访问北京的服务器，现在由东北的一个节点服务器负责代理传输数据了，这个过程可能快可能慢。\n\n之后，东北用户 B 在访问 cdn.yukapril.com 相同资源后，由于东北节点存在当前资源，所以直接返回了，用户 B 感觉速度快多了。\n\n> cdn 没有相应数据的时候，就会回源查询。\n>\n> 每个资源都有自己的缓存时间，超过这个时间，cdn 也会进行回源查询。\n\n所以，cdn 解决的是相同地区第二次几以后访问的速度。除了第一此外，其余访问均可以通过 cdn 缓存进行处理，减少了服务器出口带宽压力。\n\n**所以，常见的场景是：**\n\n- 你的服务器访问比较慢，比如服务器在国外，或者国内距离客户很远。\n- 你的服务器带宽很小，出口流量不能支持多人同时访问，比如是 1M 带宽主机。\n- 服务器没办法配置 https（ssl），比如是虚拟主机，此时用 cdn 做 https 代理。\n\n## 使用 cdn 的流程\n\n在服务云厂商注册后，建议查看下具体的 cdn 自费，不同厂商计费方式都可能有一定出入。\n\n一般来讲，cdn 计费主要有包含：用户访问 cdn产生的上下行流量费，以及 cdn 访问你的服务器的回源费用。不同服务商可能会有免费策略。\n\n这里不考虑任何费用问题，只考虑如何接入和使用 cdn。主要需要三点：\n\n* 域名接入\n* 配置回源地址\n* 配置加速内容的策略\n\n这三点有的厂商在第一步时候就进行配置，也有在后续流程或者详细设置中配置的。\n\n## 具体实践\n\n下文以七牛云为例子进行配置\n\n假设原域名是 `yukapril.com` 服务器在国外，访问慢。你希望对中国用户进行提速，提速 cdn 域名为 `cdn.yukapril.com`\n\n> 图片供参考，内容以实际为准。\n\n![img](https://cdn0.yukapril.com/blog/2018-03-11-cdn.png-wm.white)\n\n* 加速域名：就是填写加速后的域名，这里我填写 `cdn.yukapril.com`\n\n* 通信协议：一般就是 http，如果你需要 https 也可以。这里配置 https 后，需要添加证书，可以是在 cdn 厂商购买（可能有免费证书），也可以是自己已有的证书。这里配置 https，不限制源站必须也是 https，所以这样配置 cdn 可以起到对源站 http 协议进行一次加密传输的效果。**此外注意查看 https 计费**。\n\n* 源站配置：\n\n  * 基础设置，一般使用源站域名或者 IP 地址，而且有的厂商支持多域名多 IP 方案。后续文章我会说到对象存储，届时可以选择云存储。\n  * 源站域名：就是 cdn 没有资源的时候，去哪里获取。此处就是填写自己的网站。\n  * 回源 HOST：这个需要说下，cdn 没有资源的时候，会去“源站域名”的网站获取，但是请求数据需要有主机头。如果不填写，默认是用 cdn 地址代替。鉴于省事，所以回源 HOST 就和“源站域名”一致，这样源站服务器不需要额外配置主机头（域名绑定）。详细说明见下文。\n  * 源站测试：这个好像只有七牛云有，需要确保你的服务器有一个测试文件而已\n* 缓存配置：主要进行控制每个路径、资源的缓存策略，不同厂商不同。基本上常用“遵循源站”，如果源站没有缓存策略，这里必须配置，否则每个资源都不缓存，cdn 没有起到作用。\n\n\n> 回源 HOST\n>\n> 一个服务器的一个端口，可以配置多个主机头，不同的主机头可以对应不同的网站。主机头相当于一个访问网站的标志。\n>\n> 访问 yukapril.com 服务器 80 端口，但是主机头是 cdn.yukapril.com。此时就要额外配置主机头 cdn.yukapril.com，否则服务器找对了，但是没有对应主机头信息，也不能访问网站。\n\n配置好以后，会给出一个 CNAME 地址，要求把 cdn 域名（cdn.yukapril.com）配置到此上面。\n\n之后就是稍微等待下，一般不会很久。访问 cdn 资源后，直接可以显示原来的内容。如果查阅自己的服务器日志，应该只有第一次的访问记录。\n\n## cdn 缓存的刷新\n\ncdn 数据一旦缓存，除了缓存到期，否则就不会在回源查询了。如果我们的资源有了问题，更新后，此时 cdn 还是老数据...\n\n这时候就需要对 cdn 缓存进行刷新了。目前所有的厂商都支持 cdn 缓存刷新功能，但是刷新频率都有限制。\n\n刷新上，支持资源文件级别的精准刷新，也支持目录级的刷新。基本上刷新后半分钟左右都可以见效。\n\n## cdn 与前端的结合\n\ncdn 可以支持全站 cdn 和部分资源 cdn 两种形式。\n\n全站 cdn 就是所有流量都走 cdn，其中包括访问页面等。这样配置时候，需要注意缓存配置，页面不缓存，其他静态资源视情况而定；对于地址参数上，需要注意不能忽略。而且，可以把 cdn 地址配置成主站域名，把源地址配置为其他域名。\n\n部分资源走 cdn 比较主流，仅仅是对图片 css，js 文件进行 cdn 加速。一般还会和对象存储进行结合。主要问题在于 js 资源发送 ajax 会跨站，此时需要对接口进行 CORS 处理。这就需要后端进行一些配置了。\n","slug":"2018-2018-03-11-cdn","published":1,"updated":"2020-03-02T07:16:34.684Z","comments":1,"photos":[],"link":"","_id":"cka5ik8c50047nybgjtlfble2","content":"<p>抽空好好研究了下 cdn，算是小有收获。</p>\n<p>在研究期间，接触了阿里云，腾讯云，七牛云。这三个都很好，不过阿里云是需要付费才能使用的，腾讯云和七牛云都有免费额度。在协议上，基本上 https 流量都是收费服务。此外，七牛云可能有些特殊，它的对象存储域名访问是和 cdn  绑定的，所以一开始我也绕了很大的弯路。</p>\n<p>这里，我只讨论 cdn，先不考虑对象存储。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"cdn-是什么\"><a href=\"#cdn-是什么\" class=\"headerlink\" title=\"cdn 是什么\"></a>cdn 是什么</h2><p>维基百科对其的定义是：</p>\n<blockquote>\n<p>内容分发网络（英语：Content delivery network或Content distribution network，缩写：CDN）是指一种通过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、视频、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。</p>\n</blockquote>\n<p>简单来说，就是提供数据分发的服务器。你有一个数据要分享，只需要交给它，它可以帮你完成分享给多人的过程。</p>\n<p>一般的，cdn 服务商都会在国内部署大量节点。每个用户访问 cdn 域名时候，会自动匹配离他最近的节点（速度最快）。</p>\n<p>比如，你有一个文件想要分享，但是你的服务器在北方地区，南方地区访问很慢，此时需要 cdn 支撑。把你的文件交给 cdn，由它负责快速的分享给朋友们。而且，一般 cdn 默认提供默认的 http 和 https 域名供使用，也可以自定义域名使用。</p>\n<h2 id=\"cdn-简单原理\"><a href=\"#cdn-简单原理\" class=\"headerlink\" title=\"cdn 简单原理\"></a>cdn 简单原理</h2><p>上面已经说到，cdn 厂商会在各个地区增加节点，让用户直接连接最近的节点，起到加速作用。</p>\n<p>具体的加速流程也很简单：</p>\n<p>假设网站地址 yukapril.com，部署在北京，期望访问 cdn.yukapril.com 进行加速。</p>\n<p>配置好以后，东北用户 A 访问 cdn.yukapril.com 资源，自动路由到最近的东北节点。此时东北节点没有需要的资源，只好访问网站 yukapril.com 先获取一下（这个过程叫做<strong>回源</strong>），再分发给用户。</p>\n<p>此时 A 用户感觉速度不一定快，还可能变慢了，因为原本 A 用户可以直接访问北京的服务器，现在由东北的一个节点服务器负责代理传输数据了，这个过程可能快可能慢。</p>\n<p>之后，东北用户 B 在访问 cdn.yukapril.com 相同资源后，由于东北节点存在当前资源，所以直接返回了，用户 B 感觉速度快多了。</p>\n<blockquote>\n<p>cdn 没有相应数据的时候，就会回源查询。</p>\n<p>每个资源都有自己的缓存时间，超过这个时间，cdn 也会进行回源查询。</p>\n</blockquote>\n<p>所以，cdn 解决的是相同地区第二次几以后访问的速度。除了第一此外，其余访问均可以通过 cdn 缓存进行处理，减少了服务器出口带宽压力。</p>\n<p><strong>所以，常见的场景是：</strong></p>\n<ul>\n<li>你的服务器访问比较慢，比如服务器在国外，或者国内距离客户很远。</li>\n<li>你的服务器带宽很小，出口流量不能支持多人同时访问，比如是 1M 带宽主机。</li>\n<li>服务器没办法配置 https（ssl），比如是虚拟主机，此时用 cdn 做 https 代理。</li>\n</ul>\n<h2 id=\"使用-cdn-的流程\"><a href=\"#使用-cdn-的流程\" class=\"headerlink\" title=\"使用 cdn 的流程\"></a>使用 cdn 的流程</h2><p>在服务云厂商注册后，建议查看下具体的 cdn 自费，不同厂商计费方式都可能有一定出入。</p>\n<p>一般来讲，cdn 计费主要有包含：用户访问 cdn产生的上下行流量费，以及 cdn 访问你的服务器的回源费用。不同服务商可能会有免费策略。</p>\n<p>这里不考虑任何费用问题，只考虑如何接入和使用 cdn。主要需要三点：</p>\n<ul>\n<li>域名接入</li>\n<li>配置回源地址</li>\n<li>配置加速内容的策略</li>\n</ul>\n<p>这三点有的厂商在第一步时候就进行配置，也有在后续流程或者详细设置中配置的。</p>\n<h2 id=\"具体实践\"><a href=\"#具体实践\" class=\"headerlink\" title=\"具体实践\"></a>具体实践</h2><p>下文以七牛云为例子进行配置</p>\n<p>假设原域名是 <code>yukapril.com</code> 服务器在国外，访问慢。你希望对中国用户进行提速，提速 cdn 域名为 <code>cdn.yukapril.com</code></p>\n<blockquote>\n<p>图片供参考，内容以实际为准。</p>\n</blockquote>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-03-11-cdn.png-wm.white\" alt=\"img\"></p>\n<ul>\n<li><p>加速域名：就是填写加速后的域名，这里我填写 <code>cdn.yukapril.com</code></p>\n</li>\n<li><p>通信协议：一般就是 http，如果你需要 https 也可以。这里配置 https 后，需要添加证书，可以是在 cdn 厂商购买（可能有免费证书），也可以是自己已有的证书。这里配置 https，不限制源站必须也是 https，所以这样配置 cdn 可以起到对源站 http 协议进行一次加密传输的效果。<strong>此外注意查看 https 计费</strong>。</p>\n</li>\n<li><p>源站配置：</p>\n<ul>\n<li>基础设置，一般使用源站域名或者 IP 地址，而且有的厂商支持多域名多 IP 方案。后续文章我会说到对象存储，届时可以选择云存储。</li>\n<li>源站域名：就是 cdn 没有资源的时候，去哪里获取。此处就是填写自己的网站。</li>\n<li>回源 HOST：这个需要说下，cdn 没有资源的时候，会去“源站域名”的网站获取，但是请求数据需要有主机头。如果不填写，默认是用 cdn 地址代替。鉴于省事，所以回源 HOST 就和“源站域名”一致，这样源站服务器不需要额外配置主机头（域名绑定）。详细说明见下文。</li>\n<li>源站测试：这个好像只有七牛云有，需要确保你的服务器有一个测试文件而已</li>\n</ul>\n</li>\n<li><p>缓存配置：主要进行控制每个路径、资源的缓存策略，不同厂商不同。基本上常用“遵循源站”，如果源站没有缓存策略，这里必须配置，否则每个资源都不缓存，cdn 没有起到作用。</p>\n</li>\n</ul>\n<blockquote>\n<p>回源 HOST</p>\n<p>一个服务器的一个端口，可以配置多个主机头，不同的主机头可以对应不同的网站。主机头相当于一个访问网站的标志。</p>\n<p>访问 yukapril.com 服务器 80 端口，但是主机头是 cdn.yukapril.com。此时就要额外配置主机头 cdn.yukapril.com，否则服务器找对了，但是没有对应主机头信息，也不能访问网站。</p>\n</blockquote>\n<p>配置好以后，会给出一个 CNAME 地址，要求把 cdn 域名（cdn.yukapril.com）配置到此上面。</p>\n<p>之后就是稍微等待下，一般不会很久。访问 cdn 资源后，直接可以显示原来的内容。如果查阅自己的服务器日志，应该只有第一次的访问记录。</p>\n<h2 id=\"cdn-缓存的刷新\"><a href=\"#cdn-缓存的刷新\" class=\"headerlink\" title=\"cdn 缓存的刷新\"></a>cdn 缓存的刷新</h2><p>cdn 数据一旦缓存，除了缓存到期，否则就不会在回源查询了。如果我们的资源有了问题，更新后，此时 cdn 还是老数据…</p>\n<p>这时候就需要对 cdn 缓存进行刷新了。目前所有的厂商都支持 cdn 缓存刷新功能，但是刷新频率都有限制。</p>\n<p>刷新上，支持资源文件级别的精准刷新，也支持目录级的刷新。基本上刷新后半分钟左右都可以见效。</p>\n<h2 id=\"cdn-与前端的结合\"><a href=\"#cdn-与前端的结合\" class=\"headerlink\" title=\"cdn 与前端的结合\"></a>cdn 与前端的结合</h2><p>cdn 可以支持全站 cdn 和部分资源 cdn 两种形式。</p>\n<p>全站 cdn 就是所有流量都走 cdn，其中包括访问页面等。这样配置时候，需要注意缓存配置，页面不缓存，其他静态资源视情况而定；对于地址参数上，需要注意不能忽略。而且，可以把 cdn 地址配置成主站域名，把源地址配置为其他域名。</p>\n<p>部分资源走 cdn 比较主流，仅仅是对图片 css，js 文件进行 cdn 加速。一般还会和对象存储进行结合。主要问题在于 js 资源发送 ajax 会跨站，此时需要对接口进行 CORS 处理。这就需要后端进行一些配置了。</p>\n","site":{"data":{}},"excerpt":"<p>抽空好好研究了下 cdn，算是小有收获。</p>\n<p>在研究期间，接触了阿里云，腾讯云，七牛云。这三个都很好，不过阿里云是需要付费才能使用的，腾讯云和七牛云都有免费额度。在协议上，基本上 https 流量都是收费服务。此外，七牛云可能有些特殊，它的对象存储域名访问是和 cdn  绑定的，所以一开始我也绕了很大的弯路。</p>\n<p>这里，我只讨论 cdn，先不考虑对象存储。</p>","more":"<h2 id=\"cdn-是什么\"><a href=\"#cdn-是什么\" class=\"headerlink\" title=\"cdn 是什么\"></a>cdn 是什么</h2><p>维基百科对其的定义是：</p>\n<blockquote>\n<p>内容分发网络（英语：Content delivery network或Content distribution network，缩写：CDN）是指一种通过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、视频、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。</p>\n</blockquote>\n<p>简单来说，就是提供数据分发的服务器。你有一个数据要分享，只需要交给它，它可以帮你完成分享给多人的过程。</p>\n<p>一般的，cdn 服务商都会在国内部署大量节点。每个用户访问 cdn 域名时候，会自动匹配离他最近的节点（速度最快）。</p>\n<p>比如，你有一个文件想要分享，但是你的服务器在北方地区，南方地区访问很慢，此时需要 cdn 支撑。把你的文件交给 cdn，由它负责快速的分享给朋友们。而且，一般 cdn 默认提供默认的 http 和 https 域名供使用，也可以自定义域名使用。</p>\n<h2 id=\"cdn-简单原理\"><a href=\"#cdn-简单原理\" class=\"headerlink\" title=\"cdn 简单原理\"></a>cdn 简单原理</h2><p>上面已经说到，cdn 厂商会在各个地区增加节点，让用户直接连接最近的节点，起到加速作用。</p>\n<p>具体的加速流程也很简单：</p>\n<p>假设网站地址 yukapril.com，部署在北京，期望访问 cdn.yukapril.com 进行加速。</p>\n<p>配置好以后，东北用户 A 访问 cdn.yukapril.com 资源，自动路由到最近的东北节点。此时东北节点没有需要的资源，只好访问网站 yukapril.com 先获取一下（这个过程叫做<strong>回源</strong>），再分发给用户。</p>\n<p>此时 A 用户感觉速度不一定快，还可能变慢了，因为原本 A 用户可以直接访问北京的服务器，现在由东北的一个节点服务器负责代理传输数据了，这个过程可能快可能慢。</p>\n<p>之后，东北用户 B 在访问 cdn.yukapril.com 相同资源后，由于东北节点存在当前资源，所以直接返回了，用户 B 感觉速度快多了。</p>\n<blockquote>\n<p>cdn 没有相应数据的时候，就会回源查询。</p>\n<p>每个资源都有自己的缓存时间，超过这个时间，cdn 也会进行回源查询。</p>\n</blockquote>\n<p>所以，cdn 解决的是相同地区第二次几以后访问的速度。除了第一此外，其余访问均可以通过 cdn 缓存进行处理，减少了服务器出口带宽压力。</p>\n<p><strong>所以，常见的场景是：</strong></p>\n<ul>\n<li>你的服务器访问比较慢，比如服务器在国外，或者国内距离客户很远。</li>\n<li>你的服务器带宽很小，出口流量不能支持多人同时访问，比如是 1M 带宽主机。</li>\n<li>服务器没办法配置 https（ssl），比如是虚拟主机，此时用 cdn 做 https 代理。</li>\n</ul>\n<h2 id=\"使用-cdn-的流程\"><a href=\"#使用-cdn-的流程\" class=\"headerlink\" title=\"使用 cdn 的流程\"></a>使用 cdn 的流程</h2><p>在服务云厂商注册后，建议查看下具体的 cdn 自费，不同厂商计费方式都可能有一定出入。</p>\n<p>一般来讲，cdn 计费主要有包含：用户访问 cdn产生的上下行流量费，以及 cdn 访问你的服务器的回源费用。不同服务商可能会有免费策略。</p>\n<p>这里不考虑任何费用问题，只考虑如何接入和使用 cdn。主要需要三点：</p>\n<ul>\n<li>域名接入</li>\n<li>配置回源地址</li>\n<li>配置加速内容的策略</li>\n</ul>\n<p>这三点有的厂商在第一步时候就进行配置，也有在后续流程或者详细设置中配置的。</p>\n<h2 id=\"具体实践\"><a href=\"#具体实践\" class=\"headerlink\" title=\"具体实践\"></a>具体实践</h2><p>下文以七牛云为例子进行配置</p>\n<p>假设原域名是 <code>yukapril.com</code> 服务器在国外，访问慢。你希望对中国用户进行提速，提速 cdn 域名为 <code>cdn.yukapril.com</code></p>\n<blockquote>\n<p>图片供参考，内容以实际为准。</p>\n</blockquote>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-03-11-cdn.png-wm.white\" alt=\"img\"></p>\n<ul>\n<li><p>加速域名：就是填写加速后的域名，这里我填写 <code>cdn.yukapril.com</code></p>\n</li>\n<li><p>通信协议：一般就是 http，如果你需要 https 也可以。这里配置 https 后，需要添加证书，可以是在 cdn 厂商购买（可能有免费证书），也可以是自己已有的证书。这里配置 https，不限制源站必须也是 https，所以这样配置 cdn 可以起到对源站 http 协议进行一次加密传输的效果。<strong>此外注意查看 https 计费</strong>。</p>\n</li>\n<li><p>源站配置：</p>\n<ul>\n<li>基础设置，一般使用源站域名或者 IP 地址，而且有的厂商支持多域名多 IP 方案。后续文章我会说到对象存储，届时可以选择云存储。</li>\n<li>源站域名：就是 cdn 没有资源的时候，去哪里获取。此处就是填写自己的网站。</li>\n<li>回源 HOST：这个需要说下，cdn 没有资源的时候，会去“源站域名”的网站获取，但是请求数据需要有主机头。如果不填写，默认是用 cdn 地址代替。鉴于省事，所以回源 HOST 就和“源站域名”一致，这样源站服务器不需要额外配置主机头（域名绑定）。详细说明见下文。</li>\n<li>源站测试：这个好像只有七牛云有，需要确保你的服务器有一个测试文件而已</li>\n</ul>\n</li>\n<li><p>缓存配置：主要进行控制每个路径、资源的缓存策略，不同厂商不同。基本上常用“遵循源站”，如果源站没有缓存策略，这里必须配置，否则每个资源都不缓存，cdn 没有起到作用。</p>\n</li>\n</ul>\n<blockquote>\n<p>回源 HOST</p>\n<p>一个服务器的一个端口，可以配置多个主机头，不同的主机头可以对应不同的网站。主机头相当于一个访问网站的标志。</p>\n<p>访问 yukapril.com 服务器 80 端口，但是主机头是 cdn.yukapril.com。此时就要额外配置主机头 cdn.yukapril.com，否则服务器找对了，但是没有对应主机头信息，也不能访问网站。</p>\n</blockquote>\n<p>配置好以后，会给出一个 CNAME 地址，要求把 cdn 域名（cdn.yukapril.com）配置到此上面。</p>\n<p>之后就是稍微等待下，一般不会很久。访问 cdn 资源后，直接可以显示原来的内容。如果查阅自己的服务器日志，应该只有第一次的访问记录。</p>\n<h2 id=\"cdn-缓存的刷新\"><a href=\"#cdn-缓存的刷新\" class=\"headerlink\" title=\"cdn 缓存的刷新\"></a>cdn 缓存的刷新</h2><p>cdn 数据一旦缓存，除了缓存到期，否则就不会在回源查询了。如果我们的资源有了问题，更新后，此时 cdn 还是老数据…</p>\n<p>这时候就需要对 cdn 缓存进行刷新了。目前所有的厂商都支持 cdn 缓存刷新功能，但是刷新频率都有限制。</p>\n<p>刷新上，支持资源文件级别的精准刷新，也支持目录级的刷新。基本上刷新后半分钟左右都可以见效。</p>\n<h2 id=\"cdn-与前端的结合\"><a href=\"#cdn-与前端的结合\" class=\"headerlink\" title=\"cdn 与前端的结合\"></a>cdn 与前端的结合</h2><p>cdn 可以支持全站 cdn 和部分资源 cdn 两种形式。</p>\n<p>全站 cdn 就是所有流量都走 cdn，其中包括访问页面等。这样配置时候，需要注意缓存配置，页面不缓存，其他静态资源视情况而定；对于地址参数上，需要注意不能忽略。而且，可以把 cdn 地址配置成主站域名，把源地址配置为其他域名。</p>\n<p>部分资源走 cdn 比较主流，仅仅是对图片 css，js 文件进行 cdn 加速。一般还会和对象存储进行结合。主要问题在于 js 资源发送 ajax 会跨站，此时需要对接口进行 CORS 处理。这就需要后端进行一些配置了。</p>"},{"layout":"post","title":"这一年——2017年的小结","date":"2018-02-14T23:13:00.000Z","_content":"\n看着很多人都在写总结，感觉自己不写一点，很落伍。\n\n<!-- more -->\n\n在一个多月前，我还翻看到了 2016 年的总结，几张色彩斑斓的卡片，讲述着一年中的感受。当时还在想着 2017 年卡片是什么样子。\n\n2017 年发生的事情太多，自己也懒了。\n\n还是多说说技术吧，我认为这些有价值。最后再写写吐槽。\n\n## 2017 年当时的计划\n\n### 买键盘\n\n嗯，一把也没买。这回没得说了。\n\n2017年计划就这些。\n\n## 说说技术\n\n### 公司前端工程化\n\n真的太想说，太有感受。一个团队从手工作坊终于提升到了工程化，开始可以压缩代码，按 ES6 来书写了。还完成了 jsp 的页面的压缩，现在感觉真的不一样了。\n\n### 公司技术升级\n\n项目全力支撑移动端，逐步摒弃了 `jQuery`，引入了 `Vue`。虽然我更倾向 `React`，但是团队需要更快上手的技术。\n\n### 更多的学习 webpack\n\n我认为应该叫做学习，虽然是在自己研究项目架构。主要是 MPA 多页面方向上。涉及了源码编译，环境配置等，目前还在非常缓慢进行中。\n\n## 学习过程\n\n### 更多的学习\n\n争取每天都阅读一些新的知识，订阅了一些网站博客，学到了很多的知识和思路，还有一些很有趣的东西。有一些比较好的内容，已经放到 [收藏集](http://collection.yukapril.com) 中了。\n\n### linux 学习\n\n特意买了一个 vutlr VPS 服务器，自己争取做些东西，好好用用。比如 [收藏集](http://collection.yukapril.com)，就是放在这台服务器上。\n\n> 收藏集的实现\n>\n> 简单说来，直接用 jekyll 写文章，发布到 github 上面。通过 webhook 钩子，每次 push 会自动推送到服务器上面。\n> \n> 服务器直接用 nodejs 起了服务器，内容就是拉取 github 代码，之后编译，最后放到指定目录。该目录 nginx 为静态进行部署。\n\n年底时候，再次把老的笔记本安装上 Ubuntu，逐步去适应和使用它。有时候，感觉 linux 还是非常便利的。\n\n> 驱动除外，下载功能除外\n\n## 其他方面\n\n### 支持同行\n\n嗯。是这样的。\n\n包括买书，买各个网站的课堂 / 分享 / live 等。还有知识星球等付费学习网站。除了买书，还有个别内容还是很不错的，其他的都很水...算作支持同行吧。\n\n过节期间，计划支持下掘金小书，同行得互相捧～\n\n## 2018 年计划\n\n继续保持学习的尽头，不能落伍。计划方向也比较广：\n\n* 保持 `webpack` 学习，这个太复杂了，经常要学习深入，而且还要出了 4.0 版，其实我是期望它不升级，全靠手配置挺好的\n* 把买的 `Vue` 书籍看完。嗯，还有两本不到，需要加油。期望圈子里面不要有人再出书了，忙的看不过来\n* 好好学用 linux，未来要取代 windows\n* 保持关注 `React`，在自己可能的项目上，着手开始用用试试\n* 多用 `lodash`，挺好的一个库自己总是不用\n* 去了解一些动画类的知识，比如学习 `PixiJS`\n* 关注 IOT，主要是提前学习一些 GPIO 的知识，为 2019 到来的树莓派 4 做准备\n* 有机会的话，了解 `golang`，还有 `RxJS`\n* 如果不忙，多玩一会 codewars ... 看样子实现不了。每年都是过节前后能有几天时间在上面放松...\n\n多写一点东西，虽然可能只能嘴上说说：\n\n* 写写技术博客，目前还有几个非常小课题可以写\n* 想写一点迷你 js 库，比如数组扩展等\n\n总之，保持一颗好奇的心，去把玩～至于键盘，可能还会搁置，用了笔记本，独立键盘利用率太低。\n\n## 吐槽\n\n本想玩玩树莓派，考量了很久，最后还是轻言放弃了。这玩意的系统不就是我的 linux 笔记本么...估计我也不会用 GPIO 做些什么。同样的，js 语言的 RUFF 也一样不想买了。\n\n这一年没烧键盘，尤其是迷你啦，忍住了。用了笔记本后，觉得公司的 IKBC F108 还凑合。要不真的觉得 F108 挺烂的，再也不想买 IKBC 了。\n\n但是呢，又觉得 POKER 系列不错，主要是因为可以编程吧。或许能有用。但是键盘小，可能自己真不习惯。还是大众的迷你啦感觉通俗～\n","source":"_posts/2018/2018-02-14-summary.md","raw":"---\nlayout: post\ntitle: \"这一年——2017年的小结\"\ndate: 2018-02-14 23:13:00 GMT+0800\ncategories: [随笔]\ntags:  []\n---\n\n看着很多人都在写总结，感觉自己不写一点，很落伍。\n\n<!-- more -->\n\n在一个多月前，我还翻看到了 2016 年的总结，几张色彩斑斓的卡片，讲述着一年中的感受。当时还在想着 2017 年卡片是什么样子。\n\n2017 年发生的事情太多，自己也懒了。\n\n还是多说说技术吧，我认为这些有价值。最后再写写吐槽。\n\n## 2017 年当时的计划\n\n### 买键盘\n\n嗯，一把也没买。这回没得说了。\n\n2017年计划就这些。\n\n## 说说技术\n\n### 公司前端工程化\n\n真的太想说，太有感受。一个团队从手工作坊终于提升到了工程化，开始可以压缩代码，按 ES6 来书写了。还完成了 jsp 的页面的压缩，现在感觉真的不一样了。\n\n### 公司技术升级\n\n项目全力支撑移动端，逐步摒弃了 `jQuery`，引入了 `Vue`。虽然我更倾向 `React`，但是团队需要更快上手的技术。\n\n### 更多的学习 webpack\n\n我认为应该叫做学习，虽然是在自己研究项目架构。主要是 MPA 多页面方向上。涉及了源码编译，环境配置等，目前还在非常缓慢进行中。\n\n## 学习过程\n\n### 更多的学习\n\n争取每天都阅读一些新的知识，订阅了一些网站博客，学到了很多的知识和思路，还有一些很有趣的东西。有一些比较好的内容，已经放到 [收藏集](http://collection.yukapril.com) 中了。\n\n### linux 学习\n\n特意买了一个 vutlr VPS 服务器，自己争取做些东西，好好用用。比如 [收藏集](http://collection.yukapril.com)，就是放在这台服务器上。\n\n> 收藏集的实现\n>\n> 简单说来，直接用 jekyll 写文章，发布到 github 上面。通过 webhook 钩子，每次 push 会自动推送到服务器上面。\n> \n> 服务器直接用 nodejs 起了服务器，内容就是拉取 github 代码，之后编译，最后放到指定目录。该目录 nginx 为静态进行部署。\n\n年底时候，再次把老的笔记本安装上 Ubuntu，逐步去适应和使用它。有时候，感觉 linux 还是非常便利的。\n\n> 驱动除外，下载功能除外\n\n## 其他方面\n\n### 支持同行\n\n嗯。是这样的。\n\n包括买书，买各个网站的课堂 / 分享 / live 等。还有知识星球等付费学习网站。除了买书，还有个别内容还是很不错的，其他的都很水...算作支持同行吧。\n\n过节期间，计划支持下掘金小书，同行得互相捧～\n\n## 2018 年计划\n\n继续保持学习的尽头，不能落伍。计划方向也比较广：\n\n* 保持 `webpack` 学习，这个太复杂了，经常要学习深入，而且还要出了 4.0 版，其实我是期望它不升级，全靠手配置挺好的\n* 把买的 `Vue` 书籍看完。嗯，还有两本不到，需要加油。期望圈子里面不要有人再出书了，忙的看不过来\n* 好好学用 linux，未来要取代 windows\n* 保持关注 `React`，在自己可能的项目上，着手开始用用试试\n* 多用 `lodash`，挺好的一个库自己总是不用\n* 去了解一些动画类的知识，比如学习 `PixiJS`\n* 关注 IOT，主要是提前学习一些 GPIO 的知识，为 2019 到来的树莓派 4 做准备\n* 有机会的话，了解 `golang`，还有 `RxJS`\n* 如果不忙，多玩一会 codewars ... 看样子实现不了。每年都是过节前后能有几天时间在上面放松...\n\n多写一点东西，虽然可能只能嘴上说说：\n\n* 写写技术博客，目前还有几个非常小课题可以写\n* 想写一点迷你 js 库，比如数组扩展等\n\n总之，保持一颗好奇的心，去把玩～至于键盘，可能还会搁置，用了笔记本，独立键盘利用率太低。\n\n## 吐槽\n\n本想玩玩树莓派，考量了很久，最后还是轻言放弃了。这玩意的系统不就是我的 linux 笔记本么...估计我也不会用 GPIO 做些什么。同样的，js 语言的 RUFF 也一样不想买了。\n\n这一年没烧键盘，尤其是迷你啦，忍住了。用了笔记本后，觉得公司的 IKBC F108 还凑合。要不真的觉得 F108 挺烂的，再也不想买 IKBC 了。\n\n但是呢，又觉得 POKER 系列不错，主要是因为可以编程吧。或许能有用。但是键盘小，可能自己真不习惯。还是大众的迷你啦感觉通俗～\n","slug":"2018-2018-02-14-summary","published":1,"updated":"2020-03-02T07:16:34.684Z","comments":1,"photos":[],"link":"","_id":"cka5ik8c7004bnybgvnvzd9bf","content":"<p>看着很多人都在写总结，感觉自己不写一点，很落伍。</p>\n<a id=\"more\"></a>\n\n<p>在一个多月前，我还翻看到了 2016 年的总结，几张色彩斑斓的卡片，讲述着一年中的感受。当时还在想着 2017 年卡片是什么样子。</p>\n<p>2017 年发生的事情太多，自己也懒了。</p>\n<p>还是多说说技术吧，我认为这些有价值。最后再写写吐槽。</p>\n<h2 id=\"2017-年当时的计划\"><a href=\"#2017-年当时的计划\" class=\"headerlink\" title=\"2017 年当时的计划\"></a>2017 年当时的计划</h2><h3 id=\"买键盘\"><a href=\"#买键盘\" class=\"headerlink\" title=\"买键盘\"></a>买键盘</h3><p>嗯，一把也没买。这回没得说了。</p>\n<p>2017年计划就这些。</p>\n<h2 id=\"说说技术\"><a href=\"#说说技术\" class=\"headerlink\" title=\"说说技术\"></a>说说技术</h2><h3 id=\"公司前端工程化\"><a href=\"#公司前端工程化\" class=\"headerlink\" title=\"公司前端工程化\"></a>公司前端工程化</h3><p>真的太想说，太有感受。一个团队从手工作坊终于提升到了工程化，开始可以压缩代码，按 ES6 来书写了。还完成了 jsp 的页面的压缩，现在感觉真的不一样了。</p>\n<h3 id=\"公司技术升级\"><a href=\"#公司技术升级\" class=\"headerlink\" title=\"公司技术升级\"></a>公司技术升级</h3><p>项目全力支撑移动端，逐步摒弃了 <code>jQuery</code>，引入了 <code>Vue</code>。虽然我更倾向 <code>React</code>，但是团队需要更快上手的技术。</p>\n<h3 id=\"更多的学习-webpack\"><a href=\"#更多的学习-webpack\" class=\"headerlink\" title=\"更多的学习 webpack\"></a>更多的学习 webpack</h3><p>我认为应该叫做学习，虽然是在自己研究项目架构。主要是 MPA 多页面方向上。涉及了源码编译，环境配置等，目前还在非常缓慢进行中。</p>\n<h2 id=\"学习过程\"><a href=\"#学习过程\" class=\"headerlink\" title=\"学习过程\"></a>学习过程</h2><h3 id=\"更多的学习\"><a href=\"#更多的学习\" class=\"headerlink\" title=\"更多的学习\"></a>更多的学习</h3><p>争取每天都阅读一些新的知识，订阅了一些网站博客，学到了很多的知识和思路，还有一些很有趣的东西。有一些比较好的内容，已经放到 <a href=\"http://collection.yukapril.com\" target=\"_blank\" rel=\"noopener\">收藏集</a> 中了。</p>\n<h3 id=\"linux-学习\"><a href=\"#linux-学习\" class=\"headerlink\" title=\"linux 学习\"></a>linux 学习</h3><p>特意买了一个 vutlr VPS 服务器，自己争取做些东西，好好用用。比如 <a href=\"http://collection.yukapril.com\" target=\"_blank\" rel=\"noopener\">收藏集</a>，就是放在这台服务器上。</p>\n<blockquote>\n<p>收藏集的实现</p>\n<p>简单说来，直接用 jekyll 写文章，发布到 github 上面。通过 webhook 钩子，每次 push 会自动推送到服务器上面。</p>\n<p>服务器直接用 nodejs 起了服务器，内容就是拉取 github 代码，之后编译，最后放到指定目录。该目录 nginx 为静态进行部署。</p>\n</blockquote>\n<p>年底时候，再次把老的笔记本安装上 Ubuntu，逐步去适应和使用它。有时候，感觉 linux 还是非常便利的。</p>\n<blockquote>\n<p>驱动除外，下载功能除外</p>\n</blockquote>\n<h2 id=\"其他方面\"><a href=\"#其他方面\" class=\"headerlink\" title=\"其他方面\"></a>其他方面</h2><h3 id=\"支持同行\"><a href=\"#支持同行\" class=\"headerlink\" title=\"支持同行\"></a>支持同行</h3><p>嗯。是这样的。</p>\n<p>包括买书，买各个网站的课堂 / 分享 / live 等。还有知识星球等付费学习网站。除了买书，还有个别内容还是很不错的，其他的都很水…算作支持同行吧。</p>\n<p>过节期间，计划支持下掘金小书，同行得互相捧～</p>\n<h2 id=\"2018-年计划\"><a href=\"#2018-年计划\" class=\"headerlink\" title=\"2018 年计划\"></a>2018 年计划</h2><p>继续保持学习的尽头，不能落伍。计划方向也比较广：</p>\n<ul>\n<li>保持 <code>webpack</code> 学习，这个太复杂了，经常要学习深入，而且还要出了 4.0 版，其实我是期望它不升级，全靠手配置挺好的</li>\n<li>把买的 <code>Vue</code> 书籍看完。嗯，还有两本不到，需要加油。期望圈子里面不要有人再出书了，忙的看不过来</li>\n<li>好好学用 linux，未来要取代 windows</li>\n<li>保持关注 <code>React</code>，在自己可能的项目上，着手开始用用试试</li>\n<li>多用 <code>lodash</code>，挺好的一个库自己总是不用</li>\n<li>去了解一些动画类的知识，比如学习 <code>PixiJS</code></li>\n<li>关注 IOT，主要是提前学习一些 GPIO 的知识，为 2019 到来的树莓派 4 做准备</li>\n<li>有机会的话，了解 <code>golang</code>，还有 <code>RxJS</code></li>\n<li>如果不忙，多玩一会 codewars … 看样子实现不了。每年都是过节前后能有几天时间在上面放松…</li>\n</ul>\n<p>多写一点东西，虽然可能只能嘴上说说：</p>\n<ul>\n<li>写写技术博客，目前还有几个非常小课题可以写</li>\n<li>想写一点迷你 js 库，比如数组扩展等</li>\n</ul>\n<p>总之，保持一颗好奇的心，去把玩～至于键盘，可能还会搁置，用了笔记本，独立键盘利用率太低。</p>\n<h2 id=\"吐槽\"><a href=\"#吐槽\" class=\"headerlink\" title=\"吐槽\"></a>吐槽</h2><p>本想玩玩树莓派，考量了很久，最后还是轻言放弃了。这玩意的系统不就是我的 linux 笔记本么…估计我也不会用 GPIO 做些什么。同样的，js 语言的 RUFF 也一样不想买了。</p>\n<p>这一年没烧键盘，尤其是迷你啦，忍住了。用了笔记本后，觉得公司的 IKBC F108 还凑合。要不真的觉得 F108 挺烂的，再也不想买 IKBC 了。</p>\n<p>但是呢，又觉得 POKER 系列不错，主要是因为可以编程吧。或许能有用。但是键盘小，可能自己真不习惯。还是大众的迷你啦感觉通俗～</p>\n","site":{"data":{}},"excerpt":"<p>看着很多人都在写总结，感觉自己不写一点，很落伍。</p>","more":"<p>在一个多月前，我还翻看到了 2016 年的总结，几张色彩斑斓的卡片，讲述着一年中的感受。当时还在想着 2017 年卡片是什么样子。</p>\n<p>2017 年发生的事情太多，自己也懒了。</p>\n<p>还是多说说技术吧，我认为这些有价值。最后再写写吐槽。</p>\n<h2 id=\"2017-年当时的计划\"><a href=\"#2017-年当时的计划\" class=\"headerlink\" title=\"2017 年当时的计划\"></a>2017 年当时的计划</h2><h3 id=\"买键盘\"><a href=\"#买键盘\" class=\"headerlink\" title=\"买键盘\"></a>买键盘</h3><p>嗯，一把也没买。这回没得说了。</p>\n<p>2017年计划就这些。</p>\n<h2 id=\"说说技术\"><a href=\"#说说技术\" class=\"headerlink\" title=\"说说技术\"></a>说说技术</h2><h3 id=\"公司前端工程化\"><a href=\"#公司前端工程化\" class=\"headerlink\" title=\"公司前端工程化\"></a>公司前端工程化</h3><p>真的太想说，太有感受。一个团队从手工作坊终于提升到了工程化，开始可以压缩代码，按 ES6 来书写了。还完成了 jsp 的页面的压缩，现在感觉真的不一样了。</p>\n<h3 id=\"公司技术升级\"><a href=\"#公司技术升级\" class=\"headerlink\" title=\"公司技术升级\"></a>公司技术升级</h3><p>项目全力支撑移动端，逐步摒弃了 <code>jQuery</code>，引入了 <code>Vue</code>。虽然我更倾向 <code>React</code>，但是团队需要更快上手的技术。</p>\n<h3 id=\"更多的学习-webpack\"><a href=\"#更多的学习-webpack\" class=\"headerlink\" title=\"更多的学习 webpack\"></a>更多的学习 webpack</h3><p>我认为应该叫做学习，虽然是在自己研究项目架构。主要是 MPA 多页面方向上。涉及了源码编译，环境配置等，目前还在非常缓慢进行中。</p>\n<h2 id=\"学习过程\"><a href=\"#学习过程\" class=\"headerlink\" title=\"学习过程\"></a>学习过程</h2><h3 id=\"更多的学习\"><a href=\"#更多的学习\" class=\"headerlink\" title=\"更多的学习\"></a>更多的学习</h3><p>争取每天都阅读一些新的知识，订阅了一些网站博客，学到了很多的知识和思路，还有一些很有趣的东西。有一些比较好的内容，已经放到 <a href=\"http://collection.yukapril.com\" target=\"_blank\" rel=\"noopener\">收藏集</a> 中了。</p>\n<h3 id=\"linux-学习\"><a href=\"#linux-学习\" class=\"headerlink\" title=\"linux 学习\"></a>linux 学习</h3><p>特意买了一个 vutlr VPS 服务器，自己争取做些东西，好好用用。比如 <a href=\"http://collection.yukapril.com\" target=\"_blank\" rel=\"noopener\">收藏集</a>，就是放在这台服务器上。</p>\n<blockquote>\n<p>收藏集的实现</p>\n<p>简单说来，直接用 jekyll 写文章，发布到 github 上面。通过 webhook 钩子，每次 push 会自动推送到服务器上面。</p>\n<p>服务器直接用 nodejs 起了服务器，内容就是拉取 github 代码，之后编译，最后放到指定目录。该目录 nginx 为静态进行部署。</p>\n</blockquote>\n<p>年底时候，再次把老的笔记本安装上 Ubuntu，逐步去适应和使用它。有时候，感觉 linux 还是非常便利的。</p>\n<blockquote>\n<p>驱动除外，下载功能除外</p>\n</blockquote>\n<h2 id=\"其他方面\"><a href=\"#其他方面\" class=\"headerlink\" title=\"其他方面\"></a>其他方面</h2><h3 id=\"支持同行\"><a href=\"#支持同行\" class=\"headerlink\" title=\"支持同行\"></a>支持同行</h3><p>嗯。是这样的。</p>\n<p>包括买书，买各个网站的课堂 / 分享 / live 等。还有知识星球等付费学习网站。除了买书，还有个别内容还是很不错的，其他的都很水…算作支持同行吧。</p>\n<p>过节期间，计划支持下掘金小书，同行得互相捧～</p>\n<h2 id=\"2018-年计划\"><a href=\"#2018-年计划\" class=\"headerlink\" title=\"2018 年计划\"></a>2018 年计划</h2><p>继续保持学习的尽头，不能落伍。计划方向也比较广：</p>\n<ul>\n<li>保持 <code>webpack</code> 学习，这个太复杂了，经常要学习深入，而且还要出了 4.0 版，其实我是期望它不升级，全靠手配置挺好的</li>\n<li>把买的 <code>Vue</code> 书籍看完。嗯，还有两本不到，需要加油。期望圈子里面不要有人再出书了，忙的看不过来</li>\n<li>好好学用 linux，未来要取代 windows</li>\n<li>保持关注 <code>React</code>，在自己可能的项目上，着手开始用用试试</li>\n<li>多用 <code>lodash</code>，挺好的一个库自己总是不用</li>\n<li>去了解一些动画类的知识，比如学习 <code>PixiJS</code></li>\n<li>关注 IOT，主要是提前学习一些 GPIO 的知识，为 2019 到来的树莓派 4 做准备</li>\n<li>有机会的话，了解 <code>golang</code>，还有 <code>RxJS</code></li>\n<li>如果不忙，多玩一会 codewars … 看样子实现不了。每年都是过节前后能有几天时间在上面放松…</li>\n</ul>\n<p>多写一点东西，虽然可能只能嘴上说说：</p>\n<ul>\n<li>写写技术博客，目前还有几个非常小课题可以写</li>\n<li>想写一点迷你 js 库，比如数组扩展等</li>\n</ul>\n<p>总之，保持一颗好奇的心，去把玩～至于键盘，可能还会搁置，用了笔记本，独立键盘利用率太低。</p>\n<h2 id=\"吐槽\"><a href=\"#吐槽\" class=\"headerlink\" title=\"吐槽\"></a>吐槽</h2><p>本想玩玩树莓派，考量了很久，最后还是轻言放弃了。这玩意的系统不就是我的 linux 笔记本么…估计我也不会用 GPIO 做些什么。同样的，js 语言的 RUFF 也一样不想买了。</p>\n<p>这一年没烧键盘，尤其是迷你啦，忍住了。用了笔记本后，觉得公司的 IKBC F108 还凑合。要不真的觉得 F108 挺烂的，再也不想买 IKBC 了。</p>\n<p>但是呢，又觉得 POKER 系列不错，主要是因为可以编程吧。或许能有用。但是键盘小，可能自己真不习惯。还是大众的迷你啦感觉通俗～</p>"},{"layout":"post","title":"对象存储 入门","date":"2018-03-24T23:26:00.000Z","_content":"\n上一次写了一些 cdn 的使用心得，这次继续。我觉得，为了省钱，或者能找个免费的静态空间，有必要补充写一篇「对象存储」的文章。\n\n这次主要是文字说明，不会图文并茂的具体讲如何配置对象存储，只会说原因，以及大致配置注意点。\n\n<!-- more -->\n\n## 什么是对象存储\n\n这次不引用别人的说法。我自己说说理解。\n\n对象存储就是服务商提供的网络存储空间，可以简单理解为 FTP 空间。\n\n但它同时提供加密访问，可以保证你公司的私有文件，外人不能直接访问到。这就是第一种用法，加密访问。\n\n此外，还有一种用法。随着技术发展，基本上每家服务商都提供静态文件托管功能，就是你直接上传静态页面，稍作配置，就可以变成静态服务器，外网就可以访问了。当然，你如果不想手动上传，可以使用回源功能，当访问的资源找不到，会自动回源到你的服务器进行抓取。\n\n但是对象存储是固定服务器位置，比如在青岛。虽然速度还可以，但是想要各个地区都实现极速访问，还是得和 cdn 联系起来。\n\n## 各个平台的说明\n\n和 cdn 差不多，各个平台功能上差异不大。目前我发现七牛只能给一个测试用的域名（各种限制），其他的服务商都会给他们自己提供的域名。七牛只能配合 cdn 来配置自己的域名。\n\n费用上，对象存储主要收取存储费，按空间计算。同时还有流量费，请求次数费。如果配置了回源，那么还有回源费。反正计算点很多。阿里云对象存储还要区分服务器位置，不同位置要购买不同套餐（流量包等）。\n\n由于曾经的无知，给同事带去过小的灾难，所以关于费用上，我不多说了，请自行研究斟酌。\n\n## 如何搭配使用\n\n或许你开始糊涂了，没关系，这里确实很烦人。我把常见的想法列举下，讨论他们的特点。嗯，有的方案不是不行，是不好。\n\n我们以架设一个静态网站为目的，实际考虑下。\n\n### 方案一：自己不准备服务器，直接把静态网站放到对象存储上，让用户绑定域名访问？\n\n这样最省钱，直接上传静态网站到对象存储上，配上自己的域名，OK 了。\n\n**优点：**非常省钱。\n\n**缺点：**修改网站需要重新上传，各地访问速度一般。\n\n### 方案二：自己不准备服务器，直接把静态网站放到对象存储上，再配合 cdn 加速访问？\n\n比上面的方案多花一点钱，但是速度问题解决了。不过要考虑刷新 cdn 缓存问题。\n\n**优点：**比较省钱，访问速度快。\n\n**缺点：**修改网站需要重新上传，cdn 缓存处理。\n\n\n### 方案三：自己准备服务器，直接配合 cdn 加速访问？\n\n自己有独立服务器，开销大一些了。直接配上了 cdn，成本再次提升。当然访问速度非常快了。每次更新静态网站，也需要考虑刷新 cdn 缓存。\n\n**优点：**成本最高，访问速度快。自己通过脚本等方式上传管理好自己的服务器，不用每次去服务商那里上传。\n\n**缺点：**这是最贵的方案，还需要 cdn 缓存处理。\n\n### 方案四：自己准备服务器，配置对象存储（回源到自己服务器），再配置 cdn（回源到对象存储），加速访问？\n\n这个方案比起上一个，中途还绕路对象存储了，太麻烦了。但为什么有这么复杂的方案呢？这必须和速度以及价格联系着说。\n\n简单说来，方案三，cdn 默认配置的缓存失效后，会自动回源访问。这个费用较高。而且速度慢。\n\n但如果让 cdn 访问服务商对象存储服务，价格较低。速度快。\n\n假设你的服务器在北京，非常烂，每个资源需要 0.1 秒。国内 cdn 有 100 个节点，缓存为1天。假设一周内，所有文件不做任何修改。\n\n那么方案三，一周回源你服务器次数：100 * 7 = 700 次。全国 100 个节点，都访问你的破服务器，每次 0.1 秒，700 次，70 秒浪费了。\n\n换成方案四：你服务器在北京，你购买对象存储一定也选择北京。一周回源对象存储次数：100 * 7 = 700 次。对象存储回源你的服务器，只需要 1 次，浪费了 0.1 秒。由于对象存储在北京是非常好的机房，速度快。全国 100 个节点回源北京的对象存储服务器，需要浪费 700 * 0.01 = 7 秒。\n\n一个是 70 秒，一个是 7.1 秒。不言而喻。\n\n而且对象存储回源服务器只需要 1 次，所以只需要考虑 cdn 回源到对象存储的费用。这个费用略低于 cdn 回源你的服务器费用。虽然对象存储有存储费等额外费用，但是这套方案仍有价格优势。\n\n## 如何选定方案\n\n上面的四个方案，都是可行的，但各有利弊。\n\n| # | 自己准备服务器 | 对象存储维护 | cdn 额外维护 | 费用 |\n|--|--|--|--|--|\n| 方案一 | X | √ | X | 低 |\n| 方案二 | X | √ | √ | 一般 |\n| 方案三 | √ | X | √ | 最高 |\n| 方案四 | √ | √ | √ | 比较高 |\n\n* 如果速度要求不高，不用选择 cdn。对象存储速度也还好。\n* 如果希望网站走 https，那么必须用 cdn，cdn 可以起到代理作用。\n* 自己是否假设服务器，主要看网站。比如你是 PHP 网站，但是可以静态化啊，所以如果你希望自己手动静态化，可以直接把静态网站放到对象存储上面。否则就用对象存储回源。\n\n## 如何进行配置\n\n这个配置没那么复杂，简单说说就好。\n\n存储类型：默认选择标准存储就好。低频存储和归档存储主要是给公司业务加密访问备档使用的。\n\n读写权限：公共读（私有写）。就是说读取不要权限，写入需要权限。\n\n静态页面 / 默认首页设置：需要开启。\n\n回源设置：配置好你的源服务器。同时还支持 CORS 跨站处理。\n","source":"_posts/2018/2018-03-24-bucket.md","raw":"---\nlayout: post\ntitle: \"对象存储 入门\"\ndate: 2018-03-24 23:26:00 GMT+0800\ncategories: [前端]\ntags:  [cdn, 对象存储, COS, OSS]\n---\n\n上一次写了一些 cdn 的使用心得，这次继续。我觉得，为了省钱，或者能找个免费的静态空间，有必要补充写一篇「对象存储」的文章。\n\n这次主要是文字说明，不会图文并茂的具体讲如何配置对象存储，只会说原因，以及大致配置注意点。\n\n<!-- more -->\n\n## 什么是对象存储\n\n这次不引用别人的说法。我自己说说理解。\n\n对象存储就是服务商提供的网络存储空间，可以简单理解为 FTP 空间。\n\n但它同时提供加密访问，可以保证你公司的私有文件，外人不能直接访问到。这就是第一种用法，加密访问。\n\n此外，还有一种用法。随着技术发展，基本上每家服务商都提供静态文件托管功能，就是你直接上传静态页面，稍作配置，就可以变成静态服务器，外网就可以访问了。当然，你如果不想手动上传，可以使用回源功能，当访问的资源找不到，会自动回源到你的服务器进行抓取。\n\n但是对象存储是固定服务器位置，比如在青岛。虽然速度还可以，但是想要各个地区都实现极速访问，还是得和 cdn 联系起来。\n\n## 各个平台的说明\n\n和 cdn 差不多，各个平台功能上差异不大。目前我发现七牛只能给一个测试用的域名（各种限制），其他的服务商都会给他们自己提供的域名。七牛只能配合 cdn 来配置自己的域名。\n\n费用上，对象存储主要收取存储费，按空间计算。同时还有流量费，请求次数费。如果配置了回源，那么还有回源费。反正计算点很多。阿里云对象存储还要区分服务器位置，不同位置要购买不同套餐（流量包等）。\n\n由于曾经的无知，给同事带去过小的灾难，所以关于费用上，我不多说了，请自行研究斟酌。\n\n## 如何搭配使用\n\n或许你开始糊涂了，没关系，这里确实很烦人。我把常见的想法列举下，讨论他们的特点。嗯，有的方案不是不行，是不好。\n\n我们以架设一个静态网站为目的，实际考虑下。\n\n### 方案一：自己不准备服务器，直接把静态网站放到对象存储上，让用户绑定域名访问？\n\n这样最省钱，直接上传静态网站到对象存储上，配上自己的域名，OK 了。\n\n**优点：**非常省钱。\n\n**缺点：**修改网站需要重新上传，各地访问速度一般。\n\n### 方案二：自己不准备服务器，直接把静态网站放到对象存储上，再配合 cdn 加速访问？\n\n比上面的方案多花一点钱，但是速度问题解决了。不过要考虑刷新 cdn 缓存问题。\n\n**优点：**比较省钱，访问速度快。\n\n**缺点：**修改网站需要重新上传，cdn 缓存处理。\n\n\n### 方案三：自己准备服务器，直接配合 cdn 加速访问？\n\n自己有独立服务器，开销大一些了。直接配上了 cdn，成本再次提升。当然访问速度非常快了。每次更新静态网站，也需要考虑刷新 cdn 缓存。\n\n**优点：**成本最高，访问速度快。自己通过脚本等方式上传管理好自己的服务器，不用每次去服务商那里上传。\n\n**缺点：**这是最贵的方案，还需要 cdn 缓存处理。\n\n### 方案四：自己准备服务器，配置对象存储（回源到自己服务器），再配置 cdn（回源到对象存储），加速访问？\n\n这个方案比起上一个，中途还绕路对象存储了，太麻烦了。但为什么有这么复杂的方案呢？这必须和速度以及价格联系着说。\n\n简单说来，方案三，cdn 默认配置的缓存失效后，会自动回源访问。这个费用较高。而且速度慢。\n\n但如果让 cdn 访问服务商对象存储服务，价格较低。速度快。\n\n假设你的服务器在北京，非常烂，每个资源需要 0.1 秒。国内 cdn 有 100 个节点，缓存为1天。假设一周内，所有文件不做任何修改。\n\n那么方案三，一周回源你服务器次数：100 * 7 = 700 次。全国 100 个节点，都访问你的破服务器，每次 0.1 秒，700 次，70 秒浪费了。\n\n换成方案四：你服务器在北京，你购买对象存储一定也选择北京。一周回源对象存储次数：100 * 7 = 700 次。对象存储回源你的服务器，只需要 1 次，浪费了 0.1 秒。由于对象存储在北京是非常好的机房，速度快。全国 100 个节点回源北京的对象存储服务器，需要浪费 700 * 0.01 = 7 秒。\n\n一个是 70 秒，一个是 7.1 秒。不言而喻。\n\n而且对象存储回源服务器只需要 1 次，所以只需要考虑 cdn 回源到对象存储的费用。这个费用略低于 cdn 回源你的服务器费用。虽然对象存储有存储费等额外费用，但是这套方案仍有价格优势。\n\n## 如何选定方案\n\n上面的四个方案，都是可行的，但各有利弊。\n\n| # | 自己准备服务器 | 对象存储维护 | cdn 额外维护 | 费用 |\n|--|--|--|--|--|\n| 方案一 | X | √ | X | 低 |\n| 方案二 | X | √ | √ | 一般 |\n| 方案三 | √ | X | √ | 最高 |\n| 方案四 | √ | √ | √ | 比较高 |\n\n* 如果速度要求不高，不用选择 cdn。对象存储速度也还好。\n* 如果希望网站走 https，那么必须用 cdn，cdn 可以起到代理作用。\n* 自己是否假设服务器，主要看网站。比如你是 PHP 网站，但是可以静态化啊，所以如果你希望自己手动静态化，可以直接把静态网站放到对象存储上面。否则就用对象存储回源。\n\n## 如何进行配置\n\n这个配置没那么复杂，简单说说就好。\n\n存储类型：默认选择标准存储就好。低频存储和归档存储主要是给公司业务加密访问备档使用的。\n\n读写权限：公共读（私有写）。就是说读取不要权限，写入需要权限。\n\n静态页面 / 默认首页设置：需要开启。\n\n回源设置：配置好你的源服务器。同时还支持 CORS 跨站处理。\n","slug":"2018-2018-03-24-bucket","published":1,"updated":"2020-03-02T07:16:34.684Z","comments":1,"photos":[],"link":"","_id":"cka5ik8c8004enybgiggqbb24","content":"<p>上一次写了一些 cdn 的使用心得，这次继续。我觉得，为了省钱，或者能找个免费的静态空间，有必要补充写一篇「对象存储」的文章。</p>\n<p>这次主要是文字说明，不会图文并茂的具体讲如何配置对象存储，只会说原因，以及大致配置注意点。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"什么是对象存储\"><a href=\"#什么是对象存储\" class=\"headerlink\" title=\"什么是对象存储\"></a>什么是对象存储</h2><p>这次不引用别人的说法。我自己说说理解。</p>\n<p>对象存储就是服务商提供的网络存储空间，可以简单理解为 FTP 空间。</p>\n<p>但它同时提供加密访问，可以保证你公司的私有文件，外人不能直接访问到。这就是第一种用法，加密访问。</p>\n<p>此外，还有一种用法。随着技术发展，基本上每家服务商都提供静态文件托管功能，就是你直接上传静态页面，稍作配置，就可以变成静态服务器，外网就可以访问了。当然，你如果不想手动上传，可以使用回源功能，当访问的资源找不到，会自动回源到你的服务器进行抓取。</p>\n<p>但是对象存储是固定服务器位置，比如在青岛。虽然速度还可以，但是想要各个地区都实现极速访问，还是得和 cdn 联系起来。</p>\n<h2 id=\"各个平台的说明\"><a href=\"#各个平台的说明\" class=\"headerlink\" title=\"各个平台的说明\"></a>各个平台的说明</h2><p>和 cdn 差不多，各个平台功能上差异不大。目前我发现七牛只能给一个测试用的域名（各种限制），其他的服务商都会给他们自己提供的域名。七牛只能配合 cdn 来配置自己的域名。</p>\n<p>费用上，对象存储主要收取存储费，按空间计算。同时还有流量费，请求次数费。如果配置了回源，那么还有回源费。反正计算点很多。阿里云对象存储还要区分服务器位置，不同位置要购买不同套餐（流量包等）。</p>\n<p>由于曾经的无知，给同事带去过小的灾难，所以关于费用上，我不多说了，请自行研究斟酌。</p>\n<h2 id=\"如何搭配使用\"><a href=\"#如何搭配使用\" class=\"headerlink\" title=\"如何搭配使用\"></a>如何搭配使用</h2><p>或许你开始糊涂了，没关系，这里确实很烦人。我把常见的想法列举下，讨论他们的特点。嗯，有的方案不是不行，是不好。</p>\n<p>我们以架设一个静态网站为目的，实际考虑下。</p>\n<h3 id=\"方案一：自己不准备服务器，直接把静态网站放到对象存储上，让用户绑定域名访问？\"><a href=\"#方案一：自己不准备服务器，直接把静态网站放到对象存储上，让用户绑定域名访问？\" class=\"headerlink\" title=\"方案一：自己不准备服务器，直接把静态网站放到对象存储上，让用户绑定域名访问？\"></a>方案一：自己不准备服务器，直接把静态网站放到对象存储上，让用户绑定域名访问？</h3><p>这样最省钱，直接上传静态网站到对象存储上，配上自己的域名，OK 了。</p>\n<p><strong>优点：</strong>非常省钱。</p>\n<p><strong>缺点：</strong>修改网站需要重新上传，各地访问速度一般。</p>\n<h3 id=\"方案二：自己不准备服务器，直接把静态网站放到对象存储上，再配合-cdn-加速访问？\"><a href=\"#方案二：自己不准备服务器，直接把静态网站放到对象存储上，再配合-cdn-加速访问？\" class=\"headerlink\" title=\"方案二：自己不准备服务器，直接把静态网站放到对象存储上，再配合 cdn 加速访问？\"></a>方案二：自己不准备服务器，直接把静态网站放到对象存储上，再配合 cdn 加速访问？</h3><p>比上面的方案多花一点钱，但是速度问题解决了。不过要考虑刷新 cdn 缓存问题。</p>\n<p><strong>优点：</strong>比较省钱，访问速度快。</p>\n<p><strong>缺点：</strong>修改网站需要重新上传，cdn 缓存处理。</p>\n<h3 id=\"方案三：自己准备服务器，直接配合-cdn-加速访问？\"><a href=\"#方案三：自己准备服务器，直接配合-cdn-加速访问？\" class=\"headerlink\" title=\"方案三：自己准备服务器，直接配合 cdn 加速访问？\"></a>方案三：自己准备服务器，直接配合 cdn 加速访问？</h3><p>自己有独立服务器，开销大一些了。直接配上了 cdn，成本再次提升。当然访问速度非常快了。每次更新静态网站，也需要考虑刷新 cdn 缓存。</p>\n<p><strong>优点：</strong>成本最高，访问速度快。自己通过脚本等方式上传管理好自己的服务器，不用每次去服务商那里上传。</p>\n<p><strong>缺点：</strong>这是最贵的方案，还需要 cdn 缓存处理。</p>\n<h3 id=\"方案四：自己准备服务器，配置对象存储（回源到自己服务器），再配置-cdn（回源到对象存储），加速访问？\"><a href=\"#方案四：自己准备服务器，配置对象存储（回源到自己服务器），再配置-cdn（回源到对象存储），加速访问？\" class=\"headerlink\" title=\"方案四：自己准备服务器，配置对象存储（回源到自己服务器），再配置 cdn（回源到对象存储），加速访问？\"></a>方案四：自己准备服务器，配置对象存储（回源到自己服务器），再配置 cdn（回源到对象存储），加速访问？</h3><p>这个方案比起上一个，中途还绕路对象存储了，太麻烦了。但为什么有这么复杂的方案呢？这必须和速度以及价格联系着说。</p>\n<p>简单说来，方案三，cdn 默认配置的缓存失效后，会自动回源访问。这个费用较高。而且速度慢。</p>\n<p>但如果让 cdn 访问服务商对象存储服务，价格较低。速度快。</p>\n<p>假设你的服务器在北京，非常烂，每个资源需要 0.1 秒。国内 cdn 有 100 个节点，缓存为1天。假设一周内，所有文件不做任何修改。</p>\n<p>那么方案三，一周回源你服务器次数：100 * 7 = 700 次。全国 100 个节点，都访问你的破服务器，每次 0.1 秒，700 次，70 秒浪费了。</p>\n<p>换成方案四：你服务器在北京，你购买对象存储一定也选择北京。一周回源对象存储次数：100 * 7 = 700 次。对象存储回源你的服务器，只需要 1 次，浪费了 0.1 秒。由于对象存储在北京是非常好的机房，速度快。全国 100 个节点回源北京的对象存储服务器，需要浪费 700 * 0.01 = 7 秒。</p>\n<p>一个是 70 秒，一个是 7.1 秒。不言而喻。</p>\n<p>而且对象存储回源服务器只需要 1 次，所以只需要考虑 cdn 回源到对象存储的费用。这个费用略低于 cdn 回源你的服务器费用。虽然对象存储有存储费等额外费用，但是这套方案仍有价格优势。</p>\n<h2 id=\"如何选定方案\"><a href=\"#如何选定方案\" class=\"headerlink\" title=\"如何选定方案\"></a>如何选定方案</h2><p>上面的四个方案，都是可行的，但各有利弊。</p>\n<table>\n<thead>\n<tr>\n<th>#</th>\n<th>自己准备服务器</th>\n<th>对象存储维护</th>\n<th>cdn 额外维护</th>\n<th>费用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>方案一</td>\n<td>X</td>\n<td>√</td>\n<td>X</td>\n<td>低</td>\n</tr>\n<tr>\n<td>方案二</td>\n<td>X</td>\n<td>√</td>\n<td>√</td>\n<td>一般</td>\n</tr>\n<tr>\n<td>方案三</td>\n<td>√</td>\n<td>X</td>\n<td>√</td>\n<td>最高</td>\n</tr>\n<tr>\n<td>方案四</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>比较高</td>\n</tr>\n</tbody></table>\n<ul>\n<li>如果速度要求不高，不用选择 cdn。对象存储速度也还好。</li>\n<li>如果希望网站走 https，那么必须用 cdn，cdn 可以起到代理作用。</li>\n<li>自己是否假设服务器，主要看网站。比如你是 PHP 网站，但是可以静态化啊，所以如果你希望自己手动静态化，可以直接把静态网站放到对象存储上面。否则就用对象存储回源。</li>\n</ul>\n<h2 id=\"如何进行配置\"><a href=\"#如何进行配置\" class=\"headerlink\" title=\"如何进行配置\"></a>如何进行配置</h2><p>这个配置没那么复杂，简单说说就好。</p>\n<p>存储类型：默认选择标准存储就好。低频存储和归档存储主要是给公司业务加密访问备档使用的。</p>\n<p>读写权限：公共读（私有写）。就是说读取不要权限，写入需要权限。</p>\n<p>静态页面 / 默认首页设置：需要开启。</p>\n<p>回源设置：配置好你的源服务器。同时还支持 CORS 跨站处理。</p>\n","site":{"data":{}},"excerpt":"<p>上一次写了一些 cdn 的使用心得，这次继续。我觉得，为了省钱，或者能找个免费的静态空间，有必要补充写一篇「对象存储」的文章。</p>\n<p>这次主要是文字说明，不会图文并茂的具体讲如何配置对象存储，只会说原因，以及大致配置注意点。</p>","more":"<h2 id=\"什么是对象存储\"><a href=\"#什么是对象存储\" class=\"headerlink\" title=\"什么是对象存储\"></a>什么是对象存储</h2><p>这次不引用别人的说法。我自己说说理解。</p>\n<p>对象存储就是服务商提供的网络存储空间，可以简单理解为 FTP 空间。</p>\n<p>但它同时提供加密访问，可以保证你公司的私有文件，外人不能直接访问到。这就是第一种用法，加密访问。</p>\n<p>此外，还有一种用法。随着技术发展，基本上每家服务商都提供静态文件托管功能，就是你直接上传静态页面，稍作配置，就可以变成静态服务器，外网就可以访问了。当然，你如果不想手动上传，可以使用回源功能，当访问的资源找不到，会自动回源到你的服务器进行抓取。</p>\n<p>但是对象存储是固定服务器位置，比如在青岛。虽然速度还可以，但是想要各个地区都实现极速访问，还是得和 cdn 联系起来。</p>\n<h2 id=\"各个平台的说明\"><a href=\"#各个平台的说明\" class=\"headerlink\" title=\"各个平台的说明\"></a>各个平台的说明</h2><p>和 cdn 差不多，各个平台功能上差异不大。目前我发现七牛只能给一个测试用的域名（各种限制），其他的服务商都会给他们自己提供的域名。七牛只能配合 cdn 来配置自己的域名。</p>\n<p>费用上，对象存储主要收取存储费，按空间计算。同时还有流量费，请求次数费。如果配置了回源，那么还有回源费。反正计算点很多。阿里云对象存储还要区分服务器位置，不同位置要购买不同套餐（流量包等）。</p>\n<p>由于曾经的无知，给同事带去过小的灾难，所以关于费用上，我不多说了，请自行研究斟酌。</p>\n<h2 id=\"如何搭配使用\"><a href=\"#如何搭配使用\" class=\"headerlink\" title=\"如何搭配使用\"></a>如何搭配使用</h2><p>或许你开始糊涂了，没关系，这里确实很烦人。我把常见的想法列举下，讨论他们的特点。嗯，有的方案不是不行，是不好。</p>\n<p>我们以架设一个静态网站为目的，实际考虑下。</p>\n<h3 id=\"方案一：自己不准备服务器，直接把静态网站放到对象存储上，让用户绑定域名访问？\"><a href=\"#方案一：自己不准备服务器，直接把静态网站放到对象存储上，让用户绑定域名访问？\" class=\"headerlink\" title=\"方案一：自己不准备服务器，直接把静态网站放到对象存储上，让用户绑定域名访问？\"></a>方案一：自己不准备服务器，直接把静态网站放到对象存储上，让用户绑定域名访问？</h3><p>这样最省钱，直接上传静态网站到对象存储上，配上自己的域名，OK 了。</p>\n<p><strong>优点：</strong>非常省钱。</p>\n<p><strong>缺点：</strong>修改网站需要重新上传，各地访问速度一般。</p>\n<h3 id=\"方案二：自己不准备服务器，直接把静态网站放到对象存储上，再配合-cdn-加速访问？\"><a href=\"#方案二：自己不准备服务器，直接把静态网站放到对象存储上，再配合-cdn-加速访问？\" class=\"headerlink\" title=\"方案二：自己不准备服务器，直接把静态网站放到对象存储上，再配合 cdn 加速访问？\"></a>方案二：自己不准备服务器，直接把静态网站放到对象存储上，再配合 cdn 加速访问？</h3><p>比上面的方案多花一点钱，但是速度问题解决了。不过要考虑刷新 cdn 缓存问题。</p>\n<p><strong>优点：</strong>比较省钱，访问速度快。</p>\n<p><strong>缺点：</strong>修改网站需要重新上传，cdn 缓存处理。</p>\n<h3 id=\"方案三：自己准备服务器，直接配合-cdn-加速访问？\"><a href=\"#方案三：自己准备服务器，直接配合-cdn-加速访问？\" class=\"headerlink\" title=\"方案三：自己准备服务器，直接配合 cdn 加速访问？\"></a>方案三：自己准备服务器，直接配合 cdn 加速访问？</h3><p>自己有独立服务器，开销大一些了。直接配上了 cdn，成本再次提升。当然访问速度非常快了。每次更新静态网站，也需要考虑刷新 cdn 缓存。</p>\n<p><strong>优点：</strong>成本最高，访问速度快。自己通过脚本等方式上传管理好自己的服务器，不用每次去服务商那里上传。</p>\n<p><strong>缺点：</strong>这是最贵的方案，还需要 cdn 缓存处理。</p>\n<h3 id=\"方案四：自己准备服务器，配置对象存储（回源到自己服务器），再配置-cdn（回源到对象存储），加速访问？\"><a href=\"#方案四：自己准备服务器，配置对象存储（回源到自己服务器），再配置-cdn（回源到对象存储），加速访问？\" class=\"headerlink\" title=\"方案四：自己准备服务器，配置对象存储（回源到自己服务器），再配置 cdn（回源到对象存储），加速访问？\"></a>方案四：自己准备服务器，配置对象存储（回源到自己服务器），再配置 cdn（回源到对象存储），加速访问？</h3><p>这个方案比起上一个，中途还绕路对象存储了，太麻烦了。但为什么有这么复杂的方案呢？这必须和速度以及价格联系着说。</p>\n<p>简单说来，方案三，cdn 默认配置的缓存失效后，会自动回源访问。这个费用较高。而且速度慢。</p>\n<p>但如果让 cdn 访问服务商对象存储服务，价格较低。速度快。</p>\n<p>假设你的服务器在北京，非常烂，每个资源需要 0.1 秒。国内 cdn 有 100 个节点，缓存为1天。假设一周内，所有文件不做任何修改。</p>\n<p>那么方案三，一周回源你服务器次数：100 * 7 = 700 次。全国 100 个节点，都访问你的破服务器，每次 0.1 秒，700 次，70 秒浪费了。</p>\n<p>换成方案四：你服务器在北京，你购买对象存储一定也选择北京。一周回源对象存储次数：100 * 7 = 700 次。对象存储回源你的服务器，只需要 1 次，浪费了 0.1 秒。由于对象存储在北京是非常好的机房，速度快。全国 100 个节点回源北京的对象存储服务器，需要浪费 700 * 0.01 = 7 秒。</p>\n<p>一个是 70 秒，一个是 7.1 秒。不言而喻。</p>\n<p>而且对象存储回源服务器只需要 1 次，所以只需要考虑 cdn 回源到对象存储的费用。这个费用略低于 cdn 回源你的服务器费用。虽然对象存储有存储费等额外费用，但是这套方案仍有价格优势。</p>\n<h2 id=\"如何选定方案\"><a href=\"#如何选定方案\" class=\"headerlink\" title=\"如何选定方案\"></a>如何选定方案</h2><p>上面的四个方案，都是可行的，但各有利弊。</p>\n<table>\n<thead>\n<tr>\n<th>#</th>\n<th>自己准备服务器</th>\n<th>对象存储维护</th>\n<th>cdn 额外维护</th>\n<th>费用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>方案一</td>\n<td>X</td>\n<td>√</td>\n<td>X</td>\n<td>低</td>\n</tr>\n<tr>\n<td>方案二</td>\n<td>X</td>\n<td>√</td>\n<td>√</td>\n<td>一般</td>\n</tr>\n<tr>\n<td>方案三</td>\n<td>√</td>\n<td>X</td>\n<td>√</td>\n<td>最高</td>\n</tr>\n<tr>\n<td>方案四</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>比较高</td>\n</tr>\n</tbody></table>\n<ul>\n<li>如果速度要求不高，不用选择 cdn。对象存储速度也还好。</li>\n<li>如果希望网站走 https，那么必须用 cdn，cdn 可以起到代理作用。</li>\n<li>自己是否假设服务器，主要看网站。比如你是 PHP 网站，但是可以静态化啊，所以如果你希望自己手动静态化，可以直接把静态网站放到对象存储上面。否则就用对象存储回源。</li>\n</ul>\n<h2 id=\"如何进行配置\"><a href=\"#如何进行配置\" class=\"headerlink\" title=\"如何进行配置\"></a>如何进行配置</h2><p>这个配置没那么复杂，简单说说就好。</p>\n<p>存储类型：默认选择标准存储就好。低频存储和归档存储主要是给公司业务加密访问备档使用的。</p>\n<p>读写权限：公共读（私有写）。就是说读取不要权限，写入需要权限。</p>\n<p>静态页面 / 默认首页设置：需要开启。</p>\n<p>回源设置：配置好你的源服务器。同时还支持 CORS 跨站处理。</p>"},{"layout":"post","title":"JS 自定义事件","date":"2018-03-27T00:21:00.000Z","_content":"\n今天在写代码时候，遇到两个组件关联的情况，最终通过 js 自定义事件进行了解决。\n\n<!-- more -->\n\n## 场景简单复现\n\n当时的情况比较复杂。大致是使用Vue-elementUI封装了input组件，自己封装了表单元素读取与写入组件。input 组件有相应验证功能，如果是用户输入，那么没有任何问题。如果是通过自己封装的表单操作组件，直接写入input 的 value，那么没办法触发 input 的 `input` `change` 事件，也就没办法进行监控了。\n\n把这个场景简单复原一下。\n\n一个组件是输入框组件，有一个验证功能。\n\n一个组件是表单修改数据组件，负责修改 input 的值。\n\n```html\n<form id=\"J_Form\" action=\"javascript:void 0\">\n    <input id=\"J_Input\" name=\"age\" value=\"18\" />\n    <button id=\"J_Btn\">修改 input 值为200</button>\n</form>\n\n<script>\n    const checkInputValue = el => {\n        el.addEventListener('change', e => {\n            console.log('触发 change:', e.target.value)\n        })\n        el.addEventListener('input', e => {\n            console.log('触发 input:', e.target.value)\n        })\n    }\n\n    const formInputSetter = (form, name, value) => {\n        form.elements[name].value = value\n    }\n</script>\n\n<script>\n    const $input = document.querySelector('#J_Input')\n    const $btn = document.querySelector('#J_Btn')\n    const $form = document.querySelector('#J_Form')\n\n    checkInputValue($input)\n\n    $btn.addEventListener('click', () => {\n        formInputSetter($form, 'age', 200)\n    })\n</script>\n```\n\n代码比较简单，无需多解释。\n\n为什么不触发 `change` `input` 事件呢？\n\n首先说 `change` 事件，要想触发它，必须是 input 元素值变化了，并且从焦点状态变为非焦点状态。\n\n在说下 `input` 事件，这个简单，必须是用户键盘敲击输入，类似 keypress 等事件。\n\n很明显的，通过 js 修改 value 值，不在这两个事件范围内。\n\n## 通过自定义事件解决\n\n对此，我考虑采用自定义事件，实现广播。让第二个组件修改数值后，广播给第一个组件。\n\n> 为什么不模拟广播 `change` 事件呢？主要是项目中 `change` 事件还有其他作用，如果此时模拟，会导致误触发。所以自定义一个事件来实现。\n\n知道了原理，那么解决起来也很简单：\n\n```html\n<form id=\"J_Form\" action=\"javascript:void 0\">\n    <input id=\"J_Input\" name=\"age\" value=\"18\" />\n    <button id=\"J_Btn\">修改 input 值为200</button>\n</form>\n\n<script>\n    const checkInputValue = el => {\n        el.addEventListener('change', e => {\n            console.log('触发 change:', e.target.value)\n        })\n        el.addEventListener('input', e => {\n            console.log('触发 input:', e.target.value)\n        })\n\n        // 增加自定义事件接收\n        el.addEventListener('push', e => {\n            console.log('触发 push:', e)\n        })\n    }\n\n    const formInputSetter = (form, name, value) => {\n        form.elements[name].value = value\n    }\n</script>\n\n<script>\n    const $input = document.querySelector('#J_Input')\n    const $btn = document.querySelector('#J_Btn')\n    const $form = document.querySelector('#J_Form')\n\n    checkInputValue($input)\n\n    $btn.addEventListener('click', () => {\n        formInputSetter($form, 'age', 200)\n\n        // 创建并分发自定义事件\n        let event = new CustomEvent('push', { detail: { k1: 'a', k2: 'b' } })\n        $input.dispatchEvent(event)\n    })\n</script>\n```\n\n通过 `new CustomEvent` 创建自定义事件，在进行接收就可以处理了。\n\n这里要注意一点：自定义事件的传参，只能定义到 `detail` 上，其他字段不能写入。接收的时候，也是 `e.detail` 进行接收。\n\n== EOF ===","source":"_posts/2018/2018-03-26-event.md","raw":"---\nlayout: post\ntitle: \"JS 自定义事件\"\ndate: 2018-03-27 00:21:00 GMT+0800\ncategories: [前端]\ntags:  [CustomEvent]\n---\n\n今天在写代码时候，遇到两个组件关联的情况，最终通过 js 自定义事件进行了解决。\n\n<!-- more -->\n\n## 场景简单复现\n\n当时的情况比较复杂。大致是使用Vue-elementUI封装了input组件，自己封装了表单元素读取与写入组件。input 组件有相应验证功能，如果是用户输入，那么没有任何问题。如果是通过自己封装的表单操作组件，直接写入input 的 value，那么没办法触发 input 的 `input` `change` 事件，也就没办法进行监控了。\n\n把这个场景简单复原一下。\n\n一个组件是输入框组件，有一个验证功能。\n\n一个组件是表单修改数据组件，负责修改 input 的值。\n\n```html\n<form id=\"J_Form\" action=\"javascript:void 0\">\n    <input id=\"J_Input\" name=\"age\" value=\"18\" />\n    <button id=\"J_Btn\">修改 input 值为200</button>\n</form>\n\n<script>\n    const checkInputValue = el => {\n        el.addEventListener('change', e => {\n            console.log('触发 change:', e.target.value)\n        })\n        el.addEventListener('input', e => {\n            console.log('触发 input:', e.target.value)\n        })\n    }\n\n    const formInputSetter = (form, name, value) => {\n        form.elements[name].value = value\n    }\n</script>\n\n<script>\n    const $input = document.querySelector('#J_Input')\n    const $btn = document.querySelector('#J_Btn')\n    const $form = document.querySelector('#J_Form')\n\n    checkInputValue($input)\n\n    $btn.addEventListener('click', () => {\n        formInputSetter($form, 'age', 200)\n    })\n</script>\n```\n\n代码比较简单，无需多解释。\n\n为什么不触发 `change` `input` 事件呢？\n\n首先说 `change` 事件，要想触发它，必须是 input 元素值变化了，并且从焦点状态变为非焦点状态。\n\n在说下 `input` 事件，这个简单，必须是用户键盘敲击输入，类似 keypress 等事件。\n\n很明显的，通过 js 修改 value 值，不在这两个事件范围内。\n\n## 通过自定义事件解决\n\n对此，我考虑采用自定义事件，实现广播。让第二个组件修改数值后，广播给第一个组件。\n\n> 为什么不模拟广播 `change` 事件呢？主要是项目中 `change` 事件还有其他作用，如果此时模拟，会导致误触发。所以自定义一个事件来实现。\n\n知道了原理，那么解决起来也很简单：\n\n```html\n<form id=\"J_Form\" action=\"javascript:void 0\">\n    <input id=\"J_Input\" name=\"age\" value=\"18\" />\n    <button id=\"J_Btn\">修改 input 值为200</button>\n</form>\n\n<script>\n    const checkInputValue = el => {\n        el.addEventListener('change', e => {\n            console.log('触发 change:', e.target.value)\n        })\n        el.addEventListener('input', e => {\n            console.log('触发 input:', e.target.value)\n        })\n\n        // 增加自定义事件接收\n        el.addEventListener('push', e => {\n            console.log('触发 push:', e)\n        })\n    }\n\n    const formInputSetter = (form, name, value) => {\n        form.elements[name].value = value\n    }\n</script>\n\n<script>\n    const $input = document.querySelector('#J_Input')\n    const $btn = document.querySelector('#J_Btn')\n    const $form = document.querySelector('#J_Form')\n\n    checkInputValue($input)\n\n    $btn.addEventListener('click', () => {\n        formInputSetter($form, 'age', 200)\n\n        // 创建并分发自定义事件\n        let event = new CustomEvent('push', { detail: { k1: 'a', k2: 'b' } })\n        $input.dispatchEvent(event)\n    })\n</script>\n```\n\n通过 `new CustomEvent` 创建自定义事件，在进行接收就可以处理了。\n\n这里要注意一点：自定义事件的传参，只能定义到 `detail` 上，其他字段不能写入。接收的时候，也是 `e.detail` 进行接收。\n\n== EOF ===","slug":"2018-2018-03-26-event","published":1,"updated":"2020-03-02T07:16:34.685Z","comments":1,"photos":[],"link":"","_id":"cka5ik8c9004inybguswulyba","content":"<p>今天在写代码时候，遇到两个组件关联的情况，最终通过 js 自定义事件进行了解决。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"场景简单复现\"><a href=\"#场景简单复现\" class=\"headerlink\" title=\"场景简单复现\"></a>场景简单复现</h2><p>当时的情况比较复杂。大致是使用Vue-elementUI封装了input组件，自己封装了表单元素读取与写入组件。input 组件有相应验证功能，如果是用户输入，那么没有任何问题。如果是通过自己封装的表单操作组件，直接写入input 的 value，那么没办法触发 input 的 <code>input</code> <code>change</code> 事件，也就没办法进行监控了。</p>\n<p>把这个场景简单复原一下。</p>\n<p>一个组件是输入框组件，有一个验证功能。</p>\n<p>一个组件是表单修改数据组件，负责修改 input 的值。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Form\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"javascript:void 0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Input\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"18\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Btn\"</span>&gt;</span>修改 input 值为200<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> checkInputValue = <span class=\"function\"><span class=\"params\">el</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el.addEventListener(<span class=\"string\">'change'</span>, e =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发 change:'</span>, e.target.value)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"javascript\">        el.addEventListener(<span class=\"string\">'input'</span>, e =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发 input:'</span>, e.target.value)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> formInputSetter = <span class=\"function\">(<span class=\"params\">form, name, value</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\">        form.elements[name].value = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> $input = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Input'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> $btn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Btn'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> $form = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Form'</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    checkInputValue($input)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    $btn.addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        formInputSetter($form, <span class=\"string\">'age'</span>, <span class=\"number\">200</span>)</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>代码比较简单，无需多解释。</p>\n<p>为什么不触发 <code>change</code> <code>input</code> 事件呢？</p>\n<p>首先说 <code>change</code> 事件，要想触发它，必须是 input 元素值变化了，并且从焦点状态变为非焦点状态。</p>\n<p>在说下 <code>input</code> 事件，这个简单，必须是用户键盘敲击输入，类似 keypress 等事件。</p>\n<p>很明显的，通过 js 修改 value 值，不在这两个事件范围内。</p>\n<h2 id=\"通过自定义事件解决\"><a href=\"#通过自定义事件解决\" class=\"headerlink\" title=\"通过自定义事件解决\"></a>通过自定义事件解决</h2><p>对此，我考虑采用自定义事件，实现广播。让第二个组件修改数值后，广播给第一个组件。</p>\n<blockquote>\n<p>为什么不模拟广播 <code>change</code> 事件呢？主要是项目中 <code>change</code> 事件还有其他作用，如果此时模拟，会导致误触发。所以自定义一个事件来实现。</p>\n</blockquote>\n<p>知道了原理，那么解决起来也很简单：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Form\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"javascript:void 0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Input\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"18\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Btn\"</span>&gt;</span>修改 input 值为200<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> checkInputValue = <span class=\"function\"><span class=\"params\">el</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el.addEventListener(<span class=\"string\">'change'</span>, e =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发 change:'</span>, e.target.value)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"javascript\">        el.addEventListener(<span class=\"string\">'input'</span>, e =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发 input:'</span>, e.target.value)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 增加自定义事件接收</span></span></span><br><span class=\"line\"><span class=\"javascript\">        el.addEventListener(<span class=\"string\">'push'</span>, e =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发 push:'</span>, e)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> formInputSetter = <span class=\"function\">(<span class=\"params\">form, name, value</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\">        form.elements[name].value = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> $input = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Input'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> $btn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Btn'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> $form = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Form'</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    checkInputValue($input)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    $btn.addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        formInputSetter($form, <span class=\"string\">'age'</span>, <span class=\"number\">200</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 创建并分发自定义事件</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> event = <span class=\"keyword\">new</span> CustomEvent(<span class=\"string\">'push'</span>, &#123; <span class=\"attr\">detail</span>: &#123; <span class=\"attr\">k1</span>: <span class=\"string\">'a'</span>, <span class=\"attr\">k2</span>: <span class=\"string\">'b'</span> &#125; &#125;)</span></span><br><span class=\"line\">        $input.dispatchEvent(event)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过 <code>new CustomEvent</code> 创建自定义事件，在进行接收就可以处理了。</p>\n<p>这里要注意一点：自定义事件的传参，只能定义到 <code>detail</code> 上，其他字段不能写入。接收的时候，也是 <code>e.detail</code> 进行接收。</p>\n<p>== EOF ===</p>\n","site":{"data":{}},"excerpt":"<p>今天在写代码时候，遇到两个组件关联的情况，最终通过 js 自定义事件进行了解决。</p>","more":"<h2 id=\"场景简单复现\"><a href=\"#场景简单复现\" class=\"headerlink\" title=\"场景简单复现\"></a>场景简单复现</h2><p>当时的情况比较复杂。大致是使用Vue-elementUI封装了input组件，自己封装了表单元素读取与写入组件。input 组件有相应验证功能，如果是用户输入，那么没有任何问题。如果是通过自己封装的表单操作组件，直接写入input 的 value，那么没办法触发 input 的 <code>input</code> <code>change</code> 事件，也就没办法进行监控了。</p>\n<p>把这个场景简单复原一下。</p>\n<p>一个组件是输入框组件，有一个验证功能。</p>\n<p>一个组件是表单修改数据组件，负责修改 input 的值。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Form\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"javascript:void 0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Input\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"18\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Btn\"</span>&gt;</span>修改 input 值为200<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> checkInputValue = <span class=\"function\"><span class=\"params\">el</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el.addEventListener(<span class=\"string\">'change'</span>, e =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发 change:'</span>, e.target.value)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"javascript\">        el.addEventListener(<span class=\"string\">'input'</span>, e =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发 input:'</span>, e.target.value)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> formInputSetter = <span class=\"function\">(<span class=\"params\">form, name, value</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\">        form.elements[name].value = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> $input = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Input'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> $btn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Btn'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> $form = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Form'</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    checkInputValue($input)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    $btn.addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        formInputSetter($form, <span class=\"string\">'age'</span>, <span class=\"number\">200</span>)</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>代码比较简单，无需多解释。</p>\n<p>为什么不触发 <code>change</code> <code>input</code> 事件呢？</p>\n<p>首先说 <code>change</code> 事件，要想触发它，必须是 input 元素值变化了，并且从焦点状态变为非焦点状态。</p>\n<p>在说下 <code>input</code> 事件，这个简单，必须是用户键盘敲击输入，类似 keypress 等事件。</p>\n<p>很明显的，通过 js 修改 value 值，不在这两个事件范围内。</p>\n<h2 id=\"通过自定义事件解决\"><a href=\"#通过自定义事件解决\" class=\"headerlink\" title=\"通过自定义事件解决\"></a>通过自定义事件解决</h2><p>对此，我考虑采用自定义事件，实现广播。让第二个组件修改数值后，广播给第一个组件。</p>\n<blockquote>\n<p>为什么不模拟广播 <code>change</code> 事件呢？主要是项目中 <code>change</code> 事件还有其他作用，如果此时模拟，会导致误触发。所以自定义一个事件来实现。</p>\n</blockquote>\n<p>知道了原理，那么解决起来也很简单：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Form\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"javascript:void 0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Input\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"18\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_Btn\"</span>&gt;</span>修改 input 值为200<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> checkInputValue = <span class=\"function\"><span class=\"params\">el</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el.addEventListener(<span class=\"string\">'change'</span>, e =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发 change:'</span>, e.target.value)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"javascript\">        el.addEventListener(<span class=\"string\">'input'</span>, e =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发 input:'</span>, e.target.value)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 增加自定义事件接收</span></span></span><br><span class=\"line\"><span class=\"javascript\">        el.addEventListener(<span class=\"string\">'push'</span>, e =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发 push:'</span>, e)</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> formInputSetter = <span class=\"function\">(<span class=\"params\">form, name, value</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\">        form.elements[name].value = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> $input = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Input'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> $btn = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Btn'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> $form = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#J_Form'</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    checkInputValue($input)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    $btn.addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        formInputSetter($form, <span class=\"string\">'age'</span>, <span class=\"number\">200</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 创建并分发自定义事件</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> event = <span class=\"keyword\">new</span> CustomEvent(<span class=\"string\">'push'</span>, &#123; <span class=\"attr\">detail</span>: &#123; <span class=\"attr\">k1</span>: <span class=\"string\">'a'</span>, <span class=\"attr\">k2</span>: <span class=\"string\">'b'</span> &#125; &#125;)</span></span><br><span class=\"line\">        $input.dispatchEvent(event)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过 <code>new CustomEvent</code> 创建自定义事件，在进行接收就可以处理了。</p>\n<p>这里要注意一点：自定义事件的传参，只能定义到 <code>detail</code> 上，其他字段不能写入。接收的时候，也是 <code>e.detail</code> 进行接收。</p>\n<p>== EOF ===</p>"},{"layout":"post","title":"cdn 对象存储应用实战——博客的搭建","date":"2018-04-06T16:19:00.000Z","_content":"\n嗯，终于写到实战应用了。这次用自己的亲身经历说说 cdn 和对象存储在个人博客中的的应用。\n\n感兴趣的话，可以看看之前的两篇文章，分别说了《cdn 入门》和《对象存储入门》。\n\n<!-- more -->\n\n> 特殊要说明的是，中国大陆域名建议备案，否则可能无法启用 cdn 或者解析服务。\n>\n> 而备案可能需要大陆购买虚拟主机（空间）来协助，中国大陆有了空间，那还整啥 cdn？其实果真如此，意义不是特别大，除非为了 https 访问。\n>\n> 所以以上，有可能导致鸡生蛋蛋生鸡的问题...\n>\n> 本文不考虑域名备案等问题。默认按已备案，服务均可用情况讨论。\n>\n> 同样的，静态博客和动态博客也不讨论好坏，各有千秋。\n\n## 个人博客的常见方案\n\n个人自建博客，一般从博客系统、架设、域名上，常见方案不过几种。\n\n**博客系统**\n\n* 使用动态类技术实现（wordpress ghost 等）\n* 使用静态系统（hexo jekyll 手写页面等）\n\n**发布环境**\n\n* 云主机（虚拟主机）\n* 自己架设 VPS 等\n* github pages （gitlab pages，coding pages）等\n\n**域名**\n\n* 使用 github pages 默认域名\n* 自己的域名\n\n### 常见方案\n\n综合上面的集中方式，一般技术类博客常见方案有：\n\n1. 使用静态博客系统，部署到 github pages 上。有域名的话，还会自己配置上域名。\n\n    优点：不花钱部署，不考虑流量。访问速度慢。\n\n    缺点：绑定自己域名，没办法 https。不绑定域名，默认域名不够个性。\n\n2. 使用静态或者动态博客系统，部署到廉价虚拟主机上。同时配置自己的域名。\n\n    优点：比如阿里云曾经的廉价共享虚拟主机，成本低，速度快，流量有限制，但一般都够用。\n\n    缺点：绑定自己域名，没办法 https。\n\n> 由于自己有 vps 的话，默认你能力较强，基本上就可以参考之前的文章配置上 cdn 来提速了。本文不再考虑这种情况。\n\n通过上面两种方案，可以看出，除了静态动态博客不一样外，主要问题在于：\n\n1. 用了 github pages，速度慢。\n\n2. 都不能配置上 https。\n\n本文就是针对这两个问题，来说明如何处理个人博客速度问题和 https 访问问题。\n\n## 针对 github pages 等静态网站国内化、cdn 处理\n\n本操作，主要是把国外的网站内容转移到国内，方便后续进行 cdn。当然，转移到国内后，也可以直接配置域名，当作 http 网站直接访问。这样等同于你有了一台国内的静态网站的服务器。\n\n> 真实案例：本博客的 [收藏集](https://collection.yukapril.com) 栏目。网址：[http://collection.yukapril.com](https://collection.yukapril.com)\n\n这个栏目采用了静态博客（jekyll）+ github pages 部署方式。并绑定域名。\n\n因为 github pages 国内访问慢，所以直接 cdn 加速就比较吃亏，首次回源各地区都很慢。所以，需要在国内架设服务器进行回源使用。\n\n1. 首先要对其开通对象存储功能，用于在国内充当本地服务器。\n\n    这里多说一句，貌似腾讯云不能访问 github pages 网站。我曾经没有回源成功。\n\n2. 在对象存储里面，配置回源（镜像），内容为 github pages 网址。\n    \n    **这里需要注意：github pages 访问必须是域名形式，不能是域名后面带有路径的形式（比如 `http://yukapril.github.io/collection`）。因为这两种形式，生成的页面资源路径是不同的。**\n    \n    你可以用默认的github pages 自己用户名创建一个，或者绑定一个自己的随意域名（这个域名起到过渡作用，不会被用户访问）。\n    \n    同时，配置上默认首页（静态网站）功能为开启。\n\n    好了，到这里国外的资源，已经复制到国内一份了。\n    \n3. 通过 cdn 部署域名。\n\n    如果你期望 https 访问，那么需要自己准备 ssl 证书。当然，很多服务商提供免费一年的服务。不过我还是建议自己单独去申请，因为我发现服务商要么限制只能申请一个，要么就是申请速度很慢。\n\n    > 申请 ssl 的话，可以到这里免费申请：[https://freessl.org/](https://freessl.org/)。\n\n    下面来配置我们自己的域名。\n\n    找到 cdn 栏目。增加一条我们希望最终访问的域名记录。\n\n    源站类型选择 “对象存储”。之后选择相应的源站就好。\n\n    业务类型选择 “全站加速” 或者 “静态加速”。\n\n    缓存时间建议选择长一点。因为修改文件后，我一般是通过手动触发缓存刷新形式。如果你懒的这么做，可以设置短一点，它失效后会自动刷新。\n\n    如果有 ssl 密钥，那么直接上传配置好就可以。\n\n    最后配置好 cname，等待生效后就可以访问了。\n\n    至此，我们的网站就配置完成了。如果是 https 访问，注意关注计费。我了解到国内服务商都没有针对 https 免费免流量的情况。\n\n## 针对虚拟主机 cdn 加速处理\n\n如果你的是动态博客，不论是否国内外，都不能带上对象存储，否则每次都要手动清理对象存储的缓存，比较麻烦。\n\n如果你的是静态博客，但是在国内，也不需要带上对象存储，因为带上了意义不大。\n\n综上，就有这一套直接上 cdn 的方案。\n\n1. 首先，确保你的博客域名，是一个无关域名。如果能 IP 访问的话，无所谓。\n\n    这一步要保证你的博客可以通过备用域名进行连接，或者 IP 进行连接。到时候让 cdn 回源使用。\n\n    如果你没有办法通过独立 IP 访问，要配置备用域名，因为主域名一会要配置给 cdn 来用。\n\n2. 直接开通 cdn。\n\n    > 同样的，如果需要 https 访问，请参考上文先去获取证书。\n\n    下面来配置我们自己的域名。\n\n    找到 cdn 栏目。增加一条我们希望最终访问的域名记录。\n\n    源站类型选择 IP 或者 “源站域名”。\n\n    注意调整下回源 HOST：如果是 IP 回源，而且你的 IP 不是独立 IP，或者需要通过主机头进行区分的话。此时注意配置好回源主机头。建议采用第一步的备用域名，这样省事。当然也可以在主机上加一条 cdn 加速域名的主机绑定记录。\n\n    业务类型选择 “全站加速” 或者 “静态加速”。\n\n    缓存时间建议选择长一点。因为修改文件后，我一般是通过手动触发缓存刷新形式。如果你懒的这么做，可以设置短一点，它失效后会自动刷新。\n\n    如果有 ssl 密钥，那么直接上传配置好就可以。\n\n    最后配置好 cname，等待生效后就可以访问了。\n\n## 注意点\n\n1. 你如果配置了根域名（比如 `abc.com`），那就是根域名配置了 cname，此时根域名不能配置 mx 邮箱解析了（即不能分配 `test@abc.com` 这种形式的邮箱）。需要二选一。所以建议考虑使用 `www.abc.com` 这种域名配置 cdn。\n\n2. 注意观察缓存命中率。一般静态博客命中率应该比较高，全部缓存后，理论应该为 100%。一般也应该 80% 以上。当然前提是缓存后才有效。\n\n3. 自己访问 cdn 域名试试看，一般 cdn 厂商都会有特殊文件头返回。\n\n    比如阿里云，是 `x-cache: HIT ...`。确保第二次访问后，有 `HIT` 字样。\n\n    > 查阅主要有两种方式\n    >\n    > 1. 使用 `curl -I https://abc.com` 来检查。\n    >\n    > 2. 使用浏览器，开发者模式，关闭缓存（否则可能返回200 from cache，304 not modified），访问网站，查看 `network` 面板的访问记录。","source":"_posts/2018/2018-04-06-cdn.md","raw":"---\nlayout: post\ntitle: \"cdn 对象存储应用实战——博客的搭建\"\ndate: 2018-04-06 16:19:00 GMT+0800\ncategories: [前端]\ntags:  [cdn,blog]\n---\n\n嗯，终于写到实战应用了。这次用自己的亲身经历说说 cdn 和对象存储在个人博客中的的应用。\n\n感兴趣的话，可以看看之前的两篇文章，分别说了《cdn 入门》和《对象存储入门》。\n\n<!-- more -->\n\n> 特殊要说明的是，中国大陆域名建议备案，否则可能无法启用 cdn 或者解析服务。\n>\n> 而备案可能需要大陆购买虚拟主机（空间）来协助，中国大陆有了空间，那还整啥 cdn？其实果真如此，意义不是特别大，除非为了 https 访问。\n>\n> 所以以上，有可能导致鸡生蛋蛋生鸡的问题...\n>\n> 本文不考虑域名备案等问题。默认按已备案，服务均可用情况讨论。\n>\n> 同样的，静态博客和动态博客也不讨论好坏，各有千秋。\n\n## 个人博客的常见方案\n\n个人自建博客，一般从博客系统、架设、域名上，常见方案不过几种。\n\n**博客系统**\n\n* 使用动态类技术实现（wordpress ghost 等）\n* 使用静态系统（hexo jekyll 手写页面等）\n\n**发布环境**\n\n* 云主机（虚拟主机）\n* 自己架设 VPS 等\n* github pages （gitlab pages，coding pages）等\n\n**域名**\n\n* 使用 github pages 默认域名\n* 自己的域名\n\n### 常见方案\n\n综合上面的集中方式，一般技术类博客常见方案有：\n\n1. 使用静态博客系统，部署到 github pages 上。有域名的话，还会自己配置上域名。\n\n    优点：不花钱部署，不考虑流量。访问速度慢。\n\n    缺点：绑定自己域名，没办法 https。不绑定域名，默认域名不够个性。\n\n2. 使用静态或者动态博客系统，部署到廉价虚拟主机上。同时配置自己的域名。\n\n    优点：比如阿里云曾经的廉价共享虚拟主机，成本低，速度快，流量有限制，但一般都够用。\n\n    缺点：绑定自己域名，没办法 https。\n\n> 由于自己有 vps 的话，默认你能力较强，基本上就可以参考之前的文章配置上 cdn 来提速了。本文不再考虑这种情况。\n\n通过上面两种方案，可以看出，除了静态动态博客不一样外，主要问题在于：\n\n1. 用了 github pages，速度慢。\n\n2. 都不能配置上 https。\n\n本文就是针对这两个问题，来说明如何处理个人博客速度问题和 https 访问问题。\n\n## 针对 github pages 等静态网站国内化、cdn 处理\n\n本操作，主要是把国外的网站内容转移到国内，方便后续进行 cdn。当然，转移到国内后，也可以直接配置域名，当作 http 网站直接访问。这样等同于你有了一台国内的静态网站的服务器。\n\n> 真实案例：本博客的 [收藏集](https://collection.yukapril.com) 栏目。网址：[http://collection.yukapril.com](https://collection.yukapril.com)\n\n这个栏目采用了静态博客（jekyll）+ github pages 部署方式。并绑定域名。\n\n因为 github pages 国内访问慢，所以直接 cdn 加速就比较吃亏，首次回源各地区都很慢。所以，需要在国内架设服务器进行回源使用。\n\n1. 首先要对其开通对象存储功能，用于在国内充当本地服务器。\n\n    这里多说一句，貌似腾讯云不能访问 github pages 网站。我曾经没有回源成功。\n\n2. 在对象存储里面，配置回源（镜像），内容为 github pages 网址。\n    \n    **这里需要注意：github pages 访问必须是域名形式，不能是域名后面带有路径的形式（比如 `http://yukapril.github.io/collection`）。因为这两种形式，生成的页面资源路径是不同的。**\n    \n    你可以用默认的github pages 自己用户名创建一个，或者绑定一个自己的随意域名（这个域名起到过渡作用，不会被用户访问）。\n    \n    同时，配置上默认首页（静态网站）功能为开启。\n\n    好了，到这里国外的资源，已经复制到国内一份了。\n    \n3. 通过 cdn 部署域名。\n\n    如果你期望 https 访问，那么需要自己准备 ssl 证书。当然，很多服务商提供免费一年的服务。不过我还是建议自己单独去申请，因为我发现服务商要么限制只能申请一个，要么就是申请速度很慢。\n\n    > 申请 ssl 的话，可以到这里免费申请：[https://freessl.org/](https://freessl.org/)。\n\n    下面来配置我们自己的域名。\n\n    找到 cdn 栏目。增加一条我们希望最终访问的域名记录。\n\n    源站类型选择 “对象存储”。之后选择相应的源站就好。\n\n    业务类型选择 “全站加速” 或者 “静态加速”。\n\n    缓存时间建议选择长一点。因为修改文件后，我一般是通过手动触发缓存刷新形式。如果你懒的这么做，可以设置短一点，它失效后会自动刷新。\n\n    如果有 ssl 密钥，那么直接上传配置好就可以。\n\n    最后配置好 cname，等待生效后就可以访问了。\n\n    至此，我们的网站就配置完成了。如果是 https 访问，注意关注计费。我了解到国内服务商都没有针对 https 免费免流量的情况。\n\n## 针对虚拟主机 cdn 加速处理\n\n如果你的是动态博客，不论是否国内外，都不能带上对象存储，否则每次都要手动清理对象存储的缓存，比较麻烦。\n\n如果你的是静态博客，但是在国内，也不需要带上对象存储，因为带上了意义不大。\n\n综上，就有这一套直接上 cdn 的方案。\n\n1. 首先，确保你的博客域名，是一个无关域名。如果能 IP 访问的话，无所谓。\n\n    这一步要保证你的博客可以通过备用域名进行连接，或者 IP 进行连接。到时候让 cdn 回源使用。\n\n    如果你没有办法通过独立 IP 访问，要配置备用域名，因为主域名一会要配置给 cdn 来用。\n\n2. 直接开通 cdn。\n\n    > 同样的，如果需要 https 访问，请参考上文先去获取证书。\n\n    下面来配置我们自己的域名。\n\n    找到 cdn 栏目。增加一条我们希望最终访问的域名记录。\n\n    源站类型选择 IP 或者 “源站域名”。\n\n    注意调整下回源 HOST：如果是 IP 回源，而且你的 IP 不是独立 IP，或者需要通过主机头进行区分的话。此时注意配置好回源主机头。建议采用第一步的备用域名，这样省事。当然也可以在主机上加一条 cdn 加速域名的主机绑定记录。\n\n    业务类型选择 “全站加速” 或者 “静态加速”。\n\n    缓存时间建议选择长一点。因为修改文件后，我一般是通过手动触发缓存刷新形式。如果你懒的这么做，可以设置短一点，它失效后会自动刷新。\n\n    如果有 ssl 密钥，那么直接上传配置好就可以。\n\n    最后配置好 cname，等待生效后就可以访问了。\n\n## 注意点\n\n1. 你如果配置了根域名（比如 `abc.com`），那就是根域名配置了 cname，此时根域名不能配置 mx 邮箱解析了（即不能分配 `test@abc.com` 这种形式的邮箱）。需要二选一。所以建议考虑使用 `www.abc.com` 这种域名配置 cdn。\n\n2. 注意观察缓存命中率。一般静态博客命中率应该比较高，全部缓存后，理论应该为 100%。一般也应该 80% 以上。当然前提是缓存后才有效。\n\n3. 自己访问 cdn 域名试试看，一般 cdn 厂商都会有特殊文件头返回。\n\n    比如阿里云，是 `x-cache: HIT ...`。确保第二次访问后，有 `HIT` 字样。\n\n    > 查阅主要有两种方式\n    >\n    > 1. 使用 `curl -I https://abc.com` 来检查。\n    >\n    > 2. 使用浏览器，开发者模式，关闭缓存（否则可能返回200 from cache，304 not modified），访问网站，查看 `network` 面板的访问记录。","slug":"2018-2018-04-06-cdn","published":1,"updated":"2020-03-02T07:16:34.685Z","comments":1,"photos":[],"link":"","_id":"cka5ik8ca004lnybg41fzr9xc","content":"<p>嗯，终于写到实战应用了。这次用自己的亲身经历说说 cdn 和对象存储在个人博客中的的应用。</p>\n<p>感兴趣的话，可以看看之前的两篇文章，分别说了《cdn 入门》和《对象存储入门》。</p>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>特殊要说明的是，中国大陆域名建议备案，否则可能无法启用 cdn 或者解析服务。</p>\n<p>而备案可能需要大陆购买虚拟主机（空间）来协助，中国大陆有了空间，那还整啥 cdn？其实果真如此，意义不是特别大，除非为了 https 访问。</p>\n<p>所以以上，有可能导致鸡生蛋蛋生鸡的问题…</p>\n<p>本文不考虑域名备案等问题。默认按已备案，服务均可用情况讨论。</p>\n<p>同样的，静态博客和动态博客也不讨论好坏，各有千秋。</p>\n</blockquote>\n<h2 id=\"个人博客的常见方案\"><a href=\"#个人博客的常见方案\" class=\"headerlink\" title=\"个人博客的常见方案\"></a>个人博客的常见方案</h2><p>个人自建博客，一般从博客系统、架设、域名上，常见方案不过几种。</p>\n<p><strong>博客系统</strong></p>\n<ul>\n<li>使用动态类技术实现（wordpress ghost 等）</li>\n<li>使用静态系统（hexo jekyll 手写页面等）</li>\n</ul>\n<p><strong>发布环境</strong></p>\n<ul>\n<li>云主机（虚拟主机）</li>\n<li>自己架设 VPS 等</li>\n<li>github pages （gitlab pages，coding pages）等</li>\n</ul>\n<p><strong>域名</strong></p>\n<ul>\n<li>使用 github pages 默认域名</li>\n<li>自己的域名</li>\n</ul>\n<h3 id=\"常见方案\"><a href=\"#常见方案\" class=\"headerlink\" title=\"常见方案\"></a>常见方案</h3><p>综合上面的集中方式，一般技术类博客常见方案有：</p>\n<ol>\n<li><p>使用静态博客系统，部署到 github pages 上。有域名的话，还会自己配置上域名。</p>\n<p> 优点：不花钱部署，不考虑流量。访问速度慢。</p>\n<p> 缺点：绑定自己域名，没办法 https。不绑定域名，默认域名不够个性。</p>\n</li>\n<li><p>使用静态或者动态博客系统，部署到廉价虚拟主机上。同时配置自己的域名。</p>\n<p> 优点：比如阿里云曾经的廉价共享虚拟主机，成本低，速度快，流量有限制，但一般都够用。</p>\n<p> 缺点：绑定自己域名，没办法 https。</p>\n</li>\n</ol>\n<blockquote>\n<p>由于自己有 vps 的话，默认你能力较强，基本上就可以参考之前的文章配置上 cdn 来提速了。本文不再考虑这种情况。</p>\n</blockquote>\n<p>通过上面两种方案，可以看出，除了静态动态博客不一样外，主要问题在于：</p>\n<ol>\n<li><p>用了 github pages，速度慢。</p>\n</li>\n<li><p>都不能配置上 https。</p>\n</li>\n</ol>\n<p>本文就是针对这两个问题，来说明如何处理个人博客速度问题和 https 访问问题。</p>\n<h2 id=\"针对-github-pages-等静态网站国内化、cdn-处理\"><a href=\"#针对-github-pages-等静态网站国内化、cdn-处理\" class=\"headerlink\" title=\"针对 github pages 等静态网站国内化、cdn 处理\"></a>针对 github pages 等静态网站国内化、cdn 处理</h2><p>本操作，主要是把国外的网站内容转移到国内，方便后续进行 cdn。当然，转移到国内后，也可以直接配置域名，当作 http 网站直接访问。这样等同于你有了一台国内的静态网站的服务器。</p>\n<blockquote>\n<p>真实案例：本博客的 <a href=\"https://collection.yukapril.com\" target=\"_blank\" rel=\"noopener\">收藏集</a> 栏目。网址：<a href=\"https://collection.yukapril.com\" target=\"_blank\" rel=\"noopener\">http://collection.yukapril.com</a></p>\n</blockquote>\n<p>这个栏目采用了静态博客（jekyll）+ github pages 部署方式。并绑定域名。</p>\n<p>因为 github pages 国内访问慢，所以直接 cdn 加速就比较吃亏，首次回源各地区都很慢。所以，需要在国内架设服务器进行回源使用。</p>\n<ol>\n<li><p>首先要对其开通对象存储功能，用于在国内充当本地服务器。</p>\n<p> 这里多说一句，貌似腾讯云不能访问 github pages 网站。我曾经没有回源成功。</p>\n</li>\n<li><p>在对象存储里面，配置回源（镜像），内容为 github pages 网址。</p>\n<p> <strong>这里需要注意：github pages 访问必须是域名形式，不能是域名后面带有路径的形式（比如 <code>http://yukapril.github.io/collection</code>）。因为这两种形式，生成的页面资源路径是不同的。</strong></p>\n<p> 你可以用默认的github pages 自己用户名创建一个，或者绑定一个自己的随意域名（这个域名起到过渡作用，不会被用户访问）。</p>\n<p> 同时，配置上默认首页（静态网站）功能为开启。</p>\n<p> 好了，到这里国外的资源，已经复制到国内一份了。</p>\n</li>\n<li><p>通过 cdn 部署域名。</p>\n<p> 如果你期望 https 访问，那么需要自己准备 ssl 证书。当然，很多服务商提供免费一年的服务。不过我还是建议自己单独去申请，因为我发现服务商要么限制只能申请一个，要么就是申请速度很慢。</p>\n<blockquote>\n<p>申请 ssl 的话，可以到这里免费申请：<a href=\"https://freessl.org/\" target=\"_blank\" rel=\"noopener\">https://freessl.org/</a>。</p>\n</blockquote>\n<p> 下面来配置我们自己的域名。</p>\n<p> 找到 cdn 栏目。增加一条我们希望最终访问的域名记录。</p>\n<p> 源站类型选择 “对象存储”。之后选择相应的源站就好。</p>\n<p> 业务类型选择 “全站加速” 或者 “静态加速”。</p>\n<p> 缓存时间建议选择长一点。因为修改文件后，我一般是通过手动触发缓存刷新形式。如果你懒的这么做，可以设置短一点，它失效后会自动刷新。</p>\n<p> 如果有 ssl 密钥，那么直接上传配置好就可以。</p>\n<p> 最后配置好 cname，等待生效后就可以访问了。</p>\n<p> 至此，我们的网站就配置完成了。如果是 https 访问，注意关注计费。我了解到国内服务商都没有针对 https 免费免流量的情况。</p>\n</li>\n</ol>\n<h2 id=\"针对虚拟主机-cdn-加速处理\"><a href=\"#针对虚拟主机-cdn-加速处理\" class=\"headerlink\" title=\"针对虚拟主机 cdn 加速处理\"></a>针对虚拟主机 cdn 加速处理</h2><p>如果你的是动态博客，不论是否国内外，都不能带上对象存储，否则每次都要手动清理对象存储的缓存，比较麻烦。</p>\n<p>如果你的是静态博客，但是在国内，也不需要带上对象存储，因为带上了意义不大。</p>\n<p>综上，就有这一套直接上 cdn 的方案。</p>\n<ol>\n<li><p>首先，确保你的博客域名，是一个无关域名。如果能 IP 访问的话，无所谓。</p>\n<p> 这一步要保证你的博客可以通过备用域名进行连接，或者 IP 进行连接。到时候让 cdn 回源使用。</p>\n<p> 如果你没有办法通过独立 IP 访问，要配置备用域名，因为主域名一会要配置给 cdn 来用。</p>\n</li>\n<li><p>直接开通 cdn。</p>\n<blockquote>\n<p>同样的，如果需要 https 访问，请参考上文先去获取证书。</p>\n</blockquote>\n<p> 下面来配置我们自己的域名。</p>\n<p> 找到 cdn 栏目。增加一条我们希望最终访问的域名记录。</p>\n<p> 源站类型选择 IP 或者 “源站域名”。</p>\n<p> 注意调整下回源 HOST：如果是 IP 回源，而且你的 IP 不是独立 IP，或者需要通过主机头进行区分的话。此时注意配置好回源主机头。建议采用第一步的备用域名，这样省事。当然也可以在主机上加一条 cdn 加速域名的主机绑定记录。</p>\n<p> 业务类型选择 “全站加速” 或者 “静态加速”。</p>\n<p> 缓存时间建议选择长一点。因为修改文件后，我一般是通过手动触发缓存刷新形式。如果你懒的这么做，可以设置短一点，它失效后会自动刷新。</p>\n<p> 如果有 ssl 密钥，那么直接上传配置好就可以。</p>\n<p> 最后配置好 cname，等待生效后就可以访问了。</p>\n</li>\n</ol>\n<h2 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h2><ol>\n<li><p>你如果配置了根域名（比如 <code>abc.com</code>），那就是根域名配置了 cname，此时根域名不能配置 mx 邮箱解析了（即不能分配 <code>test@abc.com</code> 这种形式的邮箱）。需要二选一。所以建议考虑使用 <code>www.abc.com</code> 这种域名配置 cdn。</p>\n</li>\n<li><p>注意观察缓存命中率。一般静态博客命中率应该比较高，全部缓存后，理论应该为 100%。一般也应该 80% 以上。当然前提是缓存后才有效。</p>\n</li>\n<li><p>自己访问 cdn 域名试试看，一般 cdn 厂商都会有特殊文件头返回。</p>\n<p> 比如阿里云，是 <code>x-cache: HIT ...</code>。确保第二次访问后，有 <code>HIT</code> 字样。</p>\n<blockquote>\n<p>查阅主要有两种方式</p>\n<ol>\n<li><p>使用 <code>curl -I https://abc.com</code> 来检查。</p>\n</li>\n<li><p>使用浏览器，开发者模式，关闭缓存（否则可能返回200 from cache，304 not modified），访问网站，查看 <code>network</code> 面板的访问记录。</p>\n</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>嗯，终于写到实战应用了。这次用自己的亲身经历说说 cdn 和对象存储在个人博客中的的应用。</p>\n<p>感兴趣的话，可以看看之前的两篇文章，分别说了《cdn 入门》和《对象存储入门》。</p>","more":"<blockquote>\n<p>特殊要说明的是，中国大陆域名建议备案，否则可能无法启用 cdn 或者解析服务。</p>\n<p>而备案可能需要大陆购买虚拟主机（空间）来协助，中国大陆有了空间，那还整啥 cdn？其实果真如此，意义不是特别大，除非为了 https 访问。</p>\n<p>所以以上，有可能导致鸡生蛋蛋生鸡的问题…</p>\n<p>本文不考虑域名备案等问题。默认按已备案，服务均可用情况讨论。</p>\n<p>同样的，静态博客和动态博客也不讨论好坏，各有千秋。</p>\n</blockquote>\n<h2 id=\"个人博客的常见方案\"><a href=\"#个人博客的常见方案\" class=\"headerlink\" title=\"个人博客的常见方案\"></a>个人博客的常见方案</h2><p>个人自建博客，一般从博客系统、架设、域名上，常见方案不过几种。</p>\n<p><strong>博客系统</strong></p>\n<ul>\n<li>使用动态类技术实现（wordpress ghost 等）</li>\n<li>使用静态系统（hexo jekyll 手写页面等）</li>\n</ul>\n<p><strong>发布环境</strong></p>\n<ul>\n<li>云主机（虚拟主机）</li>\n<li>自己架设 VPS 等</li>\n<li>github pages （gitlab pages，coding pages）等</li>\n</ul>\n<p><strong>域名</strong></p>\n<ul>\n<li>使用 github pages 默认域名</li>\n<li>自己的域名</li>\n</ul>\n<h3 id=\"常见方案\"><a href=\"#常见方案\" class=\"headerlink\" title=\"常见方案\"></a>常见方案</h3><p>综合上面的集中方式，一般技术类博客常见方案有：</p>\n<ol>\n<li><p>使用静态博客系统，部署到 github pages 上。有域名的话，还会自己配置上域名。</p>\n<p> 优点：不花钱部署，不考虑流量。访问速度慢。</p>\n<p> 缺点：绑定自己域名，没办法 https。不绑定域名，默认域名不够个性。</p>\n</li>\n<li><p>使用静态或者动态博客系统，部署到廉价虚拟主机上。同时配置自己的域名。</p>\n<p> 优点：比如阿里云曾经的廉价共享虚拟主机，成本低，速度快，流量有限制，但一般都够用。</p>\n<p> 缺点：绑定自己域名，没办法 https。</p>\n</li>\n</ol>\n<blockquote>\n<p>由于自己有 vps 的话，默认你能力较强，基本上就可以参考之前的文章配置上 cdn 来提速了。本文不再考虑这种情况。</p>\n</blockquote>\n<p>通过上面两种方案，可以看出，除了静态动态博客不一样外，主要问题在于：</p>\n<ol>\n<li><p>用了 github pages，速度慢。</p>\n</li>\n<li><p>都不能配置上 https。</p>\n</li>\n</ol>\n<p>本文就是针对这两个问题，来说明如何处理个人博客速度问题和 https 访问问题。</p>\n<h2 id=\"针对-github-pages-等静态网站国内化、cdn-处理\"><a href=\"#针对-github-pages-等静态网站国内化、cdn-处理\" class=\"headerlink\" title=\"针对 github pages 等静态网站国内化、cdn 处理\"></a>针对 github pages 等静态网站国内化、cdn 处理</h2><p>本操作，主要是把国外的网站内容转移到国内，方便后续进行 cdn。当然，转移到国内后，也可以直接配置域名，当作 http 网站直接访问。这样等同于你有了一台国内的静态网站的服务器。</p>\n<blockquote>\n<p>真实案例：本博客的 <a href=\"https://collection.yukapril.com\" target=\"_blank\" rel=\"noopener\">收藏集</a> 栏目。网址：<a href=\"https://collection.yukapril.com\" target=\"_blank\" rel=\"noopener\">http://collection.yukapril.com</a></p>\n</blockquote>\n<p>这个栏目采用了静态博客（jekyll）+ github pages 部署方式。并绑定域名。</p>\n<p>因为 github pages 国内访问慢，所以直接 cdn 加速就比较吃亏，首次回源各地区都很慢。所以，需要在国内架设服务器进行回源使用。</p>\n<ol>\n<li><p>首先要对其开通对象存储功能，用于在国内充当本地服务器。</p>\n<p> 这里多说一句，貌似腾讯云不能访问 github pages 网站。我曾经没有回源成功。</p>\n</li>\n<li><p>在对象存储里面，配置回源（镜像），内容为 github pages 网址。</p>\n<p> <strong>这里需要注意：github pages 访问必须是域名形式，不能是域名后面带有路径的形式（比如 <code>http://yukapril.github.io/collection</code>）。因为这两种形式，生成的页面资源路径是不同的。</strong></p>\n<p> 你可以用默认的github pages 自己用户名创建一个，或者绑定一个自己的随意域名（这个域名起到过渡作用，不会被用户访问）。</p>\n<p> 同时，配置上默认首页（静态网站）功能为开启。</p>\n<p> 好了，到这里国外的资源，已经复制到国内一份了。</p>\n</li>\n<li><p>通过 cdn 部署域名。</p>\n<p> 如果你期望 https 访问，那么需要自己准备 ssl 证书。当然，很多服务商提供免费一年的服务。不过我还是建议自己单独去申请，因为我发现服务商要么限制只能申请一个，要么就是申请速度很慢。</p>\n<blockquote>\n<p>申请 ssl 的话，可以到这里免费申请：<a href=\"https://freessl.org/\" target=\"_blank\" rel=\"noopener\">https://freessl.org/</a>。</p>\n</blockquote>\n<p> 下面来配置我们自己的域名。</p>\n<p> 找到 cdn 栏目。增加一条我们希望最终访问的域名记录。</p>\n<p> 源站类型选择 “对象存储”。之后选择相应的源站就好。</p>\n<p> 业务类型选择 “全站加速” 或者 “静态加速”。</p>\n<p> 缓存时间建议选择长一点。因为修改文件后，我一般是通过手动触发缓存刷新形式。如果你懒的这么做，可以设置短一点，它失效后会自动刷新。</p>\n<p> 如果有 ssl 密钥，那么直接上传配置好就可以。</p>\n<p> 最后配置好 cname，等待生效后就可以访问了。</p>\n<p> 至此，我们的网站就配置完成了。如果是 https 访问，注意关注计费。我了解到国内服务商都没有针对 https 免费免流量的情况。</p>\n</li>\n</ol>\n<h2 id=\"针对虚拟主机-cdn-加速处理\"><a href=\"#针对虚拟主机-cdn-加速处理\" class=\"headerlink\" title=\"针对虚拟主机 cdn 加速处理\"></a>针对虚拟主机 cdn 加速处理</h2><p>如果你的是动态博客，不论是否国内外，都不能带上对象存储，否则每次都要手动清理对象存储的缓存，比较麻烦。</p>\n<p>如果你的是静态博客，但是在国内，也不需要带上对象存储，因为带上了意义不大。</p>\n<p>综上，就有这一套直接上 cdn 的方案。</p>\n<ol>\n<li><p>首先，确保你的博客域名，是一个无关域名。如果能 IP 访问的话，无所谓。</p>\n<p> 这一步要保证你的博客可以通过备用域名进行连接，或者 IP 进行连接。到时候让 cdn 回源使用。</p>\n<p> 如果你没有办法通过独立 IP 访问，要配置备用域名，因为主域名一会要配置给 cdn 来用。</p>\n</li>\n<li><p>直接开通 cdn。</p>\n<blockquote>\n<p>同样的，如果需要 https 访问，请参考上文先去获取证书。</p>\n</blockquote>\n<p> 下面来配置我们自己的域名。</p>\n<p> 找到 cdn 栏目。增加一条我们希望最终访问的域名记录。</p>\n<p> 源站类型选择 IP 或者 “源站域名”。</p>\n<p> 注意调整下回源 HOST：如果是 IP 回源，而且你的 IP 不是独立 IP，或者需要通过主机头进行区分的话。此时注意配置好回源主机头。建议采用第一步的备用域名，这样省事。当然也可以在主机上加一条 cdn 加速域名的主机绑定记录。</p>\n<p> 业务类型选择 “全站加速” 或者 “静态加速”。</p>\n<p> 缓存时间建议选择长一点。因为修改文件后，我一般是通过手动触发缓存刷新形式。如果你懒的这么做，可以设置短一点，它失效后会自动刷新。</p>\n<p> 如果有 ssl 密钥，那么直接上传配置好就可以。</p>\n<p> 最后配置好 cname，等待生效后就可以访问了。</p>\n</li>\n</ol>\n<h2 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h2><ol>\n<li><p>你如果配置了根域名（比如 <code>abc.com</code>），那就是根域名配置了 cname，此时根域名不能配置 mx 邮箱解析了（即不能分配 <code>test@abc.com</code> 这种形式的邮箱）。需要二选一。所以建议考虑使用 <code>www.abc.com</code> 这种域名配置 cdn。</p>\n</li>\n<li><p>注意观察缓存命中率。一般静态博客命中率应该比较高，全部缓存后，理论应该为 100%。一般也应该 80% 以上。当然前提是缓存后才有效。</p>\n</li>\n<li><p>自己访问 cdn 域名试试看，一般 cdn 厂商都会有特殊文件头返回。</p>\n<p> 比如阿里云，是 <code>x-cache: HIT ...</code>。确保第二次访问后，有 <code>HIT</code> 字样。</p>\n<blockquote>\n<p>查阅主要有两种方式</p>\n<ol>\n<li><p>使用 <code>curl -I https://abc.com</code> 来检查。</p>\n</li>\n<li><p>使用浏览器，开发者模式，关闭缓存（否则可能返回200 from cache，304 not modified），访问网站，查看 <code>network</code> 面板的访问记录。</p>\n</li>\n</ol>\n</blockquote>\n</li>\n</ol>"},{"layout":"post","title":"ajax 请求数据返回 302 的情况","date":"2018-05-09T23:45:00.000Z","_content":"\n今天遇到了一个奇葩问题，和同事有一些争论。内容大致是页面通过 ajax 发出请求，结果接口没能返回 json，返回了一个 302 页面，此时页面是否会直接进行跳转。\n\n本来这个问题不难，很明显的，通过 ajax 的请求，不论发生什么都不会跳转走。但是是否会再次自动发送请求呢？\n\n<!-- more -->\n\n服务端代码如下：\n\n```js\nconst Koa = require('koa')\nconst serve = require('koa-static')\nvar Router = require('koa-router')\nconst app = new Koa()\nvar router = new Router()\n\nrouter.get('/302', (ctx, next) => {\n    ctx.status = 302\n    ctx.redirect('/r.html')\n    next()\n})\n\napp.use(router.routes())\n   .use(router.allowedMethods())\n   .use(serve('public'))\n\napp.listen(3000)\n```\n\n页面代码如下：\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>ajax</title>\n</head>\n\n<body>\n    <script src=\"https://cdn.staticfile.org/jquery/1.12.4/jquery.min.js\"></script>\n    <script src=\"https://cdn.staticfile.org/axios/0.15.3/axios.min.js\"></script>\n    <script>\n        $.ajax({\n            url: 'http://localhost:3000/302',\n            dataType: 'json',\n            success: function (data, xhr) {\n                console.log('success', data, xhr)\n            },\n            error: function (xhr) {\n                console.log('err', xhr)\n            }\n        })\n\n        // axios.get('http://localhost:3000/302')\n    </script>\n</body>\n</html>\n```\n\n不论使用 jQuery 还是 axios，结果都是一样的。\n\n1. 页面发出请求，结果是返回了 302 页面。\n2. 如上文，jQuery 由于没办法按照 json 解析，所以进入了 error。如果不是定死 json，那么也可能进入 success 的。\n3. ajax 自动实现了 302，重新请求了新的地址。302 跳转的次数貌似有限制，jQuery 大概是限制 10 次左右，超过就不会在跳转了。axios 好像可以自己配置次数。\n4. 页面也的确没有跳转走。\n\n","source":"_posts/2018/2018-05-09-ajax-302.md","raw":"---\nlayout: post\ntitle: \"ajax 请求数据返回 302 的情况\"\ndate: 2018-05-09 23:45:00 GMT+0800\ncategories: [前端]\ntags:  [jquery,axios,ajax]\n---\n\n今天遇到了一个奇葩问题，和同事有一些争论。内容大致是页面通过 ajax 发出请求，结果接口没能返回 json，返回了一个 302 页面，此时页面是否会直接进行跳转。\n\n本来这个问题不难，很明显的，通过 ajax 的请求，不论发生什么都不会跳转走。但是是否会再次自动发送请求呢？\n\n<!-- more -->\n\n服务端代码如下：\n\n```js\nconst Koa = require('koa')\nconst serve = require('koa-static')\nvar Router = require('koa-router')\nconst app = new Koa()\nvar router = new Router()\n\nrouter.get('/302', (ctx, next) => {\n    ctx.status = 302\n    ctx.redirect('/r.html')\n    next()\n})\n\napp.use(router.routes())\n   .use(router.allowedMethods())\n   .use(serve('public'))\n\napp.listen(3000)\n```\n\n页面代码如下：\n\n```html\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>ajax</title>\n</head>\n\n<body>\n    <script src=\"https://cdn.staticfile.org/jquery/1.12.4/jquery.min.js\"></script>\n    <script src=\"https://cdn.staticfile.org/axios/0.15.3/axios.min.js\"></script>\n    <script>\n        $.ajax({\n            url: 'http://localhost:3000/302',\n            dataType: 'json',\n            success: function (data, xhr) {\n                console.log('success', data, xhr)\n            },\n            error: function (xhr) {\n                console.log('err', xhr)\n            }\n        })\n\n        // axios.get('http://localhost:3000/302')\n    </script>\n</body>\n</html>\n```\n\n不论使用 jQuery 还是 axios，结果都是一样的。\n\n1. 页面发出请求，结果是返回了 302 页面。\n2. 如上文，jQuery 由于没办法按照 json 解析，所以进入了 error。如果不是定死 json，那么也可能进入 success 的。\n3. ajax 自动实现了 302，重新请求了新的地址。302 跳转的次数貌似有限制，jQuery 大概是限制 10 次左右，超过就不会在跳转了。axios 好像可以自己配置次数。\n4. 页面也的确没有跳转走。\n\n","slug":"2018-2018-05-09-ajax-302","published":1,"updated":"2020-03-02T07:16:34.685Z","comments":1,"photos":[],"link":"","_id":"cka5ik8cb004pnybgdp1svkot","content":"<p>今天遇到了一个奇葩问题，和同事有一些争论。内容大致是页面通过 ajax 发出请求，结果接口没能返回 json，返回了一个 302 页面，此时页面是否会直接进行跳转。</p>\n<p>本来这个问题不难，很明显的，通过 ajax 的请求，不论发生什么都不会跳转走。但是是否会再次自动发送请求呢？</p>\n<a id=\"more\"></a>\n\n<p>服务端代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> serve = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> Router()</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/302'</span>, (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    ctx.status = <span class=\"number\">302</span></span><br><span class=\"line\">    ctx.redirect(<span class=\"string\">'/r.html'</span>)</span><br><span class=\"line\">    next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(router.routes())</span><br><span class=\"line\">   .use(router.allowedMethods())</span><br><span class=\"line\">   .use(serve(<span class=\"string\">'public'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>页面代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>ajax<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.staticfile.org/jquery/1.12.4/jquery.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.staticfile.org/axios/0.15.3/axios.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">        $.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            url: <span class=\"string\">'http://localhost:3000/302'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            dataType: <span class=\"string\">'json'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data, xhr</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'success'</span>, data, xhr)</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"javascript\">            error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">xhr</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'err'</span>, xhr)</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// axios.get('http://localhost:3000/302')</span></span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>不论使用 jQuery 还是 axios，结果都是一样的。</p>\n<ol>\n<li>页面发出请求，结果是返回了 302 页面。</li>\n<li>如上文，jQuery 由于没办法按照 json 解析，所以进入了 error。如果不是定死 json，那么也可能进入 success 的。</li>\n<li>ajax 自动实现了 302，重新请求了新的地址。302 跳转的次数貌似有限制，jQuery 大概是限制 10 次左右，超过就不会在跳转了。axios 好像可以自己配置次数。</li>\n<li>页面也的确没有跳转走。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>今天遇到了一个奇葩问题，和同事有一些争论。内容大致是页面通过 ajax 发出请求，结果接口没能返回 json，返回了一个 302 页面，此时页面是否会直接进行跳转。</p>\n<p>本来这个问题不难，很明显的，通过 ajax 的请求，不论发生什么都不会跳转走。但是是否会再次自动发送请求呢？</p>","more":"<p>服务端代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> serve = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"keyword\">new</span> Router()</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/302'</span>, (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    ctx.status = <span class=\"number\">302</span></span><br><span class=\"line\">    ctx.redirect(<span class=\"string\">'/r.html'</span>)</span><br><span class=\"line\">    next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(router.routes())</span><br><span class=\"line\">   .use(router.allowedMethods())</span><br><span class=\"line\">   .use(serve(<span class=\"string\">'public'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>页面代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>ajax<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.staticfile.org/jquery/1.12.4/jquery.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.staticfile.org/axios/0.15.3/axios.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">        $.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            url: <span class=\"string\">'http://localhost:3000/302'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            dataType: <span class=\"string\">'json'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data, xhr</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'success'</span>, data, xhr)</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"javascript\">            error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">xhr</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'err'</span>, xhr)</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// axios.get('http://localhost:3000/302')</span></span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>不论使用 jQuery 还是 axios，结果都是一样的。</p>\n<ol>\n<li>页面发出请求，结果是返回了 302 页面。</li>\n<li>如上文，jQuery 由于没办法按照 json 解析，所以进入了 error。如果不是定死 json，那么也可能进入 success 的。</li>\n<li>ajax 自动实现了 302，重新请求了新的地址。302 跳转的次数貌似有限制，jQuery 大概是限制 10 次左右，超过就不会在跳转了。axios 好像可以自己配置次数。</li>\n<li>页面也的确没有跳转走。</li>\n</ol>"},{"layout":"post","title":"重装 macOS","date":"2018-06-20T23:46:00.000Z","_content":"\n最近觉得 mac 垃圾文件太多了，也懒得清理，就找了了些重装 macOS 的资料，整理下写成文章。\n\n<!-- more -->\n\n## 下载 MacOS\n\n访问 [https://support.apple.com/zh-cn/HT201475](https://support.apple.com/zh-cn/HT201475)，下载最新的系统。\n\n目前最新的是 High Sierra，地址为 [http://appstore.com/mac/macoshighsierra](http://appstore.com/mac/macoshighsierra)，此地址会跳转 App Store，如果你已经下载过了，就不用重新下载了。\n\nHigh Sierra 系统大概是 5.23G。\n\n## 将系统写入启动 U 盘\n\n> 参考文章：[https://support.apple.com/zh-cn/HT201372](https://support.apple.com/zh-cn/HT201372)\n\n这一步需要敲命令，不过非常简单。\n\n1. 前提：你的 U 盘，不少于 12G。这个容量是苹果给出的。我用的16G的。\n\n2. 首先确保你的 U 盘卷标为 `SYS`，如果不是的话，下面的 `SYS` 需要替换成你的 U 盘卷标。\n\n3. 建议用全大写单词，减少错误出现。\n\n    > 修改卷标的方法\n    >\n    > Mac 系统，插入 U 盘，桌面会出现图标。点击图标，按 `回车` 键。修改后，按 `回车` 键确认。\n\n4. 打开 `终端`，根据你的系统，参考上面的文章，敲命令。我的是 High Sierra，命令如下：\n\n    ```bash\n    sudo /Applications/Install\\ macOS\\ High\\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/SYS --applicationpath /Applications/Install\\ macOS\\ High\\ Sierra.app\n    ```\n    \n    > 如果按照原文操作，提示错误：\n    >\n    > ```bash\n    > /Volumes/MyVolume is not a valid volume mount point.\n    > ```\n    > \n    > 则表示找不到 `MyVolume` 的 U 盘，可能是你名称不对，也可能是系统给你改名了，比如改成了 `MyVolume 1`。（可以到 `/Volumes/` 目录检查下）\n    > \n    > 建议重新改个全大写的单词，重新插拔 U 盘就可以了。\n\n5. 上一步之后，会要求输入系统密码（密码输入时候不会有任何提示），输入完成，回车确认。\n6. 当提示 `If you wish to continue type (Y) then press return: ` 时候，输入 `Y`，并且 `回车`。\n7. 等待，我大概等了5分钟（和 U 盘速度有关）。\n8. 直到出现以下内容，就算完成了：\n\n    ```bash\n    Erasing Disk: 0%... 10%... 20%... 30%...100%...\n    Copying installer files to disk...\n    Copy complete.\n    Making disk bootable...\n    Copying boot files...\n    Copy complete.\n    Done.\n    ```\n\n**安装盘制作完毕。**\n\n## 安装系统\n\n1. 插好 U 盘\n2. 重启 Mac 电脑，重启时候按住 `option` 键，直到看到硬盘选择的界面，选择 `Install MacOS` 这个，需要点击下方的箭头：\n    ![img](https://cdn0.yukapril.com/blog/2018-06-20-install-macos-1.JPG-wm.white)\n3.  之后会询问安装到哪里，因为只有一块硬盘（第二个是插入的 U 盘），所以默认选择第一个就行，点击 `安装` \n    ![img](https://cdn0.yukapril.com/blog/2018-06-20-install-macos-2.JPG-wm.white)\n4. 进入实用工具界面，由于我是打算清空硬盘所有内容，再安装。所以先进入 `磁盘工具`，格式化整块硬盘：\n    ![img](https://cdn0.yukapril.com/blog/2018-06-20-install-macos-3.JPG-wm.white)\n5. 选择硬盘后，点击 `抹掉`，可以选择格式。建议选择区分大小写，这样和 linux 是一致的。至于加密与否，我觉得无所谓吧。默认是 `加密（不区分大小写）`：\n    ![img](https://cdn0.yukapril.com/blog/2018-06-20-install-macos-4.JPG-wm.white)\n6. 最后返回到第四步的实用工具页，选择 `安装 macOS` 就好了。剩下的就没什么可说的了：\n    ![img](https://cdn0.yukapril.com/blog/2018-06-20-install-macos-5.JPG-wm.white)\n\n## 小结\n\n我一直以为 macOS 很稳定，所以重装做的也非常复杂。其实跟着步骤操作，比起 Windows 可能还要更简单。\n\n唯独的问题就是你必须有一个正常运行的 macOS 系统来制作第一步的启动盘。\n\n其实启动盘可以不提前做，据说可以安装时候自动下载，不过这么大的容量，估计网络安装会非常慢。大部分人都不推荐这么做，除非真的 mac 已经启动不了了吧。","source":"_posts/2018/2018-06-20-install-macos.md","raw":"---\nlayout: post\ntitle: \"重装 macOS\"\ndate: 2018-06-20 23:46:00 GMT+0800\ncategories: [杂谈]\ntags:  [macOS,重装系统]\n---\n\n最近觉得 mac 垃圾文件太多了，也懒得清理，就找了了些重装 macOS 的资料，整理下写成文章。\n\n<!-- more -->\n\n## 下载 MacOS\n\n访问 [https://support.apple.com/zh-cn/HT201475](https://support.apple.com/zh-cn/HT201475)，下载最新的系统。\n\n目前最新的是 High Sierra，地址为 [http://appstore.com/mac/macoshighsierra](http://appstore.com/mac/macoshighsierra)，此地址会跳转 App Store，如果你已经下载过了，就不用重新下载了。\n\nHigh Sierra 系统大概是 5.23G。\n\n## 将系统写入启动 U 盘\n\n> 参考文章：[https://support.apple.com/zh-cn/HT201372](https://support.apple.com/zh-cn/HT201372)\n\n这一步需要敲命令，不过非常简单。\n\n1. 前提：你的 U 盘，不少于 12G。这个容量是苹果给出的。我用的16G的。\n\n2. 首先确保你的 U 盘卷标为 `SYS`，如果不是的话，下面的 `SYS` 需要替换成你的 U 盘卷标。\n\n3. 建议用全大写单词，减少错误出现。\n\n    > 修改卷标的方法\n    >\n    > Mac 系统，插入 U 盘，桌面会出现图标。点击图标，按 `回车` 键。修改后，按 `回车` 键确认。\n\n4. 打开 `终端`，根据你的系统，参考上面的文章，敲命令。我的是 High Sierra，命令如下：\n\n    ```bash\n    sudo /Applications/Install\\ macOS\\ High\\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/SYS --applicationpath /Applications/Install\\ macOS\\ High\\ Sierra.app\n    ```\n    \n    > 如果按照原文操作，提示错误：\n    >\n    > ```bash\n    > /Volumes/MyVolume is not a valid volume mount point.\n    > ```\n    > \n    > 则表示找不到 `MyVolume` 的 U 盘，可能是你名称不对，也可能是系统给你改名了，比如改成了 `MyVolume 1`。（可以到 `/Volumes/` 目录检查下）\n    > \n    > 建议重新改个全大写的单词，重新插拔 U 盘就可以了。\n\n5. 上一步之后，会要求输入系统密码（密码输入时候不会有任何提示），输入完成，回车确认。\n6. 当提示 `If you wish to continue type (Y) then press return: ` 时候，输入 `Y`，并且 `回车`。\n7. 等待，我大概等了5分钟（和 U 盘速度有关）。\n8. 直到出现以下内容，就算完成了：\n\n    ```bash\n    Erasing Disk: 0%... 10%... 20%... 30%...100%...\n    Copying installer files to disk...\n    Copy complete.\n    Making disk bootable...\n    Copying boot files...\n    Copy complete.\n    Done.\n    ```\n\n**安装盘制作完毕。**\n\n## 安装系统\n\n1. 插好 U 盘\n2. 重启 Mac 电脑，重启时候按住 `option` 键，直到看到硬盘选择的界面，选择 `Install MacOS` 这个，需要点击下方的箭头：\n    ![img](https://cdn0.yukapril.com/blog/2018-06-20-install-macos-1.JPG-wm.white)\n3.  之后会询问安装到哪里，因为只有一块硬盘（第二个是插入的 U 盘），所以默认选择第一个就行，点击 `安装` \n    ![img](https://cdn0.yukapril.com/blog/2018-06-20-install-macos-2.JPG-wm.white)\n4. 进入实用工具界面，由于我是打算清空硬盘所有内容，再安装。所以先进入 `磁盘工具`，格式化整块硬盘：\n    ![img](https://cdn0.yukapril.com/blog/2018-06-20-install-macos-3.JPG-wm.white)\n5. 选择硬盘后，点击 `抹掉`，可以选择格式。建议选择区分大小写，这样和 linux 是一致的。至于加密与否，我觉得无所谓吧。默认是 `加密（不区分大小写）`：\n    ![img](https://cdn0.yukapril.com/blog/2018-06-20-install-macos-4.JPG-wm.white)\n6. 最后返回到第四步的实用工具页，选择 `安装 macOS` 就好了。剩下的就没什么可说的了：\n    ![img](https://cdn0.yukapril.com/blog/2018-06-20-install-macos-5.JPG-wm.white)\n\n## 小结\n\n我一直以为 macOS 很稳定，所以重装做的也非常复杂。其实跟着步骤操作，比起 Windows 可能还要更简单。\n\n唯独的问题就是你必须有一个正常运行的 macOS 系统来制作第一步的启动盘。\n\n其实启动盘可以不提前做，据说可以安装时候自动下载，不过这么大的容量，估计网络安装会非常慢。大部分人都不推荐这么做，除非真的 mac 已经启动不了了吧。","slug":"2018-2018-06-20-install-macos","published":1,"updated":"2020-03-06T01:18:11.713Z","comments":1,"photos":[],"link":"","_id":"cka5ik8cc004rnybgxagczzij","content":"<p>最近觉得 mac 垃圾文件太多了，也懒得清理，就找了了些重装 macOS 的资料，整理下写成文章。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"下载-MacOS\"><a href=\"#下载-MacOS\" class=\"headerlink\" title=\"下载 MacOS\"></a>下载 MacOS</h2><p>访问 <a href=\"https://support.apple.com/zh-cn/HT201475\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/zh-cn/HT201475</a>，下载最新的系统。</p>\n<p>目前最新的是 High Sierra，地址为 <a href=\"http://appstore.com/mac/macoshighsierra\" target=\"_blank\" rel=\"noopener\">http://appstore.com/mac/macoshighsierra</a>，此地址会跳转 App Store，如果你已经下载过了，就不用重新下载了。</p>\n<p>High Sierra 系统大概是 5.23G。</p>\n<h2 id=\"将系统写入启动-U-盘\"><a href=\"#将系统写入启动-U-盘\" class=\"headerlink\" title=\"将系统写入启动 U 盘\"></a>将系统写入启动 U 盘</h2><blockquote>\n<p>参考文章：<a href=\"https://support.apple.com/zh-cn/HT201372\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/zh-cn/HT201372</a></p>\n</blockquote>\n<p>这一步需要敲命令，不过非常简单。</p>\n<ol>\n<li><p>前提：你的 U 盘，不少于 12G。这个容量是苹果给出的。我用的16G的。</p>\n</li>\n<li><p>首先确保你的 U 盘卷标为 <code>SYS</code>，如果不是的话，下面的 <code>SYS</code> 需要替换成你的 U 盘卷标。</p>\n</li>\n<li><p>建议用全大写单词，减少错误出现。</p>\n<blockquote>\n<p>修改卷标的方法</p>\n<p>Mac 系统，插入 U 盘，桌面会出现图标。点击图标，按 <code>回车</code> 键。修改后，按 <code>回车</code> 键确认。</p>\n</blockquote>\n</li>\n<li><p>打开 <code>终端</code>，根据你的系统，参考上面的文章，敲命令。我的是 High Sierra，命令如下：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /Applications/Install\\ macOS\\ High\\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/SYS --applicationpath /Applications/Install\\ macOS\\ High\\ Sierra.app</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<pre><code>&gt; 如果按照原文操作，提示错误：\n&gt;\n&gt; <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; /Volumes/MyVolume is not a valid volume mount point.</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n\n&gt; \n&gt; 则表示找不到 `MyVolume` 的 U 盘，可能是你名称不对，也可能是系统给你改名了，比如改成了 `MyVolume 1`。（可以到 `/Volumes/` 目录检查下）\n&gt; \n&gt; 建议重新改个全大写的单词，重新插拔 U 盘就可以了。</code></pre><ol start=\"5\">\n<li><p>上一步之后，会要求输入系统密码（密码输入时候不会有任何提示），输入完成，回车确认。</p>\n</li>\n<li><p>当提示 <code>If you wish to continue type (Y) then press return:</code> 时候，输入 <code>Y</code>，并且 <code>回车</code>。</p>\n</li>\n<li><p>等待，我大概等了5分钟（和 U 盘速度有关）。</p>\n</li>\n<li><p>直到出现以下内容，就算完成了：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Erasing Disk: 0%... 10%... 20%... 30%...100%...</span><br><span class=\"line\">Copying installer files to disk...</span><br><span class=\"line\">Copy complete.</span><br><span class=\"line\">Making disk bootable...</span><br><span class=\"line\">Copying boot files...</span><br><span class=\"line\">Copy complete.</span><br><span class=\"line\">Done.</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p><strong>安装盘制作完毕。</strong></p>\n<h2 id=\"安装系统\"><a href=\"#安装系统\" class=\"headerlink\" title=\"安装系统\"></a>安装系统</h2><ol>\n<li>插好 U 盘</li>\n<li>重启 Mac 电脑，重启时候按住 <code>option</code> 键，直到看到硬盘选择的界面，选择 <code>Install MacOS</code> 这个，需要点击下方的箭头：<br> <img src=\"https://cdn0.yukapril.com/blog/2018-06-20-install-macos-1.JPG-wm.white\" alt=\"img\"></li>\n<li>之后会询问安装到哪里，因为只有一块硬盘（第二个是插入的 U 盘），所以默认选择第一个就行，点击 <code>安装</code><br><img src=\"https://cdn0.yukapril.com/blog/2018-06-20-install-macos-2.JPG-wm.white\" alt=\"img\"></li>\n<li>进入实用工具界面，由于我是打算清空硬盘所有内容，再安装。所以先进入 <code>磁盘工具</code>，格式化整块硬盘：<br> <img src=\"https://cdn0.yukapril.com/blog/2018-06-20-install-macos-3.JPG-wm.white\" alt=\"img\"></li>\n<li>选择硬盘后，点击 <code>抹掉</code>，可以选择格式。建议选择区分大小写，这样和 linux 是一致的。至于加密与否，我觉得无所谓吧。默认是 <code>加密（不区分大小写）</code>：<br> <img src=\"https://cdn0.yukapril.com/blog/2018-06-20-install-macos-4.JPG-wm.white\" alt=\"img\"></li>\n<li>最后返回到第四步的实用工具页，选择 <code>安装 macOS</code> 就好了。剩下的就没什么可说的了：<br> <img src=\"https://cdn0.yukapril.com/blog/2018-06-20-install-macos-5.JPG-wm.white\" alt=\"img\"></li>\n</ol>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>我一直以为 macOS 很稳定，所以重装做的也非常复杂。其实跟着步骤操作，比起 Windows 可能还要更简单。</p>\n<p>唯独的问题就是你必须有一个正常运行的 macOS 系统来制作第一步的启动盘。</p>\n<p>其实启动盘可以不提前做，据说可以安装时候自动下载，不过这么大的容量，估计网络安装会非常慢。大部分人都不推荐这么做，除非真的 mac 已经启动不了了吧。</p>\n","site":{"data":{}},"excerpt":"<p>最近觉得 mac 垃圾文件太多了，也懒得清理，就找了了些重装 macOS 的资料，整理下写成文章。</p>","more":"<h2 id=\"下载-MacOS\"><a href=\"#下载-MacOS\" class=\"headerlink\" title=\"下载 MacOS\"></a>下载 MacOS</h2><p>访问 <a href=\"https://support.apple.com/zh-cn/HT201475\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/zh-cn/HT201475</a>，下载最新的系统。</p>\n<p>目前最新的是 High Sierra，地址为 <a href=\"http://appstore.com/mac/macoshighsierra\" target=\"_blank\" rel=\"noopener\">http://appstore.com/mac/macoshighsierra</a>，此地址会跳转 App Store，如果你已经下载过了，就不用重新下载了。</p>\n<p>High Sierra 系统大概是 5.23G。</p>\n<h2 id=\"将系统写入启动-U-盘\"><a href=\"#将系统写入启动-U-盘\" class=\"headerlink\" title=\"将系统写入启动 U 盘\"></a>将系统写入启动 U 盘</h2><blockquote>\n<p>参考文章：<a href=\"https://support.apple.com/zh-cn/HT201372\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/zh-cn/HT201372</a></p>\n</blockquote>\n<p>这一步需要敲命令，不过非常简单。</p>\n<ol>\n<li><p>前提：你的 U 盘，不少于 12G。这个容量是苹果给出的。我用的16G的。</p>\n</li>\n<li><p>首先确保你的 U 盘卷标为 <code>SYS</code>，如果不是的话，下面的 <code>SYS</code> 需要替换成你的 U 盘卷标。</p>\n</li>\n<li><p>建议用全大写单词，减少错误出现。</p>\n<blockquote>\n<p>修改卷标的方法</p>\n<p>Mac 系统，插入 U 盘，桌面会出现图标。点击图标，按 <code>回车</code> 键。修改后，按 <code>回车</code> 键确认。</p>\n</blockquote>\n</li>\n<li><p>打开 <code>终端</code>，根据你的系统，参考上面的文章，敲命令。我的是 High Sierra，命令如下：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /Applications/Install\\ macOS\\ High\\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/SYS --applicationpath /Applications/Install\\ macOS\\ High\\ Sierra.app</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<pre><code>&gt; 如果按照原文操作，提示错误：\n&gt;\n&gt; <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; /Volumes/MyVolume is not a valid volume mount point.</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n\n&gt; \n&gt; 则表示找不到 `MyVolume` 的 U 盘，可能是你名称不对，也可能是系统给你改名了，比如改成了 `MyVolume 1`。（可以到 `/Volumes/` 目录检查下）\n&gt; \n&gt; 建议重新改个全大写的单词，重新插拔 U 盘就可以了。</code></pre><ol start=\"5\">\n<li><p>上一步之后，会要求输入系统密码（密码输入时候不会有任何提示），输入完成，回车确认。</p>\n</li>\n<li><p>当提示 <code>If you wish to continue type (Y) then press return:</code> 时候，输入 <code>Y</code>，并且 <code>回车</code>。</p>\n</li>\n<li><p>等待，我大概等了5分钟（和 U 盘速度有关）。</p>\n</li>\n<li><p>直到出现以下内容，就算完成了：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Erasing Disk: 0%... 10%... 20%... 30%...100%...</span><br><span class=\"line\">Copying installer files to disk...</span><br><span class=\"line\">Copy complete.</span><br><span class=\"line\">Making disk bootable...</span><br><span class=\"line\">Copying boot files...</span><br><span class=\"line\">Copy complete.</span><br><span class=\"line\">Done.</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p><strong>安装盘制作完毕。</strong></p>\n<h2 id=\"安装系统\"><a href=\"#安装系统\" class=\"headerlink\" title=\"安装系统\"></a>安装系统</h2><ol>\n<li>插好 U 盘</li>\n<li>重启 Mac 电脑，重启时候按住 <code>option</code> 键，直到看到硬盘选择的界面，选择 <code>Install MacOS</code> 这个，需要点击下方的箭头：<br> <img src=\"https://cdn0.yukapril.com/blog/2018-06-20-install-macos-1.JPG-wm.white\" alt=\"img\"></li>\n<li>之后会询问安装到哪里，因为只有一块硬盘（第二个是插入的 U 盘），所以默认选择第一个就行，点击 <code>安装</code><br><img src=\"https://cdn0.yukapril.com/blog/2018-06-20-install-macos-2.JPG-wm.white\" alt=\"img\"></li>\n<li>进入实用工具界面，由于我是打算清空硬盘所有内容，再安装。所以先进入 <code>磁盘工具</code>，格式化整块硬盘：<br> <img src=\"https://cdn0.yukapril.com/blog/2018-06-20-install-macos-3.JPG-wm.white\" alt=\"img\"></li>\n<li>选择硬盘后，点击 <code>抹掉</code>，可以选择格式。建议选择区分大小写，这样和 linux 是一致的。至于加密与否，我觉得无所谓吧。默认是 <code>加密（不区分大小写）</code>：<br> <img src=\"https://cdn0.yukapril.com/blog/2018-06-20-install-macos-4.JPG-wm.white\" alt=\"img\"></li>\n<li>最后返回到第四步的实用工具页，选择 <code>安装 macOS</code> 就好了。剩下的就没什么可说的了：<br> <img src=\"https://cdn0.yukapril.com/blog/2018-06-20-install-macos-5.JPG-wm.white\" alt=\"img\"></li>\n</ol>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>我一直以为 macOS 很稳定，所以重装做的也非常复杂。其实跟着步骤操作，比起 Windows 可能还要更简单。</p>\n<p>唯独的问题就是你必须有一个正常运行的 macOS 系统来制作第一步的启动盘。</p>\n<p>其实启动盘可以不提前做，据说可以安装时候自动下载，不过这么大的容量，估计网络安装会非常慢。大部分人都不推荐这么做，除非真的 mac 已经启动不了了吧。</p>"},{"layout":"post","title":"前端 ajax 请求跨域处理","date":"2018-05-17T23:23:00.000Z","_content":"\n最近在做一个前后端分离的项目，业务管理平台。一个前端项目要对应多个后端接口地址，免不了各种跨域，查了一些资料，做一个小结。\n\n<!-- more -->\n\n## 什么是跨域\n\n或许，什么不是跨域更好来解释：\n\n比如网站A，请求了网站B （https://abc.com:8080/api/test）\n\n* 协议相同，比如 https\n* 域名相同，比如 abc.com（或者是 IP 相同）\n* 端口相同，比如 8080\n\n要注意的是，不仅仅是 js 可能跨域，css iframe 都有可能跨域。\n\n跨域主要限制在脚本（js css）请求上，对于 html 中加载资源，不算跨域。\n\n比如 网站A `http://abc.com`，有：\n\n```html\n<img src=\"http://12.34.56.78/xx.png\">\n<script src=\"https://cdn.abc.com/xx.js\"></script>\n```\n\n这些都不算做跨域。\n\n但是上面这个 js，只能往当前网站A 的 `http://abc.com` 下发送请求，否则就算跨域。\n\n也就是说，当前网站地址是啥，就只能往哪里发送请求（iframe 不再考虑范围内）。\n\n**跨域的重点说明：**\n\n跨域发出的请求，是默认放行而且可以成功的，因为浏览器不清楚服务器端是否支持跨域。\n\n但是成功的请求，如果跨域了，是不会回调 js 代码的，这个是浏览器的保护机制。所以，下文的预请求原因很关键。\n\n## 说明\n\n前端的话，主要以 `jQuery` 或 `axios` 为例。\n\n由于后端代码实现语言不同，故这里只说接口的响应头应该带有哪些信息，具体实现方法或者框架（库 / 包）请自行搜索。主要关注 `cors` `headers` 关键词。本文以 nodejs 的 `koa2` 框架为例。\n\n比如 JAVA spring 框架，可以考虑 ：\n\n```java\nresponse.setHeader(\"Access-Control-Allow-Origin\", \"*\")\n```\n\n也可以考虑注解形式（`@CrossOrigin`），好像是 4.2 之后的版本开始支持注解。\n\n演示代码在这里：[Github](https://github.com/yukapril/learning/tree/master/cross-domain)\n\n以下约定：\n\n前端页面使用：http://127.0.0.1:3100\n\n后端接口使用：http://localhost:3000\n\n这样故意制造跨域。\n\n此外，本文指的是真真正的的跨域，访问真正的数据接口，而不是 JSONP 接口。\n\n## 简单的跨域处理\n\n简单的跨域主要指发起了简单的请求。\n\n满足简单请求的要求是：\n\n1. 只能是 `GET` `POST` `HEAD` 请求方法。而且如果是 `POST` 的话，发送数据类型必须是 `application/x-www-form-urlencoded`、`multipart/form-data`、`text/plain` 之一，其他类型不可以。\n2. 不能自定义请求头，比如加上 `x-token` 什么的。当然也不能带上 `cookie`。\n\n实现跨域非常简单，后端接口需要返回以下一个响应头即可：\n\n```js\nctx.set('Access-Control-Allow-Origin', 'http://127.0.0.1:3000') // 可以用 * 代替网址\n```\n\n**前端代码无需特殊处理，即可正常接收数据。例子参考 DEMO1。**\n\n或许你见过 `ctx.set('Access-Control-Allow-Methods', 'GET, POST, HEAD, DELETE, OPTIONS')` 这种写法，我们这就来说。\n\n上面的简单跨域，只能是 `GET` `POST` `HEAD` 方法，如果我是 RESTful 风格的接口，偏偏要用 `DELETE` 怎么办？\n\n或者，我们交互数据，默认类型不是表单格式 `application/x-www-form-urlencoded`，是 `application/json` 格式？\n\n再或者，需要上送特殊的请求头，比如 `x-token` ？\n\n这时候，就是非简单的请求了。\n\n## 高级跨域处理（预请求）\n\n上面说到了非简单请求，这种请求有个特点，要先发送一次请求，查一下服务器支持那些特性。这个是通过 `OPTIONS` 方法请求出去的。\n\n为什么要有预请求？\n\n> 假设你要跨域删除一条数据，使用 `DELETE` 方法。\n>\n> 此时你请求发出去了，服务器正常处理删除了数据。但是由于跨域，导致了前端代码无法成功接收到状态，也就无法进行后续处理，对于操作的用户，不知道是否成功了。\n>\n> 那么，用户可能会反复进行删除，或者进行了更进一步错误的操作。\n>\n> 这就麻烦了，跨域请求发出去了，也成功了，但是前端代码收不到结果...\n>\n> 所以，在发送 `DELETE` 请求前，先发送一个 `OPTIONS` 方法的请求，确认下能否跨域，如果可以的话，在发送第二条真正的删除请求。否则，第二条干脆就不发送了。这样就不会遇到上面的问题了。\n\n**所以，预请求用来查明该站点是否允许跨域请求，这样可以避免跨域请求可能带来的数据破坏。**\n\n这种情况实现也还好，不过要注意需要实现 `OPTIONS` 方法：\n\n```js\nrouter.options('/deleteData', (ctx, next) => {\n  ctx.set('Access-Control-Allow-Origin', 'http://127.0.0.1:3000')\n  ctx.set('Access-Control-Allow-Methods', 'GET, POST, HEAD, DELETE, OPTIONS')\n  ctx.set('Access-Control-Allow-Headers', 'x-token')\n  // OPTIONS 方法不需要返回任何实体内容，而且应该与最终调用的方法返回的头信息保持一致\n})\n\nrouter.delete('/deleteData', (ctx, next) => {\n  ctx.set('Access-Control-Allow-Origin', 'http://127.0.0.1:3000')\n  ctx.set('Access-Control-Allow-Methods', 'GET, POST, HEAD, DELETE, OPTIONS')\n  ctx.set('Access-Control-Allow-Headers', 'x-token')\n  // ...\n})\n```\n\n**前端代码的话，都还是正常写就可以了。不需要加任何额外的参数属性。例子参考 DEMO2。**\n\n对于上面的允许的 Headers 头部配置，这个含义是可以支持带有 `x-token` 的请求，当然你不带上也是可以的。但是你带上了其他字段，比如 `x-abc`，那么就不行了。\n\n## 带 cookie 的请求\n\n上面的两个例子，对于跨域来说，基本上能解决很多问题，比如请求第三方查天气接口，每次请求带上自己的 key 就可以了。跨域处理起来也不算太难。\n\n下面开始说说复杂一点的。\n\n需求是这样的：\n\n* 前后端分离项目，不部署在一起。为了和代码统一，下文用本地环境说明\n\n* 前端域名A（http://127.0.0.1:3000），后端接口域名B（http://localhost:3100）\n\n* 前端要先调用登录接口，同时接口会返回状态，并写入 `cookie` （其实就是 `session`）\n\n* 前端调用其他接口，需要带上当前的 `cookie`（这样后端相当于知道了 `session` 就知道是谁了），才可以获取数据\n\n这次就必须前后端都要修改代码了。\n\n#### 首先是前端部分，相对简单一些：\n\n```js\n    $.ajax({\n      url: 'http://localhost:3100/login',\n      type: 'post',\n      xhrFields: {\n        withCredentials: true\n      }\n    })\n```\n\n需要增加 `withCredentials` 字段，axios 也是需要设置此字段。\n\n**只有设置 `withCredentials` 字段，才能发送/接收 cookie**。比如上面的这个登录接口，虽然不需要上送 cookie，但是要接收后端的响应头 `Set-Cookie`，所以登录接口就必须开启。\n\n可以在控制台中查看下，跨域请求 http://localhost:3100/login，返回时候有响应头：\n\n```\nSet-Cookie: SESSION=123456789; path=/; httponly\n```\n\n这个 cookie 是属于 localhost 域名下的，**所以在 http://127.0.0.1:3000 下查看 cookie 是看不到的**。\n\n如果非要想看下，那么只能访问 http://localhost:3000，然后在控制台中查阅 Application 选项卡内容。\n\n后续请求数据的接口亦如此，否则不能上送登录接口获取到的 cookie。\n\n#### 后端部分\n\n```js\nrouter.post('/login', (ctx, next) => {\n  ctx.set('Access-Control-Allow-Origin', 'http://127.0.0.1:3000')\n  ctx.set('Access-Control-Allow-Credentials', true)\n  ctx.cookies.set('SESSION', '123456789')\n  ctx.body = {code: 0, data: 'login ok!'}\n  next()\n})\n\nrouter.post('/loginedData', (ctx, next) => {\n  ctx.set('Access-Control-Allow-Origin', 'http://127.0.0.1:3000')\n  ctx.set('Access-Control-Allow-Credentials', true)\n  ctx.body = {code: 0, data: ctx.headers}\n  next()\n})\n```\n\n后端部分，难度不大， 但是要注意几点：\n\n* `Access-Control-Allow-Origin` 不可以是 `*` （星号），必须是具体网站地址\n* `Access-Control-Allow-Credentials` 必须配置为 `true`\n* 如果是非简单请求，还需要像 DEMO2 一样，返回 `Access-Control-Allow-Methods` 字段\n* 如果是非简单请求，注意实现 `OPTIONS` 方法，这个例子是简单请求，所以就没实现 `OPTIONS`\n\n## 总结\n\n#### 前端\n\n1. 标准的 ajax 跨域请求，只要不需要带上cookie，那么和常规 ajax 写法一样，不需要额外加任何参数；\n2. 如果 ajax 要带上 cookie 进行跨域，那么必须增加 `withCredentials` 字段。\n\n#### 后端\n\n1. 请使用封装好的库、插件、组件等，本文以上内容，基本上都可以直接用插件直接解决，不需要自己手动配置；\n\n2. 非要手动配置，可以参考如下方案配置：\n\n* 只要是跨域，就必须增加 `Access-Control-Allow-Origin` \n\n* 需要带上（处理）cookie，就必须增加 `Access-Control-Allow-Credentials`，而且 `Access-Control-Allow-Origin` 不可以设置为 `*`\n\n* 请求是简单请求吗？简单请求的定义参考上文 “简单的跨域处理” 部分。是的话不需要其他字段了，不是的话，根据情况增加字段：\n\n  | 响应头                            | 解释         | 备注                                       |\n  | ------------------------------ | ---------- | ---------------------------------------- |\n  | `Access-Control-Allow-Methods` | 服务器接受那些方法  | 不配置的话，默认相当于 \"HEAD, GET, POST\"            |\n  | `Access-Control-Allow-Headers` | 服务器接受那些请求头 | 请求中带有或不带有此字段，可以成功；请求中带有其他字段，整个请求失败（没有通过 `OPTIONS` 请求） |\n\n  其他响应头，建议搜索查表。我认为用的很少，就不列举了。\n\n## 参考文章\n\n[跨域的那些事儿](https://zhuanlan.zhihu.com/p/28562290)\n\n[CORS详解](https://github.com/hstarorg/HstarDoc/blob/master/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/CORS%E8%AF%A6%E8%A7%A3.md)\n\n[跨域资源共享 CORS 详解](http://www.ruanyifeng.com/blog/2016/04/cors.html)\n\n[HTTP Headers - MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers)","source":"_posts/2018/2018-05-17-cross-domain.md","raw":"---\nlayout: post\ntitle: \"前端 ajax 请求跨域处理\"\ndate: 2018-05-17 23:23:00 GMT+0800\ncategories: [前端]\ntags:  [cross domain,ajax,jquery,axios]\n---\n\n最近在做一个前后端分离的项目，业务管理平台。一个前端项目要对应多个后端接口地址，免不了各种跨域，查了一些资料，做一个小结。\n\n<!-- more -->\n\n## 什么是跨域\n\n或许，什么不是跨域更好来解释：\n\n比如网站A，请求了网站B （https://abc.com:8080/api/test）\n\n* 协议相同，比如 https\n* 域名相同，比如 abc.com（或者是 IP 相同）\n* 端口相同，比如 8080\n\n要注意的是，不仅仅是 js 可能跨域，css iframe 都有可能跨域。\n\n跨域主要限制在脚本（js css）请求上，对于 html 中加载资源，不算跨域。\n\n比如 网站A `http://abc.com`，有：\n\n```html\n<img src=\"http://12.34.56.78/xx.png\">\n<script src=\"https://cdn.abc.com/xx.js\"></script>\n```\n\n这些都不算做跨域。\n\n但是上面这个 js，只能往当前网站A 的 `http://abc.com` 下发送请求，否则就算跨域。\n\n也就是说，当前网站地址是啥，就只能往哪里发送请求（iframe 不再考虑范围内）。\n\n**跨域的重点说明：**\n\n跨域发出的请求，是默认放行而且可以成功的，因为浏览器不清楚服务器端是否支持跨域。\n\n但是成功的请求，如果跨域了，是不会回调 js 代码的，这个是浏览器的保护机制。所以，下文的预请求原因很关键。\n\n## 说明\n\n前端的话，主要以 `jQuery` 或 `axios` 为例。\n\n由于后端代码实现语言不同，故这里只说接口的响应头应该带有哪些信息，具体实现方法或者框架（库 / 包）请自行搜索。主要关注 `cors` `headers` 关键词。本文以 nodejs 的 `koa2` 框架为例。\n\n比如 JAVA spring 框架，可以考虑 ：\n\n```java\nresponse.setHeader(\"Access-Control-Allow-Origin\", \"*\")\n```\n\n也可以考虑注解形式（`@CrossOrigin`），好像是 4.2 之后的版本开始支持注解。\n\n演示代码在这里：[Github](https://github.com/yukapril/learning/tree/master/cross-domain)\n\n以下约定：\n\n前端页面使用：http://127.0.0.1:3100\n\n后端接口使用：http://localhost:3000\n\n这样故意制造跨域。\n\n此外，本文指的是真真正的的跨域，访问真正的数据接口，而不是 JSONP 接口。\n\n## 简单的跨域处理\n\n简单的跨域主要指发起了简单的请求。\n\n满足简单请求的要求是：\n\n1. 只能是 `GET` `POST` `HEAD` 请求方法。而且如果是 `POST` 的话，发送数据类型必须是 `application/x-www-form-urlencoded`、`multipart/form-data`、`text/plain` 之一，其他类型不可以。\n2. 不能自定义请求头，比如加上 `x-token` 什么的。当然也不能带上 `cookie`。\n\n实现跨域非常简单，后端接口需要返回以下一个响应头即可：\n\n```js\nctx.set('Access-Control-Allow-Origin', 'http://127.0.0.1:3000') // 可以用 * 代替网址\n```\n\n**前端代码无需特殊处理，即可正常接收数据。例子参考 DEMO1。**\n\n或许你见过 `ctx.set('Access-Control-Allow-Methods', 'GET, POST, HEAD, DELETE, OPTIONS')` 这种写法，我们这就来说。\n\n上面的简单跨域，只能是 `GET` `POST` `HEAD` 方法，如果我是 RESTful 风格的接口，偏偏要用 `DELETE` 怎么办？\n\n或者，我们交互数据，默认类型不是表单格式 `application/x-www-form-urlencoded`，是 `application/json` 格式？\n\n再或者，需要上送特殊的请求头，比如 `x-token` ？\n\n这时候，就是非简单的请求了。\n\n## 高级跨域处理（预请求）\n\n上面说到了非简单请求，这种请求有个特点，要先发送一次请求，查一下服务器支持那些特性。这个是通过 `OPTIONS` 方法请求出去的。\n\n为什么要有预请求？\n\n> 假设你要跨域删除一条数据，使用 `DELETE` 方法。\n>\n> 此时你请求发出去了，服务器正常处理删除了数据。但是由于跨域，导致了前端代码无法成功接收到状态，也就无法进行后续处理，对于操作的用户，不知道是否成功了。\n>\n> 那么，用户可能会反复进行删除，或者进行了更进一步错误的操作。\n>\n> 这就麻烦了，跨域请求发出去了，也成功了，但是前端代码收不到结果...\n>\n> 所以，在发送 `DELETE` 请求前，先发送一个 `OPTIONS` 方法的请求，确认下能否跨域，如果可以的话，在发送第二条真正的删除请求。否则，第二条干脆就不发送了。这样就不会遇到上面的问题了。\n\n**所以，预请求用来查明该站点是否允许跨域请求，这样可以避免跨域请求可能带来的数据破坏。**\n\n这种情况实现也还好，不过要注意需要实现 `OPTIONS` 方法：\n\n```js\nrouter.options('/deleteData', (ctx, next) => {\n  ctx.set('Access-Control-Allow-Origin', 'http://127.0.0.1:3000')\n  ctx.set('Access-Control-Allow-Methods', 'GET, POST, HEAD, DELETE, OPTIONS')\n  ctx.set('Access-Control-Allow-Headers', 'x-token')\n  // OPTIONS 方法不需要返回任何实体内容，而且应该与最终调用的方法返回的头信息保持一致\n})\n\nrouter.delete('/deleteData', (ctx, next) => {\n  ctx.set('Access-Control-Allow-Origin', 'http://127.0.0.1:3000')\n  ctx.set('Access-Control-Allow-Methods', 'GET, POST, HEAD, DELETE, OPTIONS')\n  ctx.set('Access-Control-Allow-Headers', 'x-token')\n  // ...\n})\n```\n\n**前端代码的话，都还是正常写就可以了。不需要加任何额外的参数属性。例子参考 DEMO2。**\n\n对于上面的允许的 Headers 头部配置，这个含义是可以支持带有 `x-token` 的请求，当然你不带上也是可以的。但是你带上了其他字段，比如 `x-abc`，那么就不行了。\n\n## 带 cookie 的请求\n\n上面的两个例子，对于跨域来说，基本上能解决很多问题，比如请求第三方查天气接口，每次请求带上自己的 key 就可以了。跨域处理起来也不算太难。\n\n下面开始说说复杂一点的。\n\n需求是这样的：\n\n* 前后端分离项目，不部署在一起。为了和代码统一，下文用本地环境说明\n\n* 前端域名A（http://127.0.0.1:3000），后端接口域名B（http://localhost:3100）\n\n* 前端要先调用登录接口，同时接口会返回状态，并写入 `cookie` （其实就是 `session`）\n\n* 前端调用其他接口，需要带上当前的 `cookie`（这样后端相当于知道了 `session` 就知道是谁了），才可以获取数据\n\n这次就必须前后端都要修改代码了。\n\n#### 首先是前端部分，相对简单一些：\n\n```js\n    $.ajax({\n      url: 'http://localhost:3100/login',\n      type: 'post',\n      xhrFields: {\n        withCredentials: true\n      }\n    })\n```\n\n需要增加 `withCredentials` 字段，axios 也是需要设置此字段。\n\n**只有设置 `withCredentials` 字段，才能发送/接收 cookie**。比如上面的这个登录接口，虽然不需要上送 cookie，但是要接收后端的响应头 `Set-Cookie`，所以登录接口就必须开启。\n\n可以在控制台中查看下，跨域请求 http://localhost:3100/login，返回时候有响应头：\n\n```\nSet-Cookie: SESSION=123456789; path=/; httponly\n```\n\n这个 cookie 是属于 localhost 域名下的，**所以在 http://127.0.0.1:3000 下查看 cookie 是看不到的**。\n\n如果非要想看下，那么只能访问 http://localhost:3000，然后在控制台中查阅 Application 选项卡内容。\n\n后续请求数据的接口亦如此，否则不能上送登录接口获取到的 cookie。\n\n#### 后端部分\n\n```js\nrouter.post('/login', (ctx, next) => {\n  ctx.set('Access-Control-Allow-Origin', 'http://127.0.0.1:3000')\n  ctx.set('Access-Control-Allow-Credentials', true)\n  ctx.cookies.set('SESSION', '123456789')\n  ctx.body = {code: 0, data: 'login ok!'}\n  next()\n})\n\nrouter.post('/loginedData', (ctx, next) => {\n  ctx.set('Access-Control-Allow-Origin', 'http://127.0.0.1:3000')\n  ctx.set('Access-Control-Allow-Credentials', true)\n  ctx.body = {code: 0, data: ctx.headers}\n  next()\n})\n```\n\n后端部分，难度不大， 但是要注意几点：\n\n* `Access-Control-Allow-Origin` 不可以是 `*` （星号），必须是具体网站地址\n* `Access-Control-Allow-Credentials` 必须配置为 `true`\n* 如果是非简单请求，还需要像 DEMO2 一样，返回 `Access-Control-Allow-Methods` 字段\n* 如果是非简单请求，注意实现 `OPTIONS` 方法，这个例子是简单请求，所以就没实现 `OPTIONS`\n\n## 总结\n\n#### 前端\n\n1. 标准的 ajax 跨域请求，只要不需要带上cookie，那么和常规 ajax 写法一样，不需要额外加任何参数；\n2. 如果 ajax 要带上 cookie 进行跨域，那么必须增加 `withCredentials` 字段。\n\n#### 后端\n\n1. 请使用封装好的库、插件、组件等，本文以上内容，基本上都可以直接用插件直接解决，不需要自己手动配置；\n\n2. 非要手动配置，可以参考如下方案配置：\n\n* 只要是跨域，就必须增加 `Access-Control-Allow-Origin` \n\n* 需要带上（处理）cookie，就必须增加 `Access-Control-Allow-Credentials`，而且 `Access-Control-Allow-Origin` 不可以设置为 `*`\n\n* 请求是简单请求吗？简单请求的定义参考上文 “简单的跨域处理” 部分。是的话不需要其他字段了，不是的话，根据情况增加字段：\n\n  | 响应头                            | 解释         | 备注                                       |\n  | ------------------------------ | ---------- | ---------------------------------------- |\n  | `Access-Control-Allow-Methods` | 服务器接受那些方法  | 不配置的话，默认相当于 \"HEAD, GET, POST\"            |\n  | `Access-Control-Allow-Headers` | 服务器接受那些请求头 | 请求中带有或不带有此字段，可以成功；请求中带有其他字段，整个请求失败（没有通过 `OPTIONS` 请求） |\n\n  其他响应头，建议搜索查表。我认为用的很少，就不列举了。\n\n## 参考文章\n\n[跨域的那些事儿](https://zhuanlan.zhihu.com/p/28562290)\n\n[CORS详解](https://github.com/hstarorg/HstarDoc/blob/master/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/CORS%E8%AF%A6%E8%A7%A3.md)\n\n[跨域资源共享 CORS 详解](http://www.ruanyifeng.com/blog/2016/04/cors.html)\n\n[HTTP Headers - MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers)","slug":"2018-2018-05-17-cross-domain","published":1,"updated":"2020-03-02T07:16:34.685Z","comments":1,"photos":[],"link":"","_id":"cka5ik8ce004unybgmv3ub7mb","content":"<p>最近在做一个前后端分离的项目，业务管理平台。一个前端项目要对应多个后端接口地址，免不了各种跨域，查了一些资料，做一个小结。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"什么是跨域\"><a href=\"#什么是跨域\" class=\"headerlink\" title=\"什么是跨域\"></a>什么是跨域</h2><p>或许，什么不是跨域更好来解释：</p>\n<p>比如网站A，请求了网站B （<a href=\"https://abc.com:8080/api/test）\" target=\"_blank\" rel=\"noopener\">https://abc.com:8080/api/test）</a></p>\n<ul>\n<li>协议相同，比如 https</li>\n<li>域名相同，比如 abc.com（或者是 IP 相同）</li>\n<li>端口相同，比如 8080</li>\n</ul>\n<p>要注意的是，不仅仅是 js 可能跨域，css iframe 都有可能跨域。</p>\n<p>跨域主要限制在脚本（js css）请求上，对于 html 中加载资源，不算跨域。</p>\n<p>比如 网站A <code>http://abc.com</code>，有：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://12.34.56.78/xx.png\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.abc.com/xx.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这些都不算做跨域。</p>\n<p>但是上面这个 js，只能往当前网站A 的 <code>http://abc.com</code> 下发送请求，否则就算跨域。</p>\n<p>也就是说，当前网站地址是啥，就只能往哪里发送请求（iframe 不再考虑范围内）。</p>\n<p><strong>跨域的重点说明：</strong></p>\n<p>跨域发出的请求，是默认放行而且可以成功的，因为浏览器不清楚服务器端是否支持跨域。</p>\n<p>但是成功的请求，如果跨域了，是不会回调 js 代码的，这个是浏览器的保护机制。所以，下文的预请求原因很关键。</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>前端的话，主要以 <code>jQuery</code> 或 <code>axios</code> 为例。</p>\n<p>由于后端代码实现语言不同，故这里只说接口的响应头应该带有哪些信息，具体实现方法或者框架（库 / 包）请自行搜索。主要关注 <code>cors</code> <code>headers</code> 关键词。本文以 nodejs 的 <code>koa2</code> 框架为例。</p>\n<p>比如 JAVA spring 框架，可以考虑 ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>也可以考虑注解形式（<code>@CrossOrigin</code>），好像是 4.2 之后的版本开始支持注解。</p>\n<p>演示代码在这里：<a href=\"https://github.com/yukapril/learning/tree/master/cross-domain\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>以下约定：</p>\n<p>前端页面使用：<a href=\"http://127.0.0.1:3100\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:3100</a></p>\n<p>后端接口使用：<a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a></p>\n<p>这样故意制造跨域。</p>\n<p>此外，本文指的是真真正的的跨域，访问真正的数据接口，而不是 JSONP 接口。</p>\n<h2 id=\"简单的跨域处理\"><a href=\"#简单的跨域处理\" class=\"headerlink\" title=\"简单的跨域处理\"></a>简单的跨域处理</h2><p>简单的跨域主要指发起了简单的请求。</p>\n<p>满足简单请求的要求是：</p>\n<ol>\n<li>只能是 <code>GET</code> <code>POST</code> <code>HEAD</code> 请求方法。而且如果是 <code>POST</code> 的话，发送数据类型必须是 <code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code> 之一，其他类型不可以。</li>\n<li>不能自定义请求头，比如加上 <code>x-token</code> 什么的。当然也不能带上 <code>cookie</code>。</li>\n</ol>\n<p>实现跨域非常简单，后端接口需要返回以下一个响应头即可：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.set(<span class=\"string\">'Access-Control-Allow-Origin'</span>, <span class=\"string\">'http://127.0.0.1:3000'</span>) <span class=\"comment\">// 可以用 * 代替网址</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>前端代码无需特殊处理，即可正常接收数据。例子参考 DEMO1。</strong></p>\n<p>或许你见过 <code>ctx.set(&#39;Access-Control-Allow-Methods&#39;, &#39;GET, POST, HEAD, DELETE, OPTIONS&#39;)</code> 这种写法，我们这就来说。</p>\n<p>上面的简单跨域，只能是 <code>GET</code> <code>POST</code> <code>HEAD</code> 方法，如果我是 RESTful 风格的接口，偏偏要用 <code>DELETE</code> 怎么办？</p>\n<p>或者，我们交互数据，默认类型不是表单格式 <code>application/x-www-form-urlencoded</code>，是 <code>application/json</code> 格式？</p>\n<p>再或者，需要上送特殊的请求头，比如 <code>x-token</code> ？</p>\n<p>这时候，就是非简单的请求了。</p>\n<h2 id=\"高级跨域处理（预请求）\"><a href=\"#高级跨域处理（预请求）\" class=\"headerlink\" title=\"高级跨域处理（预请求）\"></a>高级跨域处理（预请求）</h2><p>上面说到了非简单请求，这种请求有个特点，要先发送一次请求，查一下服务器支持那些特性。这个是通过 <code>OPTIONS</code> 方法请求出去的。</p>\n<p>为什么要有预请求？</p>\n<blockquote>\n<p>假设你要跨域删除一条数据，使用 <code>DELETE</code> 方法。</p>\n<p>此时你请求发出去了，服务器正常处理删除了数据。但是由于跨域，导致了前端代码无法成功接收到状态，也就无法进行后续处理，对于操作的用户，不知道是否成功了。</p>\n<p>那么，用户可能会反复进行删除，或者进行了更进一步错误的操作。</p>\n<p>这就麻烦了，跨域请求发出去了，也成功了，但是前端代码收不到结果…</p>\n<p>所以，在发送 <code>DELETE</code> 请求前，先发送一个 <code>OPTIONS</code> 方法的请求，确认下能否跨域，如果可以的话，在发送第二条真正的删除请求。否则，第二条干脆就不发送了。这样就不会遇到上面的问题了。</p>\n</blockquote>\n<p><strong>所以，预请求用来查明该站点是否允许跨域请求，这样可以避免跨域请求可能带来的数据破坏。</strong></p>\n<p>这种情况实现也还好，不过要注意需要实现 <code>OPTIONS</code> 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.options(<span class=\"string\">'/deleteData'</span>, (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Origin'</span>, <span class=\"string\">'http://127.0.0.1:3000'</span>)</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Methods'</span>, <span class=\"string\">'GET, POST, HEAD, DELETE, OPTIONS'</span>)</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Headers'</span>, <span class=\"string\">'x-token'</span>)</span><br><span class=\"line\">  <span class=\"comment\">// OPTIONS 方法不需要返回任何实体内容，而且应该与最终调用的方法返回的头信息保持一致</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.delete(<span class=\"string\">'/deleteData'</span>, (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Origin'</span>, <span class=\"string\">'http://127.0.0.1:3000'</span>)</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Methods'</span>, <span class=\"string\">'GET, POST, HEAD, DELETE, OPTIONS'</span>)</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Headers'</span>, <span class=\"string\">'x-token'</span>)</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>前端代码的话，都还是正常写就可以了。不需要加任何额外的参数属性。例子参考 DEMO2。</strong></p>\n<p>对于上面的允许的 Headers 头部配置，这个含义是可以支持带有 <code>x-token</code> 的请求，当然你不带上也是可以的。但是你带上了其他字段，比如 <code>x-abc</code>，那么就不行了。</p>\n<h2 id=\"带-cookie-的请求\"><a href=\"#带-cookie-的请求\" class=\"headerlink\" title=\"带 cookie 的请求\"></a>带 cookie 的请求</h2><p>上面的两个例子，对于跨域来说，基本上能解决很多问题，比如请求第三方查天气接口，每次请求带上自己的 key 就可以了。跨域处理起来也不算太难。</p>\n<p>下面开始说说复杂一点的。</p>\n<p>需求是这样的：</p>\n<ul>\n<li><p>前后端分离项目，不部署在一起。为了和代码统一，下文用本地环境说明</p>\n</li>\n<li><p>前端域名A（<a href=\"http://127.0.0.1:3000），后端接口域名B（http://localhost:3100）\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:3000），后端接口域名B（http://localhost:3100）</a></p>\n</li>\n<li><p>前端要先调用登录接口，同时接口会返回状态，并写入 <code>cookie</code> （其实就是 <code>session</code>）</p>\n</li>\n<li><p>前端调用其他接口，需要带上当前的 <code>cookie</code>（这样后端相当于知道了 <code>session</code> 就知道是谁了），才可以获取数据</p>\n</li>\n</ul>\n<p>这次就必须前后端都要修改代码了。</p>\n<h4 id=\"首先是前端部分，相对简单一些：\"><a href=\"#首先是前端部分，相对简单一些：\" class=\"headerlink\" title=\"首先是前端部分，相对简单一些：\"></a>首先是前端部分，相对简单一些：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  url: <span class=\"string\">'http://localhost:3100/login'</span>,</span><br><span class=\"line\">  type: <span class=\"string\">'post'</span>,</span><br><span class=\"line\">  xhrFields: &#123;</span><br><span class=\"line\">    withCredentials: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>需要增加 <code>withCredentials</code> 字段，axios 也是需要设置此字段。</p>\n<p><strong>只有设置 <code>withCredentials</code> 字段，才能发送/接收 cookie</strong>。比如上面的这个登录接口，虽然不需要上送 cookie，但是要接收后端的响应头 <code>Set-Cookie</code>，所以登录接口就必须开启。</p>\n<p>可以在控制台中查看下，跨域请求 <a href=\"http://localhost:3100/login，返回时候有响应头：\" target=\"_blank\" rel=\"noopener\">http://localhost:3100/login，返回时候有响应头：</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-Cookie: SESSION=123456789; path=/; httponly</span><br></pre></td></tr></table></figure>\n\n<p>这个 cookie 是属于 localhost 域名下的，<strong>所以在 <a href=\"http://127.0.0.1:3000\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:3000</a> 下查看 cookie 是看不到的</strong>。</p>\n<p>如果非要想看下，那么只能访问 <a href=\"http://localhost:3000，然后在控制台中查阅\" target=\"_blank\" rel=\"noopener\">http://localhost:3000，然后在控制台中查阅</a> Application 选项卡内容。</p>\n<p>后续请求数据的接口亦如此，否则不能上送登录接口获取到的 cookie。</p>\n<h4 id=\"后端部分\"><a href=\"#后端部分\" class=\"headerlink\" title=\"后端部分\"></a>后端部分</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.post(<span class=\"string\">'/login'</span>, (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Origin'</span>, <span class=\"string\">'http://127.0.0.1:3000'</span>)</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Credentials'</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">  ctx.cookies.set(<span class=\"string\">'SESSION'</span>, <span class=\"string\">'123456789'</span>)</span><br><span class=\"line\">  ctx.body = &#123;<span class=\"attr\">code</span>: <span class=\"number\">0</span>, <span class=\"attr\">data</span>: <span class=\"string\">'login ok!'</span>&#125;</span><br><span class=\"line\">  next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/loginedData'</span>, (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Origin'</span>, <span class=\"string\">'http://127.0.0.1:3000'</span>)</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Credentials'</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">  ctx.body = &#123;<span class=\"attr\">code</span>: <span class=\"number\">0</span>, <span class=\"attr\">data</span>: ctx.headers&#125;</span><br><span class=\"line\">  next()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>后端部分，难度不大， 但是要注意几点：</p>\n<ul>\n<li><code>Access-Control-Allow-Origin</code> 不可以是 <code>*</code> （星号），必须是具体网站地址</li>\n<li><code>Access-Control-Allow-Credentials</code> 必须配置为 <code>true</code></li>\n<li>如果是非简单请求，还需要像 DEMO2 一样，返回 <code>Access-Control-Allow-Methods</code> 字段</li>\n<li>如果是非简单请求，注意实现 <code>OPTIONS</code> 方法，这个例子是简单请求，所以就没实现 <code>OPTIONS</code></li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h4 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h4><ol>\n<li>标准的 ajax 跨域请求，只要不需要带上cookie，那么和常规 ajax 写法一样，不需要额外加任何参数；</li>\n<li>如果 ajax 要带上 cookie 进行跨域，那么必须增加 <code>withCredentials</code> 字段。</li>\n</ol>\n<h4 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h4><ol>\n<li><p>请使用封装好的库、插件、组件等，本文以上内容，基本上都可以直接用插件直接解决，不需要自己手动配置；</p>\n</li>\n<li><p>非要手动配置，可以参考如下方案配置：</p>\n</li>\n</ol>\n<ul>\n<li><p>只要是跨域，就必须增加 <code>Access-Control-Allow-Origin</code> </p>\n</li>\n<li><p>需要带上（处理）cookie，就必须增加 <code>Access-Control-Allow-Credentials</code>，而且 <code>Access-Control-Allow-Origin</code> 不可以设置为 <code>*</code></p>\n</li>\n<li><p>请求是简单请求吗？简单请求的定义参考上文 “简单的跨域处理” 部分。是的话不需要其他字段了，不是的话，根据情况增加字段：</p>\n<table>\n<thead>\n<tr>\n<th>响应头</th>\n<th>解释</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Access-Control-Allow-Methods</code></td>\n<td>服务器接受那些方法</td>\n<td>不配置的话，默认相当于 “HEAD, GET, POST”</td>\n</tr>\n<tr>\n<td><code>Access-Control-Allow-Headers</code></td>\n<td>服务器接受那些请求头</td>\n<td>请求中带有或不带有此字段，可以成功；请求中带有其他字段，整个请求失败（没有通过 <code>OPTIONS</code> 请求）</td>\n</tr>\n</tbody></table>\n<p>其他响应头，建议搜索查表。我认为用的很少，就不列举了。</p>\n</li>\n</ul>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://zhuanlan.zhihu.com/p/28562290\" target=\"_blank\" rel=\"noopener\">跨域的那些事儿</a></p>\n<p><a href=\"https://github.com/hstarorg/HstarDoc/blob/master/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/CORS%E8%AF%A6%E8%A7%A3.md\" target=\"_blank\" rel=\"noopener\">CORS详解</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\" target=\"_blank\" rel=\"noopener\">跨域资源共享 CORS 详解</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers\" target=\"_blank\" rel=\"noopener\">HTTP Headers - MDN</a></p>\n","site":{"data":{}},"excerpt":"<p>最近在做一个前后端分离的项目，业务管理平台。一个前端项目要对应多个后端接口地址，免不了各种跨域，查了一些资料，做一个小结。</p>","more":"<h2 id=\"什么是跨域\"><a href=\"#什么是跨域\" class=\"headerlink\" title=\"什么是跨域\"></a>什么是跨域</h2><p>或许，什么不是跨域更好来解释：</p>\n<p>比如网站A，请求了网站B （<a href=\"https://abc.com:8080/api/test）\" target=\"_blank\" rel=\"noopener\">https://abc.com:8080/api/test）</a></p>\n<ul>\n<li>协议相同，比如 https</li>\n<li>域名相同，比如 abc.com（或者是 IP 相同）</li>\n<li>端口相同，比如 8080</li>\n</ul>\n<p>要注意的是，不仅仅是 js 可能跨域，css iframe 都有可能跨域。</p>\n<p>跨域主要限制在脚本（js css）请求上，对于 html 中加载资源，不算跨域。</p>\n<p>比如 网站A <code>http://abc.com</code>，有：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://12.34.56.78/xx.png\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.abc.com/xx.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这些都不算做跨域。</p>\n<p>但是上面这个 js，只能往当前网站A 的 <code>http://abc.com</code> 下发送请求，否则就算跨域。</p>\n<p>也就是说，当前网站地址是啥，就只能往哪里发送请求（iframe 不再考虑范围内）。</p>\n<p><strong>跨域的重点说明：</strong></p>\n<p>跨域发出的请求，是默认放行而且可以成功的，因为浏览器不清楚服务器端是否支持跨域。</p>\n<p>但是成功的请求，如果跨域了，是不会回调 js 代码的，这个是浏览器的保护机制。所以，下文的预请求原因很关键。</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>前端的话，主要以 <code>jQuery</code> 或 <code>axios</code> 为例。</p>\n<p>由于后端代码实现语言不同，故这里只说接口的响应头应该带有哪些信息，具体实现方法或者框架（库 / 包）请自行搜索。主要关注 <code>cors</code> <code>headers</code> 关键词。本文以 nodejs 的 <code>koa2</code> 框架为例。</p>\n<p>比如 JAVA spring 框架，可以考虑 ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>也可以考虑注解形式（<code>@CrossOrigin</code>），好像是 4.2 之后的版本开始支持注解。</p>\n<p>演示代码在这里：<a href=\"https://github.com/yukapril/learning/tree/master/cross-domain\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>以下约定：</p>\n<p>前端页面使用：<a href=\"http://127.0.0.1:3100\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:3100</a></p>\n<p>后端接口使用：<a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a></p>\n<p>这样故意制造跨域。</p>\n<p>此外，本文指的是真真正的的跨域，访问真正的数据接口，而不是 JSONP 接口。</p>\n<h2 id=\"简单的跨域处理\"><a href=\"#简单的跨域处理\" class=\"headerlink\" title=\"简单的跨域处理\"></a>简单的跨域处理</h2><p>简单的跨域主要指发起了简单的请求。</p>\n<p>满足简单请求的要求是：</p>\n<ol>\n<li>只能是 <code>GET</code> <code>POST</code> <code>HEAD</code> 请求方法。而且如果是 <code>POST</code> 的话，发送数据类型必须是 <code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code> 之一，其他类型不可以。</li>\n<li>不能自定义请求头，比如加上 <code>x-token</code> 什么的。当然也不能带上 <code>cookie</code>。</li>\n</ol>\n<p>实现跨域非常简单，后端接口需要返回以下一个响应头即可：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.set(<span class=\"string\">'Access-Control-Allow-Origin'</span>, <span class=\"string\">'http://127.0.0.1:3000'</span>) <span class=\"comment\">// 可以用 * 代替网址</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>前端代码无需特殊处理，即可正常接收数据。例子参考 DEMO1。</strong></p>\n<p>或许你见过 <code>ctx.set(&#39;Access-Control-Allow-Methods&#39;, &#39;GET, POST, HEAD, DELETE, OPTIONS&#39;)</code> 这种写法，我们这就来说。</p>\n<p>上面的简单跨域，只能是 <code>GET</code> <code>POST</code> <code>HEAD</code> 方法，如果我是 RESTful 风格的接口，偏偏要用 <code>DELETE</code> 怎么办？</p>\n<p>或者，我们交互数据，默认类型不是表单格式 <code>application/x-www-form-urlencoded</code>，是 <code>application/json</code> 格式？</p>\n<p>再或者，需要上送特殊的请求头，比如 <code>x-token</code> ？</p>\n<p>这时候，就是非简单的请求了。</p>\n<h2 id=\"高级跨域处理（预请求）\"><a href=\"#高级跨域处理（预请求）\" class=\"headerlink\" title=\"高级跨域处理（预请求）\"></a>高级跨域处理（预请求）</h2><p>上面说到了非简单请求，这种请求有个特点，要先发送一次请求，查一下服务器支持那些特性。这个是通过 <code>OPTIONS</code> 方法请求出去的。</p>\n<p>为什么要有预请求？</p>\n<blockquote>\n<p>假设你要跨域删除一条数据，使用 <code>DELETE</code> 方法。</p>\n<p>此时你请求发出去了，服务器正常处理删除了数据。但是由于跨域，导致了前端代码无法成功接收到状态，也就无法进行后续处理，对于操作的用户，不知道是否成功了。</p>\n<p>那么，用户可能会反复进行删除，或者进行了更进一步错误的操作。</p>\n<p>这就麻烦了，跨域请求发出去了，也成功了，但是前端代码收不到结果…</p>\n<p>所以，在发送 <code>DELETE</code> 请求前，先发送一个 <code>OPTIONS</code> 方法的请求，确认下能否跨域，如果可以的话，在发送第二条真正的删除请求。否则，第二条干脆就不发送了。这样就不会遇到上面的问题了。</p>\n</blockquote>\n<p><strong>所以，预请求用来查明该站点是否允许跨域请求，这样可以避免跨域请求可能带来的数据破坏。</strong></p>\n<p>这种情况实现也还好，不过要注意需要实现 <code>OPTIONS</code> 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.options(<span class=\"string\">'/deleteData'</span>, (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Origin'</span>, <span class=\"string\">'http://127.0.0.1:3000'</span>)</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Methods'</span>, <span class=\"string\">'GET, POST, HEAD, DELETE, OPTIONS'</span>)</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Headers'</span>, <span class=\"string\">'x-token'</span>)</span><br><span class=\"line\">  <span class=\"comment\">// OPTIONS 方法不需要返回任何实体内容，而且应该与最终调用的方法返回的头信息保持一致</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.delete(<span class=\"string\">'/deleteData'</span>, (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Origin'</span>, <span class=\"string\">'http://127.0.0.1:3000'</span>)</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Methods'</span>, <span class=\"string\">'GET, POST, HEAD, DELETE, OPTIONS'</span>)</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Headers'</span>, <span class=\"string\">'x-token'</span>)</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>前端代码的话，都还是正常写就可以了。不需要加任何额外的参数属性。例子参考 DEMO2。</strong></p>\n<p>对于上面的允许的 Headers 头部配置，这个含义是可以支持带有 <code>x-token</code> 的请求，当然你不带上也是可以的。但是你带上了其他字段，比如 <code>x-abc</code>，那么就不行了。</p>\n<h2 id=\"带-cookie-的请求\"><a href=\"#带-cookie-的请求\" class=\"headerlink\" title=\"带 cookie 的请求\"></a>带 cookie 的请求</h2><p>上面的两个例子，对于跨域来说，基本上能解决很多问题，比如请求第三方查天气接口，每次请求带上自己的 key 就可以了。跨域处理起来也不算太难。</p>\n<p>下面开始说说复杂一点的。</p>\n<p>需求是这样的：</p>\n<ul>\n<li><p>前后端分离项目，不部署在一起。为了和代码统一，下文用本地环境说明</p>\n</li>\n<li><p>前端域名A（<a href=\"http://127.0.0.1:3000），后端接口域名B（http://localhost:3100）\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:3000），后端接口域名B（http://localhost:3100）</a></p>\n</li>\n<li><p>前端要先调用登录接口，同时接口会返回状态，并写入 <code>cookie</code> （其实就是 <code>session</code>）</p>\n</li>\n<li><p>前端调用其他接口，需要带上当前的 <code>cookie</code>（这样后端相当于知道了 <code>session</code> 就知道是谁了），才可以获取数据</p>\n</li>\n</ul>\n<p>这次就必须前后端都要修改代码了。</p>\n<h4 id=\"首先是前端部分，相对简单一些：\"><a href=\"#首先是前端部分，相对简单一些：\" class=\"headerlink\" title=\"首先是前端部分，相对简单一些：\"></a>首先是前端部分，相对简单一些：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  url: <span class=\"string\">'http://localhost:3100/login'</span>,</span><br><span class=\"line\">  type: <span class=\"string\">'post'</span>,</span><br><span class=\"line\">  xhrFields: &#123;</span><br><span class=\"line\">    withCredentials: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>需要增加 <code>withCredentials</code> 字段，axios 也是需要设置此字段。</p>\n<p><strong>只有设置 <code>withCredentials</code> 字段，才能发送/接收 cookie</strong>。比如上面的这个登录接口，虽然不需要上送 cookie，但是要接收后端的响应头 <code>Set-Cookie</code>，所以登录接口就必须开启。</p>\n<p>可以在控制台中查看下，跨域请求 <a href=\"http://localhost:3100/login，返回时候有响应头：\" target=\"_blank\" rel=\"noopener\">http://localhost:3100/login，返回时候有响应头：</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-Cookie: SESSION=123456789; path=/; httponly</span><br></pre></td></tr></table></figure>\n\n<p>这个 cookie 是属于 localhost 域名下的，<strong>所以在 <a href=\"http://127.0.0.1:3000\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:3000</a> 下查看 cookie 是看不到的</strong>。</p>\n<p>如果非要想看下，那么只能访问 <a href=\"http://localhost:3000，然后在控制台中查阅\" target=\"_blank\" rel=\"noopener\">http://localhost:3000，然后在控制台中查阅</a> Application 选项卡内容。</p>\n<p>后续请求数据的接口亦如此，否则不能上送登录接口获取到的 cookie。</p>\n<h4 id=\"后端部分\"><a href=\"#后端部分\" class=\"headerlink\" title=\"后端部分\"></a>后端部分</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.post(<span class=\"string\">'/login'</span>, (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Origin'</span>, <span class=\"string\">'http://127.0.0.1:3000'</span>)</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Credentials'</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">  ctx.cookies.set(<span class=\"string\">'SESSION'</span>, <span class=\"string\">'123456789'</span>)</span><br><span class=\"line\">  ctx.body = &#123;<span class=\"attr\">code</span>: <span class=\"number\">0</span>, <span class=\"attr\">data</span>: <span class=\"string\">'login ok!'</span>&#125;</span><br><span class=\"line\">  next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/loginedData'</span>, (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Origin'</span>, <span class=\"string\">'http://127.0.0.1:3000'</span>)</span><br><span class=\"line\">  ctx.set(<span class=\"string\">'Access-Control-Allow-Credentials'</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">  ctx.body = &#123;<span class=\"attr\">code</span>: <span class=\"number\">0</span>, <span class=\"attr\">data</span>: ctx.headers&#125;</span><br><span class=\"line\">  next()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>后端部分，难度不大， 但是要注意几点：</p>\n<ul>\n<li><code>Access-Control-Allow-Origin</code> 不可以是 <code>*</code> （星号），必须是具体网站地址</li>\n<li><code>Access-Control-Allow-Credentials</code> 必须配置为 <code>true</code></li>\n<li>如果是非简单请求，还需要像 DEMO2 一样，返回 <code>Access-Control-Allow-Methods</code> 字段</li>\n<li>如果是非简单请求，注意实现 <code>OPTIONS</code> 方法，这个例子是简单请求，所以就没实现 <code>OPTIONS</code></li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h4 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h4><ol>\n<li>标准的 ajax 跨域请求，只要不需要带上cookie，那么和常规 ajax 写法一样，不需要额外加任何参数；</li>\n<li>如果 ajax 要带上 cookie 进行跨域，那么必须增加 <code>withCredentials</code> 字段。</li>\n</ol>\n<h4 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h4><ol>\n<li><p>请使用封装好的库、插件、组件等，本文以上内容，基本上都可以直接用插件直接解决，不需要自己手动配置；</p>\n</li>\n<li><p>非要手动配置，可以参考如下方案配置：</p>\n</li>\n</ol>\n<ul>\n<li><p>只要是跨域，就必须增加 <code>Access-Control-Allow-Origin</code> </p>\n</li>\n<li><p>需要带上（处理）cookie，就必须增加 <code>Access-Control-Allow-Credentials</code>，而且 <code>Access-Control-Allow-Origin</code> 不可以设置为 <code>*</code></p>\n</li>\n<li><p>请求是简单请求吗？简单请求的定义参考上文 “简单的跨域处理” 部分。是的话不需要其他字段了，不是的话，根据情况增加字段：</p>\n<table>\n<thead>\n<tr>\n<th>响应头</th>\n<th>解释</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Access-Control-Allow-Methods</code></td>\n<td>服务器接受那些方法</td>\n<td>不配置的话，默认相当于 “HEAD, GET, POST”</td>\n</tr>\n<tr>\n<td><code>Access-Control-Allow-Headers</code></td>\n<td>服务器接受那些请求头</td>\n<td>请求中带有或不带有此字段，可以成功；请求中带有其他字段，整个请求失败（没有通过 <code>OPTIONS</code> 请求）</td>\n</tr>\n</tbody></table>\n<p>其他响应头，建议搜索查表。我认为用的很少，就不列举了。</p>\n</li>\n</ul>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://zhuanlan.zhihu.com/p/28562290\" target=\"_blank\" rel=\"noopener\">跨域的那些事儿</a></p>\n<p><a href=\"https://github.com/hstarorg/HstarDoc/blob/master/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/CORS%E8%AF%A6%E8%A7%A3.md\" target=\"_blank\" rel=\"noopener\">CORS详解</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\" target=\"_blank\" rel=\"noopener\">跨域资源共享 CORS 详解</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers\" target=\"_blank\" rel=\"noopener\">HTTP Headers - MDN</a></p>"},{"layout":"post","title":"js 数组扁平化与反扁平化处理（上）","date":"2018-06-26T00:56:00.000Z","_content":"\n在做业管项目时候，遇到老的接口返回的是扁平化的数据结构，但是使用 ElementUI 的 `树状控件` （ `Tree` ）时候，他需要的是非扁平化的数据结构，这就需要对数据进行一次处理了。\n\n一开始思考了很久，但是一旦拿笔写些思路，突然就有了灵感，而且其实非常简单。简单的网上我都找不到这种写法。\n\n**让我们开始吧！**\n\n<!-- more -->\n\n先准备一个扁平化的数据：\n\n```js\nconst flattenedArr = [\n    { id: 1, text: 'A' },\n    { id: 2, text: 'B' },\n    { id: 3, text: 'C' },\n    { id: 4, text: 'A1', pid: 1 },\n    { id: 5, text: 'A2', pid: 1 },\n    { id: 6, text: 'B1', pid: 2 },\n    { id: 7, text: 'B2', pid: 2 },\n    { id: 8, text: 'B21', pid: 7 },\n    { id: 9, text: 'B22', pid: 7 }\n]\n```\n\n我们最终希望变成这样的数组结构：\n\n```js\n[\n    {\n        id: 1,\n        text: \"A\",\n        children: [\n            {id: 4, text: \"A1\"},\n            {id: 5, text: \"A2\"}\n        ]\n    },\n    {\n        id: 2,\n        text: \"B\",\n        children: [\n            {id: 6, text: \"B1\"},\n            {\n                id: 7,\n                text: \"B2\",\n                children: [\n                    {id: 8, text: \"B21\"},\n                    {id: 9, text: \"B22\"}\n                ]\n            }\n        ]\n    },\n    {\n    \tid: 3, \n    \ttext: \"C\"\n    }\n]\n```\n\n看着好像很复杂的样子，每个子节点要放置到对应的父节点的 `chilren` 上。\n\n> 为了简单起见，我们不考虑异常数据。\n>\n> 即：所有子节点，对应关系都是正确的。\n\n如果要想把子节点放到父节点上，必须要考虑父节点必须已经存在，才能把子节点放置到 `chilren` 上。而且节点层次多起来，如何一层层定位指定的父节点也是问题。\n\n考虑许久，我认为建立一个数组索引会比较方便：\n\n```js\nconst unflattened = arr => {\n    // 拷贝一下原有数组，防止后续修改会影响原数组\n    const flattenedArr = JSON.parse(JSON.stringify(arr))\n    \n    // 临时缓存索引(id 为下标的对象)\n    // 大致这个样子 { 1:{},2:{},3:{} }\n    let cache = {}  \n    \n    flattenedArr.forEach(item => {\n        // 使用 id 做缓存索引\n        // 之后只需要知道 id，就可以直接找到数据对象\n        cache[item.id] = item\n    })\n}\n```\n\n这样处理后，解决了一个大问题，我们只要知道 id，就可以方便的找到该 id 对应的数据。比如要找 id=7：\n\n```js\nlet item = cache['7']\nconsole.log(item)\n// { id: 7, text: 'B2', pid: 2 }\n```\n\n后面就容易多了，我们需要把子节点放到父节点上，这时候发现是没有 `children` 字段的，为了方便（省去各种处理判断），我觉得还是统一给所有节点加上比较快：\n\n```js\nconst unflattened = arr => {\n    // 拷贝一下原有数组，防止后续修改会影响原数组\n    const flattenedArr = JSON.parse(JSON.stringify(arr))\n    \n    // 临时缓存索引(id 为下标的对象)\n    // 大致这个样子 { 1:{},2:{},3:{} }\n    let cache = {}  \n    \n    flattenedArr.forEach(item => {\n++++    // 每一个元素都加上 children 字段\n++++    item.children = []\n        \n        // 使用 id 做缓存索引\n        // 之后只需要知道 id，就可以直接找到数据对象\n        cache[item.id] = item\n    })\n}\n```\n\n**下面，我们就要考虑如何进行构建期望的数据结构了。**\n\n因为数组的顺序不一定是根结点在最前，所以要找到最基础的根结点比较重要，后续才能踏踏实实的子节点往上挂载。\n\n先创建一个最终返回的数组 `unflattenedArr`，这里面目前主要放根节点，在这个例子中，根节点有 3 个。\n\n此外，再创建一个临时数组 `tempArr`，主要用于记录非根节点。本例子中，共有 9 个节点，排除 3 个根节点外，剩下的 6 个节点，应临时放置在这里。后续我们可以方便的再处理这 6 个节点的数据。\n\n```js\nconst unflattened = arr => {\n    // 拷贝一下原有数组，防止后续修改会影响原数组\n    const flattenedArr = JSON.parse(JSON.stringify(arr))\n    \n    // 临时缓存索引(id 为下标的对象)\n    // 大致这个样子 { 1:{},2:{},3:{} }\n    let cache = {}  \n    \n++++ // 最终要返回的非扁平化数组\n++++ let unflattenedArr = []\n++++ // 存放非根结点的数组\n++++ let tempArr = []\n    \n    flattenedArr.forEach(item => {\n        // 每一个元素都加上 children 字段\n        item.children = []\n        \n        // 使用 id 做缓存索引\n        // 之后只需要知道 id，就可以直接找到数据对象\n        cache[item.id] = item\n        \n++++    if (!item.pid) {\n++++        // 不存在 pid 属性，当前元素为根结点\n++++        // 直接放到最终的返回对象里面，后续元素可以直接挂载\n++++        unflattenedArr.push(item)\n++++    } else {\n++++        // 子节点，放到新对象里面，后续会用到\n++++        tempArr.push(item)\n++++    }\n    })\n    \n++++ return unflattenedArr\n}\n```\n\n通过这次调整，我们已经安置好根节点了（`unflattenedArr`），而且非根节点也知道了（`tempArr`）。\n\n现在，我们需要把非根节点放置到相应位置了。还记得上面的 `cache` 吗，我们可以非常方便的找到任何一个 id 的节点位置。\n\n```js\nconst unflattened = arr => {\n    // 拷贝一下原有数组，防止后续修改会影响原数组\n    const flattenedArr = JSON.parse(JSON.stringify(arr))\n    \n    // 临时缓存索引(id 为下标的对象)\n    // 大致这个样子 { 1:{},2:{},3:{} }\n    let cache = {}  \n    \n    // 最终要返回的非扁平化数组\n    let unflattenedArr = []\n    // 存放非根结点的数组\n    let tempArr = []\n    \n    flattenedArr.forEach(item => {\n        // 每一个元素都加上 children 字段\n        item.children = []\n        \n        // 使用 id 做缓存索引\n        // 之后只需要知道 id，就可以直接找到数据对象\n        cache[item.id] = item\n        \n        if (!item.pid) {\n            // 不存在 pid 属性，当前元素为根结点\n            // 直接放到最终的返回对象里面，后续元素可以直接挂载\n            unflattenedArr.push(item)\n        } else {\n            // 子节点，放到新对象里面，后续会用到\n            tempArr.push(item)\n        }\n    })\n    \n++++ // 处理非根子节点\n++++ tempArr.forEach(item => {\n++++     // 当前 item 的父节点 id \n++++     const pid = item.pid\n++++     // 通过上面的 cache 索引，直接将子节点挂到对应的父节点上\n++++     cache[pid].children.push(item)\n++++ })\n    \n    return unflattenedArr\n}\n```\n\n这时我们可以看下返回数据，已经非常好了。的确如此，完全可以直接使用了。\n\n```js\n[\n    {\n        \"id\": 1,\n        \"text\": \"A\",\n        \"children\": [\n            {\n                \"id\": 4,\n                \"text\": \"A1\",\n                \"pid\": 1,\n                \"children\": []\n            },\n            {\n                \"id\": 5,\n                \"text\": \"A2\",\n                \"pid\": 1,\n                \"children\": []\n            }\n        ]\n    },\n    {\n        \"id\": 2,\n        \"text\": \"B\",\n        \"children\": [\n            {\n                \"id\": 6,\n                \"text\": \"B1\",\n                \"pid\": 2,\n                \"children\": []\n            },\n            {\n                \"id\": 7,\n                \"text\": \"B2\",\n                \"pid\": 2,\n                \"children\": [\n                    {\n                        \"id\": 8,\n                        \"text\": \"B21\",\n                        \"pid\": 7,\n                        \"children\": []\n                    },\n                    {\n                        \"id\": 9,\n                        \"text\": \"B22\",\n                        \"pid\": 7,\n                        \"children\": []\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        \"id\": 3,\n        \"text\": \"C\",\n        \"children\": []\n    }\n]\n```\n\n对于一些细节上，我们还有提升输出质量的空间：\n\n1. `pid` 字段，因为已经是嵌套结构，这个字段不再有价值\n2. `children` 字段，末端子节点是没有意义的，当然如果有扩展的话，还是保留着好。\n\n对于这两个细节上，也很好解决，因为我们有所有节点的索引嘛。再第二个循环后面，再加一个循环处理下：\n\n```js\nObject.keys(cache).forEach(id => {\n    const item = cache[id]\n    if (item.children.length === 0) {\n        delete item.children\n    }\n    delete item.pid\n})\n```\n\n这样就彻底搞定了。\n\n本文代码见此：[Github](https://github.com/yukapril/learning/blob/master/array-flattened/unflattened.html)\n\n","source":"_posts/2018/2018-06-26-array-unflattened.md","raw":"---\nlayout: post\ntitle: js 数组扁平化与反扁平化处理（上）\ndate: 2018-06-26 00:56:00 GMT+0800\ncategories: [前端]\ntags:  [扁平化]\n---\n\n在做业管项目时候，遇到老的接口返回的是扁平化的数据结构，但是使用 ElementUI 的 `树状控件` （ `Tree` ）时候，他需要的是非扁平化的数据结构，这就需要对数据进行一次处理了。\n\n一开始思考了很久，但是一旦拿笔写些思路，突然就有了灵感，而且其实非常简单。简单的网上我都找不到这种写法。\n\n**让我们开始吧！**\n\n<!-- more -->\n\n先准备一个扁平化的数据：\n\n```js\nconst flattenedArr = [\n    { id: 1, text: 'A' },\n    { id: 2, text: 'B' },\n    { id: 3, text: 'C' },\n    { id: 4, text: 'A1', pid: 1 },\n    { id: 5, text: 'A2', pid: 1 },\n    { id: 6, text: 'B1', pid: 2 },\n    { id: 7, text: 'B2', pid: 2 },\n    { id: 8, text: 'B21', pid: 7 },\n    { id: 9, text: 'B22', pid: 7 }\n]\n```\n\n我们最终希望变成这样的数组结构：\n\n```js\n[\n    {\n        id: 1,\n        text: \"A\",\n        children: [\n            {id: 4, text: \"A1\"},\n            {id: 5, text: \"A2\"}\n        ]\n    },\n    {\n        id: 2,\n        text: \"B\",\n        children: [\n            {id: 6, text: \"B1\"},\n            {\n                id: 7,\n                text: \"B2\",\n                children: [\n                    {id: 8, text: \"B21\"},\n                    {id: 9, text: \"B22\"}\n                ]\n            }\n        ]\n    },\n    {\n    \tid: 3, \n    \ttext: \"C\"\n    }\n]\n```\n\n看着好像很复杂的样子，每个子节点要放置到对应的父节点的 `chilren` 上。\n\n> 为了简单起见，我们不考虑异常数据。\n>\n> 即：所有子节点，对应关系都是正确的。\n\n如果要想把子节点放到父节点上，必须要考虑父节点必须已经存在，才能把子节点放置到 `chilren` 上。而且节点层次多起来，如何一层层定位指定的父节点也是问题。\n\n考虑许久，我认为建立一个数组索引会比较方便：\n\n```js\nconst unflattened = arr => {\n    // 拷贝一下原有数组，防止后续修改会影响原数组\n    const flattenedArr = JSON.parse(JSON.stringify(arr))\n    \n    // 临时缓存索引(id 为下标的对象)\n    // 大致这个样子 { 1:{},2:{},3:{} }\n    let cache = {}  \n    \n    flattenedArr.forEach(item => {\n        // 使用 id 做缓存索引\n        // 之后只需要知道 id，就可以直接找到数据对象\n        cache[item.id] = item\n    })\n}\n```\n\n这样处理后，解决了一个大问题，我们只要知道 id，就可以方便的找到该 id 对应的数据。比如要找 id=7：\n\n```js\nlet item = cache['7']\nconsole.log(item)\n// { id: 7, text: 'B2', pid: 2 }\n```\n\n后面就容易多了，我们需要把子节点放到父节点上，这时候发现是没有 `children` 字段的，为了方便（省去各种处理判断），我觉得还是统一给所有节点加上比较快：\n\n```js\nconst unflattened = arr => {\n    // 拷贝一下原有数组，防止后续修改会影响原数组\n    const flattenedArr = JSON.parse(JSON.stringify(arr))\n    \n    // 临时缓存索引(id 为下标的对象)\n    // 大致这个样子 { 1:{},2:{},3:{} }\n    let cache = {}  \n    \n    flattenedArr.forEach(item => {\n++++    // 每一个元素都加上 children 字段\n++++    item.children = []\n        \n        // 使用 id 做缓存索引\n        // 之后只需要知道 id，就可以直接找到数据对象\n        cache[item.id] = item\n    })\n}\n```\n\n**下面，我们就要考虑如何进行构建期望的数据结构了。**\n\n因为数组的顺序不一定是根结点在最前，所以要找到最基础的根结点比较重要，后续才能踏踏实实的子节点往上挂载。\n\n先创建一个最终返回的数组 `unflattenedArr`，这里面目前主要放根节点，在这个例子中，根节点有 3 个。\n\n此外，再创建一个临时数组 `tempArr`，主要用于记录非根节点。本例子中，共有 9 个节点，排除 3 个根节点外，剩下的 6 个节点，应临时放置在这里。后续我们可以方便的再处理这 6 个节点的数据。\n\n```js\nconst unflattened = arr => {\n    // 拷贝一下原有数组，防止后续修改会影响原数组\n    const flattenedArr = JSON.parse(JSON.stringify(arr))\n    \n    // 临时缓存索引(id 为下标的对象)\n    // 大致这个样子 { 1:{},2:{},3:{} }\n    let cache = {}  \n    \n++++ // 最终要返回的非扁平化数组\n++++ let unflattenedArr = []\n++++ // 存放非根结点的数组\n++++ let tempArr = []\n    \n    flattenedArr.forEach(item => {\n        // 每一个元素都加上 children 字段\n        item.children = []\n        \n        // 使用 id 做缓存索引\n        // 之后只需要知道 id，就可以直接找到数据对象\n        cache[item.id] = item\n        \n++++    if (!item.pid) {\n++++        // 不存在 pid 属性，当前元素为根结点\n++++        // 直接放到最终的返回对象里面，后续元素可以直接挂载\n++++        unflattenedArr.push(item)\n++++    } else {\n++++        // 子节点，放到新对象里面，后续会用到\n++++        tempArr.push(item)\n++++    }\n    })\n    \n++++ return unflattenedArr\n}\n```\n\n通过这次调整，我们已经安置好根节点了（`unflattenedArr`），而且非根节点也知道了（`tempArr`）。\n\n现在，我们需要把非根节点放置到相应位置了。还记得上面的 `cache` 吗，我们可以非常方便的找到任何一个 id 的节点位置。\n\n```js\nconst unflattened = arr => {\n    // 拷贝一下原有数组，防止后续修改会影响原数组\n    const flattenedArr = JSON.parse(JSON.stringify(arr))\n    \n    // 临时缓存索引(id 为下标的对象)\n    // 大致这个样子 { 1:{},2:{},3:{} }\n    let cache = {}  \n    \n    // 最终要返回的非扁平化数组\n    let unflattenedArr = []\n    // 存放非根结点的数组\n    let tempArr = []\n    \n    flattenedArr.forEach(item => {\n        // 每一个元素都加上 children 字段\n        item.children = []\n        \n        // 使用 id 做缓存索引\n        // 之后只需要知道 id，就可以直接找到数据对象\n        cache[item.id] = item\n        \n        if (!item.pid) {\n            // 不存在 pid 属性，当前元素为根结点\n            // 直接放到最终的返回对象里面，后续元素可以直接挂载\n            unflattenedArr.push(item)\n        } else {\n            // 子节点，放到新对象里面，后续会用到\n            tempArr.push(item)\n        }\n    })\n    \n++++ // 处理非根子节点\n++++ tempArr.forEach(item => {\n++++     // 当前 item 的父节点 id \n++++     const pid = item.pid\n++++     // 通过上面的 cache 索引，直接将子节点挂到对应的父节点上\n++++     cache[pid].children.push(item)\n++++ })\n    \n    return unflattenedArr\n}\n```\n\n这时我们可以看下返回数据，已经非常好了。的确如此，完全可以直接使用了。\n\n```js\n[\n    {\n        \"id\": 1,\n        \"text\": \"A\",\n        \"children\": [\n            {\n                \"id\": 4,\n                \"text\": \"A1\",\n                \"pid\": 1,\n                \"children\": []\n            },\n            {\n                \"id\": 5,\n                \"text\": \"A2\",\n                \"pid\": 1,\n                \"children\": []\n            }\n        ]\n    },\n    {\n        \"id\": 2,\n        \"text\": \"B\",\n        \"children\": [\n            {\n                \"id\": 6,\n                \"text\": \"B1\",\n                \"pid\": 2,\n                \"children\": []\n            },\n            {\n                \"id\": 7,\n                \"text\": \"B2\",\n                \"pid\": 2,\n                \"children\": [\n                    {\n                        \"id\": 8,\n                        \"text\": \"B21\",\n                        \"pid\": 7,\n                        \"children\": []\n                    },\n                    {\n                        \"id\": 9,\n                        \"text\": \"B22\",\n                        \"pid\": 7,\n                        \"children\": []\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        \"id\": 3,\n        \"text\": \"C\",\n        \"children\": []\n    }\n]\n```\n\n对于一些细节上，我们还有提升输出质量的空间：\n\n1. `pid` 字段，因为已经是嵌套结构，这个字段不再有价值\n2. `children` 字段，末端子节点是没有意义的，当然如果有扩展的话，还是保留着好。\n\n对于这两个细节上，也很好解决，因为我们有所有节点的索引嘛。再第二个循环后面，再加一个循环处理下：\n\n```js\nObject.keys(cache).forEach(id => {\n    const item = cache[id]\n    if (item.children.length === 0) {\n        delete item.children\n    }\n    delete item.pid\n})\n```\n\n这样就彻底搞定了。\n\n本文代码见此：[Github](https://github.com/yukapril/learning/blob/master/array-flattened/unflattened.html)\n\n","slug":"2018-2018-06-26-array-unflattened","published":1,"updated":"2020-03-02T07:16:34.686Z","comments":1,"photos":[],"link":"","_id":"cka5ik8cf004xnybgmarfoqbm","content":"<p>在做业管项目时候，遇到老的接口返回的是扁平化的数据结构，但是使用 ElementUI 的 <code>树状控件</code> （ <code>Tree</code> ）时候，他需要的是非扁平化的数据结构，这就需要对数据进行一次处理了。</p>\n<p>一开始思考了很久，但是一旦拿笔写些思路，突然就有了灵感，而且其实非常简单。简单的网上我都找不到这种写法。</p>\n<p><strong>让我们开始吧！</strong></p>\n<a id=\"more\"></a>\n\n<p>先准备一个扁平化的数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> flattenedArr = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">text</span>: <span class=\"string\">'A'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">text</span>: <span class=\"string\">'B'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">text</span>: <span class=\"string\">'C'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">text</span>: <span class=\"string\">'A1'</span>, <span class=\"attr\">pid</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">5</span>, <span class=\"attr\">text</span>: <span class=\"string\">'A2'</span>, <span class=\"attr\">pid</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">6</span>, <span class=\"attr\">text</span>: <span class=\"string\">'B1'</span>, <span class=\"attr\">pid</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">7</span>, <span class=\"attr\">text</span>: <span class=\"string\">'B2'</span>, <span class=\"attr\">pid</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">8</span>, <span class=\"attr\">text</span>: <span class=\"string\">'B21'</span>, <span class=\"attr\">pid</span>: <span class=\"number\">7</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">9</span>, <span class=\"attr\">text</span>: <span class=\"string\">'B22'</span>, <span class=\"attr\">pid</span>: <span class=\"number\">7</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>我们最终希望变成这样的数组结构：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        id: <span class=\"number\">1</span>,</span><br><span class=\"line\">        text: <span class=\"string\">\"A\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">            &#123;<span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">text</span>: <span class=\"string\">\"A1\"</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">id</span>: <span class=\"number\">5</span>, <span class=\"attr\">text</span>: <span class=\"string\">\"A2\"</span>&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        id: <span class=\"number\">2</span>,</span><br><span class=\"line\">        text: <span class=\"string\">\"B\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">            &#123;<span class=\"attr\">id</span>: <span class=\"number\">6</span>, <span class=\"attr\">text</span>: <span class=\"string\">\"B1\"</span>&#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                id: <span class=\"number\">7</span>,</span><br><span class=\"line\">                text: <span class=\"string\">\"B2\"</span>,</span><br><span class=\"line\">                children: [</span><br><span class=\"line\">                    &#123;<span class=\"attr\">id</span>: <span class=\"number\">8</span>, <span class=\"attr\">text</span>: <span class=\"string\">\"B21\"</span>&#125;,</span><br><span class=\"line\">                    &#123;<span class=\"attr\">id</span>: <span class=\"number\">9</span>, <span class=\"attr\">text</span>: <span class=\"string\">\"B22\"</span>&#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \tid: <span class=\"number\">3</span>, </span><br><span class=\"line\">    \ttext: <span class=\"string\">\"C\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>看着好像很复杂的样子，每个子节点要放置到对应的父节点的 <code>chilren</code> 上。</p>\n<blockquote>\n<p>为了简单起见，我们不考虑异常数据。</p>\n<p>即：所有子节点，对应关系都是正确的。</p>\n</blockquote>\n<p>如果要想把子节点放到父节点上，必须要考虑父节点必须已经存在，才能把子节点放置到 <code>chilren</code> 上。而且节点层次多起来，如何一层层定位指定的父节点也是问题。</p>\n<p>考虑许久，我认为建立一个数组索引会比较方便：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unflattened = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拷贝一下原有数组，防止后续修改会影响原数组</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> flattenedArr = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(arr))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 临时缓存索引(id 为下标的对象)</span></span><br><span class=\"line\">    <span class=\"comment\">// 大致这个样子 &#123; 1:&#123;&#125;,2:&#123;&#125;,3:&#123;&#125; &#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cache = &#123;&#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    flattenedArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 id 做缓存索引</span></span><br><span class=\"line\">        <span class=\"comment\">// 之后只需要知道 id，就可以直接找到数据对象</span></span><br><span class=\"line\">        cache[item.id] = item</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样处理后，解决了一个大问题，我们只要知道 id，就可以方便的找到该 id 对应的数据。比如要找 id=7：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> item = cache[<span class=\"string\">'7'</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(item)</span><br><span class=\"line\"><span class=\"comment\">// &#123; id: 7, text: 'B2', pid: 2 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>后面就容易多了，我们需要把子节点放到父节点上，这时候发现是没有 <code>children</code> 字段的，为了方便（省去各种处理判断），我觉得还是统一给所有节点加上比较快：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unflattened = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拷贝一下原有数组，防止后续修改会影响原数组</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> flattenedArr = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(arr))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 临时缓存索引(id 为下标的对象)</span></span><br><span class=\"line\">    <span class=\"comment\">// 大致这个样子 &#123; 1:&#123;&#125;,2:&#123;&#125;,3:&#123;&#125; &#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cache = &#123;&#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    flattenedArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">++++    <span class=\"comment\">// 每一个元素都加上 children 字段</span></span><br><span class=\"line\">++++    item.children = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 使用 id 做缓存索引</span></span><br><span class=\"line\">        <span class=\"comment\">// 之后只需要知道 id，就可以直接找到数据对象</span></span><br><span class=\"line\">        cache[item.id] = item</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>下面，我们就要考虑如何进行构建期望的数据结构了。</strong></p>\n<p>因为数组的顺序不一定是根结点在最前，所以要找到最基础的根结点比较重要，后续才能踏踏实实的子节点往上挂载。</p>\n<p>先创建一个最终返回的数组 <code>unflattenedArr</code>，这里面目前主要放根节点，在这个例子中，根节点有 3 个。</p>\n<p>此外，再创建一个临时数组 <code>tempArr</code>，主要用于记录非根节点。本例子中，共有 9 个节点，排除 3 个根节点外，剩下的 6 个节点，应临时放置在这里。后续我们可以方便的再处理这 6 个节点的数据。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unflattened = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拷贝一下原有数组，防止后续修改会影响原数组</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> flattenedArr = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(arr))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 临时缓存索引(id 为下标的对象)</span></span><br><span class=\"line\">    <span class=\"comment\">// 大致这个样子 &#123; 1:&#123;&#125;,2:&#123;&#125;,3:&#123;&#125; &#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cache = &#123;&#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">++++ <span class=\"comment\">// 最终要返回的非扁平化数组</span></span><br><span class=\"line\">++++ <span class=\"keyword\">let</span> unflattenedArr = []</span><br><span class=\"line\">++++ <span class=\"comment\">// 存放非根结点的数组</span></span><br><span class=\"line\">++++ <span class=\"keyword\">let</span> tempArr = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    flattenedArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 每一个元素都加上 children 字段</span></span><br><span class=\"line\">        item.children = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 使用 id 做缓存索引</span></span><br><span class=\"line\">        <span class=\"comment\">// 之后只需要知道 id，就可以直接找到数据对象</span></span><br><span class=\"line\">        cache[item.id] = item</span><br><span class=\"line\">        </span><br><span class=\"line\">++++    <span class=\"keyword\">if</span> (!item.pid) &#123;</span><br><span class=\"line\">++++        <span class=\"comment\">// 不存在 pid 属性，当前元素为根结点</span></span><br><span class=\"line\">++++        <span class=\"comment\">// 直接放到最终的返回对象里面，后续元素可以直接挂载</span></span><br><span class=\"line\">++++        unflattenedArr.push(item)</span><br><span class=\"line\">++++    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">++++        <span class=\"comment\">// 子节点，放到新对象里面，后续会用到</span></span><br><span class=\"line\">++++        tempArr.push(item)</span><br><span class=\"line\">++++    &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">++++ <span class=\"keyword\">return</span> unflattenedArr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过这次调整，我们已经安置好根节点了（<code>unflattenedArr</code>），而且非根节点也知道了（<code>tempArr</code>）。</p>\n<p>现在，我们需要把非根节点放置到相应位置了。还记得上面的 <code>cache</code> 吗，我们可以非常方便的找到任何一个 id 的节点位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unflattened = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拷贝一下原有数组，防止后续修改会影响原数组</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> flattenedArr = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(arr))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 临时缓存索引(id 为下标的对象)</span></span><br><span class=\"line\">    <span class=\"comment\">// 大致这个样子 &#123; 1:&#123;&#125;,2:&#123;&#125;,3:&#123;&#125; &#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cache = &#123;&#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 最终要返回的非扁平化数组</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> unflattenedArr = []</span><br><span class=\"line\">    <span class=\"comment\">// 存放非根结点的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> tempArr = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    flattenedArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 每一个元素都加上 children 字段</span></span><br><span class=\"line\">        item.children = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 使用 id 做缓存索引</span></span><br><span class=\"line\">        <span class=\"comment\">// 之后只需要知道 id，就可以直接找到数据对象</span></span><br><span class=\"line\">        cache[item.id] = item</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!item.pid) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 不存在 pid 属性，当前元素为根结点</span></span><br><span class=\"line\">            <span class=\"comment\">// 直接放到最终的返回对象里面，后续元素可以直接挂载</span></span><br><span class=\"line\">            unflattenedArr.push(item)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 子节点，放到新对象里面，后续会用到</span></span><br><span class=\"line\">            tempArr.push(item)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">++++ <span class=\"comment\">// 处理非根子节点</span></span><br><span class=\"line\">++++ tempArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">++++     <span class=\"comment\">// 当前 item 的父节点 id </span></span><br><span class=\"line\">++++     <span class=\"keyword\">const</span> pid = item.pid</span><br><span class=\"line\">++++     <span class=\"comment\">// 通过上面的 cache 索引，直接将子节点挂到对应的父节点上</span></span><br><span class=\"line\">++++     cache[pid].children.push(item)</span><br><span class=\"line\">++++ &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> unflattenedArr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时我们可以看下返回数据，已经非常好了。的确如此，完全可以直接使用了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"A\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"children\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">                <span class=\"string\">\"text\"</span>: <span class=\"string\">\"A1\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"pid\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"string\">\"children\"</span>: []</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">                <span class=\"string\">\"text\"</span>: <span class=\"string\">\"A2\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"pid\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"string\">\"children\"</span>: []</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"children\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"number\">6</span>,</span><br><span class=\"line\">                <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B1\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"pid\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"string\">\"children\"</span>: []</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B2\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"pid\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"string\">\"children\"</span>: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"string\">\"id\"</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B21\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"pid\"</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"children\"</span>: []</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"string\">\"id\"</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B22\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"pid\"</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"children\"</span>: []</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"C\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"children\"</span>: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>对于一些细节上，我们还有提升输出质量的空间：</p>\n<ol>\n<li><code>pid</code> 字段，因为已经是嵌套结构，这个字段不再有价值</li>\n<li><code>children</code> 字段，末端子节点是没有意义的，当然如果有扩展的话，还是保留着好。</li>\n</ol>\n<p>对于这两个细节上，也很好解决，因为我们有所有节点的索引嘛。再第二个循环后面，再加一个循环处理下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.keys(cache).forEach(<span class=\"function\"><span class=\"params\">id</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> item = cache[id]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item.children.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> item.children</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> item.pid</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这样就彻底搞定了。</p>\n<p>本文代码见此：<a href=\"https://github.com/yukapril/learning/blob/master/array-flattened/unflattened.html\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n","site":{"data":{}},"excerpt":"<p>在做业管项目时候，遇到老的接口返回的是扁平化的数据结构，但是使用 ElementUI 的 <code>树状控件</code> （ <code>Tree</code> ）时候，他需要的是非扁平化的数据结构，这就需要对数据进行一次处理了。</p>\n<p>一开始思考了很久，但是一旦拿笔写些思路，突然就有了灵感，而且其实非常简单。简单的网上我都找不到这种写法。</p>\n<p><strong>让我们开始吧！</strong></p>","more":"<p>先准备一个扁平化的数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> flattenedArr = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">text</span>: <span class=\"string\">'A'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">text</span>: <span class=\"string\">'B'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">text</span>: <span class=\"string\">'C'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">text</span>: <span class=\"string\">'A1'</span>, <span class=\"attr\">pid</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">5</span>, <span class=\"attr\">text</span>: <span class=\"string\">'A2'</span>, <span class=\"attr\">pid</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">6</span>, <span class=\"attr\">text</span>: <span class=\"string\">'B1'</span>, <span class=\"attr\">pid</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">7</span>, <span class=\"attr\">text</span>: <span class=\"string\">'B2'</span>, <span class=\"attr\">pid</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">8</span>, <span class=\"attr\">text</span>: <span class=\"string\">'B21'</span>, <span class=\"attr\">pid</span>: <span class=\"number\">7</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">9</span>, <span class=\"attr\">text</span>: <span class=\"string\">'B22'</span>, <span class=\"attr\">pid</span>: <span class=\"number\">7</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>我们最终希望变成这样的数组结构：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        id: <span class=\"number\">1</span>,</span><br><span class=\"line\">        text: <span class=\"string\">\"A\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">            &#123;<span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">text</span>: <span class=\"string\">\"A1\"</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">id</span>: <span class=\"number\">5</span>, <span class=\"attr\">text</span>: <span class=\"string\">\"A2\"</span>&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        id: <span class=\"number\">2</span>,</span><br><span class=\"line\">        text: <span class=\"string\">\"B\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">            &#123;<span class=\"attr\">id</span>: <span class=\"number\">6</span>, <span class=\"attr\">text</span>: <span class=\"string\">\"B1\"</span>&#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                id: <span class=\"number\">7</span>,</span><br><span class=\"line\">                text: <span class=\"string\">\"B2\"</span>,</span><br><span class=\"line\">                children: [</span><br><span class=\"line\">                    &#123;<span class=\"attr\">id</span>: <span class=\"number\">8</span>, <span class=\"attr\">text</span>: <span class=\"string\">\"B21\"</span>&#125;,</span><br><span class=\"line\">                    &#123;<span class=\"attr\">id</span>: <span class=\"number\">9</span>, <span class=\"attr\">text</span>: <span class=\"string\">\"B22\"</span>&#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \tid: <span class=\"number\">3</span>, </span><br><span class=\"line\">    \ttext: <span class=\"string\">\"C\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>看着好像很复杂的样子，每个子节点要放置到对应的父节点的 <code>chilren</code> 上。</p>\n<blockquote>\n<p>为了简单起见，我们不考虑异常数据。</p>\n<p>即：所有子节点，对应关系都是正确的。</p>\n</blockquote>\n<p>如果要想把子节点放到父节点上，必须要考虑父节点必须已经存在，才能把子节点放置到 <code>chilren</code> 上。而且节点层次多起来，如何一层层定位指定的父节点也是问题。</p>\n<p>考虑许久，我认为建立一个数组索引会比较方便：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unflattened = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拷贝一下原有数组，防止后续修改会影响原数组</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> flattenedArr = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(arr))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 临时缓存索引(id 为下标的对象)</span></span><br><span class=\"line\">    <span class=\"comment\">// 大致这个样子 &#123; 1:&#123;&#125;,2:&#123;&#125;,3:&#123;&#125; &#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cache = &#123;&#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    flattenedArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 id 做缓存索引</span></span><br><span class=\"line\">        <span class=\"comment\">// 之后只需要知道 id，就可以直接找到数据对象</span></span><br><span class=\"line\">        cache[item.id] = item</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样处理后，解决了一个大问题，我们只要知道 id，就可以方便的找到该 id 对应的数据。比如要找 id=7：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> item = cache[<span class=\"string\">'7'</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(item)</span><br><span class=\"line\"><span class=\"comment\">// &#123; id: 7, text: 'B2', pid: 2 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>后面就容易多了，我们需要把子节点放到父节点上，这时候发现是没有 <code>children</code> 字段的，为了方便（省去各种处理判断），我觉得还是统一给所有节点加上比较快：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unflattened = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拷贝一下原有数组，防止后续修改会影响原数组</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> flattenedArr = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(arr))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 临时缓存索引(id 为下标的对象)</span></span><br><span class=\"line\">    <span class=\"comment\">// 大致这个样子 &#123; 1:&#123;&#125;,2:&#123;&#125;,3:&#123;&#125; &#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cache = &#123;&#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    flattenedArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">++++    <span class=\"comment\">// 每一个元素都加上 children 字段</span></span><br><span class=\"line\">++++    item.children = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 使用 id 做缓存索引</span></span><br><span class=\"line\">        <span class=\"comment\">// 之后只需要知道 id，就可以直接找到数据对象</span></span><br><span class=\"line\">        cache[item.id] = item</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>下面，我们就要考虑如何进行构建期望的数据结构了。</strong></p>\n<p>因为数组的顺序不一定是根结点在最前，所以要找到最基础的根结点比较重要，后续才能踏踏实实的子节点往上挂载。</p>\n<p>先创建一个最终返回的数组 <code>unflattenedArr</code>，这里面目前主要放根节点，在这个例子中，根节点有 3 个。</p>\n<p>此外，再创建一个临时数组 <code>tempArr</code>，主要用于记录非根节点。本例子中，共有 9 个节点，排除 3 个根节点外，剩下的 6 个节点，应临时放置在这里。后续我们可以方便的再处理这 6 个节点的数据。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unflattened = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拷贝一下原有数组，防止后续修改会影响原数组</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> flattenedArr = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(arr))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 临时缓存索引(id 为下标的对象)</span></span><br><span class=\"line\">    <span class=\"comment\">// 大致这个样子 &#123; 1:&#123;&#125;,2:&#123;&#125;,3:&#123;&#125; &#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cache = &#123;&#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">++++ <span class=\"comment\">// 最终要返回的非扁平化数组</span></span><br><span class=\"line\">++++ <span class=\"keyword\">let</span> unflattenedArr = []</span><br><span class=\"line\">++++ <span class=\"comment\">// 存放非根结点的数组</span></span><br><span class=\"line\">++++ <span class=\"keyword\">let</span> tempArr = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    flattenedArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 每一个元素都加上 children 字段</span></span><br><span class=\"line\">        item.children = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 使用 id 做缓存索引</span></span><br><span class=\"line\">        <span class=\"comment\">// 之后只需要知道 id，就可以直接找到数据对象</span></span><br><span class=\"line\">        cache[item.id] = item</span><br><span class=\"line\">        </span><br><span class=\"line\">++++    <span class=\"keyword\">if</span> (!item.pid) &#123;</span><br><span class=\"line\">++++        <span class=\"comment\">// 不存在 pid 属性，当前元素为根结点</span></span><br><span class=\"line\">++++        <span class=\"comment\">// 直接放到最终的返回对象里面，后续元素可以直接挂载</span></span><br><span class=\"line\">++++        unflattenedArr.push(item)</span><br><span class=\"line\">++++    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">++++        <span class=\"comment\">// 子节点，放到新对象里面，后续会用到</span></span><br><span class=\"line\">++++        tempArr.push(item)</span><br><span class=\"line\">++++    &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">++++ <span class=\"keyword\">return</span> unflattenedArr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过这次调整，我们已经安置好根节点了（<code>unflattenedArr</code>），而且非根节点也知道了（<code>tempArr</code>）。</p>\n<p>现在，我们需要把非根节点放置到相应位置了。还记得上面的 <code>cache</code> 吗，我们可以非常方便的找到任何一个 id 的节点位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unflattened = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拷贝一下原有数组，防止后续修改会影响原数组</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> flattenedArr = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(arr))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 临时缓存索引(id 为下标的对象)</span></span><br><span class=\"line\">    <span class=\"comment\">// 大致这个样子 &#123; 1:&#123;&#125;,2:&#123;&#125;,3:&#123;&#125; &#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cache = &#123;&#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 最终要返回的非扁平化数组</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> unflattenedArr = []</span><br><span class=\"line\">    <span class=\"comment\">// 存放非根结点的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> tempArr = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    flattenedArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 每一个元素都加上 children 字段</span></span><br><span class=\"line\">        item.children = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 使用 id 做缓存索引</span></span><br><span class=\"line\">        <span class=\"comment\">// 之后只需要知道 id，就可以直接找到数据对象</span></span><br><span class=\"line\">        cache[item.id] = item</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!item.pid) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 不存在 pid 属性，当前元素为根结点</span></span><br><span class=\"line\">            <span class=\"comment\">// 直接放到最终的返回对象里面，后续元素可以直接挂载</span></span><br><span class=\"line\">            unflattenedArr.push(item)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 子节点，放到新对象里面，后续会用到</span></span><br><span class=\"line\">            tempArr.push(item)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">++++ <span class=\"comment\">// 处理非根子节点</span></span><br><span class=\"line\">++++ tempArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">++++     <span class=\"comment\">// 当前 item 的父节点 id </span></span><br><span class=\"line\">++++     <span class=\"keyword\">const</span> pid = item.pid</span><br><span class=\"line\">++++     <span class=\"comment\">// 通过上面的 cache 索引，直接将子节点挂到对应的父节点上</span></span><br><span class=\"line\">++++     cache[pid].children.push(item)</span><br><span class=\"line\">++++ &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> unflattenedArr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时我们可以看下返回数据，已经非常好了。的确如此，完全可以直接使用了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"A\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"children\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">                <span class=\"string\">\"text\"</span>: <span class=\"string\">\"A1\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"pid\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"string\">\"children\"</span>: []</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">                <span class=\"string\">\"text\"</span>: <span class=\"string\">\"A2\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"pid\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"string\">\"children\"</span>: []</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"children\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"number\">6</span>,</span><br><span class=\"line\">                <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B1\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"pid\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"string\">\"children\"</span>: []</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B2\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"pid\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"string\">\"children\"</span>: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"string\">\"id\"</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B21\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"pid\"</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"children\"</span>: []</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"string\">\"id\"</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B22\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"pid\"</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"children\"</span>: []</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"C\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"children\"</span>: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>对于一些细节上，我们还有提升输出质量的空间：</p>\n<ol>\n<li><code>pid</code> 字段，因为已经是嵌套结构，这个字段不再有价值</li>\n<li><code>children</code> 字段，末端子节点是没有意义的，当然如果有扩展的话，还是保留着好。</li>\n</ol>\n<p>对于这两个细节上，也很好解决，因为我们有所有节点的索引嘛。再第二个循环后面，再加一个循环处理下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.keys(cache).forEach(<span class=\"function\"><span class=\"params\">id</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> item = cache[id]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item.children.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> item.children</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> item.pid</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这样就彻底搞定了。</p>\n<p>本文代码见此：<a href=\"https://github.com/yukapril/learning/blob/master/array-flattened/unflattened.html\" target=\"_blank\" rel=\"noopener\">Github</a></p>"},{"layout":"post","title":"入手水银灯","date":"2018-06-27T00:45:00.000Z","_content":"\n两周前突然起兴，下载了 Bilibili 客户端，真的，我之前竟然没有用过、下载过，仅仅听说过。软件非常好用，而且喜欢的动漫也可以看到，比如这次的正文《蔷薇少女》。\n\n在粗略看过一次后，决定去买一个人偶玩玩，就去了很久之前买东西的平台（030buy / 萌购）。\n\n<!-- more -->\n\n最终考虑多种方面，决定买了 [SRDX ローゼンメイデン・トロイメント 水銀燈 (宮沢模型限定バージョン)](https://www.amazon.co.jp/%E3%82%BF%E3%82%AB%E3%83%A9%E3%83%88%E3%83%9F%E3%83%BC%E3%82%A2%E3%83%BC%E3%83%84-TAKARATOMY-A-R-T-S-%E3%83%AD%E3%83%BC%E3%82%BC%E3%83%B3%E3%83%A1%E3%82%A4%E3%83%87%E3%83%B3%E3%83%BB%E3%83%88%E3%83%AD%E3%82%A4%E3%83%A1%E3%83%B3%E3%83%88-%E5%AE%AE%E6%B2%A2%E6%A8%A1%E5%9E%8B%E9%99%90%E5%AE%9A%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3/dp/B000L93VII/ref=olp_product_details/356-6202642-6081623?_encoding=UTF8&me=)。至于为什么选择这个，不是重点～\n\n不过还是要说下：\n\n**一是价格**\n\n这个模型貌似 2007 年出的，当时价格大致是不到 300 RMB，现在最少要将近 600 RMB了。\n\n**二是款型**\n\n这款水银灯造型（坐在十字架上）有 `宮沢模型限定` 和 `普通版` 两种，因为我也没买过普通版，所以下面描述可能不准确。\n\n通过图片来看，普通版表情不同，手持物品不同，腿部不能活动。\n\n而限定版，除此外，有两个表情，可拆卸羽翼，5组领结。\n\n当然，普通版价格有绝对优势。\n\n## 快递\n\n上文提到了代购平台，我就不重复了。没必要反复广告。说说费用和快递速度吧。\n\n| 类目                 | 价格              | 备注       |\n| -------------------- | ----------------- | ---------- |\n| 本体                 | 591 元（9800 円） |            |\n| 日本运费             | 0 元              | 亚马逊包邮 |\n| 代购费               | 19 元（300 円）   |            |\n| 国际运费（直发中国） | 119 元（1960 円） |            |\n\n**总计花费：729 元。**\n\n关于代购购买后，发给我的方式，有多种方案：\n\n* 直发：直接从日本发给我，有 EMS、AIR、SAL、海运等。我当时看 EMS最快（2-5天），SAL大致8-15天，价格没有便宜太多。海运的速度就算了，也不便宜。\n* 团发：分为快团和普团。快团大致10-15天到国内，普团估计要20-30天。费用上好像快团70-80吧，普团50-60。但是，这个只是到国内中转站，还需要顺丰/圆通/韵达之类的快递送给你，所以成本至少还需要加上10-20块。\n\n当时忘了截图了，太可惜了。只能凭印象写一点。\n\n所以，即便是不着急（30天），估计从日本到自己收到运费也需要 70 块左右。选择速度快的 EMS 还是有优势的。\n\n来，看看 EMS 到底有多快。\n\n| 时间             | 星期|内容                     |\n| ---------------- | ---- |------------------------|\n| 2018.06.23 21:07 |周六| 引受 |\n| 2018.06.24 15:20 |周日| 国際交換局から発送 |\n| 2018.06.25 04:00 |周一| 国際交換局に到着 |\n| 2018.06.25 04:07 | 周一 |到着交換局で保留 |\n| 2018.06.25 13:31 | 周一 |国際交換局から発送 |\n| 2018.06.25 13:31 | 周一 |税関から受領 |\n| 2018.06.25 18:03 | 周一 |投递 |\n| 2018.06.25 18:39 | 周一 |过了下班点，没人收，第二天再投递 |\n| 2018.06.26 10:52 | 周二 |收到 |\n\n总的来说，符合正常实效。周六发件，周日上飞机，周一到中国，顺利的话上午中午就能收到（周六如果能赶上飞机的话），这次由于过了下班点，所以隔了一天。\n\n这次比起之前代购要快多了，之前 EMS 很快，但是代购很磨蹭。\n\n所以，价格差不太多情况下，还是 EMS 好使。\n\n\n## 开箱图\n\n开箱图不做任何图片修整。\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-1.JPG-wm.white)\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-2.JPG-wm.white)\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-3.JPG-wm.white)\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-4.JPG-wm.white)\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-5.JPG-wm.white)\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-6.JPG-wm.white)\n\n嗯，没错，是中国制造的，运到日本后，又让我买回来了。我掏了两次运费...\n\n开箱我从来不整理的，是什么样子就是啥样子。此外夹带一份回执明信片。\n\n打开盒子后，蝴蝶结弄翻了，我也忘记调整回去了。\n\n**下面说点重要的：**\n\n可能是新品，但估计被拆封过。\n\n包装盒变形倒没什么，如果真是10年前的产物，也算保存完好了。\n\n外面的纸盒和里面的塑料盒，均出现二次胶条痕迹。外包装一处，内包装一处。\n\n内包装塑料盒，侧边有一处 2 公分左右开口，撕裂。\n\n\n\n## 摆拍\n\n为了拍照，特意去超市买了养乐多。\n\n默认状态下，本体不带羽翼、领结、手花，需要自己安装。拍照表情为默认表情。\n\n~~羽翼我觉得可能有防呆设计，插不反。但是没测试过（因为做工感觉差的让我震惊）。~~ 羽翼插口做工不佳，安装时候需要注意方向。\n\n手花不是很稳，轻微力量即可碰掉。\n\n右手的角度可调节。左手一样可以。\n\n两条腿方向和角度均可调节。\n\n腰部角度可以调节，可拆卸外套的裙子部分。\n\n水银灯裙撑后面有平台，可以坐在上面，但是不稳定，需要同时配合黑色裙摆支撑，裙摆对应位置有棱角。\n\n加装羽翼后，羽翼还可以实现纵轴方向上的支撑。\n\n**所以这个 `宮沢模型限定` 版，能实现的最稳定的位置就是紧贴纵轴，和宣传图一致。** 至于普通版，宣传图是距离纵轴有一定距离的。\n\n~~当然离开纵轴正常摆放也没有问题。~~ **此款由于下半身比较重，会前倾，需要依靠羽翼协助支撑。**\n\n最后，我把它放到了显示器左上角，这个角度比较好。显示器略厚于十字架摆台，依然可以靠裙撑协助支撑，显示器常规左右调整角度，并不会掉下来。\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-7.JPG-wm.white)\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-8.JPG-wm.white)\n","source":"_posts/2018/2018-06-26-suigintou.md","raw":"---\nlayout: post\ntitle: 入手水银灯\ndate: 2018-06-27 00:45:00 GMT+0800\ncategories: [随笔]\ntags:  [蔷薇少女,水银灯]\n---\n\n两周前突然起兴，下载了 Bilibili 客户端，真的，我之前竟然没有用过、下载过，仅仅听说过。软件非常好用，而且喜欢的动漫也可以看到，比如这次的正文《蔷薇少女》。\n\n在粗略看过一次后，决定去买一个人偶玩玩，就去了很久之前买东西的平台（030buy / 萌购）。\n\n<!-- more -->\n\n最终考虑多种方面，决定买了 [SRDX ローゼンメイデン・トロイメント 水銀燈 (宮沢模型限定バージョン)](https://www.amazon.co.jp/%E3%82%BF%E3%82%AB%E3%83%A9%E3%83%88%E3%83%9F%E3%83%BC%E3%82%A2%E3%83%BC%E3%83%84-TAKARATOMY-A-R-T-S-%E3%83%AD%E3%83%BC%E3%82%BC%E3%83%B3%E3%83%A1%E3%82%A4%E3%83%87%E3%83%B3%E3%83%BB%E3%83%88%E3%83%AD%E3%82%A4%E3%83%A1%E3%83%B3%E3%83%88-%E5%AE%AE%E6%B2%A2%E6%A8%A1%E5%9E%8B%E9%99%90%E5%AE%9A%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3/dp/B000L93VII/ref=olp_product_details/356-6202642-6081623?_encoding=UTF8&me=)。至于为什么选择这个，不是重点～\n\n不过还是要说下：\n\n**一是价格**\n\n这个模型貌似 2007 年出的，当时价格大致是不到 300 RMB，现在最少要将近 600 RMB了。\n\n**二是款型**\n\n这款水银灯造型（坐在十字架上）有 `宮沢模型限定` 和 `普通版` 两种，因为我也没买过普通版，所以下面描述可能不准确。\n\n通过图片来看，普通版表情不同，手持物品不同，腿部不能活动。\n\n而限定版，除此外，有两个表情，可拆卸羽翼，5组领结。\n\n当然，普通版价格有绝对优势。\n\n## 快递\n\n上文提到了代购平台，我就不重复了。没必要反复广告。说说费用和快递速度吧。\n\n| 类目                 | 价格              | 备注       |\n| -------------------- | ----------------- | ---------- |\n| 本体                 | 591 元（9800 円） |            |\n| 日本运费             | 0 元              | 亚马逊包邮 |\n| 代购费               | 19 元（300 円）   |            |\n| 国际运费（直发中国） | 119 元（1960 円） |            |\n\n**总计花费：729 元。**\n\n关于代购购买后，发给我的方式，有多种方案：\n\n* 直发：直接从日本发给我，有 EMS、AIR、SAL、海运等。我当时看 EMS最快（2-5天），SAL大致8-15天，价格没有便宜太多。海运的速度就算了，也不便宜。\n* 团发：分为快团和普团。快团大致10-15天到国内，普团估计要20-30天。费用上好像快团70-80吧，普团50-60。但是，这个只是到国内中转站，还需要顺丰/圆通/韵达之类的快递送给你，所以成本至少还需要加上10-20块。\n\n当时忘了截图了，太可惜了。只能凭印象写一点。\n\n所以，即便是不着急（30天），估计从日本到自己收到运费也需要 70 块左右。选择速度快的 EMS 还是有优势的。\n\n来，看看 EMS 到底有多快。\n\n| 时间             | 星期|内容                     |\n| ---------------- | ---- |------------------------|\n| 2018.06.23 21:07 |周六| 引受 |\n| 2018.06.24 15:20 |周日| 国際交換局から発送 |\n| 2018.06.25 04:00 |周一| 国際交換局に到着 |\n| 2018.06.25 04:07 | 周一 |到着交換局で保留 |\n| 2018.06.25 13:31 | 周一 |国際交換局から発送 |\n| 2018.06.25 13:31 | 周一 |税関から受領 |\n| 2018.06.25 18:03 | 周一 |投递 |\n| 2018.06.25 18:39 | 周一 |过了下班点，没人收，第二天再投递 |\n| 2018.06.26 10:52 | 周二 |收到 |\n\n总的来说，符合正常实效。周六发件，周日上飞机，周一到中国，顺利的话上午中午就能收到（周六如果能赶上飞机的话），这次由于过了下班点，所以隔了一天。\n\n这次比起之前代购要快多了，之前 EMS 很快，但是代购很磨蹭。\n\n所以，价格差不太多情况下，还是 EMS 好使。\n\n\n## 开箱图\n\n开箱图不做任何图片修整。\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-1.JPG-wm.white)\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-2.JPG-wm.white)\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-3.JPG-wm.white)\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-4.JPG-wm.white)\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-5.JPG-wm.white)\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-6.JPG-wm.white)\n\n嗯，没错，是中国制造的，运到日本后，又让我买回来了。我掏了两次运费...\n\n开箱我从来不整理的，是什么样子就是啥样子。此外夹带一份回执明信片。\n\n打开盒子后，蝴蝶结弄翻了，我也忘记调整回去了。\n\n**下面说点重要的：**\n\n可能是新品，但估计被拆封过。\n\n包装盒变形倒没什么，如果真是10年前的产物，也算保存完好了。\n\n外面的纸盒和里面的塑料盒，均出现二次胶条痕迹。外包装一处，内包装一处。\n\n内包装塑料盒，侧边有一处 2 公分左右开口，撕裂。\n\n\n\n## 摆拍\n\n为了拍照，特意去超市买了养乐多。\n\n默认状态下，本体不带羽翼、领结、手花，需要自己安装。拍照表情为默认表情。\n\n~~羽翼我觉得可能有防呆设计，插不反。但是没测试过（因为做工感觉差的让我震惊）。~~ 羽翼插口做工不佳，安装时候需要注意方向。\n\n手花不是很稳，轻微力量即可碰掉。\n\n右手的角度可调节。左手一样可以。\n\n两条腿方向和角度均可调节。\n\n腰部角度可以调节，可拆卸外套的裙子部分。\n\n水银灯裙撑后面有平台，可以坐在上面，但是不稳定，需要同时配合黑色裙摆支撑，裙摆对应位置有棱角。\n\n加装羽翼后，羽翼还可以实现纵轴方向上的支撑。\n\n**所以这个 `宮沢模型限定` 版，能实现的最稳定的位置就是紧贴纵轴，和宣传图一致。** 至于普通版，宣传图是距离纵轴有一定距离的。\n\n~~当然离开纵轴正常摆放也没有问题。~~ **此款由于下半身比较重，会前倾，需要依靠羽翼协助支撑。**\n\n最后，我把它放到了显示器左上角，这个角度比较好。显示器略厚于十字架摆台，依然可以靠裙撑协助支撑，显示器常规左右调整角度，并不会掉下来。\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-7.JPG-wm.white)\n\n![img](https://cdn0.yukapril.com/blog/2018-06-26-suigintou-8.JPG-wm.white)\n","slug":"2018-2018-06-26-suigintou","published":1,"updated":"2020-03-02T07:16:34.686Z","comments":1,"photos":[],"link":"","_id":"cka5ik8cg0050nybg8wtnurb9","content":"<p>两周前突然起兴，下载了 Bilibili 客户端，真的，我之前竟然没有用过、下载过，仅仅听说过。软件非常好用，而且喜欢的动漫也可以看到，比如这次的正文《蔷薇少女》。</p>\n<p>在粗略看过一次后，决定去买一个人偶玩玩，就去了很久之前买东西的平台（030buy / 萌购）。</p>\n<a id=\"more\"></a>\n\n<p>最终考虑多种方面，决定买了 <a href=\"https://www.amazon.co.jp/%E3%82%BF%E3%82%AB%E3%83%A9%E3%83%88%E3%83%9F%E3%83%BC%E3%82%A2%E3%83%BC%E3%83%84-TAKARATOMY-A-R-T-S-%E3%83%AD%E3%83%BC%E3%82%BC%E3%83%B3%E3%83%A1%E3%82%A4%E3%83%87%E3%83%B3%E3%83%BB%E3%83%88%E3%83%AD%E3%82%A4%E3%83%A1%E3%83%B3%E3%83%88-%E5%AE%AE%E6%B2%A2%E6%A8%A1%E5%9E%8B%E9%99%90%E5%AE%9A%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3/dp/B000L93VII/ref=olp_product_details/356-6202642-6081623?_encoding=UTF8&me=\" target=\"_blank\" rel=\"noopener\">SRDX ローゼンメイデン・トロイメント 水銀燈 (宮沢模型限定バージョン)</a>。至于为什么选择这个，不是重点～</p>\n<p>不过还是要说下：</p>\n<p><strong>一是价格</strong></p>\n<p>这个模型貌似 2007 年出的，当时价格大致是不到 300 RMB，现在最少要将近 600 RMB了。</p>\n<p><strong>二是款型</strong></p>\n<p>这款水银灯造型（坐在十字架上）有 <code>宮沢模型限定</code> 和 <code>普通版</code> 两种，因为我也没买过普通版，所以下面描述可能不准确。</p>\n<p>通过图片来看，普通版表情不同，手持物品不同，腿部不能活动。</p>\n<p>而限定版，除此外，有两个表情，可拆卸羽翼，5组领结。</p>\n<p>当然，普通版价格有绝对优势。</p>\n<h2 id=\"快递\"><a href=\"#快递\" class=\"headerlink\" title=\"快递\"></a>快递</h2><p>上文提到了代购平台，我就不重复了。没必要反复广告。说说费用和快递速度吧。</p>\n<table>\n<thead>\n<tr>\n<th>类目</th>\n<th>价格</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>本体</td>\n<td>591 元（9800 円）</td>\n<td></td>\n</tr>\n<tr>\n<td>日本运费</td>\n<td>0 元</td>\n<td>亚马逊包邮</td>\n</tr>\n<tr>\n<td>代购费</td>\n<td>19 元（300 円）</td>\n<td></td>\n</tr>\n<tr>\n<td>国际运费（直发中国）</td>\n<td>119 元（1960 円）</td>\n<td></td>\n</tr>\n</tbody></table>\n<p><strong>总计花费：729 元。</strong></p>\n<p>关于代购购买后，发给我的方式，有多种方案：</p>\n<ul>\n<li>直发：直接从日本发给我，有 EMS、AIR、SAL、海运等。我当时看 EMS最快（2-5天），SAL大致8-15天，价格没有便宜太多。海运的速度就算了，也不便宜。</li>\n<li>团发：分为快团和普团。快团大致10-15天到国内，普团估计要20-30天。费用上好像快团70-80吧，普团50-60。但是，这个只是到国内中转站，还需要顺丰/圆通/韵达之类的快递送给你，所以成本至少还需要加上10-20块。</li>\n</ul>\n<p>当时忘了截图了，太可惜了。只能凭印象写一点。</p>\n<p>所以，即便是不着急（30天），估计从日本到自己收到运费也需要 70 块左右。选择速度快的 EMS 还是有优势的。</p>\n<p>来，看看 EMS 到底有多快。</p>\n<table>\n<thead>\n<tr>\n<th>时间</th>\n<th>星期</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2018.06.23 21:07</td>\n<td>周六</td>\n<td>引受</td>\n</tr>\n<tr>\n<td>2018.06.24 15:20</td>\n<td>周日</td>\n<td>国際交換局から発送</td>\n</tr>\n<tr>\n<td>2018.06.25 04:00</td>\n<td>周一</td>\n<td>国際交換局に到着</td>\n</tr>\n<tr>\n<td>2018.06.25 04:07</td>\n<td>周一</td>\n<td>到着交換局で保留</td>\n</tr>\n<tr>\n<td>2018.06.25 13:31</td>\n<td>周一</td>\n<td>国際交換局から発送</td>\n</tr>\n<tr>\n<td>2018.06.25 13:31</td>\n<td>周一</td>\n<td>税関から受領</td>\n</tr>\n<tr>\n<td>2018.06.25 18:03</td>\n<td>周一</td>\n<td>投递</td>\n</tr>\n<tr>\n<td>2018.06.25 18:39</td>\n<td>周一</td>\n<td>过了下班点，没人收，第二天再投递</td>\n</tr>\n<tr>\n<td>2018.06.26 10:52</td>\n<td>周二</td>\n<td>收到</td>\n</tr>\n</tbody></table>\n<p>总的来说，符合正常实效。周六发件，周日上飞机，周一到中国，顺利的话上午中午就能收到（周六如果能赶上飞机的话），这次由于过了下班点，所以隔了一天。</p>\n<p>这次比起之前代购要快多了，之前 EMS 很快，但是代购很磨蹭。</p>\n<p>所以，价格差不太多情况下，还是 EMS 好使。</p>\n<h2 id=\"开箱图\"><a href=\"#开箱图\" class=\"headerlink\" title=\"开箱图\"></a>开箱图</h2><p>开箱图不做任何图片修整。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-1.JPG-wm.white\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-2.JPG-wm.white\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-3.JPG-wm.white\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-4.JPG-wm.white\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-5.JPG-wm.white\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-6.JPG-wm.white\" alt=\"img\"></p>\n<p>嗯，没错，是中国制造的，运到日本后，又让我买回来了。我掏了两次运费…</p>\n<p>开箱我从来不整理的，是什么样子就是啥样子。此外夹带一份回执明信片。</p>\n<p>打开盒子后，蝴蝶结弄翻了，我也忘记调整回去了。</p>\n<p><strong>下面说点重要的：</strong></p>\n<p>可能是新品，但估计被拆封过。</p>\n<p>包装盒变形倒没什么，如果真是10年前的产物，也算保存完好了。</p>\n<p>外面的纸盒和里面的塑料盒，均出现二次胶条痕迹。外包装一处，内包装一处。</p>\n<p>内包装塑料盒，侧边有一处 2 公分左右开口，撕裂。</p>\n<h2 id=\"摆拍\"><a href=\"#摆拍\" class=\"headerlink\" title=\"摆拍\"></a>摆拍</h2><p>为了拍照，特意去超市买了养乐多。</p>\n<p>默认状态下，本体不带羽翼、领结、手花，需要自己安装。拍照表情为默认表情。</p>\n<p><del>羽翼我觉得可能有防呆设计，插不反。但是没测试过（因为做工感觉差的让我震惊）。</del> 羽翼插口做工不佳，安装时候需要注意方向。</p>\n<p>手花不是很稳，轻微力量即可碰掉。</p>\n<p>右手的角度可调节。左手一样可以。</p>\n<p>两条腿方向和角度均可调节。</p>\n<p>腰部角度可以调节，可拆卸外套的裙子部分。</p>\n<p>水银灯裙撑后面有平台，可以坐在上面，但是不稳定，需要同时配合黑色裙摆支撑，裙摆对应位置有棱角。</p>\n<p>加装羽翼后，羽翼还可以实现纵轴方向上的支撑。</p>\n<p><strong>所以这个 <code>宮沢模型限定</code> 版，能实现的最稳定的位置就是紧贴纵轴，和宣传图一致。</strong> 至于普通版，宣传图是距离纵轴有一定距离的。</p>\n<p><del>当然离开纵轴正常摆放也没有问题。</del> <strong>此款由于下半身比较重，会前倾，需要依靠羽翼协助支撑。</strong></p>\n<p>最后，我把它放到了显示器左上角，这个角度比较好。显示器略厚于十字架摆台，依然可以靠裙撑协助支撑，显示器常规左右调整角度，并不会掉下来。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-7.JPG-wm.white\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-8.JPG-wm.white\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"<p>两周前突然起兴，下载了 Bilibili 客户端，真的，我之前竟然没有用过、下载过，仅仅听说过。软件非常好用，而且喜欢的动漫也可以看到，比如这次的正文《蔷薇少女》。</p>\n<p>在粗略看过一次后，决定去买一个人偶玩玩，就去了很久之前买东西的平台（030buy / 萌购）。</p>","more":"<p>最终考虑多种方面，决定买了 <a href=\"https://www.amazon.co.jp/%E3%82%BF%E3%82%AB%E3%83%A9%E3%83%88%E3%83%9F%E3%83%BC%E3%82%A2%E3%83%BC%E3%83%84-TAKARATOMY-A-R-T-S-%E3%83%AD%E3%83%BC%E3%82%BC%E3%83%B3%E3%83%A1%E3%82%A4%E3%83%87%E3%83%B3%E3%83%BB%E3%83%88%E3%83%AD%E3%82%A4%E3%83%A1%E3%83%B3%E3%83%88-%E5%AE%AE%E6%B2%A2%E6%A8%A1%E5%9E%8B%E9%99%90%E5%AE%9A%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3/dp/B000L93VII/ref=olp_product_details/356-6202642-6081623?_encoding=UTF8&me=\" target=\"_blank\" rel=\"noopener\">SRDX ローゼンメイデン・トロイメント 水銀燈 (宮沢模型限定バージョン)</a>。至于为什么选择这个，不是重点～</p>\n<p>不过还是要说下：</p>\n<p><strong>一是价格</strong></p>\n<p>这个模型貌似 2007 年出的，当时价格大致是不到 300 RMB，现在最少要将近 600 RMB了。</p>\n<p><strong>二是款型</strong></p>\n<p>这款水银灯造型（坐在十字架上）有 <code>宮沢模型限定</code> 和 <code>普通版</code> 两种，因为我也没买过普通版，所以下面描述可能不准确。</p>\n<p>通过图片来看，普通版表情不同，手持物品不同，腿部不能活动。</p>\n<p>而限定版，除此外，有两个表情，可拆卸羽翼，5组领结。</p>\n<p>当然，普通版价格有绝对优势。</p>\n<h2 id=\"快递\"><a href=\"#快递\" class=\"headerlink\" title=\"快递\"></a>快递</h2><p>上文提到了代购平台，我就不重复了。没必要反复广告。说说费用和快递速度吧。</p>\n<table>\n<thead>\n<tr>\n<th>类目</th>\n<th>价格</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>本体</td>\n<td>591 元（9800 円）</td>\n<td></td>\n</tr>\n<tr>\n<td>日本运费</td>\n<td>0 元</td>\n<td>亚马逊包邮</td>\n</tr>\n<tr>\n<td>代购费</td>\n<td>19 元（300 円）</td>\n<td></td>\n</tr>\n<tr>\n<td>国际运费（直发中国）</td>\n<td>119 元（1960 円）</td>\n<td></td>\n</tr>\n</tbody></table>\n<p><strong>总计花费：729 元。</strong></p>\n<p>关于代购购买后，发给我的方式，有多种方案：</p>\n<ul>\n<li>直发：直接从日本发给我，有 EMS、AIR、SAL、海运等。我当时看 EMS最快（2-5天），SAL大致8-15天，价格没有便宜太多。海运的速度就算了，也不便宜。</li>\n<li>团发：分为快团和普团。快团大致10-15天到国内，普团估计要20-30天。费用上好像快团70-80吧，普团50-60。但是，这个只是到国内中转站，还需要顺丰/圆通/韵达之类的快递送给你，所以成本至少还需要加上10-20块。</li>\n</ul>\n<p>当时忘了截图了，太可惜了。只能凭印象写一点。</p>\n<p>所以，即便是不着急（30天），估计从日本到自己收到运费也需要 70 块左右。选择速度快的 EMS 还是有优势的。</p>\n<p>来，看看 EMS 到底有多快。</p>\n<table>\n<thead>\n<tr>\n<th>时间</th>\n<th>星期</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2018.06.23 21:07</td>\n<td>周六</td>\n<td>引受</td>\n</tr>\n<tr>\n<td>2018.06.24 15:20</td>\n<td>周日</td>\n<td>国際交換局から発送</td>\n</tr>\n<tr>\n<td>2018.06.25 04:00</td>\n<td>周一</td>\n<td>国際交換局に到着</td>\n</tr>\n<tr>\n<td>2018.06.25 04:07</td>\n<td>周一</td>\n<td>到着交換局で保留</td>\n</tr>\n<tr>\n<td>2018.06.25 13:31</td>\n<td>周一</td>\n<td>国際交換局から発送</td>\n</tr>\n<tr>\n<td>2018.06.25 13:31</td>\n<td>周一</td>\n<td>税関から受領</td>\n</tr>\n<tr>\n<td>2018.06.25 18:03</td>\n<td>周一</td>\n<td>投递</td>\n</tr>\n<tr>\n<td>2018.06.25 18:39</td>\n<td>周一</td>\n<td>过了下班点，没人收，第二天再投递</td>\n</tr>\n<tr>\n<td>2018.06.26 10:52</td>\n<td>周二</td>\n<td>收到</td>\n</tr>\n</tbody></table>\n<p>总的来说，符合正常实效。周六发件，周日上飞机，周一到中国，顺利的话上午中午就能收到（周六如果能赶上飞机的话），这次由于过了下班点，所以隔了一天。</p>\n<p>这次比起之前代购要快多了，之前 EMS 很快，但是代购很磨蹭。</p>\n<p>所以，价格差不太多情况下，还是 EMS 好使。</p>\n<h2 id=\"开箱图\"><a href=\"#开箱图\" class=\"headerlink\" title=\"开箱图\"></a>开箱图</h2><p>开箱图不做任何图片修整。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-1.JPG-wm.white\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-2.JPG-wm.white\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-3.JPG-wm.white\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-4.JPG-wm.white\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-5.JPG-wm.white\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-6.JPG-wm.white\" alt=\"img\"></p>\n<p>嗯，没错，是中国制造的，运到日本后，又让我买回来了。我掏了两次运费…</p>\n<p>开箱我从来不整理的，是什么样子就是啥样子。此外夹带一份回执明信片。</p>\n<p>打开盒子后，蝴蝶结弄翻了，我也忘记调整回去了。</p>\n<p><strong>下面说点重要的：</strong></p>\n<p>可能是新品，但估计被拆封过。</p>\n<p>包装盒变形倒没什么，如果真是10年前的产物，也算保存完好了。</p>\n<p>外面的纸盒和里面的塑料盒，均出现二次胶条痕迹。外包装一处，内包装一处。</p>\n<p>内包装塑料盒，侧边有一处 2 公分左右开口，撕裂。</p>\n<h2 id=\"摆拍\"><a href=\"#摆拍\" class=\"headerlink\" title=\"摆拍\"></a>摆拍</h2><p>为了拍照，特意去超市买了养乐多。</p>\n<p>默认状态下，本体不带羽翼、领结、手花，需要自己安装。拍照表情为默认表情。</p>\n<p><del>羽翼我觉得可能有防呆设计，插不反。但是没测试过（因为做工感觉差的让我震惊）。</del> 羽翼插口做工不佳，安装时候需要注意方向。</p>\n<p>手花不是很稳，轻微力量即可碰掉。</p>\n<p>右手的角度可调节。左手一样可以。</p>\n<p>两条腿方向和角度均可调节。</p>\n<p>腰部角度可以调节，可拆卸外套的裙子部分。</p>\n<p>水银灯裙撑后面有平台，可以坐在上面，但是不稳定，需要同时配合黑色裙摆支撑，裙摆对应位置有棱角。</p>\n<p>加装羽翼后，羽翼还可以实现纵轴方向上的支撑。</p>\n<p><strong>所以这个 <code>宮沢模型限定</code> 版，能实现的最稳定的位置就是紧贴纵轴，和宣传图一致。</strong> 至于普通版，宣传图是距离纵轴有一定距离的。</p>\n<p><del>当然离开纵轴正常摆放也没有问题。</del> <strong>此款由于下半身比较重，会前倾，需要依靠羽翼协助支撑。</strong></p>\n<p>最后，我把它放到了显示器左上角，这个角度比较好。显示器略厚于十字架摆台，依然可以靠裙撑协助支撑，显示器常规左右调整角度，并不会掉下来。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-7.JPG-wm.white\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-06-26-suigintou-8.JPG-wm.white\" alt=\"img\"></p>"},{"layout":"post","title":"移除自动启动的 Adobe Creative Cloud","date":"2018-07-02T21:03:00.000Z","_content":"\n自从安装了新版 adobe cc 套件，就被默认安装了 Creative Cloud。这玩意装了也就算了，可还是自启动。而且 Mac 下，还不能通过用户管理-开机启动里面关闭掉。\n\n往上一查被它困扰的人还挺多的，也有不少解决方案。\n\n<!-- more -->\n\n其中最简单的，就属于安装官方卸载程序了。\n\n**第一步**，去官网下载 [卸载 Creative Cloud 桌面应用程序](https://helpx.adobe.com/cn/creative-cloud/help/uninstall-creative-cloud-desktop-app.html)，Windows 和 Mac 都有。\n\n**第二步**，运行此软件，选择卸载就可以了，没有复杂的步骤。\n\n--EOF--","source":"_posts/2018/2018-07-02-adobe-creative-cloud.md","raw":"---\nlayout: post\ntitle: 移除自动启动的 Adobe Creative Cloud \ndate: 2018-07-02 21:03:00 GMT+0800\ncategories: [杂谈]\ntags:  [adobe,cc]\n---\n\n自从安装了新版 adobe cc 套件，就被默认安装了 Creative Cloud。这玩意装了也就算了，可还是自启动。而且 Mac 下，还不能通过用户管理-开机启动里面关闭掉。\n\n往上一查被它困扰的人还挺多的，也有不少解决方案。\n\n<!-- more -->\n\n其中最简单的，就属于安装官方卸载程序了。\n\n**第一步**，去官网下载 [卸载 Creative Cloud 桌面应用程序](https://helpx.adobe.com/cn/creative-cloud/help/uninstall-creative-cloud-desktop-app.html)，Windows 和 Mac 都有。\n\n**第二步**，运行此软件，选择卸载就可以了，没有复杂的步骤。\n\n--EOF--","slug":"2018-2018-07-02-adobe-creative-cloud","published":1,"updated":"2020-03-06T01:17:48.706Z","comments":1,"photos":[],"link":"","_id":"cka5ik8ch0054nybgfbtie8rf","content":"<p>自从安装了新版 adobe cc 套件，就被默认安装了 Creative Cloud。这玩意装了也就算了，可还是自启动。而且 Mac 下，还不能通过用户管理-开机启动里面关闭掉。</p>\n<p>往上一查被它困扰的人还挺多的，也有不少解决方案。</p>\n<a id=\"more\"></a>\n\n<p>其中最简单的，就属于安装官方卸载程序了。</p>\n<p><strong>第一步</strong>，去官网下载 <a href=\"https://helpx.adobe.com/cn/creative-cloud/help/uninstall-creative-cloud-desktop-app.html\" target=\"_blank\" rel=\"noopener\">卸载 Creative Cloud 桌面应用程序</a>，Windows 和 Mac 都有。</p>\n<p><strong>第二步</strong>，运行此软件，选择卸载就可以了，没有复杂的步骤。</p>\n<p>–EOF–</p>\n","site":{"data":{}},"excerpt":"<p>自从安装了新版 adobe cc 套件，就被默认安装了 Creative Cloud。这玩意装了也就算了，可还是自启动。而且 Mac 下，还不能通过用户管理-开机启动里面关闭掉。</p>\n<p>往上一查被它困扰的人还挺多的，也有不少解决方案。</p>","more":"<p>其中最简单的，就属于安装官方卸载程序了。</p>\n<p><strong>第一步</strong>，去官网下载 <a href=\"https://helpx.adobe.com/cn/creative-cloud/help/uninstall-creative-cloud-desktop-app.html\" target=\"_blank\" rel=\"noopener\">卸载 Creative Cloud 桌面应用程序</a>，Windows 和 Mac 都有。</p>\n<p><strong>第二步</strong>，运行此软件，选择卸载就可以了，没有复杂的步骤。</p>\n<p>–EOF–</p>"},{"layout":"post","title":"js 数组扁平化与反扁平化处理（下）","date":"2018-06-28T00:24:00.000Z","_content":"\n上一次我们写了一个函数，将扁平化的数组转为非扁平化。这次我们继续，将上次最终的结果，进行扁平化处理。\n\n<!-- more -->\n\n首先准备出上次的最终结果，作为需要处理的数据：\n\n```js\nconst unflattenedArr = [\n    {\n        \"id\": 1,\n        \"text\": \"A\",\n        \"children\": [\n            {\"id\": 4, \"text\": \"A1\"},\n            {\"id\": 5, \"text\": \"A2\"}\n        ]\n    },\n    {\n        \"id\": 2,\n        \"text\": \"B\",\n        \"children\": [\n            {\n                \"id\": 6,\n                \"text\": \"B1\"\n            },\n            {\n                \"id\": 7,\n                \"text\": \"B2\",\n                \"children\": [\n                    {\"id\": 8, \"text\": \"B21\"},\n                    {\"id\": 9, \"text\": \"B22\"}\n                ]\n            }\n        ]\n    },\n    {\n        \"id\": 3,\n        \"text\": \"C\"\n    }\n]\n```\n\n想把复杂的结构扁平化，就是一层一层递归输出。写法还算简单：\n\n```js\nconst flatten = arr => {\n    let unflattenedArr = JSON.parse(JSON.stringify(arr))\n    let ret = []\n    // 循环遍历\n    unflattenedArr.forEach(item => {\n        // 直接放置到存储数组中\n        let obj = {\n            id: item.id,\n            text: item.text\n        }\n        ret.push(obj)\n\n        // 如果存在子节点，还需要递归遍历\n        if (item.children) {\n            let temp = flatten(item.children)\n            // 将子节点数据合并到存储数组中\n            ret = [...ret, ...temp]\n        }\n    })\n    return ret\n}\nlet flattenedArr = flatten(unflattenedArr)\nconsole.log('unflattenedArr:', unflattenedArr)\nconsole.log('flattenedArr:', flattenedArr)\n```\n\n通过这么处理，所有的节点都可以扁平化了。但是有个问题，没有父节点 `pid` 信息，这个需要再补充。\n\n每次递归时候，必须带上父节点信息，否则怎么知道属于那个节点呢？所以函数签名（参数）也需要改造下：\n\n```js\n----    const flatten = arr => {\n++++    const flatten = (arr, pid) => {\n            let unflattenedArr = JSON.parse(JSON.stringify(arr))\n            let ret = []\n            // 循环遍历\n            unflattenedArr.forEach(item => {\n                // 直接放置到存储数组中\n                let obj = {\n                    id: item.id,\n                    text: item.text\n                }\n++++            if (pid) obj.pid = pid\n                ret.push(obj)\n\n                // 如果存在子节点，还需要递归遍历\n                if (item.children) {\n----                let temp = flatten(item.children)\n++++                let temp = flatten(item.children, item.id)\n                    // 将子节点数据合并到存储数组中\n                    ret = [...ret, ...temp]\n                }\n            })\n            return ret\n        }\n\n        let flattenedArr = flatten(unflattenedArr)\n        console.log('unflattenedArr:', unflattenedArr)\n        console.log('flattenedArr:', flattenedArr)\n```\n\n这样就搞定了。\n\n本文代码见此：[Github](https://github.com/yukapril/learning/blob/master/array-flattened/flattened.html)\n","source":"_posts/2018/2018-06-28-array-flattened.md","raw":"---\nlayout: post\ntitle: js 数组扁平化与反扁平化处理（下）\ndate: 2018-06-28 00:24:00 GMT+0800\ncategories: [前端]\ntags:  [扁平化]\n---\n\n上一次我们写了一个函数，将扁平化的数组转为非扁平化。这次我们继续，将上次最终的结果，进行扁平化处理。\n\n<!-- more -->\n\n首先准备出上次的最终结果，作为需要处理的数据：\n\n```js\nconst unflattenedArr = [\n    {\n        \"id\": 1,\n        \"text\": \"A\",\n        \"children\": [\n            {\"id\": 4, \"text\": \"A1\"},\n            {\"id\": 5, \"text\": \"A2\"}\n        ]\n    },\n    {\n        \"id\": 2,\n        \"text\": \"B\",\n        \"children\": [\n            {\n                \"id\": 6,\n                \"text\": \"B1\"\n            },\n            {\n                \"id\": 7,\n                \"text\": \"B2\",\n                \"children\": [\n                    {\"id\": 8, \"text\": \"B21\"},\n                    {\"id\": 9, \"text\": \"B22\"}\n                ]\n            }\n        ]\n    },\n    {\n        \"id\": 3,\n        \"text\": \"C\"\n    }\n]\n```\n\n想把复杂的结构扁平化，就是一层一层递归输出。写法还算简单：\n\n```js\nconst flatten = arr => {\n    let unflattenedArr = JSON.parse(JSON.stringify(arr))\n    let ret = []\n    // 循环遍历\n    unflattenedArr.forEach(item => {\n        // 直接放置到存储数组中\n        let obj = {\n            id: item.id,\n            text: item.text\n        }\n        ret.push(obj)\n\n        // 如果存在子节点，还需要递归遍历\n        if (item.children) {\n            let temp = flatten(item.children)\n            // 将子节点数据合并到存储数组中\n            ret = [...ret, ...temp]\n        }\n    })\n    return ret\n}\nlet flattenedArr = flatten(unflattenedArr)\nconsole.log('unflattenedArr:', unflattenedArr)\nconsole.log('flattenedArr:', flattenedArr)\n```\n\n通过这么处理，所有的节点都可以扁平化了。但是有个问题，没有父节点 `pid` 信息，这个需要再补充。\n\n每次递归时候，必须带上父节点信息，否则怎么知道属于那个节点呢？所以函数签名（参数）也需要改造下：\n\n```js\n----    const flatten = arr => {\n++++    const flatten = (arr, pid) => {\n            let unflattenedArr = JSON.parse(JSON.stringify(arr))\n            let ret = []\n            // 循环遍历\n            unflattenedArr.forEach(item => {\n                // 直接放置到存储数组中\n                let obj = {\n                    id: item.id,\n                    text: item.text\n                }\n++++            if (pid) obj.pid = pid\n                ret.push(obj)\n\n                // 如果存在子节点，还需要递归遍历\n                if (item.children) {\n----                let temp = flatten(item.children)\n++++                let temp = flatten(item.children, item.id)\n                    // 将子节点数据合并到存储数组中\n                    ret = [...ret, ...temp]\n                }\n            })\n            return ret\n        }\n\n        let flattenedArr = flatten(unflattenedArr)\n        console.log('unflattenedArr:', unflattenedArr)\n        console.log('flattenedArr:', flattenedArr)\n```\n\n这样就搞定了。\n\n本文代码见此：[Github](https://github.com/yukapril/learning/blob/master/array-flattened/flattened.html)\n","slug":"2018-2018-06-28-array-flattened","published":1,"updated":"2020-03-02T07:16:34.686Z","comments":1,"photos":[],"link":"","_id":"cka5ik8ci0057nybgad0ds4h4","content":"<p>上一次我们写了一个函数，将扁平化的数组转为非扁平化。这次我们继续，将上次最终的结果，进行扁平化处理。</p>\n<a id=\"more\"></a>\n\n<p>首先准备出上次的最终结果，作为需要处理的数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unflattenedArr = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"A\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"children\"</span>: [</span><br><span class=\"line\">            &#123;<span class=\"string\">\"id\"</span>: <span class=\"number\">4</span>, <span class=\"string\">\"text\"</span>: <span class=\"string\">\"A1\"</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"string\">\"id\"</span>: <span class=\"number\">5</span>, <span class=\"string\">\"text\"</span>: <span class=\"string\">\"A2\"</span>&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"children\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"number\">6</span>,</span><br><span class=\"line\">                <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B1\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B2\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"children\"</span>: [</span><br><span class=\"line\">                    &#123;<span class=\"string\">\"id\"</span>: <span class=\"number\">8</span>, <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B21\"</span>&#125;,</span><br><span class=\"line\">                    &#123;<span class=\"string\">\"id\"</span>: <span class=\"number\">9</span>, <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B22\"</span>&#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"C\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>想把复杂的结构扁平化，就是一层一层递归输出。写法还算简单：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> flatten = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> unflattenedArr = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(arr))</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ret = []</span><br><span class=\"line\">    <span class=\"comment\">// 循环遍历</span></span><br><span class=\"line\">    unflattenedArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 直接放置到存储数组中</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">            id: item.id,</span><br><span class=\"line\">            text: item.text</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ret.push(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果存在子节点，还需要递归遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.children) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = flatten(item.children)</span><br><span class=\"line\">            <span class=\"comment\">// 将子节点数据合并到存储数组中</span></span><br><span class=\"line\">            ret = [...ret, ...temp]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> flattenedArr = flatten(unflattenedArr)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'unflattenedArr:'</span>, unflattenedArr)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'flattenedArr:'</span>, flattenedArr)</span><br></pre></td></tr></table></figure>\n\n<p>通过这么处理，所有的节点都可以扁平化了。但是有个问题，没有父节点 <code>pid</code> 信息，这个需要再补充。</p>\n<p>每次递归时候，必须带上父节点信息，否则怎么知道属于那个节点呢？所以函数签名（参数）也需要改造下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">----    <span class=\"keyword\">const</span> flatten = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">++++    <span class=\"keyword\">const</span> flatten = <span class=\"function\">(<span class=\"params\">arr, pid</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> unflattenedArr = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(arr))</span><br><span class=\"line\">            <span class=\"keyword\">let</span> ret = []</span><br><span class=\"line\">            <span class=\"comment\">// 循环遍历</span></span><br><span class=\"line\">            unflattenedArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 直接放置到存储数组中</span></span><br><span class=\"line\">                <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">                    id: item.id,</span><br><span class=\"line\">                    text: item.text</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">++++            <span class=\"keyword\">if</span> (pid) obj.pid = pid</span><br><span class=\"line\">                ret.push(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 如果存在子节点，还需要递归遍历</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (item.children) &#123;</span><br><span class=\"line\">----                <span class=\"keyword\">let</span> temp = flatten(item.children)</span><br><span class=\"line\">++++                <span class=\"keyword\">let</span> temp = flatten(item.children, item.id)</span><br><span class=\"line\">                    <span class=\"comment\">// 将子节点数据合并到存储数组中</span></span><br><span class=\"line\">                    ret = [...ret, ...temp]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> flattenedArr = flatten(unflattenedArr)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'unflattenedArr:'</span>, unflattenedArr)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'flattenedArr:'</span>, flattenedArr)</span><br></pre></td></tr></table></figure>\n\n<p>这样就搞定了。</p>\n<p>本文代码见此：<a href=\"https://github.com/yukapril/learning/blob/master/array-flattened/flattened.html\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n","site":{"data":{}},"excerpt":"<p>上一次我们写了一个函数，将扁平化的数组转为非扁平化。这次我们继续，将上次最终的结果，进行扁平化处理。</p>","more":"<p>首先准备出上次的最终结果，作为需要处理的数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unflattenedArr = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"A\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"children\"</span>: [</span><br><span class=\"line\">            &#123;<span class=\"string\">\"id\"</span>: <span class=\"number\">4</span>, <span class=\"string\">\"text\"</span>: <span class=\"string\">\"A1\"</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"string\">\"id\"</span>: <span class=\"number\">5</span>, <span class=\"string\">\"text\"</span>: <span class=\"string\">\"A2\"</span>&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"children\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"number\">6</span>,</span><br><span class=\"line\">                <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B1\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">                <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B2\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"children\"</span>: [</span><br><span class=\"line\">                    &#123;<span class=\"string\">\"id\"</span>: <span class=\"number\">8</span>, <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B21\"</span>&#125;,</span><br><span class=\"line\">                    &#123;<span class=\"string\">\"id\"</span>: <span class=\"number\">9</span>, <span class=\"string\">\"text\"</span>: <span class=\"string\">\"B22\"</span>&#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"string\">\"text\"</span>: <span class=\"string\">\"C\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>想把复杂的结构扁平化，就是一层一层递归输出。写法还算简单：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> flatten = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> unflattenedArr = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(arr))</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ret = []</span><br><span class=\"line\">    <span class=\"comment\">// 循环遍历</span></span><br><span class=\"line\">    unflattenedArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 直接放置到存储数组中</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">            id: item.id,</span><br><span class=\"line\">            text: item.text</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ret.push(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果存在子节点，还需要递归遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.children) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = flatten(item.children)</span><br><span class=\"line\">            <span class=\"comment\">// 将子节点数据合并到存储数组中</span></span><br><span class=\"line\">            ret = [...ret, ...temp]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> flattenedArr = flatten(unflattenedArr)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'unflattenedArr:'</span>, unflattenedArr)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'flattenedArr:'</span>, flattenedArr)</span><br></pre></td></tr></table></figure>\n\n<p>通过这么处理，所有的节点都可以扁平化了。但是有个问题，没有父节点 <code>pid</code> 信息，这个需要再补充。</p>\n<p>每次递归时候，必须带上父节点信息，否则怎么知道属于那个节点呢？所以函数签名（参数）也需要改造下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">----    <span class=\"keyword\">const</span> flatten = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span><br><span class=\"line\">++++    <span class=\"keyword\">const</span> flatten = <span class=\"function\">(<span class=\"params\">arr, pid</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> unflattenedArr = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(arr))</span><br><span class=\"line\">            <span class=\"keyword\">let</span> ret = []</span><br><span class=\"line\">            <span class=\"comment\">// 循环遍历</span></span><br><span class=\"line\">            unflattenedArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 直接放置到存储数组中</span></span><br><span class=\"line\">                <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">                    id: item.id,</span><br><span class=\"line\">                    text: item.text</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">++++            <span class=\"keyword\">if</span> (pid) obj.pid = pid</span><br><span class=\"line\">                ret.push(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 如果存在子节点，还需要递归遍历</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (item.children) &#123;</span><br><span class=\"line\">----                <span class=\"keyword\">let</span> temp = flatten(item.children)</span><br><span class=\"line\">++++                <span class=\"keyword\">let</span> temp = flatten(item.children, item.id)</span><br><span class=\"line\">                    <span class=\"comment\">// 将子节点数据合并到存储数组中</span></span><br><span class=\"line\">                    ret = [...ret, ...temp]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> flattenedArr = flatten(unflattenedArr)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'unflattenedArr:'</span>, unflattenedArr)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'flattenedArr:'</span>, flattenedArr)</span><br></pre></td></tr></table></figure>\n\n<p>这样就搞定了。</p>\n<p>本文代码见此：<a href=\"https://github.com/yukapril/learning/blob/master/array-flattened/flattened.html\" target=\"_blank\" rel=\"noopener\">Github</a></p>"},{"layout":"post","title":"管理 hosts 的软件","date":"2018-08-28T23:17:00.000Z","_content":"\n公司网络调整之后，外网就不能直接访问内网数据了。需要试用 VPN 访问后，在配置对应的 hosts 解析才可以。\n\n内网还分两套测试环境，这就涉及反复调整 hosts。所以，我也就找了些能管理 hosts 的软件。\n\n<!-- more -->\n\n## iHosts （Mac）\n![img](https://cdn0.yukapril.com/blog/2018-08-28-hosts-iHosts.png-wm.black)\n\n这个是个原生软件，只有 Mac 下才有。默认只提供4个节点（配置）。如图，我用了两个了。此外，我特意截图到了状态栏，他要切换配置选项，需要在这里点击，主程序里面是不行的。\n\n优点：简单，速度快，支持分组，好用。\n\n缺点：只能写四个配置，多了要收费。而且不支持 url 形式的 hosts，比如为了某些需求要同步互联网上的 hosts，它就不行了。\n\n不过如果不是特别重度用户，我觉得还是不错的。\n\n官网：[https://h.ihosts.toolinbox.net/cn](https://h.ihosts.toolinbox.net/cn)\n\n## SwitchHosts (全平台)\n![img](https://cdn0.yukapril.com/blog/2018-08-28-hosts-SwitchHosts.png-wm.black)\n\n这个软件其实就是前端工具，通过 Electron 打包，所以就没有所谓的平台概念了，Windows Mac Linux 均可以。而且开源免费。\n\n虽然是打包的网页软件，但是在 Mac 下速度还是很快的，Windows 下面速度我觉得有点卡。不过好在功能非常强大，主界面可以完成所有操作，包括上面 iHosts 提到的配置切换，主页面可以操作，同样状态栏一样可以！而且支持添加 url 类型的 hosts，还可以设置更新频率。简直完美！\n\n优点：界面漂亮，支持 url 类型 hosts。支持分组，功能强大。\n\n缺点：我在 Windows 下运行有点卡。\n\n官网：[https://oldj.github.io/SwitchHosts](https://oldj.github.io/SwitchHosts)\n\n## Hozz (全平台)\n![img](https://cdn0.yukapril.com/blog/2018-08-28-hosts-Hozz.png-wm.black)\n\n这个软件和上一个一样，都是通过 Electron 打包的，任意平台都可以运行。页面简单漂亮，也支持 url 形式 hosts，貌似还很有名气。\n\n由于 Mac 下需要额外配置权限，还有下载完毕后仍然要更新，而且还更新不下来，所以我觉得 Mac 就不推荐了。\n\n优点：界面漂亮，支持 url 类型 hosts，功能简单。\n\n缺点：功能虽然简单，但是可配置能力比较单一。在我看来，Mac 下体验较差。\n\n官网：[https://blog.zhangruipeng.me/Hozz](https://blog.zhangruipeng.me/Hozz)\n","source":"_posts/2018/2018-08-28-hosts.md","raw":"---\nlayout: post\ntitle: 管理 hosts 的软件 \ndate: 2018-08-28 23:17:00 GMT+0800\ncategories: [软件]\ntags:  [hosts, iHosts, SwitchHosts, Hozz]\n---\n\n公司网络调整之后，外网就不能直接访问内网数据了。需要试用 VPN 访问后，在配置对应的 hosts 解析才可以。\n\n内网还分两套测试环境，这就涉及反复调整 hosts。所以，我也就找了些能管理 hosts 的软件。\n\n<!-- more -->\n\n## iHosts （Mac）\n![img](https://cdn0.yukapril.com/blog/2018-08-28-hosts-iHosts.png-wm.black)\n\n这个是个原生软件，只有 Mac 下才有。默认只提供4个节点（配置）。如图，我用了两个了。此外，我特意截图到了状态栏，他要切换配置选项，需要在这里点击，主程序里面是不行的。\n\n优点：简单，速度快，支持分组，好用。\n\n缺点：只能写四个配置，多了要收费。而且不支持 url 形式的 hosts，比如为了某些需求要同步互联网上的 hosts，它就不行了。\n\n不过如果不是特别重度用户，我觉得还是不错的。\n\n官网：[https://h.ihosts.toolinbox.net/cn](https://h.ihosts.toolinbox.net/cn)\n\n## SwitchHosts (全平台)\n![img](https://cdn0.yukapril.com/blog/2018-08-28-hosts-SwitchHosts.png-wm.black)\n\n这个软件其实就是前端工具，通过 Electron 打包，所以就没有所谓的平台概念了，Windows Mac Linux 均可以。而且开源免费。\n\n虽然是打包的网页软件，但是在 Mac 下速度还是很快的，Windows 下面速度我觉得有点卡。不过好在功能非常强大，主界面可以完成所有操作，包括上面 iHosts 提到的配置切换，主页面可以操作，同样状态栏一样可以！而且支持添加 url 类型的 hosts，还可以设置更新频率。简直完美！\n\n优点：界面漂亮，支持 url 类型 hosts。支持分组，功能强大。\n\n缺点：我在 Windows 下运行有点卡。\n\n官网：[https://oldj.github.io/SwitchHosts](https://oldj.github.io/SwitchHosts)\n\n## Hozz (全平台)\n![img](https://cdn0.yukapril.com/blog/2018-08-28-hosts-Hozz.png-wm.black)\n\n这个软件和上一个一样，都是通过 Electron 打包的，任意平台都可以运行。页面简单漂亮，也支持 url 形式 hosts，貌似还很有名气。\n\n由于 Mac 下需要额外配置权限，还有下载完毕后仍然要更新，而且还更新不下来，所以我觉得 Mac 就不推荐了。\n\n优点：界面漂亮，支持 url 类型 hosts，功能简单。\n\n缺点：功能虽然简单，但是可配置能力比较单一。在我看来，Mac 下体验较差。\n\n官网：[https://blog.zhangruipeng.me/Hozz](https://blog.zhangruipeng.me/Hozz)\n","slug":"2018-2018-08-28-hosts","published":1,"updated":"2020-03-02T07:16:34.686Z","comments":1,"photos":[],"link":"","_id":"cka5ik8cj005anybg5xonck7v","content":"<p>公司网络调整之后，外网就不能直接访问内网数据了。需要试用 VPN 访问后，在配置对应的 hosts 解析才可以。</p>\n<p>内网还分两套测试环境，这就涉及反复调整 hosts。所以，我也就找了些能管理 hosts 的软件。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"iHosts-（Mac）\"><a href=\"#iHosts-（Mac）\" class=\"headerlink\" title=\"iHosts （Mac）\"></a>iHosts （Mac）</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-08-28-hosts-iHosts.png-wm.black\" alt=\"img\"></p>\n<p>这个是个原生软件，只有 Mac 下才有。默认只提供4个节点（配置）。如图，我用了两个了。此外，我特意截图到了状态栏，他要切换配置选项，需要在这里点击，主程序里面是不行的。</p>\n<p>优点：简单，速度快，支持分组，好用。</p>\n<p>缺点：只能写四个配置，多了要收费。而且不支持 url 形式的 hosts，比如为了某些需求要同步互联网上的 hosts，它就不行了。</p>\n<p>不过如果不是特别重度用户，我觉得还是不错的。</p>\n<p>官网：<a href=\"https://h.ihosts.toolinbox.net/cn\" target=\"_blank\" rel=\"noopener\">https://h.ihosts.toolinbox.net/cn</a></p>\n<h2 id=\"SwitchHosts-全平台\"><a href=\"#SwitchHosts-全平台\" class=\"headerlink\" title=\"SwitchHosts (全平台)\"></a>SwitchHosts (全平台)</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-08-28-hosts-SwitchHosts.png-wm.black\" alt=\"img\"></p>\n<p>这个软件其实就是前端工具，通过 Electron 打包，所以就没有所谓的平台概念了，Windows Mac Linux 均可以。而且开源免费。</p>\n<p>虽然是打包的网页软件，但是在 Mac 下速度还是很快的，Windows 下面速度我觉得有点卡。不过好在功能非常强大，主界面可以完成所有操作，包括上面 iHosts 提到的配置切换，主页面可以操作，同样状态栏一样可以！而且支持添加 url 类型的 hosts，还可以设置更新频率。简直完美！</p>\n<p>优点：界面漂亮，支持 url 类型 hosts。支持分组，功能强大。</p>\n<p>缺点：我在 Windows 下运行有点卡。</p>\n<p>官网：<a href=\"https://oldj.github.io/SwitchHosts\" target=\"_blank\" rel=\"noopener\">https://oldj.github.io/SwitchHosts</a></p>\n<h2 id=\"Hozz-全平台\"><a href=\"#Hozz-全平台\" class=\"headerlink\" title=\"Hozz (全平台)\"></a>Hozz (全平台)</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-08-28-hosts-Hozz.png-wm.black\" alt=\"img\"></p>\n<p>这个软件和上一个一样，都是通过 Electron 打包的，任意平台都可以运行。页面简单漂亮，也支持 url 形式 hosts，貌似还很有名气。</p>\n<p>由于 Mac 下需要额外配置权限，还有下载完毕后仍然要更新，而且还更新不下来，所以我觉得 Mac 就不推荐了。</p>\n<p>优点：界面漂亮，支持 url 类型 hosts，功能简单。</p>\n<p>缺点：功能虽然简单，但是可配置能力比较单一。在我看来，Mac 下体验较差。</p>\n<p>官网：<a href=\"https://blog.zhangruipeng.me/Hozz\" target=\"_blank\" rel=\"noopener\">https://blog.zhangruipeng.me/Hozz</a></p>\n","site":{"data":{}},"excerpt":"<p>公司网络调整之后，外网就不能直接访问内网数据了。需要试用 VPN 访问后，在配置对应的 hosts 解析才可以。</p>\n<p>内网还分两套测试环境，这就涉及反复调整 hosts。所以，我也就找了些能管理 hosts 的软件。</p>","more":"<h2 id=\"iHosts-（Mac）\"><a href=\"#iHosts-（Mac）\" class=\"headerlink\" title=\"iHosts （Mac）\"></a>iHosts （Mac）</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-08-28-hosts-iHosts.png-wm.black\" alt=\"img\"></p>\n<p>这个是个原生软件，只有 Mac 下才有。默认只提供4个节点（配置）。如图，我用了两个了。此外，我特意截图到了状态栏，他要切换配置选项，需要在这里点击，主程序里面是不行的。</p>\n<p>优点：简单，速度快，支持分组，好用。</p>\n<p>缺点：只能写四个配置，多了要收费。而且不支持 url 形式的 hosts，比如为了某些需求要同步互联网上的 hosts，它就不行了。</p>\n<p>不过如果不是特别重度用户，我觉得还是不错的。</p>\n<p>官网：<a href=\"https://h.ihosts.toolinbox.net/cn\" target=\"_blank\" rel=\"noopener\">https://h.ihosts.toolinbox.net/cn</a></p>\n<h2 id=\"SwitchHosts-全平台\"><a href=\"#SwitchHosts-全平台\" class=\"headerlink\" title=\"SwitchHosts (全平台)\"></a>SwitchHosts (全平台)</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-08-28-hosts-SwitchHosts.png-wm.black\" alt=\"img\"></p>\n<p>这个软件其实就是前端工具，通过 Electron 打包，所以就没有所谓的平台概念了，Windows Mac Linux 均可以。而且开源免费。</p>\n<p>虽然是打包的网页软件，但是在 Mac 下速度还是很快的，Windows 下面速度我觉得有点卡。不过好在功能非常强大，主界面可以完成所有操作，包括上面 iHosts 提到的配置切换，主页面可以操作，同样状态栏一样可以！而且支持添加 url 类型的 hosts，还可以设置更新频率。简直完美！</p>\n<p>优点：界面漂亮，支持 url 类型 hosts。支持分组，功能强大。</p>\n<p>缺点：我在 Windows 下运行有点卡。</p>\n<p>官网：<a href=\"https://oldj.github.io/SwitchHosts\" target=\"_blank\" rel=\"noopener\">https://oldj.github.io/SwitchHosts</a></p>\n<h2 id=\"Hozz-全平台\"><a href=\"#Hozz-全平台\" class=\"headerlink\" title=\"Hozz (全平台)\"></a>Hozz (全平台)</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-08-28-hosts-Hozz.png-wm.black\" alt=\"img\"></p>\n<p>这个软件和上一个一样，都是通过 Electron 打包的，任意平台都可以运行。页面简单漂亮，也支持 url 形式 hosts，貌似还很有名气。</p>\n<p>由于 Mac 下需要额外配置权限，还有下载完毕后仍然要更新，而且还更新不下来，所以我觉得 Mac 就不推荐了。</p>\n<p>优点：界面漂亮，支持 url 类型 hosts，功能简单。</p>\n<p>缺点：功能虽然简单，但是可配置能力比较单一。在我看来，Mac 下体验较差。</p>\n<p>官网：<a href=\"https://blog.zhangruipeng.me/Hozz\" target=\"_blank\" rel=\"noopener\">https://blog.zhangruipeng.me/Hozz</a></p>"},{"layout":"post","title":"cloudcone ubuntu 绑定添加 IPv6 方法","date":"2018-09-11T21:40:00.000Z","_content":"\n在 cloudcone 中买了一个 ubuntu VPS，发现支持送不少的 IPv6 地址。正好最近需要用到，就打算直接来使用。\n\n结果发现 ping6 不通。尴尬...\n\n<!-- more -->\n\n找了一些资料，说的比较复杂，基本上都是说通过安装代理工具，让不支持 IPv6 的机器通过第三方代理的方式获取 IP。\n\n但我的这个是本身有，自己却用不了啊。\n\n查了半天，其实解决很简单，只需要在系统中绑定 IPv6 的地址就好了，就这么简单。\n\n编辑 `/etc/network/interfaces` 文件：\n\n默认应该是下面这样子，只有 IPv4 的地址：\n\n```\n# Generated by SolusVM\n\n auto lo\n  iface lo inet loopback\n\n auto eth0\n  iface eth0 inet static\n   address 173.82.xx.xx\n   gateway 173.82.xx.xx\n   netmask 255.255.255.0\n   dns-nameservers 8.8.8.8 8.8.4.4\n```\n\n只需要在后面增加上 IPv6 的信息就好了：\n\n```\n# Generated by SolusVM\n\n auto lo\n  iface lo inet loopback\n\n auto eth0\n  iface eth0 inet static\n   address 173.82.243.11\n   gateway 173.82.243.1\n   netmask 255.255.255.0\n   dns-nameservers 8.8.8.8 8.8.4.4\n\n+ iface eth0 inet6 static\n+  address 2607:f130::xx:xx\n+  netmask 64\n+  gateway 2607:f130::xx:xx\n```\n\n之后，可以查看下网络信息\n\n```\nifconfig\n```\n\n应该可以看到刚刚配置好的 IPv6 信息。\n\n之后，通过 `ping6` 再测试下：\n\n```\nping6 ipv6.google.com\n```\n\n可以看到正常回复了：\n\n```\n64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=6 ttl=58 time=0.717 ms\n64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=7 ttl=58 time=0.704 ms\n64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=8 ttl=58 time=1.52 ms\n64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=9 ttl=58 time=0.783 ms\n64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=10 ttl=58 time=0.633 ms\n64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=11 ttl=58 time=0.638 ms\n64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=12 ttl=58 time=0.784 ms\n```\n\n--END--\n","source":"_posts/2018/2018-09-11-ubuntu-ipv6.md","raw":"---\nlayout: post\ntitle: cloudcone ubuntu 绑定添加 IPv6 方法\ndate: 2018-09-11 21:40:00 GMT+0800\ncategories: [技术]\ntags:  [cloudcone,ubuntu,ipv6,配置]\n---\n\n在 cloudcone 中买了一个 ubuntu VPS，发现支持送不少的 IPv6 地址。正好最近需要用到，就打算直接来使用。\n\n结果发现 ping6 不通。尴尬...\n\n<!-- more -->\n\n找了一些资料，说的比较复杂，基本上都是说通过安装代理工具，让不支持 IPv6 的机器通过第三方代理的方式获取 IP。\n\n但我的这个是本身有，自己却用不了啊。\n\n查了半天，其实解决很简单，只需要在系统中绑定 IPv6 的地址就好了，就这么简单。\n\n编辑 `/etc/network/interfaces` 文件：\n\n默认应该是下面这样子，只有 IPv4 的地址：\n\n```\n# Generated by SolusVM\n\n auto lo\n  iface lo inet loopback\n\n auto eth0\n  iface eth0 inet static\n   address 173.82.xx.xx\n   gateway 173.82.xx.xx\n   netmask 255.255.255.0\n   dns-nameservers 8.8.8.8 8.8.4.4\n```\n\n只需要在后面增加上 IPv6 的信息就好了：\n\n```\n# Generated by SolusVM\n\n auto lo\n  iface lo inet loopback\n\n auto eth0\n  iface eth0 inet static\n   address 173.82.243.11\n   gateway 173.82.243.1\n   netmask 255.255.255.0\n   dns-nameservers 8.8.8.8 8.8.4.4\n\n+ iface eth0 inet6 static\n+  address 2607:f130::xx:xx\n+  netmask 64\n+  gateway 2607:f130::xx:xx\n```\n\n之后，可以查看下网络信息\n\n```\nifconfig\n```\n\n应该可以看到刚刚配置好的 IPv6 信息。\n\n之后，通过 `ping6` 再测试下：\n\n```\nping6 ipv6.google.com\n```\n\n可以看到正常回复了：\n\n```\n64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=6 ttl=58 time=0.717 ms\n64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=7 ttl=58 time=0.704 ms\n64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=8 ttl=58 time=1.52 ms\n64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=9 ttl=58 time=0.783 ms\n64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=10 ttl=58 time=0.633 ms\n64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=11 ttl=58 time=0.638 ms\n64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=12 ttl=58 time=0.784 ms\n```\n\n--END--\n","slug":"2018-2018-09-11-ubuntu-ipv6","published":1,"updated":"2020-03-06T01:30:05.987Z","comments":1,"photos":[],"link":"","_id":"cka5ik8ck005cnybgmzsrvriv","content":"<p>在 cloudcone 中买了一个 ubuntu VPS，发现支持送不少的 IPv6 地址。正好最近需要用到，就打算直接来使用。</p>\n<p>结果发现 ping6 不通。尴尬…</p>\n<a id=\"more\"></a>\n\n<p>找了一些资料，说的比较复杂，基本上都是说通过安装代理工具，让不支持 IPv6 的机器通过第三方代理的方式获取 IP。</p>\n<p>但我的这个是本身有，自己却用不了啊。</p>\n<p>查了半天，其实解决很简单，只需要在系统中绑定 IPv6 的地址就好了，就这么简单。</p>\n<p>编辑 <code>/etc/network/interfaces</code> 文件：</p>\n<p>默认应该是下面这样子，只有 IPv4 的地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Generated by SolusVM</span><br><span class=\"line\"></span><br><span class=\"line\"> auto lo</span><br><span class=\"line\">  iface lo inet loopback</span><br><span class=\"line\"></span><br><span class=\"line\"> auto eth0</span><br><span class=\"line\">  iface eth0 inet static</span><br><span class=\"line\">   address 173.82.xx.xx</span><br><span class=\"line\">   gateway 173.82.xx.xx</span><br><span class=\"line\">   netmask 255.255.255.0</span><br><span class=\"line\">   dns-nameservers 8.8.8.8 8.8.4.4</span><br></pre></td></tr></table></figure>\n\n<p>只需要在后面增加上 IPv6 的信息就好了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Generated by SolusVM</span><br><span class=\"line\"></span><br><span class=\"line\"> auto lo</span><br><span class=\"line\">  iface lo inet loopback</span><br><span class=\"line\"></span><br><span class=\"line\"> auto eth0</span><br><span class=\"line\">  iface eth0 inet static</span><br><span class=\"line\">   address 173.82.243.11</span><br><span class=\"line\">   gateway 173.82.243.1</span><br><span class=\"line\">   netmask 255.255.255.0</span><br><span class=\"line\">   dns-nameservers 8.8.8.8 8.8.4.4</span><br><span class=\"line\"></span><br><span class=\"line\">+ iface eth0 inet6 static</span><br><span class=\"line\">+  address 2607:f130::xx:xx</span><br><span class=\"line\">+  netmask 64</span><br><span class=\"line\">+  gateway 2607:f130::xx:xx</span><br></pre></td></tr></table></figure>\n\n<p>之后，可以查看下网络信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br></pre></td></tr></table></figure>\n\n<p>应该可以看到刚刚配置好的 IPv6 信息。</p>\n<p>之后，通过 <code>ping6</code> 再测试下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping6 ipv6.google.com</span><br></pre></td></tr></table></figure>\n\n<p>可以看到正常回复了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=6 ttl=58 time=0.717 ms</span><br><span class=\"line\">64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=7 ttl=58 time=0.704 ms</span><br><span class=\"line\">64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=8 ttl=58 time=1.52 ms</span><br><span class=\"line\">64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=9 ttl=58 time=0.783 ms</span><br><span class=\"line\">64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=10 ttl=58 time=0.633 ms</span><br><span class=\"line\">64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=11 ttl=58 time=0.638 ms</span><br><span class=\"line\">64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=12 ttl=58 time=0.784 ms</span><br></pre></td></tr></table></figure>\n\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>在 cloudcone 中买了一个 ubuntu VPS，发现支持送不少的 IPv6 地址。正好最近需要用到，就打算直接来使用。</p>\n<p>结果发现 ping6 不通。尴尬…</p>","more":"<p>找了一些资料，说的比较复杂，基本上都是说通过安装代理工具，让不支持 IPv6 的机器通过第三方代理的方式获取 IP。</p>\n<p>但我的这个是本身有，自己却用不了啊。</p>\n<p>查了半天，其实解决很简单，只需要在系统中绑定 IPv6 的地址就好了，就这么简单。</p>\n<p>编辑 <code>/etc/network/interfaces</code> 文件：</p>\n<p>默认应该是下面这样子，只有 IPv4 的地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Generated by SolusVM</span><br><span class=\"line\"></span><br><span class=\"line\"> auto lo</span><br><span class=\"line\">  iface lo inet loopback</span><br><span class=\"line\"></span><br><span class=\"line\"> auto eth0</span><br><span class=\"line\">  iface eth0 inet static</span><br><span class=\"line\">   address 173.82.xx.xx</span><br><span class=\"line\">   gateway 173.82.xx.xx</span><br><span class=\"line\">   netmask 255.255.255.0</span><br><span class=\"line\">   dns-nameservers 8.8.8.8 8.8.4.4</span><br></pre></td></tr></table></figure>\n\n<p>只需要在后面增加上 IPv6 的信息就好了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Generated by SolusVM</span><br><span class=\"line\"></span><br><span class=\"line\"> auto lo</span><br><span class=\"line\">  iface lo inet loopback</span><br><span class=\"line\"></span><br><span class=\"line\"> auto eth0</span><br><span class=\"line\">  iface eth0 inet static</span><br><span class=\"line\">   address 173.82.243.11</span><br><span class=\"line\">   gateway 173.82.243.1</span><br><span class=\"line\">   netmask 255.255.255.0</span><br><span class=\"line\">   dns-nameservers 8.8.8.8 8.8.4.4</span><br><span class=\"line\"></span><br><span class=\"line\">+ iface eth0 inet6 static</span><br><span class=\"line\">+  address 2607:f130::xx:xx</span><br><span class=\"line\">+  netmask 64</span><br><span class=\"line\">+  gateway 2607:f130::xx:xx</span><br></pre></td></tr></table></figure>\n\n<p>之后，可以查看下网络信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br></pre></td></tr></table></figure>\n\n<p>应该可以看到刚刚配置好的 IPv6 信息。</p>\n<p>之后，通过 <code>ping6</code> 再测试下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping6 ipv6.google.com</span><br></pre></td></tr></table></figure>\n\n<p>可以看到正常回复了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=6 ttl=58 time=0.717 ms</span><br><span class=\"line\">64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=7 ttl=58 time=0.704 ms</span><br><span class=\"line\">64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=8 ttl=58 time=1.52 ms</span><br><span class=\"line\">64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=9 ttl=58 time=0.783 ms</span><br><span class=\"line\">64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=10 ttl=58 time=0.633 ms</span><br><span class=\"line\">64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=11 ttl=58 time=0.638 ms</span><br><span class=\"line\">64 bytes from lax31s01-in-x0e.1e100.net: icmp_seq=12 ttl=58 time=0.784 ms</span><br></pre></td></tr></table></figure>\n\n<p>–END–</p>"},{"layout":"post","title":"useragent 详解","date":"2018-10-13T22:02:00.000Z","_content":"\n因为工作需要，稍微认真的了解了下 useragent，发现它的配置理想和现实还是差距很大的。至于历史什么的，详细的就不多说了，很多网站可以搜索到。总之，各个浏览器厂商为了能所谓的页面兼容，useragent 也越来越相似。\n\n也正是因为现行技术实现上，这些所谓的适配，大部分时候都是根据正则表达式来匹配相关字段，匹配成功即认定当前设备符合预期。但鲜有文章去详谈 useragent 每个字段的具体含义。这也正是本文要做的事情。\n\n由于没有找到相关的资料，有的结论论断和理解方式，只是我自己的想法，可能与实际有出入。\n\n<!-- more -->\n\n## useragent 的使用\n\n在做各种 web 时候，经常会根据用户的 useragent 来进行一些判断。比如设备机型、系统、浏览器类型等。\n\n有些是需要进行统计分析。如百度/google 统计之类，获取用户当前所有设备的信息，用于数据的分析和业务支撑。\n\n有些是需要风控需要。这里尤其金融方向的业务用的颇多，通过判断用户设配类型、IP等是否与之前一致，来确认用户账号是否被盗。\n\n还有一些时候是业务逻辑的设计需要。比如 iOS 和 Android 用户要区分对待，不同系统可能要展示的功能有区别等。（为了抵消歧视，你可以想做帮助页面，iOS 和 Android 因为按钮位置等不同，截图也不相同，帮助文档也是不同的）\n\n还有一些功能逻辑，是需要单独处理的。比如适配特殊机型，iPhone X 长屏幕优化等。\n\n以上的这些功能，都需要依赖 useragent 的适配。\n\n## useragent 的入门\n\n说到 useragent，就必须先说它的获取方式：\n\n```\nwindow.navigator.userAgent // 可以省略window，简写 navigator.userAgent\n// Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36\n```\n\n关于 useragent 的介绍，可以参考这里：[https://zh.wikipedia.org/wiki/用户代理](https://zh.wikipedia.org/wiki/用户代理)。我把关键的信息摘出来。\n\nuseragent 的标准格式应该是：\n\n```\nMozilla/[version] ([system and browser information]) [platform] ([platform details]) [extensions] \n```\n\n在我看来，useragent 应该由 5 个字段组成：\n\n- **Mozilla 前缀**：这个已经是兼容后的产物了，没什么意义了。即 `Mozilla/5.0`。\n- **系统和浏览器信息**：即 `(Windows NT 10.0; Win64; x64)`。这个字段需要用括号括起来。\n- **浏览器渲染引擎**：即 `AppleWebKit/537.36`。\n- **浏览器渲染其他补充信息**：我认为各个浏览器为了兼容，这个字段已经没有了实际意义，即 `(KHTML, like Gecko)`。这个字段同样需要用括号括起来。\n- **扩展字段**：这个字段内容最为丰富，主要描述了浏览器信息，以及各个浏览器自己添加的自定义字段等。即 `Chrome/70.0.3538.5 Safari/537.36`。\n\n或许你会好奇，在第二个字段中应该描述的浏览器信息呢？怎么却要在第五个字段中出现？这可能还要涉及一些历史。\n\n## useragent 历史\n\n最早做 useragent 规划的时候，是这样设计的。\n\n```\nAppName/version (extensions)\n```\n\n比如这样子：\n\n```\nMozilla/3.0 (Win95; I)\n```\n\n你如果开发了一个微博浏览器，按规矩应该这么叫：\n\n```\nWeiboBroswer/1.0 (Windows NT 10)\n```\n\n那个年代，IE 发展太慢，别人支持的他不支持。所以部分功能，要对 IE 屏蔽掉。代码大致还是这么写的：\n\n```js\nvar ua = window.navigator.userAgent\nif(ua.indexOf('Mozilla') === 0) {\n    // 开启xxx功能\n}\n```\n\n这就导致后续 IE 升级，即便支持了新功能，用户最终也不能使用上。因为网站没有更新代码。\n\n所以，IE 干脆就是也叫作了：\n\n```\nMozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)\n```\n\n就这样，第 1 字段就没什么意义了，第 2 字段开始描述浏览器信息了。\n\n虽然和现代的格式不同（5 段结构），但是可以将浏览器信息等当做第 5 段内容，故本文还是更多的按照现有的风格来说明 useragent。\n\n## Mozilla 前缀\n\n目前我只见过 `4.0` 和 `5.0` 两种。\n\nIE8 及以下浏览器（我查询到 IE5），是 `Mozilla/4.0`，之后都是 `Mozilla/5.0` 了。具体的版本含义不清楚。\n\n需要特殊说明的是，这个字段还可能是 `Opera/9.80` 这种形式。opera 当初是比较规矩的。\n\n## 系统和浏览器信息\n\n这个字段最为复杂。一方面涉及老的 IE，这里面什么信息都有；一方面不同平台，也没有个规律规矩，甚至是顺序都没有规定。唯一确定的，就是**使用分号进行分隔**。\n\n同时，由于不同系统、浏览器差异，有的字段会出现在第 2 字段中，而有的却出现在第 3、5 字段中。这里主要说重点字段，对于那些可能出现在 3、5 字段的，则按照后面出现为准。\n\n我先列出几个 useragent，为了看着方便，只列出前两个字段：\n\n```\n// windows\n// IE 系列\nMozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\nMozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)\nMozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)\nMozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)\nMozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)\nMozilla/5.0 (compatible, MSIE 11, Windows NT 6.1; Trident/7.0; rv:11.0)\nMozilla/5.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; KB974489; Maxthon 2.0)\nMozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/4.0; WOW64; Trident/5.0; Maxthon 2.0)\n// edge\nMozilla/5.0 (Windows NT 6.1; WOW64)\nMozilla/5.0 (Windows NT 10.0; Win64; x64)\n// firefox\nMozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0)\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0)\n// chrome\nMozilla/5.0 (Windows NT 10.0; Win64; x64)\n    \n// Mac\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_10; rv:33.0)\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3)\n    \n// Linux\nMozilla/5.0 (X11; Ubuntu; Linux i686; rv:18.0)\nMozilla/5.0 (X11; Linux i586; rv:31.0)\n    \n// iOS\nMozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X)\nMozilla/5.0 (iPad; CPU OS 11_0 like Mac OS X)\nMozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us)\n    \n// Android\nMozilla/5.0 (Linux; U; Android 2.3.7; en-us; NexusOneBuild/FRF91)\n    \n// 其他设备\nMozilla/5.0 (BlackBerry; U; BlackBerry 9900; en)\nMozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US)\n```\n\n我们主要关注重点字段，非重点的可以忽略。\n\n**平台及系统字段：**\n\n* `Windows NT x.x`：Windows 系统环境\n\t* `5.0`： Windows 2000\n\t* `5.1`： Windows XP\n\t* `6.0`： Windows Vista / Windows Server 2008\n\t* `6.1`： Windows 7 / Windows Server 2008 R2\n\t* `6.2`： Windows 8 / Windows RT / Windows Server 2012\n\t* `6.3`： Windows 8.1 / Windows Server 2012 R2\n* `Macintosh`：苹果 Mac 系统环境\n* `Intel Mac OS X x_x_x`：苹果 Mac 系统及版本号\n* `x11`：X窗口系统，指代 Linux 系统，并不是所有 Linux 浏览器都有此字段\n* `Linux xxxx`：Linux 系统环境，也可能不带有CPU信息\n\t* `i586`：很老的处理器（貌似指不含 MMX 指令集的 CPU）\n\t* `i686`：一般 CPU\n\t* `x86_64`：64 位 CPU\n\t* `mips`：MIPS 处理器\n\t* `ppc`：PowerPC\n\t* `amd64`：因该是指 AMD64 专属 CPU，并非常见的 `x86_64`\n\t* `armv7l`：ARM v7 处理器\n* `Linux x.x.x.xxxx`：Linux 系统环境，后面跟着内核版本号，例如 `Linux 2.6.31-16-generic`，这种写法不常见。\n* `iPhone` `iPad` `iPod`：苹果相应的设备\n* `Android`：一般会跟在 `Linux` 字段后面。安卓设备，后面还可能跟有设备信息。\n* `U` `I` `N`：加密等级，`U`-强安全加密，`I`-弱安全加密，`N`-无安全加密\n\t\n**Windows 专属字段：**\n\t\n* `compatible`：仅在 IE 浏览器中出现，表示兼容 `Mozilla/4.0` `Mozilla/5.0`，常见于 IE 浏览器，其他早些的浏览器比如 `Konqueror` 也有使用到。\n* `Trident/x.x`：仅在 IE 浏览器中出现，表示 Trident 渲染引擎版本。对于第三方浏览器，比如 Mathon，可能会出现两个值\n* `MSIE x.x`：IE浏览器版本，不一定带有小数点，而且老的版本可能是 `MSIE 6.0b` `MSIE 5.50` 这种形式\n* `WOW64`：仅在 Windows中出现，是 `Windows(32) on Windows 64`，表示当前浏览器是 32 位，运行在 64 位系统上，但是一般却不合 `x64` 连用，但系统确实是 64 位\n* `Win64`：表示当前浏览器是64位的，一般和 `x64` 连用\n* `x64`：表示系统是64位的\n\n**其他字段：**\n\n* `rv:x.x`：当前浏览器版本，一般 IE11 和 Firefox 才会有此字段，Chrome 从未见过用此字段。如果是第三方浏览器，这里也指代当前利用的 IE版本\n\n**额外说明：**\n\nIE 的浏览器，还可能带上补丁号（类似 `KB974489`），系统 .NET 插件等信息等。\n\n有的浏览器还会带上浏览器语言，比如 `en-US`。\n\nLinux / BSD 系统，可能会带上发行版信息，比如 `(X11; Ubuntu; Linux x86_64; rv:61.0)` 但这个不是必须的。发行版信息，也可能在第 5 字段中出现。\n\n## 浏览器渲染引擎及其他补充信息\n\n这个字段现代浏览器比较好说明，要么没有，要么就是缺少补充信息（括号内的内容）\n\n```\nAppleWebKit/604.1.34 (KHTML, like Gecko)\nGecko/20100101\nPresto/2.9.201\nlike Gecko\n```\n\n现在一般都是 `AppleWebKit` `Gecko`，指代的是渲染引擎版本号。\n\n很久以前 Opera 浏览器是 `Presto`。\n\nIE 11 开始写上了 `like Gecko`，我认为没什么用。此外，IE浏览器渲染引擎及版本在上一节中有提到。\n\n\n## 扩展字段\n\n这个字段内容最多，不过还好主要的字段不复杂。字段采用**空格进行分隔**。\n\n先看例子，下面只展示 useragent 的扩展字段内容：\n\n```\n// Desktop\nChrome/69.0.3497.81 Safari/537.36\nFirefox/61.0\nVersion/7.0.3 Safari/7046A194A\n\n// Mobile\nVersion/10.0 Mobile/14E304 Safari/602.1\nVersion/11.0 Mobile/15A5341f Safari/604.1\nVersion/4.0 Chrome/69.0.3497.81 Mobile Safari/537.363\n\n// Other\nMobile/16A366 MicroMessenger/6.7.2 NetType/WIFI Language/zh_CN // 微信\nMobile/16A366 ChannelId(36) NebulaSDK/1.8.100112 Nebula PSDType(1) AlipayDefined(nt:WIFI,ws:414|672|3.0,ac:T) AliApp(AP/10.1.32.600) AlipayClient/10.1.32.600 Alipay Language/zh-Hans // 支付宝\n```\n\n首先，由于历史原因，Chrome 浏览器也会带有 Safari 字段。\n\n**主流字段：**\n\n* `Safari`：Safari 版本号\n* `Chrome`：Chrome 版本号\n* `Version`：系统版本号，一般移动设备和 Mac 设备拥有\n* `Mobile`：移动设备版本号，一般指内部版本号，苹果设备拥有版本号，安卓设备不含版本号\n\n**其他浏览器字段：**\n\n主要就是各种第三方浏览器，包括 APP 内嵌入的 WebView 等。为了方便自我识别，都是在这里加上各个 APP 独有的信息。\n\n一般来讲，都是采用标准的 `key/value` 形式，但不是所有字段都符合这个规律。\n\n基本上要判断什么浏览器（或者WebView），需要看下它的 useragent，单独处理了。\n\n--END--\n","source":"_posts/2018/2018-10-13-useragent.md","raw":"---\nlayout: post\ntitle: useragent 详解\ndate: 2018-10-13 22:02:00 GMT+0800\ncategories: [编程]\ntags:  [useragent]\n---\n\n因为工作需要，稍微认真的了解了下 useragent，发现它的配置理想和现实还是差距很大的。至于历史什么的，详细的就不多说了，很多网站可以搜索到。总之，各个浏览器厂商为了能所谓的页面兼容，useragent 也越来越相似。\n\n也正是因为现行技术实现上，这些所谓的适配，大部分时候都是根据正则表达式来匹配相关字段，匹配成功即认定当前设备符合预期。但鲜有文章去详谈 useragent 每个字段的具体含义。这也正是本文要做的事情。\n\n由于没有找到相关的资料，有的结论论断和理解方式，只是我自己的想法，可能与实际有出入。\n\n<!-- more -->\n\n## useragent 的使用\n\n在做各种 web 时候，经常会根据用户的 useragent 来进行一些判断。比如设备机型、系统、浏览器类型等。\n\n有些是需要进行统计分析。如百度/google 统计之类，获取用户当前所有设备的信息，用于数据的分析和业务支撑。\n\n有些是需要风控需要。这里尤其金融方向的业务用的颇多，通过判断用户设配类型、IP等是否与之前一致，来确认用户账号是否被盗。\n\n还有一些时候是业务逻辑的设计需要。比如 iOS 和 Android 用户要区分对待，不同系统可能要展示的功能有区别等。（为了抵消歧视，你可以想做帮助页面，iOS 和 Android 因为按钮位置等不同，截图也不相同，帮助文档也是不同的）\n\n还有一些功能逻辑，是需要单独处理的。比如适配特殊机型，iPhone X 长屏幕优化等。\n\n以上的这些功能，都需要依赖 useragent 的适配。\n\n## useragent 的入门\n\n说到 useragent，就必须先说它的获取方式：\n\n```\nwindow.navigator.userAgent // 可以省略window，简写 navigator.userAgent\n// Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36\n```\n\n关于 useragent 的介绍，可以参考这里：[https://zh.wikipedia.org/wiki/用户代理](https://zh.wikipedia.org/wiki/用户代理)。我把关键的信息摘出来。\n\nuseragent 的标准格式应该是：\n\n```\nMozilla/[version] ([system and browser information]) [platform] ([platform details]) [extensions] \n```\n\n在我看来，useragent 应该由 5 个字段组成：\n\n- **Mozilla 前缀**：这个已经是兼容后的产物了，没什么意义了。即 `Mozilla/5.0`。\n- **系统和浏览器信息**：即 `(Windows NT 10.0; Win64; x64)`。这个字段需要用括号括起来。\n- **浏览器渲染引擎**：即 `AppleWebKit/537.36`。\n- **浏览器渲染其他补充信息**：我认为各个浏览器为了兼容，这个字段已经没有了实际意义，即 `(KHTML, like Gecko)`。这个字段同样需要用括号括起来。\n- **扩展字段**：这个字段内容最为丰富，主要描述了浏览器信息，以及各个浏览器自己添加的自定义字段等。即 `Chrome/70.0.3538.5 Safari/537.36`。\n\n或许你会好奇，在第二个字段中应该描述的浏览器信息呢？怎么却要在第五个字段中出现？这可能还要涉及一些历史。\n\n## useragent 历史\n\n最早做 useragent 规划的时候，是这样设计的。\n\n```\nAppName/version (extensions)\n```\n\n比如这样子：\n\n```\nMozilla/3.0 (Win95; I)\n```\n\n你如果开发了一个微博浏览器，按规矩应该这么叫：\n\n```\nWeiboBroswer/1.0 (Windows NT 10)\n```\n\n那个年代，IE 发展太慢，别人支持的他不支持。所以部分功能，要对 IE 屏蔽掉。代码大致还是这么写的：\n\n```js\nvar ua = window.navigator.userAgent\nif(ua.indexOf('Mozilla') === 0) {\n    // 开启xxx功能\n}\n```\n\n这就导致后续 IE 升级，即便支持了新功能，用户最终也不能使用上。因为网站没有更新代码。\n\n所以，IE 干脆就是也叫作了：\n\n```\nMozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)\n```\n\n就这样，第 1 字段就没什么意义了，第 2 字段开始描述浏览器信息了。\n\n虽然和现代的格式不同（5 段结构），但是可以将浏览器信息等当做第 5 段内容，故本文还是更多的按照现有的风格来说明 useragent。\n\n## Mozilla 前缀\n\n目前我只见过 `4.0` 和 `5.0` 两种。\n\nIE8 及以下浏览器（我查询到 IE5），是 `Mozilla/4.0`，之后都是 `Mozilla/5.0` 了。具体的版本含义不清楚。\n\n需要特殊说明的是，这个字段还可能是 `Opera/9.80` 这种形式。opera 当初是比较规矩的。\n\n## 系统和浏览器信息\n\n这个字段最为复杂。一方面涉及老的 IE，这里面什么信息都有；一方面不同平台，也没有个规律规矩，甚至是顺序都没有规定。唯一确定的，就是**使用分号进行分隔**。\n\n同时，由于不同系统、浏览器差异，有的字段会出现在第 2 字段中，而有的却出现在第 3、5 字段中。这里主要说重点字段，对于那些可能出现在 3、5 字段的，则按照后面出现为准。\n\n我先列出几个 useragent，为了看着方便，只列出前两个字段：\n\n```\n// windows\n// IE 系列\nMozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\nMozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)\nMozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)\nMozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)\nMozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)\nMozilla/5.0 (compatible, MSIE 11, Windows NT 6.1; Trident/7.0; rv:11.0)\nMozilla/5.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; KB974489; Maxthon 2.0)\nMozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/4.0; WOW64; Trident/5.0; Maxthon 2.0)\n// edge\nMozilla/5.0 (Windows NT 6.1; WOW64)\nMozilla/5.0 (Windows NT 10.0; Win64; x64)\n// firefox\nMozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0)\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0)\n// chrome\nMozilla/5.0 (Windows NT 10.0; Win64; x64)\n    \n// Mac\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_10; rv:33.0)\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3)\n    \n// Linux\nMozilla/5.0 (X11; Ubuntu; Linux i686; rv:18.0)\nMozilla/5.0 (X11; Linux i586; rv:31.0)\n    \n// iOS\nMozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X)\nMozilla/5.0 (iPad; CPU OS 11_0 like Mac OS X)\nMozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us)\n    \n// Android\nMozilla/5.0 (Linux; U; Android 2.3.7; en-us; NexusOneBuild/FRF91)\n    \n// 其他设备\nMozilla/5.0 (BlackBerry; U; BlackBerry 9900; en)\nMozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US)\n```\n\n我们主要关注重点字段，非重点的可以忽略。\n\n**平台及系统字段：**\n\n* `Windows NT x.x`：Windows 系统环境\n\t* `5.0`： Windows 2000\n\t* `5.1`： Windows XP\n\t* `6.0`： Windows Vista / Windows Server 2008\n\t* `6.1`： Windows 7 / Windows Server 2008 R2\n\t* `6.2`： Windows 8 / Windows RT / Windows Server 2012\n\t* `6.3`： Windows 8.1 / Windows Server 2012 R2\n* `Macintosh`：苹果 Mac 系统环境\n* `Intel Mac OS X x_x_x`：苹果 Mac 系统及版本号\n* `x11`：X窗口系统，指代 Linux 系统，并不是所有 Linux 浏览器都有此字段\n* `Linux xxxx`：Linux 系统环境，也可能不带有CPU信息\n\t* `i586`：很老的处理器（貌似指不含 MMX 指令集的 CPU）\n\t* `i686`：一般 CPU\n\t* `x86_64`：64 位 CPU\n\t* `mips`：MIPS 处理器\n\t* `ppc`：PowerPC\n\t* `amd64`：因该是指 AMD64 专属 CPU，并非常见的 `x86_64`\n\t* `armv7l`：ARM v7 处理器\n* `Linux x.x.x.xxxx`：Linux 系统环境，后面跟着内核版本号，例如 `Linux 2.6.31-16-generic`，这种写法不常见。\n* `iPhone` `iPad` `iPod`：苹果相应的设备\n* `Android`：一般会跟在 `Linux` 字段后面。安卓设备，后面还可能跟有设备信息。\n* `U` `I` `N`：加密等级，`U`-强安全加密，`I`-弱安全加密，`N`-无安全加密\n\t\n**Windows 专属字段：**\n\t\n* `compatible`：仅在 IE 浏览器中出现，表示兼容 `Mozilla/4.0` `Mozilla/5.0`，常见于 IE 浏览器，其他早些的浏览器比如 `Konqueror` 也有使用到。\n* `Trident/x.x`：仅在 IE 浏览器中出现，表示 Trident 渲染引擎版本。对于第三方浏览器，比如 Mathon，可能会出现两个值\n* `MSIE x.x`：IE浏览器版本，不一定带有小数点，而且老的版本可能是 `MSIE 6.0b` `MSIE 5.50` 这种形式\n* `WOW64`：仅在 Windows中出现，是 `Windows(32) on Windows 64`，表示当前浏览器是 32 位，运行在 64 位系统上，但是一般却不合 `x64` 连用，但系统确实是 64 位\n* `Win64`：表示当前浏览器是64位的，一般和 `x64` 连用\n* `x64`：表示系统是64位的\n\n**其他字段：**\n\n* `rv:x.x`：当前浏览器版本，一般 IE11 和 Firefox 才会有此字段，Chrome 从未见过用此字段。如果是第三方浏览器，这里也指代当前利用的 IE版本\n\n**额外说明：**\n\nIE 的浏览器，还可能带上补丁号（类似 `KB974489`），系统 .NET 插件等信息等。\n\n有的浏览器还会带上浏览器语言，比如 `en-US`。\n\nLinux / BSD 系统，可能会带上发行版信息，比如 `(X11; Ubuntu; Linux x86_64; rv:61.0)` 但这个不是必须的。发行版信息，也可能在第 5 字段中出现。\n\n## 浏览器渲染引擎及其他补充信息\n\n这个字段现代浏览器比较好说明，要么没有，要么就是缺少补充信息（括号内的内容）\n\n```\nAppleWebKit/604.1.34 (KHTML, like Gecko)\nGecko/20100101\nPresto/2.9.201\nlike Gecko\n```\n\n现在一般都是 `AppleWebKit` `Gecko`，指代的是渲染引擎版本号。\n\n很久以前 Opera 浏览器是 `Presto`。\n\nIE 11 开始写上了 `like Gecko`，我认为没什么用。此外，IE浏览器渲染引擎及版本在上一节中有提到。\n\n\n## 扩展字段\n\n这个字段内容最多，不过还好主要的字段不复杂。字段采用**空格进行分隔**。\n\n先看例子，下面只展示 useragent 的扩展字段内容：\n\n```\n// Desktop\nChrome/69.0.3497.81 Safari/537.36\nFirefox/61.0\nVersion/7.0.3 Safari/7046A194A\n\n// Mobile\nVersion/10.0 Mobile/14E304 Safari/602.1\nVersion/11.0 Mobile/15A5341f Safari/604.1\nVersion/4.0 Chrome/69.0.3497.81 Mobile Safari/537.363\n\n// Other\nMobile/16A366 MicroMessenger/6.7.2 NetType/WIFI Language/zh_CN // 微信\nMobile/16A366 ChannelId(36) NebulaSDK/1.8.100112 Nebula PSDType(1) AlipayDefined(nt:WIFI,ws:414|672|3.0,ac:T) AliApp(AP/10.1.32.600) AlipayClient/10.1.32.600 Alipay Language/zh-Hans // 支付宝\n```\n\n首先，由于历史原因，Chrome 浏览器也会带有 Safari 字段。\n\n**主流字段：**\n\n* `Safari`：Safari 版本号\n* `Chrome`：Chrome 版本号\n* `Version`：系统版本号，一般移动设备和 Mac 设备拥有\n* `Mobile`：移动设备版本号，一般指内部版本号，苹果设备拥有版本号，安卓设备不含版本号\n\n**其他浏览器字段：**\n\n主要就是各种第三方浏览器，包括 APP 内嵌入的 WebView 等。为了方便自我识别，都是在这里加上各个 APP 独有的信息。\n\n一般来讲，都是采用标准的 `key/value` 形式，但不是所有字段都符合这个规律。\n\n基本上要判断什么浏览器（或者WebView），需要看下它的 useragent，单独处理了。\n\n--END--\n","slug":"2018-2018-10-13-useragent","published":1,"updated":"2020-03-06T01:27:26.791Z","comments":1,"photos":[],"link":"","_id":"cka5ik8cl005fnybgsw1h6u98","content":"<p>因为工作需要，稍微认真的了解了下 useragent，发现它的配置理想和现实还是差距很大的。至于历史什么的，详细的就不多说了，很多网站可以搜索到。总之，各个浏览器厂商为了能所谓的页面兼容，useragent 也越来越相似。</p>\n<p>也正是因为现行技术实现上，这些所谓的适配，大部分时候都是根据正则表达式来匹配相关字段，匹配成功即认定当前设备符合预期。但鲜有文章去详谈 useragent 每个字段的具体含义。这也正是本文要做的事情。</p>\n<p>由于没有找到相关的资料，有的结论论断和理解方式，只是我自己的想法，可能与实际有出入。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"useragent-的使用\"><a href=\"#useragent-的使用\" class=\"headerlink\" title=\"useragent 的使用\"></a>useragent 的使用</h2><p>在做各种 web 时候，经常会根据用户的 useragent 来进行一些判断。比如设备机型、系统、浏览器类型等。</p>\n<p>有些是需要进行统计分析。如百度/google 统计之类，获取用户当前所有设备的信息，用于数据的分析和业务支撑。</p>\n<p>有些是需要风控需要。这里尤其金融方向的业务用的颇多，通过判断用户设配类型、IP等是否与之前一致，来确认用户账号是否被盗。</p>\n<p>还有一些时候是业务逻辑的设计需要。比如 iOS 和 Android 用户要区分对待，不同系统可能要展示的功能有区别等。（为了抵消歧视，你可以想做帮助页面，iOS 和 Android 因为按钮位置等不同，截图也不相同，帮助文档也是不同的）</p>\n<p>还有一些功能逻辑，是需要单独处理的。比如适配特殊机型，iPhone X 长屏幕优化等。</p>\n<p>以上的这些功能，都需要依赖 useragent 的适配。</p>\n<h2 id=\"useragent-的入门\"><a href=\"#useragent-的入门\" class=\"headerlink\" title=\"useragent 的入门\"></a>useragent 的入门</h2><p>说到 useragent，就必须先说它的获取方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.navigator.userAgent // 可以省略window，简写 navigator.userAgent</span><br><span class=\"line\">// Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</span><br></pre></td></tr></table></figure>\n\n<p>关于 useragent 的介绍，可以参考这里：<a href=\"https://zh.wikipedia.org/wiki/用户代理\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki/用户代理</a>。我把关键的信息摘出来。</p>\n<p>useragent 的标准格式应该是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mozilla/[version] ([system and browser information]) [platform] ([platform details]) [extensions]</span><br></pre></td></tr></table></figure>\n\n<p>在我看来，useragent 应该由 5 个字段组成：</p>\n<ul>\n<li><strong>Mozilla 前缀</strong>：这个已经是兼容后的产物了，没什么意义了。即 <code>Mozilla/5.0</code>。</li>\n<li><strong>系统和浏览器信息</strong>：即 <code>(Windows NT 10.0; Win64; x64)</code>。这个字段需要用括号括起来。</li>\n<li><strong>浏览器渲染引擎</strong>：即 <code>AppleWebKit/537.36</code>。</li>\n<li><strong>浏览器渲染其他补充信息</strong>：我认为各个浏览器为了兼容，这个字段已经没有了实际意义，即 <code>(KHTML, like Gecko)</code>。这个字段同样需要用括号括起来。</li>\n<li><strong>扩展字段</strong>：这个字段内容最为丰富，主要描述了浏览器信息，以及各个浏览器自己添加的自定义字段等。即 <code>Chrome/70.0.3538.5 Safari/537.36</code>。</li>\n</ul>\n<p>或许你会好奇，在第二个字段中应该描述的浏览器信息呢？怎么却要在第五个字段中出现？这可能还要涉及一些历史。</p>\n<h2 id=\"useragent-历史\"><a href=\"#useragent-历史\" class=\"headerlink\" title=\"useragent 历史\"></a>useragent 历史</h2><p>最早做 useragent 规划的时候，是这样设计的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AppName/version (extensions)</span><br></pre></td></tr></table></figure>\n\n<p>比如这样子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mozilla/3.0 (Win95; I)</span><br></pre></td></tr></table></figure>\n\n<p>你如果开发了一个微博浏览器，按规矩应该这么叫：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WeiboBroswer/1.0 (Windows NT 10)</span><br></pre></td></tr></table></figure>\n\n<p>那个年代，IE 发展太慢，别人支持的他不支持。所以部分功能，要对 IE 屏蔽掉。代码大致还是这么写的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ua = <span class=\"built_in\">window</span>.navigator.userAgent</span><br><span class=\"line\"><span class=\"keyword\">if</span>(ua.indexOf(<span class=\"string\">'Mozilla'</span>) === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 开启xxx功能</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这就导致后续 IE 升级，即便支持了新功能，用户最终也不能使用上。因为网站没有更新代码。</p>\n<p>所以，IE 干脆就是也叫作了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)</span><br></pre></td></tr></table></figure>\n\n<p>就这样，第 1 字段就没什么意义了，第 2 字段开始描述浏览器信息了。</p>\n<p>虽然和现代的格式不同（5 段结构），但是可以将浏览器信息等当做第 5 段内容，故本文还是更多的按照现有的风格来说明 useragent。</p>\n<h2 id=\"Mozilla-前缀\"><a href=\"#Mozilla-前缀\" class=\"headerlink\" title=\"Mozilla 前缀\"></a>Mozilla 前缀</h2><p>目前我只见过 <code>4.0</code> 和 <code>5.0</code> 两种。</p>\n<p>IE8 及以下浏览器（我查询到 IE5），是 <code>Mozilla/4.0</code>，之后都是 <code>Mozilla/5.0</code> 了。具体的版本含义不清楚。</p>\n<p>需要特殊说明的是，这个字段还可能是 <code>Opera/9.80</code> 这种形式。opera 当初是比较规矩的。</p>\n<h2 id=\"系统和浏览器信息\"><a href=\"#系统和浏览器信息\" class=\"headerlink\" title=\"系统和浏览器信息\"></a>系统和浏览器信息</h2><p>这个字段最为复杂。一方面涉及老的 IE，这里面什么信息都有；一方面不同平台，也没有个规律规矩，甚至是顺序都没有规定。唯一确定的，就是<strong>使用分号进行分隔</strong>。</p>\n<p>同时，由于不同系统、浏览器差异，有的字段会出现在第 2 字段中，而有的却出现在第 3、5 字段中。这里主要说重点字段，对于那些可能出现在 3、5 字段的，则按照后面出现为准。</p>\n<p>我先列出几个 useragent，为了看着方便，只列出前两个字段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// windows</span><br><span class=\"line\">// IE 系列</span><br><span class=\"line\">Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)</span><br><span class=\"line\">Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)</span><br><span class=\"line\">Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)</span><br><span class=\"line\">Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)</span><br><span class=\"line\">Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)</span><br><span class=\"line\">Mozilla/5.0 (compatible, MSIE 11, Windows NT 6.1; Trident/7.0; rv:11.0)</span><br><span class=\"line\">Mozilla/5.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; KB974489; Maxthon 2.0)</span><br><span class=\"line\">Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/4.0; WOW64; Trident/5.0; Maxthon 2.0)</span><br><span class=\"line\">// edge</span><br><span class=\"line\">Mozilla/5.0 (Windows NT 6.1; WOW64)</span><br><span class=\"line\">Mozilla/5.0 (Windows NT 10.0; Win64; x64)</span><br><span class=\"line\">// firefox</span><br><span class=\"line\">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0)</span><br><span class=\"line\">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0)</span><br><span class=\"line\">// chrome</span><br><span class=\"line\">Mozilla/5.0 (Windows NT 10.0; Win64; x64)</span><br><span class=\"line\">    </span><br><span class=\"line\">// Mac</span><br><span class=\"line\">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10; rv:33.0)</span><br><span class=\"line\">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3)</span><br><span class=\"line\">    </span><br><span class=\"line\">// Linux</span><br><span class=\"line\">Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:18.0)</span><br><span class=\"line\">Mozilla/5.0 (X11; Linux i586; rv:31.0)</span><br><span class=\"line\">    </span><br><span class=\"line\">// iOS</span><br><span class=\"line\">Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X)</span><br><span class=\"line\">Mozilla/5.0 (iPad; CPU OS 11_0 like Mac OS X)</span><br><span class=\"line\">Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us)</span><br><span class=\"line\">    </span><br><span class=\"line\">// Android</span><br><span class=\"line\">Mozilla/5.0 (Linux; U; Android 2.3.7; en-us; NexusOneBuild/FRF91)</span><br><span class=\"line\">    </span><br><span class=\"line\">// 其他设备</span><br><span class=\"line\">Mozilla/5.0 (BlackBerry; U; BlackBerry 9900; en)</span><br><span class=\"line\">Mozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US)</span><br></pre></td></tr></table></figure>\n\n<p>我们主要关注重点字段，非重点的可以忽略。</p>\n<p><strong>平台及系统字段：</strong></p>\n<ul>\n<li><code>Windows NT x.x</code>：Windows 系统环境<ul>\n<li><code>5.0</code>： Windows 2000</li>\n<li><code>5.1</code>： Windows XP</li>\n<li><code>6.0</code>： Windows Vista / Windows Server 2008</li>\n<li><code>6.1</code>： Windows 7 / Windows Server 2008 R2</li>\n<li><code>6.2</code>： Windows 8 / Windows RT / Windows Server 2012</li>\n<li><code>6.3</code>： Windows 8.1 / Windows Server 2012 R2</li>\n</ul>\n</li>\n<li><code>Macintosh</code>：苹果 Mac 系统环境</li>\n<li><code>Intel Mac OS X x_x_x</code>：苹果 Mac 系统及版本号</li>\n<li><code>x11</code>：X窗口系统，指代 Linux 系统，并不是所有 Linux 浏览器都有此字段</li>\n<li><code>Linux xxxx</code>：Linux 系统环境，也可能不带有CPU信息<ul>\n<li><code>i586</code>：很老的处理器（貌似指不含 MMX 指令集的 CPU）</li>\n<li><code>i686</code>：一般 CPU</li>\n<li><code>x86_64</code>：64 位 CPU</li>\n<li><code>mips</code>：MIPS 处理器</li>\n<li><code>ppc</code>：PowerPC</li>\n<li><code>amd64</code>：因该是指 AMD64 专属 CPU，并非常见的 <code>x86_64</code></li>\n<li><code>armv7l</code>：ARM v7 处理器</li>\n</ul>\n</li>\n<li><code>Linux x.x.x.xxxx</code>：Linux 系统环境，后面跟着内核版本号，例如 <code>Linux 2.6.31-16-generic</code>，这种写法不常见。</li>\n<li><code>iPhone</code> <code>iPad</code> <code>iPod</code>：苹果相应的设备</li>\n<li><code>Android</code>：一般会跟在 <code>Linux</code> 字段后面。安卓设备，后面还可能跟有设备信息。</li>\n<li><code>U</code> <code>I</code> <code>N</code>：加密等级，<code>U</code>-强安全加密，<code>I</code>-弱安全加密，<code>N</code>-无安全加密</li>\n</ul>\n<p><strong>Windows 专属字段：</strong></p>\n<ul>\n<li><code>compatible</code>：仅在 IE 浏览器中出现，表示兼容 <code>Mozilla/4.0</code> <code>Mozilla/5.0</code>，常见于 IE 浏览器，其他早些的浏览器比如 <code>Konqueror</code> 也有使用到。</li>\n<li><code>Trident/x.x</code>：仅在 IE 浏览器中出现，表示 Trident 渲染引擎版本。对于第三方浏览器，比如 Mathon，可能会出现两个值</li>\n<li><code>MSIE x.x</code>：IE浏览器版本，不一定带有小数点，而且老的版本可能是 <code>MSIE 6.0b</code> <code>MSIE 5.50</code> 这种形式</li>\n<li><code>WOW64</code>：仅在 Windows中出现，是 <code>Windows(32) on Windows 64</code>，表示当前浏览器是 32 位，运行在 64 位系统上，但是一般却不合 <code>x64</code> 连用，但系统确实是 64 位</li>\n<li><code>Win64</code>：表示当前浏览器是64位的，一般和 <code>x64</code> 连用</li>\n<li><code>x64</code>：表示系统是64位的</li>\n</ul>\n<p><strong>其他字段：</strong></p>\n<ul>\n<li><code>rv:x.x</code>：当前浏览器版本，一般 IE11 和 Firefox 才会有此字段，Chrome 从未见过用此字段。如果是第三方浏览器，这里也指代当前利用的 IE版本</li>\n</ul>\n<p><strong>额外说明：</strong></p>\n<p>IE 的浏览器，还可能带上补丁号（类似 <code>KB974489</code>），系统 .NET 插件等信息等。</p>\n<p>有的浏览器还会带上浏览器语言，比如 <code>en-US</code>。</p>\n<p>Linux / BSD 系统，可能会带上发行版信息，比如 <code>(X11; Ubuntu; Linux x86_64; rv:61.0)</code> 但这个不是必须的。发行版信息，也可能在第 5 字段中出现。</p>\n<h2 id=\"浏览器渲染引擎及其他补充信息\"><a href=\"#浏览器渲染引擎及其他补充信息\" class=\"headerlink\" title=\"浏览器渲染引擎及其他补充信息\"></a>浏览器渲染引擎及其他补充信息</h2><p>这个字段现代浏览器比较好说明，要么没有，要么就是缺少补充信息（括号内的内容）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AppleWebKit/604.1.34 (KHTML, like Gecko)</span><br><span class=\"line\">Gecko/20100101</span><br><span class=\"line\">Presto/2.9.201</span><br><span class=\"line\">like Gecko</span><br></pre></td></tr></table></figure>\n\n<p>现在一般都是 <code>AppleWebKit</code> <code>Gecko</code>，指代的是渲染引擎版本号。</p>\n<p>很久以前 Opera 浏览器是 <code>Presto</code>。</p>\n<p>IE 11 开始写上了 <code>like Gecko</code>，我认为没什么用。此外，IE浏览器渲染引擎及版本在上一节中有提到。</p>\n<h2 id=\"扩展字段\"><a href=\"#扩展字段\" class=\"headerlink\" title=\"扩展字段\"></a>扩展字段</h2><p>这个字段内容最多，不过还好主要的字段不复杂。字段采用<strong>空格进行分隔</strong>。</p>\n<p>先看例子，下面只展示 useragent 的扩展字段内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Desktop</span><br><span class=\"line\">Chrome/69.0.3497.81 Safari/537.36</span><br><span class=\"line\">Firefox/61.0</span><br><span class=\"line\">Version/7.0.3 Safari/7046A194A</span><br><span class=\"line\"></span><br><span class=\"line\">// Mobile</span><br><span class=\"line\">Version/10.0 Mobile/14E304 Safari/602.1</span><br><span class=\"line\">Version/11.0 Mobile/15A5341f Safari/604.1</span><br><span class=\"line\">Version/4.0 Chrome/69.0.3497.81 Mobile Safari/537.363</span><br><span class=\"line\"></span><br><span class=\"line\">// Other</span><br><span class=\"line\">Mobile/16A366 MicroMessenger/6.7.2 NetType/WIFI Language/zh_CN // 微信</span><br><span class=\"line\">Mobile/16A366 ChannelId(36) NebulaSDK/1.8.100112 Nebula PSDType(1) AlipayDefined(nt:WIFI,ws:414|672|3.0,ac:T) AliApp(AP/10.1.32.600) AlipayClient/10.1.32.600 Alipay Language/zh-Hans // 支付宝</span><br></pre></td></tr></table></figure>\n\n<p>首先，由于历史原因，Chrome 浏览器也会带有 Safari 字段。</p>\n<p><strong>主流字段：</strong></p>\n<ul>\n<li><code>Safari</code>：Safari 版本号</li>\n<li><code>Chrome</code>：Chrome 版本号</li>\n<li><code>Version</code>：系统版本号，一般移动设备和 Mac 设备拥有</li>\n<li><code>Mobile</code>：移动设备版本号，一般指内部版本号，苹果设备拥有版本号，安卓设备不含版本号</li>\n</ul>\n<p><strong>其他浏览器字段：</strong></p>\n<p>主要就是各种第三方浏览器，包括 APP 内嵌入的 WebView 等。为了方便自我识别，都是在这里加上各个 APP 独有的信息。</p>\n<p>一般来讲，都是采用标准的 <code>key/value</code> 形式，但不是所有字段都符合这个规律。</p>\n<p>基本上要判断什么浏览器（或者WebView），需要看下它的 useragent，单独处理了。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>因为工作需要，稍微认真的了解了下 useragent，发现它的配置理想和现实还是差距很大的。至于历史什么的，详细的就不多说了，很多网站可以搜索到。总之，各个浏览器厂商为了能所谓的页面兼容，useragent 也越来越相似。</p>\n<p>也正是因为现行技术实现上，这些所谓的适配，大部分时候都是根据正则表达式来匹配相关字段，匹配成功即认定当前设备符合预期。但鲜有文章去详谈 useragent 每个字段的具体含义。这也正是本文要做的事情。</p>\n<p>由于没有找到相关的资料，有的结论论断和理解方式，只是我自己的想法，可能与实际有出入。</p>","more":"<h2 id=\"useragent-的使用\"><a href=\"#useragent-的使用\" class=\"headerlink\" title=\"useragent 的使用\"></a>useragent 的使用</h2><p>在做各种 web 时候，经常会根据用户的 useragent 来进行一些判断。比如设备机型、系统、浏览器类型等。</p>\n<p>有些是需要进行统计分析。如百度/google 统计之类，获取用户当前所有设备的信息，用于数据的分析和业务支撑。</p>\n<p>有些是需要风控需要。这里尤其金融方向的业务用的颇多，通过判断用户设配类型、IP等是否与之前一致，来确认用户账号是否被盗。</p>\n<p>还有一些时候是业务逻辑的设计需要。比如 iOS 和 Android 用户要区分对待，不同系统可能要展示的功能有区别等。（为了抵消歧视，你可以想做帮助页面，iOS 和 Android 因为按钮位置等不同，截图也不相同，帮助文档也是不同的）</p>\n<p>还有一些功能逻辑，是需要单独处理的。比如适配特殊机型，iPhone X 长屏幕优化等。</p>\n<p>以上的这些功能，都需要依赖 useragent 的适配。</p>\n<h2 id=\"useragent-的入门\"><a href=\"#useragent-的入门\" class=\"headerlink\" title=\"useragent 的入门\"></a>useragent 的入门</h2><p>说到 useragent，就必须先说它的获取方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.navigator.userAgent // 可以省略window，简写 navigator.userAgent</span><br><span class=\"line\">// Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36</span><br></pre></td></tr></table></figure>\n\n<p>关于 useragent 的介绍，可以参考这里：<a href=\"https://zh.wikipedia.org/wiki/用户代理\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki/用户代理</a>。我把关键的信息摘出来。</p>\n<p>useragent 的标准格式应该是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mozilla/[version] ([system and browser information]) [platform] ([platform details]) [extensions]</span><br></pre></td></tr></table></figure>\n\n<p>在我看来，useragent 应该由 5 个字段组成：</p>\n<ul>\n<li><strong>Mozilla 前缀</strong>：这个已经是兼容后的产物了，没什么意义了。即 <code>Mozilla/5.0</code>。</li>\n<li><strong>系统和浏览器信息</strong>：即 <code>(Windows NT 10.0; Win64; x64)</code>。这个字段需要用括号括起来。</li>\n<li><strong>浏览器渲染引擎</strong>：即 <code>AppleWebKit/537.36</code>。</li>\n<li><strong>浏览器渲染其他补充信息</strong>：我认为各个浏览器为了兼容，这个字段已经没有了实际意义，即 <code>(KHTML, like Gecko)</code>。这个字段同样需要用括号括起来。</li>\n<li><strong>扩展字段</strong>：这个字段内容最为丰富，主要描述了浏览器信息，以及各个浏览器自己添加的自定义字段等。即 <code>Chrome/70.0.3538.5 Safari/537.36</code>。</li>\n</ul>\n<p>或许你会好奇，在第二个字段中应该描述的浏览器信息呢？怎么却要在第五个字段中出现？这可能还要涉及一些历史。</p>\n<h2 id=\"useragent-历史\"><a href=\"#useragent-历史\" class=\"headerlink\" title=\"useragent 历史\"></a>useragent 历史</h2><p>最早做 useragent 规划的时候，是这样设计的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AppName/version (extensions)</span><br></pre></td></tr></table></figure>\n\n<p>比如这样子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mozilla/3.0 (Win95; I)</span><br></pre></td></tr></table></figure>\n\n<p>你如果开发了一个微博浏览器，按规矩应该这么叫：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WeiboBroswer/1.0 (Windows NT 10)</span><br></pre></td></tr></table></figure>\n\n<p>那个年代，IE 发展太慢，别人支持的他不支持。所以部分功能，要对 IE 屏蔽掉。代码大致还是这么写的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ua = <span class=\"built_in\">window</span>.navigator.userAgent</span><br><span class=\"line\"><span class=\"keyword\">if</span>(ua.indexOf(<span class=\"string\">'Mozilla'</span>) === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 开启xxx功能</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这就导致后续 IE 升级，即便支持了新功能，用户最终也不能使用上。因为网站没有更新代码。</p>\n<p>所以，IE 干脆就是也叫作了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)</span><br></pre></td></tr></table></figure>\n\n<p>就这样，第 1 字段就没什么意义了，第 2 字段开始描述浏览器信息了。</p>\n<p>虽然和现代的格式不同（5 段结构），但是可以将浏览器信息等当做第 5 段内容，故本文还是更多的按照现有的风格来说明 useragent。</p>\n<h2 id=\"Mozilla-前缀\"><a href=\"#Mozilla-前缀\" class=\"headerlink\" title=\"Mozilla 前缀\"></a>Mozilla 前缀</h2><p>目前我只见过 <code>4.0</code> 和 <code>5.0</code> 两种。</p>\n<p>IE8 及以下浏览器（我查询到 IE5），是 <code>Mozilla/4.0</code>，之后都是 <code>Mozilla/5.0</code> 了。具体的版本含义不清楚。</p>\n<p>需要特殊说明的是，这个字段还可能是 <code>Opera/9.80</code> 这种形式。opera 当初是比较规矩的。</p>\n<h2 id=\"系统和浏览器信息\"><a href=\"#系统和浏览器信息\" class=\"headerlink\" title=\"系统和浏览器信息\"></a>系统和浏览器信息</h2><p>这个字段最为复杂。一方面涉及老的 IE，这里面什么信息都有；一方面不同平台，也没有个规律规矩，甚至是顺序都没有规定。唯一确定的，就是<strong>使用分号进行分隔</strong>。</p>\n<p>同时，由于不同系统、浏览器差异，有的字段会出现在第 2 字段中，而有的却出现在第 3、5 字段中。这里主要说重点字段，对于那些可能出现在 3、5 字段的，则按照后面出现为准。</p>\n<p>我先列出几个 useragent，为了看着方便，只列出前两个字段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// windows</span><br><span class=\"line\">// IE 系列</span><br><span class=\"line\">Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)</span><br><span class=\"line\">Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)</span><br><span class=\"line\">Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)</span><br><span class=\"line\">Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)</span><br><span class=\"line\">Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)</span><br><span class=\"line\">Mozilla/5.0 (compatible, MSIE 11, Windows NT 6.1; Trident/7.0; rv:11.0)</span><br><span class=\"line\">Mozilla/5.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; KB974489; Maxthon 2.0)</span><br><span class=\"line\">Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/4.0; WOW64; Trident/5.0; Maxthon 2.0)</span><br><span class=\"line\">// edge</span><br><span class=\"line\">Mozilla/5.0 (Windows NT 6.1; WOW64)</span><br><span class=\"line\">Mozilla/5.0 (Windows NT 10.0; Win64; x64)</span><br><span class=\"line\">// firefox</span><br><span class=\"line\">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0)</span><br><span class=\"line\">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0)</span><br><span class=\"line\">// chrome</span><br><span class=\"line\">Mozilla/5.0 (Windows NT 10.0; Win64; x64)</span><br><span class=\"line\">    </span><br><span class=\"line\">// Mac</span><br><span class=\"line\">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10; rv:33.0)</span><br><span class=\"line\">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3)</span><br><span class=\"line\">    </span><br><span class=\"line\">// Linux</span><br><span class=\"line\">Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:18.0)</span><br><span class=\"line\">Mozilla/5.0 (X11; Linux i586; rv:31.0)</span><br><span class=\"line\">    </span><br><span class=\"line\">// iOS</span><br><span class=\"line\">Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X)</span><br><span class=\"line\">Mozilla/5.0 (iPad; CPU OS 11_0 like Mac OS X)</span><br><span class=\"line\">Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us)</span><br><span class=\"line\">    </span><br><span class=\"line\">// Android</span><br><span class=\"line\">Mozilla/5.0 (Linux; U; Android 2.3.7; en-us; NexusOneBuild/FRF91)</span><br><span class=\"line\">    </span><br><span class=\"line\">// 其他设备</span><br><span class=\"line\">Mozilla/5.0 (BlackBerry; U; BlackBerry 9900; en)</span><br><span class=\"line\">Mozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US)</span><br></pre></td></tr></table></figure>\n\n<p>我们主要关注重点字段，非重点的可以忽略。</p>\n<p><strong>平台及系统字段：</strong></p>\n<ul>\n<li><code>Windows NT x.x</code>：Windows 系统环境<ul>\n<li><code>5.0</code>： Windows 2000</li>\n<li><code>5.1</code>： Windows XP</li>\n<li><code>6.0</code>： Windows Vista / Windows Server 2008</li>\n<li><code>6.1</code>： Windows 7 / Windows Server 2008 R2</li>\n<li><code>6.2</code>： Windows 8 / Windows RT / Windows Server 2012</li>\n<li><code>6.3</code>： Windows 8.1 / Windows Server 2012 R2</li>\n</ul>\n</li>\n<li><code>Macintosh</code>：苹果 Mac 系统环境</li>\n<li><code>Intel Mac OS X x_x_x</code>：苹果 Mac 系统及版本号</li>\n<li><code>x11</code>：X窗口系统，指代 Linux 系统，并不是所有 Linux 浏览器都有此字段</li>\n<li><code>Linux xxxx</code>：Linux 系统环境，也可能不带有CPU信息<ul>\n<li><code>i586</code>：很老的处理器（貌似指不含 MMX 指令集的 CPU）</li>\n<li><code>i686</code>：一般 CPU</li>\n<li><code>x86_64</code>：64 位 CPU</li>\n<li><code>mips</code>：MIPS 处理器</li>\n<li><code>ppc</code>：PowerPC</li>\n<li><code>amd64</code>：因该是指 AMD64 专属 CPU，并非常见的 <code>x86_64</code></li>\n<li><code>armv7l</code>：ARM v7 处理器</li>\n</ul>\n</li>\n<li><code>Linux x.x.x.xxxx</code>：Linux 系统环境，后面跟着内核版本号，例如 <code>Linux 2.6.31-16-generic</code>，这种写法不常见。</li>\n<li><code>iPhone</code> <code>iPad</code> <code>iPod</code>：苹果相应的设备</li>\n<li><code>Android</code>：一般会跟在 <code>Linux</code> 字段后面。安卓设备，后面还可能跟有设备信息。</li>\n<li><code>U</code> <code>I</code> <code>N</code>：加密等级，<code>U</code>-强安全加密，<code>I</code>-弱安全加密，<code>N</code>-无安全加密</li>\n</ul>\n<p><strong>Windows 专属字段：</strong></p>\n<ul>\n<li><code>compatible</code>：仅在 IE 浏览器中出现，表示兼容 <code>Mozilla/4.0</code> <code>Mozilla/5.0</code>，常见于 IE 浏览器，其他早些的浏览器比如 <code>Konqueror</code> 也有使用到。</li>\n<li><code>Trident/x.x</code>：仅在 IE 浏览器中出现，表示 Trident 渲染引擎版本。对于第三方浏览器，比如 Mathon，可能会出现两个值</li>\n<li><code>MSIE x.x</code>：IE浏览器版本，不一定带有小数点，而且老的版本可能是 <code>MSIE 6.0b</code> <code>MSIE 5.50</code> 这种形式</li>\n<li><code>WOW64</code>：仅在 Windows中出现，是 <code>Windows(32) on Windows 64</code>，表示当前浏览器是 32 位，运行在 64 位系统上，但是一般却不合 <code>x64</code> 连用，但系统确实是 64 位</li>\n<li><code>Win64</code>：表示当前浏览器是64位的，一般和 <code>x64</code> 连用</li>\n<li><code>x64</code>：表示系统是64位的</li>\n</ul>\n<p><strong>其他字段：</strong></p>\n<ul>\n<li><code>rv:x.x</code>：当前浏览器版本，一般 IE11 和 Firefox 才会有此字段，Chrome 从未见过用此字段。如果是第三方浏览器，这里也指代当前利用的 IE版本</li>\n</ul>\n<p><strong>额外说明：</strong></p>\n<p>IE 的浏览器，还可能带上补丁号（类似 <code>KB974489</code>），系统 .NET 插件等信息等。</p>\n<p>有的浏览器还会带上浏览器语言，比如 <code>en-US</code>。</p>\n<p>Linux / BSD 系统，可能会带上发行版信息，比如 <code>(X11; Ubuntu; Linux x86_64; rv:61.0)</code> 但这个不是必须的。发行版信息，也可能在第 5 字段中出现。</p>\n<h2 id=\"浏览器渲染引擎及其他补充信息\"><a href=\"#浏览器渲染引擎及其他补充信息\" class=\"headerlink\" title=\"浏览器渲染引擎及其他补充信息\"></a>浏览器渲染引擎及其他补充信息</h2><p>这个字段现代浏览器比较好说明，要么没有，要么就是缺少补充信息（括号内的内容）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AppleWebKit/604.1.34 (KHTML, like Gecko)</span><br><span class=\"line\">Gecko/20100101</span><br><span class=\"line\">Presto/2.9.201</span><br><span class=\"line\">like Gecko</span><br></pre></td></tr></table></figure>\n\n<p>现在一般都是 <code>AppleWebKit</code> <code>Gecko</code>，指代的是渲染引擎版本号。</p>\n<p>很久以前 Opera 浏览器是 <code>Presto</code>。</p>\n<p>IE 11 开始写上了 <code>like Gecko</code>，我认为没什么用。此外，IE浏览器渲染引擎及版本在上一节中有提到。</p>\n<h2 id=\"扩展字段\"><a href=\"#扩展字段\" class=\"headerlink\" title=\"扩展字段\"></a>扩展字段</h2><p>这个字段内容最多，不过还好主要的字段不复杂。字段采用<strong>空格进行分隔</strong>。</p>\n<p>先看例子，下面只展示 useragent 的扩展字段内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Desktop</span><br><span class=\"line\">Chrome/69.0.3497.81 Safari/537.36</span><br><span class=\"line\">Firefox/61.0</span><br><span class=\"line\">Version/7.0.3 Safari/7046A194A</span><br><span class=\"line\"></span><br><span class=\"line\">// Mobile</span><br><span class=\"line\">Version/10.0 Mobile/14E304 Safari/602.1</span><br><span class=\"line\">Version/11.0 Mobile/15A5341f Safari/604.1</span><br><span class=\"line\">Version/4.0 Chrome/69.0.3497.81 Mobile Safari/537.363</span><br><span class=\"line\"></span><br><span class=\"line\">// Other</span><br><span class=\"line\">Mobile/16A366 MicroMessenger/6.7.2 NetType/WIFI Language/zh_CN // 微信</span><br><span class=\"line\">Mobile/16A366 ChannelId(36) NebulaSDK/1.8.100112 Nebula PSDType(1) AlipayDefined(nt:WIFI,ws:414|672|3.0,ac:T) AliApp(AP/10.1.32.600) AlipayClient/10.1.32.600 Alipay Language/zh-Hans // 支付宝</span><br></pre></td></tr></table></figure>\n\n<p>首先，由于历史原因，Chrome 浏览器也会带有 Safari 字段。</p>\n<p><strong>主流字段：</strong></p>\n<ul>\n<li><code>Safari</code>：Safari 版本号</li>\n<li><code>Chrome</code>：Chrome 版本号</li>\n<li><code>Version</code>：系统版本号，一般移动设备和 Mac 设备拥有</li>\n<li><code>Mobile</code>：移动设备版本号，一般指内部版本号，苹果设备拥有版本号，安卓设备不含版本号</li>\n</ul>\n<p><strong>其他浏览器字段：</strong></p>\n<p>主要就是各种第三方浏览器，包括 APP 内嵌入的 WebView 等。为了方便自我识别，都是在这里加上各个 APP 独有的信息。</p>\n<p>一般来讲，都是采用标准的 <code>key/value</code> 形式，但不是所有字段都符合这个规律。</p>\n<p>基本上要判断什么浏览器（或者WebView），需要看下它的 useragent，单独处理了。</p>\n<p>–END–</p>"},{"layout":"post","title":"git 常用命令小结","date":"2018-09-12T21:58:00.000Z","_content":"\n用了一段时间，把 git 的常规命令熟悉了一遍，稍微整理出来，方便后续查阅。\n\n<!-- more -->\n\n## git 配置\n> 全局配置文件位置：`~/.gitconfig` 或 `~/.config/git/config` 文件\n> 项目配置文件位置：`.git/config`\n\n```bash\ngit config --global user.name \"John Doe\"\ngit config --global user.email johndoe@example.com\n\n# 配置默认编辑器\ngit config --global core.editor emacs \n# 检查配置信息\ngit config --list\n```\n\n## 远程仓库\n```bash\n# 罗列远程仓库名（默认只有origin一个）\ngit remote\n# 详细罗列远程仓库\ngit remote -v\n# 查看远程仓库分支信息\ngit remote show origin\n# 远程仓库重命名\ngit remote rename pb paul\n# 移除远程仓库\ngit remote rm pb\n# 添加远程仓库\ngit remote add pb https://github.com/paulboone/ticgit\n# 拉取远程仓库\ngit fetch # git fetch origin\n# 推送远程仓库\ngit push # git push origin master\n```\n\n## 仓库建立\n```bash\n# 获取远程仓库代码\ngit clone git://git.kernel.org/pub/scm/git/git.git\n# 本地初始化仓库\ngit init\n```\n\n## 追踪文件\n```bash\n# 追踪所有文件\ngit add . \n# 追踪单一文件\ngit add aa.txt\n# 取消文件追踪\ngit reset HEAD aa.txt\n```\n\n## 文件还原\n```bash\n# 将文件还愿至上次提交状态\ngit checkout -- aa.txt\n```\n\n## 代码提交\n```bash\n# 默认提交，要求填写提交消息\ngit commit \n# 带有消息的提交\ngit commit -m \"fix bugs\"\n# 将所有修改的文件进行追踪并提交\ngit commit -am \"fix bugs\"\n```\n\n## 代码状态\n```bash\n# 默认格式\ngit status\n# 紧凑格式\ngit status -s # --short\n```\n\n## 代码比较\n```bash\n# 查看尚未暂存的文件更新了哪些部分\ngit diff\n# 查看已暂存的将要添加到下次提交里的内容\ngit diff --staged # 或 --cached\n# 检查要提交的代码\ngit diff --check\n```\n\n## 提交历史\n```bash\n# 默认格式\ngit log\n# 附带上每次修改的具体内容\ngit log -p\n# 控制输出条数\ngit log -5\n# 每条记录显示总结\ngit log --stat\n# 显示效果（一行）\ngit log --pretty=oneline # 或 git log --oneline\n# 显示图表\ngit log --graph\n# 查阅某条记录详情\ngit show 300b5c\n\n# 查看master分支，但不含feature1 分支\n# 分支顺序无所谓\ngit log master ^feature1 # 支持多个分支\ngit log master not feature1 # 支持多个分支\ngit log master feature1.. # 只能两个分支\n```\n\n## 撤销操作\n```bash\n# 追加文件提交或修改上次提交消息\ngit commit --amend\n```\n\n## 移除文件\n```bash\ngit rm aa.txt\n# 如果该文件在暂存区，则需要加参数 -f\ngit rm -f aa.txt\n# 如果仅仅是取消追踪\ngit rm --cached aa.txt\n```\n\n## 打标签\n```bash\n# 列出标签\ngit tag\n# 列出标签（过滤）\ngit tag -l 'v1.8.5*' # --list\n# 打轻量标签\ngit tag v1.4\n# 打附注标签\ngit tag -a v1.4 -m 'my version 1.4' # --annotate\n# 打附注标签（指定提交）\ngit tag -a v1.2 9fceb02\n# 显示标签详情\ngit show v1.4\n\n# 推送标签\ngit push origin v1.5\n# 推送所有标签\ngit push origin --tags\n```\n\n## 分支操作\n```bash\n# 查看分支\ngit branch\n# 查看分支（带有最后提交）\ngit branch -v\n# 查看那些分支已经合并到主干（带有星号）\ngit branch --merged\n# 查看那些分支未合并到主干\ngit branch --no-merged\n# 切换分支\ngit checkout test\n# 创建并切换到分支\ngit checkout -b test \n# 创建并切换到分支（相当于下面两条命令）\ngit branch test\ngit checkout test\n# 删除分支\ngit branch -d test\n# 强行删除分支（如果分支代码没有被合并）\ngit branch -D test\n```\n\n## 变基\n```bash\n# 切换到需要变基分支\ngit checkout experiment\n# 执行变基，提取特征\ngit rebase master\n# 回到主干\ngit checkout master\n# 代码合并\ngit merge experiment\n\n# 或者\ngit rebase master experiment\ngit checkout master\ngit merge experiment\n```\n\n## 代码合并\n```bash\n# 将其他分支代码合并到当前分支\ngit merge test\n# 退出合并\ngit merge --abort\n```\n\n## 储藏\n```bash\n# 储藏（追踪的代码）\ngit stash\n# 储藏（追踪和未追踪的代码）\ngit stash -u\n# 查看储藏记录\ngit stash list\n# 提取最近一个储藏（储藏被删除）\ngit stash pop \n# 提取最近一个储藏（储藏不被删除）\ngit stash apply\n# 提取指定储藏（储藏不被删除）\ngit stash apply stash@{2}\n# 删除指定储藏\ngit stash drop stash@{0}\n# 把储藏保存为分支\ngit stash branch stash-test\n```\n\n## 查阅操作记录\n```bash\ngit reflog\n```\n\n## 版本写法\n```bash\n# 当前最新提交\ngit show HEAD\n# 上一次提交\ngit show HEAD~1\ngit show HEAD^\n# 上两次提交\ngit show HEAD~2\ngit show HEAD^^\n# 第一次提交\ngit show HEAD@{1}\n```\n\n## 打包\n```bash\n# 项目打包\ngit bundle create repo.bundle HEAD master\n```\n\n--END--\n","source":"_posts/2018/2018-09-12-git.md","raw":"---\nlayout: post\ntitle: git 常用命令小结\ndate: 2018-09-12 21:58:00 GMT+0800\ncategories: [编程]\ntags:  [git]\n---\n\n用了一段时间，把 git 的常规命令熟悉了一遍，稍微整理出来，方便后续查阅。\n\n<!-- more -->\n\n## git 配置\n> 全局配置文件位置：`~/.gitconfig` 或 `~/.config/git/config` 文件\n> 项目配置文件位置：`.git/config`\n\n```bash\ngit config --global user.name \"John Doe\"\ngit config --global user.email johndoe@example.com\n\n# 配置默认编辑器\ngit config --global core.editor emacs \n# 检查配置信息\ngit config --list\n```\n\n## 远程仓库\n```bash\n# 罗列远程仓库名（默认只有origin一个）\ngit remote\n# 详细罗列远程仓库\ngit remote -v\n# 查看远程仓库分支信息\ngit remote show origin\n# 远程仓库重命名\ngit remote rename pb paul\n# 移除远程仓库\ngit remote rm pb\n# 添加远程仓库\ngit remote add pb https://github.com/paulboone/ticgit\n# 拉取远程仓库\ngit fetch # git fetch origin\n# 推送远程仓库\ngit push # git push origin master\n```\n\n## 仓库建立\n```bash\n# 获取远程仓库代码\ngit clone git://git.kernel.org/pub/scm/git/git.git\n# 本地初始化仓库\ngit init\n```\n\n## 追踪文件\n```bash\n# 追踪所有文件\ngit add . \n# 追踪单一文件\ngit add aa.txt\n# 取消文件追踪\ngit reset HEAD aa.txt\n```\n\n## 文件还原\n```bash\n# 将文件还愿至上次提交状态\ngit checkout -- aa.txt\n```\n\n## 代码提交\n```bash\n# 默认提交，要求填写提交消息\ngit commit \n# 带有消息的提交\ngit commit -m \"fix bugs\"\n# 将所有修改的文件进行追踪并提交\ngit commit -am \"fix bugs\"\n```\n\n## 代码状态\n```bash\n# 默认格式\ngit status\n# 紧凑格式\ngit status -s # --short\n```\n\n## 代码比较\n```bash\n# 查看尚未暂存的文件更新了哪些部分\ngit diff\n# 查看已暂存的将要添加到下次提交里的内容\ngit diff --staged # 或 --cached\n# 检查要提交的代码\ngit diff --check\n```\n\n## 提交历史\n```bash\n# 默认格式\ngit log\n# 附带上每次修改的具体内容\ngit log -p\n# 控制输出条数\ngit log -5\n# 每条记录显示总结\ngit log --stat\n# 显示效果（一行）\ngit log --pretty=oneline # 或 git log --oneline\n# 显示图表\ngit log --graph\n# 查阅某条记录详情\ngit show 300b5c\n\n# 查看master分支，但不含feature1 分支\n# 分支顺序无所谓\ngit log master ^feature1 # 支持多个分支\ngit log master not feature1 # 支持多个分支\ngit log master feature1.. # 只能两个分支\n```\n\n## 撤销操作\n```bash\n# 追加文件提交或修改上次提交消息\ngit commit --amend\n```\n\n## 移除文件\n```bash\ngit rm aa.txt\n# 如果该文件在暂存区，则需要加参数 -f\ngit rm -f aa.txt\n# 如果仅仅是取消追踪\ngit rm --cached aa.txt\n```\n\n## 打标签\n```bash\n# 列出标签\ngit tag\n# 列出标签（过滤）\ngit tag -l 'v1.8.5*' # --list\n# 打轻量标签\ngit tag v1.4\n# 打附注标签\ngit tag -a v1.4 -m 'my version 1.4' # --annotate\n# 打附注标签（指定提交）\ngit tag -a v1.2 9fceb02\n# 显示标签详情\ngit show v1.4\n\n# 推送标签\ngit push origin v1.5\n# 推送所有标签\ngit push origin --tags\n```\n\n## 分支操作\n```bash\n# 查看分支\ngit branch\n# 查看分支（带有最后提交）\ngit branch -v\n# 查看那些分支已经合并到主干（带有星号）\ngit branch --merged\n# 查看那些分支未合并到主干\ngit branch --no-merged\n# 切换分支\ngit checkout test\n# 创建并切换到分支\ngit checkout -b test \n# 创建并切换到分支（相当于下面两条命令）\ngit branch test\ngit checkout test\n# 删除分支\ngit branch -d test\n# 强行删除分支（如果分支代码没有被合并）\ngit branch -D test\n```\n\n## 变基\n```bash\n# 切换到需要变基分支\ngit checkout experiment\n# 执行变基，提取特征\ngit rebase master\n# 回到主干\ngit checkout master\n# 代码合并\ngit merge experiment\n\n# 或者\ngit rebase master experiment\ngit checkout master\ngit merge experiment\n```\n\n## 代码合并\n```bash\n# 将其他分支代码合并到当前分支\ngit merge test\n# 退出合并\ngit merge --abort\n```\n\n## 储藏\n```bash\n# 储藏（追踪的代码）\ngit stash\n# 储藏（追踪和未追踪的代码）\ngit stash -u\n# 查看储藏记录\ngit stash list\n# 提取最近一个储藏（储藏被删除）\ngit stash pop \n# 提取最近一个储藏（储藏不被删除）\ngit stash apply\n# 提取指定储藏（储藏不被删除）\ngit stash apply stash@{2}\n# 删除指定储藏\ngit stash drop stash@{0}\n# 把储藏保存为分支\ngit stash branch stash-test\n```\n\n## 查阅操作记录\n```bash\ngit reflog\n```\n\n## 版本写法\n```bash\n# 当前最新提交\ngit show HEAD\n# 上一次提交\ngit show HEAD~1\ngit show HEAD^\n# 上两次提交\ngit show HEAD~2\ngit show HEAD^^\n# 第一次提交\ngit show HEAD@{1}\n```\n\n## 打包\n```bash\n# 项目打包\ngit bundle create repo.bundle HEAD master\n```\n\n--END--\n","slug":"2018-2018-09-12-git","published":1,"updated":"2020-03-06T01:27:21.299Z","comments":1,"photos":[],"link":"","_id":"cka5ik8cm005hnybgf01tf91v","content":"<p>用了一段时间，把 git 的常规命令熟悉了一遍，稍微整理出来，方便后续查阅。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"git-配置\"><a href=\"#git-配置\" class=\"headerlink\" title=\"git 配置\"></a>git 配置</h2><blockquote>\n<p>全局配置文件位置：<code>~/.gitconfig</code> 或 <code>~/.config/git/config</code> 文件<br>项目配置文件位置：<code>.git/config</code></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">\"John Doe\"</span></span><br><span class=\"line\">git config --global user.email johndoe@example.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置默认编辑器</span></span><br><span class=\"line\">git config --global core.editor emacs </span><br><span class=\"line\"><span class=\"comment\"># 检查配置信息</span></span><br><span class=\"line\">git config --list</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 罗列远程仓库名（默认只有origin一个）</span></span><br><span class=\"line\">git remote</span><br><span class=\"line\"><span class=\"comment\"># 详细罗列远程仓库</span></span><br><span class=\"line\">git remote -v</span><br><span class=\"line\"><span class=\"comment\"># 查看远程仓库分支信息</span></span><br><span class=\"line\">git remote show origin</span><br><span class=\"line\"><span class=\"comment\"># 远程仓库重命名</span></span><br><span class=\"line\">git remote rename pb paul</span><br><span class=\"line\"><span class=\"comment\"># 移除远程仓库</span></span><br><span class=\"line\">git remote rm pb</span><br><span class=\"line\"><span class=\"comment\"># 添加远程仓库</span></span><br><span class=\"line\">git remote add pb https://github.com/paulboone/ticgit</span><br><span class=\"line\"><span class=\"comment\"># 拉取远程仓库</span></span><br><span class=\"line\">git fetch <span class=\"comment\"># git fetch origin</span></span><br><span class=\"line\"><span class=\"comment\"># 推送远程仓库</span></span><br><span class=\"line\">git push <span class=\"comment\"># git push origin master</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"仓库建立\"><a href=\"#仓库建立\" class=\"headerlink\" title=\"仓库建立\"></a>仓库建立</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取远程仓库代码</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> git://git.kernel.org/pub/scm/git/git.git</span><br><span class=\"line\"><span class=\"comment\"># 本地初始化仓库</span></span><br><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"追踪文件\"><a href=\"#追踪文件\" class=\"headerlink\" title=\"追踪文件\"></a>追踪文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 追踪所有文件</span></span><br><span class=\"line\">git add . </span><br><span class=\"line\"><span class=\"comment\"># 追踪单一文件</span></span><br><span class=\"line\">git add aa.txt</span><br><span class=\"line\"><span class=\"comment\"># 取消文件追踪</span></span><br><span class=\"line\">git reset HEAD aa.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件还原\"><a href=\"#文件还原\" class=\"headerlink\" title=\"文件还原\"></a>文件还原</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将文件还愿至上次提交状态</span></span><br><span class=\"line\">git checkout -- aa.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码提交\"><a href=\"#代码提交\" class=\"headerlink\" title=\"代码提交\"></a>代码提交</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认提交，要求填写提交消息</span></span><br><span class=\"line\">git commit </span><br><span class=\"line\"><span class=\"comment\"># 带有消息的提交</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"fix bugs\"</span></span><br><span class=\"line\"><span class=\"comment\"># 将所有修改的文件进行追踪并提交</span></span><br><span class=\"line\">git commit -am <span class=\"string\">\"fix bugs\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码状态\"><a href=\"#代码状态\" class=\"headerlink\" title=\"代码状态\"></a>代码状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认格式</span></span><br><span class=\"line\">git status</span><br><span class=\"line\"><span class=\"comment\"># 紧凑格式</span></span><br><span class=\"line\">git status -s <span class=\"comment\"># --short</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码比较\"><a href=\"#代码比较\" class=\"headerlink\" title=\"代码比较\"></a>代码比较</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看尚未暂存的文件更新了哪些部分</span></span><br><span class=\"line\">git diff</span><br><span class=\"line\"><span class=\"comment\"># 查看已暂存的将要添加到下次提交里的内容</span></span><br><span class=\"line\">git diff --staged <span class=\"comment\"># 或 --cached</span></span><br><span class=\"line\"><span class=\"comment\"># 检查要提交的代码</span></span><br><span class=\"line\">git diff --check</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"提交历史\"><a href=\"#提交历史\" class=\"headerlink\" title=\"提交历史\"></a>提交历史</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认格式</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span></span><br><span class=\"line\"><span class=\"comment\"># 附带上每次修改的具体内容</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -p</span><br><span class=\"line\"><span class=\"comment\"># 控制输出条数</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -5</span><br><span class=\"line\"><span class=\"comment\"># 每条记录显示总结</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span></span><br><span class=\"line\"><span class=\"comment\"># 显示效果（一行）</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --pretty=oneline <span class=\"comment\"># 或 git log --oneline</span></span><br><span class=\"line\"><span class=\"comment\"># 显示图表</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --graph</span><br><span class=\"line\"><span class=\"comment\"># 查阅某条记录详情</span></span><br><span class=\"line\">git show 300b5c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看master分支，但不含feature1 分支</span></span><br><span class=\"line\"><span class=\"comment\"># 分支顺序无所谓</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> master ^feature1 <span class=\"comment\"># 支持多个分支</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> master not feature1 <span class=\"comment\"># 支持多个分支</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> master feature1.. <span class=\"comment\"># 只能两个分支</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"撤销操作\"><a href=\"#撤销操作\" class=\"headerlink\" title=\"撤销操作\"></a>撤销操作</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 追加文件提交或修改上次提交消息</span></span><br><span class=\"line\">git commit --amend</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"移除文件\"><a href=\"#移除文件\" class=\"headerlink\" title=\"移除文件\"></a>移除文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm aa.txt</span><br><span class=\"line\"><span class=\"comment\"># 如果该文件在暂存区，则需要加参数 -f</span></span><br><span class=\"line\">git rm -f aa.txt</span><br><span class=\"line\"><span class=\"comment\"># 如果仅仅是取消追踪</span></span><br><span class=\"line\">git rm --cached aa.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打标签\"><a href=\"#打标签\" class=\"headerlink\" title=\"打标签\"></a>打标签</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出标签</span></span><br><span class=\"line\">git tag</span><br><span class=\"line\"><span class=\"comment\"># 列出标签（过滤）</span></span><br><span class=\"line\">git tag -l <span class=\"string\">'v1.8.5*'</span> <span class=\"comment\"># --list</span></span><br><span class=\"line\"><span class=\"comment\"># 打轻量标签</span></span><br><span class=\"line\">git tag v1.4</span><br><span class=\"line\"><span class=\"comment\"># 打附注标签</span></span><br><span class=\"line\">git tag -a v1.4 -m <span class=\"string\">'my version 1.4'</span> <span class=\"comment\"># --annotate</span></span><br><span class=\"line\"><span class=\"comment\"># 打附注标签（指定提交）</span></span><br><span class=\"line\">git tag -a v1.2 9fceb02</span><br><span class=\"line\"><span class=\"comment\"># 显示标签详情</span></span><br><span class=\"line\">git show v1.4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送标签</span></span><br><span class=\"line\">git push origin v1.5</span><br><span class=\"line\"><span class=\"comment\"># 推送所有标签</span></span><br><span class=\"line\">git push origin --tags</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分支操作\"><a href=\"#分支操作\" class=\"headerlink\" title=\"分支操作\"></a>分支操作</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看分支</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\"><span class=\"comment\"># 查看分支（带有最后提交）</span></span><br><span class=\"line\">git branch -v</span><br><span class=\"line\"><span class=\"comment\"># 查看那些分支已经合并到主干（带有星号）</span></span><br><span class=\"line\">git branch --merged</span><br><span class=\"line\"><span class=\"comment\"># 查看那些分支未合并到主干</span></span><br><span class=\"line\">git branch --no-merged</span><br><span class=\"line\"><span class=\"comment\"># 切换分支</span></span><br><span class=\"line\">git checkout <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\"># 创建并切换到分支</span></span><br><span class=\"line\">git checkout -b <span class=\"built_in\">test</span> </span><br><span class=\"line\"><span class=\"comment\"># 创建并切换到分支（相当于下面两条命令）</span></span><br><span class=\"line\">git branch <span class=\"built_in\">test</span></span><br><span class=\"line\">git checkout <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\"># 删除分支</span></span><br><span class=\"line\">git branch -d <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\"># 强行删除分支（如果分支代码没有被合并）</span></span><br><span class=\"line\">git branch -D <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变基\"><a href=\"#变基\" class=\"headerlink\" title=\"变基\"></a>变基</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换到需要变基分支</span></span><br><span class=\"line\">git checkout experiment</span><br><span class=\"line\"><span class=\"comment\"># 执行变基，提取特征</span></span><br><span class=\"line\">git rebase master</span><br><span class=\"line\"><span class=\"comment\"># 回到主干</span></span><br><span class=\"line\">git checkout master</span><br><span class=\"line\"><span class=\"comment\"># 代码合并</span></span><br><span class=\"line\">git merge experiment</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">git rebase master experiment</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge experiment</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码合并\"><a href=\"#代码合并\" class=\"headerlink\" title=\"代码合并\"></a>代码合并</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将其他分支代码合并到当前分支</span></span><br><span class=\"line\">git merge <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\"># 退出合并</span></span><br><span class=\"line\">git merge --abort</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"储藏\"><a href=\"#储藏\" class=\"headerlink\" title=\"储藏\"></a>储藏</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 储藏（追踪的代码）</span></span><br><span class=\"line\">git stash</span><br><span class=\"line\"><span class=\"comment\"># 储藏（追踪和未追踪的代码）</span></span><br><span class=\"line\">git stash -u</span><br><span class=\"line\"><span class=\"comment\"># 查看储藏记录</span></span><br><span class=\"line\">git stash list</span><br><span class=\"line\"><span class=\"comment\"># 提取最近一个储藏（储藏被删除）</span></span><br><span class=\"line\">git stash pop </span><br><span class=\"line\"><span class=\"comment\"># 提取最近一个储藏（储藏不被删除）</span></span><br><span class=\"line\">git stash apply</span><br><span class=\"line\"><span class=\"comment\"># 提取指定储藏（储藏不被删除）</span></span><br><span class=\"line\">git stash apply stash@&#123;2&#125;</span><br><span class=\"line\"><span class=\"comment\"># 删除指定储藏</span></span><br><span class=\"line\">git stash drop stash@&#123;0&#125;</span><br><span class=\"line\"><span class=\"comment\"># 把储藏保存为分支</span></span><br><span class=\"line\">git stash branch stash-test</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查阅操作记录\"><a href=\"#查阅操作记录\" class=\"headerlink\" title=\"查阅操作记录\"></a>查阅操作记录</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"版本写法\"><a href=\"#版本写法\" class=\"headerlink\" title=\"版本写法\"></a>版本写法</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 当前最新提交</span></span><br><span class=\"line\">git show HEAD</span><br><span class=\"line\"><span class=\"comment\"># 上一次提交</span></span><br><span class=\"line\">git show HEAD~1</span><br><span class=\"line\">git show HEAD^</span><br><span class=\"line\"><span class=\"comment\"># 上两次提交</span></span><br><span class=\"line\">git show HEAD~2</span><br><span class=\"line\">git show HEAD^^</span><br><span class=\"line\"><span class=\"comment\"># 第一次提交</span></span><br><span class=\"line\">git show HEAD@&#123;1&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 项目打包</span></span><br><span class=\"line\">git bundle create repo.bundle HEAD master</span><br></pre></td></tr></table></figure>\n\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>用了一段时间，把 git 的常规命令熟悉了一遍，稍微整理出来，方便后续查阅。</p>","more":"<h2 id=\"git-配置\"><a href=\"#git-配置\" class=\"headerlink\" title=\"git 配置\"></a>git 配置</h2><blockquote>\n<p>全局配置文件位置：<code>~/.gitconfig</code> 或 <code>~/.config/git/config</code> 文件<br>项目配置文件位置：<code>.git/config</code></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">\"John Doe\"</span></span><br><span class=\"line\">git config --global user.email johndoe@example.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置默认编辑器</span></span><br><span class=\"line\">git config --global core.editor emacs </span><br><span class=\"line\"><span class=\"comment\"># 检查配置信息</span></span><br><span class=\"line\">git config --list</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 罗列远程仓库名（默认只有origin一个）</span></span><br><span class=\"line\">git remote</span><br><span class=\"line\"><span class=\"comment\"># 详细罗列远程仓库</span></span><br><span class=\"line\">git remote -v</span><br><span class=\"line\"><span class=\"comment\"># 查看远程仓库分支信息</span></span><br><span class=\"line\">git remote show origin</span><br><span class=\"line\"><span class=\"comment\"># 远程仓库重命名</span></span><br><span class=\"line\">git remote rename pb paul</span><br><span class=\"line\"><span class=\"comment\"># 移除远程仓库</span></span><br><span class=\"line\">git remote rm pb</span><br><span class=\"line\"><span class=\"comment\"># 添加远程仓库</span></span><br><span class=\"line\">git remote add pb https://github.com/paulboone/ticgit</span><br><span class=\"line\"><span class=\"comment\"># 拉取远程仓库</span></span><br><span class=\"line\">git fetch <span class=\"comment\"># git fetch origin</span></span><br><span class=\"line\"><span class=\"comment\"># 推送远程仓库</span></span><br><span class=\"line\">git push <span class=\"comment\"># git push origin master</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"仓库建立\"><a href=\"#仓库建立\" class=\"headerlink\" title=\"仓库建立\"></a>仓库建立</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取远程仓库代码</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> git://git.kernel.org/pub/scm/git/git.git</span><br><span class=\"line\"><span class=\"comment\"># 本地初始化仓库</span></span><br><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"追踪文件\"><a href=\"#追踪文件\" class=\"headerlink\" title=\"追踪文件\"></a>追踪文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 追踪所有文件</span></span><br><span class=\"line\">git add . </span><br><span class=\"line\"><span class=\"comment\"># 追踪单一文件</span></span><br><span class=\"line\">git add aa.txt</span><br><span class=\"line\"><span class=\"comment\"># 取消文件追踪</span></span><br><span class=\"line\">git reset HEAD aa.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件还原\"><a href=\"#文件还原\" class=\"headerlink\" title=\"文件还原\"></a>文件还原</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将文件还愿至上次提交状态</span></span><br><span class=\"line\">git checkout -- aa.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码提交\"><a href=\"#代码提交\" class=\"headerlink\" title=\"代码提交\"></a>代码提交</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认提交，要求填写提交消息</span></span><br><span class=\"line\">git commit </span><br><span class=\"line\"><span class=\"comment\"># 带有消息的提交</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"fix bugs\"</span></span><br><span class=\"line\"><span class=\"comment\"># 将所有修改的文件进行追踪并提交</span></span><br><span class=\"line\">git commit -am <span class=\"string\">\"fix bugs\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码状态\"><a href=\"#代码状态\" class=\"headerlink\" title=\"代码状态\"></a>代码状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认格式</span></span><br><span class=\"line\">git status</span><br><span class=\"line\"><span class=\"comment\"># 紧凑格式</span></span><br><span class=\"line\">git status -s <span class=\"comment\"># --short</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码比较\"><a href=\"#代码比较\" class=\"headerlink\" title=\"代码比较\"></a>代码比较</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看尚未暂存的文件更新了哪些部分</span></span><br><span class=\"line\">git diff</span><br><span class=\"line\"><span class=\"comment\"># 查看已暂存的将要添加到下次提交里的内容</span></span><br><span class=\"line\">git diff --staged <span class=\"comment\"># 或 --cached</span></span><br><span class=\"line\"><span class=\"comment\"># 检查要提交的代码</span></span><br><span class=\"line\">git diff --check</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"提交历史\"><a href=\"#提交历史\" class=\"headerlink\" title=\"提交历史\"></a>提交历史</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认格式</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span></span><br><span class=\"line\"><span class=\"comment\"># 附带上每次修改的具体内容</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -p</span><br><span class=\"line\"><span class=\"comment\"># 控制输出条数</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -5</span><br><span class=\"line\"><span class=\"comment\"># 每条记录显示总结</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span></span><br><span class=\"line\"><span class=\"comment\"># 显示效果（一行）</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --pretty=oneline <span class=\"comment\"># 或 git log --oneline</span></span><br><span class=\"line\"><span class=\"comment\"># 显示图表</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --graph</span><br><span class=\"line\"><span class=\"comment\"># 查阅某条记录详情</span></span><br><span class=\"line\">git show 300b5c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看master分支，但不含feature1 分支</span></span><br><span class=\"line\"><span class=\"comment\"># 分支顺序无所谓</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> master ^feature1 <span class=\"comment\"># 支持多个分支</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> master not feature1 <span class=\"comment\"># 支持多个分支</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> master feature1.. <span class=\"comment\"># 只能两个分支</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"撤销操作\"><a href=\"#撤销操作\" class=\"headerlink\" title=\"撤销操作\"></a>撤销操作</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 追加文件提交或修改上次提交消息</span></span><br><span class=\"line\">git commit --amend</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"移除文件\"><a href=\"#移除文件\" class=\"headerlink\" title=\"移除文件\"></a>移除文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm aa.txt</span><br><span class=\"line\"><span class=\"comment\"># 如果该文件在暂存区，则需要加参数 -f</span></span><br><span class=\"line\">git rm -f aa.txt</span><br><span class=\"line\"><span class=\"comment\"># 如果仅仅是取消追踪</span></span><br><span class=\"line\">git rm --cached aa.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打标签\"><a href=\"#打标签\" class=\"headerlink\" title=\"打标签\"></a>打标签</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出标签</span></span><br><span class=\"line\">git tag</span><br><span class=\"line\"><span class=\"comment\"># 列出标签（过滤）</span></span><br><span class=\"line\">git tag -l <span class=\"string\">'v1.8.5*'</span> <span class=\"comment\"># --list</span></span><br><span class=\"line\"><span class=\"comment\"># 打轻量标签</span></span><br><span class=\"line\">git tag v1.4</span><br><span class=\"line\"><span class=\"comment\"># 打附注标签</span></span><br><span class=\"line\">git tag -a v1.4 -m <span class=\"string\">'my version 1.4'</span> <span class=\"comment\"># --annotate</span></span><br><span class=\"line\"><span class=\"comment\"># 打附注标签（指定提交）</span></span><br><span class=\"line\">git tag -a v1.2 9fceb02</span><br><span class=\"line\"><span class=\"comment\"># 显示标签详情</span></span><br><span class=\"line\">git show v1.4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送标签</span></span><br><span class=\"line\">git push origin v1.5</span><br><span class=\"line\"><span class=\"comment\"># 推送所有标签</span></span><br><span class=\"line\">git push origin --tags</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分支操作\"><a href=\"#分支操作\" class=\"headerlink\" title=\"分支操作\"></a>分支操作</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看分支</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\"><span class=\"comment\"># 查看分支（带有最后提交）</span></span><br><span class=\"line\">git branch -v</span><br><span class=\"line\"><span class=\"comment\"># 查看那些分支已经合并到主干（带有星号）</span></span><br><span class=\"line\">git branch --merged</span><br><span class=\"line\"><span class=\"comment\"># 查看那些分支未合并到主干</span></span><br><span class=\"line\">git branch --no-merged</span><br><span class=\"line\"><span class=\"comment\"># 切换分支</span></span><br><span class=\"line\">git checkout <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\"># 创建并切换到分支</span></span><br><span class=\"line\">git checkout -b <span class=\"built_in\">test</span> </span><br><span class=\"line\"><span class=\"comment\"># 创建并切换到分支（相当于下面两条命令）</span></span><br><span class=\"line\">git branch <span class=\"built_in\">test</span></span><br><span class=\"line\">git checkout <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\"># 删除分支</span></span><br><span class=\"line\">git branch -d <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\"># 强行删除分支（如果分支代码没有被合并）</span></span><br><span class=\"line\">git branch -D <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变基\"><a href=\"#变基\" class=\"headerlink\" title=\"变基\"></a>变基</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换到需要变基分支</span></span><br><span class=\"line\">git checkout experiment</span><br><span class=\"line\"><span class=\"comment\"># 执行变基，提取特征</span></span><br><span class=\"line\">git rebase master</span><br><span class=\"line\"><span class=\"comment\"># 回到主干</span></span><br><span class=\"line\">git checkout master</span><br><span class=\"line\"><span class=\"comment\"># 代码合并</span></span><br><span class=\"line\">git merge experiment</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">git rebase master experiment</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge experiment</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码合并\"><a href=\"#代码合并\" class=\"headerlink\" title=\"代码合并\"></a>代码合并</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将其他分支代码合并到当前分支</span></span><br><span class=\"line\">git merge <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\"># 退出合并</span></span><br><span class=\"line\">git merge --abort</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"储藏\"><a href=\"#储藏\" class=\"headerlink\" title=\"储藏\"></a>储藏</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 储藏（追踪的代码）</span></span><br><span class=\"line\">git stash</span><br><span class=\"line\"><span class=\"comment\"># 储藏（追踪和未追踪的代码）</span></span><br><span class=\"line\">git stash -u</span><br><span class=\"line\"><span class=\"comment\"># 查看储藏记录</span></span><br><span class=\"line\">git stash list</span><br><span class=\"line\"><span class=\"comment\"># 提取最近一个储藏（储藏被删除）</span></span><br><span class=\"line\">git stash pop </span><br><span class=\"line\"><span class=\"comment\"># 提取最近一个储藏（储藏不被删除）</span></span><br><span class=\"line\">git stash apply</span><br><span class=\"line\"><span class=\"comment\"># 提取指定储藏（储藏不被删除）</span></span><br><span class=\"line\">git stash apply stash@&#123;2&#125;</span><br><span class=\"line\"><span class=\"comment\"># 删除指定储藏</span></span><br><span class=\"line\">git stash drop stash@&#123;0&#125;</span><br><span class=\"line\"><span class=\"comment\"># 把储藏保存为分支</span></span><br><span class=\"line\">git stash branch stash-test</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查阅操作记录\"><a href=\"#查阅操作记录\" class=\"headerlink\" title=\"查阅操作记录\"></a>查阅操作记录</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"版本写法\"><a href=\"#版本写法\" class=\"headerlink\" title=\"版本写法\"></a>版本写法</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 当前最新提交</span></span><br><span class=\"line\">git show HEAD</span><br><span class=\"line\"><span class=\"comment\"># 上一次提交</span></span><br><span class=\"line\">git show HEAD~1</span><br><span class=\"line\">git show HEAD^</span><br><span class=\"line\"><span class=\"comment\"># 上两次提交</span></span><br><span class=\"line\">git show HEAD~2</span><br><span class=\"line\">git show HEAD^^</span><br><span class=\"line\"><span class=\"comment\"># 第一次提交</span></span><br><span class=\"line\">git show HEAD@&#123;1&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 项目打包</span></span><br><span class=\"line\">git bundle create repo.bundle HEAD master</span><br></pre></td></tr></table></figure>\n\n<p>–END–</p>"},{"layout":"post","title":"入手明基 ScreenBar Plus 台灯","date":"2018-10-21T14:15:00.000Z","_content":"\n十一期间正好看到一则推荐（还真不是广告），就去天猫逛了下，觉得正合适。对于明基这个品牌，算是早有耳闻了，做工优秀，外观漂亮，关键是上档次。嗯，是非常实用。\n\n一直没有下手买台面台灯，一方面公司还能凑合有点灯光，家里也还凑合用大灯。这不赶巧，公司的管灯坏了1根，一直没人修，最后没几天不知啥情况，剩余的两根也坏了。我的工位一到下午四点就变成了夜间模式。\n\n<!-- more -->\n\n就这样，十一最后两天之内，陆续买了两个明基 Screen Plus 灯管。是的，他就是个灯管而已～\n\n此外，明基最出名的台灯系列，应该是 WiT。可能说名字你不清楚，但是如果看过晒办公桌台灯或是推荐台灯啥的文章，估计你能见到过，大弧形设计非常有特色。当然，这个系列也有落地灯。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-1.jpg-wm.white)\n\n## ScreenBar 系列\n\n按照我的惯例，先说说这个系列的产品情况。\n\n明基的显示器挂灯，目前有两款。老款的 ScreenBar 和新款的 ScreenBar Plus。这两款通过对比参数来看，除了操控方式不同外，灯体参数是完全一致的。但是新款支持自动感应功能，意味着可以一键 “AUTO” 解决光线问题。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-2.jpg-wm.white)\n\n老款 ScreenBar 操作按键在灯管中间。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-3.jpg-wm.white)\n\n而新款 ScreenBar Plus 是在电线上额外增加一个控制器。\n\n价格上，新款在 1000 元左右。老款稍微便宜 100 元左右。如果想买的话，建议买新款。老款按键在灯体上，对于大尺寸显示器（27寸）我是坐着够不到开关的。所以多一个控制器，更方便，而且带有自动感应灯光功能。\n\n## ScreenBar Plus 开箱\n\n买的东西最怕开箱。拍照太差劲，千元灯瞬间变成百元灯。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-4.jpg-wm.white)\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-5.jpg-wm.white)\n\n包装很紧，很难拽出来。背面有安装和使用说明，嗯，操作太简单了，所以根本不需要额外纸张说明。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-6.jpg-wm.white)\n\n新款 ScreenBar Plus 包含 3 大件：主灯体、灯架、带有电线的控制器。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-7.jpg-wm.white)\n\n主灯体特写。宽度 45 厘米。LED 贴片暖色/冷色交替安装。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-8.jpg-wm.white)\n\n灯架部分。配重比起灯体算是很沉了。要紧紧的挂在显示器上。前面需要卡住显示器 6 毫米左右。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-9.jpg-wm.white)\n\n控制器特写。使用 USB 供电。我的三星显示器带有 USB，直接插上就行。不带的显示器可以找个带有 USB 的插座插上。据说不能使用延长线，怕电力不足。\n\n买回来在旋钮上带有一个卡片，应该是防止搬运期间发生摩擦吧。自己可以拽出来。\n\n## ScreenBar Plus 上手\n\n由于灯体宽度已经达到了 45 厘米，所以只要你的显示器是21寸以上，基本上都不会比灯体窄。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-10.jpg-wm.white)\n\n我的三星 27 寸显示器效果\n\n挂件需要卡在显示器前面，所以为了保证卡子不遮挡屏幕，上部屏幕边框至少要有 6 毫米左右。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-11.jpg-wm.white)\n\n中间部分特写\n\n同时官方说显示器的厚度要在 1-3 厘米，但是看网上说，0.5 厘米显示器也可以的。所以我估计正常的显示器，厚度是不需要考虑的。\n\n由于仅仅是挂在中间，所以曲面显示器也不会有问题。\n\n还是要重申下。如果是带有摄像头的显示器，比如 iMac，建议关注下尺寸。前面他需要下沉 6 毫米左右。iMac 是正好的。\n\n### 操作\n\nScreenBar Plus 操作起来，非常简单。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-12.jpg-wm.white)\n\n控制器能按能显示的就这么几个：中间大旋钮，左右两个按钮，以及 2 个指示灯和一个顶部光线感应器。\n\n**开关机**\n\n直接按大旋钮。\n\n**自动模式**\n\n直接按左侧的自动调节按钮，自动模式下，按钮会有绿色边提示。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-13.gif-wm.white)\n\n调节过程中，我的感觉是光线逐步变化到最大亮度再到最小亮度，最后再变化到合适的亮度（使得桌面达到 500lx）。整个过程需要 1.5 秒左右。\n\n最上面拍的图片，拍照的照片不知道是否是色温问题，比较偏向树叶绿，实际效果比较偏向嫩绿（亮绿色），感觉带有些黄色那种绿色。\n\n**手动模式**\n\n通过按右侧的模式切换按钮，在亮度调节/色温调节切换，同时指示灯也会改变。再旋转大旋钮，调整当前的亮度/色温。\n\n只要通过大旋钮调整了亮度/色温，自动模式即被取消。\n\n## 这些天的短暂体验\n\n精巧的控制器摆放在桌面上，整洁的桌面显得有了一丝灵动，犹如一个高科技摆放在桌面上。按钮按下清脆，中间旋钮的拉丝质感也不错，旋动旋钮阻尼也比较有力道，同时按下力度（总开关功能）也不小。\n\n使用上也非常方便。使用的时候直接伸手按下大旋钮，因为是默认记录上次操作，所以不需要额外操作了。如果上次关闭前是自动模式，这次开启后，还会进行一次自动调光。\n\n不过，自动调光还是手动功能。比如当前光线一般，你开启了自动调光，他进行配置一次。一会，你关闭的其他光源，ScreenBar Plus 是不会再次帮你自动调光的，需要你按“自动调节”按钮。这个问题主要在白天长期开启的时候，上午自然光线弱，中午光线强，下午又弱了。\n\n光线上正如宣传所说，不刺眼。不像有些工作灯，要么太高直接看到灯光，要么通过显示器反光到眼睛里。它的光线沿屏幕洒下来，不会造成反光。同时也和屏幕高度差不多，即使将照射角度调整到最大，也不会照射到眼睛。这个情况当然要有限制条件，那大概就是坐姿比较正确，同时显示器在 30 寸以内左右。如果显示器高 1 米，那么怎么能不直接看到灯光呢？\n\n自从有了 ScreenBar Plus，感觉幸福感大大提升。有次，晚上一个人在办公室角落使用的时候，感觉特别安静和温馨~","source":"_posts/2018/2018-10-21-benq-screenbar-plus.md","raw":"---\nlayout: post\ntitle: 入手明基 ScreenBar Plus 台灯\ndate: 2018-10-21 14:15:00 GMT+0800\ncategories: [外设]\ntags:  [benq,screenbar]\n---\n\n十一期间正好看到一则推荐（还真不是广告），就去天猫逛了下，觉得正合适。对于明基这个品牌，算是早有耳闻了，做工优秀，外观漂亮，关键是上档次。嗯，是非常实用。\n\n一直没有下手买台面台灯，一方面公司还能凑合有点灯光，家里也还凑合用大灯。这不赶巧，公司的管灯坏了1根，一直没人修，最后没几天不知啥情况，剩余的两根也坏了。我的工位一到下午四点就变成了夜间模式。\n\n<!-- more -->\n\n就这样，十一最后两天之内，陆续买了两个明基 Screen Plus 灯管。是的，他就是个灯管而已～\n\n此外，明基最出名的台灯系列，应该是 WiT。可能说名字你不清楚，但是如果看过晒办公桌台灯或是推荐台灯啥的文章，估计你能见到过，大弧形设计非常有特色。当然，这个系列也有落地灯。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-1.jpg-wm.white)\n\n## ScreenBar 系列\n\n按照我的惯例，先说说这个系列的产品情况。\n\n明基的显示器挂灯，目前有两款。老款的 ScreenBar 和新款的 ScreenBar Plus。这两款通过对比参数来看，除了操控方式不同外，灯体参数是完全一致的。但是新款支持自动感应功能，意味着可以一键 “AUTO” 解决光线问题。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-2.jpg-wm.white)\n\n老款 ScreenBar 操作按键在灯管中间。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-3.jpg-wm.white)\n\n而新款 ScreenBar Plus 是在电线上额外增加一个控制器。\n\n价格上，新款在 1000 元左右。老款稍微便宜 100 元左右。如果想买的话，建议买新款。老款按键在灯体上，对于大尺寸显示器（27寸）我是坐着够不到开关的。所以多一个控制器，更方便，而且带有自动感应灯光功能。\n\n## ScreenBar Plus 开箱\n\n买的东西最怕开箱。拍照太差劲，千元灯瞬间变成百元灯。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-4.jpg-wm.white)\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-5.jpg-wm.white)\n\n包装很紧，很难拽出来。背面有安装和使用说明，嗯，操作太简单了，所以根本不需要额外纸张说明。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-6.jpg-wm.white)\n\n新款 ScreenBar Plus 包含 3 大件：主灯体、灯架、带有电线的控制器。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-7.jpg-wm.white)\n\n主灯体特写。宽度 45 厘米。LED 贴片暖色/冷色交替安装。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-8.jpg-wm.white)\n\n灯架部分。配重比起灯体算是很沉了。要紧紧的挂在显示器上。前面需要卡住显示器 6 毫米左右。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-9.jpg-wm.white)\n\n控制器特写。使用 USB 供电。我的三星显示器带有 USB，直接插上就行。不带的显示器可以找个带有 USB 的插座插上。据说不能使用延长线，怕电力不足。\n\n买回来在旋钮上带有一个卡片，应该是防止搬运期间发生摩擦吧。自己可以拽出来。\n\n## ScreenBar Plus 上手\n\n由于灯体宽度已经达到了 45 厘米，所以只要你的显示器是21寸以上，基本上都不会比灯体窄。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-10.jpg-wm.white)\n\n我的三星 27 寸显示器效果\n\n挂件需要卡在显示器前面，所以为了保证卡子不遮挡屏幕，上部屏幕边框至少要有 6 毫米左右。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-11.jpg-wm.white)\n\n中间部分特写\n\n同时官方说显示器的厚度要在 1-3 厘米，但是看网上说，0.5 厘米显示器也可以的。所以我估计正常的显示器，厚度是不需要考虑的。\n\n由于仅仅是挂在中间，所以曲面显示器也不会有问题。\n\n还是要重申下。如果是带有摄像头的显示器，比如 iMac，建议关注下尺寸。前面他需要下沉 6 毫米左右。iMac 是正好的。\n\n### 操作\n\nScreenBar Plus 操作起来，非常简单。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-12.jpg-wm.white)\n\n控制器能按能显示的就这么几个：中间大旋钮，左右两个按钮，以及 2 个指示灯和一个顶部光线感应器。\n\n**开关机**\n\n直接按大旋钮。\n\n**自动模式**\n\n直接按左侧的自动调节按钮，自动模式下，按钮会有绿色边提示。\n\n![img](https://cdn0.yukapril.com/blog/20181021-benq-13.gif-wm.white)\n\n调节过程中，我的感觉是光线逐步变化到最大亮度再到最小亮度，最后再变化到合适的亮度（使得桌面达到 500lx）。整个过程需要 1.5 秒左右。\n\n最上面拍的图片，拍照的照片不知道是否是色温问题，比较偏向树叶绿，实际效果比较偏向嫩绿（亮绿色），感觉带有些黄色那种绿色。\n\n**手动模式**\n\n通过按右侧的模式切换按钮，在亮度调节/色温调节切换，同时指示灯也会改变。再旋转大旋钮，调整当前的亮度/色温。\n\n只要通过大旋钮调整了亮度/色温，自动模式即被取消。\n\n## 这些天的短暂体验\n\n精巧的控制器摆放在桌面上，整洁的桌面显得有了一丝灵动，犹如一个高科技摆放在桌面上。按钮按下清脆，中间旋钮的拉丝质感也不错，旋动旋钮阻尼也比较有力道，同时按下力度（总开关功能）也不小。\n\n使用上也非常方便。使用的时候直接伸手按下大旋钮，因为是默认记录上次操作，所以不需要额外操作了。如果上次关闭前是自动模式，这次开启后，还会进行一次自动调光。\n\n不过，自动调光还是手动功能。比如当前光线一般，你开启了自动调光，他进行配置一次。一会，你关闭的其他光源，ScreenBar Plus 是不会再次帮你自动调光的，需要你按“自动调节”按钮。这个问题主要在白天长期开启的时候，上午自然光线弱，中午光线强，下午又弱了。\n\n光线上正如宣传所说，不刺眼。不像有些工作灯，要么太高直接看到灯光，要么通过显示器反光到眼睛里。它的光线沿屏幕洒下来，不会造成反光。同时也和屏幕高度差不多，即使将照射角度调整到最大，也不会照射到眼睛。这个情况当然要有限制条件，那大概就是坐姿比较正确，同时显示器在 30 寸以内左右。如果显示器高 1 米，那么怎么能不直接看到灯光呢？\n\n自从有了 ScreenBar Plus，感觉幸福感大大提升。有次，晚上一个人在办公室角落使用的时候，感觉特别安静和温馨~","slug":"2018-2018-10-21-benq-screenbar-plus","published":1,"updated":"2020-03-02T07:16:34.721Z","comments":1,"photos":[],"link":"","_id":"cka5ik8cn005knybg6smz28s1","content":"<p>十一期间正好看到一则推荐（还真不是广告），就去天猫逛了下，觉得正合适。对于明基这个品牌，算是早有耳闻了，做工优秀，外观漂亮，关键是上档次。嗯，是非常实用。</p>\n<p>一直没有下手买台面台灯，一方面公司还能凑合有点灯光，家里也还凑合用大灯。这不赶巧，公司的管灯坏了1根，一直没人修，最后没几天不知啥情况，剩余的两根也坏了。我的工位一到下午四点就变成了夜间模式。</p>\n<a id=\"more\"></a>\n\n<p>就这样，十一最后两天之内，陆续买了两个明基 Screen Plus 灯管。是的，他就是个灯管而已～</p>\n<p>此外，明基最出名的台灯系列，应该是 WiT。可能说名字你不清楚，但是如果看过晒办公桌台灯或是推荐台灯啥的文章，估计你能见到过，大弧形设计非常有特色。当然，这个系列也有落地灯。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-1.jpg-wm.white\" alt=\"img\"></p>\n<h2 id=\"ScreenBar-系列\"><a href=\"#ScreenBar-系列\" class=\"headerlink\" title=\"ScreenBar 系列\"></a>ScreenBar 系列</h2><p>按照我的惯例，先说说这个系列的产品情况。</p>\n<p>明基的显示器挂灯，目前有两款。老款的 ScreenBar 和新款的 ScreenBar Plus。这两款通过对比参数来看，除了操控方式不同外，灯体参数是完全一致的。但是新款支持自动感应功能，意味着可以一键 “AUTO” 解决光线问题。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-2.jpg-wm.white\" alt=\"img\"></p>\n<p>老款 ScreenBar 操作按键在灯管中间。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-3.jpg-wm.white\" alt=\"img\"></p>\n<p>而新款 ScreenBar Plus 是在电线上额外增加一个控制器。</p>\n<p>价格上，新款在 1000 元左右。老款稍微便宜 100 元左右。如果想买的话，建议买新款。老款按键在灯体上，对于大尺寸显示器（27寸）我是坐着够不到开关的。所以多一个控制器，更方便，而且带有自动感应灯光功能。</p>\n<h2 id=\"ScreenBar-Plus-开箱\"><a href=\"#ScreenBar-Plus-开箱\" class=\"headerlink\" title=\"ScreenBar Plus 开箱\"></a>ScreenBar Plus 开箱</h2><p>买的东西最怕开箱。拍照太差劲，千元灯瞬间变成百元灯。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-4.jpg-wm.white\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-5.jpg-wm.white\" alt=\"img\"></p>\n<p>包装很紧，很难拽出来。背面有安装和使用说明，嗯，操作太简单了，所以根本不需要额外纸张说明。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-6.jpg-wm.white\" alt=\"img\"></p>\n<p>新款 ScreenBar Plus 包含 3 大件：主灯体、灯架、带有电线的控制器。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-7.jpg-wm.white\" alt=\"img\"></p>\n<p>主灯体特写。宽度 45 厘米。LED 贴片暖色/冷色交替安装。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-8.jpg-wm.white\" alt=\"img\"></p>\n<p>灯架部分。配重比起灯体算是很沉了。要紧紧的挂在显示器上。前面需要卡住显示器 6 毫米左右。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-9.jpg-wm.white\" alt=\"img\"></p>\n<p>控制器特写。使用 USB 供电。我的三星显示器带有 USB，直接插上就行。不带的显示器可以找个带有 USB 的插座插上。据说不能使用延长线，怕电力不足。</p>\n<p>买回来在旋钮上带有一个卡片，应该是防止搬运期间发生摩擦吧。自己可以拽出来。</p>\n<h2 id=\"ScreenBar-Plus-上手\"><a href=\"#ScreenBar-Plus-上手\" class=\"headerlink\" title=\"ScreenBar Plus 上手\"></a>ScreenBar Plus 上手</h2><p>由于灯体宽度已经达到了 45 厘米，所以只要你的显示器是21寸以上，基本上都不会比灯体窄。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-10.jpg-wm.white\" alt=\"img\"></p>\n<p>我的三星 27 寸显示器效果</p>\n<p>挂件需要卡在显示器前面，所以为了保证卡子不遮挡屏幕，上部屏幕边框至少要有 6 毫米左右。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-11.jpg-wm.white\" alt=\"img\"></p>\n<p>中间部分特写</p>\n<p>同时官方说显示器的厚度要在 1-3 厘米，但是看网上说，0.5 厘米显示器也可以的。所以我估计正常的显示器，厚度是不需要考虑的。</p>\n<p>由于仅仅是挂在中间，所以曲面显示器也不会有问题。</p>\n<p>还是要重申下。如果是带有摄像头的显示器，比如 iMac，建议关注下尺寸。前面他需要下沉 6 毫米左右。iMac 是正好的。</p>\n<h3 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h3><p>ScreenBar Plus 操作起来，非常简单。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-12.jpg-wm.white\" alt=\"img\"></p>\n<p>控制器能按能显示的就这么几个：中间大旋钮，左右两个按钮，以及 2 个指示灯和一个顶部光线感应器。</p>\n<p><strong>开关机</strong></p>\n<p>直接按大旋钮。</p>\n<p><strong>自动模式</strong></p>\n<p>直接按左侧的自动调节按钮，自动模式下，按钮会有绿色边提示。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-13.gif-wm.white\" alt=\"img\"></p>\n<p>调节过程中，我的感觉是光线逐步变化到最大亮度再到最小亮度，最后再变化到合适的亮度（使得桌面达到 500lx）。整个过程需要 1.5 秒左右。</p>\n<p>最上面拍的图片，拍照的照片不知道是否是色温问题，比较偏向树叶绿，实际效果比较偏向嫩绿（亮绿色），感觉带有些黄色那种绿色。</p>\n<p><strong>手动模式</strong></p>\n<p>通过按右侧的模式切换按钮，在亮度调节/色温调节切换，同时指示灯也会改变。再旋转大旋钮，调整当前的亮度/色温。</p>\n<p>只要通过大旋钮调整了亮度/色温，自动模式即被取消。</p>\n<h2 id=\"这些天的短暂体验\"><a href=\"#这些天的短暂体验\" class=\"headerlink\" title=\"这些天的短暂体验\"></a>这些天的短暂体验</h2><p>精巧的控制器摆放在桌面上，整洁的桌面显得有了一丝灵动，犹如一个高科技摆放在桌面上。按钮按下清脆，中间旋钮的拉丝质感也不错，旋动旋钮阻尼也比较有力道，同时按下力度（总开关功能）也不小。</p>\n<p>使用上也非常方便。使用的时候直接伸手按下大旋钮，因为是默认记录上次操作，所以不需要额外操作了。如果上次关闭前是自动模式，这次开启后，还会进行一次自动调光。</p>\n<p>不过，自动调光还是手动功能。比如当前光线一般，你开启了自动调光，他进行配置一次。一会，你关闭的其他光源，ScreenBar Plus 是不会再次帮你自动调光的，需要你按“自动调节”按钮。这个问题主要在白天长期开启的时候，上午自然光线弱，中午光线强，下午又弱了。</p>\n<p>光线上正如宣传所说，不刺眼。不像有些工作灯，要么太高直接看到灯光，要么通过显示器反光到眼睛里。它的光线沿屏幕洒下来，不会造成反光。同时也和屏幕高度差不多，即使将照射角度调整到最大，也不会照射到眼睛。这个情况当然要有限制条件，那大概就是坐姿比较正确，同时显示器在 30 寸以内左右。如果显示器高 1 米，那么怎么能不直接看到灯光呢？</p>\n<p>自从有了 ScreenBar Plus，感觉幸福感大大提升。有次，晚上一个人在办公室角落使用的时候，感觉特别安静和温馨~</p>\n","site":{"data":{}},"excerpt":"<p>十一期间正好看到一则推荐（还真不是广告），就去天猫逛了下，觉得正合适。对于明基这个品牌，算是早有耳闻了，做工优秀，外观漂亮，关键是上档次。嗯，是非常实用。</p>\n<p>一直没有下手买台面台灯，一方面公司还能凑合有点灯光，家里也还凑合用大灯。这不赶巧，公司的管灯坏了1根，一直没人修，最后没几天不知啥情况，剩余的两根也坏了。我的工位一到下午四点就变成了夜间模式。</p>","more":"<p>就这样，十一最后两天之内，陆续买了两个明基 Screen Plus 灯管。是的，他就是个灯管而已～</p>\n<p>此外，明基最出名的台灯系列，应该是 WiT。可能说名字你不清楚，但是如果看过晒办公桌台灯或是推荐台灯啥的文章，估计你能见到过，大弧形设计非常有特色。当然，这个系列也有落地灯。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-1.jpg-wm.white\" alt=\"img\"></p>\n<h2 id=\"ScreenBar-系列\"><a href=\"#ScreenBar-系列\" class=\"headerlink\" title=\"ScreenBar 系列\"></a>ScreenBar 系列</h2><p>按照我的惯例，先说说这个系列的产品情况。</p>\n<p>明基的显示器挂灯，目前有两款。老款的 ScreenBar 和新款的 ScreenBar Plus。这两款通过对比参数来看，除了操控方式不同外，灯体参数是完全一致的。但是新款支持自动感应功能，意味着可以一键 “AUTO” 解决光线问题。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-2.jpg-wm.white\" alt=\"img\"></p>\n<p>老款 ScreenBar 操作按键在灯管中间。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-3.jpg-wm.white\" alt=\"img\"></p>\n<p>而新款 ScreenBar Plus 是在电线上额外增加一个控制器。</p>\n<p>价格上，新款在 1000 元左右。老款稍微便宜 100 元左右。如果想买的话，建议买新款。老款按键在灯体上，对于大尺寸显示器（27寸）我是坐着够不到开关的。所以多一个控制器，更方便，而且带有自动感应灯光功能。</p>\n<h2 id=\"ScreenBar-Plus-开箱\"><a href=\"#ScreenBar-Plus-开箱\" class=\"headerlink\" title=\"ScreenBar Plus 开箱\"></a>ScreenBar Plus 开箱</h2><p>买的东西最怕开箱。拍照太差劲，千元灯瞬间变成百元灯。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-4.jpg-wm.white\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-5.jpg-wm.white\" alt=\"img\"></p>\n<p>包装很紧，很难拽出来。背面有安装和使用说明，嗯，操作太简单了，所以根本不需要额外纸张说明。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-6.jpg-wm.white\" alt=\"img\"></p>\n<p>新款 ScreenBar Plus 包含 3 大件：主灯体、灯架、带有电线的控制器。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-7.jpg-wm.white\" alt=\"img\"></p>\n<p>主灯体特写。宽度 45 厘米。LED 贴片暖色/冷色交替安装。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-8.jpg-wm.white\" alt=\"img\"></p>\n<p>灯架部分。配重比起灯体算是很沉了。要紧紧的挂在显示器上。前面需要卡住显示器 6 毫米左右。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-9.jpg-wm.white\" alt=\"img\"></p>\n<p>控制器特写。使用 USB 供电。我的三星显示器带有 USB，直接插上就行。不带的显示器可以找个带有 USB 的插座插上。据说不能使用延长线，怕电力不足。</p>\n<p>买回来在旋钮上带有一个卡片，应该是防止搬运期间发生摩擦吧。自己可以拽出来。</p>\n<h2 id=\"ScreenBar-Plus-上手\"><a href=\"#ScreenBar-Plus-上手\" class=\"headerlink\" title=\"ScreenBar Plus 上手\"></a>ScreenBar Plus 上手</h2><p>由于灯体宽度已经达到了 45 厘米，所以只要你的显示器是21寸以上，基本上都不会比灯体窄。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-10.jpg-wm.white\" alt=\"img\"></p>\n<p>我的三星 27 寸显示器效果</p>\n<p>挂件需要卡在显示器前面，所以为了保证卡子不遮挡屏幕，上部屏幕边框至少要有 6 毫米左右。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-11.jpg-wm.white\" alt=\"img\"></p>\n<p>中间部分特写</p>\n<p>同时官方说显示器的厚度要在 1-3 厘米，但是看网上说，0.5 厘米显示器也可以的。所以我估计正常的显示器，厚度是不需要考虑的。</p>\n<p>由于仅仅是挂在中间，所以曲面显示器也不会有问题。</p>\n<p>还是要重申下。如果是带有摄像头的显示器，比如 iMac，建议关注下尺寸。前面他需要下沉 6 毫米左右。iMac 是正好的。</p>\n<h3 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h3><p>ScreenBar Plus 操作起来，非常简单。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-12.jpg-wm.white\" alt=\"img\"></p>\n<p>控制器能按能显示的就这么几个：中间大旋钮，左右两个按钮，以及 2 个指示灯和一个顶部光线感应器。</p>\n<p><strong>开关机</strong></p>\n<p>直接按大旋钮。</p>\n<p><strong>自动模式</strong></p>\n<p>直接按左侧的自动调节按钮，自动模式下，按钮会有绿色边提示。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/20181021-benq-13.gif-wm.white\" alt=\"img\"></p>\n<p>调节过程中，我的感觉是光线逐步变化到最大亮度再到最小亮度，最后再变化到合适的亮度（使得桌面达到 500lx）。整个过程需要 1.5 秒左右。</p>\n<p>最上面拍的图片，拍照的照片不知道是否是色温问题，比较偏向树叶绿，实际效果比较偏向嫩绿（亮绿色），感觉带有些黄色那种绿色。</p>\n<p><strong>手动模式</strong></p>\n<p>通过按右侧的模式切换按钮，在亮度调节/色温调节切换，同时指示灯也会改变。再旋转大旋钮，调整当前的亮度/色温。</p>\n<p>只要通过大旋钮调整了亮度/色温，自动模式即被取消。</p>\n<h2 id=\"这些天的短暂体验\"><a href=\"#这些天的短暂体验\" class=\"headerlink\" title=\"这些天的短暂体验\"></a>这些天的短暂体验</h2><p>精巧的控制器摆放在桌面上，整洁的桌面显得有了一丝灵动，犹如一个高科技摆放在桌面上。按钮按下清脆，中间旋钮的拉丝质感也不错，旋动旋钮阻尼也比较有力道，同时按下力度（总开关功能）也不小。</p>\n<p>使用上也非常方便。使用的时候直接伸手按下大旋钮，因为是默认记录上次操作，所以不需要额外操作了。如果上次关闭前是自动模式，这次开启后，还会进行一次自动调光。</p>\n<p>不过，自动调光还是手动功能。比如当前光线一般，你开启了自动调光，他进行配置一次。一会，你关闭的其他光源，ScreenBar Plus 是不会再次帮你自动调光的，需要你按“自动调节”按钮。这个问题主要在白天长期开启的时候，上午自然光线弱，中午光线强，下午又弱了。</p>\n<p>光线上正如宣传所说，不刺眼。不像有些工作灯，要么太高直接看到灯光，要么通过显示器反光到眼睛里。它的光线沿屏幕洒下来，不会造成反光。同时也和屏幕高度差不多，即使将照射角度调整到最大，也不会照射到眼睛。这个情况当然要有限制条件，那大概就是坐姿比较正确，同时显示器在 30 寸以内左右。如果显示器高 1 米，那么怎么能不直接看到灯光呢？</p>\n<p>自从有了 ScreenBar Plus，感觉幸福感大大提升。有次，晚上一个人在办公室角落使用的时候，感觉特别安静和温馨~</p>"},{"layout":"post","title":"webpack3 升级 4 采坑记","date":"2018-11-06T22:16:00.000Z","_content":"\n公司的项目，最早是用 ES6 写的，直接手写 webpack1 进行打包的。由于是 jsp 的页面，还做了单独的页面压缩，资源 hash 处理。后续也跟上了一些升级脚步，把webpack 逐步升级到 2，之后又是 3。现在看来也算是先见之明。\n\n在后续业务中，逐步使用了 vue，使用 vue 主要是考虑到能够通过 cdn 等形式直接引入项目，省去了 webpack 的配置工作。现在同一个项目，后续我决定采用 react 进行开发，对原有项目进行了 3 次重构，终于把老代码独立到一个文件夹了，未来 react 的新代码可以在单独的文件夹下开发。最终发包时候合并在一起。\n\n对于 react 我还是比较积极的，版本上从 16.5 直接更新到了 16.6。为了后续方便，也就筹划着把 webpack 升级到 4。\n\n<!-- more -->\n\n### webpack 升级\n\nwebpack 主包升级到 4之后，主要有一点，需要单独安装 `webpack-cli` 了。\n\n```\nyarn add -D webpack-cli\n```\n\n安装完毕之后，直接启动，果不然报错。\n\n### extract-text-webpack-plugin\n\n由于是夜里升级，当时没有相关记录。大致报错是 hooks 错误。\n\n这个处理 css 的插件，一直没有更新主版本，所以默认版本不能兼容 webpack4，需要安装 next 版本。\n\n```\nyarn add -D extract-text-webpack-plugin@next\n```\n\n### webpack 配置\n\n`webpack.optimize.CommonsChunkPlugin` 已经移除了，需要换成 `optimization.splitChunks`：\n\n```js\n{\n  optimization: {\n    splitChunks: {\n      chunks: 'all',\n      minChunks: 3,\n      name: 'commons'\n    }\n  }\n}\n```\n\n因为我们是手动往 jsp 页面插入资源文件，所以不方便用智能拆包。而且为了兼容之前的方案，就统一打包到 `commons.js` 中了。\n\n### 移除不再使用的东西\n\n`uglifyjs-webpack-plugin` 不在需要了，新版webpack 配置文件中，加入生产模式，自动压缩代码\n\n```js\n{\n  mode: 'production'\n}\n```\n\n同样的，不需要再设置 `ENV` 了：\n\n```js\nnew webpack.DefinePlugin({\n  'process.env': {\n    'NODE_ENV': JSON.stringify('production')\n  }\n})\n```\n\n还有一个不知道用途的插件，也被提示要求移除：\n\n```js\nnew webpack.optimize.AggressiveMergingPlugin()\n```\n\n### babel 系列\n\n之前 babel 的包，是这样子风格的 `babel-core`，新包已经变成 `@babel/core` 了。改成了私有前缀下的子包形式了。\n\n所以，需要重新安装包：\n\n```\nyarn add -D @babel/core @babel/preset-env @babel/preset-react\n```\n\n由于我用了 react 的一个实验性质语法，原本用的 stage-0，新版 babel 不再支持 stage-0 这种包了。所以需要改为手动安装。\n\nbabel 提供了一个工具， `npx babel-update`，但是这个工具没能成功修复 `package.json` 文件，仅仅在控制台回显了那些行需要删除，需要新增那些行。\n\npresets 写法也有一点变化，不能简写了。最后 webpack 配置文件中规则如下：\n```js\n{\n  test: /\\.jsx?$/,\n  exclude: /node_modules/,\n  use: [{\n    loader: 'babel-loader',\n    query: {\n      presets: [\n        ['@babel/preset-env', { 'modules': false }],\n        '@babel/preset-react',\n      ],\n      plugins: [\n        '@babel/plugin-proposal-class-properties'\n      ]\n    }\n  }]\n}\n```\n\n\n### 自动 polyfill\n\n最后，我发现了了一个好东西。浏览器访问资源，自动根据 useragent 返回需要的 polyfill。\n\n项目地址：[https://polyfill.io](https://polyfill.io)\n\n这样所有资源都不需要关系 polyfill 了。\n\n### 后续的开发思考\n\n所有的重量级资源，均采用 cdn 等形式引入，不再进行 webpack 打包了。这样自己打包速度快，也省去了引用资源增加导致 `commons.js` 变化。\n\n配置大致如下：\n\n```js\n{\n  externals: {\n    react: 'React',\n    'react-dom': 'ReactDOM'\n  }\n}\n```\n\n当然如果是 lodash 之类的，可以按功能进行 tree shake 的，还是可以打包到 `commons.js` 中的。\n\n--END--\n\n","source":"_posts/2018/2018-11-06-webpack.md","raw":"---\nlayout: post\ntitle: webpack3 升级 4 采坑记\ndate: 2018-11-06 22:16:00 GMT+0800\ncategories: [前端]\ntags:  [webpack,babel,react]\n---\n\n公司的项目，最早是用 ES6 写的，直接手写 webpack1 进行打包的。由于是 jsp 的页面，还做了单独的页面压缩，资源 hash 处理。后续也跟上了一些升级脚步，把webpack 逐步升级到 2，之后又是 3。现在看来也算是先见之明。\n\n在后续业务中，逐步使用了 vue，使用 vue 主要是考虑到能够通过 cdn 等形式直接引入项目，省去了 webpack 的配置工作。现在同一个项目，后续我决定采用 react 进行开发，对原有项目进行了 3 次重构，终于把老代码独立到一个文件夹了，未来 react 的新代码可以在单独的文件夹下开发。最终发包时候合并在一起。\n\n对于 react 我还是比较积极的，版本上从 16.5 直接更新到了 16.6。为了后续方便，也就筹划着把 webpack 升级到 4。\n\n<!-- more -->\n\n### webpack 升级\n\nwebpack 主包升级到 4之后，主要有一点，需要单独安装 `webpack-cli` 了。\n\n```\nyarn add -D webpack-cli\n```\n\n安装完毕之后，直接启动，果不然报错。\n\n### extract-text-webpack-plugin\n\n由于是夜里升级，当时没有相关记录。大致报错是 hooks 错误。\n\n这个处理 css 的插件，一直没有更新主版本，所以默认版本不能兼容 webpack4，需要安装 next 版本。\n\n```\nyarn add -D extract-text-webpack-plugin@next\n```\n\n### webpack 配置\n\n`webpack.optimize.CommonsChunkPlugin` 已经移除了，需要换成 `optimization.splitChunks`：\n\n```js\n{\n  optimization: {\n    splitChunks: {\n      chunks: 'all',\n      minChunks: 3,\n      name: 'commons'\n    }\n  }\n}\n```\n\n因为我们是手动往 jsp 页面插入资源文件，所以不方便用智能拆包。而且为了兼容之前的方案，就统一打包到 `commons.js` 中了。\n\n### 移除不再使用的东西\n\n`uglifyjs-webpack-plugin` 不在需要了，新版webpack 配置文件中，加入生产模式，自动压缩代码\n\n```js\n{\n  mode: 'production'\n}\n```\n\n同样的，不需要再设置 `ENV` 了：\n\n```js\nnew webpack.DefinePlugin({\n  'process.env': {\n    'NODE_ENV': JSON.stringify('production')\n  }\n})\n```\n\n还有一个不知道用途的插件，也被提示要求移除：\n\n```js\nnew webpack.optimize.AggressiveMergingPlugin()\n```\n\n### babel 系列\n\n之前 babel 的包，是这样子风格的 `babel-core`，新包已经变成 `@babel/core` 了。改成了私有前缀下的子包形式了。\n\n所以，需要重新安装包：\n\n```\nyarn add -D @babel/core @babel/preset-env @babel/preset-react\n```\n\n由于我用了 react 的一个实验性质语法，原本用的 stage-0，新版 babel 不再支持 stage-0 这种包了。所以需要改为手动安装。\n\nbabel 提供了一个工具， `npx babel-update`，但是这个工具没能成功修复 `package.json` 文件，仅仅在控制台回显了那些行需要删除，需要新增那些行。\n\npresets 写法也有一点变化，不能简写了。最后 webpack 配置文件中规则如下：\n```js\n{\n  test: /\\.jsx?$/,\n  exclude: /node_modules/,\n  use: [{\n    loader: 'babel-loader',\n    query: {\n      presets: [\n        ['@babel/preset-env', { 'modules': false }],\n        '@babel/preset-react',\n      ],\n      plugins: [\n        '@babel/plugin-proposal-class-properties'\n      ]\n    }\n  }]\n}\n```\n\n\n### 自动 polyfill\n\n最后，我发现了了一个好东西。浏览器访问资源，自动根据 useragent 返回需要的 polyfill。\n\n项目地址：[https://polyfill.io](https://polyfill.io)\n\n这样所有资源都不需要关系 polyfill 了。\n\n### 后续的开发思考\n\n所有的重量级资源，均采用 cdn 等形式引入，不再进行 webpack 打包了。这样自己打包速度快，也省去了引用资源增加导致 `commons.js` 变化。\n\n配置大致如下：\n\n```js\n{\n  externals: {\n    react: 'React',\n    'react-dom': 'ReactDOM'\n  }\n}\n```\n\n当然如果是 lodash 之类的，可以按功能进行 tree shake 的，还是可以打包到 `commons.js` 中的。\n\n--END--\n\n","slug":"2018-2018-11-06-webpack","published":1,"updated":"2020-03-02T07:16:34.721Z","comments":1,"photos":[],"link":"","_id":"cka5ik8co005nnybg27tc77t6","content":"<p>公司的项目，最早是用 ES6 写的，直接手写 webpack1 进行打包的。由于是 jsp 的页面，还做了单独的页面压缩，资源 hash 处理。后续也跟上了一些升级脚步，把webpack 逐步升级到 2，之后又是 3。现在看来也算是先见之明。</p>\n<p>在后续业务中，逐步使用了 vue，使用 vue 主要是考虑到能够通过 cdn 等形式直接引入项目，省去了 webpack 的配置工作。现在同一个项目，后续我决定采用 react 进行开发，对原有项目进行了 3 次重构，终于把老代码独立到一个文件夹了，未来 react 的新代码可以在单独的文件夹下开发。最终发包时候合并在一起。</p>\n<p>对于 react 我还是比较积极的，版本上从 16.5 直接更新到了 16.6。为了后续方便，也就筹划着把 webpack 升级到 4。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"webpack-升级\"><a href=\"#webpack-升级\" class=\"headerlink\" title=\"webpack 升级\"></a>webpack 升级</h3><p>webpack 主包升级到 4之后，主要有一点，需要单独安装 <code>webpack-cli</code> 了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add -D webpack-cli</span><br></pre></td></tr></table></figure>\n\n<p>安装完毕之后，直接启动，果不然报错。</p>\n<h3 id=\"extract-text-webpack-plugin\"><a href=\"#extract-text-webpack-plugin\" class=\"headerlink\" title=\"extract-text-webpack-plugin\"></a>extract-text-webpack-plugin</h3><p>由于是夜里升级，当时没有相关记录。大致报错是 hooks 错误。</p>\n<p>这个处理 css 的插件，一直没有更新主版本，所以默认版本不能兼容 webpack4，需要安装 next 版本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add -D extract-text-webpack-plugin@next</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"webpack-配置\"><a href=\"#webpack-配置\" class=\"headerlink\" title=\"webpack 配置\"></a>webpack 配置</h3><p><code>webpack.optimize.CommonsChunkPlugin</code> 已经移除了，需要换成 <code>optimization.splitChunks</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      chunks: <span class=\"string\">'all'</span>,</span><br><span class=\"line\">      minChunks: <span class=\"number\">3</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'commons'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为我们是手动往 jsp 页面插入资源文件，所以不方便用智能拆包。而且为了兼容之前的方案，就统一打包到 <code>commons.js</code> 中了。</p>\n<h3 id=\"移除不再使用的东西\"><a href=\"#移除不再使用的东西\" class=\"headerlink\" title=\"移除不再使用的东西\"></a>移除不再使用的东西</h3><p><code>uglifyjs-webpack-plugin</code> 不在需要了，新版webpack 配置文件中，加入生产模式，自动压缩代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'production'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同样的，不需要再设置 <code>ENV</code> 了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">  <span class=\"string\">'process.env'</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">'NODE_ENV'</span>: <span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">'production'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>还有一个不知道用途的插件，也被提示要求移除：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> webpack.optimize.AggressiveMergingPlugin()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"babel-系列\"><a href=\"#babel-系列\" class=\"headerlink\" title=\"babel 系列\"></a>babel 系列</h3><p>之前 babel 的包，是这样子风格的 <code>babel-core</code>，新包已经变成 <code>@babel/core</code> 了。改成了私有前缀下的子包形式了。</p>\n<p>所以，需要重新安装包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add -D @babel/core @babel/preset-env @babel/preset-react</span><br></pre></td></tr></table></figure>\n\n<p>由于我用了 react 的一个实验性质语法，原本用的 stage-0，新版 babel 不再支持 stage-0 这种包了。所以需要改为手动安装。</p>\n<p>babel 提供了一个工具， <code>npx babel-update</code>，但是这个工具没能成功修复 <code>package.json</code> 文件，仅仅在控制台回显了那些行需要删除，需要新增那些行。</p>\n<p>presets 写法也有一点变化，不能简写了。最后 webpack 配置文件中规则如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: <span class=\"regexp\">/\\.jsx?$/</span>,</span><br><span class=\"line\">  exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">  use: [&#123;</span><br><span class=\"line\">    loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">    query: &#123;</span><br><span class=\"line\">      presets: [</span><br><span class=\"line\">        [<span class=\"string\">'@babel/preset-env'</span>, &#123; <span class=\"string\">'modules'</span>: <span class=\"literal\">false</span> &#125;],</span><br><span class=\"line\">        <span class=\"string\">'@babel/preset-react'</span>,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      plugins: [</span><br><span class=\"line\">        <span class=\"string\">'@babel/plugin-proposal-class-properties'</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自动-polyfill\"><a href=\"#自动-polyfill\" class=\"headerlink\" title=\"自动 polyfill\"></a>自动 polyfill</h3><p>最后，我发现了了一个好东西。浏览器访问资源，自动根据 useragent 返回需要的 polyfill。</p>\n<p>项目地址：<a href=\"https://polyfill.io\" target=\"_blank\" rel=\"noopener\">https://polyfill.io</a></p>\n<p>这样所有资源都不需要关系 polyfill 了。</p>\n<h3 id=\"后续的开发思考\"><a href=\"#后续的开发思考\" class=\"headerlink\" title=\"后续的开发思考\"></a>后续的开发思考</h3><p>所有的重量级资源，均采用 cdn 等形式引入，不再进行 webpack 打包了。这样自己打包速度快，也省去了引用资源增加导致 <code>commons.js</code> 变化。</p>\n<p>配置大致如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  externals: &#123;</span><br><span class=\"line\">    react: <span class=\"string\">'React'</span>,</span><br><span class=\"line\">    <span class=\"string\">'react-dom'</span>: <span class=\"string\">'ReactDOM'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然如果是 lodash 之类的，可以按功能进行 tree shake 的，还是可以打包到 <code>commons.js</code> 中的。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>公司的项目，最早是用 ES6 写的，直接手写 webpack1 进行打包的。由于是 jsp 的页面，还做了单独的页面压缩，资源 hash 处理。后续也跟上了一些升级脚步，把webpack 逐步升级到 2，之后又是 3。现在看来也算是先见之明。</p>\n<p>在后续业务中，逐步使用了 vue，使用 vue 主要是考虑到能够通过 cdn 等形式直接引入项目，省去了 webpack 的配置工作。现在同一个项目，后续我决定采用 react 进行开发，对原有项目进行了 3 次重构，终于把老代码独立到一个文件夹了，未来 react 的新代码可以在单独的文件夹下开发。最终发包时候合并在一起。</p>\n<p>对于 react 我还是比较积极的，版本上从 16.5 直接更新到了 16.6。为了后续方便，也就筹划着把 webpack 升级到 4。</p>","more":"<h3 id=\"webpack-升级\"><a href=\"#webpack-升级\" class=\"headerlink\" title=\"webpack 升级\"></a>webpack 升级</h3><p>webpack 主包升级到 4之后，主要有一点，需要单独安装 <code>webpack-cli</code> 了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add -D webpack-cli</span><br></pre></td></tr></table></figure>\n\n<p>安装完毕之后，直接启动，果不然报错。</p>\n<h3 id=\"extract-text-webpack-plugin\"><a href=\"#extract-text-webpack-plugin\" class=\"headerlink\" title=\"extract-text-webpack-plugin\"></a>extract-text-webpack-plugin</h3><p>由于是夜里升级，当时没有相关记录。大致报错是 hooks 错误。</p>\n<p>这个处理 css 的插件，一直没有更新主版本，所以默认版本不能兼容 webpack4，需要安装 next 版本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add -D extract-text-webpack-plugin@next</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"webpack-配置\"><a href=\"#webpack-配置\" class=\"headerlink\" title=\"webpack 配置\"></a>webpack 配置</h3><p><code>webpack.optimize.CommonsChunkPlugin</code> 已经移除了，需要换成 <code>optimization.splitChunks</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      chunks: <span class=\"string\">'all'</span>,</span><br><span class=\"line\">      minChunks: <span class=\"number\">3</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'commons'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为我们是手动往 jsp 页面插入资源文件，所以不方便用智能拆包。而且为了兼容之前的方案，就统一打包到 <code>commons.js</code> 中了。</p>\n<h3 id=\"移除不再使用的东西\"><a href=\"#移除不再使用的东西\" class=\"headerlink\" title=\"移除不再使用的东西\"></a>移除不再使用的东西</h3><p><code>uglifyjs-webpack-plugin</code> 不在需要了，新版webpack 配置文件中，加入生产模式，自动压缩代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'production'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同样的，不需要再设置 <code>ENV</code> 了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">  <span class=\"string\">'process.env'</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">'NODE_ENV'</span>: <span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">'production'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>还有一个不知道用途的插件，也被提示要求移除：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> webpack.optimize.AggressiveMergingPlugin()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"babel-系列\"><a href=\"#babel-系列\" class=\"headerlink\" title=\"babel 系列\"></a>babel 系列</h3><p>之前 babel 的包，是这样子风格的 <code>babel-core</code>，新包已经变成 <code>@babel/core</code> 了。改成了私有前缀下的子包形式了。</p>\n<p>所以，需要重新安装包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add -D @babel/core @babel/preset-env @babel/preset-react</span><br></pre></td></tr></table></figure>\n\n<p>由于我用了 react 的一个实验性质语法，原本用的 stage-0，新版 babel 不再支持 stage-0 这种包了。所以需要改为手动安装。</p>\n<p>babel 提供了一个工具， <code>npx babel-update</code>，但是这个工具没能成功修复 <code>package.json</code> 文件，仅仅在控制台回显了那些行需要删除，需要新增那些行。</p>\n<p>presets 写法也有一点变化，不能简写了。最后 webpack 配置文件中规则如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: <span class=\"regexp\">/\\.jsx?$/</span>,</span><br><span class=\"line\">  exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">  use: [&#123;</span><br><span class=\"line\">    loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">    query: &#123;</span><br><span class=\"line\">      presets: [</span><br><span class=\"line\">        [<span class=\"string\">'@babel/preset-env'</span>, &#123; <span class=\"string\">'modules'</span>: <span class=\"literal\">false</span> &#125;],</span><br><span class=\"line\">        <span class=\"string\">'@babel/preset-react'</span>,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      plugins: [</span><br><span class=\"line\">        <span class=\"string\">'@babel/plugin-proposal-class-properties'</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自动-polyfill\"><a href=\"#自动-polyfill\" class=\"headerlink\" title=\"自动 polyfill\"></a>自动 polyfill</h3><p>最后，我发现了了一个好东西。浏览器访问资源，自动根据 useragent 返回需要的 polyfill。</p>\n<p>项目地址：<a href=\"https://polyfill.io\" target=\"_blank\" rel=\"noopener\">https://polyfill.io</a></p>\n<p>这样所有资源都不需要关系 polyfill 了。</p>\n<h3 id=\"后续的开发思考\"><a href=\"#后续的开发思考\" class=\"headerlink\" title=\"后续的开发思考\"></a>后续的开发思考</h3><p>所有的重量级资源，均采用 cdn 等形式引入，不再进行 webpack 打包了。这样自己打包速度快，也省去了引用资源增加导致 <code>commons.js</code> 变化。</p>\n<p>配置大致如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  externals: &#123;</span><br><span class=\"line\">    react: <span class=\"string\">'React'</span>,</span><br><span class=\"line\">    <span class=\"string\">'react-dom'</span>: <span class=\"string\">'ReactDOM'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然如果是 lodash 之类的，可以按功能进行 tree shake 的，还是可以打包到 <code>commons.js</code> 中的。</p>\n<p>–END–</p>"},{"layout":"post","title":"iOS safari 后退 js 不执行的问题","date":"2018-11-21T21:36:00.000Z","_content":"\n今天偶遇一个问题：iOS 10 safari 浏览器中，后退后，页面 js 没有运行。\n\n之前也遇到过这个问题，因为加入风控的代码，就好了。就没有深究。这次发现，风控的代码不好使了😂。也可能是这次 iOS 版本问题，之前没有测试过 iOS 10 系统。\n\n<!-- more -->\n\n网上搜索之，整理方案如下：\n\n```js\nwindow.onpageshow = function (e) {\n  var isIos = function () {\n    var ua = window.navigator.userAgent\n    return /iphone|ipad|ipod/i.test(ua)\n  }\n  if (isIos() && e.persisted) {\n    window.location.reload(true)\n  }\n}\n```\n\n简单来说，通过监听 `pageshow` 事件，判断 `event.persisted` 当前页面是否是读取缓存，来决定是否进行刷新。上面代码放置在公共 js 里，全站后退问题均可解决。\n\n不过这样做有个小问题，页面先进行了后退，显示了历史数据，然后 js 执行了页面刷新，看到了浏览器进度条。由于服务器及网络原因，需要几秒时间。\n\n这个刷新动作能不能优化呢？我认为还是有空间的。比如有的页面，明确就是需要刷新某一个接口数据即可。\n\n那么我们可以对其进行调整，比如执行全局方法 `historyBack`，根据返回值来决定是否进行全页面刷新。\n\n```js\n// 全局代码\nwindow.onpageshow = function (e) {\n  var isIos = function () {\n    var ua = window.navigator.userAgent\n    return /iphone|ipad|ipod/i.test(ua)\n  }\n  if (isIos() && e.persisted) {\n    var cb = window.historyBack\n    if(typeof cb === 'function') {\n      if(cb()) {\n        window.location.reload(true)        \n      }\n    } else {\n      window.location.reload(true)\n    }\n  }\n}\n```\n\n```js\n// 页面代码\nvar page = {\n  getData: function() {\n    ajax().then(function(json){\n      this.render(json)\n    })\n  },\n  render: function(){},\n  init: function(){ this.getData() }\n}\npage.init()\n\nwindow.historyBack = function() {\n  page.getData()\n  return false // 阻止全局刷新\n}\n```\n这样是我目前能想到的比较好的处理方法。可以全局配置默认强制刷新代码，每个页面也支持自定义刷新方案。代码量还不算太多。\n\n--END--\n","source":"_posts/2018/2018-11-21-ios-history-back.md","raw":"---\nlayout: post\ntitle: iOS safari 后退 js 不执行的问题\ndate: 2018-11-21 21:36:00 GMT+0800\ncategories: [前端]\ntags:  [ios, safari, history, 后退]\n---\n\n今天偶遇一个问题：iOS 10 safari 浏览器中，后退后，页面 js 没有运行。\n\n之前也遇到过这个问题，因为加入风控的代码，就好了。就没有深究。这次发现，风控的代码不好使了😂。也可能是这次 iOS 版本问题，之前没有测试过 iOS 10 系统。\n\n<!-- more -->\n\n网上搜索之，整理方案如下：\n\n```js\nwindow.onpageshow = function (e) {\n  var isIos = function () {\n    var ua = window.navigator.userAgent\n    return /iphone|ipad|ipod/i.test(ua)\n  }\n  if (isIos() && e.persisted) {\n    window.location.reload(true)\n  }\n}\n```\n\n简单来说，通过监听 `pageshow` 事件，判断 `event.persisted` 当前页面是否是读取缓存，来决定是否进行刷新。上面代码放置在公共 js 里，全站后退问题均可解决。\n\n不过这样做有个小问题，页面先进行了后退，显示了历史数据，然后 js 执行了页面刷新，看到了浏览器进度条。由于服务器及网络原因，需要几秒时间。\n\n这个刷新动作能不能优化呢？我认为还是有空间的。比如有的页面，明确就是需要刷新某一个接口数据即可。\n\n那么我们可以对其进行调整，比如执行全局方法 `historyBack`，根据返回值来决定是否进行全页面刷新。\n\n```js\n// 全局代码\nwindow.onpageshow = function (e) {\n  var isIos = function () {\n    var ua = window.navigator.userAgent\n    return /iphone|ipad|ipod/i.test(ua)\n  }\n  if (isIos() && e.persisted) {\n    var cb = window.historyBack\n    if(typeof cb === 'function') {\n      if(cb()) {\n        window.location.reload(true)        \n      }\n    } else {\n      window.location.reload(true)\n    }\n  }\n}\n```\n\n```js\n// 页面代码\nvar page = {\n  getData: function() {\n    ajax().then(function(json){\n      this.render(json)\n    })\n  },\n  render: function(){},\n  init: function(){ this.getData() }\n}\npage.init()\n\nwindow.historyBack = function() {\n  page.getData()\n  return false // 阻止全局刷新\n}\n```\n这样是我目前能想到的比较好的处理方法。可以全局配置默认强制刷新代码，每个页面也支持自定义刷新方案。代码量还不算太多。\n\n--END--\n","slug":"2018-2018-11-21-ios-history-back","published":1,"updated":"2020-03-02T07:16:34.734Z","comments":1,"photos":[],"link":"","_id":"cka5ik8cp005qnybgkox9r83e","content":"<p>今天偶遇一个问题：iOS 10 safari 浏览器中，后退后，页面 js 没有运行。</p>\n<p>之前也遇到过这个问题，因为加入风控的代码，就好了。就没有深究。这次发现，风控的代码不好使了😂。也可能是这次 iOS 版本问题，之前没有测试过 iOS 10 系统。</p>\n<a id=\"more\"></a>\n\n<p>网上搜索之，整理方案如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onpageshow = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> isIos = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ua = <span class=\"built_in\">window</span>.navigator.userAgent</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"regexp\">/iphone|ipad|ipod/i</span>.test(ua)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isIos() &amp;&amp; e.persisted) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.location.reload(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单来说，通过监听 <code>pageshow</code> 事件，判断 <code>event.persisted</code> 当前页面是否是读取缓存，来决定是否进行刷新。上面代码放置在公共 js 里，全站后退问题均可解决。</p>\n<p>不过这样做有个小问题，页面先进行了后退，显示了历史数据，然后 js 执行了页面刷新，看到了浏览器进度条。由于服务器及网络原因，需要几秒时间。</p>\n<p>这个刷新动作能不能优化呢？我认为还是有空间的。比如有的页面，明确就是需要刷新某一个接口数据即可。</p>\n<p>那么我们可以对其进行调整，比如执行全局方法 <code>historyBack</code>，根据返回值来决定是否进行全页面刷新。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全局代码</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onpageshow = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> isIos = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ua = <span class=\"built_in\">window</span>.navigator.userAgent</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"regexp\">/iphone|ipad|ipod/i</span>.test(ua)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isIos() &amp;&amp; e.persisted) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cb = <span class=\"built_in\">window</span>.historyBack</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> cb === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(cb()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.location.reload(<span class=\"literal\">true</span>)        </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.location.reload(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 页面代码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> page = &#123;</span><br><span class=\"line\">  getData: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    ajax().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.render(json)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</span><br><span class=\"line\">  init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">this</span>.getData() &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">page.init()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.historyBack = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  page.getData()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"comment\">// 阻止全局刷新</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样是我目前能想到的比较好的处理方法。可以全局配置默认强制刷新代码，每个页面也支持自定义刷新方案。代码量还不算太多。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>今天偶遇一个问题：iOS 10 safari 浏览器中，后退后，页面 js 没有运行。</p>\n<p>之前也遇到过这个问题，因为加入风控的代码，就好了。就没有深究。这次发现，风控的代码不好使了😂。也可能是这次 iOS 版本问题，之前没有测试过 iOS 10 系统。</p>","more":"<p>网上搜索之，整理方案如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onpageshow = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> isIos = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ua = <span class=\"built_in\">window</span>.navigator.userAgent</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"regexp\">/iphone|ipad|ipod/i</span>.test(ua)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isIos() &amp;&amp; e.persisted) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.location.reload(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单来说，通过监听 <code>pageshow</code> 事件，判断 <code>event.persisted</code> 当前页面是否是读取缓存，来决定是否进行刷新。上面代码放置在公共 js 里，全站后退问题均可解决。</p>\n<p>不过这样做有个小问题，页面先进行了后退，显示了历史数据，然后 js 执行了页面刷新，看到了浏览器进度条。由于服务器及网络原因，需要几秒时间。</p>\n<p>这个刷新动作能不能优化呢？我认为还是有空间的。比如有的页面，明确就是需要刷新某一个接口数据即可。</p>\n<p>那么我们可以对其进行调整，比如执行全局方法 <code>historyBack</code>，根据返回值来决定是否进行全页面刷新。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全局代码</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onpageshow = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> isIos = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ua = <span class=\"built_in\">window</span>.navigator.userAgent</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"regexp\">/iphone|ipad|ipod/i</span>.test(ua)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isIos() &amp;&amp; e.persisted) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cb = <span class=\"built_in\">window</span>.historyBack</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> cb === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(cb()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.location.reload(<span class=\"literal\">true</span>)        </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.location.reload(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 页面代码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> page = &#123;</span><br><span class=\"line\">  getData: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    ajax().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.render(json)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</span><br><span class=\"line\">  init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">this</span>.getData() &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">page.init()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.historyBack = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  page.getData()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"comment\">// 阻止全局刷新</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样是我目前能想到的比较好的处理方法。可以全局配置默认强制刷新代码，每个页面也支持自定义刷新方案。代码量还不算太多。</p>\n<p>–END–</p>"},{"layout":"post","title":"Yarn的安装与升级","date":"2018-11-18T13:06:00.000Z","_content":"\n平时在 windows 和 MacOS 下做开发，需要在两个系统中安装 yarn，可是每次 windows 都可以方便的更新，而 MacOS 却难难升级。特此记录下升级方案。\n\n<!-- more -->\n\n## windows \n\nwindows 比较容易，不论安装还是升级，都可以直接下载 MSI 安装包即可。\n\n官网下载地址：\n\n```\nhttps://yarnpkg.com/latest.msi\n```\n\n也可以访问 github releases 页，下载地址：\n\n```\nhttps://github.com/yarnpkg/yarn/releases\n```\n\n## macOS\n\n苹果看似容易，其实还是很难安装和更新的。\n\n最简单的方法，直接通过 brew 安装：\n\n```\nbrew install yarn\n```\n\n由于一些原因，速度非常慢，需要切换源。而且我发现安装的包可能不是最新版。\n\n所以比较推荐脚本安装：\n\n```\ncurl -o- -L https://yarnpkg.com/install.sh | bash\n```\n\n这样安装，每次都可以保证是最新包。\n\n同样的，建议每次安装新包，不要使用 brew 进行升级。\n\n## Debian / Ubuntu\n\n基于 Debian 的 linux 也比较方便，直接输入命令：\n\n```\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\n```\n\n之后即可安装：\n\n```\nsudo apt-get update && sudo apt-get install yarn\n```\n\n反正记住不使用 apt 进行安装就好，apt 安装的版本不是最新版，我目测和 MacOS 版本 brew 安装的差不多。\n\n--END--","source":"_posts/2018/2018-11-18-yarn.md","raw":"---\nlayout: post\ntitle: Yarn的安装与升级\ndate: 2018-11-18 13:06:00 GMT+0800\ncategories: [前端]\ntags:  [yarn]\n---\n\n平时在 windows 和 MacOS 下做开发，需要在两个系统中安装 yarn，可是每次 windows 都可以方便的更新，而 MacOS 却难难升级。特此记录下升级方案。\n\n<!-- more -->\n\n## windows \n\nwindows 比较容易，不论安装还是升级，都可以直接下载 MSI 安装包即可。\n\n官网下载地址：\n\n```\nhttps://yarnpkg.com/latest.msi\n```\n\n也可以访问 github releases 页，下载地址：\n\n```\nhttps://github.com/yarnpkg/yarn/releases\n```\n\n## macOS\n\n苹果看似容易，其实还是很难安装和更新的。\n\n最简单的方法，直接通过 brew 安装：\n\n```\nbrew install yarn\n```\n\n由于一些原因，速度非常慢，需要切换源。而且我发现安装的包可能不是最新版。\n\n所以比较推荐脚本安装：\n\n```\ncurl -o- -L https://yarnpkg.com/install.sh | bash\n```\n\n这样安装，每次都可以保证是最新包。\n\n同样的，建议每次安装新包，不要使用 brew 进行升级。\n\n## Debian / Ubuntu\n\n基于 Debian 的 linux 也比较方便，直接输入命令：\n\n```\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\n```\n\n之后即可安装：\n\n```\nsudo apt-get update && sudo apt-get install yarn\n```\n\n反正记住不使用 apt 进行安装就好，apt 安装的版本不是最新版，我目测和 MacOS 版本 brew 安装的差不多。\n\n--END--","slug":"2018-2018-11-18-yarn","published":1,"updated":"2020-03-02T07:16:34.734Z","comments":1,"photos":[],"link":"","_id":"cka5ik8cr005unybgqwsfmobt","content":"<p>平时在 windows 和 MacOS 下做开发，需要在两个系统中安装 yarn，可是每次 windows 都可以方便的更新，而 MacOS 却难难升级。特此记录下升级方案。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h2><p>windows 比较容易，不论安装还是升级，都可以直接下载 MSI 安装包即可。</p>\n<p>官网下载地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://yarnpkg.com/latest.msi</span><br></pre></td></tr></table></figure>\n\n<p>也可以访问 github releases 页，下载地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/yarnpkg/yarn/releases</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"macOS\"><a href=\"#macOS\" class=\"headerlink\" title=\"macOS\"></a>macOS</h2><p>苹果看似容易，其实还是很难安装和更新的。</p>\n<p>最简单的方法，直接通过 brew 安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install yarn</span><br></pre></td></tr></table></figure>\n\n<p>由于一些原因，速度非常慢，需要切换源。而且我发现安装的包可能不是最新版。</p>\n<p>所以比较推荐脚本安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- -L https://yarnpkg.com/install.sh | bash</span><br></pre></td></tr></table></figure>\n\n<p>这样安装，每次都可以保证是最新包。</p>\n<p>同样的，建议每次安装新包，不要使用 brew 进行升级。</p>\n<h2 id=\"Debian-Ubuntu\"><a href=\"#Debian-Ubuntu\" class=\"headerlink\" title=\"Debian / Ubuntu\"></a>Debian / Ubuntu</h2><p>基于 Debian 的 linux 也比较方便，直接输入命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -</span><br><span class=\"line\">echo &quot;deb https://dl.yarnpkg.com/debian/ stable main&quot; | sudo tee /etc/apt/sources.list.d/yarn.list</span><br></pre></td></tr></table></figure>\n\n<p>之后即可安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update &amp;&amp; sudo apt-get install yarn</span><br></pre></td></tr></table></figure>\n\n<p>反正记住不使用 apt 进行安装就好，apt 安装的版本不是最新版，我目测和 MacOS 版本 brew 安装的差不多。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>平时在 windows 和 MacOS 下做开发，需要在两个系统中安装 yarn，可是每次 windows 都可以方便的更新，而 MacOS 却难难升级。特此记录下升级方案。</p>","more":"<h2 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h2><p>windows 比较容易，不论安装还是升级，都可以直接下载 MSI 安装包即可。</p>\n<p>官网下载地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://yarnpkg.com/latest.msi</span><br></pre></td></tr></table></figure>\n\n<p>也可以访问 github releases 页，下载地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/yarnpkg/yarn/releases</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"macOS\"><a href=\"#macOS\" class=\"headerlink\" title=\"macOS\"></a>macOS</h2><p>苹果看似容易，其实还是很难安装和更新的。</p>\n<p>最简单的方法，直接通过 brew 安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install yarn</span><br></pre></td></tr></table></figure>\n\n<p>由于一些原因，速度非常慢，需要切换源。而且我发现安装的包可能不是最新版。</p>\n<p>所以比较推荐脚本安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- -L https://yarnpkg.com/install.sh | bash</span><br></pre></td></tr></table></figure>\n\n<p>这样安装，每次都可以保证是最新包。</p>\n<p>同样的，建议每次安装新包，不要使用 brew 进行升级。</p>\n<h2 id=\"Debian-Ubuntu\"><a href=\"#Debian-Ubuntu\" class=\"headerlink\" title=\"Debian / Ubuntu\"></a>Debian / Ubuntu</h2><p>基于 Debian 的 linux 也比较方便，直接输入命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -</span><br><span class=\"line\">echo &quot;deb https://dl.yarnpkg.com/debian/ stable main&quot; | sudo tee /etc/apt/sources.list.d/yarn.list</span><br></pre></td></tr></table></figure>\n\n<p>之后即可安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update &amp;&amp; sudo apt-get install yarn</span><br></pre></td></tr></table></figure>\n\n<p>反正记住不使用 apt 进行安装就好，apt 安装的版本不是最新版，我目测和 MacOS 版本 brew 安装的差不多。</p>\n<p>–END–</p>"},{"layout":"post","title":"mac 下的剪贴板增强工具","date":"2018-11-30T23:03:00.000Z","_content":"\n不知为何，突然想起了很久以前用过的一个剪贴板历史记录工具。找了半天，才查到了名字，下载使用。不过我发现它这些年都没有更新，也就顺势找了找类似的软件。\n\n那就做一个入门了解下吧。\n\n<!-- more -->\n\n## 1Clipboard\n\n![1Clipboard](https://cdn0.yukapril.com/blog/2018-11-30-paste-1clipboard-1.png-wm.black)\n\n\n官网：[http://1clipboard.io](http://1clipboard.io)\n\n1Clipboard 首先是免费，据说和大名鼎鼎的 1password 是一家公司开发的。质量上还是不错的。\n\n每次复制后，会自动存到列表里。可以对剪贴板内容进行 star 收藏，但是只有一个收藏分组。默认快捷键可以激活列表，貌似需要鼠标点击才能复制。\n\n![1Clipboard](https://cdn0.yukapril.com/blog/2018-11-30-paste-1clipboard-2.png-wm.black)\n\n体验挺好的，我觉得适合作为剪贴板历史查看工具，而且支持图片等复制。\n\n优点：\n\n* 免费\n* 支持图片等内容\n* 支持搜索\n* 支持 windows 和 macOS\n* 记录内容无上限*\n\n缺点：\n\n* 基于 electron 技术，前端打包的应用。尺寸较大。极个别时候可能监听不到复制（因为用得多才遇到这个问题）\n* 只能快捷键到查看列表，数字快捷到选中，最后还需要 <kbd>Command</kbd> + <kbd>V</kbd> 进行粘贴到内容区域，略显繁琐\n* 不能同步（至少这些年我没成功过）\n* 记录内容无上限*\n\n适合：\n\n如果你平时拿它用来记录剪贴板内容，那么我认为非常适合。比如群里面发过来的一段内容（比如接口文档），暂时用不到（一会再用），可以先复制起来。到时候直接在 1Clipboard 里面查看下就好。\n\n但是作为频繁复制粘贴来说，快捷键稍微繁琐了点。必须选中后，在手动粘贴一次，而不是自动贴到内容区域。\n\n至于记录内容长度，他是没有限制的，也就是说，要么一条条手动删除，要么把重要的收藏，剩余全部清除。没办法进行删除一周以前这种操作。\n\n最后，他利用 google 同步，先不说咱们国内能不能访问，就算能访问到，我一样没成功过（登录成功，软件没有识别登录）。\n\n## Clipy \n\n![Clipy](https://cdn0.yukapril.com/blog/2018-11-30-paste-clipy-1.png-wm.black)\n\n官网：[https://clipy-app.com](https://clipy-app.com)\n\ngithub：[https://github.com/Clipy/Clipy](https://github.com/Clipy/Clipy)\n\n开源的软件，据说基于一个很有名的剪贴板工具改进出来的。非常好用。\n\n![Clipy](https://cdn0.yukapril.com/blog/2018-11-30-paste-clipy-2.png-wm.black)\n\n优点：\n* 开源\n* 速度快\n* 按三次按键完成粘贴，或者一次快捷键加一次鼠标\n* 可以多栏目进行收藏\n\n缺点：\n* 只支持文本格式\n* 不能搜索\n\n适合：\n\n如果你只需要文本格式剪贴板增强，那么直接选择它就没错了。除了不支持图片等复杂格式外，风格大众化，常用功能都有，还免费。没有理由不选择。\n\n## Paste \n\n![Paste](https://cdn0.yukapril.com/blog/2018-11-30-paste-paste-1.jpg-wm.black)\n\n官网： [https://pasteapp.me](https://pasteapp.me)\n\n费用：¥14.99 / ¥98\n\n剪贴板增强工具里面，收费软件里面非常出名，一般经常叫做 Paste 2。\n\n确实质量很高，尤其是使用体验上面，可以算是目前剪贴板增强工具里颜值最高的。\n\n![Paste](https://cdn0.yukapril.com/blog/2018-11-30-paste-paste-2.png-wm.black)\n\n优点：\n* 界面最漂亮\n* 支持图片等多种格式\n* 长文本内容预览效果极佳\n* 按两次按键完成粘贴，或者一次快捷键加一次鼠标\n* 可以多栏目进行收藏\n* 支持搜索\n* 可以手机端同步\n\n缺点：\n* 效果太好看，有时候会卡\n* 在屏幕下面显示，13寸笔记本只能显示不到6个栏目\n\n适合：\n\n如果愿意花钱的话，非常适合使用。我稍微使用了下，就习惯了它的操作。虽然听网上有人说快捷键位置设计很变态，但我觉得还是挺舒服的。比起这篇文章里的其他 APP，我觉得快捷键最好记。\n\n支持的格式非常多，基本上都能复制显示出来，显示效果也非常好。Paste 支持试用，如果你的机器不卡，剪贴板要求较高一点，建议花钱买这个 APP。\n\n## iPaste\n\n![iPaste](https://cdn0.yukapril.com/blog/2018-11-30-paste-ipaste-1.jpg-wm.black)\n\niPaste 免费下载使用，高级功能收费。费用 ¥50。免费版本只能记录3条，不支持分组收藏。\n\n因为免费版功能相对薄弱，我也没买，但是感觉和免费的 Clipy 差不太多。唯独 iPaste 可以支持图片等复杂的格式。使用上，也没办法进行2步粘贴。不知道是卡还是什么原因，操作不是很顺畅，还需要手动 <kbd>Command</kbd> + <kbd>V</kbd>，而且还需要鼠标在点选一下内容区域...好尴尬...\n\n## pin\n\n![pin](https://cdn0.yukapril.com/blog/2018-11-30-paste-pin-1.png-wm.black)\n\n官网： [http://ioszen.com/pin](http://ioszen.com/pin)\n\n\n价格：¥30文本支持拖拽操作Pin - 剪贴板扩展\n\niOS 上非常有名的剪贴板增强工具，推出了 macOS 版本。和 iOS 功能类似，主要提供扩展能力。操作上，我学了很久才会使用...\n\n和 iOS 类似，首先要复制的信息，然后打开动作面板（<kbd>Ctrl</kbd> + <kbd>Command</kbd> + <kbd>X</kbd>）然后选择你要的动作。\n\n这个动作默认提供了不少，但是有价值的却不太多。主要都是搜索、打开之类，而且看样子没有人维护，也就是没办法去找需要的动作，不像 iOS 的 pin 维护那么勤快。\n\n功能上也比较中规中矩，默认列表和 1Clipboard 类似，还不能分组收藏。同时它提供 Clipy 风格的鼠标跟随展示，方便进行粘贴。和免费的 Clipy 一样，他也处理不了图片之类的内容，最多是帮你复制图片的地址。\n\n非要说特色的话就是能够和 iOS 同步，iOS 端 pin能力还不错。但是 Paste iOS 端可是免费的啊（并且苹果 macOS 和 iOS 系统本身就可以同步剪切板）。只不过 Paste 98 元一套，它的套装大概是 48 元，而且移动端 pin 确实功能还是可以的。\n\n所以 pin 真心不太推荐，除非是已经购买了移动端 pin，并且对“动作”非常依赖，否则我更建议换成 Paste。\n\n## 小结\n\n本次体验来看，如果你基本上没有啥需求，就是希望收集剪贴板历史记录，推荐 1Clipboard（免费）。\n\n如果希望能提升复制粘贴效率，平时主要是文字之类，可以先用用 Clipy（免费）。\n\n如果不满足于此，那么建议花钱买 Paste（98元）。\n\n其余的 APP，我觉得没那么顺手，但是你也可以下载试试。或许符合你的胃口。\n\n如果希望 macOS 和iOS 能进行同步，如果用的次数很少，建议用系统自带的复制粘贴。当然也可以 QQ、微信 什么的。或者买了 Paste 的也可以使用它的同步。\n\n总之建议先免费，看看自己是不是有这个需求，需求多了再根据自己的实际情况考虑转向收费。\n\n--END--","source":"_posts/2018/2018-11-30-paste.md","raw":"---\nlayout: post\ntitle: mac 下的剪贴板增强工具\ndate: 2018-11-30 23:03:00 GMT+0800\ncategories: [软件]\ntags:  [1Clipboard,Clipy,Paste,iPaste,Pin]\n---\n\n不知为何，突然想起了很久以前用过的一个剪贴板历史记录工具。找了半天，才查到了名字，下载使用。不过我发现它这些年都没有更新，也就顺势找了找类似的软件。\n\n那就做一个入门了解下吧。\n\n<!-- more -->\n\n## 1Clipboard\n\n![1Clipboard](https://cdn0.yukapril.com/blog/2018-11-30-paste-1clipboard-1.png-wm.black)\n\n\n官网：[http://1clipboard.io](http://1clipboard.io)\n\n1Clipboard 首先是免费，据说和大名鼎鼎的 1password 是一家公司开发的。质量上还是不错的。\n\n每次复制后，会自动存到列表里。可以对剪贴板内容进行 star 收藏，但是只有一个收藏分组。默认快捷键可以激活列表，貌似需要鼠标点击才能复制。\n\n![1Clipboard](https://cdn0.yukapril.com/blog/2018-11-30-paste-1clipboard-2.png-wm.black)\n\n体验挺好的，我觉得适合作为剪贴板历史查看工具，而且支持图片等复制。\n\n优点：\n\n* 免费\n* 支持图片等内容\n* 支持搜索\n* 支持 windows 和 macOS\n* 记录内容无上限*\n\n缺点：\n\n* 基于 electron 技术，前端打包的应用。尺寸较大。极个别时候可能监听不到复制（因为用得多才遇到这个问题）\n* 只能快捷键到查看列表，数字快捷到选中，最后还需要 <kbd>Command</kbd> + <kbd>V</kbd> 进行粘贴到内容区域，略显繁琐\n* 不能同步（至少这些年我没成功过）\n* 记录内容无上限*\n\n适合：\n\n如果你平时拿它用来记录剪贴板内容，那么我认为非常适合。比如群里面发过来的一段内容（比如接口文档），暂时用不到（一会再用），可以先复制起来。到时候直接在 1Clipboard 里面查看下就好。\n\n但是作为频繁复制粘贴来说，快捷键稍微繁琐了点。必须选中后，在手动粘贴一次，而不是自动贴到内容区域。\n\n至于记录内容长度，他是没有限制的，也就是说，要么一条条手动删除，要么把重要的收藏，剩余全部清除。没办法进行删除一周以前这种操作。\n\n最后，他利用 google 同步，先不说咱们国内能不能访问，就算能访问到，我一样没成功过（登录成功，软件没有识别登录）。\n\n## Clipy \n\n![Clipy](https://cdn0.yukapril.com/blog/2018-11-30-paste-clipy-1.png-wm.black)\n\n官网：[https://clipy-app.com](https://clipy-app.com)\n\ngithub：[https://github.com/Clipy/Clipy](https://github.com/Clipy/Clipy)\n\n开源的软件，据说基于一个很有名的剪贴板工具改进出来的。非常好用。\n\n![Clipy](https://cdn0.yukapril.com/blog/2018-11-30-paste-clipy-2.png-wm.black)\n\n优点：\n* 开源\n* 速度快\n* 按三次按键完成粘贴，或者一次快捷键加一次鼠标\n* 可以多栏目进行收藏\n\n缺点：\n* 只支持文本格式\n* 不能搜索\n\n适合：\n\n如果你只需要文本格式剪贴板增强，那么直接选择它就没错了。除了不支持图片等复杂格式外，风格大众化，常用功能都有，还免费。没有理由不选择。\n\n## Paste \n\n![Paste](https://cdn0.yukapril.com/blog/2018-11-30-paste-paste-1.jpg-wm.black)\n\n官网： [https://pasteapp.me](https://pasteapp.me)\n\n费用：¥14.99 / ¥98\n\n剪贴板增强工具里面，收费软件里面非常出名，一般经常叫做 Paste 2。\n\n确实质量很高，尤其是使用体验上面，可以算是目前剪贴板增强工具里颜值最高的。\n\n![Paste](https://cdn0.yukapril.com/blog/2018-11-30-paste-paste-2.png-wm.black)\n\n优点：\n* 界面最漂亮\n* 支持图片等多种格式\n* 长文本内容预览效果极佳\n* 按两次按键完成粘贴，或者一次快捷键加一次鼠标\n* 可以多栏目进行收藏\n* 支持搜索\n* 可以手机端同步\n\n缺点：\n* 效果太好看，有时候会卡\n* 在屏幕下面显示，13寸笔记本只能显示不到6个栏目\n\n适合：\n\n如果愿意花钱的话，非常适合使用。我稍微使用了下，就习惯了它的操作。虽然听网上有人说快捷键位置设计很变态，但我觉得还是挺舒服的。比起这篇文章里的其他 APP，我觉得快捷键最好记。\n\n支持的格式非常多，基本上都能复制显示出来，显示效果也非常好。Paste 支持试用，如果你的机器不卡，剪贴板要求较高一点，建议花钱买这个 APP。\n\n## iPaste\n\n![iPaste](https://cdn0.yukapril.com/blog/2018-11-30-paste-ipaste-1.jpg-wm.black)\n\niPaste 免费下载使用，高级功能收费。费用 ¥50。免费版本只能记录3条，不支持分组收藏。\n\n因为免费版功能相对薄弱，我也没买，但是感觉和免费的 Clipy 差不太多。唯独 iPaste 可以支持图片等复杂的格式。使用上，也没办法进行2步粘贴。不知道是卡还是什么原因，操作不是很顺畅，还需要手动 <kbd>Command</kbd> + <kbd>V</kbd>，而且还需要鼠标在点选一下内容区域...好尴尬...\n\n## pin\n\n![pin](https://cdn0.yukapril.com/blog/2018-11-30-paste-pin-1.png-wm.black)\n\n官网： [http://ioszen.com/pin](http://ioszen.com/pin)\n\n\n价格：¥30文本支持拖拽操作Pin - 剪贴板扩展\n\niOS 上非常有名的剪贴板增强工具，推出了 macOS 版本。和 iOS 功能类似，主要提供扩展能力。操作上，我学了很久才会使用...\n\n和 iOS 类似，首先要复制的信息，然后打开动作面板（<kbd>Ctrl</kbd> + <kbd>Command</kbd> + <kbd>X</kbd>）然后选择你要的动作。\n\n这个动作默认提供了不少，但是有价值的却不太多。主要都是搜索、打开之类，而且看样子没有人维护，也就是没办法去找需要的动作，不像 iOS 的 pin 维护那么勤快。\n\n功能上也比较中规中矩，默认列表和 1Clipboard 类似，还不能分组收藏。同时它提供 Clipy 风格的鼠标跟随展示，方便进行粘贴。和免费的 Clipy 一样，他也处理不了图片之类的内容，最多是帮你复制图片的地址。\n\n非要说特色的话就是能够和 iOS 同步，iOS 端 pin能力还不错。但是 Paste iOS 端可是免费的啊（并且苹果 macOS 和 iOS 系统本身就可以同步剪切板）。只不过 Paste 98 元一套，它的套装大概是 48 元，而且移动端 pin 确实功能还是可以的。\n\n所以 pin 真心不太推荐，除非是已经购买了移动端 pin，并且对“动作”非常依赖，否则我更建议换成 Paste。\n\n## 小结\n\n本次体验来看，如果你基本上没有啥需求，就是希望收集剪贴板历史记录，推荐 1Clipboard（免费）。\n\n如果希望能提升复制粘贴效率，平时主要是文字之类，可以先用用 Clipy（免费）。\n\n如果不满足于此，那么建议花钱买 Paste（98元）。\n\n其余的 APP，我觉得没那么顺手，但是你也可以下载试试。或许符合你的胃口。\n\n如果希望 macOS 和iOS 能进行同步，如果用的次数很少，建议用系统自带的复制粘贴。当然也可以 QQ、微信 什么的。或者买了 Paste 的也可以使用它的同步。\n\n总之建议先免费，看看自己是不是有这个需求，需求多了再根据自己的实际情况考虑转向收费。\n\n--END--","slug":"2018-2018-11-30-paste","published":1,"updated":"2020-03-02T07:16:34.734Z","comments":1,"photos":[],"link":"","_id":"cka5ik8cs005wnybgmy770rhn","content":"<p>不知为何，突然想起了很久以前用过的一个剪贴板历史记录工具。找了半天，才查到了名字，下载使用。不过我发现它这些年都没有更新，也就顺势找了找类似的软件。</p>\n<p>那就做一个入门了解下吧。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"1Clipboard\"><a href=\"#1Clipboard\" class=\"headerlink\" title=\"1Clipboard\"></a>1Clipboard</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-1clipboard-1.png-wm.black\" alt=\"1Clipboard\"></p>\n<p>官网：<a href=\"http://1clipboard.io\" target=\"_blank\" rel=\"noopener\">http://1clipboard.io</a></p>\n<p>1Clipboard 首先是免费，据说和大名鼎鼎的 1password 是一家公司开发的。质量上还是不错的。</p>\n<p>每次复制后，会自动存到列表里。可以对剪贴板内容进行 star 收藏，但是只有一个收藏分组。默认快捷键可以激活列表，貌似需要鼠标点击才能复制。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-1clipboard-2.png-wm.black\" alt=\"1Clipboard\"></p>\n<p>体验挺好的，我觉得适合作为剪贴板历史查看工具，而且支持图片等复制。</p>\n<p>优点：</p>\n<ul>\n<li>免费</li>\n<li>支持图片等内容</li>\n<li>支持搜索</li>\n<li>支持 windows 和 macOS</li>\n<li>记录内容无上限*</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>基于 electron 技术，前端打包的应用。尺寸较大。极个别时候可能监听不到复制（因为用得多才遇到这个问题）</li>\n<li>只能快捷键到查看列表，数字快捷到选中，最后还需要 <kbd>Command</kbd> + <kbd>V</kbd> 进行粘贴到内容区域，略显繁琐</li>\n<li>不能同步（至少这些年我没成功过）</li>\n<li>记录内容无上限*</li>\n</ul>\n<p>适合：</p>\n<p>如果你平时拿它用来记录剪贴板内容，那么我认为非常适合。比如群里面发过来的一段内容（比如接口文档），暂时用不到（一会再用），可以先复制起来。到时候直接在 1Clipboard 里面查看下就好。</p>\n<p>但是作为频繁复制粘贴来说，快捷键稍微繁琐了点。必须选中后，在手动粘贴一次，而不是自动贴到内容区域。</p>\n<p>至于记录内容长度，他是没有限制的，也就是说，要么一条条手动删除，要么把重要的收藏，剩余全部清除。没办法进行删除一周以前这种操作。</p>\n<p>最后，他利用 google 同步，先不说咱们国内能不能访问，就算能访问到，我一样没成功过（登录成功，软件没有识别登录）。</p>\n<h2 id=\"Clipy\"><a href=\"#Clipy\" class=\"headerlink\" title=\"Clipy\"></a>Clipy</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-clipy-1.png-wm.black\" alt=\"Clipy\"></p>\n<p>官网：<a href=\"https://clipy-app.com\" target=\"_blank\" rel=\"noopener\">https://clipy-app.com</a></p>\n<p>github：<a href=\"https://github.com/Clipy/Clipy\" target=\"_blank\" rel=\"noopener\">https://github.com/Clipy/Clipy</a></p>\n<p>开源的软件，据说基于一个很有名的剪贴板工具改进出来的。非常好用。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-clipy-2.png-wm.black\" alt=\"Clipy\"></p>\n<p>优点：</p>\n<ul>\n<li>开源</li>\n<li>速度快</li>\n<li>按三次按键完成粘贴，或者一次快捷键加一次鼠标</li>\n<li>可以多栏目进行收藏</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>只支持文本格式</li>\n<li>不能搜索</li>\n</ul>\n<p>适合：</p>\n<p>如果你只需要文本格式剪贴板增强，那么直接选择它就没错了。除了不支持图片等复杂格式外，风格大众化，常用功能都有，还免费。没有理由不选择。</p>\n<h2 id=\"Paste\"><a href=\"#Paste\" class=\"headerlink\" title=\"Paste\"></a>Paste</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-paste-1.jpg-wm.black\" alt=\"Paste\"></p>\n<p>官网： <a href=\"https://pasteapp.me\" target=\"_blank\" rel=\"noopener\">https://pasteapp.me</a></p>\n<p>费用：¥14.99 / ¥98</p>\n<p>剪贴板增强工具里面，收费软件里面非常出名，一般经常叫做 Paste 2。</p>\n<p>确实质量很高，尤其是使用体验上面，可以算是目前剪贴板增强工具里颜值最高的。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-paste-2.png-wm.black\" alt=\"Paste\"></p>\n<p>优点：</p>\n<ul>\n<li>界面最漂亮</li>\n<li>支持图片等多种格式</li>\n<li>长文本内容预览效果极佳</li>\n<li>按两次按键完成粘贴，或者一次快捷键加一次鼠标</li>\n<li>可以多栏目进行收藏</li>\n<li>支持搜索</li>\n<li>可以手机端同步</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>效果太好看，有时候会卡</li>\n<li>在屏幕下面显示，13寸笔记本只能显示不到6个栏目</li>\n</ul>\n<p>适合：</p>\n<p>如果愿意花钱的话，非常适合使用。我稍微使用了下，就习惯了它的操作。虽然听网上有人说快捷键位置设计很变态，但我觉得还是挺舒服的。比起这篇文章里的其他 APP，我觉得快捷键最好记。</p>\n<p>支持的格式非常多，基本上都能复制显示出来，显示效果也非常好。Paste 支持试用，如果你的机器不卡，剪贴板要求较高一点，建议花钱买这个 APP。</p>\n<h2 id=\"iPaste\"><a href=\"#iPaste\" class=\"headerlink\" title=\"iPaste\"></a>iPaste</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-ipaste-1.jpg-wm.black\" alt=\"iPaste\"></p>\n<p>iPaste 免费下载使用，高级功能收费。费用 ¥50。免费版本只能记录3条，不支持分组收藏。</p>\n<p>因为免费版功能相对薄弱，我也没买，但是感觉和免费的 Clipy 差不太多。唯独 iPaste 可以支持图片等复杂的格式。使用上，也没办法进行2步粘贴。不知道是卡还是什么原因，操作不是很顺畅，还需要手动 <kbd>Command</kbd> + <kbd>V</kbd>，而且还需要鼠标在点选一下内容区域…好尴尬…</p>\n<h2 id=\"pin\"><a href=\"#pin\" class=\"headerlink\" title=\"pin\"></a>pin</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-pin-1.png-wm.black\" alt=\"pin\"></p>\n<p>官网： <a href=\"http://ioszen.com/pin\" target=\"_blank\" rel=\"noopener\">http://ioszen.com/pin</a></p>\n<p>价格：¥30文本支持拖拽操作Pin - 剪贴板扩展</p>\n<p>iOS 上非常有名的剪贴板增强工具，推出了 macOS 版本。和 iOS 功能类似，主要提供扩展能力。操作上，我学了很久才会使用…</p>\n<p>和 iOS 类似，首先要复制的信息，然后打开动作面板（<kbd>Ctrl</kbd> + <kbd>Command</kbd> + <kbd>X</kbd>）然后选择你要的动作。</p>\n<p>这个动作默认提供了不少，但是有价值的却不太多。主要都是搜索、打开之类，而且看样子没有人维护，也就是没办法去找需要的动作，不像 iOS 的 pin 维护那么勤快。</p>\n<p>功能上也比较中规中矩，默认列表和 1Clipboard 类似，还不能分组收藏。同时它提供 Clipy 风格的鼠标跟随展示，方便进行粘贴。和免费的 Clipy 一样，他也处理不了图片之类的内容，最多是帮你复制图片的地址。</p>\n<p>非要说特色的话就是能够和 iOS 同步，iOS 端 pin能力还不错。但是 Paste iOS 端可是免费的啊（并且苹果 macOS 和 iOS 系统本身就可以同步剪切板）。只不过 Paste 98 元一套，它的套装大概是 48 元，而且移动端 pin 确实功能还是可以的。</p>\n<p>所以 pin 真心不太推荐，除非是已经购买了移动端 pin，并且对“动作”非常依赖，否则我更建议换成 Paste。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本次体验来看，如果你基本上没有啥需求，就是希望收集剪贴板历史记录，推荐 1Clipboard（免费）。</p>\n<p>如果希望能提升复制粘贴效率，平时主要是文字之类，可以先用用 Clipy（免费）。</p>\n<p>如果不满足于此，那么建议花钱买 Paste（98元）。</p>\n<p>其余的 APP，我觉得没那么顺手，但是你也可以下载试试。或许符合你的胃口。</p>\n<p>如果希望 macOS 和iOS 能进行同步，如果用的次数很少，建议用系统自带的复制粘贴。当然也可以 QQ、微信 什么的。或者买了 Paste 的也可以使用它的同步。</p>\n<p>总之建议先免费，看看自己是不是有这个需求，需求多了再根据自己的实际情况考虑转向收费。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>不知为何，突然想起了很久以前用过的一个剪贴板历史记录工具。找了半天，才查到了名字，下载使用。不过我发现它这些年都没有更新，也就顺势找了找类似的软件。</p>\n<p>那就做一个入门了解下吧。</p>","more":"<h2 id=\"1Clipboard\"><a href=\"#1Clipboard\" class=\"headerlink\" title=\"1Clipboard\"></a>1Clipboard</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-1clipboard-1.png-wm.black\" alt=\"1Clipboard\"></p>\n<p>官网：<a href=\"http://1clipboard.io\" target=\"_blank\" rel=\"noopener\">http://1clipboard.io</a></p>\n<p>1Clipboard 首先是免费，据说和大名鼎鼎的 1password 是一家公司开发的。质量上还是不错的。</p>\n<p>每次复制后，会自动存到列表里。可以对剪贴板内容进行 star 收藏，但是只有一个收藏分组。默认快捷键可以激活列表，貌似需要鼠标点击才能复制。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-1clipboard-2.png-wm.black\" alt=\"1Clipboard\"></p>\n<p>体验挺好的，我觉得适合作为剪贴板历史查看工具，而且支持图片等复制。</p>\n<p>优点：</p>\n<ul>\n<li>免费</li>\n<li>支持图片等内容</li>\n<li>支持搜索</li>\n<li>支持 windows 和 macOS</li>\n<li>记录内容无上限*</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>基于 electron 技术，前端打包的应用。尺寸较大。极个别时候可能监听不到复制（因为用得多才遇到这个问题）</li>\n<li>只能快捷键到查看列表，数字快捷到选中，最后还需要 <kbd>Command</kbd> + <kbd>V</kbd> 进行粘贴到内容区域，略显繁琐</li>\n<li>不能同步（至少这些年我没成功过）</li>\n<li>记录内容无上限*</li>\n</ul>\n<p>适合：</p>\n<p>如果你平时拿它用来记录剪贴板内容，那么我认为非常适合。比如群里面发过来的一段内容（比如接口文档），暂时用不到（一会再用），可以先复制起来。到时候直接在 1Clipboard 里面查看下就好。</p>\n<p>但是作为频繁复制粘贴来说，快捷键稍微繁琐了点。必须选中后，在手动粘贴一次，而不是自动贴到内容区域。</p>\n<p>至于记录内容长度，他是没有限制的，也就是说，要么一条条手动删除，要么把重要的收藏，剩余全部清除。没办法进行删除一周以前这种操作。</p>\n<p>最后，他利用 google 同步，先不说咱们国内能不能访问，就算能访问到，我一样没成功过（登录成功，软件没有识别登录）。</p>\n<h2 id=\"Clipy\"><a href=\"#Clipy\" class=\"headerlink\" title=\"Clipy\"></a>Clipy</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-clipy-1.png-wm.black\" alt=\"Clipy\"></p>\n<p>官网：<a href=\"https://clipy-app.com\" target=\"_blank\" rel=\"noopener\">https://clipy-app.com</a></p>\n<p>github：<a href=\"https://github.com/Clipy/Clipy\" target=\"_blank\" rel=\"noopener\">https://github.com/Clipy/Clipy</a></p>\n<p>开源的软件，据说基于一个很有名的剪贴板工具改进出来的。非常好用。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-clipy-2.png-wm.black\" alt=\"Clipy\"></p>\n<p>优点：</p>\n<ul>\n<li>开源</li>\n<li>速度快</li>\n<li>按三次按键完成粘贴，或者一次快捷键加一次鼠标</li>\n<li>可以多栏目进行收藏</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>只支持文本格式</li>\n<li>不能搜索</li>\n</ul>\n<p>适合：</p>\n<p>如果你只需要文本格式剪贴板增强，那么直接选择它就没错了。除了不支持图片等复杂格式外，风格大众化，常用功能都有，还免费。没有理由不选择。</p>\n<h2 id=\"Paste\"><a href=\"#Paste\" class=\"headerlink\" title=\"Paste\"></a>Paste</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-paste-1.jpg-wm.black\" alt=\"Paste\"></p>\n<p>官网： <a href=\"https://pasteapp.me\" target=\"_blank\" rel=\"noopener\">https://pasteapp.me</a></p>\n<p>费用：¥14.99 / ¥98</p>\n<p>剪贴板增强工具里面，收费软件里面非常出名，一般经常叫做 Paste 2。</p>\n<p>确实质量很高，尤其是使用体验上面，可以算是目前剪贴板增强工具里颜值最高的。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-paste-2.png-wm.black\" alt=\"Paste\"></p>\n<p>优点：</p>\n<ul>\n<li>界面最漂亮</li>\n<li>支持图片等多种格式</li>\n<li>长文本内容预览效果极佳</li>\n<li>按两次按键完成粘贴，或者一次快捷键加一次鼠标</li>\n<li>可以多栏目进行收藏</li>\n<li>支持搜索</li>\n<li>可以手机端同步</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>效果太好看，有时候会卡</li>\n<li>在屏幕下面显示，13寸笔记本只能显示不到6个栏目</li>\n</ul>\n<p>适合：</p>\n<p>如果愿意花钱的话，非常适合使用。我稍微使用了下，就习惯了它的操作。虽然听网上有人说快捷键位置设计很变态，但我觉得还是挺舒服的。比起这篇文章里的其他 APP，我觉得快捷键最好记。</p>\n<p>支持的格式非常多，基本上都能复制显示出来，显示效果也非常好。Paste 支持试用，如果你的机器不卡，剪贴板要求较高一点，建议花钱买这个 APP。</p>\n<h2 id=\"iPaste\"><a href=\"#iPaste\" class=\"headerlink\" title=\"iPaste\"></a>iPaste</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-ipaste-1.jpg-wm.black\" alt=\"iPaste\"></p>\n<p>iPaste 免费下载使用，高级功能收费。费用 ¥50。免费版本只能记录3条，不支持分组收藏。</p>\n<p>因为免费版功能相对薄弱，我也没买，但是感觉和免费的 Clipy 差不太多。唯独 iPaste 可以支持图片等复杂的格式。使用上，也没办法进行2步粘贴。不知道是卡还是什么原因，操作不是很顺畅，还需要手动 <kbd>Command</kbd> + <kbd>V</kbd>，而且还需要鼠标在点选一下内容区域…好尴尬…</p>\n<h2 id=\"pin\"><a href=\"#pin\" class=\"headerlink\" title=\"pin\"></a>pin</h2><p><img src=\"https://cdn0.yukapril.com/blog/2018-11-30-paste-pin-1.png-wm.black\" alt=\"pin\"></p>\n<p>官网： <a href=\"http://ioszen.com/pin\" target=\"_blank\" rel=\"noopener\">http://ioszen.com/pin</a></p>\n<p>价格：¥30文本支持拖拽操作Pin - 剪贴板扩展</p>\n<p>iOS 上非常有名的剪贴板增强工具，推出了 macOS 版本。和 iOS 功能类似，主要提供扩展能力。操作上，我学了很久才会使用…</p>\n<p>和 iOS 类似，首先要复制的信息，然后打开动作面板（<kbd>Ctrl</kbd> + <kbd>Command</kbd> + <kbd>X</kbd>）然后选择你要的动作。</p>\n<p>这个动作默认提供了不少，但是有价值的却不太多。主要都是搜索、打开之类，而且看样子没有人维护，也就是没办法去找需要的动作，不像 iOS 的 pin 维护那么勤快。</p>\n<p>功能上也比较中规中矩，默认列表和 1Clipboard 类似，还不能分组收藏。同时它提供 Clipy 风格的鼠标跟随展示，方便进行粘贴。和免费的 Clipy 一样，他也处理不了图片之类的内容，最多是帮你复制图片的地址。</p>\n<p>非要说特色的话就是能够和 iOS 同步，iOS 端 pin能力还不错。但是 Paste iOS 端可是免费的啊（并且苹果 macOS 和 iOS 系统本身就可以同步剪切板）。只不过 Paste 98 元一套，它的套装大概是 48 元，而且移动端 pin 确实功能还是可以的。</p>\n<p>所以 pin 真心不太推荐，除非是已经购买了移动端 pin，并且对“动作”非常依赖，否则我更建议换成 Paste。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本次体验来看，如果你基本上没有啥需求，就是希望收集剪贴板历史记录，推荐 1Clipboard（免费）。</p>\n<p>如果希望能提升复制粘贴效率，平时主要是文字之类，可以先用用 Clipy（免费）。</p>\n<p>如果不满足于此，那么建议花钱买 Paste（98元）。</p>\n<p>其余的 APP，我觉得没那么顺手，但是你也可以下载试试。或许符合你的胃口。</p>\n<p>如果希望 macOS 和iOS 能进行同步，如果用的次数很少，建议用系统自带的复制粘贴。当然也可以 QQ、微信 什么的。或者买了 Paste 的也可以使用它的同步。</p>\n<p>总之建议先免费，看看自己是不是有这个需求，需求多了再根据自己的实际情况考虑转向收费。</p>\n<p>–END–</p>"},{"layout":"post","title":"class 的 constructor 什么时候可以不写","date":"2018-12-30T18:38:00.000Z","_content":"最近写 React 项目时候，本来觉得自己清楚 `constructor` 的写法，但是还是发现不够清晰，特查询总结下。\n\n<!-- more -->\n\n首先必须说明的是，`constructor` 必须用在类方法里面，普通的 `function` 是没有的。\n\n## MDN 的 `constructor` 文档说明\n\n阅读 [MDN文档](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/constructor)，简单说来:\n\n* `constructor` 在类里面只能写一个，感觉像是废话...\n* 如果需要调用父类构造方法，必须写 `constructor`，因为 `super` 方法只能写在 `constructor` 里面。\n* 如果你不写 `constructor`，那么代码执行上会给你增加一个默认的 `constructor`。\n\n关于最后一条，默认构造函数，基类默认的 `constructor` 是：\n\n```js\nconstructor() {} // 就是啥都不干\n```\n\n派生类默认的 `constructor` 是：\n\n```js\nconstructor(...args) {\n  super(...args) // 用派生类实例的参数调用下基类构造函数\n}\n```\n\n可以说，如果你的类不需要特殊处理参数（与默认的构造函数一致），那么可以省略 `constructor`。\n\n## 基类\n\n先用一个简单的类来说：\n\n```js\nclass A {\n  constructor (x, y) {\n    this.x = x\n    this.y = y\n  }\n}\n```\n\n构造器主要完成了类的参数处理，此例子中将类的参数放到了实例上。由于需要处理数据，所以此时 `constructor` 必定不能省略。\n\n但是如果一个简单的类，不需要处理数据，比如：\n\n```js\nclass B {\n  constructor () {} // 可以不写\n  say () { \n    console.log('hello')\n  }\n}\n```\n\n这时候可以不写 `constructor` 了。\n\n## 派生类\n\n**例一，用一个 react 常用的风格来说明：**\n\n```js\nclass C extends A {\n  constructor (props) {\n    super(props) // 可以省略\n  }\n}\n```\n\n在派生类集成的过程中，可以使用 `super` 方法，我还真没遇到过不调用父类构造函数的情况...😓\n\n由于此时的 `constructor` 属于默认情形，所以也可以省略。\n\n**例二，再复杂一点的 react 例子：**\n\n```js\nclass C extends A {\n  constructor (props) {\n    super(props)\n    this.state = { val: '' }\n  }\n}\n```\n\n由于 `constructor` 中写了 state，没办法，此时必然不可以像上文一样省略。**但是**，这个例子可以改写成如下形式：\n\n```js\nclass C extends A {\n  constructor (props) {\n    super(props) // 此时可以省略\n  }\n  state = { val: '' }\n}\n```\n\n这样的话，`constructor` 又可以省略了。\n\n## 小结\n\n总之，一个很简单的原则，如果 `constructor` 是默认情况，那么就可以省略。其他时候不能省略。\n\n不省略的话，派生类写 `constructor` 的时候，必须要写 `super` 方法。而基类写 `constructor` 的时候绝对不能写 `super`（因为没有继承啊）。\n\n\n","source":"_posts/2018/2018-12-30-class-constructor.md","raw":"---\nlayout: post\ntitle: class 的 constructor 什么时候可以不写\ndate: 2018-12-30 18:38:00 GMT+0800\ncategories: [前端]\ntags:  [constructor]\n---\n最近写 React 项目时候，本来觉得自己清楚 `constructor` 的写法，但是还是发现不够清晰，特查询总结下。\n\n<!-- more -->\n\n首先必须说明的是，`constructor` 必须用在类方法里面，普通的 `function` 是没有的。\n\n## MDN 的 `constructor` 文档说明\n\n阅读 [MDN文档](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/constructor)，简单说来:\n\n* `constructor` 在类里面只能写一个，感觉像是废话...\n* 如果需要调用父类构造方法，必须写 `constructor`，因为 `super` 方法只能写在 `constructor` 里面。\n* 如果你不写 `constructor`，那么代码执行上会给你增加一个默认的 `constructor`。\n\n关于最后一条，默认构造函数，基类默认的 `constructor` 是：\n\n```js\nconstructor() {} // 就是啥都不干\n```\n\n派生类默认的 `constructor` 是：\n\n```js\nconstructor(...args) {\n  super(...args) // 用派生类实例的参数调用下基类构造函数\n}\n```\n\n可以说，如果你的类不需要特殊处理参数（与默认的构造函数一致），那么可以省略 `constructor`。\n\n## 基类\n\n先用一个简单的类来说：\n\n```js\nclass A {\n  constructor (x, y) {\n    this.x = x\n    this.y = y\n  }\n}\n```\n\n构造器主要完成了类的参数处理，此例子中将类的参数放到了实例上。由于需要处理数据，所以此时 `constructor` 必定不能省略。\n\n但是如果一个简单的类，不需要处理数据，比如：\n\n```js\nclass B {\n  constructor () {} // 可以不写\n  say () { \n    console.log('hello')\n  }\n}\n```\n\n这时候可以不写 `constructor` 了。\n\n## 派生类\n\n**例一，用一个 react 常用的风格来说明：**\n\n```js\nclass C extends A {\n  constructor (props) {\n    super(props) // 可以省略\n  }\n}\n```\n\n在派生类集成的过程中，可以使用 `super` 方法，我还真没遇到过不调用父类构造函数的情况...😓\n\n由于此时的 `constructor` 属于默认情形，所以也可以省略。\n\n**例二，再复杂一点的 react 例子：**\n\n```js\nclass C extends A {\n  constructor (props) {\n    super(props)\n    this.state = { val: '' }\n  }\n}\n```\n\n由于 `constructor` 中写了 state，没办法，此时必然不可以像上文一样省略。**但是**，这个例子可以改写成如下形式：\n\n```js\nclass C extends A {\n  constructor (props) {\n    super(props) // 此时可以省略\n  }\n  state = { val: '' }\n}\n```\n\n这样的话，`constructor` 又可以省略了。\n\n## 小结\n\n总之，一个很简单的原则，如果 `constructor` 是默认情况，那么就可以省略。其他时候不能省略。\n\n不省略的话，派生类写 `constructor` 的时候，必须要写 `super` 方法。而基类写 `constructor` 的时候绝对不能写 `super`（因为没有继承啊）。\n\n\n","slug":"2018-2018-12-30-class-constructor","published":1,"updated":"2020-03-02T07:16:34.734Z","comments":1,"photos":[],"link":"","_id":"cka5ik8ct005znybg42u2scj0","content":"<p>最近写 React 项目时候，本来觉得自己清楚 <code>constructor</code> 的写法，但是还是发现不够清晰，特查询总结下。</p>\n<a id=\"more\"></a>\n\n<p>首先必须说明的是，<code>constructor</code> 必须用在类方法里面，普通的 <code>function</code> 是没有的。</p>\n<h2 id=\"MDN-的-constructor-文档说明\"><a href=\"#MDN-的-constructor-文档说明\" class=\"headerlink\" title=\"MDN 的 constructor 文档说明\"></a>MDN 的 <code>constructor</code> 文档说明</h2><p>阅读 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/constructor\" target=\"_blank\" rel=\"noopener\">MDN文档</a>，简单说来:</p>\n<ul>\n<li><code>constructor</code> 在类里面只能写一个，感觉像是废话…</li>\n<li>如果需要调用父类构造方法，必须写 <code>constructor</code>，因为 <code>super</code> 方法只能写在 <code>constructor</code> 里面。</li>\n<li>如果你不写 <code>constructor</code>，那么代码执行上会给你增加一个默认的 <code>constructor</code>。</li>\n</ul>\n<p>关于最后一条，默认构造函数，基类默认的 <code>constructor</code> 是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;&#125; <span class=\"comment\">// 就是啥都不干</span></span><br></pre></td></tr></table></figure>\n\n<p>派生类默认的 <code>constructor</code> 是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>(...args) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">super</span>(...args) <span class=\"comment\">// 用派生类实例的参数调用下基类构造函数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以说，如果你的类不需要特殊处理参数（与默认的构造函数一致），那么可以省略 <code>constructor</code>。</p>\n<h2 id=\"基类\"><a href=\"#基类\" class=\"headerlink\" title=\"基类\"></a>基类</h2><p>先用一个简单的类来说：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (x, y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>构造器主要完成了类的参数处理，此例子中将类的参数放到了实例上。由于需要处理数据，所以此时 <code>constructor</code> 必定不能省略。</p>\n<p>但是如果一个简单的类，不需要处理数据，比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;&#125; <span class=\"comment\">// 可以不写</span></span><br><span class=\"line\">  say () &#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时候可以不写 <code>constructor</code> 了。</p>\n<h2 id=\"派生类\"><a href=\"#派生类\" class=\"headerlink\" title=\"派生类\"></a>派生类</h2><p><strong>例一，用一个 react 常用的风格来说明：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props) <span class=\"comment\">// 可以省略</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在派生类集成的过程中，可以使用 <code>super</code> 方法，我还真没遇到过不调用父类构造函数的情况…😓</p>\n<p>由于此时的 <code>constructor</code> 属于默认情形，所以也可以省略。</p>\n<p><strong>例二，再复杂一点的 react 例子：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"attr\">val</span>: <span class=\"string\">''</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于 <code>constructor</code> 中写了 state，没办法，此时必然不可以像上文一样省略。<strong>但是</strong>，这个例子可以改写成如下形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props) <span class=\"comment\">// 此时可以省略</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  state = &#123; <span class=\"attr\">val</span>: <span class=\"string\">''</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样的话，<code>constructor</code> 又可以省略了。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>总之，一个很简单的原则，如果 <code>constructor</code> 是默认情况，那么就可以省略。其他时候不能省略。</p>\n<p>不省略的话，派生类写 <code>constructor</code> 的时候，必须要写 <code>super</code> 方法。而基类写 <code>constructor</code> 的时候绝对不能写 <code>super</code>（因为没有继承啊）。</p>\n","site":{"data":{}},"excerpt":"<p>最近写 React 项目时候，本来觉得自己清楚 <code>constructor</code> 的写法，但是还是发现不够清晰，特查询总结下。</p>","more":"<p>首先必须说明的是，<code>constructor</code> 必须用在类方法里面，普通的 <code>function</code> 是没有的。</p>\n<h2 id=\"MDN-的-constructor-文档说明\"><a href=\"#MDN-的-constructor-文档说明\" class=\"headerlink\" title=\"MDN 的 constructor 文档说明\"></a>MDN 的 <code>constructor</code> 文档说明</h2><p>阅读 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/constructor\" target=\"_blank\" rel=\"noopener\">MDN文档</a>，简单说来:</p>\n<ul>\n<li><code>constructor</code> 在类里面只能写一个，感觉像是废话…</li>\n<li>如果需要调用父类构造方法，必须写 <code>constructor</code>，因为 <code>super</code> 方法只能写在 <code>constructor</code> 里面。</li>\n<li>如果你不写 <code>constructor</code>，那么代码执行上会给你增加一个默认的 <code>constructor</code>。</li>\n</ul>\n<p>关于最后一条，默认构造函数，基类默认的 <code>constructor</code> 是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;&#125; <span class=\"comment\">// 就是啥都不干</span></span><br></pre></td></tr></table></figure>\n\n<p>派生类默认的 <code>constructor</code> 是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>(...args) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">super</span>(...args) <span class=\"comment\">// 用派生类实例的参数调用下基类构造函数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以说，如果你的类不需要特殊处理参数（与默认的构造函数一致），那么可以省略 <code>constructor</code>。</p>\n<h2 id=\"基类\"><a href=\"#基类\" class=\"headerlink\" title=\"基类\"></a>基类</h2><p>先用一个简单的类来说：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (x, y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>构造器主要完成了类的参数处理，此例子中将类的参数放到了实例上。由于需要处理数据，所以此时 <code>constructor</code> 必定不能省略。</p>\n<p>但是如果一个简单的类，不需要处理数据，比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;&#125; <span class=\"comment\">// 可以不写</span></span><br><span class=\"line\">  say () &#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时候可以不写 <code>constructor</code> 了。</p>\n<h2 id=\"派生类\"><a href=\"#派生类\" class=\"headerlink\" title=\"派生类\"></a>派生类</h2><p><strong>例一，用一个 react 常用的风格来说明：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props) <span class=\"comment\">// 可以省略</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在派生类集成的过程中，可以使用 <code>super</code> 方法，我还真没遇到过不调用父类构造函数的情况…😓</p>\n<p>由于此时的 <code>constructor</code> 属于默认情形，所以也可以省略。</p>\n<p><strong>例二，再复杂一点的 react 例子：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"attr\">val</span>: <span class=\"string\">''</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于 <code>constructor</code> 中写了 state，没办法，此时必然不可以像上文一样省略。<strong>但是</strong>，这个例子可以改写成如下形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props) <span class=\"comment\">// 此时可以省略</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  state = &#123; <span class=\"attr\">val</span>: <span class=\"string\">''</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样的话，<code>constructor</code> 又可以省略了。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>总之，一个很简单的原则，如果 <code>constructor</code> 是默认情况，那么就可以省略。其他时候不能省略。</p>\n<p>不省略的话，派生类写 <code>constructor</code> 的时候，必须要写 <code>super</code> 方法。而基类写 <code>constructor</code> 的时候绝对不能写 <code>super</code>（因为没有继承啊）。</p>"},{"layout":"post","title":"electron / electron-builer 踩坑记","date":"2019-02-16T16:13:00.000Z","_content":"\n最近在做一个 web server 工具，为了方便在 MacOS 和 Windows 上使用，采用了 electron 方案。\n\n实践中也遇到了不少小问题，在此记录下。\n\n<!-- more -->\n\n#### 启动程序出现白屏等待\n\n这个问题官网有解决方案，就是等待页面脚本执行完毕，再显示窗体。处理方法如下：\n\n```js\nconst win = new BrowserWindow({\n  width: 800,\n  height: 600,\n  resizable: false,\n  show: false // 默认不显示窗体\n})\nwin.loadFile('www/index.html')\nwin.once('ready-to-show', () => {\n  win.show() // 页面脚本都执行完毕后，再显示\n})\n```\n\n#### MacOS 关闭窗体，程序不退出\n\n程序很简单，就一个主界面，期望关闭窗体后，自动退出程序。问题表现为 MacOS 系统关闭窗体后，程序仍然在 dock 中显示，需要手动在退出。\n\n这个问题主要是因为 MacOS 程序默认都是 dock 驻留的，不像 Windows，默认窗体关闭后等同于程序退出。\n\n如果程序所有窗体都关闭，程序默认退出，那需要手动加入退出方法：\n\n```js\n// 主进程\napp.on('window-all-closed', () => {\n  app.quit()\n})\n```\n\n#### 菜单配置问题导致闪退\n\n把没用的菜单配置删除后，有的菜单栏目为空，此时闪退。问题大致情况如下：\n\n```js\n{\n  role: 'help',\n  submenu: [\n    // {\n    //   label: 'Learn More',\n    //   click () {}\n    // }\n  ]\n}\n```\n\n`help` 栏目下没有子菜单，此时会启动闪退。所以要么没有这个栏目，要么就要有子菜单。\n\n#### 程序中可以选中文字\n\n在程序中，应该不能用鼠标将里面的文字选中、复制啥的。这体验就太差了。修改方法也简单，css 根节点处理下就好：\n\n```css\n#app {\n    user-select: none;\n}\n```\n\n#### 减少包体积\n\n原本 electron 的主进程代码和页面 App 代码在同一级别目录下，这样共用 `package.json` 和 `node_modules`。但是打包时候会把 `node_modules` 打入程序中，页面只需要编译后的代码打包到程序中就行了，所以不调整目录结构的话，无形中 `node_modules` 太大了。\n\n调整结构如下：\n\n```\n├── electron     electron 程序代码\n├── www          页面编译后代码\n├── App          页面源码，编译到 www 目录\n│   ├── node_modules\n│   ├── package.json\n│   └── src\n├── build        electron-builder 资源目录\n├── dist         electron-builder 程序打包目录\n├── node_modules electron 的依赖\n└── package.json\n```\n\n最终输出到程序包中，只有：\n```js\n[\n  \"www/**/*\",\n  \"electron/*\",\n  \"package.json\",\n  \"node_modules\"\n]\n```\n\n目前我只能做到如此。因为 electron 没发现什么优化方法。😂\n\n#### 程序打包\n\n官方推荐了三种工具打包，`electron-packager` `electron-forge` `electron-builder`。官网说明[见此](http://electronjs.org/docs/tutorial/application-packaging)。\n\n曾经用过 `electron-packager`，大概是命令行打包，而且还只能打包当前系统的包。\n\n这次换了最流行的（star最多）的 `electron-builder`。发现 MacOS 下可以打所有系统的包，真挺方便的。\n\n\n唯独就是 linux 平台，问题稍多些。\n* linux 下的各种格式的包，程序图标我至今没成功过；\n* `二进制` 包和 linux 通用的 `appImage` 包，没什么问题，就是 `appImage` 稍大一点；\n* debian 系的 `deb` 包，要求 `package.json` 中 `author` 字段必须有 `name` 和 `email`。否则不能打包；\n* ubuntu 的 `snap` 包，好像需要签名，我就没弄；\n* redHat 系的 `rpm` 包，没打也没测试。\n\n针对 linux，我认为直接出 `二进制` 包和 linux 通用的 `appImage` 包就行了。基本上常见的系统都能覆盖到。\n\n如果要针对 ubuntu / linux Mint 处理，那么出 `deb` 包就好了。\n\n--END--\n\n\n\n\n","source":"_posts/2019/2019-02-16-electron.md","raw":"---\nlayout: post\ntitle: electron / electron-builer 踩坑记\ndate: 2019-02-16 16:13:00 GMT+0800\ncategories: [前端]\ntags:  [electron, electron-builder]\n---\n\n最近在做一个 web server 工具，为了方便在 MacOS 和 Windows 上使用，采用了 electron 方案。\n\n实践中也遇到了不少小问题，在此记录下。\n\n<!-- more -->\n\n#### 启动程序出现白屏等待\n\n这个问题官网有解决方案，就是等待页面脚本执行完毕，再显示窗体。处理方法如下：\n\n```js\nconst win = new BrowserWindow({\n  width: 800,\n  height: 600,\n  resizable: false,\n  show: false // 默认不显示窗体\n})\nwin.loadFile('www/index.html')\nwin.once('ready-to-show', () => {\n  win.show() // 页面脚本都执行完毕后，再显示\n})\n```\n\n#### MacOS 关闭窗体，程序不退出\n\n程序很简单，就一个主界面，期望关闭窗体后，自动退出程序。问题表现为 MacOS 系统关闭窗体后，程序仍然在 dock 中显示，需要手动在退出。\n\n这个问题主要是因为 MacOS 程序默认都是 dock 驻留的，不像 Windows，默认窗体关闭后等同于程序退出。\n\n如果程序所有窗体都关闭，程序默认退出，那需要手动加入退出方法：\n\n```js\n// 主进程\napp.on('window-all-closed', () => {\n  app.quit()\n})\n```\n\n#### 菜单配置问题导致闪退\n\n把没用的菜单配置删除后，有的菜单栏目为空，此时闪退。问题大致情况如下：\n\n```js\n{\n  role: 'help',\n  submenu: [\n    // {\n    //   label: 'Learn More',\n    //   click () {}\n    // }\n  ]\n}\n```\n\n`help` 栏目下没有子菜单，此时会启动闪退。所以要么没有这个栏目，要么就要有子菜单。\n\n#### 程序中可以选中文字\n\n在程序中，应该不能用鼠标将里面的文字选中、复制啥的。这体验就太差了。修改方法也简单，css 根节点处理下就好：\n\n```css\n#app {\n    user-select: none;\n}\n```\n\n#### 减少包体积\n\n原本 electron 的主进程代码和页面 App 代码在同一级别目录下，这样共用 `package.json` 和 `node_modules`。但是打包时候会把 `node_modules` 打入程序中，页面只需要编译后的代码打包到程序中就行了，所以不调整目录结构的话，无形中 `node_modules` 太大了。\n\n调整结构如下：\n\n```\n├── electron     electron 程序代码\n├── www          页面编译后代码\n├── App          页面源码，编译到 www 目录\n│   ├── node_modules\n│   ├── package.json\n│   └── src\n├── build        electron-builder 资源目录\n├── dist         electron-builder 程序打包目录\n├── node_modules electron 的依赖\n└── package.json\n```\n\n最终输出到程序包中，只有：\n```js\n[\n  \"www/**/*\",\n  \"electron/*\",\n  \"package.json\",\n  \"node_modules\"\n]\n```\n\n目前我只能做到如此。因为 electron 没发现什么优化方法。😂\n\n#### 程序打包\n\n官方推荐了三种工具打包，`electron-packager` `electron-forge` `electron-builder`。官网说明[见此](http://electronjs.org/docs/tutorial/application-packaging)。\n\n曾经用过 `electron-packager`，大概是命令行打包，而且还只能打包当前系统的包。\n\n这次换了最流行的（star最多）的 `electron-builder`。发现 MacOS 下可以打所有系统的包，真挺方便的。\n\n\n唯独就是 linux 平台，问题稍多些。\n* linux 下的各种格式的包，程序图标我至今没成功过；\n* `二进制` 包和 linux 通用的 `appImage` 包，没什么问题，就是 `appImage` 稍大一点；\n* debian 系的 `deb` 包，要求 `package.json` 中 `author` 字段必须有 `name` 和 `email`。否则不能打包；\n* ubuntu 的 `snap` 包，好像需要签名，我就没弄；\n* redHat 系的 `rpm` 包，没打也没测试。\n\n针对 linux，我认为直接出 `二进制` 包和 linux 通用的 `appImage` 包就行了。基本上常见的系统都能覆盖到。\n\n如果要针对 ubuntu / linux Mint 处理，那么出 `deb` 包就好了。\n\n--END--\n\n\n\n\n","slug":"2019-2019-02-16-electron","published":1,"updated":"2020-03-02T07:16:34.734Z","comments":1,"photos":[],"link":"","_id":"cka5ik8cv0062nybg3fenm5e4","content":"<p>最近在做一个 web server 工具，为了方便在 MacOS 和 Windows 上使用，采用了 electron 方案。</p>\n<p>实践中也遇到了不少小问题，在此记录下。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"启动程序出现白屏等待\"><a href=\"#启动程序出现白屏等待\" class=\"headerlink\" title=\"启动程序出现白屏等待\"></a>启动程序出现白屏等待</h4><p>这个问题官网有解决方案，就是等待页面脚本执行完毕，再显示窗体。处理方法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> win = <span class=\"keyword\">new</span> BrowserWindow(&#123;</span><br><span class=\"line\">  width: <span class=\"number\">800</span>,</span><br><span class=\"line\">  height: <span class=\"number\">600</span>,</span><br><span class=\"line\">  resizable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  show: <span class=\"literal\">false</span> <span class=\"comment\">// 默认不显示窗体</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">win.loadFile(<span class=\"string\">'www/index.html'</span>)</span><br><span class=\"line\">win.once(<span class=\"string\">'ready-to-show'</span>, () =&gt; &#123;</span><br><span class=\"line\">  win.show() <span class=\"comment\">// 页面脚本都执行完毕后，再显示</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MacOS-关闭窗体，程序不退出\"><a href=\"#MacOS-关闭窗体，程序不退出\" class=\"headerlink\" title=\"MacOS 关闭窗体，程序不退出\"></a>MacOS 关闭窗体，程序不退出</h4><p>程序很简单，就一个主界面，期望关闭窗体后，自动退出程序。问题表现为 MacOS 系统关闭窗体后，程序仍然在 dock 中显示，需要手动在退出。</p>\n<p>这个问题主要是因为 MacOS 程序默认都是 dock 驻留的，不像 Windows，默认窗体关闭后等同于程序退出。</p>\n<p>如果程序所有窗体都关闭，程序默认退出，那需要手动加入退出方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 主进程</span></span><br><span class=\"line\">app.on(<span class=\"string\">'window-all-closed'</span>, () =&gt; &#123;</span><br><span class=\"line\">  app.quit()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"菜单配置问题导致闪退\"><a href=\"#菜单配置问题导致闪退\" class=\"headerlink\" title=\"菜单配置问题导致闪退\"></a>菜单配置问题导致闪退</h4><p>把没用的菜单配置删除后，有的菜单栏目为空，此时闪退。问题大致情况如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  role: <span class=\"string\">'help'</span>,</span><br><span class=\"line\">  submenu: [</span><br><span class=\"line\">    <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   label: 'Learn More',</span></span><br><span class=\"line\">    <span class=\"comment\">//   click () &#123;&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>help</code> 栏目下没有子菜单，此时会启动闪退。所以要么没有这个栏目，要么就要有子菜单。</p>\n<h4 id=\"程序中可以选中文字\"><a href=\"#程序中可以选中文字\" class=\"headerlink\" title=\"程序中可以选中文字\"></a>程序中可以选中文字</h4><p>在程序中，应该不能用鼠标将里面的文字选中、复制啥的。这体验就太差了。修改方法也简单，css 根节点处理下就好：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#app</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">user-select</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"减少包体积\"><a href=\"#减少包体积\" class=\"headerlink\" title=\"减少包体积\"></a>减少包体积</h4><p>原本 electron 的主进程代码和页面 App 代码在同一级别目录下，这样共用 <code>package.json</code> 和 <code>node_modules</code>。但是打包时候会把 <code>node_modules</code> 打入程序中，页面只需要编译后的代码打包到程序中就行了，所以不调整目录结构的话，无形中 <code>node_modules</code> 太大了。</p>\n<p>调整结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── electron     electron 程序代码</span><br><span class=\"line\">├── www          页面编译后代码</span><br><span class=\"line\">├── App          页面源码，编译到 www 目录</span><br><span class=\"line\">│   ├── node_modules</span><br><span class=\"line\">│   ├── package.json</span><br><span class=\"line\">│   └── src</span><br><span class=\"line\">├── build        electron-builder 资源目录</span><br><span class=\"line\">├── dist         electron-builder 程序打包目录</span><br><span class=\"line\">├── node_modules electron 的依赖</span><br><span class=\"line\">└── package.json</span><br></pre></td></tr></table></figure>\n\n<p>最终输出到程序包中，只有：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  <span class=\"string\">\"www/**/*\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"electron/*\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"package.json\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"node_modules\"</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>目前我只能做到如此。因为 electron 没发现什么优化方法。😂</p>\n<h4 id=\"程序打包\"><a href=\"#程序打包\" class=\"headerlink\" title=\"程序打包\"></a>程序打包</h4><p>官方推荐了三种工具打包，<code>electron-packager</code> <code>electron-forge</code> <code>electron-builder</code>。官网说明<a href=\"http://electronjs.org/docs/tutorial/application-packaging\" target=\"_blank\" rel=\"noopener\">见此</a>。</p>\n<p>曾经用过 <code>electron-packager</code>，大概是命令行打包，而且还只能打包当前系统的包。</p>\n<p>这次换了最流行的（star最多）的 <code>electron-builder</code>。发现 MacOS 下可以打所有系统的包，真挺方便的。</p>\n<p>唯独就是 linux 平台，问题稍多些。</p>\n<ul>\n<li>linux 下的各种格式的包，程序图标我至今没成功过；</li>\n<li><code>二进制</code> 包和 linux 通用的 <code>appImage</code> 包，没什么问题，就是 <code>appImage</code> 稍大一点；</li>\n<li>debian 系的 <code>deb</code> 包，要求 <code>package.json</code> 中 <code>author</code> 字段必须有 <code>name</code> 和 <code>email</code>。否则不能打包；</li>\n<li>ubuntu 的 <code>snap</code> 包，好像需要签名，我就没弄；</li>\n<li>redHat 系的 <code>rpm</code> 包，没打也没测试。</li>\n</ul>\n<p>针对 linux，我认为直接出 <code>二进制</code> 包和 linux 通用的 <code>appImage</code> 包就行了。基本上常见的系统都能覆盖到。</p>\n<p>如果要针对 ubuntu / linux Mint 处理，那么出 <code>deb</code> 包就好了。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>最近在做一个 web server 工具，为了方便在 MacOS 和 Windows 上使用，采用了 electron 方案。</p>\n<p>实践中也遇到了不少小问题，在此记录下。</p>","more":"<h4 id=\"启动程序出现白屏等待\"><a href=\"#启动程序出现白屏等待\" class=\"headerlink\" title=\"启动程序出现白屏等待\"></a>启动程序出现白屏等待</h4><p>这个问题官网有解决方案，就是等待页面脚本执行完毕，再显示窗体。处理方法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> win = <span class=\"keyword\">new</span> BrowserWindow(&#123;</span><br><span class=\"line\">  width: <span class=\"number\">800</span>,</span><br><span class=\"line\">  height: <span class=\"number\">600</span>,</span><br><span class=\"line\">  resizable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  show: <span class=\"literal\">false</span> <span class=\"comment\">// 默认不显示窗体</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">win.loadFile(<span class=\"string\">'www/index.html'</span>)</span><br><span class=\"line\">win.once(<span class=\"string\">'ready-to-show'</span>, () =&gt; &#123;</span><br><span class=\"line\">  win.show() <span class=\"comment\">// 页面脚本都执行完毕后，再显示</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MacOS-关闭窗体，程序不退出\"><a href=\"#MacOS-关闭窗体，程序不退出\" class=\"headerlink\" title=\"MacOS 关闭窗体，程序不退出\"></a>MacOS 关闭窗体，程序不退出</h4><p>程序很简单，就一个主界面，期望关闭窗体后，自动退出程序。问题表现为 MacOS 系统关闭窗体后，程序仍然在 dock 中显示，需要手动在退出。</p>\n<p>这个问题主要是因为 MacOS 程序默认都是 dock 驻留的，不像 Windows，默认窗体关闭后等同于程序退出。</p>\n<p>如果程序所有窗体都关闭，程序默认退出，那需要手动加入退出方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 主进程</span></span><br><span class=\"line\">app.on(<span class=\"string\">'window-all-closed'</span>, () =&gt; &#123;</span><br><span class=\"line\">  app.quit()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"菜单配置问题导致闪退\"><a href=\"#菜单配置问题导致闪退\" class=\"headerlink\" title=\"菜单配置问题导致闪退\"></a>菜单配置问题导致闪退</h4><p>把没用的菜单配置删除后，有的菜单栏目为空，此时闪退。问题大致情况如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  role: <span class=\"string\">'help'</span>,</span><br><span class=\"line\">  submenu: [</span><br><span class=\"line\">    <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   label: 'Learn More',</span></span><br><span class=\"line\">    <span class=\"comment\">//   click () &#123;&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>help</code> 栏目下没有子菜单，此时会启动闪退。所以要么没有这个栏目，要么就要有子菜单。</p>\n<h4 id=\"程序中可以选中文字\"><a href=\"#程序中可以选中文字\" class=\"headerlink\" title=\"程序中可以选中文字\"></a>程序中可以选中文字</h4><p>在程序中，应该不能用鼠标将里面的文字选中、复制啥的。这体验就太差了。修改方法也简单，css 根节点处理下就好：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#app</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">user-select</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"减少包体积\"><a href=\"#减少包体积\" class=\"headerlink\" title=\"减少包体积\"></a>减少包体积</h4><p>原本 electron 的主进程代码和页面 App 代码在同一级别目录下，这样共用 <code>package.json</code> 和 <code>node_modules</code>。但是打包时候会把 <code>node_modules</code> 打入程序中，页面只需要编译后的代码打包到程序中就行了，所以不调整目录结构的话，无形中 <code>node_modules</code> 太大了。</p>\n<p>调整结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── electron     electron 程序代码</span><br><span class=\"line\">├── www          页面编译后代码</span><br><span class=\"line\">├── App          页面源码，编译到 www 目录</span><br><span class=\"line\">│   ├── node_modules</span><br><span class=\"line\">│   ├── package.json</span><br><span class=\"line\">│   └── src</span><br><span class=\"line\">├── build        electron-builder 资源目录</span><br><span class=\"line\">├── dist         electron-builder 程序打包目录</span><br><span class=\"line\">├── node_modules electron 的依赖</span><br><span class=\"line\">└── package.json</span><br></pre></td></tr></table></figure>\n\n<p>最终输出到程序包中，只有：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  <span class=\"string\">\"www/**/*\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"electron/*\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"package.json\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"node_modules\"</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>目前我只能做到如此。因为 electron 没发现什么优化方法。😂</p>\n<h4 id=\"程序打包\"><a href=\"#程序打包\" class=\"headerlink\" title=\"程序打包\"></a>程序打包</h4><p>官方推荐了三种工具打包，<code>electron-packager</code> <code>electron-forge</code> <code>electron-builder</code>。官网说明<a href=\"http://electronjs.org/docs/tutorial/application-packaging\" target=\"_blank\" rel=\"noopener\">见此</a>。</p>\n<p>曾经用过 <code>electron-packager</code>，大概是命令行打包，而且还只能打包当前系统的包。</p>\n<p>这次换了最流行的（star最多）的 <code>electron-builder</code>。发现 MacOS 下可以打所有系统的包，真挺方便的。</p>\n<p>唯独就是 linux 平台，问题稍多些。</p>\n<ul>\n<li>linux 下的各种格式的包，程序图标我至今没成功过；</li>\n<li><code>二进制</code> 包和 linux 通用的 <code>appImage</code> 包，没什么问题，就是 <code>appImage</code> 稍大一点；</li>\n<li>debian 系的 <code>deb</code> 包，要求 <code>package.json</code> 中 <code>author</code> 字段必须有 <code>name</code> 和 <code>email</code>。否则不能打包；</li>\n<li>ubuntu 的 <code>snap</code> 包，好像需要签名，我就没弄；</li>\n<li>redHat 系的 <code>rpm</code> 包，没打也没测试。</li>\n</ul>\n<p>针对 linux，我认为直接出 <code>二进制</code> 包和 linux 通用的 <code>appImage</code> 包就行了。基本上常见的系统都能覆盖到。</p>\n<p>如果要针对 ubuntu / linux Mint 处理，那么出 <code>deb</code> 包就好了。</p>\n<p>–END–</p>"},{"layout":"post","title":"记一次 https CA 中间证书的问题处理","date":"2019-04-08T23:30:00.000Z","_content":"\n公司CDN切换到一家新的服务商，原本切换很简单，没想到在证书上，还是遇到了些问题，这里记录下。\n\n<!-- more -->\n\n## 证书\n\n说到证书，就有必要说下具体的涉及东西。\n\n一般申请网站证书，都会有三样东西：\n\n* 私钥，也就是密钥了，这个可以自己生成好，再去申请，也可以直接通过第三方直接生成\n* 公钥-域名证书，这个是针对你的域名的，公开的\n* 公钥-CA中间证书，这个可能不会提供，可以自己获取到\n\n其中私钥是不能泄露的，剩下的公钥，就是要公开的。密钥严格来讲，最好自己生成。\n\n>像我这么懒的人，一般都是选择浏览器自动生成CSR。\n\nCA证书就是颁发域名证书的机构，比如叫做B机构。B要想证明你的域名证书有效，就要提供自己的证书。同理，B甚至需要更高一级A机构来证明自己。这样CA中间证书可能不止一个。\n\n> CA中间证书，一般我见过的绝大部分都是一个就行了，偶尔遇到过两个的，超过两个的暂时没见过。\n\n其中公钥（域名证书、CA证书）可以合并，将所有的公钥按顺序拼接就好。所以如果你的公钥只有一个文件，可以打看看下，是不是有多个段落。一般拼接好的证书，叫做链式证书（full_chain）。\n\n**这里就要有个经验了，不知道为啥，拼接两个证书的时候，都是域名证书在上，CA证书在下。顺序反了的话，可能有兼容性问题，比如 nginx 不识别啥的。**\n\n证书存储上，我认为直接保存链式证书比较方便，因为域名证书和CA证书混在一起，你可能后续就分不清了。\n\n> 经验所谈，一般内容较长的是域名证书，短一点的是CA证书。你可以看下自己的证书，是不是如此。\n\n## 商用证书\n\n自己弄的免费证书和花钱买的还真可能不一样。比如 [FreeSSL](https://freessl.cn/) 免费生成的，最终都是这样的结果：\n\n![img](https://cdn0.yukapril.com/blog/2019-04-08-https-ssl-1.png-wm.black)\n\n区分好了私钥、以及公钥的域名证书和CA中间证书。而且格式pem rsa的，直接就可以使用。更方便的是，如果点击下载，还会帮你把域名证书和CA中间证书整合在一个文件。\n\n买的商用证书就不一样了，首先不知道是什么加密格式，私钥是不太一样的，同时配套给了一个密码（当时研究出来了，现在只有上帝知道）。而且还遇到了上文提到的，不提供CA证书。\n\n> 现在猜测应该是 pkcs 加密证书，因为解密后，就不想保留原有加密的内容了。\n\n对于一些常规的 CDN 或者服务器证书配置，好像还可以支持，但是大部分情况，都需要转换下。由于我司的证书年代久远，当时转换方法我也就记不得了。总之很多时候都靠猜和运气。\n\n## CA中间证书的获取\n\n对于一些厂商可能不提供CA中间证书，这个也不用怕，因为都是公开的证书，可以获取的。\n\n当时获取我司的签发机构证书忘记了如何操作的。现在查询了下，大概有两种方法。\n\n### 浏览器查看并导出法\n\n这个原本 chrome 也支持的，但是好像某一个版本之后功能改版了，就不能导出了。\n\n现在主流的方案都是用 Firefox 来导出。\n\n![img](https://cdn0.yukapril.com/blog/2019-04-08-https-ssl-2.png-wm.black)\n\n在访问的域名前，点击绿色标志，并选择右箭头的功能。之后选择 “更多信息”。\n\n![img](https://cdn0.yukapril.com/blog/2019-04-08-https-ssl-3.png-wm.black)\n\n弹出证书框后，选择“安全”选项卡，里面就有“查看证书”。证书查看器中，有“详细信息”选项卡，里面有“导出”功能。支持导出域名证书以及证书链。\n\n这个方法好处是非常直观，导出的也是我们常见的pem（也可以导出其他格式）。\n\n缺点也很明显，假如这个网站是中间跳转页，那么一瞬间就跳转走了，根本没办法点击是不是...你说气人不...\n\n### openssl 导出法\n\n这个方法我玩的不是很溜，仅仅是知道有这么个方法，供参考吧。\n\n安装工具类 `openssl` 之后，可以用命令查询证书。\n\n```\nopenssl s_client -connect host:port -showcerts\n```\n\n比如查询我的网站就是：\n\n```\nopenssl s_client -connect www.yukapril.com:443 -showcerts\n```\n\n可以返回\n\n```\nCONNECTED(00000005)\ndepth=2 C = US, O = DigiCert Inc, OU = www.digicert.com, CN = DigiCert Global Root CA\nverify return:1\ndepth=1 C = US, O = DigiCert Inc, OU = www.digicert.com, CN = Encryption Everywhere DV TLS CA - G1\nverify return:1\ndepth=0 CN = img.ucdl.pp.uc.cn\nverify return:1\n---\nCertificate chain\n 0 s:/CN=img.ucdl.pp.uc.cn\n   【注册时的邮箱】:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=Encryption Everywhere DV TLS CA - G1\n-----BEGIN CERTIFICATE-----\nMIIHJTCCBg2gAwIBAgIQDypRrHvTErPCp3dELPGfVDANBgkqhkiG9w0BAQsFADBu\n...省略...\n-----END CERTIFICATE-----\n 1 s:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=Encryption Everywhere DV TLS CA - G1\n   【注册时的邮箱】:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert Global Root CA\n-----BEGIN CERTIFICATE-----\nMIIEqjCCA5KgAwIBAgIQAnmsRYvBskWr+YBTzSybsTANBgkqhkiG9w0BAQsFADBh\n...省略...\n-----END CERTIFICATE-----\n---\nServer certificate\nsubject=/CN=img.ucdl.pp.uc.cn\nissuer=/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=Encryption Everywhere DV TLS CA - G1\n---\nNo client certificate CA names sent\nServer Temp Key: ECDH, X25519, 253 bits\n---\nSSL handshake has read 3647 bytes and written 285 bytes\n---\nNew, TLSv1/SSLv3, Cipher is ECDHE-RSA-CHACHA20-POLY1305\nServer public key is 2048 bit\nSecure Renegotiation IS supported\nCompression: NONE\nExpansion: NONE\nNo ALPN negotiated\nSSL-Session:\n    Protocol  : TLSv1.2\n    Cipher    : ECDHE-RSA-CHACHA20-POLY1305\n    Session-ID: 508935B5D7781D4F3ECD9FEC381D92F4AB0BFF3761F9197D2CDC4531602A3C70\n    Session-ID-ctx:\n    Master-Key: 2DADAC30A131BE41B218D22003A5A8FDF084FFB6BE78DFC8DE143F30C70672A81AD140D4586C43460404E95130FAED8A\n    TLS session ticket lifetime hint: 900 (seconds)\n    TLS session ticket:\n    0000 - c7 f3 15 16 ca 6f 94 ed-9e 9e 8e b7 f6 f1 53 b1   .....o........S.\n    0010 - 4b 1a d2 46 da ce de 85-80 18 d4 f2 76 f4 3a e8   K..F........v.:.\n    0020 - b5 a3 b1 0f ee 04 25 9d-e8 d0 c9 16 f4 6d 16 7c   ......%......m.|\n    0030 - a1 8f 53 3c bb 1d 61 c4-e3 74 a4 2d d5 5c 0e 27   ..S<..a..t.-.\\.'\n    0040 - af 72 b4 ee 0a 35 87 05-ae d5 99 db a8 9f be 1c   .r...5..........\n    0050 - f5 ff ff 1d 8b 5b e2 ef-f4 fc ba 2c c9 fb 9d 16   .....[.....,....\n    0060 - 77 ba 74 b8 65 14 a9 85-cd ec c8 99 98 c0 81 3a   w.t.e..........:\n    0070 - 22 c7 61 68 7c 51 bc d9-3b 3d 4d c3 12 e5 98 81   \".ah|Q..;=M.....\n    0080 - 4e d1 05 4d 38 8d b5 17-88 50 10 f2 df 64 d5 93   N..M8....P...d..\n    0090 - 2c 14 17 31 e2 40 b0 5e-6c 6b e6 e5 de 0a d1 a1   ,..1.@.^lk......\n\n    Start Time: 1554736914\n    Timeout   : 7200 (sec)\n    Verify return code: 0 (ok)\n---\n```\n\n可以看到其中 `Certificate chain` 有两条记录，就是域名证书和CA证书了。\n\n> 有时候返回的感觉不是常见的pem x509证书，比如我司的就是如此。这个就不知道如何处理了。但是采用火狐浏览器获取的，就是一定可以是常见的pem证书。所以还是推荐浏览器方案。\n\n--END--","source":"_posts/2019/2019-04-08-https-ssl.md","raw":"---\nlayout: post\ntitle: 记一次 https CA 中间证书的问题处理\ndate: 2019-04-08 23:30:00 GMT+0800\ncategories: [技术]\ntags:  [CA, https, cert]\n---\n\n公司CDN切换到一家新的服务商，原本切换很简单，没想到在证书上，还是遇到了些问题，这里记录下。\n\n<!-- more -->\n\n## 证书\n\n说到证书，就有必要说下具体的涉及东西。\n\n一般申请网站证书，都会有三样东西：\n\n* 私钥，也就是密钥了，这个可以自己生成好，再去申请，也可以直接通过第三方直接生成\n* 公钥-域名证书，这个是针对你的域名的，公开的\n* 公钥-CA中间证书，这个可能不会提供，可以自己获取到\n\n其中私钥是不能泄露的，剩下的公钥，就是要公开的。密钥严格来讲，最好自己生成。\n\n>像我这么懒的人，一般都是选择浏览器自动生成CSR。\n\nCA证书就是颁发域名证书的机构，比如叫做B机构。B要想证明你的域名证书有效，就要提供自己的证书。同理，B甚至需要更高一级A机构来证明自己。这样CA中间证书可能不止一个。\n\n> CA中间证书，一般我见过的绝大部分都是一个就行了，偶尔遇到过两个的，超过两个的暂时没见过。\n\n其中公钥（域名证书、CA证书）可以合并，将所有的公钥按顺序拼接就好。所以如果你的公钥只有一个文件，可以打看看下，是不是有多个段落。一般拼接好的证书，叫做链式证书（full_chain）。\n\n**这里就要有个经验了，不知道为啥，拼接两个证书的时候，都是域名证书在上，CA证书在下。顺序反了的话，可能有兼容性问题，比如 nginx 不识别啥的。**\n\n证书存储上，我认为直接保存链式证书比较方便，因为域名证书和CA证书混在一起，你可能后续就分不清了。\n\n> 经验所谈，一般内容较长的是域名证书，短一点的是CA证书。你可以看下自己的证书，是不是如此。\n\n## 商用证书\n\n自己弄的免费证书和花钱买的还真可能不一样。比如 [FreeSSL](https://freessl.cn/) 免费生成的，最终都是这样的结果：\n\n![img](https://cdn0.yukapril.com/blog/2019-04-08-https-ssl-1.png-wm.black)\n\n区分好了私钥、以及公钥的域名证书和CA中间证书。而且格式pem rsa的，直接就可以使用。更方便的是，如果点击下载，还会帮你把域名证书和CA中间证书整合在一个文件。\n\n买的商用证书就不一样了，首先不知道是什么加密格式，私钥是不太一样的，同时配套给了一个密码（当时研究出来了，现在只有上帝知道）。而且还遇到了上文提到的，不提供CA证书。\n\n> 现在猜测应该是 pkcs 加密证书，因为解密后，就不想保留原有加密的内容了。\n\n对于一些常规的 CDN 或者服务器证书配置，好像还可以支持，但是大部分情况，都需要转换下。由于我司的证书年代久远，当时转换方法我也就记不得了。总之很多时候都靠猜和运气。\n\n## CA中间证书的获取\n\n对于一些厂商可能不提供CA中间证书，这个也不用怕，因为都是公开的证书，可以获取的。\n\n当时获取我司的签发机构证书忘记了如何操作的。现在查询了下，大概有两种方法。\n\n### 浏览器查看并导出法\n\n这个原本 chrome 也支持的，但是好像某一个版本之后功能改版了，就不能导出了。\n\n现在主流的方案都是用 Firefox 来导出。\n\n![img](https://cdn0.yukapril.com/blog/2019-04-08-https-ssl-2.png-wm.black)\n\n在访问的域名前，点击绿色标志，并选择右箭头的功能。之后选择 “更多信息”。\n\n![img](https://cdn0.yukapril.com/blog/2019-04-08-https-ssl-3.png-wm.black)\n\n弹出证书框后，选择“安全”选项卡，里面就有“查看证书”。证书查看器中，有“详细信息”选项卡，里面有“导出”功能。支持导出域名证书以及证书链。\n\n这个方法好处是非常直观，导出的也是我们常见的pem（也可以导出其他格式）。\n\n缺点也很明显，假如这个网站是中间跳转页，那么一瞬间就跳转走了，根本没办法点击是不是...你说气人不...\n\n### openssl 导出法\n\n这个方法我玩的不是很溜，仅仅是知道有这么个方法，供参考吧。\n\n安装工具类 `openssl` 之后，可以用命令查询证书。\n\n```\nopenssl s_client -connect host:port -showcerts\n```\n\n比如查询我的网站就是：\n\n```\nopenssl s_client -connect www.yukapril.com:443 -showcerts\n```\n\n可以返回\n\n```\nCONNECTED(00000005)\ndepth=2 C = US, O = DigiCert Inc, OU = www.digicert.com, CN = DigiCert Global Root CA\nverify return:1\ndepth=1 C = US, O = DigiCert Inc, OU = www.digicert.com, CN = Encryption Everywhere DV TLS CA - G1\nverify return:1\ndepth=0 CN = img.ucdl.pp.uc.cn\nverify return:1\n---\nCertificate chain\n 0 s:/CN=img.ucdl.pp.uc.cn\n   【注册时的邮箱】:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=Encryption Everywhere DV TLS CA - G1\n-----BEGIN CERTIFICATE-----\nMIIHJTCCBg2gAwIBAgIQDypRrHvTErPCp3dELPGfVDANBgkqhkiG9w0BAQsFADBu\n...省略...\n-----END CERTIFICATE-----\n 1 s:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=Encryption Everywhere DV TLS CA - G1\n   【注册时的邮箱】:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert Global Root CA\n-----BEGIN CERTIFICATE-----\nMIIEqjCCA5KgAwIBAgIQAnmsRYvBskWr+YBTzSybsTANBgkqhkiG9w0BAQsFADBh\n...省略...\n-----END CERTIFICATE-----\n---\nServer certificate\nsubject=/CN=img.ucdl.pp.uc.cn\nissuer=/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=Encryption Everywhere DV TLS CA - G1\n---\nNo client certificate CA names sent\nServer Temp Key: ECDH, X25519, 253 bits\n---\nSSL handshake has read 3647 bytes and written 285 bytes\n---\nNew, TLSv1/SSLv3, Cipher is ECDHE-RSA-CHACHA20-POLY1305\nServer public key is 2048 bit\nSecure Renegotiation IS supported\nCompression: NONE\nExpansion: NONE\nNo ALPN negotiated\nSSL-Session:\n    Protocol  : TLSv1.2\n    Cipher    : ECDHE-RSA-CHACHA20-POLY1305\n    Session-ID: 508935B5D7781D4F3ECD9FEC381D92F4AB0BFF3761F9197D2CDC4531602A3C70\n    Session-ID-ctx:\n    Master-Key: 2DADAC30A131BE41B218D22003A5A8FDF084FFB6BE78DFC8DE143F30C70672A81AD140D4586C43460404E95130FAED8A\n    TLS session ticket lifetime hint: 900 (seconds)\n    TLS session ticket:\n    0000 - c7 f3 15 16 ca 6f 94 ed-9e 9e 8e b7 f6 f1 53 b1   .....o........S.\n    0010 - 4b 1a d2 46 da ce de 85-80 18 d4 f2 76 f4 3a e8   K..F........v.:.\n    0020 - b5 a3 b1 0f ee 04 25 9d-e8 d0 c9 16 f4 6d 16 7c   ......%......m.|\n    0030 - a1 8f 53 3c bb 1d 61 c4-e3 74 a4 2d d5 5c 0e 27   ..S<..a..t.-.\\.'\n    0040 - af 72 b4 ee 0a 35 87 05-ae d5 99 db a8 9f be 1c   .r...5..........\n    0050 - f5 ff ff 1d 8b 5b e2 ef-f4 fc ba 2c c9 fb 9d 16   .....[.....,....\n    0060 - 77 ba 74 b8 65 14 a9 85-cd ec c8 99 98 c0 81 3a   w.t.e..........:\n    0070 - 22 c7 61 68 7c 51 bc d9-3b 3d 4d c3 12 e5 98 81   \".ah|Q..;=M.....\n    0080 - 4e d1 05 4d 38 8d b5 17-88 50 10 f2 df 64 d5 93   N..M8....P...d..\n    0090 - 2c 14 17 31 e2 40 b0 5e-6c 6b e6 e5 de 0a d1 a1   ,..1.@.^lk......\n\n    Start Time: 1554736914\n    Timeout   : 7200 (sec)\n    Verify return code: 0 (ok)\n---\n```\n\n可以看到其中 `Certificate chain` 有两条记录，就是域名证书和CA证书了。\n\n> 有时候返回的感觉不是常见的pem x509证书，比如我司的就是如此。这个就不知道如何处理了。但是采用火狐浏览器获取的，就是一定可以是常见的pem证书。所以还是推荐浏览器方案。\n\n--END--","slug":"2019-2019-04-08-https-ssl","published":1,"updated":"2020-03-06T01:29:32.506Z","comments":1,"photos":[],"link":"","_id":"cka5ik8cw0066nybgut5i5u07","content":"<p>公司CDN切换到一家新的服务商，原本切换很简单，没想到在证书上，还是遇到了些问题，这里记录下。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"证书\"><a href=\"#证书\" class=\"headerlink\" title=\"证书\"></a>证书</h2><p>说到证书，就有必要说下具体的涉及东西。</p>\n<p>一般申请网站证书，都会有三样东西：</p>\n<ul>\n<li>私钥，也就是密钥了，这个可以自己生成好，再去申请，也可以直接通过第三方直接生成</li>\n<li>公钥-域名证书，这个是针对你的域名的，公开的</li>\n<li>公钥-CA中间证书，这个可能不会提供，可以自己获取到</li>\n</ul>\n<p>其中私钥是不能泄露的，剩下的公钥，就是要公开的。密钥严格来讲，最好自己生成。</p>\n<blockquote>\n<p>像我这么懒的人，一般都是选择浏览器自动生成CSR。</p>\n</blockquote>\n<p>CA证书就是颁发域名证书的机构，比如叫做B机构。B要想证明你的域名证书有效，就要提供自己的证书。同理，B甚至需要更高一级A机构来证明自己。这样CA中间证书可能不止一个。</p>\n<blockquote>\n<p>CA中间证书，一般我见过的绝大部分都是一个就行了，偶尔遇到过两个的，超过两个的暂时没见过。</p>\n</blockquote>\n<p>其中公钥（域名证书、CA证书）可以合并，将所有的公钥按顺序拼接就好。所以如果你的公钥只有一个文件，可以打看看下，是不是有多个段落。一般拼接好的证书，叫做链式证书（full_chain）。</p>\n<p><strong>这里就要有个经验了，不知道为啥，拼接两个证书的时候，都是域名证书在上，CA证书在下。顺序反了的话，可能有兼容性问题，比如 nginx 不识别啥的。</strong></p>\n<p>证书存储上，我认为直接保存链式证书比较方便，因为域名证书和CA证书混在一起，你可能后续就分不清了。</p>\n<blockquote>\n<p>经验所谈，一般内容较长的是域名证书，短一点的是CA证书。你可以看下自己的证书，是不是如此。</p>\n</blockquote>\n<h2 id=\"商用证书\"><a href=\"#商用证书\" class=\"headerlink\" title=\"商用证书\"></a>商用证书</h2><p>自己弄的免费证书和花钱买的还真可能不一样。比如 <a href=\"https://freessl.cn/\" target=\"_blank\" rel=\"noopener\">FreeSSL</a> 免费生成的，最终都是这样的结果：</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-04-08-https-ssl-1.png-wm.black\" alt=\"img\"></p>\n<p>区分好了私钥、以及公钥的域名证书和CA中间证书。而且格式pem rsa的，直接就可以使用。更方便的是，如果点击下载，还会帮你把域名证书和CA中间证书整合在一个文件。</p>\n<p>买的商用证书就不一样了，首先不知道是什么加密格式，私钥是不太一样的，同时配套给了一个密码（当时研究出来了，现在只有上帝知道）。而且还遇到了上文提到的，不提供CA证书。</p>\n<blockquote>\n<p>现在猜测应该是 pkcs 加密证书，因为解密后，就不想保留原有加密的内容了。</p>\n</blockquote>\n<p>对于一些常规的 CDN 或者服务器证书配置，好像还可以支持，但是大部分情况，都需要转换下。由于我司的证书年代久远，当时转换方法我也就记不得了。总之很多时候都靠猜和运气。</p>\n<h2 id=\"CA中间证书的获取\"><a href=\"#CA中间证书的获取\" class=\"headerlink\" title=\"CA中间证书的获取\"></a>CA中间证书的获取</h2><p>对于一些厂商可能不提供CA中间证书，这个也不用怕，因为都是公开的证书，可以获取的。</p>\n<p>当时获取我司的签发机构证书忘记了如何操作的。现在查询了下，大概有两种方法。</p>\n<h3 id=\"浏览器查看并导出法\"><a href=\"#浏览器查看并导出法\" class=\"headerlink\" title=\"浏览器查看并导出法\"></a>浏览器查看并导出法</h3><p>这个原本 chrome 也支持的，但是好像某一个版本之后功能改版了，就不能导出了。</p>\n<p>现在主流的方案都是用 Firefox 来导出。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-04-08-https-ssl-2.png-wm.black\" alt=\"img\"></p>\n<p>在访问的域名前，点击绿色标志，并选择右箭头的功能。之后选择 “更多信息”。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-04-08-https-ssl-3.png-wm.black\" alt=\"img\"></p>\n<p>弹出证书框后，选择“安全”选项卡，里面就有“查看证书”。证书查看器中，有“详细信息”选项卡，里面有“导出”功能。支持导出域名证书以及证书链。</p>\n<p>这个方法好处是非常直观，导出的也是我们常见的pem（也可以导出其他格式）。</p>\n<p>缺点也很明显，假如这个网站是中间跳转页，那么一瞬间就跳转走了，根本没办法点击是不是…你说气人不…</p>\n<h3 id=\"openssl-导出法\"><a href=\"#openssl-导出法\" class=\"headerlink\" title=\"openssl 导出法\"></a>openssl 导出法</h3><p>这个方法我玩的不是很溜，仅仅是知道有这么个方法，供参考吧。</p>\n<p>安装工具类 <code>openssl</code> 之后，可以用命令查询证书。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl s_client -connect host:port -showcerts</span><br></pre></td></tr></table></figure>\n\n<p>比如查询我的网站就是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl s_client -connect www.yukapril.com:443 -showcerts</span><br></pre></td></tr></table></figure>\n\n<p>可以返回</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONNECTED(00000005)</span><br><span class=\"line\">depth=2 C = US, O = DigiCert Inc, OU = www.digicert.com, CN = DigiCert Global Root CA</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">depth=1 C = US, O = DigiCert Inc, OU = www.digicert.com, CN = Encryption Everywhere DV TLS CA - G1</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">depth=0 CN = img.ucdl.pp.uc.cn</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">---</span><br><span class=\"line\">Certificate chain</span><br><span class=\"line\"> 0 s:/CN=img.ucdl.pp.uc.cn</span><br><span class=\"line\">   【注册时的邮箱】:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=Encryption Everywhere DV TLS CA - G1</span><br><span class=\"line\">-----BEGIN CERTIFICATE-----</span><br><span class=\"line\">MIIHJTCCBg2gAwIBAgIQDypRrHvTErPCp3dELPGfVDANBgkqhkiG9w0BAQsFADBu</span><br><span class=\"line\">...省略...</span><br><span class=\"line\">-----END CERTIFICATE-----</span><br><span class=\"line\"> 1 s:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=Encryption Everywhere DV TLS CA - G1</span><br><span class=\"line\">   【注册时的邮箱】:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert Global Root CA</span><br><span class=\"line\">-----BEGIN CERTIFICATE-----</span><br><span class=\"line\">MIIEqjCCA5KgAwIBAgIQAnmsRYvBskWr+YBTzSybsTANBgkqhkiG9w0BAQsFADBh</span><br><span class=\"line\">...省略...</span><br><span class=\"line\">-----END CERTIFICATE-----</span><br><span class=\"line\">---</span><br><span class=\"line\">Server certificate</span><br><span class=\"line\">subject=/CN=img.ucdl.pp.uc.cn</span><br><span class=\"line\">issuer=/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=Encryption Everywhere DV TLS CA - G1</span><br><span class=\"line\">---</span><br><span class=\"line\">No client certificate CA names sent</span><br><span class=\"line\">Server Temp Key: ECDH, X25519, 253 bits</span><br><span class=\"line\">---</span><br><span class=\"line\">SSL handshake has read 3647 bytes and written 285 bytes</span><br><span class=\"line\">---</span><br><span class=\"line\">New, TLSv1/SSLv3, Cipher is ECDHE-RSA-CHACHA20-POLY1305</span><br><span class=\"line\">Server public key is 2048 bit</span><br><span class=\"line\">Secure Renegotiation IS supported</span><br><span class=\"line\">Compression: NONE</span><br><span class=\"line\">Expansion: NONE</span><br><span class=\"line\">No ALPN negotiated</span><br><span class=\"line\">SSL-Session:</span><br><span class=\"line\">    Protocol  : TLSv1.2</span><br><span class=\"line\">    Cipher    : ECDHE-RSA-CHACHA20-POLY1305</span><br><span class=\"line\">    Session-ID: 508935B5D7781D4F3ECD9FEC381D92F4AB0BFF3761F9197D2CDC4531602A3C70</span><br><span class=\"line\">    Session-ID-ctx:</span><br><span class=\"line\">    Master-Key: 2DADAC30A131BE41B218D22003A5A8FDF084FFB6BE78DFC8DE143F30C70672A81AD140D4586C43460404E95130FAED8A</span><br><span class=\"line\">    TLS session ticket lifetime hint: 900 (seconds)</span><br><span class=\"line\">    TLS session ticket:</span><br><span class=\"line\">    0000 - c7 f3 15 16 ca 6f 94 ed-9e 9e 8e b7 f6 f1 53 b1   .....o........S.</span><br><span class=\"line\">    0010 - 4b 1a d2 46 da ce de 85-80 18 d4 f2 76 f4 3a e8   K..F........v.:.</span><br><span class=\"line\">    0020 - b5 a3 b1 0f ee 04 25 9d-e8 d0 c9 16 f4 6d 16 7c   ......%......m.|</span><br><span class=\"line\">    0030 - a1 8f 53 3c bb 1d 61 c4-e3 74 a4 2d d5 5c 0e 27   ..S&lt;..a..t.-.\\.&apos;</span><br><span class=\"line\">    0040 - af 72 b4 ee 0a 35 87 05-ae d5 99 db a8 9f be 1c   .r...5..........</span><br><span class=\"line\">    0050 - f5 ff ff 1d 8b 5b e2 ef-f4 fc ba 2c c9 fb 9d 16   .....[.....,....</span><br><span class=\"line\">    0060 - 77 ba 74 b8 65 14 a9 85-cd ec c8 99 98 c0 81 3a   w.t.e..........:</span><br><span class=\"line\">    0070 - 22 c7 61 68 7c 51 bc d9-3b 3d 4d c3 12 e5 98 81   &quot;.ah|Q..;=M.....</span><br><span class=\"line\">    0080 - 4e d1 05 4d 38 8d b5 17-88 50 10 f2 df 64 d5 93   N..M8....P...d..</span><br><span class=\"line\">    0090 - 2c 14 17 31 e2 40 b0 5e-6c 6b e6 e5 de 0a d1 a1   ,..1.@.^lk......</span><br><span class=\"line\"></span><br><span class=\"line\">    Start Time: 1554736914</span><br><span class=\"line\">    Timeout   : 7200 (sec)</span><br><span class=\"line\">    Verify return code: 0 (ok)</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>可以看到其中 <code>Certificate chain</code> 有两条记录，就是域名证书和CA证书了。</p>\n<blockquote>\n<p>有时候返回的感觉不是常见的pem x509证书，比如我司的就是如此。这个就不知道如何处理了。但是采用火狐浏览器获取的，就是一定可以是常见的pem证书。所以还是推荐浏览器方案。</p>\n</blockquote>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>公司CDN切换到一家新的服务商，原本切换很简单，没想到在证书上，还是遇到了些问题，这里记录下。</p>","more":"<h2 id=\"证书\"><a href=\"#证书\" class=\"headerlink\" title=\"证书\"></a>证书</h2><p>说到证书，就有必要说下具体的涉及东西。</p>\n<p>一般申请网站证书，都会有三样东西：</p>\n<ul>\n<li>私钥，也就是密钥了，这个可以自己生成好，再去申请，也可以直接通过第三方直接生成</li>\n<li>公钥-域名证书，这个是针对你的域名的，公开的</li>\n<li>公钥-CA中间证书，这个可能不会提供，可以自己获取到</li>\n</ul>\n<p>其中私钥是不能泄露的，剩下的公钥，就是要公开的。密钥严格来讲，最好自己生成。</p>\n<blockquote>\n<p>像我这么懒的人，一般都是选择浏览器自动生成CSR。</p>\n</blockquote>\n<p>CA证书就是颁发域名证书的机构，比如叫做B机构。B要想证明你的域名证书有效，就要提供自己的证书。同理，B甚至需要更高一级A机构来证明自己。这样CA中间证书可能不止一个。</p>\n<blockquote>\n<p>CA中间证书，一般我见过的绝大部分都是一个就行了，偶尔遇到过两个的，超过两个的暂时没见过。</p>\n</blockquote>\n<p>其中公钥（域名证书、CA证书）可以合并，将所有的公钥按顺序拼接就好。所以如果你的公钥只有一个文件，可以打看看下，是不是有多个段落。一般拼接好的证书，叫做链式证书（full_chain）。</p>\n<p><strong>这里就要有个经验了，不知道为啥，拼接两个证书的时候，都是域名证书在上，CA证书在下。顺序反了的话，可能有兼容性问题，比如 nginx 不识别啥的。</strong></p>\n<p>证书存储上，我认为直接保存链式证书比较方便，因为域名证书和CA证书混在一起，你可能后续就分不清了。</p>\n<blockquote>\n<p>经验所谈，一般内容较长的是域名证书，短一点的是CA证书。你可以看下自己的证书，是不是如此。</p>\n</blockquote>\n<h2 id=\"商用证书\"><a href=\"#商用证书\" class=\"headerlink\" title=\"商用证书\"></a>商用证书</h2><p>自己弄的免费证书和花钱买的还真可能不一样。比如 <a href=\"https://freessl.cn/\" target=\"_blank\" rel=\"noopener\">FreeSSL</a> 免费生成的，最终都是这样的结果：</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-04-08-https-ssl-1.png-wm.black\" alt=\"img\"></p>\n<p>区分好了私钥、以及公钥的域名证书和CA中间证书。而且格式pem rsa的，直接就可以使用。更方便的是，如果点击下载，还会帮你把域名证书和CA中间证书整合在一个文件。</p>\n<p>买的商用证书就不一样了，首先不知道是什么加密格式，私钥是不太一样的，同时配套给了一个密码（当时研究出来了，现在只有上帝知道）。而且还遇到了上文提到的，不提供CA证书。</p>\n<blockquote>\n<p>现在猜测应该是 pkcs 加密证书，因为解密后，就不想保留原有加密的内容了。</p>\n</blockquote>\n<p>对于一些常规的 CDN 或者服务器证书配置，好像还可以支持，但是大部分情况，都需要转换下。由于我司的证书年代久远，当时转换方法我也就记不得了。总之很多时候都靠猜和运气。</p>\n<h2 id=\"CA中间证书的获取\"><a href=\"#CA中间证书的获取\" class=\"headerlink\" title=\"CA中间证书的获取\"></a>CA中间证书的获取</h2><p>对于一些厂商可能不提供CA中间证书，这个也不用怕，因为都是公开的证书，可以获取的。</p>\n<p>当时获取我司的签发机构证书忘记了如何操作的。现在查询了下，大概有两种方法。</p>\n<h3 id=\"浏览器查看并导出法\"><a href=\"#浏览器查看并导出法\" class=\"headerlink\" title=\"浏览器查看并导出法\"></a>浏览器查看并导出法</h3><p>这个原本 chrome 也支持的，但是好像某一个版本之后功能改版了，就不能导出了。</p>\n<p>现在主流的方案都是用 Firefox 来导出。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-04-08-https-ssl-2.png-wm.black\" alt=\"img\"></p>\n<p>在访问的域名前，点击绿色标志，并选择右箭头的功能。之后选择 “更多信息”。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-04-08-https-ssl-3.png-wm.black\" alt=\"img\"></p>\n<p>弹出证书框后，选择“安全”选项卡，里面就有“查看证书”。证书查看器中，有“详细信息”选项卡，里面有“导出”功能。支持导出域名证书以及证书链。</p>\n<p>这个方法好处是非常直观，导出的也是我们常见的pem（也可以导出其他格式）。</p>\n<p>缺点也很明显，假如这个网站是中间跳转页，那么一瞬间就跳转走了，根本没办法点击是不是…你说气人不…</p>\n<h3 id=\"openssl-导出法\"><a href=\"#openssl-导出法\" class=\"headerlink\" title=\"openssl 导出法\"></a>openssl 导出法</h3><p>这个方法我玩的不是很溜，仅仅是知道有这么个方法，供参考吧。</p>\n<p>安装工具类 <code>openssl</code> 之后，可以用命令查询证书。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl s_client -connect host:port -showcerts</span><br></pre></td></tr></table></figure>\n\n<p>比如查询我的网站就是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl s_client -connect www.yukapril.com:443 -showcerts</span><br></pre></td></tr></table></figure>\n\n<p>可以返回</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONNECTED(00000005)</span><br><span class=\"line\">depth=2 C = US, O = DigiCert Inc, OU = www.digicert.com, CN = DigiCert Global Root CA</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">depth=1 C = US, O = DigiCert Inc, OU = www.digicert.com, CN = Encryption Everywhere DV TLS CA - G1</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">depth=0 CN = img.ucdl.pp.uc.cn</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">---</span><br><span class=\"line\">Certificate chain</span><br><span class=\"line\"> 0 s:/CN=img.ucdl.pp.uc.cn</span><br><span class=\"line\">   【注册时的邮箱】:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=Encryption Everywhere DV TLS CA - G1</span><br><span class=\"line\">-----BEGIN CERTIFICATE-----</span><br><span class=\"line\">MIIHJTCCBg2gAwIBAgIQDypRrHvTErPCp3dELPGfVDANBgkqhkiG9w0BAQsFADBu</span><br><span class=\"line\">...省略...</span><br><span class=\"line\">-----END CERTIFICATE-----</span><br><span class=\"line\"> 1 s:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=Encryption Everywhere DV TLS CA - G1</span><br><span class=\"line\">   【注册时的邮箱】:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert Global Root CA</span><br><span class=\"line\">-----BEGIN CERTIFICATE-----</span><br><span class=\"line\">MIIEqjCCA5KgAwIBAgIQAnmsRYvBskWr+YBTzSybsTANBgkqhkiG9w0BAQsFADBh</span><br><span class=\"line\">...省略...</span><br><span class=\"line\">-----END CERTIFICATE-----</span><br><span class=\"line\">---</span><br><span class=\"line\">Server certificate</span><br><span class=\"line\">subject=/CN=img.ucdl.pp.uc.cn</span><br><span class=\"line\">issuer=/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=Encryption Everywhere DV TLS CA - G1</span><br><span class=\"line\">---</span><br><span class=\"line\">No client certificate CA names sent</span><br><span class=\"line\">Server Temp Key: ECDH, X25519, 253 bits</span><br><span class=\"line\">---</span><br><span class=\"line\">SSL handshake has read 3647 bytes and written 285 bytes</span><br><span class=\"line\">---</span><br><span class=\"line\">New, TLSv1/SSLv3, Cipher is ECDHE-RSA-CHACHA20-POLY1305</span><br><span class=\"line\">Server public key is 2048 bit</span><br><span class=\"line\">Secure Renegotiation IS supported</span><br><span class=\"line\">Compression: NONE</span><br><span class=\"line\">Expansion: NONE</span><br><span class=\"line\">No ALPN negotiated</span><br><span class=\"line\">SSL-Session:</span><br><span class=\"line\">    Protocol  : TLSv1.2</span><br><span class=\"line\">    Cipher    : ECDHE-RSA-CHACHA20-POLY1305</span><br><span class=\"line\">    Session-ID: 508935B5D7781D4F3ECD9FEC381D92F4AB0BFF3761F9197D2CDC4531602A3C70</span><br><span class=\"line\">    Session-ID-ctx:</span><br><span class=\"line\">    Master-Key: 2DADAC30A131BE41B218D22003A5A8FDF084FFB6BE78DFC8DE143F30C70672A81AD140D4586C43460404E95130FAED8A</span><br><span class=\"line\">    TLS session ticket lifetime hint: 900 (seconds)</span><br><span class=\"line\">    TLS session ticket:</span><br><span class=\"line\">    0000 - c7 f3 15 16 ca 6f 94 ed-9e 9e 8e b7 f6 f1 53 b1   .....o........S.</span><br><span class=\"line\">    0010 - 4b 1a d2 46 da ce de 85-80 18 d4 f2 76 f4 3a e8   K..F........v.:.</span><br><span class=\"line\">    0020 - b5 a3 b1 0f ee 04 25 9d-e8 d0 c9 16 f4 6d 16 7c   ......%......m.|</span><br><span class=\"line\">    0030 - a1 8f 53 3c bb 1d 61 c4-e3 74 a4 2d d5 5c 0e 27   ..S&lt;..a..t.-.\\.&apos;</span><br><span class=\"line\">    0040 - af 72 b4 ee 0a 35 87 05-ae d5 99 db a8 9f be 1c   .r...5..........</span><br><span class=\"line\">    0050 - f5 ff ff 1d 8b 5b e2 ef-f4 fc ba 2c c9 fb 9d 16   .....[.....,....</span><br><span class=\"line\">    0060 - 77 ba 74 b8 65 14 a9 85-cd ec c8 99 98 c0 81 3a   w.t.e..........:</span><br><span class=\"line\">    0070 - 22 c7 61 68 7c 51 bc d9-3b 3d 4d c3 12 e5 98 81   &quot;.ah|Q..;=M.....</span><br><span class=\"line\">    0080 - 4e d1 05 4d 38 8d b5 17-88 50 10 f2 df 64 d5 93   N..M8....P...d..</span><br><span class=\"line\">    0090 - 2c 14 17 31 e2 40 b0 5e-6c 6b e6 e5 de 0a d1 a1   ,..1.@.^lk......</span><br><span class=\"line\"></span><br><span class=\"line\">    Start Time: 1554736914</span><br><span class=\"line\">    Timeout   : 7200 (sec)</span><br><span class=\"line\">    Verify return code: 0 (ok)</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>可以看到其中 <code>Certificate chain</code> 有两条记录，就是域名证书和CA证书了。</p>\n<blockquote>\n<p>有时候返回的感觉不是常见的pem x509证书，比如我司的就是如此。这个就不知道如何处理了。但是采用火狐浏览器获取的，就是一定可以是常见的pem证书。所以还是推荐浏览器方案。</p>\n</blockquote>\n<p>–END–</p>"},{"layout":"post","title":"Office 开发者子账号使用方法","date":"2019-04-10T23:09:00.000Z","_content":"\n新入手一个 Office 开发者账号，支持开通子账号，特将使用方法记录下。\n\n<!-- more -->\n\n## 风险提示\n\n使用子账号，母账号是可以看到内容数据的，比如 OneDrive 里面的内容。所以在子账号内不要上传隐私内容。\n\n虽然可以查阅，但是我一直不知道如何查阅，而且作为一个有道德的工程师，我是不会查阅我的子账号内容的。\n\n## 使用说明\n\n每个子账号，可以在 5 台设备上使用。设备包括 Windows / MacOS / iPhone / Android 等。\n\nOneDrive 容量为 5TB。\n\n## 下载\n\n访问 [https://products.office.com](https://products.office.com)，直接登录账号。首次登录的话，需要修改密码。\n\n打开页面后，点击右上角“安装Office”-“Office 365应用”，就可以完成下载了。\n\n![](https://cdn0.yukapril.com/blog/2019-04-10-office-e3-1.png-wm.black)\n\n## 安装\n\n下载好了直接安装就行。\n\n> Windows 和 MacOS 支持的软件不同。\n> \n> MacOS 只有 Word / Excel / PowerPoint / Outlook / OneNote / OneDrive。\n\n## 激活\n\n安装好后，启动任意一个软件。\n\n点击**选择激活**！点击**选择激活**！点击**选择激活**。重要的事情说三遍。不是点击登录。\n\n之后登录你的账号就好了。\n\n> Office 有激活功能，也有登录功能。\n> \n> 激活-就是为了产品激活\n> 登录-就是为了账号数据同步\n\n之后就可以在“关于”中，查看到激活结果。\n\n![](https://cdn0.yukapril.com/blog/2019-04-10-office-e3-2.png-wm.black)\n\n--END--","source":"_posts/2019/2019-04-10-office-e3.md","raw":"---\nlayout: post\ntitle: Office 开发者子账号使用方法\ndate: 2019-04-10 23:09:00 GMT+0800\ncategories: [软件]\ntags:  [office]\n---\n\n新入手一个 Office 开发者账号，支持开通子账号，特将使用方法记录下。\n\n<!-- more -->\n\n## 风险提示\n\n使用子账号，母账号是可以看到内容数据的，比如 OneDrive 里面的内容。所以在子账号内不要上传隐私内容。\n\n虽然可以查阅，但是我一直不知道如何查阅，而且作为一个有道德的工程师，我是不会查阅我的子账号内容的。\n\n## 使用说明\n\n每个子账号，可以在 5 台设备上使用。设备包括 Windows / MacOS / iPhone / Android 等。\n\nOneDrive 容量为 5TB。\n\n## 下载\n\n访问 [https://products.office.com](https://products.office.com)，直接登录账号。首次登录的话，需要修改密码。\n\n打开页面后，点击右上角“安装Office”-“Office 365应用”，就可以完成下载了。\n\n![](https://cdn0.yukapril.com/blog/2019-04-10-office-e3-1.png-wm.black)\n\n## 安装\n\n下载好了直接安装就行。\n\n> Windows 和 MacOS 支持的软件不同。\n> \n> MacOS 只有 Word / Excel / PowerPoint / Outlook / OneNote / OneDrive。\n\n## 激活\n\n安装好后，启动任意一个软件。\n\n点击**选择激活**！点击**选择激活**！点击**选择激活**。重要的事情说三遍。不是点击登录。\n\n之后登录你的账号就好了。\n\n> Office 有激活功能，也有登录功能。\n> \n> 激活-就是为了产品激活\n> 登录-就是为了账号数据同步\n\n之后就可以在“关于”中，查看到激活结果。\n\n![](https://cdn0.yukapril.com/blog/2019-04-10-office-e3-2.png-wm.black)\n\n--END--","slug":"2019-2019-04-10-office-e3","published":1,"updated":"2020-03-02T07:16:34.735Z","comments":1,"photos":[],"link":"","_id":"cka5ik8cx0069nybgq3o8j33p","content":"<p>新入手一个 Office 开发者账号，支持开通子账号，特将使用方法记录下。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"风险提示\"><a href=\"#风险提示\" class=\"headerlink\" title=\"风险提示\"></a>风险提示</h2><p>使用子账号，母账号是可以看到内容数据的，比如 OneDrive 里面的内容。所以在子账号内不要上传隐私内容。</p>\n<p>虽然可以查阅，但是我一直不知道如何查阅，而且作为一个有道德的工程师，我是不会查阅我的子账号内容的。</p>\n<h2 id=\"使用说明\"><a href=\"#使用说明\" class=\"headerlink\" title=\"使用说明\"></a>使用说明</h2><p>每个子账号，可以在 5 台设备上使用。设备包括 Windows / MacOS / iPhone / Android 等。</p>\n<p>OneDrive 容量为 5TB。</p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>访问 <a href=\"https://products.office.com\" target=\"_blank\" rel=\"noopener\">https://products.office.com</a>，直接登录账号。首次登录的话，需要修改密码。</p>\n<p>打开页面后，点击右上角“安装Office”-“Office 365应用”，就可以完成下载了。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-04-10-office-e3-1.png-wm.black\" alt></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>下载好了直接安装就行。</p>\n<blockquote>\n<p>Windows 和 MacOS 支持的软件不同。</p>\n<p>MacOS 只有 Word / Excel / PowerPoint / Outlook / OneNote / OneDrive。</p>\n</blockquote>\n<h2 id=\"激活\"><a href=\"#激活\" class=\"headerlink\" title=\"激活\"></a>激活</h2><p>安装好后，启动任意一个软件。</p>\n<p>点击<strong>选择激活</strong>！点击<strong>选择激活</strong>！点击<strong>选择激活</strong>。重要的事情说三遍。不是点击登录。</p>\n<p>之后登录你的账号就好了。</p>\n<blockquote>\n<p>Office 有激活功能，也有登录功能。</p>\n<p>激活-就是为了产品激活<br>登录-就是为了账号数据同步</p>\n</blockquote>\n<p>之后就可以在“关于”中，查看到激活结果。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-04-10-office-e3-2.png-wm.black\" alt></p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>新入手一个 Office 开发者账号，支持开通子账号，特将使用方法记录下。</p>","more":"<h2 id=\"风险提示\"><a href=\"#风险提示\" class=\"headerlink\" title=\"风险提示\"></a>风险提示</h2><p>使用子账号，母账号是可以看到内容数据的，比如 OneDrive 里面的内容。所以在子账号内不要上传隐私内容。</p>\n<p>虽然可以查阅，但是我一直不知道如何查阅，而且作为一个有道德的工程师，我是不会查阅我的子账号内容的。</p>\n<h2 id=\"使用说明\"><a href=\"#使用说明\" class=\"headerlink\" title=\"使用说明\"></a>使用说明</h2><p>每个子账号，可以在 5 台设备上使用。设备包括 Windows / MacOS / iPhone / Android 等。</p>\n<p>OneDrive 容量为 5TB。</p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>访问 <a href=\"https://products.office.com\" target=\"_blank\" rel=\"noopener\">https://products.office.com</a>，直接登录账号。首次登录的话，需要修改密码。</p>\n<p>打开页面后，点击右上角“安装Office”-“Office 365应用”，就可以完成下载了。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-04-10-office-e3-1.png-wm.black\" alt></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>下载好了直接安装就行。</p>\n<blockquote>\n<p>Windows 和 MacOS 支持的软件不同。</p>\n<p>MacOS 只有 Word / Excel / PowerPoint / Outlook / OneNote / OneDrive。</p>\n</blockquote>\n<h2 id=\"激活\"><a href=\"#激活\" class=\"headerlink\" title=\"激活\"></a>激活</h2><p>安装好后，启动任意一个软件。</p>\n<p>点击<strong>选择激活</strong>！点击<strong>选择激活</strong>！点击<strong>选择激活</strong>。重要的事情说三遍。不是点击登录。</p>\n<p>之后登录你的账号就好了。</p>\n<blockquote>\n<p>Office 有激活功能，也有登录功能。</p>\n<p>激活-就是为了产品激活<br>登录-就是为了账号数据同步</p>\n</blockquote>\n<p>之后就可以在“关于”中，查看到激活结果。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-04-10-office-e3-2.png-wm.black\" alt></p>\n<p>–END–</p>"},{"layout":"post","title":"Learning Markdown","date":"2019-04-15T23:24:00.000Z","_content":"\n网上教程很多，自己整理一份最基础的功能，以及排版注意事项。\n\n<!-- more -->\n\n## 工具篇\n\n#### Typora\n\n* 免费 \n* Windows / MacOS / Linux\n* 纯 markdown 功能，没有标签管理能力\n* 全平台所见即所得，好用且免费，强烈推荐\n\n#### 有道云笔记\n\n* 免费 \n* Windows / MacOS / Linux\n* 太常见的工具，不多介绍了\n\n#### Bear熊掌记\n\n* 收费。免费可使用基础功能\n* 支持 MacOS\n* 支持文章标签等管理\n* 不是完美支持 markdown 语法，比较遗憾\n* 外观非常好看，很多人推荐，适合写作，不适合程序员\n\n#### mWeb\n* 收费\n* 支持 MacOS\n* 支持文章等管理，甚至是图片上传图床\n* 我认为是唯独一个可以一边写markdown一遍看效果，并且滚动不卡的APP\n\n#### 绝大部分编辑器\n\n都有 markdown 的原生支持或者插件支持。\n\n#### 专业的付费写作软件\n\nUlysses 等，因为收费太贵，所以没接触过。\n\n## 排版篇\n\n#### 1. 留空行\n\n写一行内容，后续一行要留空，否则会变成一行内容。\n\n**部分语法除外**。主要涉及多行块元素，不要留空。主要有：\n\n* 列表类(*/数字开头)\n* 表格\n* 引用\n\n例如：\n\n```\n这是第一行内容\n              --> 这行空着\n这是第二行内容\n```\n\n```\n* 无需列表项目1\n* 无需列表项目2   -->两行之间，不加空行\n```\n\n#### 2. 留空格\n\n行的块元素，一般要留空格，否则可能有的编辑器解析不了。但行内元素，不能加空格。\n\n例如：\n\n```\n* 这是列表元素\n> 这是引用内容\n# 这是大标题H1\n ^\n 这里都有一个空格\n```\n\n```\n**着重说明内容**\n ^\n 这里都没有空格\n```\n\n## 语法篇\n\n#### 标题\n\n可以定义 H1～H6 标题，一般常用：\n\n* H1 页面标题\n* H2 页面大栏目\n* H3-H4 子栏目\n\n例如：\n\n```\n# 这是H1\n\n## 这是H2 \n\n### 这是H3\n```\n\n一般现在常用上侧写法，可能你会看到如下写法，以下写法可能有的编辑器不能支持：\n\n```\n# 这是H1 #    --> 结尾和头部对称\n\n这是H1\n======       --> 使用等号或横线表示标题  \n```\n\n#### 链接\n\n```\n[我的博客](https://www.yukapril.com)\n```\n\n#### 图片\n\n```\n![LOGO](https://www.yukapril.com/logo.png)\n```\n\n中括号内为图片 alt 内容，可以不写。\n\n#### 文字效果\n\n```\n在这段内容中，*斜体*是这样的，**加粗**这么写，==高亮==效果和编辑器有关，~~删除线~~是这个效果。注意并不是所有编辑器都能支持以上效果。\n```\n\n效果就是：\n\n在这段内容中，*斜体*是这样的，**加粗**这么写，==高亮==效果和编辑器有关，~~删除线~~是这个效果。注意并不是所有编辑器都能支持以上效果。\n\n#### 引用\n\n```\n> 这里是需要引用的文本\n\n> 如果引用多行内容，\n> \n> 那么请注意，\n> \n> 可能需要这样写\n```\n\n有的编辑器引用的内容也要留有空行，但是引用符号不可省略。\n\n#### 分割线\n\n```\n====\n\n****\n```\n\n这两种都可以生成分割线，一般常见都是 4 个字符，但最少用 3 个字符也可以生效。\n\n区别上，可能用星号粗一些，等号窄一些。这要看编辑器自己的实现。有的编辑器不能识别等号写法。\n\n#### 代码块\n\n<pre><code>\n```js\nvar abc = ''\n```\n</code></pre>\n\n用三个反斜杠表示，后可以接语言类型，有的编辑器可以进行高亮显示。\n\n#### 行内代码\n\n```\n在一个项目中，我加入了 `var hmt = []` 这句代码解决了问题。\n```\n\n效果：\n\n在一个项目中，我加入了 `var hmt = []` 这句代码解决了问题。\n\n#### 列表\n\n```\n* 无序列表1\n  * 无序列表1.1\n  * 无序列表1.2\n* 无序列表2\n\n1. 有序列表1\n2. 有序列表2\n```\n\n无序列表，可以用星号 `*`，也可以用短线 `-`，还可以用 `+`。\n\n有序列表需要使用数字后跟英文句号 `.`，而且**数字无所谓多少，都是从 1 开始排序**。\n\n#### 代办事项\n\n```\n- [ ] 未完成事项\n- [x] 已完成事项\n```\n\n代办事项，可以用星号 `*`，也可以用短线 `-`。选中项目，中括号内有个 `x`。\n\n#### 表格\n\n| 列1（默认左对齐） | 列2（左对齐） | 列3（右对齐） | 列4（居中对齐） |\n| --- | :-- | --: | :--: |\n| 文字 | 文字 | 文字 | 文字 |\n| 文字 | 文字 | 文字 | 文字 |\n\n第一行为行标题，第二行为对齐方式，后续为每一行内容。对齐方式中的符号，至少有三个字符（可以无限加入短线 `-`）。\n\n对齐方式：\n\n* `:--` 代表左对齐\n* `--:` 代表右对齐\n* `:--:`代表居中对齐\n\n\n#### 不常用功能\n\n由于不常用，我也不太会。\n\n比如脚注。\n\n#### 图表、TOC、LaTeX 公式等其他功能\n\n这些功能属于扩展功能，需要 markdown 编辑器额外实现（或引入相关功能插件），由于编辑器实现方式不同，故没有特别统一的写法。\n\n唯独 `LaTeX 公式` 比较统一，只要是编辑器支持，基本上写法都差不太多。\n\n#### HTML 兼容语法\n\n由于 markdown 兼容 HTML 语法，所以完全可以在 markdown 中写 HTML。😀\n\n## 参考\n\n[Daring Fireball: Markdown Syntax Documentation](https://daringfireball.net/projects/markdown/syntax)","source":"_posts/2019/2019-04-15-learning-markdown.md","raw":"---\nlayout: post\ntitle: Learning Markdown\ndate: 2019-04-15 23:24:00 GMT+0800\ncategories: [编程]\ntags:  [markdown]\n---\n\n网上教程很多，自己整理一份最基础的功能，以及排版注意事项。\n\n<!-- more -->\n\n## 工具篇\n\n#### Typora\n\n* 免费 \n* Windows / MacOS / Linux\n* 纯 markdown 功能，没有标签管理能力\n* 全平台所见即所得，好用且免费，强烈推荐\n\n#### 有道云笔记\n\n* 免费 \n* Windows / MacOS / Linux\n* 太常见的工具，不多介绍了\n\n#### Bear熊掌记\n\n* 收费。免费可使用基础功能\n* 支持 MacOS\n* 支持文章标签等管理\n* 不是完美支持 markdown 语法，比较遗憾\n* 外观非常好看，很多人推荐，适合写作，不适合程序员\n\n#### mWeb\n* 收费\n* 支持 MacOS\n* 支持文章等管理，甚至是图片上传图床\n* 我认为是唯独一个可以一边写markdown一遍看效果，并且滚动不卡的APP\n\n#### 绝大部分编辑器\n\n都有 markdown 的原生支持或者插件支持。\n\n#### 专业的付费写作软件\n\nUlysses 等，因为收费太贵，所以没接触过。\n\n## 排版篇\n\n#### 1. 留空行\n\n写一行内容，后续一行要留空，否则会变成一行内容。\n\n**部分语法除外**。主要涉及多行块元素，不要留空。主要有：\n\n* 列表类(*/数字开头)\n* 表格\n* 引用\n\n例如：\n\n```\n这是第一行内容\n              --> 这行空着\n这是第二行内容\n```\n\n```\n* 无需列表项目1\n* 无需列表项目2   -->两行之间，不加空行\n```\n\n#### 2. 留空格\n\n行的块元素，一般要留空格，否则可能有的编辑器解析不了。但行内元素，不能加空格。\n\n例如：\n\n```\n* 这是列表元素\n> 这是引用内容\n# 这是大标题H1\n ^\n 这里都有一个空格\n```\n\n```\n**着重说明内容**\n ^\n 这里都没有空格\n```\n\n## 语法篇\n\n#### 标题\n\n可以定义 H1～H6 标题，一般常用：\n\n* H1 页面标题\n* H2 页面大栏目\n* H3-H4 子栏目\n\n例如：\n\n```\n# 这是H1\n\n## 这是H2 \n\n### 这是H3\n```\n\n一般现在常用上侧写法，可能你会看到如下写法，以下写法可能有的编辑器不能支持：\n\n```\n# 这是H1 #    --> 结尾和头部对称\n\n这是H1\n======       --> 使用等号或横线表示标题  \n```\n\n#### 链接\n\n```\n[我的博客](https://www.yukapril.com)\n```\n\n#### 图片\n\n```\n![LOGO](https://www.yukapril.com/logo.png)\n```\n\n中括号内为图片 alt 内容，可以不写。\n\n#### 文字效果\n\n```\n在这段内容中，*斜体*是这样的，**加粗**这么写，==高亮==效果和编辑器有关，~~删除线~~是这个效果。注意并不是所有编辑器都能支持以上效果。\n```\n\n效果就是：\n\n在这段内容中，*斜体*是这样的，**加粗**这么写，==高亮==效果和编辑器有关，~~删除线~~是这个效果。注意并不是所有编辑器都能支持以上效果。\n\n#### 引用\n\n```\n> 这里是需要引用的文本\n\n> 如果引用多行内容，\n> \n> 那么请注意，\n> \n> 可能需要这样写\n```\n\n有的编辑器引用的内容也要留有空行，但是引用符号不可省略。\n\n#### 分割线\n\n```\n====\n\n****\n```\n\n这两种都可以生成分割线，一般常见都是 4 个字符，但最少用 3 个字符也可以生效。\n\n区别上，可能用星号粗一些，等号窄一些。这要看编辑器自己的实现。有的编辑器不能识别等号写法。\n\n#### 代码块\n\n<pre><code>\n```js\nvar abc = ''\n```\n</code></pre>\n\n用三个反斜杠表示，后可以接语言类型，有的编辑器可以进行高亮显示。\n\n#### 行内代码\n\n```\n在一个项目中，我加入了 `var hmt = []` 这句代码解决了问题。\n```\n\n效果：\n\n在一个项目中，我加入了 `var hmt = []` 这句代码解决了问题。\n\n#### 列表\n\n```\n* 无序列表1\n  * 无序列表1.1\n  * 无序列表1.2\n* 无序列表2\n\n1. 有序列表1\n2. 有序列表2\n```\n\n无序列表，可以用星号 `*`，也可以用短线 `-`，还可以用 `+`。\n\n有序列表需要使用数字后跟英文句号 `.`，而且**数字无所谓多少，都是从 1 开始排序**。\n\n#### 代办事项\n\n```\n- [ ] 未完成事项\n- [x] 已完成事项\n```\n\n代办事项，可以用星号 `*`，也可以用短线 `-`。选中项目，中括号内有个 `x`。\n\n#### 表格\n\n| 列1（默认左对齐） | 列2（左对齐） | 列3（右对齐） | 列4（居中对齐） |\n| --- | :-- | --: | :--: |\n| 文字 | 文字 | 文字 | 文字 |\n| 文字 | 文字 | 文字 | 文字 |\n\n第一行为行标题，第二行为对齐方式，后续为每一行内容。对齐方式中的符号，至少有三个字符（可以无限加入短线 `-`）。\n\n对齐方式：\n\n* `:--` 代表左对齐\n* `--:` 代表右对齐\n* `:--:`代表居中对齐\n\n\n#### 不常用功能\n\n由于不常用，我也不太会。\n\n比如脚注。\n\n#### 图表、TOC、LaTeX 公式等其他功能\n\n这些功能属于扩展功能，需要 markdown 编辑器额外实现（或引入相关功能插件），由于编辑器实现方式不同，故没有特别统一的写法。\n\n唯独 `LaTeX 公式` 比较统一，只要是编辑器支持，基本上写法都差不太多。\n\n#### HTML 兼容语法\n\n由于 markdown 兼容 HTML 语法，所以完全可以在 markdown 中写 HTML。😀\n\n## 参考\n\n[Daring Fireball: Markdown Syntax Documentation](https://daringfireball.net/projects/markdown/syntax)","slug":"2019-2019-04-15-learning-markdown","published":1,"updated":"2020-03-06T01:27:31.743Z","comments":1,"photos":[],"link":"","_id":"cka5ik8cz006cnybg9uo4xu29","content":"<p>网上教程很多，自己整理一份最基础的功能，以及排版注意事项。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"工具篇\"><a href=\"#工具篇\" class=\"headerlink\" title=\"工具篇\"></a>工具篇</h2><h4 id=\"Typora\"><a href=\"#Typora\" class=\"headerlink\" title=\"Typora\"></a>Typora</h4><ul>\n<li>免费 </li>\n<li>Windows / MacOS / Linux</li>\n<li>纯 markdown 功能，没有标签管理能力</li>\n<li>全平台所见即所得，好用且免费，强烈推荐</li>\n</ul>\n<h4 id=\"有道云笔记\"><a href=\"#有道云笔记\" class=\"headerlink\" title=\"有道云笔记\"></a>有道云笔记</h4><ul>\n<li>免费 </li>\n<li>Windows / MacOS / Linux</li>\n<li>太常见的工具，不多介绍了</li>\n</ul>\n<h4 id=\"Bear熊掌记\"><a href=\"#Bear熊掌记\" class=\"headerlink\" title=\"Bear熊掌记\"></a>Bear熊掌记</h4><ul>\n<li>收费。免费可使用基础功能</li>\n<li>支持 MacOS</li>\n<li>支持文章标签等管理</li>\n<li>不是完美支持 markdown 语法，比较遗憾</li>\n<li>外观非常好看，很多人推荐，适合写作，不适合程序员</li>\n</ul>\n<h4 id=\"mWeb\"><a href=\"#mWeb\" class=\"headerlink\" title=\"mWeb\"></a>mWeb</h4><ul>\n<li>收费</li>\n<li>支持 MacOS</li>\n<li>支持文章等管理，甚至是图片上传图床</li>\n<li>我认为是唯独一个可以一边写markdown一遍看效果，并且滚动不卡的APP</li>\n</ul>\n<h4 id=\"绝大部分编辑器\"><a href=\"#绝大部分编辑器\" class=\"headerlink\" title=\"绝大部分编辑器\"></a>绝大部分编辑器</h4><p>都有 markdown 的原生支持或者插件支持。</p>\n<h4 id=\"专业的付费写作软件\"><a href=\"#专业的付费写作软件\" class=\"headerlink\" title=\"专业的付费写作软件\"></a>专业的付费写作软件</h4><p>Ulysses 等，因为收费太贵，所以没接触过。</p>\n<h2 id=\"排版篇\"><a href=\"#排版篇\" class=\"headerlink\" title=\"排版篇\"></a>排版篇</h2><h4 id=\"1-留空行\"><a href=\"#1-留空行\" class=\"headerlink\" title=\"1. 留空行\"></a>1. 留空行</h4><p>写一行内容，后续一行要留空，否则会变成一行内容。</p>\n<p><strong>部分语法除外</strong>。主要涉及多行块元素，不要留空。主要有：</p>\n<ul>\n<li>列表类(*/数字开头)</li>\n<li>表格</li>\n<li>引用</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是第一行内容</span><br><span class=\"line\">              --&gt; 这行空着</span><br><span class=\"line\">这是第二行内容</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 无需列表项目1</span><br><span class=\"line\">* 无需列表项目2   --&gt;两行之间，不加空行</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-留空格\"><a href=\"#2-留空格\" class=\"headerlink\" title=\"2. 留空格\"></a>2. 留空格</h4><p>行的块元素，一般要留空格，否则可能有的编辑器解析不了。但行内元素，不能加空格。</p>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 这是列表元素</span><br><span class=\"line\">&gt; 这是引用内容</span><br><span class=\"line\"># 这是大标题H1</span><br><span class=\"line\"> ^</span><br><span class=\"line\"> 这里都有一个空格</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**着重说明内容**</span><br><span class=\"line\"> ^</span><br><span class=\"line\"> 这里都没有空格</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"语法篇\"><a href=\"#语法篇\" class=\"headerlink\" title=\"语法篇\"></a>语法篇</h2><h4 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h4><p>可以定义 H1～H6 标题，一般常用：</p>\n<ul>\n<li>H1 页面标题</li>\n<li>H2 页面大栏目</li>\n<li>H3-H4 子栏目</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这是H1</span><br><span class=\"line\"></span><br><span class=\"line\">## 这是H2 </span><br><span class=\"line\"></span><br><span class=\"line\">### 这是H3</span><br></pre></td></tr></table></figure>\n\n<p>一般现在常用上侧写法，可能你会看到如下写法，以下写法可能有的编辑器不能支持：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这是H1 #    --&gt; 结尾和头部对称</span><br><span class=\"line\"></span><br><span class=\"line\">这是H1</span><br><span class=\"line\">======       --&gt; 使用等号或横线表示标题</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[我的博客](https://www.yukapril.com)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![LOGO](https://www.yukapril.com/logo.png)</span><br></pre></td></tr></table></figure>\n\n<p>中括号内为图片 alt 内容，可以不写。</p>\n<h4 id=\"文字效果\"><a href=\"#文字效果\" class=\"headerlink\" title=\"文字效果\"></a>文字效果</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在这段内容中，*斜体*是这样的，**加粗**这么写，==高亮==效果和编辑器有关，~~删除线~~是这个效果。注意并不是所有编辑器都能支持以上效果。</span><br></pre></td></tr></table></figure>\n\n<p>效果就是：</p>\n<p>在这段内容中，<em>斜体</em>是这样的，<strong>加粗</strong>这么写，==高亮==效果和编辑器有关，<del>删除线</del>是这个效果。注意并不是所有编辑器都能支持以上效果。</p>\n<h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 这里是需要引用的文本</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 如果引用多行内容，</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt; 那么请注意，</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt; 可能需要这样写</span><br></pre></td></tr></table></figure>\n\n<p>有的编辑器引用的内容也要留有空行，但是引用符号不可省略。</p>\n<h4 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">====</span><br><span class=\"line\"></span><br><span class=\"line\">****</span><br></pre></td></tr></table></figure>\n\n<p>这两种都可以生成分割线，一般常见都是 4 个字符，但最少用 3 个字符也可以生效。</p>\n<p>区别上，可能用星号粗一些，等号窄一些。这要看编辑器自己的实现。有的编辑器不能识别等号写法。</p>\n<h4 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><pre><code>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> abc = <span class=\"string\">''</span></span><br></pre></td></tr></table></figure>\n\n</code></pre>\n\n<p>用三个反斜杠表示，后可以接语言类型，有的编辑器可以进行高亮显示。</p>\n<h4 id=\"行内代码\"><a href=\"#行内代码\" class=\"headerlink\" title=\"行内代码\"></a>行内代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在一个项目中，我加入了 `var hmt = []` 这句代码解决了问题。</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p>在一个项目中，我加入了 <code>var hmt = []</code> 这句代码解决了问题。</p>\n<h4 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 无序列表1</span><br><span class=\"line\">  * 无序列表1.1</span><br><span class=\"line\">  * 无序列表1.2</span><br><span class=\"line\">* 无序列表2</span><br><span class=\"line\"></span><br><span class=\"line\">1. 有序列表1</span><br><span class=\"line\">2. 有序列表2</span><br></pre></td></tr></table></figure>\n\n<p>无序列表，可以用星号 <code>*</code>，也可以用短线 <code>-</code>，还可以用 <code>+</code>。</p>\n<p>有序列表需要使用数字后跟英文句号 <code>.</code>，而且<strong>数字无所谓多少，都是从 1 开始排序</strong>。</p>\n<h4 id=\"代办事项\"><a href=\"#代办事项\" class=\"headerlink\" title=\"代办事项\"></a>代办事项</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- [ ] 未完成事项</span><br><span class=\"line\">- [x] 已完成事项</span><br></pre></td></tr></table></figure>\n\n<p>代办事项，可以用星号 <code>*</code>，也可以用短线 <code>-</code>。选中项目，中括号内有个 <code>x</code>。</p>\n<h4 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h4><table>\n<thead>\n<tr>\n<th>列1（默认左对齐）</th>\n<th align=\"left\">列2（左对齐）</th>\n<th align=\"right\">列3（右对齐）</th>\n<th align=\"center\">列4（居中对齐）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>文字</td>\n<td align=\"left\">文字</td>\n<td align=\"right\">文字</td>\n<td align=\"center\">文字</td>\n</tr>\n<tr>\n<td>文字</td>\n<td align=\"left\">文字</td>\n<td align=\"right\">文字</td>\n<td align=\"center\">文字</td>\n</tr>\n</tbody></table>\n<p>第一行为行标题，第二行为对齐方式，后续为每一行内容。对齐方式中的符号，至少有三个字符（可以无限加入短线 <code>-</code>）。</p>\n<p>对齐方式：</p>\n<ul>\n<li><code>:--</code> 代表左对齐</li>\n<li><code>--:</code> 代表右对齐</li>\n<li><code>:--:</code>代表居中对齐</li>\n</ul>\n<h4 id=\"不常用功能\"><a href=\"#不常用功能\" class=\"headerlink\" title=\"不常用功能\"></a>不常用功能</h4><p>由于不常用，我也不太会。</p>\n<p>比如脚注。</p>\n<h4 id=\"图表、TOC、LaTeX-公式等其他功能\"><a href=\"#图表、TOC、LaTeX-公式等其他功能\" class=\"headerlink\" title=\"图表、TOC、LaTeX 公式等其他功能\"></a>图表、TOC、LaTeX 公式等其他功能</h4><p>这些功能属于扩展功能，需要 markdown 编辑器额外实现（或引入相关功能插件），由于编辑器实现方式不同，故没有特别统一的写法。</p>\n<p>唯独 <code>LaTeX 公式</code> 比较统一，只要是编辑器支持，基本上写法都差不太多。</p>\n<h4 id=\"HTML-兼容语法\"><a href=\"#HTML-兼容语法\" class=\"headerlink\" title=\"HTML 兼容语法\"></a>HTML 兼容语法</h4><p>由于 markdown 兼容 HTML 语法，所以完全可以在 markdown 中写 HTML。😀</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://daringfireball.net/projects/markdown/syntax\" target=\"_blank\" rel=\"noopener\">Daring Fireball: Markdown Syntax Documentation</a></p>\n","site":{"data":{}},"excerpt":"<p>网上教程很多，自己整理一份最基础的功能，以及排版注意事项。</p>","more":"<h2 id=\"工具篇\"><a href=\"#工具篇\" class=\"headerlink\" title=\"工具篇\"></a>工具篇</h2><h4 id=\"Typora\"><a href=\"#Typora\" class=\"headerlink\" title=\"Typora\"></a>Typora</h4><ul>\n<li>免费 </li>\n<li>Windows / MacOS / Linux</li>\n<li>纯 markdown 功能，没有标签管理能力</li>\n<li>全平台所见即所得，好用且免费，强烈推荐</li>\n</ul>\n<h4 id=\"有道云笔记\"><a href=\"#有道云笔记\" class=\"headerlink\" title=\"有道云笔记\"></a>有道云笔记</h4><ul>\n<li>免费 </li>\n<li>Windows / MacOS / Linux</li>\n<li>太常见的工具，不多介绍了</li>\n</ul>\n<h4 id=\"Bear熊掌记\"><a href=\"#Bear熊掌记\" class=\"headerlink\" title=\"Bear熊掌记\"></a>Bear熊掌记</h4><ul>\n<li>收费。免费可使用基础功能</li>\n<li>支持 MacOS</li>\n<li>支持文章标签等管理</li>\n<li>不是完美支持 markdown 语法，比较遗憾</li>\n<li>外观非常好看，很多人推荐，适合写作，不适合程序员</li>\n</ul>\n<h4 id=\"mWeb\"><a href=\"#mWeb\" class=\"headerlink\" title=\"mWeb\"></a>mWeb</h4><ul>\n<li>收费</li>\n<li>支持 MacOS</li>\n<li>支持文章等管理，甚至是图片上传图床</li>\n<li>我认为是唯独一个可以一边写markdown一遍看效果，并且滚动不卡的APP</li>\n</ul>\n<h4 id=\"绝大部分编辑器\"><a href=\"#绝大部分编辑器\" class=\"headerlink\" title=\"绝大部分编辑器\"></a>绝大部分编辑器</h4><p>都有 markdown 的原生支持或者插件支持。</p>\n<h4 id=\"专业的付费写作软件\"><a href=\"#专业的付费写作软件\" class=\"headerlink\" title=\"专业的付费写作软件\"></a>专业的付费写作软件</h4><p>Ulysses 等，因为收费太贵，所以没接触过。</p>\n<h2 id=\"排版篇\"><a href=\"#排版篇\" class=\"headerlink\" title=\"排版篇\"></a>排版篇</h2><h4 id=\"1-留空行\"><a href=\"#1-留空行\" class=\"headerlink\" title=\"1. 留空行\"></a>1. 留空行</h4><p>写一行内容，后续一行要留空，否则会变成一行内容。</p>\n<p><strong>部分语法除外</strong>。主要涉及多行块元素，不要留空。主要有：</p>\n<ul>\n<li>列表类(*/数字开头)</li>\n<li>表格</li>\n<li>引用</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是第一行内容</span><br><span class=\"line\">              --&gt; 这行空着</span><br><span class=\"line\">这是第二行内容</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 无需列表项目1</span><br><span class=\"line\">* 无需列表项目2   --&gt;两行之间，不加空行</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-留空格\"><a href=\"#2-留空格\" class=\"headerlink\" title=\"2. 留空格\"></a>2. 留空格</h4><p>行的块元素，一般要留空格，否则可能有的编辑器解析不了。但行内元素，不能加空格。</p>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 这是列表元素</span><br><span class=\"line\">&gt; 这是引用内容</span><br><span class=\"line\"># 这是大标题H1</span><br><span class=\"line\"> ^</span><br><span class=\"line\"> 这里都有一个空格</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**着重说明内容**</span><br><span class=\"line\"> ^</span><br><span class=\"line\"> 这里都没有空格</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"语法篇\"><a href=\"#语法篇\" class=\"headerlink\" title=\"语法篇\"></a>语法篇</h2><h4 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h4><p>可以定义 H1～H6 标题，一般常用：</p>\n<ul>\n<li>H1 页面标题</li>\n<li>H2 页面大栏目</li>\n<li>H3-H4 子栏目</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这是H1</span><br><span class=\"line\"></span><br><span class=\"line\">## 这是H2 </span><br><span class=\"line\"></span><br><span class=\"line\">### 这是H3</span><br></pre></td></tr></table></figure>\n\n<p>一般现在常用上侧写法，可能你会看到如下写法，以下写法可能有的编辑器不能支持：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这是H1 #    --&gt; 结尾和头部对称</span><br><span class=\"line\"></span><br><span class=\"line\">这是H1</span><br><span class=\"line\">======       --&gt; 使用等号或横线表示标题</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[我的博客](https://www.yukapril.com)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![LOGO](https://www.yukapril.com/logo.png)</span><br></pre></td></tr></table></figure>\n\n<p>中括号内为图片 alt 内容，可以不写。</p>\n<h4 id=\"文字效果\"><a href=\"#文字效果\" class=\"headerlink\" title=\"文字效果\"></a>文字效果</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在这段内容中，*斜体*是这样的，**加粗**这么写，==高亮==效果和编辑器有关，~~删除线~~是这个效果。注意并不是所有编辑器都能支持以上效果。</span><br></pre></td></tr></table></figure>\n\n<p>效果就是：</p>\n<p>在这段内容中，<em>斜体</em>是这样的，<strong>加粗</strong>这么写，==高亮==效果和编辑器有关，<del>删除线</del>是这个效果。注意并不是所有编辑器都能支持以上效果。</p>\n<h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 这里是需要引用的文本</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 如果引用多行内容，</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt; 那么请注意，</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt; 可能需要这样写</span><br></pre></td></tr></table></figure>\n\n<p>有的编辑器引用的内容也要留有空行，但是引用符号不可省略。</p>\n<h4 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">====</span><br><span class=\"line\"></span><br><span class=\"line\">****</span><br></pre></td></tr></table></figure>\n\n<p>这两种都可以生成分割线，一般常见都是 4 个字符，但最少用 3 个字符也可以生效。</p>\n<p>区别上，可能用星号粗一些，等号窄一些。这要看编辑器自己的实现。有的编辑器不能识别等号写法。</p>\n<h4 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><pre><code>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> abc = <span class=\"string\">''</span></span><br></pre></td></tr></table></figure>\n\n</code></pre>\n\n<p>用三个反斜杠表示，后可以接语言类型，有的编辑器可以进行高亮显示。</p>\n<h4 id=\"行内代码\"><a href=\"#行内代码\" class=\"headerlink\" title=\"行内代码\"></a>行内代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在一个项目中，我加入了 `var hmt = []` 这句代码解决了问题。</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p>在一个项目中，我加入了 <code>var hmt = []</code> 这句代码解决了问题。</p>\n<h4 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 无序列表1</span><br><span class=\"line\">  * 无序列表1.1</span><br><span class=\"line\">  * 无序列表1.2</span><br><span class=\"line\">* 无序列表2</span><br><span class=\"line\"></span><br><span class=\"line\">1. 有序列表1</span><br><span class=\"line\">2. 有序列表2</span><br></pre></td></tr></table></figure>\n\n<p>无序列表，可以用星号 <code>*</code>，也可以用短线 <code>-</code>，还可以用 <code>+</code>。</p>\n<p>有序列表需要使用数字后跟英文句号 <code>.</code>，而且<strong>数字无所谓多少，都是从 1 开始排序</strong>。</p>\n<h4 id=\"代办事项\"><a href=\"#代办事项\" class=\"headerlink\" title=\"代办事项\"></a>代办事项</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- [ ] 未完成事项</span><br><span class=\"line\">- [x] 已完成事项</span><br></pre></td></tr></table></figure>\n\n<p>代办事项，可以用星号 <code>*</code>，也可以用短线 <code>-</code>。选中项目，中括号内有个 <code>x</code>。</p>\n<h4 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h4><table>\n<thead>\n<tr>\n<th>列1（默认左对齐）</th>\n<th align=\"left\">列2（左对齐）</th>\n<th align=\"right\">列3（右对齐）</th>\n<th align=\"center\">列4（居中对齐）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>文字</td>\n<td align=\"left\">文字</td>\n<td align=\"right\">文字</td>\n<td align=\"center\">文字</td>\n</tr>\n<tr>\n<td>文字</td>\n<td align=\"left\">文字</td>\n<td align=\"right\">文字</td>\n<td align=\"center\">文字</td>\n</tr>\n</tbody></table>\n<p>第一行为行标题，第二行为对齐方式，后续为每一行内容。对齐方式中的符号，至少有三个字符（可以无限加入短线 <code>-</code>）。</p>\n<p>对齐方式：</p>\n<ul>\n<li><code>:--</code> 代表左对齐</li>\n<li><code>--:</code> 代表右对齐</li>\n<li><code>:--:</code>代表居中对齐</li>\n</ul>\n<h4 id=\"不常用功能\"><a href=\"#不常用功能\" class=\"headerlink\" title=\"不常用功能\"></a>不常用功能</h4><p>由于不常用，我也不太会。</p>\n<p>比如脚注。</p>\n<h4 id=\"图表、TOC、LaTeX-公式等其他功能\"><a href=\"#图表、TOC、LaTeX-公式等其他功能\" class=\"headerlink\" title=\"图表、TOC、LaTeX 公式等其他功能\"></a>图表、TOC、LaTeX 公式等其他功能</h4><p>这些功能属于扩展功能，需要 markdown 编辑器额外实现（或引入相关功能插件），由于编辑器实现方式不同，故没有特别统一的写法。</p>\n<p>唯独 <code>LaTeX 公式</code> 比较统一，只要是编辑器支持，基本上写法都差不太多。</p>\n<h4 id=\"HTML-兼容语法\"><a href=\"#HTML-兼容语法\" class=\"headerlink\" title=\"HTML 兼容语法\"></a>HTML 兼容语法</h4><p>由于 markdown 兼容 HTML 语法，所以完全可以在 markdown 中写 HTML。😀</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://daringfireball.net/projects/markdown/syntax\" target=\"_blank\" rel=\"noopener\">Daring Fireball: Markdown Syntax Documentation</a></p>"},{"layout":"post","title":"Learning Git","date":"2019-04-25T22:23:00.000Z","_content":"\n一直在学习 git，特此记录下常用的命令。\n\n<!-- more -->\n\n## 设置\n\n> 全局配置文件位置：`~/.gitconfig` 或 `~/.config/git/config` 文件\n> 项目配置文件位置：`.git/config`\n\n```bash\ngit config --global user.name \"xxx\"\ngit config --global user.email \"xxx@y163.com\"\ngit config --global core.editor vim # 配置默认编辑器\n\ngit config --list  # 查看配置\ngit config -e      # 编辑配置\ngit config --global ... # 操作全局配置\n```\n\n## git 概念\n\n三个区域：工作目录 (未修改的文件、已修改的文件)、暂存区 stage (Index)、仓库 history (HEAD)。\n\n## 项目操作\n\n<div class=\"mermaid\">\nsequenceDiagram\n    participant work as workspace\n    participant modified as modified\n    participant stage as stage(Index)\n    participant history as history(HEAD)\n    work->>modified: 编辑\n    modified->>work: git checkout -- file\n    modified->>stage: git add\n    stage->>modified: git reset -- file\n    stage->>history: git commit\n    history->>stage: git reset HEAD^\n</div>\n\n#### 创建\n\n```bash\ngit clone <server> # 克隆网络仓库\ngit init    # 将当前目录初始化为git仓库\ngit remote add origin <server> # 当前git目录绑定远程仓库\n```\n\n#### 状态\n\n```bash\ngit status      # 查看状态\ngit status -s   # 简略查看状态(-s=--short)\n```\n\n#### 添加和复原\n\n```bash\ngit add <file>           # 添加指定文件到stage\ngit add *                # 添加所有文件到stage\n\ngit reset -- <file>      # 将添加的文件恢复到unstage\ngit reset --hard HEAD    # (Danger)重置所有文件(history->workspace)\n\ngit checkout -- <file>   # (Danger)指定文件恢复为上次提交(unstage->workspace)\ngit checkout HEAD <file> # (Danger)从当前仓库中获取/覆盖文件(history->workspace)\n```\n\n#### 代码比较\n\n```bash\ngit diff            # 未追踪文件比较\ngit diff --cached   # 已追踪文件比较(--cached=--staged)\n```\n\n#### 提交\n\n```bash\ngit commit               # 提交\ngit commit -m \"message\"  # 提交(-m=--message)\ngit commit -am \"message\" # 将所有修改的文件进行追踪并提交\ngit commit --amend       # 修改上次提交\ngit reset HEAD^          # 取消当前提交(HEAD-->stage)\n```\n\n#### 日志\n```bash\ngit log                  # 查看日志\ngit log --oneline        # 单行显示(--pretty=oneline)\ngit log --graph          # 图表显示\ngit log --author=<user>  # 指定提交作者\ngit log -p               # 附带上每次修改的具体内容\ngit log -5               # 控制输出条数\ngit log --stat           # 每条记录显示总结\n```\n\n#### 分支\n\n```bash\ngit branch <new branch>      # 从当前代码拉新分支\ngit checkout <branch/commit> # 切换到分支/某版本\ngit checkout -b <new branch> # 从当前代码拉新分支并切换到新分支(等同上面两条命令)\ngit branch -d <branch>       # 删除分支(如果未合并则删除失败)\ngit branch -D <branch>       # 强制删除分支\ngit branch -a                # 列出所有分支\n```\n\n#### 分支合并\n\n```bash\ngit merge <branch>          # 分支合并\ngit merge --no-ff <branch>  # 分支合并，禁用fast-forward\ngit merge --squash <branch> # 将分支多条提交整合并合并\ngit rebase -i               # 交互式变基\ngit cherry-pick <commitId>  # 检出某次提交到当前分支\n```\n\n#### 贮藏\n\n```bash\ngit stash       # 贮藏当前unstage代码\ngit stash -u    # 贮藏当前stage和unstage代码，即所有修改未提交代码(-u=--include-untracked)\ngit stash list  # 查看贮藏\ngit stash pop   # 取出最后一个贮藏，并从贮藏中移除\ngit stash apply # 取出最后一个贮藏\ngit stash drop  # 丢弃贮藏\n```\n\n#### 标签\n\n```bash\ngit tag <tag>             # 在当前提交打标签\ngit tag <tag> <commitId>  # 在指定commitId上打标签\ngit tag -d <tag>          # 删除标签\n```\n\n#### 版本写法\n\n```bash\ngit show HEAD     # 当前最新提交\ngit show HEAD~1   # 上一次提交\ngit show HEAD^    # 同上，上一次提交\ngit show HEAD~2   # 上两次提交\ngit show HEAD^^   # 同上，上两次提交\ngit show HEAD@{1} # 第一次提交\n```\n\n#### 区间写法\n\n```bash\ngit log master dev  # 即在mater也在dev中\ngit log master..dev # 在dev中却不在master中\ngit log ^master dev # 同上，不在master却在dev中\ngit log dev --not master # 同上，在dev中却不在master中\n\ngit log master...dev # 在两个分支中，所有差异的提交。是下侧两者的集合\ngit log ^master dev\ngit log master ^dev\n\ngit log origin/master..HEAD  # 查看你即将推送到远端的内容\ngit log origin/master..      # 简写，同上一条\n```\n\n#### 代码搜索与调试\n\n```bash\ngit grep <word>     # 检索单词\ngit grep -n <word>  # 带上行号(-n==--line-number)\ngit grep -c <word>  # 统计在每个文件中出现次数(-c=--count)\ngit log -S <word> --oneline  # 查找单词被修改的提交\n\ngit blame <file>    # 查看文件每行修改\ngit bisect start    # git 区间二分法查找\ngit bisect bad\ngit bisect good v1.0\n```\n\n#### 同步\n\n```bash\ngit fetch       # 拉取代码\ngit pull        # 拉取代码并合并到当前分支\ngit push        # 推送代码\ngit push --tags # 同步标签\ngit remote update origin --prune # 更新远程分支列表\ngit push origin :<branch>        # 删除远程分支\ngit push origin :refs/tags/<tag> # 删除远程标签\n```\n\n#### 其他\n\n```bash \ngit bundle create repo.bundle HEAD master  # 项目打包\ngit reflog # 查阅HEAD日志\n```\n\n\n## git alias\n\n自己网上找的，因为查看日志最麻烦，所以仅仅收集了日志部分。现在也很少使用了。主要在用系统 alias。\n\n```bash\nalias.l=log --graph --all --pretty=format:'%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset'\nalias.ll=log --stat --abbrev-commit\nalias.lg=log --color --graph --pretty=format:'%C(bold white)%h%Creset -%C(bold green)%d%Creset %s %C(bold green)(%cr)%Creset %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative\nalias.llg=log --color --graph --pretty=format:'%C(bold white)%H %d%Creset%n%s%n%+b%C(bold blue)%an <%ae>%Creset %C(bold green)%cr (%ci)' --abbrev-commit\n```\n\n\n## alias(git-plugin)\n\n从 oh-my-zsh 中拿来的，大部分都用不到...\n\n```bash\ng=git\nga='git add'\ngaa='git add --all'\ngap='git apply'\ngapa='git add --patch'\ngau='git add --update'\ngav='git add --verbose'\ngb='git branch'\ngbD='git branch -D'\ngba='git branch -a'\ngbd='git branch -d'\ngbda='git branch --no-color --merged | command grep -vE \"^(\\*|\\s*(master|develop|dev)\\s*$)\" | command xargs -n 1 git branch -d'\ngbl='git blame -b -w'\ngbnm='git branch --no-merged'\ngbr='git branch --remote'\ngbs='git bisect'\ngbsb='git bisect bad'\ngbsg='git bisect good'\ngbsr='git bisect reset'\ngbss='git bisect start'\ngc='git commit -v'\n'gc!'='git commit -v --amend'\ngca='git commit -v -a'\n'gca!'='git commit -v -a --amend'\ngcam='git commit -a -m'\n'gcan!'='git commit -v -a --no-edit --amend'\n'gcans!'='git commit -v -a -s --no-edit --amend'\ngcb='git checkout -b'\ngcd='git checkout develop'\ngcf='git config --list'\ngcl='git clone --recurse-submodules'\ngclean='git clean -fd'\ngcm='git checkout master'\ngcmsg='git commit -m'\n'gcn!'='git commit -v --no-edit --amend'\ngco='git checkout'\ngcount='git shortlog -sn'\ngcp='git cherry-pick'\ngcpa='git cherry-pick --abort'\ngcpc='git cherry-pick --continue'\ngcs='git commit -S'\ngcsm='git commit -s -m'\ngd='git diff'\ngdca='git diff --cached'\ngdct='git describe --tags `git rev-list --tags --max-count=1`'\ngdcw='git diff --cached --word-diff'\ngds='git diff --staged'\ngdt='git diff-tree --no-commit-id --name-only -r'\ngdw='git diff --word-diff'\ngf='git fetch'\ngfa='git fetch --all --prune'\ngfo='git fetch origin'\ngg='git gui citool'\ngga='git gui citool --amend'\nggpull='git pull origin \"$(git_current_branch)\"'\nggpush='git push origin \"$(git_current_branch)\"'\nggsup='git branch --set-upstream-to=origin/$(git_current_branch)'\nghh='git help'\ngignore='git update-index --assume-unchanged'\ngignored='git ls-files -v | grep \"^[[:lower:]]\"'\ngit-svn-dcommit-push='git svn dcommit && git push github master:svntrunk'\ngk='\\gitk --all --branches'\ngke='\\gitk --all $(git log -g --pretty=%h)'\ngl='git pull'\nglg='git log --stat'\nglgg='git log --graph'\nglgga='git log --graph --decorate --all'\nglgm='git log --graph --max-count=10'\nglgp='git log --stat -p'\nglo='git log --oneline --decorate'\nglod='git log --graph --pretty='\\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'\\'\nglods='git log --graph --pretty='\\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'\\'' --date=short'\nglog='git log --oneline --decorate --graph'\ngloga='git log --oneline --decorate --graph --all'\nglol='git log --graph --pretty='\\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\\'\nglola='git log --graph --pretty='\\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\\'' --all'\nglols='git log --graph --pretty='\\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\\'' --stat'\nglp=_git_log_prettily\nglum='git pull upstream master'\ngm='git merge'\ngma='git merge --abort'\ngmom='git merge origin/master'\ngmt='git mergetool --no-prompt'\ngmtvim='git mergetool --no-prompt --tool=vimdiff'\ngmum='git merge upstream/master'\ngp='git push'\ngpd='git push --dry-run'\ngpf='git push --force-with-lease'\n'gpf!'='git push --force'\ngpoat='git push origin --all && git push origin --tags'\ngpristine='git reset --hard && git clean -dfx'\ngpsup='git push --set-upstream origin $(git_current_branch)'\ngpu='git push upstream'\ngpv='git push -v'\ngr='git remote'\ngra='git remote add'\ngrb='git rebase'\ngrba='git rebase --abort'\ngrbc='git rebase --continue'\ngrbd='git rebase develop'\ngrbi='git rebase -i'\ngrbm='git rebase master'\ngrbs='git rebase --skip'\ngrep='grep  --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn}'\ngrh='git reset'\ngrhh='git reset --hard'\ngrm='git rm'\ngrmc='git rm --cached'\ngrmv='git remote rename'\ngrrm='git remote remove'\ngrset='git remote set-url'\ngrt='cd $(git rev-parse --show-toplevel || echo \".\")'\ngru='git reset --'\ngrup='git remote update'\ngrv='git remote -v'\ngsb='git status -sb'\ngsd='git svn dcommit'\ngsh='git show'\ngsi='git submodule init'\ngsps='git show --pretty=short --show-signature'\ngsr='git svn rebase'\ngss='git status -s'\ngst='git status'\ngsta='git stash save'\ngstaa='git stash apply'\ngstall='git stash --all'\ngstc='git stash clear'\ngstd='git stash drop'\ngstl='git stash list'\ngstp='git stash pop'\ngsts='git stash show --text'\ngsu='git submodule update'\ngts='git tag -s'\ngtv='git tag | sort -V'\ngunignore='git update-index --no-assume-unchanged'\ngunwip='git log -n 1 | grep -q -c \"\\-\\-wip\\-\\-\" && git reset HEAD~1'\ngup='git pull --rebase'\ngupa='git pull --rebase --autostash'\ngupav='git pull --rebase --autostash -v'\ngupv='git pull --rebase -v'\ngwch='git whatchanged -p --abbrev-commit --pretty=medium'\ngwip='git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify -m \"--wip-- [skip ci]\"'\n```\n\n## 参考文档\n\n* [git简明指南](http://rogerdudler.github.io/git-guide/index.zh.html)\n* [Git教程(廖雪峰)](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n* [Git飞行规则(Flight Rules)](https://github.com/k88hudson/git-flight-rules/blob/master/README_zh-CN.md)\n* [图解Git](http://marklodato.github.io/visual-git-guide/index-zh-cn.html)\n* [Learn Git Branching](https://learngitbranching.js.org/)\n* [git book](https://book.git-scm.com/book/zh/v2)\n\n<script src=\"/js/mermaid-v8.4.0.min.js\"></script>\n<script>mermaid.initialize({startOnLoad:true});</script>","source":"_posts/2019/2019-04-25-learning-git.md","raw":"---\nlayout: post\ntitle: Learning Git\ndate: 2019-04-25 22:23:00 GMT+0800\ncategories: [编程]\ntags:  [git]\n---\n\n一直在学习 git，特此记录下常用的命令。\n\n<!-- more -->\n\n## 设置\n\n> 全局配置文件位置：`~/.gitconfig` 或 `~/.config/git/config` 文件\n> 项目配置文件位置：`.git/config`\n\n```bash\ngit config --global user.name \"xxx\"\ngit config --global user.email \"xxx@y163.com\"\ngit config --global core.editor vim # 配置默认编辑器\n\ngit config --list  # 查看配置\ngit config -e      # 编辑配置\ngit config --global ... # 操作全局配置\n```\n\n## git 概念\n\n三个区域：工作目录 (未修改的文件、已修改的文件)、暂存区 stage (Index)、仓库 history (HEAD)。\n\n## 项目操作\n\n<div class=\"mermaid\">\nsequenceDiagram\n    participant work as workspace\n    participant modified as modified\n    participant stage as stage(Index)\n    participant history as history(HEAD)\n    work->>modified: 编辑\n    modified->>work: git checkout -- file\n    modified->>stage: git add\n    stage->>modified: git reset -- file\n    stage->>history: git commit\n    history->>stage: git reset HEAD^\n</div>\n\n#### 创建\n\n```bash\ngit clone <server> # 克隆网络仓库\ngit init    # 将当前目录初始化为git仓库\ngit remote add origin <server> # 当前git目录绑定远程仓库\n```\n\n#### 状态\n\n```bash\ngit status      # 查看状态\ngit status -s   # 简略查看状态(-s=--short)\n```\n\n#### 添加和复原\n\n```bash\ngit add <file>           # 添加指定文件到stage\ngit add *                # 添加所有文件到stage\n\ngit reset -- <file>      # 将添加的文件恢复到unstage\ngit reset --hard HEAD    # (Danger)重置所有文件(history->workspace)\n\ngit checkout -- <file>   # (Danger)指定文件恢复为上次提交(unstage->workspace)\ngit checkout HEAD <file> # (Danger)从当前仓库中获取/覆盖文件(history->workspace)\n```\n\n#### 代码比较\n\n```bash\ngit diff            # 未追踪文件比较\ngit diff --cached   # 已追踪文件比较(--cached=--staged)\n```\n\n#### 提交\n\n```bash\ngit commit               # 提交\ngit commit -m \"message\"  # 提交(-m=--message)\ngit commit -am \"message\" # 将所有修改的文件进行追踪并提交\ngit commit --amend       # 修改上次提交\ngit reset HEAD^          # 取消当前提交(HEAD-->stage)\n```\n\n#### 日志\n```bash\ngit log                  # 查看日志\ngit log --oneline        # 单行显示(--pretty=oneline)\ngit log --graph          # 图表显示\ngit log --author=<user>  # 指定提交作者\ngit log -p               # 附带上每次修改的具体内容\ngit log -5               # 控制输出条数\ngit log --stat           # 每条记录显示总结\n```\n\n#### 分支\n\n```bash\ngit branch <new branch>      # 从当前代码拉新分支\ngit checkout <branch/commit> # 切换到分支/某版本\ngit checkout -b <new branch> # 从当前代码拉新分支并切换到新分支(等同上面两条命令)\ngit branch -d <branch>       # 删除分支(如果未合并则删除失败)\ngit branch -D <branch>       # 强制删除分支\ngit branch -a                # 列出所有分支\n```\n\n#### 分支合并\n\n```bash\ngit merge <branch>          # 分支合并\ngit merge --no-ff <branch>  # 分支合并，禁用fast-forward\ngit merge --squash <branch> # 将分支多条提交整合并合并\ngit rebase -i               # 交互式变基\ngit cherry-pick <commitId>  # 检出某次提交到当前分支\n```\n\n#### 贮藏\n\n```bash\ngit stash       # 贮藏当前unstage代码\ngit stash -u    # 贮藏当前stage和unstage代码，即所有修改未提交代码(-u=--include-untracked)\ngit stash list  # 查看贮藏\ngit stash pop   # 取出最后一个贮藏，并从贮藏中移除\ngit stash apply # 取出最后一个贮藏\ngit stash drop  # 丢弃贮藏\n```\n\n#### 标签\n\n```bash\ngit tag <tag>             # 在当前提交打标签\ngit tag <tag> <commitId>  # 在指定commitId上打标签\ngit tag -d <tag>          # 删除标签\n```\n\n#### 版本写法\n\n```bash\ngit show HEAD     # 当前最新提交\ngit show HEAD~1   # 上一次提交\ngit show HEAD^    # 同上，上一次提交\ngit show HEAD~2   # 上两次提交\ngit show HEAD^^   # 同上，上两次提交\ngit show HEAD@{1} # 第一次提交\n```\n\n#### 区间写法\n\n```bash\ngit log master dev  # 即在mater也在dev中\ngit log master..dev # 在dev中却不在master中\ngit log ^master dev # 同上，不在master却在dev中\ngit log dev --not master # 同上，在dev中却不在master中\n\ngit log master...dev # 在两个分支中，所有差异的提交。是下侧两者的集合\ngit log ^master dev\ngit log master ^dev\n\ngit log origin/master..HEAD  # 查看你即将推送到远端的内容\ngit log origin/master..      # 简写，同上一条\n```\n\n#### 代码搜索与调试\n\n```bash\ngit grep <word>     # 检索单词\ngit grep -n <word>  # 带上行号(-n==--line-number)\ngit grep -c <word>  # 统计在每个文件中出现次数(-c=--count)\ngit log -S <word> --oneline  # 查找单词被修改的提交\n\ngit blame <file>    # 查看文件每行修改\ngit bisect start    # git 区间二分法查找\ngit bisect bad\ngit bisect good v1.0\n```\n\n#### 同步\n\n```bash\ngit fetch       # 拉取代码\ngit pull        # 拉取代码并合并到当前分支\ngit push        # 推送代码\ngit push --tags # 同步标签\ngit remote update origin --prune # 更新远程分支列表\ngit push origin :<branch>        # 删除远程分支\ngit push origin :refs/tags/<tag> # 删除远程标签\n```\n\n#### 其他\n\n```bash \ngit bundle create repo.bundle HEAD master  # 项目打包\ngit reflog # 查阅HEAD日志\n```\n\n\n## git alias\n\n自己网上找的，因为查看日志最麻烦，所以仅仅收集了日志部分。现在也很少使用了。主要在用系统 alias。\n\n```bash\nalias.l=log --graph --all --pretty=format:'%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset'\nalias.ll=log --stat --abbrev-commit\nalias.lg=log --color --graph --pretty=format:'%C(bold white)%h%Creset -%C(bold green)%d%Creset %s %C(bold green)(%cr)%Creset %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative\nalias.llg=log --color --graph --pretty=format:'%C(bold white)%H %d%Creset%n%s%n%+b%C(bold blue)%an <%ae>%Creset %C(bold green)%cr (%ci)' --abbrev-commit\n```\n\n\n## alias(git-plugin)\n\n从 oh-my-zsh 中拿来的，大部分都用不到...\n\n```bash\ng=git\nga='git add'\ngaa='git add --all'\ngap='git apply'\ngapa='git add --patch'\ngau='git add --update'\ngav='git add --verbose'\ngb='git branch'\ngbD='git branch -D'\ngba='git branch -a'\ngbd='git branch -d'\ngbda='git branch --no-color --merged | command grep -vE \"^(\\*|\\s*(master|develop|dev)\\s*$)\" | command xargs -n 1 git branch -d'\ngbl='git blame -b -w'\ngbnm='git branch --no-merged'\ngbr='git branch --remote'\ngbs='git bisect'\ngbsb='git bisect bad'\ngbsg='git bisect good'\ngbsr='git bisect reset'\ngbss='git bisect start'\ngc='git commit -v'\n'gc!'='git commit -v --amend'\ngca='git commit -v -a'\n'gca!'='git commit -v -a --amend'\ngcam='git commit -a -m'\n'gcan!'='git commit -v -a --no-edit --amend'\n'gcans!'='git commit -v -a -s --no-edit --amend'\ngcb='git checkout -b'\ngcd='git checkout develop'\ngcf='git config --list'\ngcl='git clone --recurse-submodules'\ngclean='git clean -fd'\ngcm='git checkout master'\ngcmsg='git commit -m'\n'gcn!'='git commit -v --no-edit --amend'\ngco='git checkout'\ngcount='git shortlog -sn'\ngcp='git cherry-pick'\ngcpa='git cherry-pick --abort'\ngcpc='git cherry-pick --continue'\ngcs='git commit -S'\ngcsm='git commit -s -m'\ngd='git diff'\ngdca='git diff --cached'\ngdct='git describe --tags `git rev-list --tags --max-count=1`'\ngdcw='git diff --cached --word-diff'\ngds='git diff --staged'\ngdt='git diff-tree --no-commit-id --name-only -r'\ngdw='git diff --word-diff'\ngf='git fetch'\ngfa='git fetch --all --prune'\ngfo='git fetch origin'\ngg='git gui citool'\ngga='git gui citool --amend'\nggpull='git pull origin \"$(git_current_branch)\"'\nggpush='git push origin \"$(git_current_branch)\"'\nggsup='git branch --set-upstream-to=origin/$(git_current_branch)'\nghh='git help'\ngignore='git update-index --assume-unchanged'\ngignored='git ls-files -v | grep \"^[[:lower:]]\"'\ngit-svn-dcommit-push='git svn dcommit && git push github master:svntrunk'\ngk='\\gitk --all --branches'\ngke='\\gitk --all $(git log -g --pretty=%h)'\ngl='git pull'\nglg='git log --stat'\nglgg='git log --graph'\nglgga='git log --graph --decorate --all'\nglgm='git log --graph --max-count=10'\nglgp='git log --stat -p'\nglo='git log --oneline --decorate'\nglod='git log --graph --pretty='\\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'\\'\nglods='git log --graph --pretty='\\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'\\'' --date=short'\nglog='git log --oneline --decorate --graph'\ngloga='git log --oneline --decorate --graph --all'\nglol='git log --graph --pretty='\\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\\'\nglola='git log --graph --pretty='\\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\\'' --all'\nglols='git log --graph --pretty='\\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\\'' --stat'\nglp=_git_log_prettily\nglum='git pull upstream master'\ngm='git merge'\ngma='git merge --abort'\ngmom='git merge origin/master'\ngmt='git mergetool --no-prompt'\ngmtvim='git mergetool --no-prompt --tool=vimdiff'\ngmum='git merge upstream/master'\ngp='git push'\ngpd='git push --dry-run'\ngpf='git push --force-with-lease'\n'gpf!'='git push --force'\ngpoat='git push origin --all && git push origin --tags'\ngpristine='git reset --hard && git clean -dfx'\ngpsup='git push --set-upstream origin $(git_current_branch)'\ngpu='git push upstream'\ngpv='git push -v'\ngr='git remote'\ngra='git remote add'\ngrb='git rebase'\ngrba='git rebase --abort'\ngrbc='git rebase --continue'\ngrbd='git rebase develop'\ngrbi='git rebase -i'\ngrbm='git rebase master'\ngrbs='git rebase --skip'\ngrep='grep  --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn}'\ngrh='git reset'\ngrhh='git reset --hard'\ngrm='git rm'\ngrmc='git rm --cached'\ngrmv='git remote rename'\ngrrm='git remote remove'\ngrset='git remote set-url'\ngrt='cd $(git rev-parse --show-toplevel || echo \".\")'\ngru='git reset --'\ngrup='git remote update'\ngrv='git remote -v'\ngsb='git status -sb'\ngsd='git svn dcommit'\ngsh='git show'\ngsi='git submodule init'\ngsps='git show --pretty=short --show-signature'\ngsr='git svn rebase'\ngss='git status -s'\ngst='git status'\ngsta='git stash save'\ngstaa='git stash apply'\ngstall='git stash --all'\ngstc='git stash clear'\ngstd='git stash drop'\ngstl='git stash list'\ngstp='git stash pop'\ngsts='git stash show --text'\ngsu='git submodule update'\ngts='git tag -s'\ngtv='git tag | sort -V'\ngunignore='git update-index --no-assume-unchanged'\ngunwip='git log -n 1 | grep -q -c \"\\-\\-wip\\-\\-\" && git reset HEAD~1'\ngup='git pull --rebase'\ngupa='git pull --rebase --autostash'\ngupav='git pull --rebase --autostash -v'\ngupv='git pull --rebase -v'\ngwch='git whatchanged -p --abbrev-commit --pretty=medium'\ngwip='git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify -m \"--wip-- [skip ci]\"'\n```\n\n## 参考文档\n\n* [git简明指南](http://rogerdudler.github.io/git-guide/index.zh.html)\n* [Git教程(廖雪峰)](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n* [Git飞行规则(Flight Rules)](https://github.com/k88hudson/git-flight-rules/blob/master/README_zh-CN.md)\n* [图解Git](http://marklodato.github.io/visual-git-guide/index-zh-cn.html)\n* [Learn Git Branching](https://learngitbranching.js.org/)\n* [git book](https://book.git-scm.com/book/zh/v2)\n\n<script src=\"/js/mermaid-v8.4.0.min.js\"></script>\n<script>mermaid.initialize({startOnLoad:true});</script>","slug":"2019-2019-04-25-learning-git","published":1,"updated":"2020-03-06T01:27:34.211Z","comments":1,"photos":[],"link":"","_id":"cka5ik8d0006fnybgqwn8bhk0","content":"<p>一直在学习 git，特此记录下常用的命令。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h2><blockquote>\n<p>全局配置文件位置：<code>~/.gitconfig</code> 或 <code>~/.config/git/config</code> 文件<br>项目配置文件位置：<code>.git/config</code></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">\"xxx\"</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"xxx@y163.com\"</span></span><br><span class=\"line\">git config --global core.editor vim <span class=\"comment\"># 配置默认编辑器</span></span><br><span class=\"line\"></span><br><span class=\"line\">git config --list  <span class=\"comment\"># 查看配置</span></span><br><span class=\"line\">git config -e      <span class=\"comment\"># 编辑配置</span></span><br><span class=\"line\">git config --global ... <span class=\"comment\"># 操作全局配置</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-概念\"><a href=\"#git-概念\" class=\"headerlink\" title=\"git 概念\"></a>git 概念</h2><p>三个区域：工作目录 (未修改的文件、已修改的文件)、暂存区 stage (Index)、仓库 history (HEAD)。</p>\n<h2 id=\"项目操作\"><a href=\"#项目操作\" class=\"headerlink\" title=\"项目操作\"></a>项目操作</h2><div class=\"mermaid\">\nsequenceDiagram\n    participant work as workspace\n    participant modified as modified\n    participant stage as stage(Index)\n    participant history as history(HEAD)\n    work->>modified: 编辑\n    modified->>work: git checkout -- file\n    modified->>stage: git add\n    stage->>modified: git reset -- file\n    stage->>history: git commit\n    history->>stage: git reset HEAD^\n</div>\n\n<h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> &lt;server&gt; <span class=\"comment\"># 克隆网络仓库</span></span><br><span class=\"line\">git init    <span class=\"comment\"># 将当前目录初始化为git仓库</span></span><br><span class=\"line\">git remote add origin &lt;server&gt; <span class=\"comment\"># 当前git目录绑定远程仓库</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status      <span class=\"comment\"># 查看状态</span></span><br><span class=\"line\">git status -s   <span class=\"comment\"># 简略查看状态(-s=--short)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加和复原\"><a href=\"#添加和复原\" class=\"headerlink\" title=\"添加和复原\"></a>添加和复原</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add &lt;file&gt;           <span class=\"comment\"># 添加指定文件到stage</span></span><br><span class=\"line\">git add *                <span class=\"comment\"># 添加所有文件到stage</span></span><br><span class=\"line\"></span><br><span class=\"line\">git reset -- &lt;file&gt;      <span class=\"comment\"># 将添加的文件恢复到unstage</span></span><br><span class=\"line\">git reset --hard HEAD    <span class=\"comment\"># (Danger)重置所有文件(history-&gt;workspace)</span></span><br><span class=\"line\"></span><br><span class=\"line\">git checkout -- &lt;file&gt;   <span class=\"comment\"># (Danger)指定文件恢复为上次提交(unstage-&gt;workspace)</span></span><br><span class=\"line\">git checkout HEAD &lt;file&gt; <span class=\"comment\"># (Danger)从当前仓库中获取/覆盖文件(history-&gt;workspace)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码比较\"><a href=\"#代码比较\" class=\"headerlink\" title=\"代码比较\"></a>代码比较</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff            <span class=\"comment\"># 未追踪文件比较</span></span><br><span class=\"line\">git diff --cached   <span class=\"comment\"># 已追踪文件比较(--cached=--staged)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit               <span class=\"comment\"># 提交</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"message\"</span>  <span class=\"comment\"># 提交(-m=--message)</span></span><br><span class=\"line\">git commit -am <span class=\"string\">\"message\"</span> <span class=\"comment\"># 将所有修改的文件进行追踪并提交</span></span><br><span class=\"line\">git commit --amend       <span class=\"comment\"># 修改上次提交</span></span><br><span class=\"line\">git reset HEAD^          <span class=\"comment\"># 取消当前提交(HEAD--&gt;stage)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span>                  <span class=\"comment\"># 查看日志</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --oneline        <span class=\"comment\"># 单行显示(--pretty=oneline)</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --graph          <span class=\"comment\"># 图表显示</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --author=&lt;user&gt;  <span class=\"comment\"># 指定提交作者</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -p               <span class=\"comment\"># 附带上每次修改的具体内容</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -5               <span class=\"comment\"># 控制输出条数</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span>           <span class=\"comment\"># 每条记录显示总结</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch &lt;new branch&gt;      <span class=\"comment\"># 从当前代码拉新分支</span></span><br><span class=\"line\">git checkout &lt;branch/commit&gt; <span class=\"comment\"># 切换到分支/某版本</span></span><br><span class=\"line\">git checkout -b &lt;new branch&gt; <span class=\"comment\"># 从当前代码拉新分支并切换到新分支(等同上面两条命令)</span></span><br><span class=\"line\">git branch -d &lt;branch&gt;       <span class=\"comment\"># 删除分支(如果未合并则删除失败)</span></span><br><span class=\"line\">git branch -D &lt;branch&gt;       <span class=\"comment\"># 强制删除分支</span></span><br><span class=\"line\">git branch -a                <span class=\"comment\"># 列出所有分支</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"分支合并\"><a href=\"#分支合并\" class=\"headerlink\" title=\"分支合并\"></a>分支合并</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge &lt;branch&gt;          <span class=\"comment\"># 分支合并</span></span><br><span class=\"line\">git merge --no-ff &lt;branch&gt;  <span class=\"comment\"># 分支合并，禁用fast-forward</span></span><br><span class=\"line\">git merge --squash &lt;branch&gt; <span class=\"comment\"># 将分支多条提交整合并合并</span></span><br><span class=\"line\">git rebase -i               <span class=\"comment\"># 交互式变基</span></span><br><span class=\"line\">git cherry-pick &lt;commitId&gt;  <span class=\"comment\"># 检出某次提交到当前分支</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"贮藏\"><a href=\"#贮藏\" class=\"headerlink\" title=\"贮藏\"></a>贮藏</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash       <span class=\"comment\"># 贮藏当前unstage代码</span></span><br><span class=\"line\">git stash -u    <span class=\"comment\"># 贮藏当前stage和unstage代码，即所有修改未提交代码(-u=--include-untracked)</span></span><br><span class=\"line\">git stash list  <span class=\"comment\"># 查看贮藏</span></span><br><span class=\"line\">git stash pop   <span class=\"comment\"># 取出最后一个贮藏，并从贮藏中移除</span></span><br><span class=\"line\">git stash apply <span class=\"comment\"># 取出最后一个贮藏</span></span><br><span class=\"line\">git stash drop  <span class=\"comment\"># 丢弃贮藏</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag &lt;tag&gt;             <span class=\"comment\"># 在当前提交打标签</span></span><br><span class=\"line\">git tag &lt;tag&gt; &lt;commitId&gt;  <span class=\"comment\"># 在指定commitId上打标签</span></span><br><span class=\"line\">git tag -d &lt;tag&gt;          <span class=\"comment\"># 删除标签</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"版本写法\"><a href=\"#版本写法\" class=\"headerlink\" title=\"版本写法\"></a>版本写法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git show HEAD     <span class=\"comment\"># 当前最新提交</span></span><br><span class=\"line\">git show HEAD~1   <span class=\"comment\"># 上一次提交</span></span><br><span class=\"line\">git show HEAD^    <span class=\"comment\"># 同上，上一次提交</span></span><br><span class=\"line\">git show HEAD~2   <span class=\"comment\"># 上两次提交</span></span><br><span class=\"line\">git show HEAD^^   <span class=\"comment\"># 同上，上两次提交</span></span><br><span class=\"line\">git show HEAD@&#123;1&#125; <span class=\"comment\"># 第一次提交</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"区间写法\"><a href=\"#区间写法\" class=\"headerlink\" title=\"区间写法\"></a>区间写法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> master dev  <span class=\"comment\"># 即在mater也在dev中</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> master..dev <span class=\"comment\"># 在dev中却不在master中</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> ^master dev <span class=\"comment\"># 同上，不在master却在dev中</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> dev --not master <span class=\"comment\"># 同上，在dev中却不在master中</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">log</span> master...dev <span class=\"comment\"># 在两个分支中，所有差异的提交。是下侧两者的集合</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> ^master dev</span><br><span class=\"line\">git <span class=\"built_in\">log</span> master ^dev</span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">log</span> origin/master..HEAD  <span class=\"comment\"># 查看你即将推送到远端的内容</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> origin/master..      <span class=\"comment\"># 简写，同上一条</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码搜索与调试\"><a href=\"#代码搜索与调试\" class=\"headerlink\" title=\"代码搜索与调试\"></a>代码搜索与调试</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git grep &lt;word&gt;     <span class=\"comment\"># 检索单词</span></span><br><span class=\"line\">git grep -n &lt;word&gt;  <span class=\"comment\"># 带上行号(-n==--line-number)</span></span><br><span class=\"line\">git grep -c &lt;word&gt;  <span class=\"comment\"># 统计在每个文件中出现次数(-c=--count)</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -S &lt;word&gt; --oneline  <span class=\"comment\"># 查找单词被修改的提交</span></span><br><span class=\"line\"></span><br><span class=\"line\">git blame &lt;file&gt;    <span class=\"comment\"># 查看文件每行修改</span></span><br><span class=\"line\">git bisect start    <span class=\"comment\"># git 区间二分法查找</span></span><br><span class=\"line\">git bisect bad</span><br><span class=\"line\">git bisect good v1.0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch       <span class=\"comment\"># 拉取代码</span></span><br><span class=\"line\">git pull        <span class=\"comment\"># 拉取代码并合并到当前分支</span></span><br><span class=\"line\">git push        <span class=\"comment\"># 推送代码</span></span><br><span class=\"line\">git push --tags <span class=\"comment\"># 同步标签</span></span><br><span class=\"line\">git remote update origin --prune <span class=\"comment\"># 更新远程分支列表</span></span><br><span class=\"line\">git push origin :&lt;branch&gt;        <span class=\"comment\"># 删除远程分支</span></span><br><span class=\"line\">git push origin :refs/tags/&lt;tag&gt; <span class=\"comment\"># 删除远程标签</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git bundle create repo.bundle HEAD master  <span class=\"comment\"># 项目打包</span></span><br><span class=\"line\">git reflog <span class=\"comment\"># 查阅HEAD日志</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-alias\"><a href=\"#git-alias\" class=\"headerlink\" title=\"git alias\"></a>git alias</h2><p>自己网上找的，因为查看日志最麻烦，所以仅仅收集了日志部分。现在也很少使用了。主要在用系统 alias。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias.l=<span class=\"built_in\">log</span> --graph --all --pretty=format:<span class=\"string\">'%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset'</span></span><br><span class=\"line\">alias.ll=<span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span> --abbrev-commit</span><br><span class=\"line\">alias.lg=<span class=\"built_in\">log</span> --color --graph --pretty=format:<span class=\"string\">'%C(bold white)%h%Creset -%C(bold green)%d%Creset %s %C(bold green)(%cr)%Creset %C(bold blue)&lt;%an&gt;%Creset'</span> --abbrev-commit --date=relative</span><br><span class=\"line\">alias.llg=<span class=\"built_in\">log</span> --color --graph --pretty=format:<span class=\"string\">'%C(bold white)%H %d%Creset%n%s%n%+b%C(bold blue)%an &lt;%ae&gt;%Creset %C(bold green)%cr (%ci)'</span> --abbrev-commit</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"alias-git-plugin\"><a href=\"#alias-git-plugin\" class=\"headerlink\" title=\"alias(git-plugin)\"></a>alias(git-plugin)</h2><p>从 oh-my-zsh 中拿来的，大部分都用不到…</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g=git</span><br><span class=\"line\">ga=<span class=\"string\">'git add'</span></span><br><span class=\"line\">gaa=<span class=\"string\">'git add --all'</span></span><br><span class=\"line\">gap=<span class=\"string\">'git apply'</span></span><br><span class=\"line\">gapa=<span class=\"string\">'git add --patch'</span></span><br><span class=\"line\">gau=<span class=\"string\">'git add --update'</span></span><br><span class=\"line\">gav=<span class=\"string\">'git add --verbose'</span></span><br><span class=\"line\">gb=<span class=\"string\">'git branch'</span></span><br><span class=\"line\">gbD=<span class=\"string\">'git branch -D'</span></span><br><span class=\"line\">gba=<span class=\"string\">'git branch -a'</span></span><br><span class=\"line\">gbd=<span class=\"string\">'git branch -d'</span></span><br><span class=\"line\">gbda=<span class=\"string\">'git branch --no-color --merged | command grep -vE \"^(\\*|\\s*(master|develop|dev)\\s*$)\" | command xargs -n 1 git branch -d'</span></span><br><span class=\"line\">gbl=<span class=\"string\">'git blame -b -w'</span></span><br><span class=\"line\">gbnm=<span class=\"string\">'git branch --no-merged'</span></span><br><span class=\"line\">gbr=<span class=\"string\">'git branch --remote'</span></span><br><span class=\"line\">gbs=<span class=\"string\">'git bisect'</span></span><br><span class=\"line\">gbsb=<span class=\"string\">'git bisect bad'</span></span><br><span class=\"line\">gbsg=<span class=\"string\">'git bisect good'</span></span><br><span class=\"line\">gbsr=<span class=\"string\">'git bisect reset'</span></span><br><span class=\"line\">gbss=<span class=\"string\">'git bisect start'</span></span><br><span class=\"line\">gc=<span class=\"string\">'git commit -v'</span></span><br><span class=\"line\"><span class=\"string\">'gc!'</span>=<span class=\"string\">'git commit -v --amend'</span></span><br><span class=\"line\">gca=<span class=\"string\">'git commit -v -a'</span></span><br><span class=\"line\"><span class=\"string\">'gca!'</span>=<span class=\"string\">'git commit -v -a --amend'</span></span><br><span class=\"line\">gcam=<span class=\"string\">'git commit -a -m'</span></span><br><span class=\"line\"><span class=\"string\">'gcan!'</span>=<span class=\"string\">'git commit -v -a --no-edit --amend'</span></span><br><span class=\"line\"><span class=\"string\">'gcans!'</span>=<span class=\"string\">'git commit -v -a -s --no-edit --amend'</span></span><br><span class=\"line\">gcb=<span class=\"string\">'git checkout -b'</span></span><br><span class=\"line\">gcd=<span class=\"string\">'git checkout develop'</span></span><br><span class=\"line\">gcf=<span class=\"string\">'git config --list'</span></span><br><span class=\"line\">gcl=<span class=\"string\">'git clone --recurse-submodules'</span></span><br><span class=\"line\">gclean=<span class=\"string\">'git clean -fd'</span></span><br><span class=\"line\">gcm=<span class=\"string\">'git checkout master'</span></span><br><span class=\"line\">gcmsg=<span class=\"string\">'git commit -m'</span></span><br><span class=\"line\"><span class=\"string\">'gcn!'</span>=<span class=\"string\">'git commit -v --no-edit --amend'</span></span><br><span class=\"line\">gco=<span class=\"string\">'git checkout'</span></span><br><span class=\"line\">gcount=<span class=\"string\">'git shortlog -sn'</span></span><br><span class=\"line\">gcp=<span class=\"string\">'git cherry-pick'</span></span><br><span class=\"line\">gcpa=<span class=\"string\">'git cherry-pick --abort'</span></span><br><span class=\"line\">gcpc=<span class=\"string\">'git cherry-pick --continue'</span></span><br><span class=\"line\">gcs=<span class=\"string\">'git commit -S'</span></span><br><span class=\"line\">gcsm=<span class=\"string\">'git commit -s -m'</span></span><br><span class=\"line\">gd=<span class=\"string\">'git diff'</span></span><br><span class=\"line\">gdca=<span class=\"string\">'git diff --cached'</span></span><br><span class=\"line\">gdct=<span class=\"string\">'git describe --tags `git rev-list --tags --max-count=1`'</span></span><br><span class=\"line\">gdcw=<span class=\"string\">'git diff --cached --word-diff'</span></span><br><span class=\"line\">gds=<span class=\"string\">'git diff --staged'</span></span><br><span class=\"line\">gdt=<span class=\"string\">'git diff-tree --no-commit-id --name-only -r'</span></span><br><span class=\"line\">gdw=<span class=\"string\">'git diff --word-diff'</span></span><br><span class=\"line\">gf=<span class=\"string\">'git fetch'</span></span><br><span class=\"line\">gfa=<span class=\"string\">'git fetch --all --prune'</span></span><br><span class=\"line\">gfo=<span class=\"string\">'git fetch origin'</span></span><br><span class=\"line\">gg=<span class=\"string\">'git gui citool'</span></span><br><span class=\"line\">gga=<span class=\"string\">'git gui citool --amend'</span></span><br><span class=\"line\">ggpull=<span class=\"string\">'git pull origin \"$(git_current_branch)\"'</span></span><br><span class=\"line\">ggpush=<span class=\"string\">'git push origin \"$(git_current_branch)\"'</span></span><br><span class=\"line\">ggsup=<span class=\"string\">'git branch --set-upstream-to=origin/$(git_current_branch)'</span></span><br><span class=\"line\">ghh=<span class=\"string\">'git help'</span></span><br><span class=\"line\">gignore=<span class=\"string\">'git update-index --assume-unchanged'</span></span><br><span class=\"line\">gignored=<span class=\"string\">'git ls-files -v | grep \"^[[:lower:]]\"'</span></span><br><span class=\"line\">git-svn-dcommit-push=<span class=\"string\">'git svn dcommit &amp;&amp; git push github master:svntrunk'</span></span><br><span class=\"line\">gk=<span class=\"string\">'\\gitk --all --branches'</span></span><br><span class=\"line\">gke=<span class=\"string\">'\\gitk --all $(git log -g --pretty=%h)'</span></span><br><span class=\"line\">gl=<span class=\"string\">'git pull'</span></span><br><span class=\"line\">glg=<span class=\"string\">'git log --stat'</span></span><br><span class=\"line\">glgg=<span class=\"string\">'git log --graph'</span></span><br><span class=\"line\">glgga=<span class=\"string\">'git log --graph --decorate --all'</span></span><br><span class=\"line\">glgm=<span class=\"string\">'git log --graph --max-count=10'</span></span><br><span class=\"line\">glgp=<span class=\"string\">'git log --stat -p'</span></span><br><span class=\"line\">glo=<span class=\"string\">'git log --oneline --decorate'</span></span><br><span class=\"line\">glod=<span class=\"string\">'git log --graph --pretty='</span>\\<span class=\"string\">''</span>%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)&lt;%an&gt;%Creset<span class=\"string\">'\\'</span></span><br><span class=\"line\">glods=<span class=\"string\">'git log --graph --pretty='</span>\\<span class=\"string\">''</span>%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)&lt;%an&gt;%Creset<span class=\"string\">'\\'</span><span class=\"string\">' --date=short'</span></span><br><span class=\"line\">glog=<span class=\"string\">'git log --oneline --decorate --graph'</span></span><br><span class=\"line\">gloga=<span class=\"string\">'git log --oneline --decorate --graph --all'</span></span><br><span class=\"line\">glol=<span class=\"string\">'git log --graph --pretty='</span>\\<span class=\"string\">''</span>%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset<span class=\"string\">'\\'</span></span><br><span class=\"line\">glola=<span class=\"string\">'git log --graph --pretty='</span>\\<span class=\"string\">''</span>%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset<span class=\"string\">'\\'</span><span class=\"string\">' --all'</span></span><br><span class=\"line\">glols=<span class=\"string\">'git log --graph --pretty='</span>\\<span class=\"string\">''</span>%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset<span class=\"string\">'\\'</span><span class=\"string\">' --stat'</span></span><br><span class=\"line\">glp=_git_log_prettily</span><br><span class=\"line\">glum=<span class=\"string\">'git pull upstream master'</span></span><br><span class=\"line\">gm=<span class=\"string\">'git merge'</span></span><br><span class=\"line\">gma=<span class=\"string\">'git merge --abort'</span></span><br><span class=\"line\">gmom=<span class=\"string\">'git merge origin/master'</span></span><br><span class=\"line\">gmt=<span class=\"string\">'git mergetool --no-prompt'</span></span><br><span class=\"line\">gmtvim=<span class=\"string\">'git mergetool --no-prompt --tool=vimdiff'</span></span><br><span class=\"line\">gmum=<span class=\"string\">'git merge upstream/master'</span></span><br><span class=\"line\">gp=<span class=\"string\">'git push'</span></span><br><span class=\"line\">gpd=<span class=\"string\">'git push --dry-run'</span></span><br><span class=\"line\">gpf=<span class=\"string\">'git push --force-with-lease'</span></span><br><span class=\"line\"><span class=\"string\">'gpf!'</span>=<span class=\"string\">'git push --force'</span></span><br><span class=\"line\">gpoat=<span class=\"string\">'git push origin --all &amp;&amp; git push origin --tags'</span></span><br><span class=\"line\">gpristine=<span class=\"string\">'git reset --hard &amp;&amp; git clean -dfx'</span></span><br><span class=\"line\">gpsup=<span class=\"string\">'git push --set-upstream origin $(git_current_branch)'</span></span><br><span class=\"line\">gpu=<span class=\"string\">'git push upstream'</span></span><br><span class=\"line\">gpv=<span class=\"string\">'git push -v'</span></span><br><span class=\"line\">gr=<span class=\"string\">'git remote'</span></span><br><span class=\"line\">gra=<span class=\"string\">'git remote add'</span></span><br><span class=\"line\">grb=<span class=\"string\">'git rebase'</span></span><br><span class=\"line\">grba=<span class=\"string\">'git rebase --abort'</span></span><br><span class=\"line\">grbc=<span class=\"string\">'git rebase --continue'</span></span><br><span class=\"line\">grbd=<span class=\"string\">'git rebase develop'</span></span><br><span class=\"line\">grbi=<span class=\"string\">'git rebase -i'</span></span><br><span class=\"line\">grbm=<span class=\"string\">'git rebase master'</span></span><br><span class=\"line\">grbs=<span class=\"string\">'git rebase --skip'</span></span><br><span class=\"line\">grep=<span class=\"string\">'grep  --color=auto --exclude-dir=&#123;.bzr,CVS,.git,.hg,.svn&#125;'</span></span><br><span class=\"line\">grh=<span class=\"string\">'git reset'</span></span><br><span class=\"line\">grhh=<span class=\"string\">'git reset --hard'</span></span><br><span class=\"line\">grm=<span class=\"string\">'git rm'</span></span><br><span class=\"line\">grmc=<span class=\"string\">'git rm --cached'</span></span><br><span class=\"line\">grmv=<span class=\"string\">'git remote rename'</span></span><br><span class=\"line\">grrm=<span class=\"string\">'git remote remove'</span></span><br><span class=\"line\">grset=<span class=\"string\">'git remote set-url'</span></span><br><span class=\"line\">grt=<span class=\"string\">'cd $(git rev-parse --show-toplevel || echo \".\")'</span></span><br><span class=\"line\">gru=<span class=\"string\">'git reset --'</span></span><br><span class=\"line\">grup=<span class=\"string\">'git remote update'</span></span><br><span class=\"line\">grv=<span class=\"string\">'git remote -v'</span></span><br><span class=\"line\">gsb=<span class=\"string\">'git status -sb'</span></span><br><span class=\"line\">gsd=<span class=\"string\">'git svn dcommit'</span></span><br><span class=\"line\">gsh=<span class=\"string\">'git show'</span></span><br><span class=\"line\">gsi=<span class=\"string\">'git submodule init'</span></span><br><span class=\"line\">gsps=<span class=\"string\">'git show --pretty=short --show-signature'</span></span><br><span class=\"line\">gsr=<span class=\"string\">'git svn rebase'</span></span><br><span class=\"line\">gss=<span class=\"string\">'git status -s'</span></span><br><span class=\"line\">gst=<span class=\"string\">'git status'</span></span><br><span class=\"line\">gsta=<span class=\"string\">'git stash save'</span></span><br><span class=\"line\">gstaa=<span class=\"string\">'git stash apply'</span></span><br><span class=\"line\">gstall=<span class=\"string\">'git stash --all'</span></span><br><span class=\"line\">gstc=<span class=\"string\">'git stash clear'</span></span><br><span class=\"line\">gstd=<span class=\"string\">'git stash drop'</span></span><br><span class=\"line\">gstl=<span class=\"string\">'git stash list'</span></span><br><span class=\"line\">gstp=<span class=\"string\">'git stash pop'</span></span><br><span class=\"line\">gsts=<span class=\"string\">'git stash show --text'</span></span><br><span class=\"line\">gsu=<span class=\"string\">'git submodule update'</span></span><br><span class=\"line\">gts=<span class=\"string\">'git tag -s'</span></span><br><span class=\"line\">gtv=<span class=\"string\">'git tag | sort -V'</span></span><br><span class=\"line\">gunignore=<span class=\"string\">'git update-index --no-assume-unchanged'</span></span><br><span class=\"line\">gunwip=<span class=\"string\">'git log -n 1 | grep -q -c \"\\-\\-wip\\-\\-\" &amp;&amp; git reset HEAD~1'</span></span><br><span class=\"line\">gup=<span class=\"string\">'git pull --rebase'</span></span><br><span class=\"line\">gupa=<span class=\"string\">'git pull --rebase --autostash'</span></span><br><span class=\"line\">gupav=<span class=\"string\">'git pull --rebase --autostash -v'</span></span><br><span class=\"line\">gupv=<span class=\"string\">'git pull --rebase -v'</span></span><br><span class=\"line\">gwch=<span class=\"string\">'git whatchanged -p --abbrev-commit --pretty=medium'</span></span><br><span class=\"line\">gwip=<span class=\"string\">'git add -A; git rm $(git ls-files --deleted) 2&gt; /dev/null; git commit --no-verify -m \"--wip-- [skip ci]\"'</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\" target=\"_blank\" rel=\"noopener\">git简明指南</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">Git教程(廖雪峰)</a></li>\n<li><a href=\"https://github.com/k88hudson/git-flight-rules/blob/master/README_zh-CN.md\" target=\"_blank\" rel=\"noopener\">Git飞行规则(Flight Rules)</a></li>\n<li><a href=\"http://marklodato.github.io/visual-git-guide/index-zh-cn.html\" target=\"_blank\" rel=\"noopener\">图解Git</a></li>\n<li><a href=\"https://learngitbranching.js.org/\" target=\"_blank\" rel=\"noopener\">Learn Git Branching</a></li>\n<li><a href=\"https://book.git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">git book</a></li>\n</ul>\n<script src=\"/js/mermaid-v8.4.0.min.js\"></script>\n<script>mermaid.initialize({startOnLoad:true});</script>","site":{"data":{}},"excerpt":"<p>一直在学习 git，特此记录下常用的命令。</p>","more":"<h2 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h2><blockquote>\n<p>全局配置文件位置：<code>~/.gitconfig</code> 或 <code>~/.config/git/config</code> 文件<br>项目配置文件位置：<code>.git/config</code></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">\"xxx\"</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"xxx@y163.com\"</span></span><br><span class=\"line\">git config --global core.editor vim <span class=\"comment\"># 配置默认编辑器</span></span><br><span class=\"line\"></span><br><span class=\"line\">git config --list  <span class=\"comment\"># 查看配置</span></span><br><span class=\"line\">git config -e      <span class=\"comment\"># 编辑配置</span></span><br><span class=\"line\">git config --global ... <span class=\"comment\"># 操作全局配置</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-概念\"><a href=\"#git-概念\" class=\"headerlink\" title=\"git 概念\"></a>git 概念</h2><p>三个区域：工作目录 (未修改的文件、已修改的文件)、暂存区 stage (Index)、仓库 history (HEAD)。</p>\n<h2 id=\"项目操作\"><a href=\"#项目操作\" class=\"headerlink\" title=\"项目操作\"></a>项目操作</h2><div class=\"mermaid\">\nsequenceDiagram\n    participant work as workspace\n    participant modified as modified\n    participant stage as stage(Index)\n    participant history as history(HEAD)\n    work->>modified: 编辑\n    modified->>work: git checkout -- file\n    modified->>stage: git add\n    stage->>modified: git reset -- file\n    stage->>history: git commit\n    history->>stage: git reset HEAD^\n</div>\n\n<h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> &lt;server&gt; <span class=\"comment\"># 克隆网络仓库</span></span><br><span class=\"line\">git init    <span class=\"comment\"># 将当前目录初始化为git仓库</span></span><br><span class=\"line\">git remote add origin &lt;server&gt; <span class=\"comment\"># 当前git目录绑定远程仓库</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status      <span class=\"comment\"># 查看状态</span></span><br><span class=\"line\">git status -s   <span class=\"comment\"># 简略查看状态(-s=--short)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加和复原\"><a href=\"#添加和复原\" class=\"headerlink\" title=\"添加和复原\"></a>添加和复原</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add &lt;file&gt;           <span class=\"comment\"># 添加指定文件到stage</span></span><br><span class=\"line\">git add *                <span class=\"comment\"># 添加所有文件到stage</span></span><br><span class=\"line\"></span><br><span class=\"line\">git reset -- &lt;file&gt;      <span class=\"comment\"># 将添加的文件恢复到unstage</span></span><br><span class=\"line\">git reset --hard HEAD    <span class=\"comment\"># (Danger)重置所有文件(history-&gt;workspace)</span></span><br><span class=\"line\"></span><br><span class=\"line\">git checkout -- &lt;file&gt;   <span class=\"comment\"># (Danger)指定文件恢复为上次提交(unstage-&gt;workspace)</span></span><br><span class=\"line\">git checkout HEAD &lt;file&gt; <span class=\"comment\"># (Danger)从当前仓库中获取/覆盖文件(history-&gt;workspace)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码比较\"><a href=\"#代码比较\" class=\"headerlink\" title=\"代码比较\"></a>代码比较</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff            <span class=\"comment\"># 未追踪文件比较</span></span><br><span class=\"line\">git diff --cached   <span class=\"comment\"># 已追踪文件比较(--cached=--staged)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit               <span class=\"comment\"># 提交</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"message\"</span>  <span class=\"comment\"># 提交(-m=--message)</span></span><br><span class=\"line\">git commit -am <span class=\"string\">\"message\"</span> <span class=\"comment\"># 将所有修改的文件进行追踪并提交</span></span><br><span class=\"line\">git commit --amend       <span class=\"comment\"># 修改上次提交</span></span><br><span class=\"line\">git reset HEAD^          <span class=\"comment\"># 取消当前提交(HEAD--&gt;stage)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span>                  <span class=\"comment\"># 查看日志</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --oneline        <span class=\"comment\"># 单行显示(--pretty=oneline)</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --graph          <span class=\"comment\"># 图表显示</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --author=&lt;user&gt;  <span class=\"comment\"># 指定提交作者</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -p               <span class=\"comment\"># 附带上每次修改的具体内容</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -5               <span class=\"comment\"># 控制输出条数</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span>           <span class=\"comment\"># 每条记录显示总结</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch &lt;new branch&gt;      <span class=\"comment\"># 从当前代码拉新分支</span></span><br><span class=\"line\">git checkout &lt;branch/commit&gt; <span class=\"comment\"># 切换到分支/某版本</span></span><br><span class=\"line\">git checkout -b &lt;new branch&gt; <span class=\"comment\"># 从当前代码拉新分支并切换到新分支(等同上面两条命令)</span></span><br><span class=\"line\">git branch -d &lt;branch&gt;       <span class=\"comment\"># 删除分支(如果未合并则删除失败)</span></span><br><span class=\"line\">git branch -D &lt;branch&gt;       <span class=\"comment\"># 强制删除分支</span></span><br><span class=\"line\">git branch -a                <span class=\"comment\"># 列出所有分支</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"分支合并\"><a href=\"#分支合并\" class=\"headerlink\" title=\"分支合并\"></a>分支合并</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge &lt;branch&gt;          <span class=\"comment\"># 分支合并</span></span><br><span class=\"line\">git merge --no-ff &lt;branch&gt;  <span class=\"comment\"># 分支合并，禁用fast-forward</span></span><br><span class=\"line\">git merge --squash &lt;branch&gt; <span class=\"comment\"># 将分支多条提交整合并合并</span></span><br><span class=\"line\">git rebase -i               <span class=\"comment\"># 交互式变基</span></span><br><span class=\"line\">git cherry-pick &lt;commitId&gt;  <span class=\"comment\"># 检出某次提交到当前分支</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"贮藏\"><a href=\"#贮藏\" class=\"headerlink\" title=\"贮藏\"></a>贮藏</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash       <span class=\"comment\"># 贮藏当前unstage代码</span></span><br><span class=\"line\">git stash -u    <span class=\"comment\"># 贮藏当前stage和unstage代码，即所有修改未提交代码(-u=--include-untracked)</span></span><br><span class=\"line\">git stash list  <span class=\"comment\"># 查看贮藏</span></span><br><span class=\"line\">git stash pop   <span class=\"comment\"># 取出最后一个贮藏，并从贮藏中移除</span></span><br><span class=\"line\">git stash apply <span class=\"comment\"># 取出最后一个贮藏</span></span><br><span class=\"line\">git stash drop  <span class=\"comment\"># 丢弃贮藏</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag &lt;tag&gt;             <span class=\"comment\"># 在当前提交打标签</span></span><br><span class=\"line\">git tag &lt;tag&gt; &lt;commitId&gt;  <span class=\"comment\"># 在指定commitId上打标签</span></span><br><span class=\"line\">git tag -d &lt;tag&gt;          <span class=\"comment\"># 删除标签</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"版本写法\"><a href=\"#版本写法\" class=\"headerlink\" title=\"版本写法\"></a>版本写法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git show HEAD     <span class=\"comment\"># 当前最新提交</span></span><br><span class=\"line\">git show HEAD~1   <span class=\"comment\"># 上一次提交</span></span><br><span class=\"line\">git show HEAD^    <span class=\"comment\"># 同上，上一次提交</span></span><br><span class=\"line\">git show HEAD~2   <span class=\"comment\"># 上两次提交</span></span><br><span class=\"line\">git show HEAD^^   <span class=\"comment\"># 同上，上两次提交</span></span><br><span class=\"line\">git show HEAD@&#123;1&#125; <span class=\"comment\"># 第一次提交</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"区间写法\"><a href=\"#区间写法\" class=\"headerlink\" title=\"区间写法\"></a>区间写法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> master dev  <span class=\"comment\"># 即在mater也在dev中</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> master..dev <span class=\"comment\"># 在dev中却不在master中</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> ^master dev <span class=\"comment\"># 同上，不在master却在dev中</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> dev --not master <span class=\"comment\"># 同上，在dev中却不在master中</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">log</span> master...dev <span class=\"comment\"># 在两个分支中，所有差异的提交。是下侧两者的集合</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> ^master dev</span><br><span class=\"line\">git <span class=\"built_in\">log</span> master ^dev</span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">log</span> origin/master..HEAD  <span class=\"comment\"># 查看你即将推送到远端的内容</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> origin/master..      <span class=\"comment\"># 简写，同上一条</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码搜索与调试\"><a href=\"#代码搜索与调试\" class=\"headerlink\" title=\"代码搜索与调试\"></a>代码搜索与调试</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git grep &lt;word&gt;     <span class=\"comment\"># 检索单词</span></span><br><span class=\"line\">git grep -n &lt;word&gt;  <span class=\"comment\"># 带上行号(-n==--line-number)</span></span><br><span class=\"line\">git grep -c &lt;word&gt;  <span class=\"comment\"># 统计在每个文件中出现次数(-c=--count)</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -S &lt;word&gt; --oneline  <span class=\"comment\"># 查找单词被修改的提交</span></span><br><span class=\"line\"></span><br><span class=\"line\">git blame &lt;file&gt;    <span class=\"comment\"># 查看文件每行修改</span></span><br><span class=\"line\">git bisect start    <span class=\"comment\"># git 区间二分法查找</span></span><br><span class=\"line\">git bisect bad</span><br><span class=\"line\">git bisect good v1.0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch       <span class=\"comment\"># 拉取代码</span></span><br><span class=\"line\">git pull        <span class=\"comment\"># 拉取代码并合并到当前分支</span></span><br><span class=\"line\">git push        <span class=\"comment\"># 推送代码</span></span><br><span class=\"line\">git push --tags <span class=\"comment\"># 同步标签</span></span><br><span class=\"line\">git remote update origin --prune <span class=\"comment\"># 更新远程分支列表</span></span><br><span class=\"line\">git push origin :&lt;branch&gt;        <span class=\"comment\"># 删除远程分支</span></span><br><span class=\"line\">git push origin :refs/tags/&lt;tag&gt; <span class=\"comment\"># 删除远程标签</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git bundle create repo.bundle HEAD master  <span class=\"comment\"># 项目打包</span></span><br><span class=\"line\">git reflog <span class=\"comment\"># 查阅HEAD日志</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-alias\"><a href=\"#git-alias\" class=\"headerlink\" title=\"git alias\"></a>git alias</h2><p>自己网上找的，因为查看日志最麻烦，所以仅仅收集了日志部分。现在也很少使用了。主要在用系统 alias。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias.l=<span class=\"built_in\">log</span> --graph --all --pretty=format:<span class=\"string\">'%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset'</span></span><br><span class=\"line\">alias.ll=<span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span> --abbrev-commit</span><br><span class=\"line\">alias.lg=<span class=\"built_in\">log</span> --color --graph --pretty=format:<span class=\"string\">'%C(bold white)%h%Creset -%C(bold green)%d%Creset %s %C(bold green)(%cr)%Creset %C(bold blue)&lt;%an&gt;%Creset'</span> --abbrev-commit --date=relative</span><br><span class=\"line\">alias.llg=<span class=\"built_in\">log</span> --color --graph --pretty=format:<span class=\"string\">'%C(bold white)%H %d%Creset%n%s%n%+b%C(bold blue)%an &lt;%ae&gt;%Creset %C(bold green)%cr (%ci)'</span> --abbrev-commit</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"alias-git-plugin\"><a href=\"#alias-git-plugin\" class=\"headerlink\" title=\"alias(git-plugin)\"></a>alias(git-plugin)</h2><p>从 oh-my-zsh 中拿来的，大部分都用不到…</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g=git</span><br><span class=\"line\">ga=<span class=\"string\">'git add'</span></span><br><span class=\"line\">gaa=<span class=\"string\">'git add --all'</span></span><br><span class=\"line\">gap=<span class=\"string\">'git apply'</span></span><br><span class=\"line\">gapa=<span class=\"string\">'git add --patch'</span></span><br><span class=\"line\">gau=<span class=\"string\">'git add --update'</span></span><br><span class=\"line\">gav=<span class=\"string\">'git add --verbose'</span></span><br><span class=\"line\">gb=<span class=\"string\">'git branch'</span></span><br><span class=\"line\">gbD=<span class=\"string\">'git branch -D'</span></span><br><span class=\"line\">gba=<span class=\"string\">'git branch -a'</span></span><br><span class=\"line\">gbd=<span class=\"string\">'git branch -d'</span></span><br><span class=\"line\">gbda=<span class=\"string\">'git branch --no-color --merged | command grep -vE \"^(\\*|\\s*(master|develop|dev)\\s*$)\" | command xargs -n 1 git branch -d'</span></span><br><span class=\"line\">gbl=<span class=\"string\">'git blame -b -w'</span></span><br><span class=\"line\">gbnm=<span class=\"string\">'git branch --no-merged'</span></span><br><span class=\"line\">gbr=<span class=\"string\">'git branch --remote'</span></span><br><span class=\"line\">gbs=<span class=\"string\">'git bisect'</span></span><br><span class=\"line\">gbsb=<span class=\"string\">'git bisect bad'</span></span><br><span class=\"line\">gbsg=<span class=\"string\">'git bisect good'</span></span><br><span class=\"line\">gbsr=<span class=\"string\">'git bisect reset'</span></span><br><span class=\"line\">gbss=<span class=\"string\">'git bisect start'</span></span><br><span class=\"line\">gc=<span class=\"string\">'git commit -v'</span></span><br><span class=\"line\"><span class=\"string\">'gc!'</span>=<span class=\"string\">'git commit -v --amend'</span></span><br><span class=\"line\">gca=<span class=\"string\">'git commit -v -a'</span></span><br><span class=\"line\"><span class=\"string\">'gca!'</span>=<span class=\"string\">'git commit -v -a --amend'</span></span><br><span class=\"line\">gcam=<span class=\"string\">'git commit -a -m'</span></span><br><span class=\"line\"><span class=\"string\">'gcan!'</span>=<span class=\"string\">'git commit -v -a --no-edit --amend'</span></span><br><span class=\"line\"><span class=\"string\">'gcans!'</span>=<span class=\"string\">'git commit -v -a -s --no-edit --amend'</span></span><br><span class=\"line\">gcb=<span class=\"string\">'git checkout -b'</span></span><br><span class=\"line\">gcd=<span class=\"string\">'git checkout develop'</span></span><br><span class=\"line\">gcf=<span class=\"string\">'git config --list'</span></span><br><span class=\"line\">gcl=<span class=\"string\">'git clone --recurse-submodules'</span></span><br><span class=\"line\">gclean=<span class=\"string\">'git clean -fd'</span></span><br><span class=\"line\">gcm=<span class=\"string\">'git checkout master'</span></span><br><span class=\"line\">gcmsg=<span class=\"string\">'git commit -m'</span></span><br><span class=\"line\"><span class=\"string\">'gcn!'</span>=<span class=\"string\">'git commit -v --no-edit --amend'</span></span><br><span class=\"line\">gco=<span class=\"string\">'git checkout'</span></span><br><span class=\"line\">gcount=<span class=\"string\">'git shortlog -sn'</span></span><br><span class=\"line\">gcp=<span class=\"string\">'git cherry-pick'</span></span><br><span class=\"line\">gcpa=<span class=\"string\">'git cherry-pick --abort'</span></span><br><span class=\"line\">gcpc=<span class=\"string\">'git cherry-pick --continue'</span></span><br><span class=\"line\">gcs=<span class=\"string\">'git commit -S'</span></span><br><span class=\"line\">gcsm=<span class=\"string\">'git commit -s -m'</span></span><br><span class=\"line\">gd=<span class=\"string\">'git diff'</span></span><br><span class=\"line\">gdca=<span class=\"string\">'git diff --cached'</span></span><br><span class=\"line\">gdct=<span class=\"string\">'git describe --tags `git rev-list --tags --max-count=1`'</span></span><br><span class=\"line\">gdcw=<span class=\"string\">'git diff --cached --word-diff'</span></span><br><span class=\"line\">gds=<span class=\"string\">'git diff --staged'</span></span><br><span class=\"line\">gdt=<span class=\"string\">'git diff-tree --no-commit-id --name-only -r'</span></span><br><span class=\"line\">gdw=<span class=\"string\">'git diff --word-diff'</span></span><br><span class=\"line\">gf=<span class=\"string\">'git fetch'</span></span><br><span class=\"line\">gfa=<span class=\"string\">'git fetch --all --prune'</span></span><br><span class=\"line\">gfo=<span class=\"string\">'git fetch origin'</span></span><br><span class=\"line\">gg=<span class=\"string\">'git gui citool'</span></span><br><span class=\"line\">gga=<span class=\"string\">'git gui citool --amend'</span></span><br><span class=\"line\">ggpull=<span class=\"string\">'git pull origin \"$(git_current_branch)\"'</span></span><br><span class=\"line\">ggpush=<span class=\"string\">'git push origin \"$(git_current_branch)\"'</span></span><br><span class=\"line\">ggsup=<span class=\"string\">'git branch --set-upstream-to=origin/$(git_current_branch)'</span></span><br><span class=\"line\">ghh=<span class=\"string\">'git help'</span></span><br><span class=\"line\">gignore=<span class=\"string\">'git update-index --assume-unchanged'</span></span><br><span class=\"line\">gignored=<span class=\"string\">'git ls-files -v | grep \"^[[:lower:]]\"'</span></span><br><span class=\"line\">git-svn-dcommit-push=<span class=\"string\">'git svn dcommit &amp;&amp; git push github master:svntrunk'</span></span><br><span class=\"line\">gk=<span class=\"string\">'\\gitk --all --branches'</span></span><br><span class=\"line\">gke=<span class=\"string\">'\\gitk --all $(git log -g --pretty=%h)'</span></span><br><span class=\"line\">gl=<span class=\"string\">'git pull'</span></span><br><span class=\"line\">glg=<span class=\"string\">'git log --stat'</span></span><br><span class=\"line\">glgg=<span class=\"string\">'git log --graph'</span></span><br><span class=\"line\">glgga=<span class=\"string\">'git log --graph --decorate --all'</span></span><br><span class=\"line\">glgm=<span class=\"string\">'git log --graph --max-count=10'</span></span><br><span class=\"line\">glgp=<span class=\"string\">'git log --stat -p'</span></span><br><span class=\"line\">glo=<span class=\"string\">'git log --oneline --decorate'</span></span><br><span class=\"line\">glod=<span class=\"string\">'git log --graph --pretty='</span>\\<span class=\"string\">''</span>%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)&lt;%an&gt;%Creset<span class=\"string\">'\\'</span></span><br><span class=\"line\">glods=<span class=\"string\">'git log --graph --pretty='</span>\\<span class=\"string\">''</span>%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)&lt;%an&gt;%Creset<span class=\"string\">'\\'</span><span class=\"string\">' --date=short'</span></span><br><span class=\"line\">glog=<span class=\"string\">'git log --oneline --decorate --graph'</span></span><br><span class=\"line\">gloga=<span class=\"string\">'git log --oneline --decorate --graph --all'</span></span><br><span class=\"line\">glol=<span class=\"string\">'git log --graph --pretty='</span>\\<span class=\"string\">''</span>%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset<span class=\"string\">'\\'</span></span><br><span class=\"line\">glola=<span class=\"string\">'git log --graph --pretty='</span>\\<span class=\"string\">''</span>%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset<span class=\"string\">'\\'</span><span class=\"string\">' --all'</span></span><br><span class=\"line\">glols=<span class=\"string\">'git log --graph --pretty='</span>\\<span class=\"string\">''</span>%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset<span class=\"string\">'\\'</span><span class=\"string\">' --stat'</span></span><br><span class=\"line\">glp=_git_log_prettily</span><br><span class=\"line\">glum=<span class=\"string\">'git pull upstream master'</span></span><br><span class=\"line\">gm=<span class=\"string\">'git merge'</span></span><br><span class=\"line\">gma=<span class=\"string\">'git merge --abort'</span></span><br><span class=\"line\">gmom=<span class=\"string\">'git merge origin/master'</span></span><br><span class=\"line\">gmt=<span class=\"string\">'git mergetool --no-prompt'</span></span><br><span class=\"line\">gmtvim=<span class=\"string\">'git mergetool --no-prompt --tool=vimdiff'</span></span><br><span class=\"line\">gmum=<span class=\"string\">'git merge upstream/master'</span></span><br><span class=\"line\">gp=<span class=\"string\">'git push'</span></span><br><span class=\"line\">gpd=<span class=\"string\">'git push --dry-run'</span></span><br><span class=\"line\">gpf=<span class=\"string\">'git push --force-with-lease'</span></span><br><span class=\"line\"><span class=\"string\">'gpf!'</span>=<span class=\"string\">'git push --force'</span></span><br><span class=\"line\">gpoat=<span class=\"string\">'git push origin --all &amp;&amp; git push origin --tags'</span></span><br><span class=\"line\">gpristine=<span class=\"string\">'git reset --hard &amp;&amp; git clean -dfx'</span></span><br><span class=\"line\">gpsup=<span class=\"string\">'git push --set-upstream origin $(git_current_branch)'</span></span><br><span class=\"line\">gpu=<span class=\"string\">'git push upstream'</span></span><br><span class=\"line\">gpv=<span class=\"string\">'git push -v'</span></span><br><span class=\"line\">gr=<span class=\"string\">'git remote'</span></span><br><span class=\"line\">gra=<span class=\"string\">'git remote add'</span></span><br><span class=\"line\">grb=<span class=\"string\">'git rebase'</span></span><br><span class=\"line\">grba=<span class=\"string\">'git rebase --abort'</span></span><br><span class=\"line\">grbc=<span class=\"string\">'git rebase --continue'</span></span><br><span class=\"line\">grbd=<span class=\"string\">'git rebase develop'</span></span><br><span class=\"line\">grbi=<span class=\"string\">'git rebase -i'</span></span><br><span class=\"line\">grbm=<span class=\"string\">'git rebase master'</span></span><br><span class=\"line\">grbs=<span class=\"string\">'git rebase --skip'</span></span><br><span class=\"line\">grep=<span class=\"string\">'grep  --color=auto --exclude-dir=&#123;.bzr,CVS,.git,.hg,.svn&#125;'</span></span><br><span class=\"line\">grh=<span class=\"string\">'git reset'</span></span><br><span class=\"line\">grhh=<span class=\"string\">'git reset --hard'</span></span><br><span class=\"line\">grm=<span class=\"string\">'git rm'</span></span><br><span class=\"line\">grmc=<span class=\"string\">'git rm --cached'</span></span><br><span class=\"line\">grmv=<span class=\"string\">'git remote rename'</span></span><br><span class=\"line\">grrm=<span class=\"string\">'git remote remove'</span></span><br><span class=\"line\">grset=<span class=\"string\">'git remote set-url'</span></span><br><span class=\"line\">grt=<span class=\"string\">'cd $(git rev-parse --show-toplevel || echo \".\")'</span></span><br><span class=\"line\">gru=<span class=\"string\">'git reset --'</span></span><br><span class=\"line\">grup=<span class=\"string\">'git remote update'</span></span><br><span class=\"line\">grv=<span class=\"string\">'git remote -v'</span></span><br><span class=\"line\">gsb=<span class=\"string\">'git status -sb'</span></span><br><span class=\"line\">gsd=<span class=\"string\">'git svn dcommit'</span></span><br><span class=\"line\">gsh=<span class=\"string\">'git show'</span></span><br><span class=\"line\">gsi=<span class=\"string\">'git submodule init'</span></span><br><span class=\"line\">gsps=<span class=\"string\">'git show --pretty=short --show-signature'</span></span><br><span class=\"line\">gsr=<span class=\"string\">'git svn rebase'</span></span><br><span class=\"line\">gss=<span class=\"string\">'git status -s'</span></span><br><span class=\"line\">gst=<span class=\"string\">'git status'</span></span><br><span class=\"line\">gsta=<span class=\"string\">'git stash save'</span></span><br><span class=\"line\">gstaa=<span class=\"string\">'git stash apply'</span></span><br><span class=\"line\">gstall=<span class=\"string\">'git stash --all'</span></span><br><span class=\"line\">gstc=<span class=\"string\">'git stash clear'</span></span><br><span class=\"line\">gstd=<span class=\"string\">'git stash drop'</span></span><br><span class=\"line\">gstl=<span class=\"string\">'git stash list'</span></span><br><span class=\"line\">gstp=<span class=\"string\">'git stash pop'</span></span><br><span class=\"line\">gsts=<span class=\"string\">'git stash show --text'</span></span><br><span class=\"line\">gsu=<span class=\"string\">'git submodule update'</span></span><br><span class=\"line\">gts=<span class=\"string\">'git tag -s'</span></span><br><span class=\"line\">gtv=<span class=\"string\">'git tag | sort -V'</span></span><br><span class=\"line\">gunignore=<span class=\"string\">'git update-index --no-assume-unchanged'</span></span><br><span class=\"line\">gunwip=<span class=\"string\">'git log -n 1 | grep -q -c \"\\-\\-wip\\-\\-\" &amp;&amp; git reset HEAD~1'</span></span><br><span class=\"line\">gup=<span class=\"string\">'git pull --rebase'</span></span><br><span class=\"line\">gupa=<span class=\"string\">'git pull --rebase --autostash'</span></span><br><span class=\"line\">gupav=<span class=\"string\">'git pull --rebase --autostash -v'</span></span><br><span class=\"line\">gupv=<span class=\"string\">'git pull --rebase -v'</span></span><br><span class=\"line\">gwch=<span class=\"string\">'git whatchanged -p --abbrev-commit --pretty=medium'</span></span><br><span class=\"line\">gwip=<span class=\"string\">'git add -A; git rm $(git ls-files --deleted) 2&gt; /dev/null; git commit --no-verify -m \"--wip-- [skip ci]\"'</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\" target=\"_blank\" rel=\"noopener\">git简明指南</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">Git教程(廖雪峰)</a></li>\n<li><a href=\"https://github.com/k88hudson/git-flight-rules/blob/master/README_zh-CN.md\" target=\"_blank\" rel=\"noopener\">Git飞行规则(Flight Rules)</a></li>\n<li><a href=\"http://marklodato.github.io/visual-git-guide/index-zh-cn.html\" target=\"_blank\" rel=\"noopener\">图解Git</a></li>\n<li><a href=\"https://learngitbranching.js.org/\" target=\"_blank\" rel=\"noopener\">Learn Git Branching</a></li>\n<li><a href=\"https://book.git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">git book</a></li>\n</ul>\n<script src=\"/js/mermaid-v8.4.0.min.js\"></script>\n<script>mermaid.initialize({startOnLoad:true});</script>"},{"layout":"post","title":"React Hooks 入门","date":"2019-07-14T10:45:00.000Z","_content":"\n学习使用 react-hooks 语法。\n\n> Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.\n\n<!-- more -->\n\n## 现有 hooks\n\n官方分了类，一类基础，一类扩展。其实常用的不多，主要还是 `useState`、`useEffect`、`useRef`、`useCallback`(`useMemo`和它差不多)。\n\n**Basic Hooks**\n* useState\n* useEffect\n* useContext\n\n**Additional Hooks**\n* useReducer\n* useCallback\n* useMemo\n* useRef\n* useImperativeHandle\n* useLayoutEffect\n* useDebugValue\n\n## 使用 hooks 的规则\n\n#### 首先是必须写到最顶层\n\n```jsx\nfunction Counter() {\n  // 这样写是可以的，hooks 每次都必定执行到\n  const [count, setCount] = useState(0)\n  const [timer, setTimer] = useState(0)\n    \n  // 这样是不行的，因为 hooks 有的时候可能不会被执行\n  if(condition) {\n    const [data, setData] = useState([])\n  }\n  // ...\n}\n```\n\n#### 只能在函数组件中使用\n\n简单地说，就是要在 react 组件中使用。不能你在 react 项目中，随便写个公共方法就用 hooks，除非这个 hooks 最终用到了组件中。最终结论就是 hooks 最终必须应用到 react 组件中。\n\n此外，传统的使用类方式的组件不可以使用 hooks，否则提示 Invalid Hook Call。\n\n## useState\n\n#### 常规用法\n\n用法比较简单，直接上 demo。\n\n```jsx\nfunction Counter() {\n  const [count, setCount] = useState(0)\n  \n  const handleClick = () => {\n    setCount(count + 1)\n  }\n  \n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={handleClick}>Click me</button>\n    </div>\n  )\n}\n```\n\n#### 第二参数\n\n要注意的是，`setState` (即上文的 `setCount`)是没有第二个参数的。\n\n如果确实需要像以前一样的话，那么需要用到 `useEffect` 方法实现，这里先给出demo：\n\n```jsx\nfunction Counter() {\n  const [count, setCount] = useState(0)\n  \n  const handleClick = () => {\n    setCount(count + 1)\n  }\n\n  useEffect(() => {\n    document.title = count\n  }, [count])\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={handleClick}>Click me</button>\n    </div>\n  )\n}\n```\n\n#### 传入函数\n \n虽然第二个参数没有了，但是第一个参数还可以是一个函数：\n\n```jsx\nsetState(state => {})\n```\n\n比如上文的代码，可以调整为：\n\n```jsx\nconst handleClick = () => {\n  // setCount(count + 1)\n  setCount(count => count + 1)\n}\n```\n\n这么写有时候可以解决引用问题，因为它的第一个参数是函数，函数里面永远可以拿到最新的 state。不这么写的话，可能需要用 `useRef` 来解决。\n\n#### 直接定义对象\n\n实际使用的时候，有时候也会定义一个对象：\n\n```jsx\nconst [state, setState] = useState({})\n```\n\n比如订单数据，都放在一个对象中，这样省去定义大量的 hooks。\n\n## useEffect\n\n处理副作用的方法。在更新改变后触发，相当于之前的 `componentDidMount` `componentDidUpdate`，不论是第一次渲染还是更新后，都会触发。\n\n```jsx\nuseEffect(fn, [...])\n```\n\n第一个参数是执行函数，可以有返回值（返回函数），内容就是取消副作用（clean up）。\n\n第二个参数是数组，相当于仅当数组的值改变后，才会触发函数。如果传入空数组，相当于后续永远不会在改变了，可以模拟 `componentDidMount`。\n\n#### 常规用法\n\n一个例子就是上文 `setState` 的用法。\n\n这里给出另一个常见的例子：\n\n```jsx\nfunction Test() {\n  const [value1, setValue1] = useState('')\n  const [value2, setValue2] = useState('')\n  const [allowed, setAllowed] = useState(false)\n\n  const handleInput1Change = e => {\n    setValue1(e.target.value)\n  }\n  \n  const handleInput2Change = e => {\n    setValue2(e.target.value)\n  }\n\n  // 传入空数组，模拟 componentDidMount\n  useEffect(() => {\n    document.title = '123'\n  }, [])\n\n  // 同时检测两个值\n  useEffect(() => {\n    setAllowed(value1 && value2)\n  }, [value1, value2])\n\n  return (\n    <div>\n      <input\n        value={value1}\n        onChange={handleInput1Change}\n        style={ { border: '1px solid #333' } }\n        placeholder=\"username\"\n      />\n      <br />\n      <input\n        value={value2}\n        onChange={handleInput2Change}\n        style={ { border: '1px solid #333' } }\n        placeholder=\"password\"\n      />\n      <br />\n      <p>allowed:{allowed ? 'yes' : 'no'}</p>\n    </div>\n  )\n}\n```\n\n`useEffect` 实际用起来，最常用的就是传空数组，模拟 `componentDidMount`。剩下传入参数的时候，和 vue 的 `watch` 差不多。\n\n#### 返回函数\n\n再给出一个需要取消副作用的例子（例子的实际意义不好，仅做代码演示）：\n\n```jsx\n  // 仅当输入内容长度均大于5位后，才考虑自动提交数据\n  // 并在提交前提供3秒延迟\n  // 这个例子就是常见的防抖\n  useEffect(() => {\n    setAllowed(value1 && value2)\n    let ref = null\n    if (value1.length >= 5 && value2.length >= 5) {\n      console.log('启动定时器打印log')\n      ref = setTimeout(() => {\n        console.log('log', value1, value2)\n      }, 3000)\n    }\n    return () => {\n      console.log('清理定时器')\n      clearTimeout(ref)\n    }\n  }, [value1, value2])\n```\n\n返回清理函数的情况，大部分是处理定时器或者发出一个 ajax 请求后，需要中断处理的情况。\n\n目前来看我在项目里面还没用到，可能是我的项目中，没有得到数据，页面不可能跳转到下一步，也就不存在需要清理副作用的情况。\n\n## useRef\n\n`useRef` 在 hooks 中，有两种用法。第一种是常规的 ref，第二种是用于穿透闭包。\n\n通过 `useRef` 可以创建一个对象，可以理解为函数内的全局变量。为了能做到实时引用，所以他必须是一个对象。具体的引用值，都存在了 `current` 属性上，这就使得它可以穿透闭包。\n\n#### 常规用法\n\n先说第一种常规 ref 用法，和之前写的 `React.createRef` 一致：\n\n```jsx\nfunction Test() {\n  const [isFocus, setIsFocus] = useState(false)\n  const [value, setValue] = useState('')\n\n  const inputRef = useRef(null)\n\n  const handleInputChange = e => {\n    setValue(e.target.value)\n  }\n\n  const handleInputFocus = () => {\n    setIsFocus(true)\n  }\n\n  const handleInputBlur = () => {\n    setIsFocus(false)\n  }\n\n  const handleBtnClick = () => {\n    inputRef.current.focus()\n  }\n\n  return (\n    <div>\n      <input\n        value={value}\n        onChange={handleInputChange}\n        onFocus={handleInputFocus}\n        onBlur={handleInputBlur}\n        ref={inputRef}\n        style={ { border: '1px solid #333' } }\n      />\n      <button onClick={handleBtnClick} style={ { border: '1px solid #333' } }>\n        click for focus\n      </button>\n      <br />\n      <p>focus:{isFocus ? 'yes' : 'no'}</p>\n    </div>\n  )\n}\n```\n\n#### 其他用法\n\n来说 ref 的第二种用法。\n\n首先看一个 demo：\n\n```jsx\nfunction Test() {\n  const [count, setCount] = useState(0)\n\n  const handleAddClick = e => {\n    setCount(count + 1)\n  }\n\n  const handleAlertClick = () => {\n    setTimeout(() => {\n      alert(count)\n    }, 3000)\n  }\n\n  return (\n    <div>\n      <span>counter:{count}</span>&nbsp;&nbsp;\n      <button onClick={handleAddClick} style={ { border: '1px solid #333' } }>\n        +1\n      </button>\n      <br />\n      <br />\n      <button onClick={handleAlertClick} style={ { border: '1px solid #333' } }>\n        alert\n      </button>\n    </div>\n  )\n}\n```\n\n操作结果为：\n\n* 点击 +1 按钮，增加计数器，增加到 3\n* 点击 alert，3秒后显示计数器的值\n* 点击 +1 按钮，增加计数器，增加到 5\n* 3秒到了，此时提示框显示了 3\n\n或许和你想的不一样，为什么不是显示 5？\n\n简言之，再点击 alert 按钮时候，此时计数器值是 3。**hooks 会缓存此状态！**所以3秒过后，就是提示 3 了。\n\n解决方法很简单，如果不是 react 项目，那么我们肯定用一个对象存储数据，这样 3 秒后提示内容，读取对象中的属性就好了。因为对象是传址（非传值）的。\n\nreact 亦如此。我们使用 useRef 来实现，其中的值保存在 `current` 中。\n\n```jsx\nfunction Test() {\n  const [count, setCount] = useState(0)\n  const valueRef = useRef()\n\n  const handleAddClick = e => {\n    const newVal = count + 1\n    setCount(newVal)\n    valueRef.current = newVal\n  }\n\n  const handleAlertClick = () => {\n    setTimeout(() => {\n      alert(valueRef.current)\n    }, 3000)\n  }\n\n  return (\n    <div>\n      <span>counter:{count}</span>&nbsp;&nbsp;\n      <button onClick={handleAddClick} style={ { border: '1px solid #333' } }>\n        +1\n      </button>\n      <br />\n      <br />\n      <button onClick={handleAlertClick} style={ { border: '1px solid #333' } }>\n        alert\n      </button>\n    </div>\n  )\n}\n```\n\n## useContext\n\n`useContext` 主要解决的是组件数据透传。比如父组件要定义一些数据，但是最终要在很深层次的子组件中使用，这时候用 `useContext` 非常方便。\n\n```jsx\nconst DataContext = React.createContext()\n\nfunction Child() {\n  return (\n    <DataContext.Consumer>\n      {value => {\n        return (\n          <div>\n            <p>name: {value.name}</p>\n            <p>age: {value.age}</p>\n          </div>\n        )\n      }}\n    </DataContext.Consumer>\n  )\n}\n\nfunction Parent() {\n  const [data, setData] = useState({ name: 'tim', age: 20 })\n  return (\n    <DataContext.Provider value={data}>\n      <div>\n        <Child />\n      </div>\n    </DataContext.Provider>\n  )\n}\n```\n\n唯一要说明的就是，`Provider` 的传值属性必须是 `value`。所以要么传一个值，要么传一个对象。\n\n\n## useReducer\n\n`useReducer` 使用起来非常简单，不管是否接触过 Redux，都能容易上手。\n\n```jsx\nconst initialState = { count: 0 }\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'increment':\n      return { count: state.count + 1 }\n    case 'incrementAny':\n      return { count: state.count + action.count }\n    case 'decrement':\n      return { count: state.count - 1 }\n    default:\n      return { count: state.count }\n  }\n}\n\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  return (\n    <div>\n      Count: {state.count}\n      <br />\n      <button onClick={() => dispatch({ type: 'increment' })}>+</button>\n      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>\n      <button onClick={() => dispatch({ type: 'incrementAny', count: 5 })}>\n        +5\n      </button>\n    </div>\n  )\n}\n```\n\n实际使用中，当多个组件公用一个状态时候，会用得到。\n\n## useCallback / useMemo\n\n使用 useCallback / useMemo 来缓存函数，提升执行效率。\n\n#### 常规用法\n\n下文例子中，输入数字，进行加法计算。输入空格，触发内容改变，但是数值没有变化。\n\n不做处理的情况下，每次输入，均会触发加法计算。\n\n使用了，`useMemo` 后，相同的值，只会计算一次。后续不会触发加法计算。\n\n```jsx\nfunction Counter() {\n  const [val1, setVal1] = useState(0)\n  const [val2, setVal2] = useState(0)\n\n  const add = (a, b) => {\n    console.log('add', a, b)\n    return a + b\n  }\n\n  const memoized = useCallback(add(val1, val2), [val1, val2])\n\n  const handleInput1Change = e => {\n    const val = Number(e.target.value)\n    console.log('input1:', val)\n    setVal1(val)\n    memoized()\n  }\n  const handleInput2Change = e => {\n    const val = Number(e.target.value)\n    console.log('input2:', val)\n    setVal2(val)\n  }\n\n  return (\n    <div>\n      <input onChange={handleInput1Change} value={val1} />\n      <input onChange={handleInput2Change} value={val2} />\n      <p>sum:{memoized}</p>\n    </div>\n  )\n}\n```\n\n如果要用 `useCallback`，上文需要调整一点就可以了。官方给出了两者关系，如下：\n\n```jsx\nuseCallback(fn, deps) \nuseMemo(() => fn, deps)\n```\n\n需要注意的是，`useMemo` 的第一个参数是个函数，**并且需要进行返回**！\n\n```jsx\n// const memoized = useCallback(add(val1, val2), [val1, val2])\nconst memoized = useMemo(() => {\n  return add(val1, val2)\n}, [val1, val2])\n```\n\n## 小结\n\n根据我这一段时间的使用，基本上没遇到太多坑，也就是参考上文的这些处理方法基本都可解决。\n\n唯独要注意的是，hooks 里面不要使用 `setInterval`，一言难尽，建议看 react 原作者文章（[见此](https://overreacted.io/zh-hans/making-seti@yukapril.comnterval-declarative-with-react-hooks)），解释的很清晰，也有直接用的 `useInterval` 方案。","source":"_posts/2019/2019-07-14-learning-reat-hooks.md","raw":"---\nlayout: post\ntitle: React Hooks 入门\ndate: 2019-07-14 10:45:00 GMT+0800\ncategories: [前端]\ntags:  [react, hooks]\n---\n\n学习使用 react-hooks 语法。\n\n> Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.\n\n<!-- more -->\n\n## 现有 hooks\n\n官方分了类，一类基础，一类扩展。其实常用的不多，主要还是 `useState`、`useEffect`、`useRef`、`useCallback`(`useMemo`和它差不多)。\n\n**Basic Hooks**\n* useState\n* useEffect\n* useContext\n\n**Additional Hooks**\n* useReducer\n* useCallback\n* useMemo\n* useRef\n* useImperativeHandle\n* useLayoutEffect\n* useDebugValue\n\n## 使用 hooks 的规则\n\n#### 首先是必须写到最顶层\n\n```jsx\nfunction Counter() {\n  // 这样写是可以的，hooks 每次都必定执行到\n  const [count, setCount] = useState(0)\n  const [timer, setTimer] = useState(0)\n    \n  // 这样是不行的，因为 hooks 有的时候可能不会被执行\n  if(condition) {\n    const [data, setData] = useState([])\n  }\n  // ...\n}\n```\n\n#### 只能在函数组件中使用\n\n简单地说，就是要在 react 组件中使用。不能你在 react 项目中，随便写个公共方法就用 hooks，除非这个 hooks 最终用到了组件中。最终结论就是 hooks 最终必须应用到 react 组件中。\n\n此外，传统的使用类方式的组件不可以使用 hooks，否则提示 Invalid Hook Call。\n\n## useState\n\n#### 常规用法\n\n用法比较简单，直接上 demo。\n\n```jsx\nfunction Counter() {\n  const [count, setCount] = useState(0)\n  \n  const handleClick = () => {\n    setCount(count + 1)\n  }\n  \n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={handleClick}>Click me</button>\n    </div>\n  )\n}\n```\n\n#### 第二参数\n\n要注意的是，`setState` (即上文的 `setCount`)是没有第二个参数的。\n\n如果确实需要像以前一样的话，那么需要用到 `useEffect` 方法实现，这里先给出demo：\n\n```jsx\nfunction Counter() {\n  const [count, setCount] = useState(0)\n  \n  const handleClick = () => {\n    setCount(count + 1)\n  }\n\n  useEffect(() => {\n    document.title = count\n  }, [count])\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={handleClick}>Click me</button>\n    </div>\n  )\n}\n```\n\n#### 传入函数\n \n虽然第二个参数没有了，但是第一个参数还可以是一个函数：\n\n```jsx\nsetState(state => {})\n```\n\n比如上文的代码，可以调整为：\n\n```jsx\nconst handleClick = () => {\n  // setCount(count + 1)\n  setCount(count => count + 1)\n}\n```\n\n这么写有时候可以解决引用问题，因为它的第一个参数是函数，函数里面永远可以拿到最新的 state。不这么写的话，可能需要用 `useRef` 来解决。\n\n#### 直接定义对象\n\n实际使用的时候，有时候也会定义一个对象：\n\n```jsx\nconst [state, setState] = useState({})\n```\n\n比如订单数据，都放在一个对象中，这样省去定义大量的 hooks。\n\n## useEffect\n\n处理副作用的方法。在更新改变后触发，相当于之前的 `componentDidMount` `componentDidUpdate`，不论是第一次渲染还是更新后，都会触发。\n\n```jsx\nuseEffect(fn, [...])\n```\n\n第一个参数是执行函数，可以有返回值（返回函数），内容就是取消副作用（clean up）。\n\n第二个参数是数组，相当于仅当数组的值改变后，才会触发函数。如果传入空数组，相当于后续永远不会在改变了，可以模拟 `componentDidMount`。\n\n#### 常规用法\n\n一个例子就是上文 `setState` 的用法。\n\n这里给出另一个常见的例子：\n\n```jsx\nfunction Test() {\n  const [value1, setValue1] = useState('')\n  const [value2, setValue2] = useState('')\n  const [allowed, setAllowed] = useState(false)\n\n  const handleInput1Change = e => {\n    setValue1(e.target.value)\n  }\n  \n  const handleInput2Change = e => {\n    setValue2(e.target.value)\n  }\n\n  // 传入空数组，模拟 componentDidMount\n  useEffect(() => {\n    document.title = '123'\n  }, [])\n\n  // 同时检测两个值\n  useEffect(() => {\n    setAllowed(value1 && value2)\n  }, [value1, value2])\n\n  return (\n    <div>\n      <input\n        value={value1}\n        onChange={handleInput1Change}\n        style={ { border: '1px solid #333' } }\n        placeholder=\"username\"\n      />\n      <br />\n      <input\n        value={value2}\n        onChange={handleInput2Change}\n        style={ { border: '1px solid #333' } }\n        placeholder=\"password\"\n      />\n      <br />\n      <p>allowed:{allowed ? 'yes' : 'no'}</p>\n    </div>\n  )\n}\n```\n\n`useEffect` 实际用起来，最常用的就是传空数组，模拟 `componentDidMount`。剩下传入参数的时候，和 vue 的 `watch` 差不多。\n\n#### 返回函数\n\n再给出一个需要取消副作用的例子（例子的实际意义不好，仅做代码演示）：\n\n```jsx\n  // 仅当输入内容长度均大于5位后，才考虑自动提交数据\n  // 并在提交前提供3秒延迟\n  // 这个例子就是常见的防抖\n  useEffect(() => {\n    setAllowed(value1 && value2)\n    let ref = null\n    if (value1.length >= 5 && value2.length >= 5) {\n      console.log('启动定时器打印log')\n      ref = setTimeout(() => {\n        console.log('log', value1, value2)\n      }, 3000)\n    }\n    return () => {\n      console.log('清理定时器')\n      clearTimeout(ref)\n    }\n  }, [value1, value2])\n```\n\n返回清理函数的情况，大部分是处理定时器或者发出一个 ajax 请求后，需要中断处理的情况。\n\n目前来看我在项目里面还没用到，可能是我的项目中，没有得到数据，页面不可能跳转到下一步，也就不存在需要清理副作用的情况。\n\n## useRef\n\n`useRef` 在 hooks 中，有两种用法。第一种是常规的 ref，第二种是用于穿透闭包。\n\n通过 `useRef` 可以创建一个对象，可以理解为函数内的全局变量。为了能做到实时引用，所以他必须是一个对象。具体的引用值，都存在了 `current` 属性上，这就使得它可以穿透闭包。\n\n#### 常规用法\n\n先说第一种常规 ref 用法，和之前写的 `React.createRef` 一致：\n\n```jsx\nfunction Test() {\n  const [isFocus, setIsFocus] = useState(false)\n  const [value, setValue] = useState('')\n\n  const inputRef = useRef(null)\n\n  const handleInputChange = e => {\n    setValue(e.target.value)\n  }\n\n  const handleInputFocus = () => {\n    setIsFocus(true)\n  }\n\n  const handleInputBlur = () => {\n    setIsFocus(false)\n  }\n\n  const handleBtnClick = () => {\n    inputRef.current.focus()\n  }\n\n  return (\n    <div>\n      <input\n        value={value}\n        onChange={handleInputChange}\n        onFocus={handleInputFocus}\n        onBlur={handleInputBlur}\n        ref={inputRef}\n        style={ { border: '1px solid #333' } }\n      />\n      <button onClick={handleBtnClick} style={ { border: '1px solid #333' } }>\n        click for focus\n      </button>\n      <br />\n      <p>focus:{isFocus ? 'yes' : 'no'}</p>\n    </div>\n  )\n}\n```\n\n#### 其他用法\n\n来说 ref 的第二种用法。\n\n首先看一个 demo：\n\n```jsx\nfunction Test() {\n  const [count, setCount] = useState(0)\n\n  const handleAddClick = e => {\n    setCount(count + 1)\n  }\n\n  const handleAlertClick = () => {\n    setTimeout(() => {\n      alert(count)\n    }, 3000)\n  }\n\n  return (\n    <div>\n      <span>counter:{count}</span>&nbsp;&nbsp;\n      <button onClick={handleAddClick} style={ { border: '1px solid #333' } }>\n        +1\n      </button>\n      <br />\n      <br />\n      <button onClick={handleAlertClick} style={ { border: '1px solid #333' } }>\n        alert\n      </button>\n    </div>\n  )\n}\n```\n\n操作结果为：\n\n* 点击 +1 按钮，增加计数器，增加到 3\n* 点击 alert，3秒后显示计数器的值\n* 点击 +1 按钮，增加计数器，增加到 5\n* 3秒到了，此时提示框显示了 3\n\n或许和你想的不一样，为什么不是显示 5？\n\n简言之，再点击 alert 按钮时候，此时计数器值是 3。**hooks 会缓存此状态！**所以3秒过后，就是提示 3 了。\n\n解决方法很简单，如果不是 react 项目，那么我们肯定用一个对象存储数据，这样 3 秒后提示内容，读取对象中的属性就好了。因为对象是传址（非传值）的。\n\nreact 亦如此。我们使用 useRef 来实现，其中的值保存在 `current` 中。\n\n```jsx\nfunction Test() {\n  const [count, setCount] = useState(0)\n  const valueRef = useRef()\n\n  const handleAddClick = e => {\n    const newVal = count + 1\n    setCount(newVal)\n    valueRef.current = newVal\n  }\n\n  const handleAlertClick = () => {\n    setTimeout(() => {\n      alert(valueRef.current)\n    }, 3000)\n  }\n\n  return (\n    <div>\n      <span>counter:{count}</span>&nbsp;&nbsp;\n      <button onClick={handleAddClick} style={ { border: '1px solid #333' } }>\n        +1\n      </button>\n      <br />\n      <br />\n      <button onClick={handleAlertClick} style={ { border: '1px solid #333' } }>\n        alert\n      </button>\n    </div>\n  )\n}\n```\n\n## useContext\n\n`useContext` 主要解决的是组件数据透传。比如父组件要定义一些数据，但是最终要在很深层次的子组件中使用，这时候用 `useContext` 非常方便。\n\n```jsx\nconst DataContext = React.createContext()\n\nfunction Child() {\n  return (\n    <DataContext.Consumer>\n      {value => {\n        return (\n          <div>\n            <p>name: {value.name}</p>\n            <p>age: {value.age}</p>\n          </div>\n        )\n      }}\n    </DataContext.Consumer>\n  )\n}\n\nfunction Parent() {\n  const [data, setData] = useState({ name: 'tim', age: 20 })\n  return (\n    <DataContext.Provider value={data}>\n      <div>\n        <Child />\n      </div>\n    </DataContext.Provider>\n  )\n}\n```\n\n唯一要说明的就是，`Provider` 的传值属性必须是 `value`。所以要么传一个值，要么传一个对象。\n\n\n## useReducer\n\n`useReducer` 使用起来非常简单，不管是否接触过 Redux，都能容易上手。\n\n```jsx\nconst initialState = { count: 0 }\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'increment':\n      return { count: state.count + 1 }\n    case 'incrementAny':\n      return { count: state.count + action.count }\n    case 'decrement':\n      return { count: state.count - 1 }\n    default:\n      return { count: state.count }\n  }\n}\n\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  return (\n    <div>\n      Count: {state.count}\n      <br />\n      <button onClick={() => dispatch({ type: 'increment' })}>+</button>\n      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>\n      <button onClick={() => dispatch({ type: 'incrementAny', count: 5 })}>\n        +5\n      </button>\n    </div>\n  )\n}\n```\n\n实际使用中，当多个组件公用一个状态时候，会用得到。\n\n## useCallback / useMemo\n\n使用 useCallback / useMemo 来缓存函数，提升执行效率。\n\n#### 常规用法\n\n下文例子中，输入数字，进行加法计算。输入空格，触发内容改变，但是数值没有变化。\n\n不做处理的情况下，每次输入，均会触发加法计算。\n\n使用了，`useMemo` 后，相同的值，只会计算一次。后续不会触发加法计算。\n\n```jsx\nfunction Counter() {\n  const [val1, setVal1] = useState(0)\n  const [val2, setVal2] = useState(0)\n\n  const add = (a, b) => {\n    console.log('add', a, b)\n    return a + b\n  }\n\n  const memoized = useCallback(add(val1, val2), [val1, val2])\n\n  const handleInput1Change = e => {\n    const val = Number(e.target.value)\n    console.log('input1:', val)\n    setVal1(val)\n    memoized()\n  }\n  const handleInput2Change = e => {\n    const val = Number(e.target.value)\n    console.log('input2:', val)\n    setVal2(val)\n  }\n\n  return (\n    <div>\n      <input onChange={handleInput1Change} value={val1} />\n      <input onChange={handleInput2Change} value={val2} />\n      <p>sum:{memoized}</p>\n    </div>\n  )\n}\n```\n\n如果要用 `useCallback`，上文需要调整一点就可以了。官方给出了两者关系，如下：\n\n```jsx\nuseCallback(fn, deps) \nuseMemo(() => fn, deps)\n```\n\n需要注意的是，`useMemo` 的第一个参数是个函数，**并且需要进行返回**！\n\n```jsx\n// const memoized = useCallback(add(val1, val2), [val1, val2])\nconst memoized = useMemo(() => {\n  return add(val1, val2)\n}, [val1, val2])\n```\n\n## 小结\n\n根据我这一段时间的使用，基本上没遇到太多坑，也就是参考上文的这些处理方法基本都可解决。\n\n唯独要注意的是，hooks 里面不要使用 `setInterval`，一言难尽，建议看 react 原作者文章（[见此](https://overreacted.io/zh-hans/making-seti@yukapril.comnterval-declarative-with-react-hooks)），解释的很清晰，也有直接用的 `useInterval` 方案。","slug":"2019-2019-07-14-learning-reat-hooks","published":1,"updated":"2020-03-02T07:16:34.761Z","comments":1,"photos":[],"link":"","_id":"cka5ik8d2006inybg8aj1u5xf","content":"<p>学习使用 react-hooks 语法。</p>\n<blockquote>\n<p>Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"现有-hooks\"><a href=\"#现有-hooks\" class=\"headerlink\" title=\"现有 hooks\"></a>现有 hooks</h2><p>官方分了类，一类基础，一类扩展。其实常用的不多，主要还是 <code>useState</code>、<code>useEffect</code>、<code>useRef</code>、<code>useCallback</code>(<code>useMemo</code>和它差不多)。</p>\n<p><strong>Basic Hooks</strong></p>\n<ul>\n<li>useState</li>\n<li>useEffect</li>\n<li>useContext</li>\n</ul>\n<p><strong>Additional Hooks</strong></p>\n<ul>\n<li>useReducer</li>\n<li>useCallback</li>\n<li>useMemo</li>\n<li>useRef</li>\n<li>useImperativeHandle</li>\n<li>useLayoutEffect</li>\n<li>useDebugValue</li>\n</ul>\n<h2 id=\"使用-hooks-的规则\"><a href=\"#使用-hooks-的规则\" class=\"headerlink\" title=\"使用 hooks 的规则\"></a>使用 hooks 的规则</h2><h4 id=\"首先是必须写到最顶层\"><a href=\"#首先是必须写到最顶层\" class=\"headerlink\" title=\"首先是必须写到最顶层\"></a>首先是必须写到最顶层</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Counter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这样写是可以的，hooks 每次都必定执行到</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [timer, setTimer] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"comment\">// 这样是不行的，因为 hooks 有的时候可能不会被执行</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(condition) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [data, setData] = useState([])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"只能在函数组件中使用\"><a href=\"#只能在函数组件中使用\" class=\"headerlink\" title=\"只能在函数组件中使用\"></a>只能在函数组件中使用</h4><p>简单地说，就是要在 react 组件中使用。不能你在 react 项目中，随便写个公共方法就用 hooks，除非这个 hooks 最终用到了组件中。最终结论就是 hooks 最终必须应用到 react 组件中。</p>\n<p>此外，传统的使用类方式的组件不可以使用 hooks，否则提示 Invalid Hook Call。</p>\n<h2 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h2><h4 id=\"常规用法\"><a href=\"#常规用法\" class=\"headerlink\" title=\"常规用法\"></a>常规用法</h4><p>用法比较简单，直接上 demo。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Counter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setCount(count + <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;handleClick&#125;&gt;Click me&lt;/</span>button&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第二参数\"><a href=\"#第二参数\" class=\"headerlink\" title=\"第二参数\"></a>第二参数</h4><p>要注意的是，<code>setState</code> (即上文的 <code>setCount</code>)是没有第二个参数的。</p>\n<p>如果确实需要像以前一样的话，那么需要用到 <code>useEffect</code> 方法实现，这里先给出demo：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Counter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setCount(count + <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.title = count</span><br><span class=\"line\">  &#125;, [count])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;handleClick&#125;&gt;Click me&lt;/</span>button&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"传入函数\"><a href=\"#传入函数\" class=\"headerlink\" title=\"传入函数\"></a>传入函数</h4><p>虽然第二个参数没有了，但是第一个参数还可以是一个函数：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setState(<span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>比如上文的代码，可以调整为：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// setCount(count + 1)</span></span><br><span class=\"line\">  setCount(<span class=\"function\"><span class=\"params\">count</span> =&gt;</span> count + <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这么写有时候可以解决引用问题，因为它的第一个参数是函数，函数里面永远可以拿到最新的 state。不这么写的话，可能需要用 <code>useRef</code> 来解决。</p>\n<h4 id=\"直接定义对象\"><a href=\"#直接定义对象\" class=\"headerlink\" title=\"直接定义对象\"></a>直接定义对象</h4><p>实际使用的时候，有时候也会定义一个对象：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [state, setState] = useState(&#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>比如订单数据，都放在一个对象中，这样省去定义大量的 hooks。</p>\n<h2 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h2><p>处理副作用的方法。在更新改变后触发，相当于之前的 <code>componentDidMount</code> <code>componentDidUpdate</code>，不论是第一次渲染还是更新后，都会触发。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(fn, [...])</span><br></pre></td></tr></table></figure>\n\n<p>第一个参数是执行函数，可以有返回值（返回函数），内容就是取消副作用（clean up）。</p>\n<p>第二个参数是数组，相当于仅当数组的值改变后，才会触发函数。如果传入空数组，相当于后续永远不会在改变了，可以模拟 <code>componentDidMount</code>。</p>\n<h4 id=\"常规用法-1\"><a href=\"#常规用法-1\" class=\"headerlink\" title=\"常规用法\"></a>常规用法</h4><p>一个例子就是上文 <code>setState</code> 的用法。</p>\n<p>这里给出另一个常见的例子：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [value1, setValue1] = useState(<span class=\"string\">''</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [value2, setValue2] = useState(<span class=\"string\">''</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [allowed, setAllowed] = useState(<span class=\"literal\">false</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInput1Change = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setValue1(e.target.value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInput2Change = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setValue2(e.target.value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 传入空数组，模拟 componentDidMount</span></span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.title = <span class=\"string\">'123'</span></span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 同时检测两个值</span></span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setAllowed(value1 &amp;&amp; value2)</span><br><span class=\"line\">  &#125;, [value1, value2])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;input</span><br><span class=\"line\">        value=&#123;value1&#125;</span><br><span class=\"line\">        onChange=&#123;handleInput1Change&#125;</span><br><span class=\"line\">        style=&#123; &#123; <span class=\"attr\">border</span>: <span class=\"string\">'1px solid #333'</span> &#125; &#125;</span><br><span class=\"line\">        placeholder=<span class=\"string\">\"username\"</span></span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">      &lt;br /&gt;</span><br><span class=\"line\">      &lt;input</span><br><span class=\"line\">        value=&#123;value2&#125;</span><br><span class=\"line\">        onChange=&#123;handleInput2Change&#125;</span><br><span class=\"line\">        style=&#123; &#123; <span class=\"attr\">border</span>: <span class=\"string\">'1px solid #333'</span> &#125; &#125;</span><br><span class=\"line\">        placeholder=<span class=\"string\">\"password\"</span></span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">      &lt;br /&gt;</span><br><span class=\"line\">      &lt;p&gt;allowed:&#123;allowed ? <span class=\"string\">'yes'</span> : <span class=\"string\">'no'</span>&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>useEffect</code> 实际用起来，最常用的就是传空数组，模拟 <code>componentDidMount</code>。剩下传入参数的时候，和 vue 的 <code>watch</code> 差不多。</p>\n<h4 id=\"返回函数\"><a href=\"#返回函数\" class=\"headerlink\" title=\"返回函数\"></a>返回函数</h4><p>再给出一个需要取消副作用的例子（例子的实际意义不好，仅做代码演示）：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 仅当输入内容长度均大于5位后，才考虑自动提交数据</span></span><br><span class=\"line\"><span class=\"comment\">// 并在提交前提供3秒延迟</span></span><br><span class=\"line\"><span class=\"comment\">// 这个例子就是常见的防抖</span></span><br><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  setAllowed(value1 &amp;&amp; value2)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ref = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value1.length &gt;= <span class=\"number\">5</span> &amp;&amp; value2.length &gt;= <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'启动定时器打印log'</span>)</span><br><span class=\"line\">    ref = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'log'</span>, value1, value2)</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'清理定时器'</span>)</span><br><span class=\"line\">    clearTimeout(ref)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, [value1, value2])</span><br></pre></td></tr></table></figure>\n\n<p>返回清理函数的情况，大部分是处理定时器或者发出一个 ajax 请求后，需要中断处理的情况。</p>\n<p>目前来看我在项目里面还没用到，可能是我的项目中，没有得到数据，页面不可能跳转到下一步，也就不存在需要清理副作用的情况。</p>\n<h2 id=\"useRef\"><a href=\"#useRef\" class=\"headerlink\" title=\"useRef\"></a>useRef</h2><p><code>useRef</code> 在 hooks 中，有两种用法。第一种是常规的 ref，第二种是用于穿透闭包。</p>\n<p>通过 <code>useRef</code> 可以创建一个对象，可以理解为函数内的全局变量。为了能做到实时引用，所以他必须是一个对象。具体的引用值，都存在了 <code>current</code> 属性上，这就使得它可以穿透闭包。</p>\n<h4 id=\"常规用法-2\"><a href=\"#常规用法-2\" class=\"headerlink\" title=\"常规用法\"></a>常规用法</h4><p>先说第一种常规 ref 用法，和之前写的 <code>React.createRef</code> 一致：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [isFocus, setIsFocus] = useState(<span class=\"literal\">false</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [value, setValue] = useState(<span class=\"string\">''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> inputRef = useRef(<span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInputChange = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setValue(e.target.value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInputFocus = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setIsFocus(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInputBlur = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setIsFocus(<span class=\"literal\">false</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleBtnClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    inputRef.current.focus()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;input</span><br><span class=\"line\">        value=&#123;value&#125;</span><br><span class=\"line\">        onChange=&#123;handleInputChange&#125;</span><br><span class=\"line\">        onFocus=&#123;handleInputFocus&#125;</span><br><span class=\"line\">        onBlur=&#123;handleInputBlur&#125;</span><br><span class=\"line\">        ref=&#123;inputRef&#125;</span><br><span class=\"line\">        style=&#123; &#123; <span class=\"attr\">border</span>: <span class=\"string\">'1px solid #333'</span> &#125; &#125;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;handleBtnClick&#125; style=&#123; &#123; <span class=\"attr\">border</span>: <span class=\"string\">'1px solid #333'</span> &#125; &#125;&gt;</span><br><span class=\"line\">        click <span class=\"keyword\">for</span> focus</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;br /</span>&gt;</span><br><span class=\"line\">      &lt;p&gt;focus:&#123;isFocus ? <span class=\"string\">'yes'</span> : <span class=\"string\">'no'</span>&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他用法\"><a href=\"#其他用法\" class=\"headerlink\" title=\"其他用法\"></a>其他用法</h4><p>来说 ref 的第二种用法。</p>\n<p>首先看一个 demo：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleAddClick = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setCount(count + <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleAlertClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      alert(count)</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;span&gt;counter:&#123;count&#125;&lt;<span class=\"regexp\">/span&gt;&amp;nbsp;&amp;nbsp;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;handleAddClick&#125; style=&#123; &#123; border: '1px solid #333' &#125; &#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        +1</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>button&gt;</span><br><span class=\"line\">      &lt;br /&gt;</span><br><span class=\"line\">      &lt;br /&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;handleAlertClick&#125; style=&#123; &#123; <span class=\"attr\">border</span>: <span class=\"string\">'1px solid #333'</span> &#125; &#125;&gt;</span><br><span class=\"line\">        alert</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>操作结果为：</p>\n<ul>\n<li>点击 +1 按钮，增加计数器，增加到 3</li>\n<li>点击 alert，3秒后显示计数器的值</li>\n<li>点击 +1 按钮，增加计数器，增加到 5</li>\n<li>3秒到了，此时提示框显示了 3</li>\n</ul>\n<p>或许和你想的不一样，为什么不是显示 5？</p>\n<p>简言之，再点击 alert 按钮时候，此时计数器值是 3。<strong>hooks 会缓存此状态！</strong>所以3秒过后，就是提示 3 了。</p>\n<p>解决方法很简单，如果不是 react 项目，那么我们肯定用一个对象存储数据，这样 3 秒后提示内容，读取对象中的属性就好了。因为对象是传址（非传值）的。</p>\n<p>react 亦如此。我们使用 useRef 来实现，其中的值保存在 <code>current</code> 中。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> valueRef = useRef()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleAddClick = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newVal = count + <span class=\"number\">1</span></span><br><span class=\"line\">    setCount(newVal)</span><br><span class=\"line\">    valueRef.current = newVal</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleAlertClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      alert(valueRef.current)</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;span&gt;counter:&#123;count&#125;&lt;<span class=\"regexp\">/span&gt;&amp;nbsp;&amp;nbsp;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;handleAddClick&#125; style=&#123; &#123; border: '1px solid #333' &#125; &#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        +1</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>button&gt;</span><br><span class=\"line\">      &lt;br /&gt;</span><br><span class=\"line\">      &lt;br /&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;handleAlertClick&#125; style=&#123; &#123; <span class=\"attr\">border</span>: <span class=\"string\">'1px solid #333'</span> &#125; &#125;&gt;</span><br><span class=\"line\">        alert</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"useContext\"><a href=\"#useContext\" class=\"headerlink\" title=\"useContext\"></a>useContext</h2><p><code>useContext</code> 主要解决的是组件数据透传。比如父组件要定义一些数据，但是最终要在很深层次的子组件中使用，这时候用 <code>useContext</code> 非常方便。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> DataContext = React.createContext()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;DataContext.Consumer&gt;</span><br><span class=\"line\">      &#123;value =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">          &lt;div&gt;</span><br><span class=\"line\">            &lt;p&gt;name: &#123;value.name&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;p&gt;age: &#123;value.age&#125;&lt;/</span>p&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        )</span></span><br><span class=\"line\"><span class=\"regexp\">      &#125;&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>DataContext.Consumer&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [data, setData] = useState(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'tim'</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;DataContext.Provider value=&#123;data&#125;&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;Child /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>DataContext.Provider&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>唯一要说明的就是，<code>Provider</code> 的传值属性必须是 <code>value</code>。所以要么传一个值，要么传一个对象。</p>\n<h2 id=\"useReducer\"><a href=\"#useReducer\" class=\"headerlink\" title=\"useReducer\"></a>useReducer</h2><p><code>useReducer</code> 使用起来非常简单，不管是否接触过 Redux，都能容易上手。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> initialState = &#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reducer</span>(<span class=\"params\">state, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'increment'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.count + <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'incrementAny'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.count + action.count &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'decrement'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.count - <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.count &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Counter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [state, dispatch] = useReducer(reducer, initialState)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      Count: &#123;state.count&#125;</span><br><span class=\"line\">      &lt;br /&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'increment'</span> &#125;)&#125;&gt;+<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'decrement'</span> &#125;)&#125;&gt;-<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'incrementAny'</span>, <span class=\"attr\">count</span>: <span class=\"number\">5</span> &#125;)&#125;&gt;</span><br><span class=\"line\">        +<span class=\"number\">5</span></span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际使用中，当多个组件公用一个状态时候，会用得到。</p>\n<h2 id=\"useCallback-useMemo\"><a href=\"#useCallback-useMemo\" class=\"headerlink\" title=\"useCallback / useMemo\"></a>useCallback / useMemo</h2><p>使用 useCallback / useMemo 来缓存函数，提升执行效率。</p>\n<h4 id=\"常规用法-3\"><a href=\"#常规用法-3\" class=\"headerlink\" title=\"常规用法\"></a>常规用法</h4><p>下文例子中，输入数字，进行加法计算。输入空格，触发内容改变，但是数值没有变化。</p>\n<p>不做处理的情况下，每次输入，均会触发加法计算。</p>\n<p>使用了，<code>useMemo</code> 后，相同的值，只会计算一次。后续不会触发加法计算。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Counter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [val1, setVal1] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [val2, setVal2] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'add'</span>, a, b)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> memoized = useCallback(add(val1, val2), [val1, val2])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInput1Change = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> val = <span class=\"built_in\">Number</span>(e.target.value)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'input1:'</span>, val)</span><br><span class=\"line\">    setVal1(val)</span><br><span class=\"line\">    memoized()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInput2Change = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> val = <span class=\"built_in\">Number</span>(e.target.value)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'input2:'</span>, val)</span><br><span class=\"line\">    setVal2(val)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;input onChange=&#123;handleInput1Change&#125; value=&#123;val1&#125; /&gt;</span><br><span class=\"line\">      &lt;input onChange=&#123;handleInput2Change&#125; value=&#123;val2&#125; /&gt;</span><br><span class=\"line\">      &lt;p&gt;sum:&#123;memoized&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果要用 <code>useCallback</code>，上文需要调整一点就可以了。官方给出了两者关系，如下：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useCallback(fn, deps) </span><br><span class=\"line\">useMemo(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> fn, deps)</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，<code>useMemo</code> 的第一个参数是个函数，<strong>并且需要进行返回</strong>！</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// const memoized = useCallback(add(val1, val2), [val1, val2])</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> memoized = useMemo(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> add(val1, val2)</span><br><span class=\"line\">&#125;, [val1, val2])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>根据我这一段时间的使用，基本上没遇到太多坑，也就是参考上文的这些处理方法基本都可解决。</p>\n<p>唯独要注意的是，hooks 里面不要使用 <code>setInterval</code>，一言难尽，建议看 react 原作者文章（<a href=\"https://overreacted.io/zh-hans/making-seti@yukapril.comnterval-declarative-with-react-hooks\" target=\"_blank\" rel=\"noopener\">见此</a>），解释的很清晰，也有直接用的 <code>useInterval</code> 方案。</p>\n","site":{"data":{}},"excerpt":"<p>学习使用 react-hooks 语法。</p>\n<blockquote>\n<p>Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.</p>\n</blockquote>","more":"<h2 id=\"现有-hooks\"><a href=\"#现有-hooks\" class=\"headerlink\" title=\"现有 hooks\"></a>现有 hooks</h2><p>官方分了类，一类基础，一类扩展。其实常用的不多，主要还是 <code>useState</code>、<code>useEffect</code>、<code>useRef</code>、<code>useCallback</code>(<code>useMemo</code>和它差不多)。</p>\n<p><strong>Basic Hooks</strong></p>\n<ul>\n<li>useState</li>\n<li>useEffect</li>\n<li>useContext</li>\n</ul>\n<p><strong>Additional Hooks</strong></p>\n<ul>\n<li>useReducer</li>\n<li>useCallback</li>\n<li>useMemo</li>\n<li>useRef</li>\n<li>useImperativeHandle</li>\n<li>useLayoutEffect</li>\n<li>useDebugValue</li>\n</ul>\n<h2 id=\"使用-hooks-的规则\"><a href=\"#使用-hooks-的规则\" class=\"headerlink\" title=\"使用 hooks 的规则\"></a>使用 hooks 的规则</h2><h4 id=\"首先是必须写到最顶层\"><a href=\"#首先是必须写到最顶层\" class=\"headerlink\" title=\"首先是必须写到最顶层\"></a>首先是必须写到最顶层</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Counter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这样写是可以的，hooks 每次都必定执行到</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [timer, setTimer] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"comment\">// 这样是不行的，因为 hooks 有的时候可能不会被执行</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(condition) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [data, setData] = useState([])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"只能在函数组件中使用\"><a href=\"#只能在函数组件中使用\" class=\"headerlink\" title=\"只能在函数组件中使用\"></a>只能在函数组件中使用</h4><p>简单地说，就是要在 react 组件中使用。不能你在 react 项目中，随便写个公共方法就用 hooks，除非这个 hooks 最终用到了组件中。最终结论就是 hooks 最终必须应用到 react 组件中。</p>\n<p>此外，传统的使用类方式的组件不可以使用 hooks，否则提示 Invalid Hook Call。</p>\n<h2 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h2><h4 id=\"常规用法\"><a href=\"#常规用法\" class=\"headerlink\" title=\"常规用法\"></a>常规用法</h4><p>用法比较简单，直接上 demo。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Counter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setCount(count + <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;handleClick&#125;&gt;Click me&lt;/</span>button&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第二参数\"><a href=\"#第二参数\" class=\"headerlink\" title=\"第二参数\"></a>第二参数</h4><p>要注意的是，<code>setState</code> (即上文的 <code>setCount</code>)是没有第二个参数的。</p>\n<p>如果确实需要像以前一样的话，那么需要用到 <code>useEffect</code> 方法实现，这里先给出demo：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Counter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setCount(count + <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.title = count</span><br><span class=\"line\">  &#125;, [count])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;handleClick&#125;&gt;Click me&lt;/</span>button&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"传入函数\"><a href=\"#传入函数\" class=\"headerlink\" title=\"传入函数\"></a>传入函数</h4><p>虽然第二个参数没有了，但是第一个参数还可以是一个函数：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setState(<span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>比如上文的代码，可以调整为：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// setCount(count + 1)</span></span><br><span class=\"line\">  setCount(<span class=\"function\"><span class=\"params\">count</span> =&gt;</span> count + <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这么写有时候可以解决引用问题，因为它的第一个参数是函数，函数里面永远可以拿到最新的 state。不这么写的话，可能需要用 <code>useRef</code> 来解决。</p>\n<h4 id=\"直接定义对象\"><a href=\"#直接定义对象\" class=\"headerlink\" title=\"直接定义对象\"></a>直接定义对象</h4><p>实际使用的时候，有时候也会定义一个对象：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [state, setState] = useState(&#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>比如订单数据，都放在一个对象中，这样省去定义大量的 hooks。</p>\n<h2 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h2><p>处理副作用的方法。在更新改变后触发，相当于之前的 <code>componentDidMount</code> <code>componentDidUpdate</code>，不论是第一次渲染还是更新后，都会触发。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(fn, [...])</span><br></pre></td></tr></table></figure>\n\n<p>第一个参数是执行函数，可以有返回值（返回函数），内容就是取消副作用（clean up）。</p>\n<p>第二个参数是数组，相当于仅当数组的值改变后，才会触发函数。如果传入空数组，相当于后续永远不会在改变了，可以模拟 <code>componentDidMount</code>。</p>\n<h4 id=\"常规用法-1\"><a href=\"#常规用法-1\" class=\"headerlink\" title=\"常规用法\"></a>常规用法</h4><p>一个例子就是上文 <code>setState</code> 的用法。</p>\n<p>这里给出另一个常见的例子：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [value1, setValue1] = useState(<span class=\"string\">''</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [value2, setValue2] = useState(<span class=\"string\">''</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [allowed, setAllowed] = useState(<span class=\"literal\">false</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInput1Change = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setValue1(e.target.value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInput2Change = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setValue2(e.target.value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 传入空数组，模拟 componentDidMount</span></span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.title = <span class=\"string\">'123'</span></span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 同时检测两个值</span></span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setAllowed(value1 &amp;&amp; value2)</span><br><span class=\"line\">  &#125;, [value1, value2])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;input</span><br><span class=\"line\">        value=&#123;value1&#125;</span><br><span class=\"line\">        onChange=&#123;handleInput1Change&#125;</span><br><span class=\"line\">        style=&#123; &#123; <span class=\"attr\">border</span>: <span class=\"string\">'1px solid #333'</span> &#125; &#125;</span><br><span class=\"line\">        placeholder=<span class=\"string\">\"username\"</span></span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">      &lt;br /&gt;</span><br><span class=\"line\">      &lt;input</span><br><span class=\"line\">        value=&#123;value2&#125;</span><br><span class=\"line\">        onChange=&#123;handleInput2Change&#125;</span><br><span class=\"line\">        style=&#123; &#123; <span class=\"attr\">border</span>: <span class=\"string\">'1px solid #333'</span> &#125; &#125;</span><br><span class=\"line\">        placeholder=<span class=\"string\">\"password\"</span></span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">      &lt;br /&gt;</span><br><span class=\"line\">      &lt;p&gt;allowed:&#123;allowed ? <span class=\"string\">'yes'</span> : <span class=\"string\">'no'</span>&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>useEffect</code> 实际用起来，最常用的就是传空数组，模拟 <code>componentDidMount</code>。剩下传入参数的时候，和 vue 的 <code>watch</code> 差不多。</p>\n<h4 id=\"返回函数\"><a href=\"#返回函数\" class=\"headerlink\" title=\"返回函数\"></a>返回函数</h4><p>再给出一个需要取消副作用的例子（例子的实际意义不好，仅做代码演示）：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 仅当输入内容长度均大于5位后，才考虑自动提交数据</span></span><br><span class=\"line\"><span class=\"comment\">// 并在提交前提供3秒延迟</span></span><br><span class=\"line\"><span class=\"comment\">// 这个例子就是常见的防抖</span></span><br><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  setAllowed(value1 &amp;&amp; value2)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ref = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value1.length &gt;= <span class=\"number\">5</span> &amp;&amp; value2.length &gt;= <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'启动定时器打印log'</span>)</span><br><span class=\"line\">    ref = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'log'</span>, value1, value2)</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'清理定时器'</span>)</span><br><span class=\"line\">    clearTimeout(ref)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, [value1, value2])</span><br></pre></td></tr></table></figure>\n\n<p>返回清理函数的情况，大部分是处理定时器或者发出一个 ajax 请求后，需要中断处理的情况。</p>\n<p>目前来看我在项目里面还没用到，可能是我的项目中，没有得到数据，页面不可能跳转到下一步，也就不存在需要清理副作用的情况。</p>\n<h2 id=\"useRef\"><a href=\"#useRef\" class=\"headerlink\" title=\"useRef\"></a>useRef</h2><p><code>useRef</code> 在 hooks 中，有两种用法。第一种是常规的 ref，第二种是用于穿透闭包。</p>\n<p>通过 <code>useRef</code> 可以创建一个对象，可以理解为函数内的全局变量。为了能做到实时引用，所以他必须是一个对象。具体的引用值，都存在了 <code>current</code> 属性上，这就使得它可以穿透闭包。</p>\n<h4 id=\"常规用法-2\"><a href=\"#常规用法-2\" class=\"headerlink\" title=\"常规用法\"></a>常规用法</h4><p>先说第一种常规 ref 用法，和之前写的 <code>React.createRef</code> 一致：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [isFocus, setIsFocus] = useState(<span class=\"literal\">false</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [value, setValue] = useState(<span class=\"string\">''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> inputRef = useRef(<span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInputChange = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setValue(e.target.value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInputFocus = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setIsFocus(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInputBlur = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setIsFocus(<span class=\"literal\">false</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleBtnClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    inputRef.current.focus()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;input</span><br><span class=\"line\">        value=&#123;value&#125;</span><br><span class=\"line\">        onChange=&#123;handleInputChange&#125;</span><br><span class=\"line\">        onFocus=&#123;handleInputFocus&#125;</span><br><span class=\"line\">        onBlur=&#123;handleInputBlur&#125;</span><br><span class=\"line\">        ref=&#123;inputRef&#125;</span><br><span class=\"line\">        style=&#123; &#123; <span class=\"attr\">border</span>: <span class=\"string\">'1px solid #333'</span> &#125; &#125;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;handleBtnClick&#125; style=&#123; &#123; <span class=\"attr\">border</span>: <span class=\"string\">'1px solid #333'</span> &#125; &#125;&gt;</span><br><span class=\"line\">        click <span class=\"keyword\">for</span> focus</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;br /</span>&gt;</span><br><span class=\"line\">      &lt;p&gt;focus:&#123;isFocus ? <span class=\"string\">'yes'</span> : <span class=\"string\">'no'</span>&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他用法\"><a href=\"#其他用法\" class=\"headerlink\" title=\"其他用法\"></a>其他用法</h4><p>来说 ref 的第二种用法。</p>\n<p>首先看一个 demo：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleAddClick = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setCount(count + <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleAlertClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      alert(count)</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;span&gt;counter:&#123;count&#125;&lt;<span class=\"regexp\">/span&gt;&amp;nbsp;&amp;nbsp;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;handleAddClick&#125; style=&#123; &#123; border: '1px solid #333' &#125; &#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        +1</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>button&gt;</span><br><span class=\"line\">      &lt;br /&gt;</span><br><span class=\"line\">      &lt;br /&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;handleAlertClick&#125; style=&#123; &#123; <span class=\"attr\">border</span>: <span class=\"string\">'1px solid #333'</span> &#125; &#125;&gt;</span><br><span class=\"line\">        alert</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>操作结果为：</p>\n<ul>\n<li>点击 +1 按钮，增加计数器，增加到 3</li>\n<li>点击 alert，3秒后显示计数器的值</li>\n<li>点击 +1 按钮，增加计数器，增加到 5</li>\n<li>3秒到了，此时提示框显示了 3</li>\n</ul>\n<p>或许和你想的不一样，为什么不是显示 5？</p>\n<p>简言之，再点击 alert 按钮时候，此时计数器值是 3。<strong>hooks 会缓存此状态！</strong>所以3秒过后，就是提示 3 了。</p>\n<p>解决方法很简单，如果不是 react 项目，那么我们肯定用一个对象存储数据，这样 3 秒后提示内容，读取对象中的属性就好了。因为对象是传址（非传值）的。</p>\n<p>react 亦如此。我们使用 useRef 来实现，其中的值保存在 <code>current</code> 中。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> valueRef = useRef()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleAddClick = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newVal = count + <span class=\"number\">1</span></span><br><span class=\"line\">    setCount(newVal)</span><br><span class=\"line\">    valueRef.current = newVal</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleAlertClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      alert(valueRef.current)</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;span&gt;counter:&#123;count&#125;&lt;<span class=\"regexp\">/span&gt;&amp;nbsp;&amp;nbsp;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;handleAddClick&#125; style=&#123; &#123; border: '1px solid #333' &#125; &#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        +1</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>button&gt;</span><br><span class=\"line\">      &lt;br /&gt;</span><br><span class=\"line\">      &lt;br /&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;handleAlertClick&#125; style=&#123; &#123; <span class=\"attr\">border</span>: <span class=\"string\">'1px solid #333'</span> &#125; &#125;&gt;</span><br><span class=\"line\">        alert</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"useContext\"><a href=\"#useContext\" class=\"headerlink\" title=\"useContext\"></a>useContext</h2><p><code>useContext</code> 主要解决的是组件数据透传。比如父组件要定义一些数据，但是最终要在很深层次的子组件中使用，这时候用 <code>useContext</code> 非常方便。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> DataContext = React.createContext()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;DataContext.Consumer&gt;</span><br><span class=\"line\">      &#123;value =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">          &lt;div&gt;</span><br><span class=\"line\">            &lt;p&gt;name: &#123;value.name&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;p&gt;age: &#123;value.age&#125;&lt;/</span>p&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        )</span></span><br><span class=\"line\"><span class=\"regexp\">      &#125;&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>DataContext.Consumer&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [data, setData] = useState(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'tim'</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;DataContext.Provider value=&#123;data&#125;&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;Child /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>DataContext.Provider&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>唯一要说明的就是，<code>Provider</code> 的传值属性必须是 <code>value</code>。所以要么传一个值，要么传一个对象。</p>\n<h2 id=\"useReducer\"><a href=\"#useReducer\" class=\"headerlink\" title=\"useReducer\"></a>useReducer</h2><p><code>useReducer</code> 使用起来非常简单，不管是否接触过 Redux，都能容易上手。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> initialState = &#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reducer</span>(<span class=\"params\">state, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'increment'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.count + <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'incrementAny'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.count + action.count &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'decrement'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.count - <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.count &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Counter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [state, dispatch] = useReducer(reducer, initialState)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      Count: &#123;state.count&#125;</span><br><span class=\"line\">      &lt;br /&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'increment'</span> &#125;)&#125;&gt;+<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'decrement'</span> &#125;)&#125;&gt;-<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'incrementAny'</span>, <span class=\"attr\">count</span>: <span class=\"number\">5</span> &#125;)&#125;&gt;</span><br><span class=\"line\">        +<span class=\"number\">5</span></span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际使用中，当多个组件公用一个状态时候，会用得到。</p>\n<h2 id=\"useCallback-useMemo\"><a href=\"#useCallback-useMemo\" class=\"headerlink\" title=\"useCallback / useMemo\"></a>useCallback / useMemo</h2><p>使用 useCallback / useMemo 来缓存函数，提升执行效率。</p>\n<h4 id=\"常规用法-3\"><a href=\"#常规用法-3\" class=\"headerlink\" title=\"常规用法\"></a>常规用法</h4><p>下文例子中，输入数字，进行加法计算。输入空格，触发内容改变，但是数值没有变化。</p>\n<p>不做处理的情况下，每次输入，均会触发加法计算。</p>\n<p>使用了，<code>useMemo</code> 后，相同的值，只会计算一次。后续不会触发加法计算。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Counter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [val1, setVal1] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [val2, setVal2] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'add'</span>, a, b)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> memoized = useCallback(add(val1, val2), [val1, val2])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInput1Change = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> val = <span class=\"built_in\">Number</span>(e.target.value)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'input1:'</span>, val)</span><br><span class=\"line\">    setVal1(val)</span><br><span class=\"line\">    memoized()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInput2Change = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> val = <span class=\"built_in\">Number</span>(e.target.value)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'input2:'</span>, val)</span><br><span class=\"line\">    setVal2(val)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;input onChange=&#123;handleInput1Change&#125; value=&#123;val1&#125; /&gt;</span><br><span class=\"line\">      &lt;input onChange=&#123;handleInput2Change&#125; value=&#123;val2&#125; /&gt;</span><br><span class=\"line\">      &lt;p&gt;sum:&#123;memoized&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果要用 <code>useCallback</code>，上文需要调整一点就可以了。官方给出了两者关系，如下：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useCallback(fn, deps) </span><br><span class=\"line\">useMemo(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> fn, deps)</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，<code>useMemo</code> 的第一个参数是个函数，<strong>并且需要进行返回</strong>！</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// const memoized = useCallback(add(val1, val2), [val1, val2])</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> memoized = useMemo(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> add(val1, val2)</span><br><span class=\"line\">&#125;, [val1, val2])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>根据我这一段时间的使用，基本上没遇到太多坑，也就是参考上文的这些处理方法基本都可解决。</p>\n<p>唯独要注意的是，hooks 里面不要使用 <code>setInterval</code>，一言难尽，建议看 react 原作者文章（<a href=\"https://overreacted.io/zh-hans/making-seti@yukapril.comnterval-declarative-with-react-hooks\" target=\"_blank\" rel=\"noopener\">见此</a>），解释的很清晰，也有直接用的 <code>useInterval</code> 方案。</p>"},{"layout":"post","title":"新 Hexo 博客","date":"2019-07-23T21:50:00.000Z","_content":"\n现有的博客还是 2016 年基于 jekyll 的博客，当时自己做的主题，非常简洁。虽然算不上精品，但是由于是自己一行一行写的主题，质量和想要的功能需求比较好。\n\n今年计划应该换换主题，换换面貌了。考虑再三，还是 Hexo 平台比较合适。\n\n<!-- more -->\n\n今年计划主题更换，考虑过再次自研，也考虑找现有的主题。不过大部分主题虽然漂亮，但都不够简洁明朗。\n\n由于我没有把博客直接托管到 github 等平台，结果就是每次需要本地编译好 html 再上传。考虑到只有一台 Mac 笔记本装了 Ruby，平时想写博客的话，一般都是用笔记类应用先写好，再到 Mac 上进行整理发表。\n\n就这样，今年计划切换到 Hexo 上，一是前端的东西，我想对熟悉一些，而且也可以从 jekyll 基本无痛的切换过去。二是 Hexo 的主题比较多，挑选起来也容易一些。\n\n不过挑来挑去，都不太满意，要么太简陋，要么动画特效太多，不够简洁。\n\n最终选择了默认主题，自己稍微修改了一点点。\n\n![img](https://cdn0.yukapril.com/blog/2019-07-23-hexo-blog-1.png-wm.black)\n\n![img](https://cdn0.yukapril.com/blog/2019-07-23-hexo-blog-2.png-wm.black)\n\n主要修改点：\n\n* 头部图片去掉了，用图片多费流量，打开速度还慢\n* 右侧边栏区块颜色样式调整和文章区块一致，原来的阴影太丑了\n* 文章正文 md 语法，把引用效果调整了下，之前的居中效果太不明显，强行左边加了个边，不过效果有点违和\n* 文章分享，增加了微博，去掉了 Google Plus\n* 底部加入了主题信息，以及链接和备案\n\n就这些。\n\n--END--","source":"_posts/2019/2019-07-23-hexo-blog.md","raw":"---\nlayout: post\ntitle: 新 Hexo 博客\ndate: 2019-07-23 21:50:00 GMT+0800\ncategories: [随笔]\ntags:  [hexo]\n---\n\n现有的博客还是 2016 年基于 jekyll 的博客，当时自己做的主题，非常简洁。虽然算不上精品，但是由于是自己一行一行写的主题，质量和想要的功能需求比较好。\n\n今年计划应该换换主题，换换面貌了。考虑再三，还是 Hexo 平台比较合适。\n\n<!-- more -->\n\n今年计划主题更换，考虑过再次自研，也考虑找现有的主题。不过大部分主题虽然漂亮，但都不够简洁明朗。\n\n由于我没有把博客直接托管到 github 等平台，结果就是每次需要本地编译好 html 再上传。考虑到只有一台 Mac 笔记本装了 Ruby，平时想写博客的话，一般都是用笔记类应用先写好，再到 Mac 上进行整理发表。\n\n就这样，今年计划切换到 Hexo 上，一是前端的东西，我想对熟悉一些，而且也可以从 jekyll 基本无痛的切换过去。二是 Hexo 的主题比较多，挑选起来也容易一些。\n\n不过挑来挑去，都不太满意，要么太简陋，要么动画特效太多，不够简洁。\n\n最终选择了默认主题，自己稍微修改了一点点。\n\n![img](https://cdn0.yukapril.com/blog/2019-07-23-hexo-blog-1.png-wm.black)\n\n![img](https://cdn0.yukapril.com/blog/2019-07-23-hexo-blog-2.png-wm.black)\n\n主要修改点：\n\n* 头部图片去掉了，用图片多费流量，打开速度还慢\n* 右侧边栏区块颜色样式调整和文章区块一致，原来的阴影太丑了\n* 文章正文 md 语法，把引用效果调整了下，之前的居中效果太不明显，强行左边加了个边，不过效果有点违和\n* 文章分享，增加了微博，去掉了 Google Plus\n* 底部加入了主题信息，以及链接和备案\n\n就这些。\n\n--END--","slug":"2019-2019-07-23-hexo-blog","published":1,"updated":"2020-03-02T07:16:34.761Z","comments":1,"photos":[],"link":"","_id":"cka5ik8d3006lnybg1u9itczr","content":"<p>现有的博客还是 2016 年基于 jekyll 的博客，当时自己做的主题，非常简洁。虽然算不上精品，但是由于是自己一行一行写的主题，质量和想要的功能需求比较好。</p>\n<p>今年计划应该换换主题，换换面貌了。考虑再三，还是 Hexo 平台比较合适。</p>\n<a id=\"more\"></a>\n\n<p>今年计划主题更换，考虑过再次自研，也考虑找现有的主题。不过大部分主题虽然漂亮，但都不够简洁明朗。</p>\n<p>由于我没有把博客直接托管到 github 等平台，结果就是每次需要本地编译好 html 再上传。考虑到只有一台 Mac 笔记本装了 Ruby，平时想写博客的话，一般都是用笔记类应用先写好，再到 Mac 上进行整理发表。</p>\n<p>就这样，今年计划切换到 Hexo 上，一是前端的东西，我想对熟悉一些，而且也可以从 jekyll 基本无痛的切换过去。二是 Hexo 的主题比较多，挑选起来也容易一些。</p>\n<p>不过挑来挑去，都不太满意，要么太简陋，要么动画特效太多，不够简洁。</p>\n<p>最终选择了默认主题，自己稍微修改了一点点。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-07-23-hexo-blog-1.png-wm.black\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-07-23-hexo-blog-2.png-wm.black\" alt=\"img\"></p>\n<p>主要修改点：</p>\n<ul>\n<li>头部图片去掉了，用图片多费流量，打开速度还慢</li>\n<li>右侧边栏区块颜色样式调整和文章区块一致，原来的阴影太丑了</li>\n<li>文章正文 md 语法，把引用效果调整了下，之前的居中效果太不明显，强行左边加了个边，不过效果有点违和</li>\n<li>文章分享，增加了微博，去掉了 Google Plus</li>\n<li>底部加入了主题信息，以及链接和备案</li>\n</ul>\n<p>就这些。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>现有的博客还是 2016 年基于 jekyll 的博客，当时自己做的主题，非常简洁。虽然算不上精品，但是由于是自己一行一行写的主题，质量和想要的功能需求比较好。</p>\n<p>今年计划应该换换主题，换换面貌了。考虑再三，还是 Hexo 平台比较合适。</p>","more":"<p>今年计划主题更换，考虑过再次自研，也考虑找现有的主题。不过大部分主题虽然漂亮，但都不够简洁明朗。</p>\n<p>由于我没有把博客直接托管到 github 等平台，结果就是每次需要本地编译好 html 再上传。考虑到只有一台 Mac 笔记本装了 Ruby，平时想写博客的话，一般都是用笔记类应用先写好，再到 Mac 上进行整理发表。</p>\n<p>就这样，今年计划切换到 Hexo 上，一是前端的东西，我想对熟悉一些，而且也可以从 jekyll 基本无痛的切换过去。二是 Hexo 的主题比较多，挑选起来也容易一些。</p>\n<p>不过挑来挑去，都不太满意，要么太简陋，要么动画特效太多，不够简洁。</p>\n<p>最终选择了默认主题，自己稍微修改了一点点。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-07-23-hexo-blog-1.png-wm.black\" alt=\"img\"></p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-07-23-hexo-blog-2.png-wm.black\" alt=\"img\"></p>\n<p>主要修改点：</p>\n<ul>\n<li>头部图片去掉了，用图片多费流量，打开速度还慢</li>\n<li>右侧边栏区块颜色样式调整和文章区块一致，原来的阴影太丑了</li>\n<li>文章正文 md 语法，把引用效果调整了下，之前的居中效果太不明显，强行左边加了个边，不过效果有点违和</li>\n<li>文章分享，增加了微博，去掉了 Google Plus</li>\n<li>底部加入了主题信息，以及链接和备案</li>\n</ul>\n<p>就这些。</p>\n<p>–END–</p>"},{"layout":"post","title":"静态博客的部署","date":"2019-08-16T01:07:00.000Z","_content":"\n最近把 hexo 博客迁移到了腾讯云，中途折腾了很久，算是有了一些经验。正好把静态博客的部署问题总结一下。\n\n本文涉及到的绑定自定义域名，都是指在国内备案过的域名。国内服务，没有备案不让用的。\n\n<!-- more -->\n\n## 博客的分类\n\n静态博客主要是通过工具直接生成博客 html，常见的有 jekyll，hexo 两种。\n\n其他动态博客，比如 WordPress，typecho 等，都是要数据库的动态博客，不在本次考虑范围之内。因为这种博客必须要有 PHP 或类似的环境以及数据库，成本比静态博客高很多。\n\n这次的内容主要针对静态博客。\n\n## 静态博客的部署方案\n\n对于静态博客，可玩的点并不多。主要有：\n\n* 静态文件放在那里？对象存储？静态虚拟主机？全全托管？\n* 能否直接配置自定义域名？\n* 是否可以配置 HTTPS？\n* 是否走CDN加速了？\n\n### 静态文件放在那里\n\n**全全托管**\n\n现在这种提供服务器，你只需要上传文章，还有配置主题文件的服务商不多了，但是还要提一下。这种普遍价格最高，而且定制难度较大。好处就是只要不跑路，博客算是比较踏实。\n\n**虚拟主机**\n\n博客生成的静态文件，很久以前是需要放到虚拟主机上的。通过 FTP 之类可以直接上传。基本上都可以绑定自定义域名，但是 HTTPS 就未必了。\n\n这种方案，成本稍高。大概一年不到100块，能找到一个静态资源虚拟主机或者低廉的 PHP 虚拟主机。不过近些年来感觉很难找了，因为很少有提供低配虚拟主机的。\n\n我用过阿里云的共享 PHP 虚拟主机，一年 68 块左右，博客没什么访问量，每年仍会因为访问量过大被强制关闭 2 次左右。所以不太推荐这种方案了。\n\n**云对象存储**\n\n对象存储是近些年才推出的概念，简单说就是可以放置文件。大部分云平台允许开启网站模式，进而直接变成了静态资源服务器。\n\n不过各大平台良莠不齐，我需要特殊说说用过的一些。要说明一下，所有平台的对象存储都很快，即便不走 CDN，作为博客来用很足够了。不过个别平台不支持绑定域名，这意味着你必须同时使用他们家的CDN（比如七牛云），或者不支持上传 HTTPS，你必须用他们家的CDN来实现 HTTPS（比如腾讯云）。\n\n### 自定义域名和 HTTPS 配置\n\n首先我用的是阿里云，本来直接用对象存储非常好，支持自定义域名，还能上传 HTTPS 证书，一个对象存储直接搞定了博客。但是我发现他们平台有 “bug”，只能根节点文件自动匹配到 index.html 文件，子目录是不支持的，会报错。\n\n在我用 jekyll 自制主题时候，所有链接都是 index.html 结尾，也就规避了问题。但是换成了 hexo 并选择了一个主题后，发现主题不能定制！这就意味我不能用阿里云对象存储了。\n\n现在，我换成了腾讯云。解决了子目录不能默认访问 index.html 的问题。腾讯云也是巧解方案，他们把标准对象存储和网站模式通过域名彻底分开了，所以没有阿里云这个问题。\n\n不过腾讯云遇到了新的问题。他们的对象存储不支持上传 HTTPS 证书，必须配合 CDN 来实现。\n\n> 一般来讲，哪家的对象存储，就要用他们自己家的 CDN。虽然不是强制，但是不是一家的服务，可能会出现各种“不兼容”情况。\n\n开启腾讯云 CDN 后，最主要的影响就是博客一旦修改，就必须去主动刷新 CDN，否则博客默认 CDN 会缓存很久。当然新的文章是不用刷新的。虽然可以把 CDN 缓存设置很短，但是不停地回源对象存储，成本就上升了。所以我还是推荐手工刷新 CDN。\n\n最后，我把博客图片都放到了七牛云，其实最早是因为它有对个人的服务，别的厂商一开始不开发个人业务，所以就这样一直用下来了。**据说，七牛云都是租用阿里等大平台的企业级云服务，所以在各个地区速度几乎都是最快的**（个人用的阿里云，是个人版的，所以是没有企业版快的）。不过费用上也是最贵的。而且七牛云不太推荐放网站，会遇到和阿里云一样的问题！\n\n虽然我没有用过百度云、华为云、金山云等，但是也基本上看过了。可能百度云还算好一点，其他云平台普遍价格高，不太适合个人用户。\n\n| 平台 | 工具 | 自定义域名 | 自定义HTTPS |子目录index.html解析|\n| --- | --- | --- | --- | --- |\n| 阿里云 | 通过命令行工具支持FTP | 支持 | 支持 | 不支持 |\n| 腾讯云 | 类似网盘工具，可申请开通FTP | 支持 | 需要通过CDN支持 | 支持 |\n| 七牛云 | 好像只有网页 | 不支持 | 需要通过CDN支持 | 疑似不支持 |\n\n还有一个问题也很重要，那就是如何把静态资源部署到对象存储中。\n\n阿里云提供官方命令行工具，开启后可以虚拟一个本地 FTP 服务器，虽然不能完整支持 FTP，但是常规的上传和下载都是可以的。我之前很喜欢用 beyond compare 连接，方便比对文件，每次增量部署。\n\n腾讯云默认情况下提供一个类似百度网盘的软件，虽然没有 FTP 用着舒服，但好在还算省事，先全量删除博客文件，再重新部署，根据我的体验，唯独一点不好就是操作响应速度不快，有时候感觉和卡死类似。形象一点来说就是，明明上传了文件，却看不到，过一会又看到了。\n\n虽然工具可能有欠缺，但单就部署来讲，还是推荐这两个平台，因为比如 hexo 就有对应的部署插件可以解决。\n\n### CDN 加速\n\n如果博客访问量不是特别大，或者图片资源没那么多，我建议 CDN 还是能不用就不用。用了可能反而麻烦。\n\n而且本身大平台的云服务，没有 CDN 的加持各地访问速度都还尚可。就算是用了 CDN，也是个人版服务，国内也就顶多给你不超过 30 个节点。提升效果没有那么显著。\n\n当然如果你访问量大，我建议还是配上 CDN。如果图片资源多，我认为应该图片等单独部署，和博客分开。比如上传图床，或者和我一样用七牛云。\n\n## 方案小结\n\n考虑到上手难度和费用，基本上就是阿里云和腾讯云了。其他平台倒不是不能用，可能会遇到费用高、遇到小问题的情况。\n\n如果博客是自定义的，能保证所有连接都可以对应到文件（而不是目录），我还是比较推荐阿里云的，感觉速度要比腾讯云快一点。\n\n其他情况还是选择腾讯云吧，如果不用 HTTPS，那么也可以不开通 CDN。可以省点事。\n\n## 技巧诡计\n\n最后放一个小技巧。阿里云的。\n\n所有云平台，至少我试过很多，都不支持绑定没有备案的域名。\n\n但是阿里云，如果你选择对象存储为非大陆地区的服务，是可以绑定没有备案的域名的。根据经验，选择香港是不错的。\n\n但是阿里云的 CDN 就不要想了，国内 CDN 还是要域名备案的。\n\n所以如果没有备案，那么只能选择非大陆地区的对象存储，这可能是唯一的解法。\n\n--END--\n","source":"_posts/2019/2019-08-16-static-blog.md","raw":"---\nlayout: post\ntitle: 静态博客的部署\ndate: 2019-08-16 01:07:00 GMT+0800\ncategories: [技术]\ntags:  [blog]\n---\n\n最近把 hexo 博客迁移到了腾讯云，中途折腾了很久，算是有了一些经验。正好把静态博客的部署问题总结一下。\n\n本文涉及到的绑定自定义域名，都是指在国内备案过的域名。国内服务，没有备案不让用的。\n\n<!-- more -->\n\n## 博客的分类\n\n静态博客主要是通过工具直接生成博客 html，常见的有 jekyll，hexo 两种。\n\n其他动态博客，比如 WordPress，typecho 等，都是要数据库的动态博客，不在本次考虑范围之内。因为这种博客必须要有 PHP 或类似的环境以及数据库，成本比静态博客高很多。\n\n这次的内容主要针对静态博客。\n\n## 静态博客的部署方案\n\n对于静态博客，可玩的点并不多。主要有：\n\n* 静态文件放在那里？对象存储？静态虚拟主机？全全托管？\n* 能否直接配置自定义域名？\n* 是否可以配置 HTTPS？\n* 是否走CDN加速了？\n\n### 静态文件放在那里\n\n**全全托管**\n\n现在这种提供服务器，你只需要上传文章，还有配置主题文件的服务商不多了，但是还要提一下。这种普遍价格最高，而且定制难度较大。好处就是只要不跑路，博客算是比较踏实。\n\n**虚拟主机**\n\n博客生成的静态文件，很久以前是需要放到虚拟主机上的。通过 FTP 之类可以直接上传。基本上都可以绑定自定义域名，但是 HTTPS 就未必了。\n\n这种方案，成本稍高。大概一年不到100块，能找到一个静态资源虚拟主机或者低廉的 PHP 虚拟主机。不过近些年来感觉很难找了，因为很少有提供低配虚拟主机的。\n\n我用过阿里云的共享 PHP 虚拟主机，一年 68 块左右，博客没什么访问量，每年仍会因为访问量过大被强制关闭 2 次左右。所以不太推荐这种方案了。\n\n**云对象存储**\n\n对象存储是近些年才推出的概念，简单说就是可以放置文件。大部分云平台允许开启网站模式，进而直接变成了静态资源服务器。\n\n不过各大平台良莠不齐，我需要特殊说说用过的一些。要说明一下，所有平台的对象存储都很快，即便不走 CDN，作为博客来用很足够了。不过个别平台不支持绑定域名，这意味着你必须同时使用他们家的CDN（比如七牛云），或者不支持上传 HTTPS，你必须用他们家的CDN来实现 HTTPS（比如腾讯云）。\n\n### 自定义域名和 HTTPS 配置\n\n首先我用的是阿里云，本来直接用对象存储非常好，支持自定义域名，还能上传 HTTPS 证书，一个对象存储直接搞定了博客。但是我发现他们平台有 “bug”，只能根节点文件自动匹配到 index.html 文件，子目录是不支持的，会报错。\n\n在我用 jekyll 自制主题时候，所有链接都是 index.html 结尾，也就规避了问题。但是换成了 hexo 并选择了一个主题后，发现主题不能定制！这就意味我不能用阿里云对象存储了。\n\n现在，我换成了腾讯云。解决了子目录不能默认访问 index.html 的问题。腾讯云也是巧解方案，他们把标准对象存储和网站模式通过域名彻底分开了，所以没有阿里云这个问题。\n\n不过腾讯云遇到了新的问题。他们的对象存储不支持上传 HTTPS 证书，必须配合 CDN 来实现。\n\n> 一般来讲，哪家的对象存储，就要用他们自己家的 CDN。虽然不是强制，但是不是一家的服务，可能会出现各种“不兼容”情况。\n\n开启腾讯云 CDN 后，最主要的影响就是博客一旦修改，就必须去主动刷新 CDN，否则博客默认 CDN 会缓存很久。当然新的文章是不用刷新的。虽然可以把 CDN 缓存设置很短，但是不停地回源对象存储，成本就上升了。所以我还是推荐手工刷新 CDN。\n\n最后，我把博客图片都放到了七牛云，其实最早是因为它有对个人的服务，别的厂商一开始不开发个人业务，所以就这样一直用下来了。**据说，七牛云都是租用阿里等大平台的企业级云服务，所以在各个地区速度几乎都是最快的**（个人用的阿里云，是个人版的，所以是没有企业版快的）。不过费用上也是最贵的。而且七牛云不太推荐放网站，会遇到和阿里云一样的问题！\n\n虽然我没有用过百度云、华为云、金山云等，但是也基本上看过了。可能百度云还算好一点，其他云平台普遍价格高，不太适合个人用户。\n\n| 平台 | 工具 | 自定义域名 | 自定义HTTPS |子目录index.html解析|\n| --- | --- | --- | --- | --- |\n| 阿里云 | 通过命令行工具支持FTP | 支持 | 支持 | 不支持 |\n| 腾讯云 | 类似网盘工具，可申请开通FTP | 支持 | 需要通过CDN支持 | 支持 |\n| 七牛云 | 好像只有网页 | 不支持 | 需要通过CDN支持 | 疑似不支持 |\n\n还有一个问题也很重要，那就是如何把静态资源部署到对象存储中。\n\n阿里云提供官方命令行工具，开启后可以虚拟一个本地 FTP 服务器，虽然不能完整支持 FTP，但是常规的上传和下载都是可以的。我之前很喜欢用 beyond compare 连接，方便比对文件，每次增量部署。\n\n腾讯云默认情况下提供一个类似百度网盘的软件，虽然没有 FTP 用着舒服，但好在还算省事，先全量删除博客文件，再重新部署，根据我的体验，唯独一点不好就是操作响应速度不快，有时候感觉和卡死类似。形象一点来说就是，明明上传了文件，却看不到，过一会又看到了。\n\n虽然工具可能有欠缺，但单就部署来讲，还是推荐这两个平台，因为比如 hexo 就有对应的部署插件可以解决。\n\n### CDN 加速\n\n如果博客访问量不是特别大，或者图片资源没那么多，我建议 CDN 还是能不用就不用。用了可能反而麻烦。\n\n而且本身大平台的云服务，没有 CDN 的加持各地访问速度都还尚可。就算是用了 CDN，也是个人版服务，国内也就顶多给你不超过 30 个节点。提升效果没有那么显著。\n\n当然如果你访问量大，我建议还是配上 CDN。如果图片资源多，我认为应该图片等单独部署，和博客分开。比如上传图床，或者和我一样用七牛云。\n\n## 方案小结\n\n考虑到上手难度和费用，基本上就是阿里云和腾讯云了。其他平台倒不是不能用，可能会遇到费用高、遇到小问题的情况。\n\n如果博客是自定义的，能保证所有连接都可以对应到文件（而不是目录），我还是比较推荐阿里云的，感觉速度要比腾讯云快一点。\n\n其他情况还是选择腾讯云吧，如果不用 HTTPS，那么也可以不开通 CDN。可以省点事。\n\n## 技巧诡计\n\n最后放一个小技巧。阿里云的。\n\n所有云平台，至少我试过很多，都不支持绑定没有备案的域名。\n\n但是阿里云，如果你选择对象存储为非大陆地区的服务，是可以绑定没有备案的域名的。根据经验，选择香港是不错的。\n\n但是阿里云的 CDN 就不要想了，国内 CDN 还是要域名备案的。\n\n所以如果没有备案，那么只能选择非大陆地区的对象存储，这可能是唯一的解法。\n\n--END--\n","slug":"2019-2019-08-16-static-blog","published":1,"updated":"2020-03-06T01:20:14.197Z","comments":1,"photos":[],"link":"","_id":"cka5ik8d4006onybgs52ovu5z","content":"<p>最近把 hexo 博客迁移到了腾讯云，中途折腾了很久，算是有了一些经验。正好把静态博客的部署问题总结一下。</p>\n<p>本文涉及到的绑定自定义域名，都是指在国内备案过的域名。国内服务，没有备案不让用的。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"博客的分类\"><a href=\"#博客的分类\" class=\"headerlink\" title=\"博客的分类\"></a>博客的分类</h2><p>静态博客主要是通过工具直接生成博客 html，常见的有 jekyll，hexo 两种。</p>\n<p>其他动态博客，比如 WordPress，typecho 等，都是要数据库的动态博客，不在本次考虑范围之内。因为这种博客必须要有 PHP 或类似的环境以及数据库，成本比静态博客高很多。</p>\n<p>这次的内容主要针对静态博客。</p>\n<h2 id=\"静态博客的部署方案\"><a href=\"#静态博客的部署方案\" class=\"headerlink\" title=\"静态博客的部署方案\"></a>静态博客的部署方案</h2><p>对于静态博客，可玩的点并不多。主要有：</p>\n<ul>\n<li>静态文件放在那里？对象存储？静态虚拟主机？全全托管？</li>\n<li>能否直接配置自定义域名？</li>\n<li>是否可以配置 HTTPS？</li>\n<li>是否走CDN加速了？</li>\n</ul>\n<h3 id=\"静态文件放在那里\"><a href=\"#静态文件放在那里\" class=\"headerlink\" title=\"静态文件放在那里\"></a>静态文件放在那里</h3><p><strong>全全托管</strong></p>\n<p>现在这种提供服务器，你只需要上传文章，还有配置主题文件的服务商不多了，但是还要提一下。这种普遍价格最高，而且定制难度较大。好处就是只要不跑路，博客算是比较踏实。</p>\n<p><strong>虚拟主机</strong></p>\n<p>博客生成的静态文件，很久以前是需要放到虚拟主机上的。通过 FTP 之类可以直接上传。基本上都可以绑定自定义域名，但是 HTTPS 就未必了。</p>\n<p>这种方案，成本稍高。大概一年不到100块，能找到一个静态资源虚拟主机或者低廉的 PHP 虚拟主机。不过近些年来感觉很难找了，因为很少有提供低配虚拟主机的。</p>\n<p>我用过阿里云的共享 PHP 虚拟主机，一年 68 块左右，博客没什么访问量，每年仍会因为访问量过大被强制关闭 2 次左右。所以不太推荐这种方案了。</p>\n<p><strong>云对象存储</strong></p>\n<p>对象存储是近些年才推出的概念，简单说就是可以放置文件。大部分云平台允许开启网站模式，进而直接变成了静态资源服务器。</p>\n<p>不过各大平台良莠不齐，我需要特殊说说用过的一些。要说明一下，所有平台的对象存储都很快，即便不走 CDN，作为博客来用很足够了。不过个别平台不支持绑定域名，这意味着你必须同时使用他们家的CDN（比如七牛云），或者不支持上传 HTTPS，你必须用他们家的CDN来实现 HTTPS（比如腾讯云）。</p>\n<h3 id=\"自定义域名和-HTTPS-配置\"><a href=\"#自定义域名和-HTTPS-配置\" class=\"headerlink\" title=\"自定义域名和 HTTPS 配置\"></a>自定义域名和 HTTPS 配置</h3><p>首先我用的是阿里云，本来直接用对象存储非常好，支持自定义域名，还能上传 HTTPS 证书，一个对象存储直接搞定了博客。但是我发现他们平台有 “bug”，只能根节点文件自动匹配到 index.html 文件，子目录是不支持的，会报错。</p>\n<p>在我用 jekyll 自制主题时候，所有链接都是 index.html 结尾，也就规避了问题。但是换成了 hexo 并选择了一个主题后，发现主题不能定制！这就意味我不能用阿里云对象存储了。</p>\n<p>现在，我换成了腾讯云。解决了子目录不能默认访问 index.html 的问题。腾讯云也是巧解方案，他们把标准对象存储和网站模式通过域名彻底分开了，所以没有阿里云这个问题。</p>\n<p>不过腾讯云遇到了新的问题。他们的对象存储不支持上传 HTTPS 证书，必须配合 CDN 来实现。</p>\n<blockquote>\n<p>一般来讲，哪家的对象存储，就要用他们自己家的 CDN。虽然不是强制，但是不是一家的服务，可能会出现各种“不兼容”情况。</p>\n</blockquote>\n<p>开启腾讯云 CDN 后，最主要的影响就是博客一旦修改，就必须去主动刷新 CDN，否则博客默认 CDN 会缓存很久。当然新的文章是不用刷新的。虽然可以把 CDN 缓存设置很短，但是不停地回源对象存储，成本就上升了。所以我还是推荐手工刷新 CDN。</p>\n<p>最后，我把博客图片都放到了七牛云，其实最早是因为它有对个人的服务，别的厂商一开始不开发个人业务，所以就这样一直用下来了。<strong>据说，七牛云都是租用阿里等大平台的企业级云服务，所以在各个地区速度几乎都是最快的</strong>（个人用的阿里云，是个人版的，所以是没有企业版快的）。不过费用上也是最贵的。而且七牛云不太推荐放网站，会遇到和阿里云一样的问题！</p>\n<p>虽然我没有用过百度云、华为云、金山云等，但是也基本上看过了。可能百度云还算好一点，其他云平台普遍价格高，不太适合个人用户。</p>\n<table>\n<thead>\n<tr>\n<th>平台</th>\n<th>工具</th>\n<th>自定义域名</th>\n<th>自定义HTTPS</th>\n<th>子目录index.html解析</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>阿里云</td>\n<td>通过命令行工具支持FTP</td>\n<td>支持</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>腾讯云</td>\n<td>类似网盘工具，可申请开通FTP</td>\n<td>支持</td>\n<td>需要通过CDN支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>七牛云</td>\n<td>好像只有网页</td>\n<td>不支持</td>\n<td>需要通过CDN支持</td>\n<td>疑似不支持</td>\n</tr>\n</tbody></table>\n<p>还有一个问题也很重要，那就是如何把静态资源部署到对象存储中。</p>\n<p>阿里云提供官方命令行工具，开启后可以虚拟一个本地 FTP 服务器，虽然不能完整支持 FTP，但是常规的上传和下载都是可以的。我之前很喜欢用 beyond compare 连接，方便比对文件，每次增量部署。</p>\n<p>腾讯云默认情况下提供一个类似百度网盘的软件，虽然没有 FTP 用着舒服，但好在还算省事，先全量删除博客文件，再重新部署，根据我的体验，唯独一点不好就是操作响应速度不快，有时候感觉和卡死类似。形象一点来说就是，明明上传了文件，却看不到，过一会又看到了。</p>\n<p>虽然工具可能有欠缺，但单就部署来讲，还是推荐这两个平台，因为比如 hexo 就有对应的部署插件可以解决。</p>\n<h3 id=\"CDN-加速\"><a href=\"#CDN-加速\" class=\"headerlink\" title=\"CDN 加速\"></a>CDN 加速</h3><p>如果博客访问量不是特别大，或者图片资源没那么多，我建议 CDN 还是能不用就不用。用了可能反而麻烦。</p>\n<p>而且本身大平台的云服务，没有 CDN 的加持各地访问速度都还尚可。就算是用了 CDN，也是个人版服务，国内也就顶多给你不超过 30 个节点。提升效果没有那么显著。</p>\n<p>当然如果你访问量大，我建议还是配上 CDN。如果图片资源多，我认为应该图片等单独部署，和博客分开。比如上传图床，或者和我一样用七牛云。</p>\n<h2 id=\"方案小结\"><a href=\"#方案小结\" class=\"headerlink\" title=\"方案小结\"></a>方案小结</h2><p>考虑到上手难度和费用，基本上就是阿里云和腾讯云了。其他平台倒不是不能用，可能会遇到费用高、遇到小问题的情况。</p>\n<p>如果博客是自定义的，能保证所有连接都可以对应到文件（而不是目录），我还是比较推荐阿里云的，感觉速度要比腾讯云快一点。</p>\n<p>其他情况还是选择腾讯云吧，如果不用 HTTPS，那么也可以不开通 CDN。可以省点事。</p>\n<h2 id=\"技巧诡计\"><a href=\"#技巧诡计\" class=\"headerlink\" title=\"技巧诡计\"></a>技巧诡计</h2><p>最后放一个小技巧。阿里云的。</p>\n<p>所有云平台，至少我试过很多，都不支持绑定没有备案的域名。</p>\n<p>但是阿里云，如果你选择对象存储为非大陆地区的服务，是可以绑定没有备案的域名的。根据经验，选择香港是不错的。</p>\n<p>但是阿里云的 CDN 就不要想了，国内 CDN 还是要域名备案的。</p>\n<p>所以如果没有备案，那么只能选择非大陆地区的对象存储，这可能是唯一的解法。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>最近把 hexo 博客迁移到了腾讯云，中途折腾了很久，算是有了一些经验。正好把静态博客的部署问题总结一下。</p>\n<p>本文涉及到的绑定自定义域名，都是指在国内备案过的域名。国内服务，没有备案不让用的。</p>","more":"<h2 id=\"博客的分类\"><a href=\"#博客的分类\" class=\"headerlink\" title=\"博客的分类\"></a>博客的分类</h2><p>静态博客主要是通过工具直接生成博客 html，常见的有 jekyll，hexo 两种。</p>\n<p>其他动态博客，比如 WordPress，typecho 等，都是要数据库的动态博客，不在本次考虑范围之内。因为这种博客必须要有 PHP 或类似的环境以及数据库，成本比静态博客高很多。</p>\n<p>这次的内容主要针对静态博客。</p>\n<h2 id=\"静态博客的部署方案\"><a href=\"#静态博客的部署方案\" class=\"headerlink\" title=\"静态博客的部署方案\"></a>静态博客的部署方案</h2><p>对于静态博客，可玩的点并不多。主要有：</p>\n<ul>\n<li>静态文件放在那里？对象存储？静态虚拟主机？全全托管？</li>\n<li>能否直接配置自定义域名？</li>\n<li>是否可以配置 HTTPS？</li>\n<li>是否走CDN加速了？</li>\n</ul>\n<h3 id=\"静态文件放在那里\"><a href=\"#静态文件放在那里\" class=\"headerlink\" title=\"静态文件放在那里\"></a>静态文件放在那里</h3><p><strong>全全托管</strong></p>\n<p>现在这种提供服务器，你只需要上传文章，还有配置主题文件的服务商不多了，但是还要提一下。这种普遍价格最高，而且定制难度较大。好处就是只要不跑路，博客算是比较踏实。</p>\n<p><strong>虚拟主机</strong></p>\n<p>博客生成的静态文件，很久以前是需要放到虚拟主机上的。通过 FTP 之类可以直接上传。基本上都可以绑定自定义域名，但是 HTTPS 就未必了。</p>\n<p>这种方案，成本稍高。大概一年不到100块，能找到一个静态资源虚拟主机或者低廉的 PHP 虚拟主机。不过近些年来感觉很难找了，因为很少有提供低配虚拟主机的。</p>\n<p>我用过阿里云的共享 PHP 虚拟主机，一年 68 块左右，博客没什么访问量，每年仍会因为访问量过大被强制关闭 2 次左右。所以不太推荐这种方案了。</p>\n<p><strong>云对象存储</strong></p>\n<p>对象存储是近些年才推出的概念，简单说就是可以放置文件。大部分云平台允许开启网站模式，进而直接变成了静态资源服务器。</p>\n<p>不过各大平台良莠不齐，我需要特殊说说用过的一些。要说明一下，所有平台的对象存储都很快，即便不走 CDN，作为博客来用很足够了。不过个别平台不支持绑定域名，这意味着你必须同时使用他们家的CDN（比如七牛云），或者不支持上传 HTTPS，你必须用他们家的CDN来实现 HTTPS（比如腾讯云）。</p>\n<h3 id=\"自定义域名和-HTTPS-配置\"><a href=\"#自定义域名和-HTTPS-配置\" class=\"headerlink\" title=\"自定义域名和 HTTPS 配置\"></a>自定义域名和 HTTPS 配置</h3><p>首先我用的是阿里云，本来直接用对象存储非常好，支持自定义域名，还能上传 HTTPS 证书，一个对象存储直接搞定了博客。但是我发现他们平台有 “bug”，只能根节点文件自动匹配到 index.html 文件，子目录是不支持的，会报错。</p>\n<p>在我用 jekyll 自制主题时候，所有链接都是 index.html 结尾，也就规避了问题。但是换成了 hexo 并选择了一个主题后，发现主题不能定制！这就意味我不能用阿里云对象存储了。</p>\n<p>现在，我换成了腾讯云。解决了子目录不能默认访问 index.html 的问题。腾讯云也是巧解方案，他们把标准对象存储和网站模式通过域名彻底分开了，所以没有阿里云这个问题。</p>\n<p>不过腾讯云遇到了新的问题。他们的对象存储不支持上传 HTTPS 证书，必须配合 CDN 来实现。</p>\n<blockquote>\n<p>一般来讲，哪家的对象存储，就要用他们自己家的 CDN。虽然不是强制，但是不是一家的服务，可能会出现各种“不兼容”情况。</p>\n</blockquote>\n<p>开启腾讯云 CDN 后，最主要的影响就是博客一旦修改，就必须去主动刷新 CDN，否则博客默认 CDN 会缓存很久。当然新的文章是不用刷新的。虽然可以把 CDN 缓存设置很短，但是不停地回源对象存储，成本就上升了。所以我还是推荐手工刷新 CDN。</p>\n<p>最后，我把博客图片都放到了七牛云，其实最早是因为它有对个人的服务，别的厂商一开始不开发个人业务，所以就这样一直用下来了。<strong>据说，七牛云都是租用阿里等大平台的企业级云服务，所以在各个地区速度几乎都是最快的</strong>（个人用的阿里云，是个人版的，所以是没有企业版快的）。不过费用上也是最贵的。而且七牛云不太推荐放网站，会遇到和阿里云一样的问题！</p>\n<p>虽然我没有用过百度云、华为云、金山云等，但是也基本上看过了。可能百度云还算好一点，其他云平台普遍价格高，不太适合个人用户。</p>\n<table>\n<thead>\n<tr>\n<th>平台</th>\n<th>工具</th>\n<th>自定义域名</th>\n<th>自定义HTTPS</th>\n<th>子目录index.html解析</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>阿里云</td>\n<td>通过命令行工具支持FTP</td>\n<td>支持</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>腾讯云</td>\n<td>类似网盘工具，可申请开通FTP</td>\n<td>支持</td>\n<td>需要通过CDN支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>七牛云</td>\n<td>好像只有网页</td>\n<td>不支持</td>\n<td>需要通过CDN支持</td>\n<td>疑似不支持</td>\n</tr>\n</tbody></table>\n<p>还有一个问题也很重要，那就是如何把静态资源部署到对象存储中。</p>\n<p>阿里云提供官方命令行工具，开启后可以虚拟一个本地 FTP 服务器，虽然不能完整支持 FTP，但是常规的上传和下载都是可以的。我之前很喜欢用 beyond compare 连接，方便比对文件，每次增量部署。</p>\n<p>腾讯云默认情况下提供一个类似百度网盘的软件，虽然没有 FTP 用着舒服，但好在还算省事，先全量删除博客文件，再重新部署，根据我的体验，唯独一点不好就是操作响应速度不快，有时候感觉和卡死类似。形象一点来说就是，明明上传了文件，却看不到，过一会又看到了。</p>\n<p>虽然工具可能有欠缺，但单就部署来讲，还是推荐这两个平台，因为比如 hexo 就有对应的部署插件可以解决。</p>\n<h3 id=\"CDN-加速\"><a href=\"#CDN-加速\" class=\"headerlink\" title=\"CDN 加速\"></a>CDN 加速</h3><p>如果博客访问量不是特别大，或者图片资源没那么多，我建议 CDN 还是能不用就不用。用了可能反而麻烦。</p>\n<p>而且本身大平台的云服务，没有 CDN 的加持各地访问速度都还尚可。就算是用了 CDN，也是个人版服务，国内也就顶多给你不超过 30 个节点。提升效果没有那么显著。</p>\n<p>当然如果你访问量大，我建议还是配上 CDN。如果图片资源多，我认为应该图片等单独部署，和博客分开。比如上传图床，或者和我一样用七牛云。</p>\n<h2 id=\"方案小结\"><a href=\"#方案小结\" class=\"headerlink\" title=\"方案小结\"></a>方案小结</h2><p>考虑到上手难度和费用，基本上就是阿里云和腾讯云了。其他平台倒不是不能用，可能会遇到费用高、遇到小问题的情况。</p>\n<p>如果博客是自定义的，能保证所有连接都可以对应到文件（而不是目录），我还是比较推荐阿里云的，感觉速度要比腾讯云快一点。</p>\n<p>其他情况还是选择腾讯云吧，如果不用 HTTPS，那么也可以不开通 CDN。可以省点事。</p>\n<h2 id=\"技巧诡计\"><a href=\"#技巧诡计\" class=\"headerlink\" title=\"技巧诡计\"></a>技巧诡计</h2><p>最后放一个小技巧。阿里云的。</p>\n<p>所有云平台，至少我试过很多，都不支持绑定没有备案的域名。</p>\n<p>但是阿里云，如果你选择对象存储为非大陆地区的服务，是可以绑定没有备案的域名的。根据经验，选择香港是不错的。</p>\n<p>但是阿里云的 CDN 就不要想了，国内 CDN 还是要域名备案的。</p>\n<p>所以如果没有备案，那么只能选择非大陆地区的对象存储，这可能是唯一的解法。</p>\n<p>–END–</p>"},{"layout":"post","title":"一句话知识（1）：近视眼和玩手机、看电视基本无关","date":"2019-08-23T00:31:00.000Z","_content":"\n> 近视的形成主要是因为眼球变长，原本在眼底能看清晰的画面，由于眼球变长导致画面前移，看不清了。\n\n人出生后，大概12岁以前，眼睛都在发育中，看到的内容大致为从远视到正常。13岁左右视力定型。不过由于受到基因影响，部分人的眼睛继续发育，导致了眼球边长了。也就是发展为近视。基因导致近视的情况，貌似占比很高。\n\n除了基因外，长时间用眼也会导致肌肉紧张，使得眼球被拉长。所以只要不是长时间、弱光环境等，对眼睛影响不大。\n\n文章指出，看绿色物体、眼保健操、部分声称护眼的食物等，都不能有效防止近视。反而出门晒太阳对于保护视力有帮助。\n\n此外，眼保健操对视力也不是一点帮助没有，关键的就在眼保健操第一句话中 ———— “闭眼”。就算是闭眼抠脚，也可以保护视力，因为闭眼使得眼睛短暂放松。\n\n","source":"_posts/2019/2019-08-23-knowledge-1.md","raw":"---\nlayout: post\ntitle: 一句话知识（1）：近视眼和玩手机、看电视基本无关\ndate: 2019-08-23 00:31:00 GMT+0800\ncategories: [一句话知识]\ntags:  []\n---\n\n> 近视的形成主要是因为眼球变长，原本在眼底能看清晰的画面，由于眼球变长导致画面前移，看不清了。\n\n人出生后，大概12岁以前，眼睛都在发育中，看到的内容大致为从远视到正常。13岁左右视力定型。不过由于受到基因影响，部分人的眼睛继续发育，导致了眼球边长了。也就是发展为近视。基因导致近视的情况，貌似占比很高。\n\n除了基因外，长时间用眼也会导致肌肉紧张，使得眼球被拉长。所以只要不是长时间、弱光环境等，对眼睛影响不大。\n\n文章指出，看绿色物体、眼保健操、部分声称护眼的食物等，都不能有效防止近视。反而出门晒太阳对于保护视力有帮助。\n\n此外，眼保健操对视力也不是一点帮助没有，关键的就在眼保健操第一句话中 ———— “闭眼”。就算是闭眼抠脚，也可以保护视力，因为闭眼使得眼睛短暂放松。\n\n","slug":"2019-2019-08-23-knowledge-1","published":1,"updated":"2020-03-02T07:16:34.761Z","comments":1,"photos":[],"link":"","_id":"cka5ik8d7006rnybg0a06rqpr","content":"<blockquote>\n<p>近视的形成主要是因为眼球变长，原本在眼底能看清晰的画面，由于眼球变长导致画面前移，看不清了。</p>\n</blockquote>\n<p>人出生后，大概12岁以前，眼睛都在发育中，看到的内容大致为从远视到正常。13岁左右视力定型。不过由于受到基因影响，部分人的眼睛继续发育，导致了眼球边长了。也就是发展为近视。基因导致近视的情况，貌似占比很高。</p>\n<p>除了基因外，长时间用眼也会导致肌肉紧张，使得眼球被拉长。所以只要不是长时间、弱光环境等，对眼睛影响不大。</p>\n<p>文章指出，看绿色物体、眼保健操、部分声称护眼的食物等，都不能有效防止近视。反而出门晒太阳对于保护视力有帮助。</p>\n<p>此外，眼保健操对视力也不是一点帮助没有，关键的就在眼保健操第一句话中 ———— “闭眼”。就算是闭眼抠脚，也可以保护视力，因为闭眼使得眼睛短暂放松。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>近视的形成主要是因为眼球变长，原本在眼底能看清晰的画面，由于眼球变长导致画面前移，看不清了。</p>\n</blockquote>\n<p>人出生后，大概12岁以前，眼睛都在发育中，看到的内容大致为从远视到正常。13岁左右视力定型。不过由于受到基因影响，部分人的眼睛继续发育，导致了眼球边长了。也就是发展为近视。基因导致近视的情况，貌似占比很高。</p>\n<p>除了基因外，长时间用眼也会导致肌肉紧张，使得眼球被拉长。所以只要不是长时间、弱光环境等，对眼睛影响不大。</p>\n<p>文章指出，看绿色物体、眼保健操、部分声称护眼的食物等，都不能有效防止近视。反而出门晒太阳对于保护视力有帮助。</p>\n<p>此外，眼保健操对视力也不是一点帮助没有，关键的就在眼保健操第一句话中 ———— “闭眼”。就算是闭眼抠脚，也可以保护视力，因为闭眼使得眼睛短暂放松。</p>\n"},{"layout":"post","title":"一句话知识（2）：食物相克不存在的","date":"2019-08-29T23:56:00.000Z","_content":"\n> 国外从来没有实物相克，食物相克只有中国有。所谓的“相克”，都是一个人吃多了不舒服，传谣出来。\n\n所谓“相克”，无非就是吃过一锅排骨，之后吃雪糕，最后拉肚子，说是排骨和雪糕相克。\n\n大部分所谓相克，无非就是吃得多，本身身体就撑不住。第相克没什么关系。比如你吃沙子，吃了几粒肯定没事。那不代表你可以配着黄瓜一起吃。\n\n","source":"_posts/2019/2019-08-29-knowledge-2.md","raw":"---\nlayout: post\ntitle: 一句话知识（2）：食物相克不存在的\ndate: 2019-08-29 23:56:00 GMT+0800\ncategories: [一句话知识]\ntags:  []\n---\n\n> 国外从来没有实物相克，食物相克只有中国有。所谓的“相克”，都是一个人吃多了不舒服，传谣出来。\n\n所谓“相克”，无非就是吃过一锅排骨，之后吃雪糕，最后拉肚子，说是排骨和雪糕相克。\n\n大部分所谓相克，无非就是吃得多，本身身体就撑不住。第相克没什么关系。比如你吃沙子，吃了几粒肯定没事。那不代表你可以配着黄瓜一起吃。\n\n","slug":"2019-2019-08-29-knowledge-2","published":1,"updated":"2020-03-02T07:16:34.762Z","comments":1,"photos":[],"link":"","_id":"cka5ik8d9006unybgs2tbyklq","content":"<blockquote>\n<p>国外从来没有实物相克，食物相克只有中国有。所谓的“相克”，都是一个人吃多了不舒服，传谣出来。</p>\n</blockquote>\n<p>所谓“相克”，无非就是吃过一锅排骨，之后吃雪糕，最后拉肚子，说是排骨和雪糕相克。</p>\n<p>大部分所谓相克，无非就是吃得多，本身身体就撑不住。第相克没什么关系。比如你吃沙子，吃了几粒肯定没事。那不代表你可以配着黄瓜一起吃。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>国外从来没有实物相克，食物相克只有中国有。所谓的“相克”，都是一个人吃多了不舒服，传谣出来。</p>\n</blockquote>\n<p>所谓“相克”，无非就是吃过一锅排骨，之后吃雪糕，最后拉肚子，说是排骨和雪糕相克。</p>\n<p>大部分所谓相克，无非就是吃得多，本身身体就撑不住。第相克没什么关系。比如你吃沙子，吃了几粒肯定没事。那不代表你可以配着黄瓜一起吃。</p>\n"},{"layout":"post","title":"迟到的小米手环3体验","date":"2019-09-21T23:54:00.000Z","_content":"\n苹果开放第五代手表后，我由于自己过于犹豫，算是第二时间下单了，最普通的 44mm 版本。突然想起来 3 月买的买的小米手环 3，用了已有半年，却还没有做过一次总结。\n\n<!-- more -->\n\n我的小米手环 3，是今年 3 月购买，大概 159 元左右。由于我对 NFC 不感冒，而且搭配的是苹果手机，很多 NFC 功能也用不了。最关键的是，购买的时候，NFC 版本也没有发售。\n\n本身我有一块石英表，但我发现它：\n* 太重，还是金属表链，特别容易划伤笔记本\n* 没办法接收手机通知\n* 夜里看不到时间\n\n就想着买一块智能手表。\n\n小米手环比较轻便且便宜，续航也比较久，我就这样选择了。本文从我这半年时间上的经历，来体验评价小米手环 3。由于文章比较匆忙，配图极少。\n\n## 屏幕\n\n![img](https://cdn0.yukapril.com/blog/2019-09-21-miband3-1.JPG-wm.white)\n\n刚到手的时候，觉得这块屏幕还是不错的。调整好表盘可以显示时间、日期以及步数，比较实用。虽然可以看到像素颗粒感，但对于一块普通手表，稍微不是太近，也不明显。\n\n![img](https://cdn0.yukapril.com/blog/2019-09-21-miband3-2.JPG-wm.white)\n\n虽然只有单色（白色），由于像素想对较大，整体字体布局也比较大和规矩，识别起来还挺容易的。\n\n![img](https://cdn0.yukapril.com/blog/2019-09-21-miband3-3.JPG-wm.white)\n\n对于一块 150 块左右的低端手环，在强光下几乎不太可见，所以需要抬高手腕挡住阳关看时间。\n\n上图，是一个天气明朗的早晨，光线不强烈，虽然勉强可见，不过这样的识别度不能让人满意。\n\n## 操作\n\n首先要说抬腕亮屏，识别度不够好，有时候需要刻意用些力气，平缓一些它是感受不到的。即便是能亮屏，速度感觉也不快，可以说不灵敏。\n\n我已经养成了抬腕如果屏幕不亮，直接把手环底部按钮贴到脸颊上，相当于按了一下按键。\n\n不仅如此，滑动操作一样识别不够灵敏，这个问题貌似小米的所有手表手环都类似。表现为你想上下滑动看第二屏的内容，结果明明是向下滑动，结果竟然是向上滑动。\n\n上下滑动由于屏幕高度尚可，体验勉强能算过关。但左右滑动，绝对会让你放弃。\n\n我本以为凹陷的独立按键能体验好一些，不过看样子这个独立按键和滑动用的都是同样的屏幕控制单元吧，有时候一样不灵敏。\n\n总之就是这货的操作，能让你放弃使用它。\n\n## 功能\n\n小米手环 3 提供功能:\n\n* 看时间\n* 运动信息\n* 天气\n* 心率\n* 计时器，秒表等\n* 启动运动模式\n* 通知\n\n其中通知类：\n\n* APP通知提醒（下文详细介绍）\n* 来电提醒\n* 事件提示\n* 久坐提醒\n* 手环闹钟\n\n其他功能配置：\n* 睡眠监测\n* 勿扰模式（没用过）\n* 抬腕亮屏\n* 夜间模式\n\n#### 看时间\n\n作为一款表的首屏，我认为时间必须看的清晰，而且应该能有一些补充信息。小米手环 3 只能提供步数的首屏展示。不过首屏体验还不错，清晰有致。\n\n#### 运动信息\n\n这里面主要是水平滑动，告诉你步数、消耗热量、运动距离等。此外手表电量也在这里？！好诡异。要不是电量在这个栏目，我估计这个栏目我就移除了，本身运动就很少，再加上这水平滑动体验，还不如手机端查看。\n\n#### 天气\n\n偶尔看下，大部分还是手机上看天气。它可以查看3天的天气，不过需要你手机主动启动 APP，把天气信息传输给手表才行。否则它提示你开启手机 APP 呦。\n\n#### 心率\n\n手表可以自己进入栏目启动心理测试，也可以 APP 内配置好，定时测试。\n\n我运动很少，所以大部分时候不需要心率检测。而且感觉这么便宜的手环，精度应该不是太准，所以绝大部分时间都关闭了，来延长续航时间。\n\n其实也没有那么不准，大概还是可以参考的。开启后续航也能有4天，所以我就把它当做玩具功能吧。\n\n目前开启，除了早晚骑车，偶尔运动，中午吃饭走动心率较高，其他时间相对平稳，我也不知道能有什么作用。\n\n#### 计时器，秒表等\n\n买回来之后用过一次，之后不用了。感觉倒计时可能有用，不过你要接受它的复杂操作。想想还是用手机倒计时或者直接用脑子吧。\n\n#### 通知\n\n**来电提醒**\n\n说白了就是手机来电，手表震动，长按按键拒接。没别的了。有时候手机不在身边，比如找旁边同事沟通，可以不遗漏电话，而且根据来电显示可以判断是否需要立刻返回手机旁边，拿起手机接听。\n\n**事件提示**\n\n需要在 APP 内自己添加，然后到时间了手环会收到提醒，感觉很鸡肋。\n\n**手环闹钟**\n\n我在 APP 设置了清晨闹钟，并关闭了手机自带闹铃，这样就不会打扰他人了。很实用。\n\n**久坐提醒**\n\n大概一小时没有运动亮就会震动提示你以下，对我来说还算好用，因为我不午睡！\n\n不过有时候午睡（下夜班第二天中午还在休息），他判断不出来，结果你睡着了，他震动提示你要运动下...\n\n#### 其他功能配置\n\n**睡眠监测**\n\n睡觉时待着它就行。因为续航长，我几乎除了充电，就没有摘下来过。不论洗澡还是睡觉。第二天可以查看睡眠情况。最明显就是看到几点睡几点起床...其他深度睡眠、浅度睡眠，不知道准不准。\n\n**抬腕亮屏**\n\n我没接触过其他手环之类，所以不知道别的有没有（估计都有吧）。可以设置时间段进行抬腕亮屏，比如夜里抬腕也不亮屏。\n\n**夜间模式**\n\n很实用，就是指定时间内，屏幕变暗。不伤眼睛。夜里带娃，经常喜欢看时间，夜里太亮眼睛却是受不了。\n\n## 通知提醒\n\n当时决定买手环很大的功能需求就是能看到通知。而且不是仅仅告诉我有消息要看，我要看到具体是什么消息内容。\n\n我记得小米米家系列有一款原型石英表，可以蓝牙连接手机，手机有电话、消息时候，它只能震动提醒。这样的手表功能太简单，我仍没办法脱离手机。\n\n小米 APP 里面可以分别设置常用 APP 来消息是否手表通知，不常用 APP 只有一个统一的开关。功能上我认为足够了。\n\n由于受到屏幕分辨率限制，在接收到消息后，屏幕很多时候没办法一屏幕完整显示内容，基本上就是如下：\n\n> 某某某某群：某位人物说：某某某某事情，某某某某事情，某某某某事情\n\n第一屏幕能看到“某群”，“某人”，以及“某某事情”的前几个字...如果想看后续内容，必须要水平滑动屏幕。考虑到上文提到的水平滑动体验，你绝对会放弃查看。\n\n基本上发现是重要的群或者人，你就会自觉使用手机查看。\n\n当然，如果是单人聊天，能显示更多的字，大致是：\n\n> 某某某说：某某某某和某某某某事情\n\n这样基本上能知道要说些什么。可以缓解立即拿起手机查看的情况。\n\n此外，由于是单色屏幕，表情图片啥的，要么显示“口口” 要么显示 “[表情]”之类。虽然低端货不应该要求这么高，但是有时候消息里面回复内容只有表情，没有文字。你必须拿起手机看下，到底是什么表情（是认同还是否定之类）。\n\n**题外话，这货字库很烂。**\n\n刚买到的时候，甚至有的汉字都不能正常显示，很多标点都是乱码 “口口”之类，不过经过几次升级，现在基本上很少遇到乱码了。\n\n## 续航\n\n一直没有买各种智能手表，其中一个关键原因就是各类手表都太费电了，虽然个别安卓阵营的手表能略强于 Apple watch，但是和 iPhone 集成或者功能会有欠缺。\n\n手环不同于手表，功能相对单一且简单，普遍续航都在一周以上。\n\n我大部分时间都是关闭心率检测的，运动也没有开启，主要用消息提醒，每天提醒消息至少有 100 条。基本上小米手环 3 续航在 11-13 天左右，大概就是接近但不到两周。基本上我是每周末冲一次充电。\n\n如果额外有运动模式开启，就相当于启动心率检测了。一周 2-3 次短时间运动，基本上续航超过一周。\n\n最近把自动心率检测和夜间辅助睡眠检测开启，配置了最小间隔（ 1 分钟一次），测试了一轮。大致是四到五天的样子。\n\n如果没必要这么频繁检测，或者和我一样运动时候才开启，手环续航一周应该不难实现。\n\n## 总结\n\n总的来说，小米手环 3 提供了消息提醒的基础解决方案，虽然有很多欠缺，但是也算能提供全面的提醒了。小米手环 4 屏幕升级为彩屏，且分辨率显著提升，这个问题应该基本解决了。\n\n不过屏幕的效果，尤其是强光下差强人意，触摸滑动及按键体验也不够灵敏，建议购买前实际亲自体验下（不论是小米手环 4 还是其他手环）。\n\n续航好像不是问题，因为手环之类都应该没有这种问题。\n\n如果追求较好的体验，可以考虑智能手表，感觉智能手表主要的矛盾在续航，基本上都摆脱不了 1-2 天一次充电的问题。个别手表宣称续航长，比如一个月，基本上也是把智能手表功能砍成手环而已！\n\n有的手表声称一周左右续航，可能很困难，更可能是个别功能需要关闭。\n\n有的手表声称 4 天左右续航，这个倒是可能真的，不过也是要对 GPS 等进行大部分时段关闭。\n\n我觉得只有苹果自己宣称 Apple watch 18 小时续航，才叫真的。这个应该是心率、GPS 等费电的模块都开启，能保证的续航。\n\n具体真实如何，等我的 Apple watch 5 到手后才能揭晓。\n\n--END--","source":"_posts/2019/2019-09-21-miband3.md","raw":"---\nlayout: post\ntitle: 迟到的小米手环3体验\ndate: 2019-09-21 23:54:00 GMT+0800\ncategories: [外设]\ntags:  [小米手环]\n---\n\n苹果开放第五代手表后，我由于自己过于犹豫，算是第二时间下单了，最普通的 44mm 版本。突然想起来 3 月买的买的小米手环 3，用了已有半年，却还没有做过一次总结。\n\n<!-- more -->\n\n我的小米手环 3，是今年 3 月购买，大概 159 元左右。由于我对 NFC 不感冒，而且搭配的是苹果手机，很多 NFC 功能也用不了。最关键的是，购买的时候，NFC 版本也没有发售。\n\n本身我有一块石英表，但我发现它：\n* 太重，还是金属表链，特别容易划伤笔记本\n* 没办法接收手机通知\n* 夜里看不到时间\n\n就想着买一块智能手表。\n\n小米手环比较轻便且便宜，续航也比较久，我就这样选择了。本文从我这半年时间上的经历，来体验评价小米手环 3。由于文章比较匆忙，配图极少。\n\n## 屏幕\n\n![img](https://cdn0.yukapril.com/blog/2019-09-21-miband3-1.JPG-wm.white)\n\n刚到手的时候，觉得这块屏幕还是不错的。调整好表盘可以显示时间、日期以及步数，比较实用。虽然可以看到像素颗粒感，但对于一块普通手表，稍微不是太近，也不明显。\n\n![img](https://cdn0.yukapril.com/blog/2019-09-21-miband3-2.JPG-wm.white)\n\n虽然只有单色（白色），由于像素想对较大，整体字体布局也比较大和规矩，识别起来还挺容易的。\n\n![img](https://cdn0.yukapril.com/blog/2019-09-21-miband3-3.JPG-wm.white)\n\n对于一块 150 块左右的低端手环，在强光下几乎不太可见，所以需要抬高手腕挡住阳关看时间。\n\n上图，是一个天气明朗的早晨，光线不强烈，虽然勉强可见，不过这样的识别度不能让人满意。\n\n## 操作\n\n首先要说抬腕亮屏，识别度不够好，有时候需要刻意用些力气，平缓一些它是感受不到的。即便是能亮屏，速度感觉也不快，可以说不灵敏。\n\n我已经养成了抬腕如果屏幕不亮，直接把手环底部按钮贴到脸颊上，相当于按了一下按键。\n\n不仅如此，滑动操作一样识别不够灵敏，这个问题貌似小米的所有手表手环都类似。表现为你想上下滑动看第二屏的内容，结果明明是向下滑动，结果竟然是向上滑动。\n\n上下滑动由于屏幕高度尚可，体验勉强能算过关。但左右滑动，绝对会让你放弃。\n\n我本以为凹陷的独立按键能体验好一些，不过看样子这个独立按键和滑动用的都是同样的屏幕控制单元吧，有时候一样不灵敏。\n\n总之就是这货的操作，能让你放弃使用它。\n\n## 功能\n\n小米手环 3 提供功能:\n\n* 看时间\n* 运动信息\n* 天气\n* 心率\n* 计时器，秒表等\n* 启动运动模式\n* 通知\n\n其中通知类：\n\n* APP通知提醒（下文详细介绍）\n* 来电提醒\n* 事件提示\n* 久坐提醒\n* 手环闹钟\n\n其他功能配置：\n* 睡眠监测\n* 勿扰模式（没用过）\n* 抬腕亮屏\n* 夜间模式\n\n#### 看时间\n\n作为一款表的首屏，我认为时间必须看的清晰，而且应该能有一些补充信息。小米手环 3 只能提供步数的首屏展示。不过首屏体验还不错，清晰有致。\n\n#### 运动信息\n\n这里面主要是水平滑动，告诉你步数、消耗热量、运动距离等。此外手表电量也在这里？！好诡异。要不是电量在这个栏目，我估计这个栏目我就移除了，本身运动就很少，再加上这水平滑动体验，还不如手机端查看。\n\n#### 天气\n\n偶尔看下，大部分还是手机上看天气。它可以查看3天的天气，不过需要你手机主动启动 APP，把天气信息传输给手表才行。否则它提示你开启手机 APP 呦。\n\n#### 心率\n\n手表可以自己进入栏目启动心理测试，也可以 APP 内配置好，定时测试。\n\n我运动很少，所以大部分时候不需要心率检测。而且感觉这么便宜的手环，精度应该不是太准，所以绝大部分时间都关闭了，来延长续航时间。\n\n其实也没有那么不准，大概还是可以参考的。开启后续航也能有4天，所以我就把它当做玩具功能吧。\n\n目前开启，除了早晚骑车，偶尔运动，中午吃饭走动心率较高，其他时间相对平稳，我也不知道能有什么作用。\n\n#### 计时器，秒表等\n\n买回来之后用过一次，之后不用了。感觉倒计时可能有用，不过你要接受它的复杂操作。想想还是用手机倒计时或者直接用脑子吧。\n\n#### 通知\n\n**来电提醒**\n\n说白了就是手机来电，手表震动，长按按键拒接。没别的了。有时候手机不在身边，比如找旁边同事沟通，可以不遗漏电话，而且根据来电显示可以判断是否需要立刻返回手机旁边，拿起手机接听。\n\n**事件提示**\n\n需要在 APP 内自己添加，然后到时间了手环会收到提醒，感觉很鸡肋。\n\n**手环闹钟**\n\n我在 APP 设置了清晨闹钟，并关闭了手机自带闹铃，这样就不会打扰他人了。很实用。\n\n**久坐提醒**\n\n大概一小时没有运动亮就会震动提示你以下，对我来说还算好用，因为我不午睡！\n\n不过有时候午睡（下夜班第二天中午还在休息），他判断不出来，结果你睡着了，他震动提示你要运动下...\n\n#### 其他功能配置\n\n**睡眠监测**\n\n睡觉时待着它就行。因为续航长，我几乎除了充电，就没有摘下来过。不论洗澡还是睡觉。第二天可以查看睡眠情况。最明显就是看到几点睡几点起床...其他深度睡眠、浅度睡眠，不知道准不准。\n\n**抬腕亮屏**\n\n我没接触过其他手环之类，所以不知道别的有没有（估计都有吧）。可以设置时间段进行抬腕亮屏，比如夜里抬腕也不亮屏。\n\n**夜间模式**\n\n很实用，就是指定时间内，屏幕变暗。不伤眼睛。夜里带娃，经常喜欢看时间，夜里太亮眼睛却是受不了。\n\n## 通知提醒\n\n当时决定买手环很大的功能需求就是能看到通知。而且不是仅仅告诉我有消息要看，我要看到具体是什么消息内容。\n\n我记得小米米家系列有一款原型石英表，可以蓝牙连接手机，手机有电话、消息时候，它只能震动提醒。这样的手表功能太简单，我仍没办法脱离手机。\n\n小米 APP 里面可以分别设置常用 APP 来消息是否手表通知，不常用 APP 只有一个统一的开关。功能上我认为足够了。\n\n由于受到屏幕分辨率限制，在接收到消息后，屏幕很多时候没办法一屏幕完整显示内容，基本上就是如下：\n\n> 某某某某群：某位人物说：某某某某事情，某某某某事情，某某某某事情\n\n第一屏幕能看到“某群”，“某人”，以及“某某事情”的前几个字...如果想看后续内容，必须要水平滑动屏幕。考虑到上文提到的水平滑动体验，你绝对会放弃查看。\n\n基本上发现是重要的群或者人，你就会自觉使用手机查看。\n\n当然，如果是单人聊天，能显示更多的字，大致是：\n\n> 某某某说：某某某某和某某某某事情\n\n这样基本上能知道要说些什么。可以缓解立即拿起手机查看的情况。\n\n此外，由于是单色屏幕，表情图片啥的，要么显示“口口” 要么显示 “[表情]”之类。虽然低端货不应该要求这么高，但是有时候消息里面回复内容只有表情，没有文字。你必须拿起手机看下，到底是什么表情（是认同还是否定之类）。\n\n**题外话，这货字库很烂。**\n\n刚买到的时候，甚至有的汉字都不能正常显示，很多标点都是乱码 “口口”之类，不过经过几次升级，现在基本上很少遇到乱码了。\n\n## 续航\n\n一直没有买各种智能手表，其中一个关键原因就是各类手表都太费电了，虽然个别安卓阵营的手表能略强于 Apple watch，但是和 iPhone 集成或者功能会有欠缺。\n\n手环不同于手表，功能相对单一且简单，普遍续航都在一周以上。\n\n我大部分时间都是关闭心率检测的，运动也没有开启，主要用消息提醒，每天提醒消息至少有 100 条。基本上小米手环 3 续航在 11-13 天左右，大概就是接近但不到两周。基本上我是每周末冲一次充电。\n\n如果额外有运动模式开启，就相当于启动心率检测了。一周 2-3 次短时间运动，基本上续航超过一周。\n\n最近把自动心率检测和夜间辅助睡眠检测开启，配置了最小间隔（ 1 分钟一次），测试了一轮。大致是四到五天的样子。\n\n如果没必要这么频繁检测，或者和我一样运动时候才开启，手环续航一周应该不难实现。\n\n## 总结\n\n总的来说，小米手环 3 提供了消息提醒的基础解决方案，虽然有很多欠缺，但是也算能提供全面的提醒了。小米手环 4 屏幕升级为彩屏，且分辨率显著提升，这个问题应该基本解决了。\n\n不过屏幕的效果，尤其是强光下差强人意，触摸滑动及按键体验也不够灵敏，建议购买前实际亲自体验下（不论是小米手环 4 还是其他手环）。\n\n续航好像不是问题，因为手环之类都应该没有这种问题。\n\n如果追求较好的体验，可以考虑智能手表，感觉智能手表主要的矛盾在续航，基本上都摆脱不了 1-2 天一次充电的问题。个别手表宣称续航长，比如一个月，基本上也是把智能手表功能砍成手环而已！\n\n有的手表声称一周左右续航，可能很困难，更可能是个别功能需要关闭。\n\n有的手表声称 4 天左右续航，这个倒是可能真的，不过也是要对 GPS 等进行大部分时段关闭。\n\n我觉得只有苹果自己宣称 Apple watch 18 小时续航，才叫真的。这个应该是心率、GPS 等费电的模块都开启，能保证的续航。\n\n具体真实如何，等我的 Apple watch 5 到手后才能揭晓。\n\n--END--","slug":"2019-2019-09-21-miband3","published":1,"updated":"2020-03-02T07:16:34.762Z","comments":1,"photos":[],"link":"","_id":"cka5ik8dc006xnybg0kdxs06n","content":"<p>苹果开放第五代手表后，我由于自己过于犹豫，算是第二时间下单了，最普通的 44mm 版本。突然想起来 3 月买的买的小米手环 3，用了已有半年，却还没有做过一次总结。</p>\n<a id=\"more\"></a>\n\n<p>我的小米手环 3，是今年 3 月购买，大概 159 元左右。由于我对 NFC 不感冒，而且搭配的是苹果手机，很多 NFC 功能也用不了。最关键的是，购买的时候，NFC 版本也没有发售。</p>\n<p>本身我有一块石英表，但我发现它：</p>\n<ul>\n<li>太重，还是金属表链，特别容易划伤笔记本</li>\n<li>没办法接收手机通知</li>\n<li>夜里看不到时间</li>\n</ul>\n<p>就想着买一块智能手表。</p>\n<p>小米手环比较轻便且便宜，续航也比较久，我就这样选择了。本文从我这半年时间上的经历，来体验评价小米手环 3。由于文章比较匆忙，配图极少。</p>\n<h2 id=\"屏幕\"><a href=\"#屏幕\" class=\"headerlink\" title=\"屏幕\"></a>屏幕</h2><p><img src=\"https://cdn0.yukapril.com/blog/2019-09-21-miband3-1.JPG-wm.white\" alt=\"img\"></p>\n<p>刚到手的时候，觉得这块屏幕还是不错的。调整好表盘可以显示时间、日期以及步数，比较实用。虽然可以看到像素颗粒感，但对于一块普通手表，稍微不是太近，也不明显。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-09-21-miband3-2.JPG-wm.white\" alt=\"img\"></p>\n<p>虽然只有单色（白色），由于像素想对较大，整体字体布局也比较大和规矩，识别起来还挺容易的。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-09-21-miband3-3.JPG-wm.white\" alt=\"img\"></p>\n<p>对于一块 150 块左右的低端手环，在强光下几乎不太可见，所以需要抬高手腕挡住阳关看时间。</p>\n<p>上图，是一个天气明朗的早晨，光线不强烈，虽然勉强可见，不过这样的识别度不能让人满意。</p>\n<h2 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h2><p>首先要说抬腕亮屏，识别度不够好，有时候需要刻意用些力气，平缓一些它是感受不到的。即便是能亮屏，速度感觉也不快，可以说不灵敏。</p>\n<p>我已经养成了抬腕如果屏幕不亮，直接把手环底部按钮贴到脸颊上，相当于按了一下按键。</p>\n<p>不仅如此，滑动操作一样识别不够灵敏，这个问题貌似小米的所有手表手环都类似。表现为你想上下滑动看第二屏的内容，结果明明是向下滑动，结果竟然是向上滑动。</p>\n<p>上下滑动由于屏幕高度尚可，体验勉强能算过关。但左右滑动，绝对会让你放弃。</p>\n<p>我本以为凹陷的独立按键能体验好一些，不过看样子这个独立按键和滑动用的都是同样的屏幕控制单元吧，有时候一样不灵敏。</p>\n<p>总之就是这货的操作，能让你放弃使用它。</p>\n<h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><p>小米手环 3 提供功能:</p>\n<ul>\n<li>看时间</li>\n<li>运动信息</li>\n<li>天气</li>\n<li>心率</li>\n<li>计时器，秒表等</li>\n<li>启动运动模式</li>\n<li>通知</li>\n</ul>\n<p>其中通知类：</p>\n<ul>\n<li>APP通知提醒（下文详细介绍）</li>\n<li>来电提醒</li>\n<li>事件提示</li>\n<li>久坐提醒</li>\n<li>手环闹钟</li>\n</ul>\n<p>其他功能配置：</p>\n<ul>\n<li>睡眠监测</li>\n<li>勿扰模式（没用过）</li>\n<li>抬腕亮屏</li>\n<li>夜间模式</li>\n</ul>\n<h4 id=\"看时间\"><a href=\"#看时间\" class=\"headerlink\" title=\"看时间\"></a>看时间</h4><p>作为一款表的首屏，我认为时间必须看的清晰，而且应该能有一些补充信息。小米手环 3 只能提供步数的首屏展示。不过首屏体验还不错，清晰有致。</p>\n<h4 id=\"运动信息\"><a href=\"#运动信息\" class=\"headerlink\" title=\"运动信息\"></a>运动信息</h4><p>这里面主要是水平滑动，告诉你步数、消耗热量、运动距离等。此外手表电量也在这里？！好诡异。要不是电量在这个栏目，我估计这个栏目我就移除了，本身运动就很少，再加上这水平滑动体验，还不如手机端查看。</p>\n<h4 id=\"天气\"><a href=\"#天气\" class=\"headerlink\" title=\"天气\"></a>天气</h4><p>偶尔看下，大部分还是手机上看天气。它可以查看3天的天气，不过需要你手机主动启动 APP，把天气信息传输给手表才行。否则它提示你开启手机 APP 呦。</p>\n<h4 id=\"心率\"><a href=\"#心率\" class=\"headerlink\" title=\"心率\"></a>心率</h4><p>手表可以自己进入栏目启动心理测试，也可以 APP 内配置好，定时测试。</p>\n<p>我运动很少，所以大部分时候不需要心率检测。而且感觉这么便宜的手环，精度应该不是太准，所以绝大部分时间都关闭了，来延长续航时间。</p>\n<p>其实也没有那么不准，大概还是可以参考的。开启后续航也能有4天，所以我就把它当做玩具功能吧。</p>\n<p>目前开启，除了早晚骑车，偶尔运动，中午吃饭走动心率较高，其他时间相对平稳，我也不知道能有什么作用。</p>\n<h4 id=\"计时器，秒表等\"><a href=\"#计时器，秒表等\" class=\"headerlink\" title=\"计时器，秒表等\"></a>计时器，秒表等</h4><p>买回来之后用过一次，之后不用了。感觉倒计时可能有用，不过你要接受它的复杂操作。想想还是用手机倒计时或者直接用脑子吧。</p>\n<h4 id=\"通知\"><a href=\"#通知\" class=\"headerlink\" title=\"通知\"></a>通知</h4><p><strong>来电提醒</strong></p>\n<p>说白了就是手机来电，手表震动，长按按键拒接。没别的了。有时候手机不在身边，比如找旁边同事沟通，可以不遗漏电话，而且根据来电显示可以判断是否需要立刻返回手机旁边，拿起手机接听。</p>\n<p><strong>事件提示</strong></p>\n<p>需要在 APP 内自己添加，然后到时间了手环会收到提醒，感觉很鸡肋。</p>\n<p><strong>手环闹钟</strong></p>\n<p>我在 APP 设置了清晨闹钟，并关闭了手机自带闹铃，这样就不会打扰他人了。很实用。</p>\n<p><strong>久坐提醒</strong></p>\n<p>大概一小时没有运动亮就会震动提示你以下，对我来说还算好用，因为我不午睡！</p>\n<p>不过有时候午睡（下夜班第二天中午还在休息），他判断不出来，结果你睡着了，他震动提示你要运动下…</p>\n<h4 id=\"其他功能配置\"><a href=\"#其他功能配置\" class=\"headerlink\" title=\"其他功能配置\"></a>其他功能配置</h4><p><strong>睡眠监测</strong></p>\n<p>睡觉时待着它就行。因为续航长，我几乎除了充电，就没有摘下来过。不论洗澡还是睡觉。第二天可以查看睡眠情况。最明显就是看到几点睡几点起床…其他深度睡眠、浅度睡眠，不知道准不准。</p>\n<p><strong>抬腕亮屏</strong></p>\n<p>我没接触过其他手环之类，所以不知道别的有没有（估计都有吧）。可以设置时间段进行抬腕亮屏，比如夜里抬腕也不亮屏。</p>\n<p><strong>夜间模式</strong></p>\n<p>很实用，就是指定时间内，屏幕变暗。不伤眼睛。夜里带娃，经常喜欢看时间，夜里太亮眼睛却是受不了。</p>\n<h2 id=\"通知提醒\"><a href=\"#通知提醒\" class=\"headerlink\" title=\"通知提醒\"></a>通知提醒</h2><p>当时决定买手环很大的功能需求就是能看到通知。而且不是仅仅告诉我有消息要看，我要看到具体是什么消息内容。</p>\n<p>我记得小米米家系列有一款原型石英表，可以蓝牙连接手机，手机有电话、消息时候，它只能震动提醒。这样的手表功能太简单，我仍没办法脱离手机。</p>\n<p>小米 APP 里面可以分别设置常用 APP 来消息是否手表通知，不常用 APP 只有一个统一的开关。功能上我认为足够了。</p>\n<p>由于受到屏幕分辨率限制，在接收到消息后，屏幕很多时候没办法一屏幕完整显示内容，基本上就是如下：</p>\n<blockquote>\n<p>某某某某群：某位人物说：某某某某事情，某某某某事情，某某某某事情</p>\n</blockquote>\n<p>第一屏幕能看到“某群”，“某人”，以及“某某事情”的前几个字…如果想看后续内容，必须要水平滑动屏幕。考虑到上文提到的水平滑动体验，你绝对会放弃查看。</p>\n<p>基本上发现是重要的群或者人，你就会自觉使用手机查看。</p>\n<p>当然，如果是单人聊天，能显示更多的字，大致是：</p>\n<blockquote>\n<p>某某某说：某某某某和某某某某事情</p>\n</blockquote>\n<p>这样基本上能知道要说些什么。可以缓解立即拿起手机查看的情况。</p>\n<p>此外，由于是单色屏幕，表情图片啥的，要么显示“口口” 要么显示 “[表情]”之类。虽然低端货不应该要求这么高，但是有时候消息里面回复内容只有表情，没有文字。你必须拿起手机看下，到底是什么表情（是认同还是否定之类）。</p>\n<p><strong>题外话，这货字库很烂。</strong></p>\n<p>刚买到的时候，甚至有的汉字都不能正常显示，很多标点都是乱码 “口口”之类，不过经过几次升级，现在基本上很少遇到乱码了。</p>\n<h2 id=\"续航\"><a href=\"#续航\" class=\"headerlink\" title=\"续航\"></a>续航</h2><p>一直没有买各种智能手表，其中一个关键原因就是各类手表都太费电了，虽然个别安卓阵营的手表能略强于 Apple watch，但是和 iPhone 集成或者功能会有欠缺。</p>\n<p>手环不同于手表，功能相对单一且简单，普遍续航都在一周以上。</p>\n<p>我大部分时间都是关闭心率检测的，运动也没有开启，主要用消息提醒，每天提醒消息至少有 100 条。基本上小米手环 3 续航在 11-13 天左右，大概就是接近但不到两周。基本上我是每周末冲一次充电。</p>\n<p>如果额外有运动模式开启，就相当于启动心率检测了。一周 2-3 次短时间运动，基本上续航超过一周。</p>\n<p>最近把自动心率检测和夜间辅助睡眠检测开启，配置了最小间隔（ 1 分钟一次），测试了一轮。大致是四到五天的样子。</p>\n<p>如果没必要这么频繁检测，或者和我一样运动时候才开启，手环续航一周应该不难实现。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总的来说，小米手环 3 提供了消息提醒的基础解决方案，虽然有很多欠缺，但是也算能提供全面的提醒了。小米手环 4 屏幕升级为彩屏，且分辨率显著提升，这个问题应该基本解决了。</p>\n<p>不过屏幕的效果，尤其是强光下差强人意，触摸滑动及按键体验也不够灵敏，建议购买前实际亲自体验下（不论是小米手环 4 还是其他手环）。</p>\n<p>续航好像不是问题，因为手环之类都应该没有这种问题。</p>\n<p>如果追求较好的体验，可以考虑智能手表，感觉智能手表主要的矛盾在续航，基本上都摆脱不了 1-2 天一次充电的问题。个别手表宣称续航长，比如一个月，基本上也是把智能手表功能砍成手环而已！</p>\n<p>有的手表声称一周左右续航，可能很困难，更可能是个别功能需要关闭。</p>\n<p>有的手表声称 4 天左右续航，这个倒是可能真的，不过也是要对 GPS 等进行大部分时段关闭。</p>\n<p>我觉得只有苹果自己宣称 Apple watch 18 小时续航，才叫真的。这个应该是心率、GPS 等费电的模块都开启，能保证的续航。</p>\n<p>具体真实如何，等我的 Apple watch 5 到手后才能揭晓。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>苹果开放第五代手表后，我由于自己过于犹豫，算是第二时间下单了，最普通的 44mm 版本。突然想起来 3 月买的买的小米手环 3，用了已有半年，却还没有做过一次总结。</p>","more":"<p>我的小米手环 3，是今年 3 月购买，大概 159 元左右。由于我对 NFC 不感冒，而且搭配的是苹果手机，很多 NFC 功能也用不了。最关键的是，购买的时候，NFC 版本也没有发售。</p>\n<p>本身我有一块石英表，但我发现它：</p>\n<ul>\n<li>太重，还是金属表链，特别容易划伤笔记本</li>\n<li>没办法接收手机通知</li>\n<li>夜里看不到时间</li>\n</ul>\n<p>就想着买一块智能手表。</p>\n<p>小米手环比较轻便且便宜，续航也比较久，我就这样选择了。本文从我这半年时间上的经历，来体验评价小米手环 3。由于文章比较匆忙，配图极少。</p>\n<h2 id=\"屏幕\"><a href=\"#屏幕\" class=\"headerlink\" title=\"屏幕\"></a>屏幕</h2><p><img src=\"https://cdn0.yukapril.com/blog/2019-09-21-miband3-1.JPG-wm.white\" alt=\"img\"></p>\n<p>刚到手的时候，觉得这块屏幕还是不错的。调整好表盘可以显示时间、日期以及步数，比较实用。虽然可以看到像素颗粒感，但对于一块普通手表，稍微不是太近，也不明显。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-09-21-miband3-2.JPG-wm.white\" alt=\"img\"></p>\n<p>虽然只有单色（白色），由于像素想对较大，整体字体布局也比较大和规矩，识别起来还挺容易的。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2019-09-21-miband3-3.JPG-wm.white\" alt=\"img\"></p>\n<p>对于一块 150 块左右的低端手环，在强光下几乎不太可见，所以需要抬高手腕挡住阳关看时间。</p>\n<p>上图，是一个天气明朗的早晨，光线不强烈，虽然勉强可见，不过这样的识别度不能让人满意。</p>\n<h2 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h2><p>首先要说抬腕亮屏，识别度不够好，有时候需要刻意用些力气，平缓一些它是感受不到的。即便是能亮屏，速度感觉也不快，可以说不灵敏。</p>\n<p>我已经养成了抬腕如果屏幕不亮，直接把手环底部按钮贴到脸颊上，相当于按了一下按键。</p>\n<p>不仅如此，滑动操作一样识别不够灵敏，这个问题貌似小米的所有手表手环都类似。表现为你想上下滑动看第二屏的内容，结果明明是向下滑动，结果竟然是向上滑动。</p>\n<p>上下滑动由于屏幕高度尚可，体验勉强能算过关。但左右滑动，绝对会让你放弃。</p>\n<p>我本以为凹陷的独立按键能体验好一些，不过看样子这个独立按键和滑动用的都是同样的屏幕控制单元吧，有时候一样不灵敏。</p>\n<p>总之就是这货的操作，能让你放弃使用它。</p>\n<h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><p>小米手环 3 提供功能:</p>\n<ul>\n<li>看时间</li>\n<li>运动信息</li>\n<li>天气</li>\n<li>心率</li>\n<li>计时器，秒表等</li>\n<li>启动运动模式</li>\n<li>通知</li>\n</ul>\n<p>其中通知类：</p>\n<ul>\n<li>APP通知提醒（下文详细介绍）</li>\n<li>来电提醒</li>\n<li>事件提示</li>\n<li>久坐提醒</li>\n<li>手环闹钟</li>\n</ul>\n<p>其他功能配置：</p>\n<ul>\n<li>睡眠监测</li>\n<li>勿扰模式（没用过）</li>\n<li>抬腕亮屏</li>\n<li>夜间模式</li>\n</ul>\n<h4 id=\"看时间\"><a href=\"#看时间\" class=\"headerlink\" title=\"看时间\"></a>看时间</h4><p>作为一款表的首屏，我认为时间必须看的清晰，而且应该能有一些补充信息。小米手环 3 只能提供步数的首屏展示。不过首屏体验还不错，清晰有致。</p>\n<h4 id=\"运动信息\"><a href=\"#运动信息\" class=\"headerlink\" title=\"运动信息\"></a>运动信息</h4><p>这里面主要是水平滑动，告诉你步数、消耗热量、运动距离等。此外手表电量也在这里？！好诡异。要不是电量在这个栏目，我估计这个栏目我就移除了，本身运动就很少，再加上这水平滑动体验，还不如手机端查看。</p>\n<h4 id=\"天气\"><a href=\"#天气\" class=\"headerlink\" title=\"天气\"></a>天气</h4><p>偶尔看下，大部分还是手机上看天气。它可以查看3天的天气，不过需要你手机主动启动 APP，把天气信息传输给手表才行。否则它提示你开启手机 APP 呦。</p>\n<h4 id=\"心率\"><a href=\"#心率\" class=\"headerlink\" title=\"心率\"></a>心率</h4><p>手表可以自己进入栏目启动心理测试，也可以 APP 内配置好，定时测试。</p>\n<p>我运动很少，所以大部分时候不需要心率检测。而且感觉这么便宜的手环，精度应该不是太准，所以绝大部分时间都关闭了，来延长续航时间。</p>\n<p>其实也没有那么不准，大概还是可以参考的。开启后续航也能有4天，所以我就把它当做玩具功能吧。</p>\n<p>目前开启，除了早晚骑车，偶尔运动，中午吃饭走动心率较高，其他时间相对平稳，我也不知道能有什么作用。</p>\n<h4 id=\"计时器，秒表等\"><a href=\"#计时器，秒表等\" class=\"headerlink\" title=\"计时器，秒表等\"></a>计时器，秒表等</h4><p>买回来之后用过一次，之后不用了。感觉倒计时可能有用，不过你要接受它的复杂操作。想想还是用手机倒计时或者直接用脑子吧。</p>\n<h4 id=\"通知\"><a href=\"#通知\" class=\"headerlink\" title=\"通知\"></a>通知</h4><p><strong>来电提醒</strong></p>\n<p>说白了就是手机来电，手表震动，长按按键拒接。没别的了。有时候手机不在身边，比如找旁边同事沟通，可以不遗漏电话，而且根据来电显示可以判断是否需要立刻返回手机旁边，拿起手机接听。</p>\n<p><strong>事件提示</strong></p>\n<p>需要在 APP 内自己添加，然后到时间了手环会收到提醒，感觉很鸡肋。</p>\n<p><strong>手环闹钟</strong></p>\n<p>我在 APP 设置了清晨闹钟，并关闭了手机自带闹铃，这样就不会打扰他人了。很实用。</p>\n<p><strong>久坐提醒</strong></p>\n<p>大概一小时没有运动亮就会震动提示你以下，对我来说还算好用，因为我不午睡！</p>\n<p>不过有时候午睡（下夜班第二天中午还在休息），他判断不出来，结果你睡着了，他震动提示你要运动下…</p>\n<h4 id=\"其他功能配置\"><a href=\"#其他功能配置\" class=\"headerlink\" title=\"其他功能配置\"></a>其他功能配置</h4><p><strong>睡眠监测</strong></p>\n<p>睡觉时待着它就行。因为续航长，我几乎除了充电，就没有摘下来过。不论洗澡还是睡觉。第二天可以查看睡眠情况。最明显就是看到几点睡几点起床…其他深度睡眠、浅度睡眠，不知道准不准。</p>\n<p><strong>抬腕亮屏</strong></p>\n<p>我没接触过其他手环之类，所以不知道别的有没有（估计都有吧）。可以设置时间段进行抬腕亮屏，比如夜里抬腕也不亮屏。</p>\n<p><strong>夜间模式</strong></p>\n<p>很实用，就是指定时间内，屏幕变暗。不伤眼睛。夜里带娃，经常喜欢看时间，夜里太亮眼睛却是受不了。</p>\n<h2 id=\"通知提醒\"><a href=\"#通知提醒\" class=\"headerlink\" title=\"通知提醒\"></a>通知提醒</h2><p>当时决定买手环很大的功能需求就是能看到通知。而且不是仅仅告诉我有消息要看，我要看到具体是什么消息内容。</p>\n<p>我记得小米米家系列有一款原型石英表，可以蓝牙连接手机，手机有电话、消息时候，它只能震动提醒。这样的手表功能太简单，我仍没办法脱离手机。</p>\n<p>小米 APP 里面可以分别设置常用 APP 来消息是否手表通知，不常用 APP 只有一个统一的开关。功能上我认为足够了。</p>\n<p>由于受到屏幕分辨率限制，在接收到消息后，屏幕很多时候没办法一屏幕完整显示内容，基本上就是如下：</p>\n<blockquote>\n<p>某某某某群：某位人物说：某某某某事情，某某某某事情，某某某某事情</p>\n</blockquote>\n<p>第一屏幕能看到“某群”，“某人”，以及“某某事情”的前几个字…如果想看后续内容，必须要水平滑动屏幕。考虑到上文提到的水平滑动体验，你绝对会放弃查看。</p>\n<p>基本上发现是重要的群或者人，你就会自觉使用手机查看。</p>\n<p>当然，如果是单人聊天，能显示更多的字，大致是：</p>\n<blockquote>\n<p>某某某说：某某某某和某某某某事情</p>\n</blockquote>\n<p>这样基本上能知道要说些什么。可以缓解立即拿起手机查看的情况。</p>\n<p>此外，由于是单色屏幕，表情图片啥的，要么显示“口口” 要么显示 “[表情]”之类。虽然低端货不应该要求这么高，但是有时候消息里面回复内容只有表情，没有文字。你必须拿起手机看下，到底是什么表情（是认同还是否定之类）。</p>\n<p><strong>题外话，这货字库很烂。</strong></p>\n<p>刚买到的时候，甚至有的汉字都不能正常显示，很多标点都是乱码 “口口”之类，不过经过几次升级，现在基本上很少遇到乱码了。</p>\n<h2 id=\"续航\"><a href=\"#续航\" class=\"headerlink\" title=\"续航\"></a>续航</h2><p>一直没有买各种智能手表，其中一个关键原因就是各类手表都太费电了，虽然个别安卓阵营的手表能略强于 Apple watch，但是和 iPhone 集成或者功能会有欠缺。</p>\n<p>手环不同于手表，功能相对单一且简单，普遍续航都在一周以上。</p>\n<p>我大部分时间都是关闭心率检测的，运动也没有开启，主要用消息提醒，每天提醒消息至少有 100 条。基本上小米手环 3 续航在 11-13 天左右，大概就是接近但不到两周。基本上我是每周末冲一次充电。</p>\n<p>如果额外有运动模式开启，就相当于启动心率检测了。一周 2-3 次短时间运动，基本上续航超过一周。</p>\n<p>最近把自动心率检测和夜间辅助睡眠检测开启，配置了最小间隔（ 1 分钟一次），测试了一轮。大致是四到五天的样子。</p>\n<p>如果没必要这么频繁检测，或者和我一样运动时候才开启，手环续航一周应该不难实现。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总的来说，小米手环 3 提供了消息提醒的基础解决方案，虽然有很多欠缺，但是也算能提供全面的提醒了。小米手环 4 屏幕升级为彩屏，且分辨率显著提升，这个问题应该基本解决了。</p>\n<p>不过屏幕的效果，尤其是强光下差强人意，触摸滑动及按键体验也不够灵敏，建议购买前实际亲自体验下（不论是小米手环 4 还是其他手环）。</p>\n<p>续航好像不是问题，因为手环之类都应该没有这种问题。</p>\n<p>如果追求较好的体验，可以考虑智能手表，感觉智能手表主要的矛盾在续航，基本上都摆脱不了 1-2 天一次充电的问题。个别手表宣称续航长，比如一个月，基本上也是把智能手表功能砍成手环而已！</p>\n<p>有的手表声称一周左右续航，可能很困难，更可能是个别功能需要关闭。</p>\n<p>有的手表声称 4 天左右续航，这个倒是可能真的，不过也是要对 GPS 等进行大部分时段关闭。</p>\n<p>我觉得只有苹果自己宣称 Apple watch 18 小时续航，才叫真的。这个应该是心率、GPS 等费电的模块都开启，能保证的续航。</p>\n<p>具体真实如何，等我的 Apple watch 5 到手后才能揭晓。</p>\n<p>–END–</p>"},{"layout":"post","title":"Vue input 拦截控制输入内容","date":"2019-10-19T13:59:00.000Z","_content":"\n一直在用 react，对于控制 input 输入框内容处理起来非常方便。可是在 vue 项目中，这个处理就略显麻烦。查阅网上资源，大部分都是给出控制 `keyup` `keydown` 等，输入时候进行 `replace` 操作，我认为是有问题的。\n\n<!-- more -->\n\n比如有一个需求，要求支持输入 16 进制颜色值，并且为大写显示。\n\n## react 实现\n用 react 来实现，不论是传统 `class` 类写法，还是新的 `useHooks` 写法都是很容易的。\n\n主要是因为只需要监听输入内容，如果符合要求直接写入 `state` 就可以了，而 input 输入框的值绝对和 `state` 一致。\n\n```jsx\nimport React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles.css'\n\nfunction App() {\n  const [color, setColor] = useState('')\n\n  const handleInput = e => {\n    const val = e.target.value\n    if (/^[\\dA-Fa-f]{0,6}$/g.test(val)) {\n      setColor(val.toUpperCase())\n    }\n  }\n\n  return (\n    <div>\n      <div className=\"input\">\n        <p>#</p>\n        <input onInput={handleInput} value={color} />\n      </div>\n      <p className=\"show\">You input is: {color}</p>\n    </div>\n  )\n}\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(<App />, rootElement)\n```\n\n```css\n.input {\n  display: flex;\n  align-items: center;\n  padding-bottom: 1px;\n  width: 150px;\n  height: 30px;\n  border-bottom: 1px solid #aaa;\n}\n.input p {\n  margin-right: 4px;\n  height: 20px;\n}\n.input input {\n  width: 100%;\n  height: 100%;\n  border: 0;\n  outline: none;\n}\n.show {\n  margin-top: 50px;\n}\n```\n\n## vue 实现\n\n由于 `v-model` 会自动绑定数据，导致没办法拦截输入，所以不能使用。而 `keyup` `keydown` 经过测试，体验也非常不好，还不如 `input` 省心。\n\n* `keydown` 可以做到精准拦截，通过 `return false` 让输入内容不能输入到 input 上，但该方法也导致无法直接获取用户输入的内容（只能获取键盘按键 key 值）。\n* `keyup` 和 `input` 实现方式应该一致，但我一开始实验时候没想到复写 value，导致体验不太好，具体细节原因忘记了。\n\n实现控制输入的核心在于，先获取用户输入内容，如果合格则设置新值，不合格还要还原成旧值！这个过程存在新值和旧值的比对，所以要记录好旧值。\n\n同时，需要改写 `state` 值以及 input 的 `value` 值，因为手动修改 input 值需要自己改变 `state` 状态。\n\n```html\n<template>\n  <div>\n    <div class=\"input\">\n      <p>#</p>\n      <input @input=\"onInput\" :value=\"color\">\n    </div>\n    <p class=\"show\">You input is: {{color}}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      color: \"\"\n    }\n  },\n  methods: {\n    onInput(e) {\n      const lastVal = this.color\n      const newVal = e.target.value\n\n      const valid = /^[\\dA-Fa-f]{0,6}$/g.test(newVal)\n      e.target.value = valid ? newVal.toUpperCase() : lastVal\n      this.color = valid ? newVal.toUpperCase() : lastVal\n    }\n  }\n}\n</script>\n\n<style>\n  <!-- 样式参考 react 方案中 css 内容 -->\n</style>\n```\n\n## vue 组件封装方案\n\n为了省事，可以把 input 进行封装成组件。\n\n下面例子中，仅仅封装了 `input` `value` 功能。\n\n```html\n<template>\n  <input @input=\"onInput\" :value=\"value\">\n</template>\n\n<script>\nexport default {\n  props: ['value'],\n  data() {\n    return {\n      val: this.value\n    }\n  },\n  watch: {\n    value(newVal, oldVal){\n      this.val = newVal\n    }\n  },\n  methods:{\n    onInput(e) {\n      const newVal = e.target.value\n      e.target.value = this.val\n      this.$emit('input', newVal)\n    }\n  }\n}\n</script>\n```\n\n调用上和 react 思路基本一致：\n\n```html\n<template>\n  <div>\n    <div class=\"input\">\n      <p>#</p>\n      <Input @input=\"onInput\" :value=\"color\"/>\n    </div>\n    <p class=\"show\">You input is: {{color}}</p>\n  </div>\n</template>\n\n<script>\nimport Input from './Input'\n\nexport default {\n  name: 'App',\n  components: { Input },\n  data() {\n    return {\n      color: ''\n    }\n  },\n  methods: {\n    onInput(val) {\n      const upper = val.toUpperCase()\n      if(/^[\\dA-F]{0,6}$/g.test(upper)) {\n        this.color = upper\n      }\n    }\n  }\n};\n</script>\n\n<style>\n  <!-- 样式参考 react 方案中 css 内容 -->\n</style>\n\n```\n\n\n--END--","source":"_posts/2019/2019-10-19-vue-input.md","raw":"---\nlayout: post\ntitle: Vue input 拦截控制输入内容\ndate: 2019-10-19 13:59:00 GMT+0800\ncategories: [前端]\ntags:  [vue,input]\n---\n\n一直在用 react，对于控制 input 输入框内容处理起来非常方便。可是在 vue 项目中，这个处理就略显麻烦。查阅网上资源，大部分都是给出控制 `keyup` `keydown` 等，输入时候进行 `replace` 操作，我认为是有问题的。\n\n<!-- more -->\n\n比如有一个需求，要求支持输入 16 进制颜色值，并且为大写显示。\n\n## react 实现\n用 react 来实现，不论是传统 `class` 类写法，还是新的 `useHooks` 写法都是很容易的。\n\n主要是因为只需要监听输入内容，如果符合要求直接写入 `state` 就可以了，而 input 输入框的值绝对和 `state` 一致。\n\n```jsx\nimport React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles.css'\n\nfunction App() {\n  const [color, setColor] = useState('')\n\n  const handleInput = e => {\n    const val = e.target.value\n    if (/^[\\dA-Fa-f]{0,6}$/g.test(val)) {\n      setColor(val.toUpperCase())\n    }\n  }\n\n  return (\n    <div>\n      <div className=\"input\">\n        <p>#</p>\n        <input onInput={handleInput} value={color} />\n      </div>\n      <p className=\"show\">You input is: {color}</p>\n    </div>\n  )\n}\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(<App />, rootElement)\n```\n\n```css\n.input {\n  display: flex;\n  align-items: center;\n  padding-bottom: 1px;\n  width: 150px;\n  height: 30px;\n  border-bottom: 1px solid #aaa;\n}\n.input p {\n  margin-right: 4px;\n  height: 20px;\n}\n.input input {\n  width: 100%;\n  height: 100%;\n  border: 0;\n  outline: none;\n}\n.show {\n  margin-top: 50px;\n}\n```\n\n## vue 实现\n\n由于 `v-model` 会自动绑定数据，导致没办法拦截输入，所以不能使用。而 `keyup` `keydown` 经过测试，体验也非常不好，还不如 `input` 省心。\n\n* `keydown` 可以做到精准拦截，通过 `return false` 让输入内容不能输入到 input 上，但该方法也导致无法直接获取用户输入的内容（只能获取键盘按键 key 值）。\n* `keyup` 和 `input` 实现方式应该一致，但我一开始实验时候没想到复写 value，导致体验不太好，具体细节原因忘记了。\n\n实现控制输入的核心在于，先获取用户输入内容，如果合格则设置新值，不合格还要还原成旧值！这个过程存在新值和旧值的比对，所以要记录好旧值。\n\n同时，需要改写 `state` 值以及 input 的 `value` 值，因为手动修改 input 值需要自己改变 `state` 状态。\n\n```html\n<template>\n  <div>\n    <div class=\"input\">\n      <p>#</p>\n      <input @input=\"onInput\" :value=\"color\">\n    </div>\n    <p class=\"show\">You input is: {{color}}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      color: \"\"\n    }\n  },\n  methods: {\n    onInput(e) {\n      const lastVal = this.color\n      const newVal = e.target.value\n\n      const valid = /^[\\dA-Fa-f]{0,6}$/g.test(newVal)\n      e.target.value = valid ? newVal.toUpperCase() : lastVal\n      this.color = valid ? newVal.toUpperCase() : lastVal\n    }\n  }\n}\n</script>\n\n<style>\n  <!-- 样式参考 react 方案中 css 内容 -->\n</style>\n```\n\n## vue 组件封装方案\n\n为了省事，可以把 input 进行封装成组件。\n\n下面例子中，仅仅封装了 `input` `value` 功能。\n\n```html\n<template>\n  <input @input=\"onInput\" :value=\"value\">\n</template>\n\n<script>\nexport default {\n  props: ['value'],\n  data() {\n    return {\n      val: this.value\n    }\n  },\n  watch: {\n    value(newVal, oldVal){\n      this.val = newVal\n    }\n  },\n  methods:{\n    onInput(e) {\n      const newVal = e.target.value\n      e.target.value = this.val\n      this.$emit('input', newVal)\n    }\n  }\n}\n</script>\n```\n\n调用上和 react 思路基本一致：\n\n```html\n<template>\n  <div>\n    <div class=\"input\">\n      <p>#</p>\n      <Input @input=\"onInput\" :value=\"color\"/>\n    </div>\n    <p class=\"show\">You input is: {{color}}</p>\n  </div>\n</template>\n\n<script>\nimport Input from './Input'\n\nexport default {\n  name: 'App',\n  components: { Input },\n  data() {\n    return {\n      color: ''\n    }\n  },\n  methods: {\n    onInput(val) {\n      const upper = val.toUpperCase()\n      if(/^[\\dA-F]{0,6}$/g.test(upper)) {\n        this.color = upper\n      }\n    }\n  }\n};\n</script>\n\n<style>\n  <!-- 样式参考 react 方案中 css 内容 -->\n</style>\n\n```\n\n\n--END--","slug":"2019-2019-10-19-vue-input","published":1,"updated":"2020-03-02T07:16:34.762Z","comments":1,"photos":[],"link":"","_id":"cka5ik8dd0070nybgszfci48y","content":"<p>一直在用 react，对于控制 input 输入框内容处理起来非常方便。可是在 vue 项目中，这个处理就略显麻烦。查阅网上资源，大部分都是给出控制 <code>keyup</code> <code>keydown</code> 等，输入时候进行 <code>replace</code> 操作，我认为是有问题的。</p>\n<a id=\"more\"></a>\n\n<p>比如有一个需求，要求支持输入 16 进制颜色值，并且为大写显示。</p>\n<h2 id=\"react-实现\"><a href=\"#react-实现\" class=\"headerlink\" title=\"react 实现\"></a>react 实现</h2><p>用 react 来实现，不论是传统 <code>class</code> 类写法，还是新的 <code>useHooks</code> 写法都是很容易的。</p>\n<p>主要是因为只需要监听输入内容，如果符合要求直接写入 <code>state</code> 就可以了，而 input 输入框的值绝对和 <code>state</code> 一致。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./styles.css'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [color, setColor] = useState(<span class=\"string\">''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInput = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> val = e.target.value</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/^[\\dA-Fa-f]&#123;0,6&#125;$/g</span>.test(val)) &#123;</span><br><span class=\"line\">      setColor(val.toUpperCase())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"input\"</span>&gt;</span><br><span class=\"line\">        &lt;p&gt;#&lt;/p&gt;</span><br><span class=\"line\">        &lt;input onInput=&#123;handleInput&#125; value=&#123;color&#125; /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;p className=\"show\"&gt;You input is: &#123;color&#125;&lt;/</span>p&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const rootElement = document.getElementById('root')</span></span><br><span class=\"line\"><span class=\"regexp\">ReactDOM.render(&lt;App /</span>&gt;, rootElement)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.input</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">padding-bottom</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#aaa</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.input</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.input</span> <span class=\"selector-tag\">input</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">outline</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.show</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"vue-实现\"><a href=\"#vue-实现\" class=\"headerlink\" title=\"vue 实现\"></a>vue 实现</h2><p>由于 <code>v-model</code> 会自动绑定数据，导致没办法拦截输入，所以不能使用。而 <code>keyup</code> <code>keydown</code> 经过测试，体验也非常不好，还不如 <code>input</code> 省心。</p>\n<ul>\n<li><code>keydown</code> 可以做到精准拦截，通过 <code>return false</code> 让输入内容不能输入到 input 上，但该方法也导致无法直接获取用户输入的内容（只能获取键盘按键 key 值）。</li>\n<li><code>keyup</code> 和 <code>input</code> 实现方式应该一致，但我一开始实验时候没想到复写 value，导致体验不太好，具体细节原因忘记了。</li>\n</ul>\n<p>实现控制输入的核心在于，先获取用户输入内容，如果合格则设置新值，不合格还要还原成旧值！这个过程存在新值和旧值的比对，所以要记录好旧值。</p>\n<p>同时，需要改写 <code>state</code> 值以及 input 的 <code>value</code> 值，因为手动修改 input 值需要自己改变 <code>state</code> 状态。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>#<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">input</span>=<span class=\"string\">\"onInput\"</span> <span class=\"attr\">:value</span>=<span class=\"string\">\"color\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"show\"</span>&gt;</span>You input is: &#123;&#123;color&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  name: <span class=\"string\">\"App\"</span>,</span></span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      color: <span class=\"string\">\"\"</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    onInput(e) &#123;</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">const</span> lastVal = <span class=\"keyword\">this</span>.color</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">const</span> newVal = e.target.value</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">const</span> valid = <span class=\"regexp\">/^[\\dA-Fa-f]&#123;0,6&#125;$/g</span>.test(newVal)</span></span><br><span class=\"line\">      e.target.value = valid ? newVal.toUpperCase() : lastVal</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.color = valid ? newVal.toUpperCase() : lastVal</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"comment\">&lt;!-- 样式参考 react 方案中 css 内容 --&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"vue-组件封装方案\"><a href=\"#vue-组件封装方案\" class=\"headerlink\" title=\"vue 组件封装方案\"></a>vue 组件封装方案</h2><p>为了省事，可以把 input 进行封装成组件。</p>\n<p>下面例子中，仅仅封装了 <code>input</code> <code>value</code> 功能。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">input</span>=<span class=\"string\">\"onInput\"</span> <span class=\"attr\">:value</span>=<span class=\"string\">\"value\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  props: [<span class=\"string\">'value'</span>],</span></span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      val: <span class=\"keyword\">this</span>.value</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    value(newVal, oldVal)&#123;</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.val = newVal</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">    onInput(e) &#123;</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">const</span> newVal = e.target.value</span></span><br><span class=\"line\"><span class=\"javascript\">      e.target.value = <span class=\"keyword\">this</span>.val</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'input'</span>, newVal)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>调用上和 react 思路基本一致：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>#<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Input</span> @<span class=\"attr\">input</span>=<span class=\"string\">\"onInput\"</span> <span class=\"attr\">:value</span>=<span class=\"string\">\"color\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"show\"</span>&gt;</span>You input is: &#123;&#123;color&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> Input <span class=\"keyword\">from</span> <span class=\"string\">'./Input'</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  name: <span class=\"string\">'App'</span>,</span></span><br><span class=\"line\">  components: &#123; Input &#125;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      color: <span class=\"string\">''</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    onInput(val) &#123;</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">const</span> upper = val.toUpperCase()</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">if</span>(<span class=\"regexp\">/^[\\dA-F]&#123;0,6&#125;$/g</span>.test(upper)) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.color = upper</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"comment\">&lt;!-- 样式参考 react 方案中 css 内容 --&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>一直在用 react，对于控制 input 输入框内容处理起来非常方便。可是在 vue 项目中，这个处理就略显麻烦。查阅网上资源，大部分都是给出控制 <code>keyup</code> <code>keydown</code> 等，输入时候进行 <code>replace</code> 操作，我认为是有问题的。</p>","more":"<p>比如有一个需求，要求支持输入 16 进制颜色值，并且为大写显示。</p>\n<h2 id=\"react-实现\"><a href=\"#react-实现\" class=\"headerlink\" title=\"react 实现\"></a>react 实现</h2><p>用 react 来实现，不论是传统 <code>class</code> 类写法，还是新的 <code>useHooks</code> 写法都是很容易的。</p>\n<p>主要是因为只需要监听输入内容，如果符合要求直接写入 <code>state</code> 就可以了，而 input 输入框的值绝对和 <code>state</code> 一致。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./styles.css'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [color, setColor] = useState(<span class=\"string\">''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleInput = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> val = e.target.value</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/^[\\dA-Fa-f]&#123;0,6&#125;$/g</span>.test(val)) &#123;</span><br><span class=\"line\">      setColor(val.toUpperCase())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"input\"</span>&gt;</span><br><span class=\"line\">        &lt;p&gt;#&lt;/p&gt;</span><br><span class=\"line\">        &lt;input onInput=&#123;handleInput&#125; value=&#123;color&#125; /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;p className=\"show\"&gt;You input is: &#123;color&#125;&lt;/</span>p&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const rootElement = document.getElementById('root')</span></span><br><span class=\"line\"><span class=\"regexp\">ReactDOM.render(&lt;App /</span>&gt;, rootElement)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.input</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">padding-bottom</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#aaa</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.input</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.input</span> <span class=\"selector-tag\">input</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">outline</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.show</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"vue-实现\"><a href=\"#vue-实现\" class=\"headerlink\" title=\"vue 实现\"></a>vue 实现</h2><p>由于 <code>v-model</code> 会自动绑定数据，导致没办法拦截输入，所以不能使用。而 <code>keyup</code> <code>keydown</code> 经过测试，体验也非常不好，还不如 <code>input</code> 省心。</p>\n<ul>\n<li><code>keydown</code> 可以做到精准拦截，通过 <code>return false</code> 让输入内容不能输入到 input 上，但该方法也导致无法直接获取用户输入的内容（只能获取键盘按键 key 值）。</li>\n<li><code>keyup</code> 和 <code>input</code> 实现方式应该一致，但我一开始实验时候没想到复写 value，导致体验不太好，具体细节原因忘记了。</li>\n</ul>\n<p>实现控制输入的核心在于，先获取用户输入内容，如果合格则设置新值，不合格还要还原成旧值！这个过程存在新值和旧值的比对，所以要记录好旧值。</p>\n<p>同时，需要改写 <code>state</code> 值以及 input 的 <code>value</code> 值，因为手动修改 input 值需要自己改变 <code>state</code> 状态。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>#<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">input</span>=<span class=\"string\">\"onInput\"</span> <span class=\"attr\">:value</span>=<span class=\"string\">\"color\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"show\"</span>&gt;</span>You input is: &#123;&#123;color&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  name: <span class=\"string\">\"App\"</span>,</span></span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      color: <span class=\"string\">\"\"</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    onInput(e) &#123;</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">const</span> lastVal = <span class=\"keyword\">this</span>.color</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">const</span> newVal = e.target.value</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">const</span> valid = <span class=\"regexp\">/^[\\dA-Fa-f]&#123;0,6&#125;$/g</span>.test(newVal)</span></span><br><span class=\"line\">      e.target.value = valid ? newVal.toUpperCase() : lastVal</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.color = valid ? newVal.toUpperCase() : lastVal</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"comment\">&lt;!-- 样式参考 react 方案中 css 内容 --&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"vue-组件封装方案\"><a href=\"#vue-组件封装方案\" class=\"headerlink\" title=\"vue 组件封装方案\"></a>vue 组件封装方案</h2><p>为了省事，可以把 input 进行封装成组件。</p>\n<p>下面例子中，仅仅封装了 <code>input</code> <code>value</code> 功能。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">input</span>=<span class=\"string\">\"onInput\"</span> <span class=\"attr\">:value</span>=<span class=\"string\">\"value\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  props: [<span class=\"string\">'value'</span>],</span></span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      val: <span class=\"keyword\">this</span>.value</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    value(newVal, oldVal)&#123;</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.val = newVal</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">    onInput(e) &#123;</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">const</span> newVal = e.target.value</span></span><br><span class=\"line\"><span class=\"javascript\">      e.target.value = <span class=\"keyword\">this</span>.val</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'input'</span>, newVal)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>调用上和 react 思路基本一致：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>#<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Input</span> @<span class=\"attr\">input</span>=<span class=\"string\">\"onInput\"</span> <span class=\"attr\">:value</span>=<span class=\"string\">\"color\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"show\"</span>&gt;</span>You input is: &#123;&#123;color&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> Input <span class=\"keyword\">from</span> <span class=\"string\">'./Input'</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  name: <span class=\"string\">'App'</span>,</span></span><br><span class=\"line\">  components: &#123; Input &#125;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      color: <span class=\"string\">''</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    onInput(val) &#123;</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">const</span> upper = val.toUpperCase()</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">if</span>(<span class=\"regexp\">/^[\\dA-F]&#123;0,6&#125;$/g</span>.test(upper)) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.color = upper</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"comment\">&lt;!-- 样式参考 react 方案中 css 内容 --&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>–END–</p>"},{"layout":"post","title":"Redux 学习 - reducer 合并","date":"2019-11-02T23:09:00.000Z","_content":"\n上一篇文章主要说了 redux 的简单用法，为了和后续 umi 体系进行对齐，增加一篇 redux 有多个 reducer，并且合并的情况用法。\n\n<!-- more -->\n\n最终代码可以看这里 [github](https://github.com/yukapril/learning/tree/master/react-redux-lite-combine)\n\n很多项目都是按模块化区分的，对于不同的模块理应 reducer 也是分开的。最终导出的 reducer 在进行合并。\n\n首先参考上次的代码，来进行修改调整。\n\n#### index.js\n\n文件完全相同，不需要修改。\n\n#### reducer.js\n\n```jsx\n+ import { combineReducers } from \"redux\";\n\n  const globalReducer = (state = { count: 10 }, action) => {\n    switch (action.type) {\n      case \"INCREMENT\":\n        return { ...state, count: state.count + action.payload }\n      case \"DECREMENT\":\n        return { ...state, count: state.count - action.payload }\n      default:\n        return state\n    }\n  }\n\n+ const otherReducer = (state = { count: 20 }, action) => {\n+   switch (action.type) {\n+     case \"CLEAR\":\n+       return { ...state, count: 0 }\n+     case \"TOMAX\":\n+       return { ...state, count: 100 }\n+     default:\n+       return state\n+   }\n+ }\n\n- export default globalReducer\n+ export default combineReducers({\n+   globalReducer,\n+   otherReducer\n+ })\n```\n\n我们增加一个 `otherReducer`，最后使用 `combineReducers` 进行合并。为了省事，我把两个 reducer 写到一个文件里了，实际项目更可能是分布在两个文件中。\n\n`combineReducers` 里的对象默认是如下形式：\n\n```js\n{\n  globalReducer: globalReducer,\n  otherReducer: otherReducer\n}\n```\n\n当然你可以改名为：\n\n```js\n{\n  aaa: globalReducer,\n  bbb: otherReducer\n}\n```\n\n后续获取全局 `state` 时候就要换成自定义的字段名。\n\n#### Counter.js\n\n```jsx\n  import React from \"react\"\n  import { connect } from \"react-redux\"\n\n  class Counter extends React.PureComponent {\n    render () {\n-     const { globalState, dispatch } = this.props\n+     const { globalState, otherState, dispatch } = this.props\n      return (\n        <div>\n          <p>COUNT:{globalState.count}</p>\n          <button onClick={() => dispatch({ type: \"INCREMENT\", payload: 1 })}>\n            +1\n          </button>\n          <button onClick={() => dispatch({ type: \"DECREMENT\", payload: 1 })}>\n            -1\n          </button>\n+         <p>COUNT:{otherState.count}</p>\n+         <button onClick={() => dispatch({ type: \"CLEAR\" })}>\n+           clear\n+         </button>\n+         <button onClick={() => dispatch({ type: \"TOMAX\" })}>\n+           to max\n+         </button>\n        </div>\n      )\n    }\n  }\n\n  const mapStateToProps = state => {\n-   return ({ globalState: state })\n+   return ({ globalState: state.globalReducer, otherState: state.otherReducer })\n  }\n  export default connect(mapStateToProps)(Counter)\n```\n\n为了省事，我把这个组件增加了两个按钮功能，实际情况更可能是另外一个组件来调用对应的方法。\n\n与之前不同的是，全局 `state` 不再是一层对象了，而是被我们 reducer 定义的字段名包了一层。\n\n**需要注意的是，我们调用 `dispatch({ type: \"DECREMENT\", payload: 1 })` 后，不仅 `globalReducer` 会被执行，`otherReducer` 也会被执行。只不过 `otherReducer` 走到了 `default` 情况。这也就是 reducer 不要写带有副作用的功能！**\n\n\n\n--END--","source":"_posts/2019/2019-11-02-react-redux-combine.md","raw":"---\nlayout: post\ntitle: Redux 学习 - reducer 合并\ndate: 2019-11-02 23:09:00 GMT+0800\ncategories: [前端]\ntags:  [react,redux]\n---\n\n上一篇文章主要说了 redux 的简单用法，为了和后续 umi 体系进行对齐，增加一篇 redux 有多个 reducer，并且合并的情况用法。\n\n<!-- more -->\n\n最终代码可以看这里 [github](https://github.com/yukapril/learning/tree/master/react-redux-lite-combine)\n\n很多项目都是按模块化区分的，对于不同的模块理应 reducer 也是分开的。最终导出的 reducer 在进行合并。\n\n首先参考上次的代码，来进行修改调整。\n\n#### index.js\n\n文件完全相同，不需要修改。\n\n#### reducer.js\n\n```jsx\n+ import { combineReducers } from \"redux\";\n\n  const globalReducer = (state = { count: 10 }, action) => {\n    switch (action.type) {\n      case \"INCREMENT\":\n        return { ...state, count: state.count + action.payload }\n      case \"DECREMENT\":\n        return { ...state, count: state.count - action.payload }\n      default:\n        return state\n    }\n  }\n\n+ const otherReducer = (state = { count: 20 }, action) => {\n+   switch (action.type) {\n+     case \"CLEAR\":\n+       return { ...state, count: 0 }\n+     case \"TOMAX\":\n+       return { ...state, count: 100 }\n+     default:\n+       return state\n+   }\n+ }\n\n- export default globalReducer\n+ export default combineReducers({\n+   globalReducer,\n+   otherReducer\n+ })\n```\n\n我们增加一个 `otherReducer`，最后使用 `combineReducers` 进行合并。为了省事，我把两个 reducer 写到一个文件里了，实际项目更可能是分布在两个文件中。\n\n`combineReducers` 里的对象默认是如下形式：\n\n```js\n{\n  globalReducer: globalReducer,\n  otherReducer: otherReducer\n}\n```\n\n当然你可以改名为：\n\n```js\n{\n  aaa: globalReducer,\n  bbb: otherReducer\n}\n```\n\n后续获取全局 `state` 时候就要换成自定义的字段名。\n\n#### Counter.js\n\n```jsx\n  import React from \"react\"\n  import { connect } from \"react-redux\"\n\n  class Counter extends React.PureComponent {\n    render () {\n-     const { globalState, dispatch } = this.props\n+     const { globalState, otherState, dispatch } = this.props\n      return (\n        <div>\n          <p>COUNT:{globalState.count}</p>\n          <button onClick={() => dispatch({ type: \"INCREMENT\", payload: 1 })}>\n            +1\n          </button>\n          <button onClick={() => dispatch({ type: \"DECREMENT\", payload: 1 })}>\n            -1\n          </button>\n+         <p>COUNT:{otherState.count}</p>\n+         <button onClick={() => dispatch({ type: \"CLEAR\" })}>\n+           clear\n+         </button>\n+         <button onClick={() => dispatch({ type: \"TOMAX\" })}>\n+           to max\n+         </button>\n        </div>\n      )\n    }\n  }\n\n  const mapStateToProps = state => {\n-   return ({ globalState: state })\n+   return ({ globalState: state.globalReducer, otherState: state.otherReducer })\n  }\n  export default connect(mapStateToProps)(Counter)\n```\n\n为了省事，我把这个组件增加了两个按钮功能，实际情况更可能是另外一个组件来调用对应的方法。\n\n与之前不同的是，全局 `state` 不再是一层对象了，而是被我们 reducer 定义的字段名包了一层。\n\n**需要注意的是，我们调用 `dispatch({ type: \"DECREMENT\", payload: 1 })` 后，不仅 `globalReducer` 会被执行，`otherReducer` 也会被执行。只不过 `otherReducer` 走到了 `default` 情况。这也就是 reducer 不要写带有副作用的功能！**\n\n\n\n--END--","slug":"2019-2019-11-02-react-redux-combine","published":1,"updated":"2020-03-02T07:16:34.762Z","comments":1,"photos":[],"link":"","_id":"cka5ik8df0073nybgrkf2fy47","content":"<p>上一篇文章主要说了 redux 的简单用法，为了和后续 umi 体系进行对齐，增加一篇 redux 有多个 reducer，并且合并的情况用法。</p>\n<a id=\"more\"></a>\n\n<p>最终代码可以看这里 <a href=\"https://github.com/yukapril/learning/tree/master/react-redux-lite-combine\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<p>很多项目都是按模块化区分的，对于不同的模块理应 reducer 也是分开的。最终导出的 reducer 在进行合并。</p>\n<p>首先参考上次的代码，来进行修改调整。</p>\n<h4 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a>index.js</h4><p>文件完全相同，不需要修改。</p>\n<h4 id=\"reducer-js\"><a href=\"#reducer-js\" class=\"headerlink\" title=\"reducer.js\"></a>reducer.js</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ <span class=\"keyword\">import</span> &#123; combineReducers &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"redux\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> globalReducer = <span class=\"function\">(<span class=\"params\">state = &#123; count: <span class=\"number\">10</span> &#125;, action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"INCREMENT\"</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">count</span>: state.count + action.payload &#125;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"DECREMENT\"</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">count</span>: state.count - action.payload &#125;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ <span class=\"keyword\">const</span> otherReducer = <span class=\"function\">(<span class=\"params\">state = &#123; count: <span class=\"number\">20</span> &#125;, action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">+   <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">+     <span class=\"keyword\">case</span> <span class=\"string\">\"CLEAR\"</span>:</span><br><span class=\"line\">+       <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">+     <span class=\"keyword\">case</span> <span class=\"string\">\"TOMAX\"</span>:</span><br><span class=\"line\">+       <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">count</span>: <span class=\"number\">100</span> &#125;</span><br><span class=\"line\">+     <span class=\"keyword\">default</span>:</span><br><span class=\"line\">+       <span class=\"keyword\">return</span> state</span><br><span class=\"line\">+   &#125;</span><br><span class=\"line\">+ &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> globalReducer</span><br><span class=\"line\">+ <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> combineReducers(&#123;</span><br><span class=\"line\">+   globalReducer,</span><br><span class=\"line\">+   otherReducer</span><br><span class=\"line\">+ &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>我们增加一个 <code>otherReducer</code>，最后使用 <code>combineReducers</code> 进行合并。为了省事，我把两个 reducer 写到一个文件里了，实际项目更可能是分布在两个文件中。</p>\n<p><code>combineReducers</code> 里的对象默认是如下形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  globalReducer: globalReducer,</span><br><span class=\"line\">  otherReducer: otherReducer</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然你可以改名为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  aaa: globalReducer,</span><br><span class=\"line\">  bbb: otherReducer</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>后续获取全局 <code>state</code> 时候就要换成自定义的字段名。</p>\n<h4 id=\"Counter-js\"><a href=\"#Counter-js\" class=\"headerlink\" title=\"Counter.js\"></a>Counter.js</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span></span><br><span class=\"line\">  <span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-redux\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">    render () &#123;</span><br><span class=\"line\">-     <span class=\"keyword\">const</span> &#123; globalState, dispatch &#125; = <span class=\"keyword\">this</span>.props</span><br><span class=\"line\">+     <span class=\"keyword\">const</span> &#123; globalState, otherState, dispatch &#125; = <span class=\"keyword\">this</span>.props</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;p&gt;COUNT:&#123;globalState.count&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: \"INCREMENT\", payload: 1 &#125;)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            +1</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>button&gt;</span><br><span class=\"line\">          &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"DECREMENT\"</span>, <span class=\"attr\">payload</span>: <span class=\"number\">1</span> &#125;)&#125;&gt;</span><br><span class=\"line\">            <span class=\"number\">-1</span></span><br><span class=\"line\">          &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">+         &lt;p&gt;COUNT:&#123;otherState.count&#125;&lt;/</span>p&gt;</span><br><span class=\"line\">+         <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> dispatch(&#123; type: \"CLEAR\" &#125;)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"xml\">+           clear</span></span><br><span class=\"line\"><span class=\"xml\">+         <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">+         <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> dispatch(&#123; type: \"TOMAX\" &#125;)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"xml\">+           to max</span></span><br><span class=\"line\"><span class=\"xml\">+         <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      )</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  const mapStateToProps = state =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">-   return (&#123; globalState: state &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">+   return (&#123; globalState: state.globalReducer, otherState: state.otherReducer &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  export default connect(mapStateToProps)(Counter)</span></span><br></pre></td></tr></table></figure>\n\n<p>为了省事，我把这个组件增加了两个按钮功能，实际情况更可能是另外一个组件来调用对应的方法。</p>\n<p>与之前不同的是，全局 <code>state</code> 不再是一层对象了，而是被我们 reducer 定义的字段名包了一层。</p>\n<p><strong>需要注意的是，我们调用 <code>dispatch({ type: &quot;DECREMENT&quot;, payload: 1 })</code> 后，不仅 <code>globalReducer</code> 会被执行，<code>otherReducer</code> 也会被执行。只不过 <code>otherReducer</code> 走到了 <code>default</code> 情况。这也就是 reducer 不要写带有副作用的功能！</strong></p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>上一篇文章主要说了 redux 的简单用法，为了和后续 umi 体系进行对齐，增加一篇 redux 有多个 reducer，并且合并的情况用法。</p>","more":"<p>最终代码可以看这里 <a href=\"https://github.com/yukapril/learning/tree/master/react-redux-lite-combine\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<p>很多项目都是按模块化区分的，对于不同的模块理应 reducer 也是分开的。最终导出的 reducer 在进行合并。</p>\n<p>首先参考上次的代码，来进行修改调整。</p>\n<h4 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a>index.js</h4><p>文件完全相同，不需要修改。</p>\n<h4 id=\"reducer-js\"><a href=\"#reducer-js\" class=\"headerlink\" title=\"reducer.js\"></a>reducer.js</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ <span class=\"keyword\">import</span> &#123; combineReducers &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"redux\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> globalReducer = <span class=\"function\">(<span class=\"params\">state = &#123; count: <span class=\"number\">10</span> &#125;, action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"INCREMENT\"</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">count</span>: state.count + action.payload &#125;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"DECREMENT\"</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">count</span>: state.count - action.payload &#125;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ <span class=\"keyword\">const</span> otherReducer = <span class=\"function\">(<span class=\"params\">state = &#123; count: <span class=\"number\">20</span> &#125;, action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">+   <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">+     <span class=\"keyword\">case</span> <span class=\"string\">\"CLEAR\"</span>:</span><br><span class=\"line\">+       <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">+     <span class=\"keyword\">case</span> <span class=\"string\">\"TOMAX\"</span>:</span><br><span class=\"line\">+       <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">count</span>: <span class=\"number\">100</span> &#125;</span><br><span class=\"line\">+     <span class=\"keyword\">default</span>:</span><br><span class=\"line\">+       <span class=\"keyword\">return</span> state</span><br><span class=\"line\">+   &#125;</span><br><span class=\"line\">+ &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> globalReducer</span><br><span class=\"line\">+ <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> combineReducers(&#123;</span><br><span class=\"line\">+   globalReducer,</span><br><span class=\"line\">+   otherReducer</span><br><span class=\"line\">+ &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>我们增加一个 <code>otherReducer</code>，最后使用 <code>combineReducers</code> 进行合并。为了省事，我把两个 reducer 写到一个文件里了，实际项目更可能是分布在两个文件中。</p>\n<p><code>combineReducers</code> 里的对象默认是如下形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  globalReducer: globalReducer,</span><br><span class=\"line\">  otherReducer: otherReducer</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然你可以改名为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  aaa: globalReducer,</span><br><span class=\"line\">  bbb: otherReducer</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>后续获取全局 <code>state</code> 时候就要换成自定义的字段名。</p>\n<h4 id=\"Counter-js\"><a href=\"#Counter-js\" class=\"headerlink\" title=\"Counter.js\"></a>Counter.js</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span></span><br><span class=\"line\">  <span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-redux\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">    render () &#123;</span><br><span class=\"line\">-     <span class=\"keyword\">const</span> &#123; globalState, dispatch &#125; = <span class=\"keyword\">this</span>.props</span><br><span class=\"line\">+     <span class=\"keyword\">const</span> &#123; globalState, otherState, dispatch &#125; = <span class=\"keyword\">this</span>.props</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;p&gt;COUNT:&#123;globalState.count&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: \"INCREMENT\", payload: 1 &#125;)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            +1</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>button&gt;</span><br><span class=\"line\">          &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"DECREMENT\"</span>, <span class=\"attr\">payload</span>: <span class=\"number\">1</span> &#125;)&#125;&gt;</span><br><span class=\"line\">            <span class=\"number\">-1</span></span><br><span class=\"line\">          &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">+         &lt;p&gt;COUNT:&#123;otherState.count&#125;&lt;/</span>p&gt;</span><br><span class=\"line\">+         <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> dispatch(&#123; type: \"CLEAR\" &#125;)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"xml\">+           clear</span></span><br><span class=\"line\"><span class=\"xml\">+         <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">+         <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> dispatch(&#123; type: \"TOMAX\" &#125;)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"xml\">+           to max</span></span><br><span class=\"line\"><span class=\"xml\">+         <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      )</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  const mapStateToProps = state =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">-   return (&#123; globalState: state &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">+   return (&#123; globalState: state.globalReducer, otherState: state.otherReducer &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  export default connect(mapStateToProps)(Counter)</span></span><br></pre></td></tr></table></figure>\n\n<p>为了省事，我把这个组件增加了两个按钮功能，实际情况更可能是另外一个组件来调用对应的方法。</p>\n<p>与之前不同的是，全局 <code>state</code> 不再是一层对象了，而是被我们 reducer 定义的字段名包了一层。</p>\n<p><strong>需要注意的是，我们调用 <code>dispatch({ type: &quot;DECREMENT&quot;, payload: 1 })</code> 后，不仅 <code>globalReducer</code> 会被执行，<code>otherReducer</code> 也会被执行。只不过 <code>otherReducer</code> 走到了 <code>default</code> 情况。这也就是 reducer 不要写带有副作用的功能！</strong></p>\n<p>–END–</p>"},{"layout":"post","title":"Redux 学习 - react-redux","date":"2019-11-02T15:44:00.000Z","_content":"\n感觉公司新项目要用到 redux 了，趁此机会好好学习下。react 用了这么久，redux 真的一点还不会。其实也是看过一点文章，但感觉他们的写法太复杂，把简单的写法弄复杂了。这次算是一个系列的文章，大概顺序是 redux、redux-saga、umijs（dva）架构写法。\n\n<!-- more -->\n\n## redux\n\n一般 react 项目，都是各个组件自己管理状态，如果遇到多个组件要通信，才会考虑 redux。\n\n确实大部分项目都用不到 redux。我认为需要用到 redux 主要有三点：\n\n* 项目有太多的状态需要管理\n* 开发人员太多导致状态混乱，难以管理\n* 组件需要较多的通信，或者存在嵌套太深\n\n使用 redux 后，数据流动发生了一些变化：\n\n1. 首先是组件的部分状态（或全部）要在全局状态来进行获取，这步需要通过 connect 方法来实现 HOC（高阶组件）。\n2. 其次组件需要修改共用的状态，需要通过 dispatch 方法派发一个 action，到 reducer 上，reducer 负责调整全局状态。\n\n下面，我力争用最简单的例子，并且尽量和后续文章内容写法上向后兼容。\n\n> 下文将不再特殊说明，redux 有时候特指 react-redux。\n\n## react-redux 上手\n\n最终的代码见 [github](https://github.com/yukapril/learning/tree/master/react-redux-lite)\n\n最基础的功能实现，只需要三个文件就可以了。分别是： \n* 入口文件 `index.js` \n* 迭代文件 `reducer.js`\n* 组件文件 `Counter.js`\n\n如果你看过完整版的 redux 入门，会多出一些文件，其实就是单独抽离出来而已。随着下文遇到的时候，我会做相应说明。\n\n我们来实现一个全局状态管理的支持加减的记录器。\n\n#### index.js\n\n```jsx\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Provider } from \"react-redux\"\nimport { createStore } from \"redux\"\nimport reducer from \"./reducer.js\"\nimport Counter from \"./Counter\"\n\nconst store = createStore(reducer)\n\nclass App extends React.PureComponent {\n  render () {\n    return (\n      <Provider store={store}>\n        <Counter />\n      </Provider>\n    )\n  }\n}\n\nconst rootElement = document.getElementById(\"root\")\nReactDOM.render(<App />, rootElement)\n```\n\n必须要先使用 `Provider` 组件整体包裹起来，组件来源于 `react-redux` 垫片库。这样子组件变成 HOC（高阶组件）后就可以拿到全局状态了。\n\n需要创建一个全局状态（`store`），使用 redux 原本的库的方法进行创建。\n\n> 经过研究，创建全局状态时候，一般不建议使用 `createStore` 的第二个参数配置 `初始 state`，而是在 reducer（迭代函数）中配置默认值。因为如果是只有一个 reducer，那么没啥问题。如果是多个 reducer 再进行合成，会有问题，我没有深入研究原因。\n\n\n#### Counter.js\n\n```js\nimport React from \"react\"\nimport { connect } from \"react-redux\"\n\nclass Counter extends React.PureComponent {\n  render () {\n    const { globalState, dispatch } = this.props\n    return (\n      <div>\n        <p>COUNT:{globalState.count}</p>\n        <button onClick={() => dispatch({ type: \"INCREMENT\", payload: 1 })}>\n          +1\n        </button>\n        <button onClick={() => dispatch({ type: \"DECREMENT\", payload: 1 })}>\n          -1\n        </button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({ globalState: state })\nexport default connect(mapStateToProps)(Counter)\n```\n\n**看似很简单的组件，其实涉及的点特别多。**\n\n组件想要获取全局状态，必须用 `connect` 连接包裹一下。\n\n`connect` 支持两个参数，分别是 `mapStateToProps` `mapDispatchToProps`。其中 `mapStateToProps` 必须实现，否则组件内部 `props` 拿不到 `state`；`mapDispatchToProps` 我觉得无所谓，因为组件内部 `props` 默认可以拿到 `dispatch` 方法。\n\n> `connect` 可以在文件后面用函数调用方式写，也可以用装饰器来写（就是 java 注解那种样子）。如果用 `create-react-app` 生成的项目，是不支持装饰器的，需要自己配置。\n\n代码中 `dispatch` 的 `{ type: \"INCREMENT\", payload: 1 }`，这个对象叫做 **action**，一般是含有 `type` 和 `payload`，当然你也可以不叫作 `payload`，不过 `type` 我没见过改名的。如果你看完整版的教程，会有专门的文件 `actions.js` 来负责生成 action，**我认为没必要**。同时，完整版把 `INCREMENT` 这些常量在定义一个专门的文件 `actionTypes.js` 中，**我一样认为没必要**。\n\n这个例子中，我把全局状态 `state` 通过 `mapStateToProps` 方法，改名叫做 `globalState` 放到了组件 `props` 里面。你可能看到这样的写法：\n\n```js\nconst mapStateToProps = state => {\n  return {\n    count: state.count\n  }\n}\n```\n\n直接把全局 `state.count` 映射到组件上（叫做`count`）\n\n我认为如果组件要用的全局状态太多，`mapStateToProps` 里这么写太费劲了，所以干脆直接透传了 `state`。之所以改名，我觉得使用 redux 不一定 100% 状态全部保存到全局状态上，组件内部自己也可以维护 `state`。\n\n至于 `mapDispatchToProps`，我认为一般不需要写，理由同上，如果用的 dispatch 太多，你得写多少啊。当然你愿意也可以写成：\n\n```js\nconst mapDispatchToProps = dispatch => {\n  return {\n    inc () { dispatch({ type: \"INCREMENT\", payload: 1 }) },\n    dec () { dispatch({ type: \"DECREMENT\", payload: 1 }) }\n  }\n}\n```\n\n组件内容可以写成:\n\n```js\nclass Counter extends React.PureComponent {\n  render () {\n    const { globalState, inc, dec } = this.props\n    return (\n      <div>\n        <p>COUNT:{globalState.count}</p>\n        <button onClick={inc}>\n          +1\n        </button>\n        <button onClick={dec}>\n          -1\n        </button>\n      </div>\n    )\n  }\n}\n```\n\n背着抱着一样沉。不写组件事件绑定里，就要在  `mapDispatchToProps`写好，然后通过 `props` 传入。反正我不推荐写 `mapDispatchToProps`。我在我司的业管平台中还看到异步写法，处理完毕之后要回调的，写到 `mapDispatchToProps` 会导致组件内不好获取回调。\n\n**需要知道的是，dispatch 是有返回值的，这个例子是同步函数，返回的是当前调用的 action。**同步情况用不到返回值，但是异步处理的话，这个就有作用了。\n\n#### reducer.js\n\n```jsx\nconst globalReducer = (state = { count: 10 }, action) => {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return { ...state, count: state.count + action.payload }\n    case \"DECREMENT\":\n      return { ...state, count: state.count - action.payload }\n    default:\n      return state\n  }\n}\nexport default globalReducer\n```\n\nreducer 是描述如何修改 `state` 的函数，不能有副作用。同时也必须是同步函数（不能是异步的）。**传入的全局状态，不可修改，必须重新返回的一个新对象。**\n\n第一个参数建议配置默认值。如果 `index.js` 中创建全局 store 没有配置，这里也没配置，会报错。\n\naction 就是 `Counter.js` 中 dispatch 的东西。可以任意定义传输内容。一般 `type` 字段表示调用 reducer 的名字，`payload` 来传输数据。当然也可以换成 `value` 等字段，或增加其他字段亦可以。\n\n--END--","source":"_posts/2019/2019-11-02-react-redux.md","raw":"---\nlayout: post\ntitle: Redux 学习 - react-redux\ndate: 2019-11-02 15:44:00 GMT+0800\ncategories: [前端]\ntags:  [react,redux]\n---\n\n感觉公司新项目要用到 redux 了，趁此机会好好学习下。react 用了这么久，redux 真的一点还不会。其实也是看过一点文章，但感觉他们的写法太复杂，把简单的写法弄复杂了。这次算是一个系列的文章，大概顺序是 redux、redux-saga、umijs（dva）架构写法。\n\n<!-- more -->\n\n## redux\n\n一般 react 项目，都是各个组件自己管理状态，如果遇到多个组件要通信，才会考虑 redux。\n\n确实大部分项目都用不到 redux。我认为需要用到 redux 主要有三点：\n\n* 项目有太多的状态需要管理\n* 开发人员太多导致状态混乱，难以管理\n* 组件需要较多的通信，或者存在嵌套太深\n\n使用 redux 后，数据流动发生了一些变化：\n\n1. 首先是组件的部分状态（或全部）要在全局状态来进行获取，这步需要通过 connect 方法来实现 HOC（高阶组件）。\n2. 其次组件需要修改共用的状态，需要通过 dispatch 方法派发一个 action，到 reducer 上，reducer 负责调整全局状态。\n\n下面，我力争用最简单的例子，并且尽量和后续文章内容写法上向后兼容。\n\n> 下文将不再特殊说明，redux 有时候特指 react-redux。\n\n## react-redux 上手\n\n最终的代码见 [github](https://github.com/yukapril/learning/tree/master/react-redux-lite)\n\n最基础的功能实现，只需要三个文件就可以了。分别是： \n* 入口文件 `index.js` \n* 迭代文件 `reducer.js`\n* 组件文件 `Counter.js`\n\n如果你看过完整版的 redux 入门，会多出一些文件，其实就是单独抽离出来而已。随着下文遇到的时候，我会做相应说明。\n\n我们来实现一个全局状态管理的支持加减的记录器。\n\n#### index.js\n\n```jsx\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Provider } from \"react-redux\"\nimport { createStore } from \"redux\"\nimport reducer from \"./reducer.js\"\nimport Counter from \"./Counter\"\n\nconst store = createStore(reducer)\n\nclass App extends React.PureComponent {\n  render () {\n    return (\n      <Provider store={store}>\n        <Counter />\n      </Provider>\n    )\n  }\n}\n\nconst rootElement = document.getElementById(\"root\")\nReactDOM.render(<App />, rootElement)\n```\n\n必须要先使用 `Provider` 组件整体包裹起来，组件来源于 `react-redux` 垫片库。这样子组件变成 HOC（高阶组件）后就可以拿到全局状态了。\n\n需要创建一个全局状态（`store`），使用 redux 原本的库的方法进行创建。\n\n> 经过研究，创建全局状态时候，一般不建议使用 `createStore` 的第二个参数配置 `初始 state`，而是在 reducer（迭代函数）中配置默认值。因为如果是只有一个 reducer，那么没啥问题。如果是多个 reducer 再进行合成，会有问题，我没有深入研究原因。\n\n\n#### Counter.js\n\n```js\nimport React from \"react\"\nimport { connect } from \"react-redux\"\n\nclass Counter extends React.PureComponent {\n  render () {\n    const { globalState, dispatch } = this.props\n    return (\n      <div>\n        <p>COUNT:{globalState.count}</p>\n        <button onClick={() => dispatch({ type: \"INCREMENT\", payload: 1 })}>\n          +1\n        </button>\n        <button onClick={() => dispatch({ type: \"DECREMENT\", payload: 1 })}>\n          -1\n        </button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({ globalState: state })\nexport default connect(mapStateToProps)(Counter)\n```\n\n**看似很简单的组件，其实涉及的点特别多。**\n\n组件想要获取全局状态，必须用 `connect` 连接包裹一下。\n\n`connect` 支持两个参数，分别是 `mapStateToProps` `mapDispatchToProps`。其中 `mapStateToProps` 必须实现，否则组件内部 `props` 拿不到 `state`；`mapDispatchToProps` 我觉得无所谓，因为组件内部 `props` 默认可以拿到 `dispatch` 方法。\n\n> `connect` 可以在文件后面用函数调用方式写，也可以用装饰器来写（就是 java 注解那种样子）。如果用 `create-react-app` 生成的项目，是不支持装饰器的，需要自己配置。\n\n代码中 `dispatch` 的 `{ type: \"INCREMENT\", payload: 1 }`，这个对象叫做 **action**，一般是含有 `type` 和 `payload`，当然你也可以不叫作 `payload`，不过 `type` 我没见过改名的。如果你看完整版的教程，会有专门的文件 `actions.js` 来负责生成 action，**我认为没必要**。同时，完整版把 `INCREMENT` 这些常量在定义一个专门的文件 `actionTypes.js` 中，**我一样认为没必要**。\n\n这个例子中，我把全局状态 `state` 通过 `mapStateToProps` 方法，改名叫做 `globalState` 放到了组件 `props` 里面。你可能看到这样的写法：\n\n```js\nconst mapStateToProps = state => {\n  return {\n    count: state.count\n  }\n}\n```\n\n直接把全局 `state.count` 映射到组件上（叫做`count`）\n\n我认为如果组件要用的全局状态太多，`mapStateToProps` 里这么写太费劲了，所以干脆直接透传了 `state`。之所以改名，我觉得使用 redux 不一定 100% 状态全部保存到全局状态上，组件内部自己也可以维护 `state`。\n\n至于 `mapDispatchToProps`，我认为一般不需要写，理由同上，如果用的 dispatch 太多，你得写多少啊。当然你愿意也可以写成：\n\n```js\nconst mapDispatchToProps = dispatch => {\n  return {\n    inc () { dispatch({ type: \"INCREMENT\", payload: 1 }) },\n    dec () { dispatch({ type: \"DECREMENT\", payload: 1 }) }\n  }\n}\n```\n\n组件内容可以写成:\n\n```js\nclass Counter extends React.PureComponent {\n  render () {\n    const { globalState, inc, dec } = this.props\n    return (\n      <div>\n        <p>COUNT:{globalState.count}</p>\n        <button onClick={inc}>\n          +1\n        </button>\n        <button onClick={dec}>\n          -1\n        </button>\n      </div>\n    )\n  }\n}\n```\n\n背着抱着一样沉。不写组件事件绑定里，就要在  `mapDispatchToProps`写好，然后通过 `props` 传入。反正我不推荐写 `mapDispatchToProps`。我在我司的业管平台中还看到异步写法，处理完毕之后要回调的，写到 `mapDispatchToProps` 会导致组件内不好获取回调。\n\n**需要知道的是，dispatch 是有返回值的，这个例子是同步函数，返回的是当前调用的 action。**同步情况用不到返回值，但是异步处理的话，这个就有作用了。\n\n#### reducer.js\n\n```jsx\nconst globalReducer = (state = { count: 10 }, action) => {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return { ...state, count: state.count + action.payload }\n    case \"DECREMENT\":\n      return { ...state, count: state.count - action.payload }\n    default:\n      return state\n  }\n}\nexport default globalReducer\n```\n\nreducer 是描述如何修改 `state` 的函数，不能有副作用。同时也必须是同步函数（不能是异步的）。**传入的全局状态，不可修改，必须重新返回的一个新对象。**\n\n第一个参数建议配置默认值。如果 `index.js` 中创建全局 store 没有配置，这里也没配置，会报错。\n\naction 就是 `Counter.js` 中 dispatch 的东西。可以任意定义传输内容。一般 `type` 字段表示调用 reducer 的名字，`payload` 来传输数据。当然也可以换成 `value` 等字段，或增加其他字段亦可以。\n\n--END--","slug":"2019-2019-11-02-react-redux","published":1,"updated":"2020-03-02T07:16:34.762Z","comments":1,"photos":[],"link":"","_id":"cka5ik8di0078nybgfv41gov1","content":"<p>感觉公司新项目要用到 redux 了，趁此机会好好学习下。react 用了这么久，redux 真的一点还不会。其实也是看过一点文章，但感觉他们的写法太复杂，把简单的写法弄复杂了。这次算是一个系列的文章，大概顺序是 redux、redux-saga、umijs（dva）架构写法。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"redux\"><a href=\"#redux\" class=\"headerlink\" title=\"redux\"></a>redux</h2><p>一般 react 项目，都是各个组件自己管理状态，如果遇到多个组件要通信，才会考虑 redux。</p>\n<p>确实大部分项目都用不到 redux。我认为需要用到 redux 主要有三点：</p>\n<ul>\n<li>项目有太多的状态需要管理</li>\n<li>开发人员太多导致状态混乱，难以管理</li>\n<li>组件需要较多的通信，或者存在嵌套太深</li>\n</ul>\n<p>使用 redux 后，数据流动发生了一些变化：</p>\n<ol>\n<li>首先是组件的部分状态（或全部）要在全局状态来进行获取，这步需要通过 connect 方法来实现 HOC（高阶组件）。</li>\n<li>其次组件需要修改共用的状态，需要通过 dispatch 方法派发一个 action，到 reducer 上，reducer 负责调整全局状态。</li>\n</ol>\n<p>下面，我力争用最简单的例子，并且尽量和后续文章内容写法上向后兼容。</p>\n<blockquote>\n<p>下文将不再特殊说明，redux 有时候特指 react-redux。</p>\n</blockquote>\n<h2 id=\"react-redux-上手\"><a href=\"#react-redux-上手\" class=\"headerlink\" title=\"react-redux 上手\"></a>react-redux 上手</h2><p>最终的代码见 <a href=\"https://github.com/yukapril/learning/tree/master/react-redux-lite\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<p>最基础的功能实现，只需要三个文件就可以了。分别是： </p>\n<ul>\n<li>入口文件 <code>index.js</code> </li>\n<li>迭代文件 <code>reducer.js</code></li>\n<li>组件文件 <code>Counter.js</code></li>\n</ul>\n<p>如果你看过完整版的 redux 入门，会多出一些文件，其实就是单独抽离出来而已。随着下文遇到的时候，我会做相应说明。</p>\n<p>我们来实现一个全局状态管理的支持加减的记录器。</p>\n<h4 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a>index.js</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Provider &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-redux\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"redux\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> reducer <span class=\"keyword\">from</span> <span class=\"string\">\"./reducer.js\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Counter <span class=\"keyword\">from</span> <span class=\"string\">\"./Counter\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(reducer)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">        &lt;Counter /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Provider&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const rootElement = document.getElementById(\"root\")</span></span><br><span class=\"line\"><span class=\"regexp\">ReactDOM.render(&lt;App /</span>&gt;, rootElement)</span><br></pre></td></tr></table></figure>\n\n<p>必须要先使用 <code>Provider</code> 组件整体包裹起来，组件来源于 <code>react-redux</code> 垫片库。这样子组件变成 HOC（高阶组件）后就可以拿到全局状态了。</p>\n<p>需要创建一个全局状态（<code>store</code>），使用 redux 原本的库的方法进行创建。</p>\n<blockquote>\n<p>经过研究，创建全局状态时候，一般不建议使用 <code>createStore</code> 的第二个参数配置 <code>初始 state</code>，而是在 reducer（迭代函数）中配置默认值。因为如果是只有一个 reducer，那么没啥问题。如果是多个 reducer 再进行合成，会有问题，我没有深入研究原因。</p>\n</blockquote>\n<h4 id=\"Counter-js\"><a href=\"#Counter-js\" class=\"headerlink\" title=\"Counter.js\"></a>Counter.js</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-redux\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; globalState, dispatch &#125; = <span class=\"keyword\">this</span>.props</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;p&gt;COUNT:&#123;globalState.count&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: \"INCREMENT\", payload: 1 &#125;)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          +1</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>button&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"DECREMENT\"</span>, <span class=\"attr\">payload</span>: <span class=\"number\">1</span> &#125;)&#125;&gt;</span><br><span class=\"line\">          <span class=\"number\">-1</span></span><br><span class=\"line\">        &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mapStateToProps = <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> (&#123; <span class=\"attr\">globalState</span>: state &#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(mapStateToProps)(Counter)</span><br></pre></td></tr></table></figure>\n\n<p><strong>看似很简单的组件，其实涉及的点特别多。</strong></p>\n<p>组件想要获取全局状态，必须用 <code>connect</code> 连接包裹一下。</p>\n<p><code>connect</code> 支持两个参数，分别是 <code>mapStateToProps</code> <code>mapDispatchToProps</code>。其中 <code>mapStateToProps</code> 必须实现，否则组件内部 <code>props</code> 拿不到 <code>state</code>；<code>mapDispatchToProps</code> 我觉得无所谓，因为组件内部 <code>props</code> 默认可以拿到 <code>dispatch</code> 方法。</p>\n<blockquote>\n<p><code>connect</code> 可以在文件后面用函数调用方式写，也可以用装饰器来写（就是 java 注解那种样子）。如果用 <code>create-react-app</code> 生成的项目，是不支持装饰器的，需要自己配置。</p>\n</blockquote>\n<p>代码中 <code>dispatch</code> 的 <code>{ type: &quot;INCREMENT&quot;, payload: 1 }</code>，这个对象叫做 <strong>action</strong>，一般是含有 <code>type</code> 和 <code>payload</code>，当然你也可以不叫作 <code>payload</code>，不过 <code>type</code> 我没见过改名的。如果你看完整版的教程，会有专门的文件 <code>actions.js</code> 来负责生成 action，<strong>我认为没必要</strong>。同时，完整版把 <code>INCREMENT</code> 这些常量在定义一个专门的文件 <code>actionTypes.js</code> 中，<strong>我一样认为没必要</strong>。</p>\n<p>这个例子中，我把全局状态 <code>state</code> 通过 <code>mapStateToProps</code> 方法，改名叫做 <code>globalState</code> 放到了组件 <code>props</code> 里面。你可能看到这样的写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mapStateToProps = <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    count: state.count</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>直接把全局 <code>state.count</code> 映射到组件上（叫做<code>count</code>）</p>\n<p>我认为如果组件要用的全局状态太多，<code>mapStateToProps</code> 里这么写太费劲了，所以干脆直接透传了 <code>state</code>。之所以改名，我觉得使用 redux 不一定 100% 状态全部保存到全局状态上，组件内部自己也可以维护 <code>state</code>。</p>\n<p>至于 <code>mapDispatchToProps</code>，我认为一般不需要写，理由同上，如果用的 dispatch 太多，你得写多少啊。当然你愿意也可以写成：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mapDispatchToProps = <span class=\"function\"><span class=\"params\">dispatch</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    inc () &#123; dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"INCREMENT\"</span>, <span class=\"attr\">payload</span>: <span class=\"number\">1</span> &#125;) &#125;,</span><br><span class=\"line\">    dec () &#123; dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"DECREMENT\"</span>, <span class=\"attr\">payload</span>: <span class=\"number\">1</span> &#125;) &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>组件内容可以写成:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; globalState, inc, dec &#125; = <span class=\"keyword\">this</span>.props</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;p&gt;COUNT:&#123;globalState.count&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;button onClick=&#123;inc&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          +1</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>button&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;dec&#125;&gt;</span><br><span class=\"line\">          <span class=\"number\">-1</span></span><br><span class=\"line\">        &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>背着抱着一样沉。不写组件事件绑定里，就要在  <code>mapDispatchToProps</code>写好，然后通过 <code>props</code> 传入。反正我不推荐写 <code>mapDispatchToProps</code>。我在我司的业管平台中还看到异步写法，处理完毕之后要回调的，写到 <code>mapDispatchToProps</code> 会导致组件内不好获取回调。</p>\n<p><strong>需要知道的是，dispatch 是有返回值的，这个例子是同步函数，返回的是当前调用的 action。</strong>同步情况用不到返回值，但是异步处理的话，这个就有作用了。</p>\n<h4 id=\"reducer-js\"><a href=\"#reducer-js\" class=\"headerlink\" title=\"reducer.js\"></a>reducer.js</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> globalReducer = <span class=\"function\">(<span class=\"params\">state = &#123; count: <span class=\"number\">10</span> &#125;, action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"INCREMENT\"</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">count</span>: state.count + action.payload &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"DECREMENT\"</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">count</span>: state.count - action.payload &#125;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> globalReducer</span><br></pre></td></tr></table></figure>\n\n<p>reducer 是描述如何修改 <code>state</code> 的函数，不能有副作用。同时也必须是同步函数（不能是异步的）。<strong>传入的全局状态，不可修改，必须重新返回的一个新对象。</strong></p>\n<p>第一个参数建议配置默认值。如果 <code>index.js</code> 中创建全局 store 没有配置，这里也没配置，会报错。</p>\n<p>action 就是 <code>Counter.js</code> 中 dispatch 的东西。可以任意定义传输内容。一般 <code>type</code> 字段表示调用 reducer 的名字，<code>payload</code> 来传输数据。当然也可以换成 <code>value</code> 等字段，或增加其他字段亦可以。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>感觉公司新项目要用到 redux 了，趁此机会好好学习下。react 用了这么久，redux 真的一点还不会。其实也是看过一点文章，但感觉他们的写法太复杂，把简单的写法弄复杂了。这次算是一个系列的文章，大概顺序是 redux、redux-saga、umijs（dva）架构写法。</p>","more":"<h2 id=\"redux\"><a href=\"#redux\" class=\"headerlink\" title=\"redux\"></a>redux</h2><p>一般 react 项目，都是各个组件自己管理状态，如果遇到多个组件要通信，才会考虑 redux。</p>\n<p>确实大部分项目都用不到 redux。我认为需要用到 redux 主要有三点：</p>\n<ul>\n<li>项目有太多的状态需要管理</li>\n<li>开发人员太多导致状态混乱，难以管理</li>\n<li>组件需要较多的通信，或者存在嵌套太深</li>\n</ul>\n<p>使用 redux 后，数据流动发生了一些变化：</p>\n<ol>\n<li>首先是组件的部分状态（或全部）要在全局状态来进行获取，这步需要通过 connect 方法来实现 HOC（高阶组件）。</li>\n<li>其次组件需要修改共用的状态，需要通过 dispatch 方法派发一个 action，到 reducer 上，reducer 负责调整全局状态。</li>\n</ol>\n<p>下面，我力争用最简单的例子，并且尽量和后续文章内容写法上向后兼容。</p>\n<blockquote>\n<p>下文将不再特殊说明，redux 有时候特指 react-redux。</p>\n</blockquote>\n<h2 id=\"react-redux-上手\"><a href=\"#react-redux-上手\" class=\"headerlink\" title=\"react-redux 上手\"></a>react-redux 上手</h2><p>最终的代码见 <a href=\"https://github.com/yukapril/learning/tree/master/react-redux-lite\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<p>最基础的功能实现，只需要三个文件就可以了。分别是： </p>\n<ul>\n<li>入口文件 <code>index.js</code> </li>\n<li>迭代文件 <code>reducer.js</code></li>\n<li>组件文件 <code>Counter.js</code></li>\n</ul>\n<p>如果你看过完整版的 redux 入门，会多出一些文件，其实就是单独抽离出来而已。随着下文遇到的时候，我会做相应说明。</p>\n<p>我们来实现一个全局状态管理的支持加减的记录器。</p>\n<h4 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a>index.js</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Provider &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-redux\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"redux\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> reducer <span class=\"keyword\">from</span> <span class=\"string\">\"./reducer.js\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Counter <span class=\"keyword\">from</span> <span class=\"string\">\"./Counter\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(reducer)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">        &lt;Counter /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Provider&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const rootElement = document.getElementById(\"root\")</span></span><br><span class=\"line\"><span class=\"regexp\">ReactDOM.render(&lt;App /</span>&gt;, rootElement)</span><br></pre></td></tr></table></figure>\n\n<p>必须要先使用 <code>Provider</code> 组件整体包裹起来，组件来源于 <code>react-redux</code> 垫片库。这样子组件变成 HOC（高阶组件）后就可以拿到全局状态了。</p>\n<p>需要创建一个全局状态（<code>store</code>），使用 redux 原本的库的方法进行创建。</p>\n<blockquote>\n<p>经过研究，创建全局状态时候，一般不建议使用 <code>createStore</code> 的第二个参数配置 <code>初始 state</code>，而是在 reducer（迭代函数）中配置默认值。因为如果是只有一个 reducer，那么没啥问题。如果是多个 reducer 再进行合成，会有问题，我没有深入研究原因。</p>\n</blockquote>\n<h4 id=\"Counter-js\"><a href=\"#Counter-js\" class=\"headerlink\" title=\"Counter.js\"></a>Counter.js</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-redux\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; globalState, dispatch &#125; = <span class=\"keyword\">this</span>.props</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;p&gt;COUNT:&#123;globalState.count&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: \"INCREMENT\", payload: 1 &#125;)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          +1</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>button&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"DECREMENT\"</span>, <span class=\"attr\">payload</span>: <span class=\"number\">1</span> &#125;)&#125;&gt;</span><br><span class=\"line\">          <span class=\"number\">-1</span></span><br><span class=\"line\">        &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mapStateToProps = <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> (&#123; <span class=\"attr\">globalState</span>: state &#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(mapStateToProps)(Counter)</span><br></pre></td></tr></table></figure>\n\n<p><strong>看似很简单的组件，其实涉及的点特别多。</strong></p>\n<p>组件想要获取全局状态，必须用 <code>connect</code> 连接包裹一下。</p>\n<p><code>connect</code> 支持两个参数，分别是 <code>mapStateToProps</code> <code>mapDispatchToProps</code>。其中 <code>mapStateToProps</code> 必须实现，否则组件内部 <code>props</code> 拿不到 <code>state</code>；<code>mapDispatchToProps</code> 我觉得无所谓，因为组件内部 <code>props</code> 默认可以拿到 <code>dispatch</code> 方法。</p>\n<blockquote>\n<p><code>connect</code> 可以在文件后面用函数调用方式写，也可以用装饰器来写（就是 java 注解那种样子）。如果用 <code>create-react-app</code> 生成的项目，是不支持装饰器的，需要自己配置。</p>\n</blockquote>\n<p>代码中 <code>dispatch</code> 的 <code>{ type: &quot;INCREMENT&quot;, payload: 1 }</code>，这个对象叫做 <strong>action</strong>，一般是含有 <code>type</code> 和 <code>payload</code>，当然你也可以不叫作 <code>payload</code>，不过 <code>type</code> 我没见过改名的。如果你看完整版的教程，会有专门的文件 <code>actions.js</code> 来负责生成 action，<strong>我认为没必要</strong>。同时，完整版把 <code>INCREMENT</code> 这些常量在定义一个专门的文件 <code>actionTypes.js</code> 中，<strong>我一样认为没必要</strong>。</p>\n<p>这个例子中，我把全局状态 <code>state</code> 通过 <code>mapStateToProps</code> 方法，改名叫做 <code>globalState</code> 放到了组件 <code>props</code> 里面。你可能看到这样的写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mapStateToProps = <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    count: state.count</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>直接把全局 <code>state.count</code> 映射到组件上（叫做<code>count</code>）</p>\n<p>我认为如果组件要用的全局状态太多，<code>mapStateToProps</code> 里这么写太费劲了，所以干脆直接透传了 <code>state</code>。之所以改名，我觉得使用 redux 不一定 100% 状态全部保存到全局状态上，组件内部自己也可以维护 <code>state</code>。</p>\n<p>至于 <code>mapDispatchToProps</code>，我认为一般不需要写，理由同上，如果用的 dispatch 太多，你得写多少啊。当然你愿意也可以写成：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mapDispatchToProps = <span class=\"function\"><span class=\"params\">dispatch</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    inc () &#123; dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"INCREMENT\"</span>, <span class=\"attr\">payload</span>: <span class=\"number\">1</span> &#125;) &#125;,</span><br><span class=\"line\">    dec () &#123; dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"DECREMENT\"</span>, <span class=\"attr\">payload</span>: <span class=\"number\">1</span> &#125;) &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>组件内容可以写成:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; globalState, inc, dec &#125; = <span class=\"keyword\">this</span>.props</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;p&gt;COUNT:&#123;globalState.count&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;button onClick=&#123;inc&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          +1</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>button&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;dec&#125;&gt;</span><br><span class=\"line\">          <span class=\"number\">-1</span></span><br><span class=\"line\">        &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>背着抱着一样沉。不写组件事件绑定里，就要在  <code>mapDispatchToProps</code>写好，然后通过 <code>props</code> 传入。反正我不推荐写 <code>mapDispatchToProps</code>。我在我司的业管平台中还看到异步写法，处理完毕之后要回调的，写到 <code>mapDispatchToProps</code> 会导致组件内不好获取回调。</p>\n<p><strong>需要知道的是，dispatch 是有返回值的，这个例子是同步函数，返回的是当前调用的 action。</strong>同步情况用不到返回值，但是异步处理的话，这个就有作用了。</p>\n<h4 id=\"reducer-js\"><a href=\"#reducer-js\" class=\"headerlink\" title=\"reducer.js\"></a>reducer.js</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> globalReducer = <span class=\"function\">(<span class=\"params\">state = &#123; count: <span class=\"number\">10</span> &#125;, action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"INCREMENT\"</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">count</span>: state.count + action.payload &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"DECREMENT\"</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, <span class=\"attr\">count</span>: state.count - action.payload &#125;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> globalReducer</span><br></pre></td></tr></table></figure>\n\n<p>reducer 是描述如何修改 <code>state</code> 的函数，不能有副作用。同时也必须是同步函数（不能是异步的）。<strong>传入的全局状态，不可修改，必须重新返回的一个新对象。</strong></p>\n<p>第一个参数建议配置默认值。如果 <code>index.js</code> 中创建全局 store 没有配置，这里也没配置，会报错。</p>\n<p>action 就是 <code>Counter.js</code> 中 dispatch 的东西。可以任意定义传输内容。一般 <code>type</code> 字段表示调用 reducer 的名字，<code>payload</code> 来传输数据。当然也可以换成 <code>value</code> 等字段，或增加其他字段亦可以。</p>\n<p>–END–</p>"},{"layout":"post","title":"Redux 学习 - react-saga","date":"2019-11-03T14:18:00.000Z","_content":"\n上两篇文章主要说了 redux 的用法。redux 中 reducer 只能处理同步的状态更新，那如果是有异步或者副作用呢，这时候我们就必须对 redux 使用中间件处理了。\n\n<!-- more -->\n\nredux 本身支持中间件，异步的方案都是通过中间件进行控制的。\n\n在标准 redux 中，要想修改全局状态，组件需要 dispatch 一个 action 到 reducer 上，reducer 同步修改 state。\n\nreducer 是负责同步修改 state，这个逻辑不会改变。\n\n一般的思路是，监听（拦截）dispatch 的 action，如果发现是一个异步 action，就不执行 reducer（或者走到了 reducer 的 default 默认返回逻辑里）。此时执行异步逻辑，完毕后，再 dispatch 一个同步的 action。\n\n处理这类异步或者副作用问题，常见的解决方案有 `redux-thunk` `redux-promise` `redux-saga` 等，其中 `redux-saga` 我认为算是比较优雅的实现，唯独就是初次理解上有些难度。\n\n我们继续用最早的 redux 的例子，改装一下，实现 saga 的异步处理。\n\n完整代码可以参考 [github](https://github.com/yukapril/learning/tree/master/react-redux-saga)\n\n#### index.js\n\n```jsx\n  import React from \"react\"\n  import ReactDOM from \"react-dom\"\n  import { Provider } from \"react-redux\"\n- import { createStore } from \"redux\"\n+ import { createStore, applyMiddleware } from \"redux\"\n+ import createSagaMiddleware from \"redux-saga\"\n+ import saga from \"./sagas\"\n  import reducer from \"./reducer.js\"\n  import Counter from \"./Counter\"\n\n+ const sagaMiddleware = createSagaMiddleware()\n- const store = createStore(reducer)\n+ const store = createStore(reducer, applyMiddleware(sagaMiddleware))\n+ sagaMiddleware.run(saga)\n\n  class App extends React.PureComponent {\n    render () {\n      return (\n        <Provider store={store}>\n          <Counter />\n        </Provider>\n      )\n    }\n  }\n\n  const rootElement = document.getElementById(\"root\")\n  ReactDOM.render(<App />, rootElement)\n```\n\n修改 store 的创建方式，增加 saga 的中间件。\n\n这里要注意写法： \n\n```js\n// 这样写是不可以的\nconst sagaMiddleware = createSagaMiddleware(saga)\n\n// 必须写成 run 的形式\nconst sagaMiddleware = createSagaMiddleware()\nconst store = createStore(reducer, applyMiddleware(sagaMiddleware))\nsagaMiddleware.run(saga) // run 必须写到 createStore 之后，否则报错\n```\n\n这样调整后，我们就可以直接在组件内 dispatch 异步 action 了，并在 `sagas.js` 中进行监听。\n\n#### Counter.js\n\n```jsx\n  import React from \"react\"\n  import { connect } from \"react-redux\"\n\n  class Counter extends React.PureComponent {\n    render () {\n      const { globalState, dispatch } = this.props\n      return (\n        <div>\n          <p>COUNT:{globalState.count}</p>\n          <button onClick={() => dispatch({ type: \"INCREMENT\", payload: 1 })}>\n            +1\n          </button>\n          <button onClick={() => dispatch({ type: \"DECREMENT\", payload: 1 })}>\n            -1\n          </button>\n+         <button onClick={() => dispatch({ type: \"INCREMENT_ASYNC\", payload: 2 })}>\n+           +2 async takeEvery\n+         </button>\n+         <button onClick={() => dispatch({ type: \"DECREMENT_ASYNC\", payload: 2 })}>\n+           -2 async takeLatest\n+         </button>\n        </div>\n      )\n    }\n  }\n\n  const mapStateToProps = state => ({ globalState: state })\n  export default connect(mapStateToProps)(Counter)\n```\n\n组件内增加两个异步的调用按钮。调用类型分别是 `INCREMENT_ASYNC` `DECREMENT_ASYNC`。\n\n其他不要任何修改。\n\n#### sagas.js\n\n```js\nimport { put, all, takeEvery, takeLatest, delay } from \"redux-saga/effects\"\n\nfunction* incrementAsync (action) {\n  yield delay(1000)\n  yield put({ type: \"INCREMENT\", payload: action.payload })\n}\nfunction* decrementAsync (action) {\n  yield delay(1000)\n  yield put({ type: \"DECREMENT\", payload: action.payload })\n}\n\nfunction* watchIncrementAsync () {\n  yield takeEvery(\"INCREMENT_ASYNC\", incrementAsync)\n}\nfunction* watchDecrementAsync () {\n  yield takeLatest(\"DECREMENT_ASYNC\", decrementAsync)\n}\n\nfunction* saga () {\n  yield all([watchIncrementAsync(), watchDecrementAsync()])\n}\n\nexport default saga\n```\n\n`sagas.js` 是全新添加的文件。\n\n这里添加了两个监听函数 `watchIncrementAsync` `watchDecrementAsync`，就是监听 dispatch 的内容，一旦命中监听函数，那么就执行对应的异步操作，分别是 `incrementAsync` `decrementAsync`。\n\n异步操作函数 `incrementAsync` `decrementAsync`，为了模拟，使用的 delay 函数，这里可以换成 fetch 等函数。等异步操作完毕后，重新触发同步 action 即可。\n\n最后导出我们的监听函数，正常的项目不可能只有一个异步监听函数，所以我们需要合并后导出。\n\n有可能这种写法更常见：\n\n```js\nyield all([call(watchIncrementAsync), call(watchDecrementAsync)])\n```\n\n用 call 辅助函数代替直接使用括号运行，此外我还不知道用 call 函数有什么特殊用途或区别。\n\n这个文件导入了很多辅助函数，下面列出一些说明。具体内容参考[官方文档](https://redux-saga.js.org/docs/api/)：\n\n| 辅助函数 | 用途 |\n|---|---|\n| all | 合并多个异步监听函数使用 |\n| takeEvery | 监听函数使用，起到如何监听异步事件。表示每次都监听到，依次执行  |\n| takeLatest | 监听函数使用，起到如何监听异步事件。表示仅执行最后一次操作 |\n| put | 相当于 dispatch，触发 action 使用 |\n| delay | 延时使用，真实项目一般项目用不到 |\n\n> 最后，你感兴趣的话，可以在 `reducer.js` 文件中加入日志，就会发现 dispatch 异步 action 也会调用 reducer，只不过没有命中任何条件。在执行异步任务之后，还会 dispatch 一个同步 action，此时 reducer 再次执行一次。\n\n--END--","source":"_posts/2019/2019-11-03-react-redux-saga.md","raw":"---\nlayout: post\ntitle: Redux 学习 - react-saga\ndate: 2019-11-03 14:18:00 GMT+0800\ncategories: [前端]\ntags:  [react,redux,saga]\n---\n\n上两篇文章主要说了 redux 的用法。redux 中 reducer 只能处理同步的状态更新，那如果是有异步或者副作用呢，这时候我们就必须对 redux 使用中间件处理了。\n\n<!-- more -->\n\nredux 本身支持中间件，异步的方案都是通过中间件进行控制的。\n\n在标准 redux 中，要想修改全局状态，组件需要 dispatch 一个 action 到 reducer 上，reducer 同步修改 state。\n\nreducer 是负责同步修改 state，这个逻辑不会改变。\n\n一般的思路是，监听（拦截）dispatch 的 action，如果发现是一个异步 action，就不执行 reducer（或者走到了 reducer 的 default 默认返回逻辑里）。此时执行异步逻辑，完毕后，再 dispatch 一个同步的 action。\n\n处理这类异步或者副作用问题，常见的解决方案有 `redux-thunk` `redux-promise` `redux-saga` 等，其中 `redux-saga` 我认为算是比较优雅的实现，唯独就是初次理解上有些难度。\n\n我们继续用最早的 redux 的例子，改装一下，实现 saga 的异步处理。\n\n完整代码可以参考 [github](https://github.com/yukapril/learning/tree/master/react-redux-saga)\n\n#### index.js\n\n```jsx\n  import React from \"react\"\n  import ReactDOM from \"react-dom\"\n  import { Provider } from \"react-redux\"\n- import { createStore } from \"redux\"\n+ import { createStore, applyMiddleware } from \"redux\"\n+ import createSagaMiddleware from \"redux-saga\"\n+ import saga from \"./sagas\"\n  import reducer from \"./reducer.js\"\n  import Counter from \"./Counter\"\n\n+ const sagaMiddleware = createSagaMiddleware()\n- const store = createStore(reducer)\n+ const store = createStore(reducer, applyMiddleware(sagaMiddleware))\n+ sagaMiddleware.run(saga)\n\n  class App extends React.PureComponent {\n    render () {\n      return (\n        <Provider store={store}>\n          <Counter />\n        </Provider>\n      )\n    }\n  }\n\n  const rootElement = document.getElementById(\"root\")\n  ReactDOM.render(<App />, rootElement)\n```\n\n修改 store 的创建方式，增加 saga 的中间件。\n\n这里要注意写法： \n\n```js\n// 这样写是不可以的\nconst sagaMiddleware = createSagaMiddleware(saga)\n\n// 必须写成 run 的形式\nconst sagaMiddleware = createSagaMiddleware()\nconst store = createStore(reducer, applyMiddleware(sagaMiddleware))\nsagaMiddleware.run(saga) // run 必须写到 createStore 之后，否则报错\n```\n\n这样调整后，我们就可以直接在组件内 dispatch 异步 action 了，并在 `sagas.js` 中进行监听。\n\n#### Counter.js\n\n```jsx\n  import React from \"react\"\n  import { connect } from \"react-redux\"\n\n  class Counter extends React.PureComponent {\n    render () {\n      const { globalState, dispatch } = this.props\n      return (\n        <div>\n          <p>COUNT:{globalState.count}</p>\n          <button onClick={() => dispatch({ type: \"INCREMENT\", payload: 1 })}>\n            +1\n          </button>\n          <button onClick={() => dispatch({ type: \"DECREMENT\", payload: 1 })}>\n            -1\n          </button>\n+         <button onClick={() => dispatch({ type: \"INCREMENT_ASYNC\", payload: 2 })}>\n+           +2 async takeEvery\n+         </button>\n+         <button onClick={() => dispatch({ type: \"DECREMENT_ASYNC\", payload: 2 })}>\n+           -2 async takeLatest\n+         </button>\n        </div>\n      )\n    }\n  }\n\n  const mapStateToProps = state => ({ globalState: state })\n  export default connect(mapStateToProps)(Counter)\n```\n\n组件内增加两个异步的调用按钮。调用类型分别是 `INCREMENT_ASYNC` `DECREMENT_ASYNC`。\n\n其他不要任何修改。\n\n#### sagas.js\n\n```js\nimport { put, all, takeEvery, takeLatest, delay } from \"redux-saga/effects\"\n\nfunction* incrementAsync (action) {\n  yield delay(1000)\n  yield put({ type: \"INCREMENT\", payload: action.payload })\n}\nfunction* decrementAsync (action) {\n  yield delay(1000)\n  yield put({ type: \"DECREMENT\", payload: action.payload })\n}\n\nfunction* watchIncrementAsync () {\n  yield takeEvery(\"INCREMENT_ASYNC\", incrementAsync)\n}\nfunction* watchDecrementAsync () {\n  yield takeLatest(\"DECREMENT_ASYNC\", decrementAsync)\n}\n\nfunction* saga () {\n  yield all([watchIncrementAsync(), watchDecrementAsync()])\n}\n\nexport default saga\n```\n\n`sagas.js` 是全新添加的文件。\n\n这里添加了两个监听函数 `watchIncrementAsync` `watchDecrementAsync`，就是监听 dispatch 的内容，一旦命中监听函数，那么就执行对应的异步操作，分别是 `incrementAsync` `decrementAsync`。\n\n异步操作函数 `incrementAsync` `decrementAsync`，为了模拟，使用的 delay 函数，这里可以换成 fetch 等函数。等异步操作完毕后，重新触发同步 action 即可。\n\n最后导出我们的监听函数，正常的项目不可能只有一个异步监听函数，所以我们需要合并后导出。\n\n有可能这种写法更常见：\n\n```js\nyield all([call(watchIncrementAsync), call(watchDecrementAsync)])\n```\n\n用 call 辅助函数代替直接使用括号运行，此外我还不知道用 call 函数有什么特殊用途或区别。\n\n这个文件导入了很多辅助函数，下面列出一些说明。具体内容参考[官方文档](https://redux-saga.js.org/docs/api/)：\n\n| 辅助函数 | 用途 |\n|---|---|\n| all | 合并多个异步监听函数使用 |\n| takeEvery | 监听函数使用，起到如何监听异步事件。表示每次都监听到，依次执行  |\n| takeLatest | 监听函数使用，起到如何监听异步事件。表示仅执行最后一次操作 |\n| put | 相当于 dispatch，触发 action 使用 |\n| delay | 延时使用，真实项目一般项目用不到 |\n\n> 最后，你感兴趣的话，可以在 `reducer.js` 文件中加入日志，就会发现 dispatch 异步 action 也会调用 reducer，只不过没有命中任何条件。在执行异步任务之后，还会 dispatch 一个同步 action，此时 reducer 再次执行一次。\n\n--END--","slug":"2019-2019-11-03-react-redux-saga","published":1,"updated":"2020-03-02T07:16:34.763Z","comments":1,"photos":[],"link":"","_id":"cka5ik8dl007anybg4iawevpm","content":"<p>上两篇文章主要说了 redux 的用法。redux 中 reducer 只能处理同步的状态更新，那如果是有异步或者副作用呢，这时候我们就必须对 redux 使用中间件处理了。</p>\n<a id=\"more\"></a>\n\n<p>redux 本身支持中间件，异步的方案都是通过中间件进行控制的。</p>\n<p>在标准 redux 中，要想修改全局状态，组件需要 dispatch 一个 action 到 reducer 上，reducer 同步修改 state。</p>\n<p>reducer 是负责同步修改 state，这个逻辑不会改变。</p>\n<p>一般的思路是，监听（拦截）dispatch 的 action，如果发现是一个异步 action，就不执行 reducer（或者走到了 reducer 的 default 默认返回逻辑里）。此时执行异步逻辑，完毕后，再 dispatch 一个同步的 action。</p>\n<p>处理这类异步或者副作用问题，常见的解决方案有 <code>redux-thunk</code> <code>redux-promise</code> <code>redux-saga</code> 等，其中 <code>redux-saga</code> 我认为算是比较优雅的实现，唯独就是初次理解上有些难度。</p>\n<p>我们继续用最早的 redux 的例子，改装一下，实现 saga 的异步处理。</p>\n<p>完整代码可以参考 <a href=\"https://github.com/yukapril/learning/tree/master/react-redux-saga\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<h4 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a>index.js</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span></span><br><span class=\"line\">  <span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span></span><br><span class=\"line\">  <span class=\"keyword\">import</span> &#123; Provider &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-redux\"</span></span><br><span class=\"line\">- <span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"redux\"</span></span><br><span class=\"line\">+ <span class=\"keyword\">import</span> &#123; createStore, applyMiddleware &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"redux\"</span></span><br><span class=\"line\">+ <span class=\"keyword\">import</span> createSagaMiddleware <span class=\"keyword\">from</span> <span class=\"string\">\"redux-saga\"</span></span><br><span class=\"line\">+ <span class=\"keyword\">import</span> saga <span class=\"keyword\">from</span> <span class=\"string\">\"./sagas\"</span></span><br><span class=\"line\">  <span class=\"keyword\">import</span> reducer <span class=\"keyword\">from</span> <span class=\"string\">\"./reducer.js\"</span></span><br><span class=\"line\">  <span class=\"keyword\">import</span> Counter <span class=\"keyword\">from</span> <span class=\"string\">\"./Counter\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">+ <span class=\"keyword\">const</span> sagaMiddleware = createSagaMiddleware()</span><br><span class=\"line\">- <span class=\"keyword\">const</span> store = createStore(reducer)</span><br><span class=\"line\">+ <span class=\"keyword\">const</span> store = createStore(reducer, applyMiddleware(sagaMiddleware))</span><br><span class=\"line\">+ sagaMiddleware.run(saga)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">    render () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">          &lt;Counter /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/Provider&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      )</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  const rootElement = document.getElementById(\"root\")</span></span><br><span class=\"line\"><span class=\"regexp\">  ReactDOM.render(&lt;App /</span>&gt;, rootElement)</span><br></pre></td></tr></table></figure>\n\n<p>修改 store 的创建方式，增加 saga 的中间件。</p>\n<p>这里要注意写法： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这样写是不可以的</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sagaMiddleware = createSagaMiddleware(saga)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 必须写成 run 的形式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sagaMiddleware = createSagaMiddleware()</span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(reducer, applyMiddleware(sagaMiddleware))</span><br><span class=\"line\">sagaMiddleware.run(saga) <span class=\"comment\">// run 必须写到 createStore 之后，否则报错</span></span><br></pre></td></tr></table></figure>\n\n<p>这样调整后，我们就可以直接在组件内 dispatch 异步 action 了，并在 <code>sagas.js</code> 中进行监听。</p>\n<h4 id=\"Counter-js\"><a href=\"#Counter-js\" class=\"headerlink\" title=\"Counter.js\"></a>Counter.js</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span></span><br><span class=\"line\">  <span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-redux\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">    render () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; globalState, dispatch &#125; = <span class=\"keyword\">this</span>.props</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;p&gt;COUNT:&#123;globalState.count&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: \"INCREMENT\", payload: 1 &#125;)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            +1</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>button&gt;</span><br><span class=\"line\">          &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"DECREMENT\"</span>, <span class=\"attr\">payload</span>: <span class=\"number\">1</span> &#125;)&#125;&gt;</span><br><span class=\"line\">            <span class=\"number\">-1</span></span><br><span class=\"line\">          &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">+         &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: \"INCREMENT_ASYNC\", payload: 2 &#125;)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">+           +2 async takeEvery</span></span><br><span class=\"line\"><span class=\"regexp\">+         &lt;/</span>button&gt;</span><br><span class=\"line\">+         <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> dispatch(&#123; type: \"DECREMENT_ASYNC\", payload: 2 &#125;)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"xml\">+           -2 async takeLatest</span></span><br><span class=\"line\"><span class=\"xml\">+         <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      )</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  const mapStateToProps = state =&gt; (&#123; globalState: state &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">  export default connect(mapStateToProps)(Counter)</span></span><br></pre></td></tr></table></figure>\n\n<p>组件内增加两个异步的调用按钮。调用类型分别是 <code>INCREMENT_ASYNC</code> <code>DECREMENT_ASYNC</code>。</p>\n<p>其他不要任何修改。</p>\n<h4 id=\"sagas-js\"><a href=\"#sagas-js\" class=\"headerlink\" title=\"sagas.js\"></a>sagas.js</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; put, all, takeEvery, takeLatest, delay &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"redux-saga/effects\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">incrementAsync</span> (<span class=\"params\">action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"INCREMENT\"</span>, <span class=\"attr\">payload</span>: action.payload &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">decrementAsync</span> (<span class=\"params\">action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"DECREMENT\"</span>, <span class=\"attr\">payload</span>: action.payload &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">watchIncrementAsync</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> takeEvery(<span class=\"string\">\"INCREMENT_ASYNC\"</span>, incrementAsync)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">watchDecrementAsync</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> takeLatest(<span class=\"string\">\"DECREMENT_ASYNC\"</span>, decrementAsync)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">saga</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> all([watchIncrementAsync(), watchDecrementAsync()])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> saga</span><br></pre></td></tr></table></figure>\n\n<p><code>sagas.js</code> 是全新添加的文件。</p>\n<p>这里添加了两个监听函数 <code>watchIncrementAsync</code> <code>watchDecrementAsync</code>，就是监听 dispatch 的内容，一旦命中监听函数，那么就执行对应的异步操作，分别是 <code>incrementAsync</code> <code>decrementAsync</code>。</p>\n<p>异步操作函数 <code>incrementAsync</code> <code>decrementAsync</code>，为了模拟，使用的 delay 函数，这里可以换成 fetch 等函数。等异步操作完毕后，重新触发同步 action 即可。</p>\n<p>最后导出我们的监听函数，正常的项目不可能只有一个异步监听函数，所以我们需要合并后导出。</p>\n<p>有可能这种写法更常见：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">yield</span> all([call(watchIncrementAsync), call(watchDecrementAsync)])</span><br></pre></td></tr></table></figure>\n\n<p>用 call 辅助函数代替直接使用括号运行，此外我还不知道用 call 函数有什么特殊用途或区别。</p>\n<p>这个文件导入了很多辅助函数，下面列出一些说明。具体内容参考<a href=\"https://redux-saga.js.org/docs/api/\" target=\"_blank\" rel=\"noopener\">官方文档</a>：</p>\n<table>\n<thead>\n<tr>\n<th>辅助函数</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>all</td>\n<td>合并多个异步监听函数使用</td>\n</tr>\n<tr>\n<td>takeEvery</td>\n<td>监听函数使用，起到如何监听异步事件。表示每次都监听到，依次执行</td>\n</tr>\n<tr>\n<td>takeLatest</td>\n<td>监听函数使用，起到如何监听异步事件。表示仅执行最后一次操作</td>\n</tr>\n<tr>\n<td>put</td>\n<td>相当于 dispatch，触发 action 使用</td>\n</tr>\n<tr>\n<td>delay</td>\n<td>延时使用，真实项目一般项目用不到</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>最后，你感兴趣的话，可以在 <code>reducer.js</code> 文件中加入日志，就会发现 dispatch 异步 action 也会调用 reducer，只不过没有命中任何条件。在执行异步任务之后，还会 dispatch 一个同步 action，此时 reducer 再次执行一次。</p>\n</blockquote>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>上两篇文章主要说了 redux 的用法。redux 中 reducer 只能处理同步的状态更新，那如果是有异步或者副作用呢，这时候我们就必须对 redux 使用中间件处理了。</p>","more":"<p>redux 本身支持中间件，异步的方案都是通过中间件进行控制的。</p>\n<p>在标准 redux 中，要想修改全局状态，组件需要 dispatch 一个 action 到 reducer 上，reducer 同步修改 state。</p>\n<p>reducer 是负责同步修改 state，这个逻辑不会改变。</p>\n<p>一般的思路是，监听（拦截）dispatch 的 action，如果发现是一个异步 action，就不执行 reducer（或者走到了 reducer 的 default 默认返回逻辑里）。此时执行异步逻辑，完毕后，再 dispatch 一个同步的 action。</p>\n<p>处理这类异步或者副作用问题，常见的解决方案有 <code>redux-thunk</code> <code>redux-promise</code> <code>redux-saga</code> 等，其中 <code>redux-saga</code> 我认为算是比较优雅的实现，唯独就是初次理解上有些难度。</p>\n<p>我们继续用最早的 redux 的例子，改装一下，实现 saga 的异步处理。</p>\n<p>完整代码可以参考 <a href=\"https://github.com/yukapril/learning/tree/master/react-redux-saga\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<h4 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a>index.js</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span></span><br><span class=\"line\">  <span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span></span><br><span class=\"line\">  <span class=\"keyword\">import</span> &#123; Provider &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-redux\"</span></span><br><span class=\"line\">- <span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"redux\"</span></span><br><span class=\"line\">+ <span class=\"keyword\">import</span> &#123; createStore, applyMiddleware &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"redux\"</span></span><br><span class=\"line\">+ <span class=\"keyword\">import</span> createSagaMiddleware <span class=\"keyword\">from</span> <span class=\"string\">\"redux-saga\"</span></span><br><span class=\"line\">+ <span class=\"keyword\">import</span> saga <span class=\"keyword\">from</span> <span class=\"string\">\"./sagas\"</span></span><br><span class=\"line\">  <span class=\"keyword\">import</span> reducer <span class=\"keyword\">from</span> <span class=\"string\">\"./reducer.js\"</span></span><br><span class=\"line\">  <span class=\"keyword\">import</span> Counter <span class=\"keyword\">from</span> <span class=\"string\">\"./Counter\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">+ <span class=\"keyword\">const</span> sagaMiddleware = createSagaMiddleware()</span><br><span class=\"line\">- <span class=\"keyword\">const</span> store = createStore(reducer)</span><br><span class=\"line\">+ <span class=\"keyword\">const</span> store = createStore(reducer, applyMiddleware(sagaMiddleware))</span><br><span class=\"line\">+ sagaMiddleware.run(saga)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">    render () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">          &lt;Counter /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/Provider&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      )</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  const rootElement = document.getElementById(\"root\")</span></span><br><span class=\"line\"><span class=\"regexp\">  ReactDOM.render(&lt;App /</span>&gt;, rootElement)</span><br></pre></td></tr></table></figure>\n\n<p>修改 store 的创建方式，增加 saga 的中间件。</p>\n<p>这里要注意写法： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这样写是不可以的</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sagaMiddleware = createSagaMiddleware(saga)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 必须写成 run 的形式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sagaMiddleware = createSagaMiddleware()</span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(reducer, applyMiddleware(sagaMiddleware))</span><br><span class=\"line\">sagaMiddleware.run(saga) <span class=\"comment\">// run 必须写到 createStore 之后，否则报错</span></span><br></pre></td></tr></table></figure>\n\n<p>这样调整后，我们就可以直接在组件内 dispatch 异步 action 了，并在 <code>sagas.js</code> 中进行监听。</p>\n<h4 id=\"Counter-js\"><a href=\"#Counter-js\" class=\"headerlink\" title=\"Counter.js\"></a>Counter.js</h4><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span></span><br><span class=\"line\">  <span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-redux\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">    render () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; globalState, dispatch &#125; = <span class=\"keyword\">this</span>.props</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;p&gt;COUNT:&#123;globalState.count&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: \"INCREMENT\", payload: 1 &#125;)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            +1</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>button&gt;</span><br><span class=\"line\">          &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"DECREMENT\"</span>, <span class=\"attr\">payload</span>: <span class=\"number\">1</span> &#125;)&#125;&gt;</span><br><span class=\"line\">            <span class=\"number\">-1</span></span><br><span class=\"line\">          &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">+         &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: \"INCREMENT_ASYNC\", payload: 2 &#125;)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">+           +2 async takeEvery</span></span><br><span class=\"line\"><span class=\"regexp\">+         &lt;/</span>button&gt;</span><br><span class=\"line\">+         <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> dispatch(&#123; type: \"DECREMENT_ASYNC\", payload: 2 &#125;)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"xml\">+           -2 async takeLatest</span></span><br><span class=\"line\"><span class=\"xml\">+         <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      )</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  const mapStateToProps = state =&gt; (&#123; globalState: state &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">  export default connect(mapStateToProps)(Counter)</span></span><br></pre></td></tr></table></figure>\n\n<p>组件内增加两个异步的调用按钮。调用类型分别是 <code>INCREMENT_ASYNC</code> <code>DECREMENT_ASYNC</code>。</p>\n<p>其他不要任何修改。</p>\n<h4 id=\"sagas-js\"><a href=\"#sagas-js\" class=\"headerlink\" title=\"sagas.js\"></a>sagas.js</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; put, all, takeEvery, takeLatest, delay &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"redux-saga/effects\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">incrementAsync</span> (<span class=\"params\">action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"INCREMENT\"</span>, <span class=\"attr\">payload</span>: action.payload &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">decrementAsync</span> (<span class=\"params\">action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"DECREMENT\"</span>, <span class=\"attr\">payload</span>: action.payload &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">watchIncrementAsync</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> takeEvery(<span class=\"string\">\"INCREMENT_ASYNC\"</span>, incrementAsync)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">watchDecrementAsync</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> takeLatest(<span class=\"string\">\"DECREMENT_ASYNC\"</span>, decrementAsync)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">saga</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> all([watchIncrementAsync(), watchDecrementAsync()])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> saga</span><br></pre></td></tr></table></figure>\n\n<p><code>sagas.js</code> 是全新添加的文件。</p>\n<p>这里添加了两个监听函数 <code>watchIncrementAsync</code> <code>watchDecrementAsync</code>，就是监听 dispatch 的内容，一旦命中监听函数，那么就执行对应的异步操作，分别是 <code>incrementAsync</code> <code>decrementAsync</code>。</p>\n<p>异步操作函数 <code>incrementAsync</code> <code>decrementAsync</code>，为了模拟，使用的 delay 函数，这里可以换成 fetch 等函数。等异步操作完毕后，重新触发同步 action 即可。</p>\n<p>最后导出我们的监听函数，正常的项目不可能只有一个异步监听函数，所以我们需要合并后导出。</p>\n<p>有可能这种写法更常见：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">yield</span> all([call(watchIncrementAsync), call(watchDecrementAsync)])</span><br></pre></td></tr></table></figure>\n\n<p>用 call 辅助函数代替直接使用括号运行，此外我还不知道用 call 函数有什么特殊用途或区别。</p>\n<p>这个文件导入了很多辅助函数，下面列出一些说明。具体内容参考<a href=\"https://redux-saga.js.org/docs/api/\" target=\"_blank\" rel=\"noopener\">官方文档</a>：</p>\n<table>\n<thead>\n<tr>\n<th>辅助函数</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>all</td>\n<td>合并多个异步监听函数使用</td>\n</tr>\n<tr>\n<td>takeEvery</td>\n<td>监听函数使用，起到如何监听异步事件。表示每次都监听到，依次执行</td>\n</tr>\n<tr>\n<td>takeLatest</td>\n<td>监听函数使用，起到如何监听异步事件。表示仅执行最后一次操作</td>\n</tr>\n<tr>\n<td>put</td>\n<td>相当于 dispatch，触发 action 使用</td>\n</tr>\n<tr>\n<td>delay</td>\n<td>延时使用，真实项目一般项目用不到</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>最后，你感兴趣的话，可以在 <code>reducer.js</code> 文件中加入日志，就会发现 dispatch 异步 action 也会调用 reducer，只不过没有命中任何条件。在执行异步任务之后，还会 dispatch 一个同步 action，此时 reducer 再次执行一次。</p>\n</blockquote>\n<p>–END–</p>"},{"layout":"post","title":"Vue 的事件传参","date":"2019-11-05T22:40:00.000Z","_content":"\n起因是突然想起了 vue 绑定事件，好像默认情况下不能带有括号，不过如果要传参的话，就必须带有括号了。很难理解。特意今天测试了下，结果发现都兼容了。\n\n<!-- more -->\n\n## 直接上例子\n\n```html\n<template>\n  <div>\n    <p @click=\"onClick\">click1</p>\n    <p @click=\"onClick()\">click2</p>\n    <p @click=\"onClick('click3')\">click3</p>\n    <p @click=\"onClick($event, 'click4')\">click4</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"HelloWorld\",\n  data() {\n    return {};\n  },\n  methods: {\n    onClick(event, val) {\n      console.log(\"!!!\", event, val);\n    }\n  }\n};\n</script>\n```\n\nclick1 是最简单最标准的绑定事件。默认情况下，第一个参数就是 `event`，无需我们自己按照 click4 的方式再写出来。\n\nclick2 我记得很早之前不能这样写，会报错。现在不会报错了，但是强制指定了参数（为空），所以什么参数都获取不到。\n\nclick3、click4 是常规的写法，如果主动声明参数（自定义传值），那么必须这么写，clcik3 和 click4 区别就是一个指定了 `$event`，另一个没有而已。此外，这个 `$event` 不一定放在第一个参数位置，第二个参数啥的都可以。\n\n突然发现，自己太水了...\n\n## 查阅源代码\n\nsrc\\compiler\\codegen\\events.js\n\n```js\nconst fnExpRE = /^([\\w$_]+|\\([^)]*?\\))\\s*=>|^function(?:\\s+[\\w$]+)?\\s*\\(/\nconst fnInvokeRE = /\\([^)]*?\\);*$/\nconst simplePathRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['[^']*?']|\\[\"[^\"]*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*$/\n// ...\nconst isMethodPath = simplePathRE.test(handler.value)\nconst isFunctionExpression = fnExpRE.test(handler.value)\nconst isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''))\n\nif (!handler.modifiers) {\nif (isMethodPath || isFunctionExpression) {\n  return handler.value\n}\n// ...\nreturn `function($event){${\n  isFunctionInvocation ? `return ${handler.value}` : handler.value\n  }}` // inline statement\n}\n\n// simplePathRE 这个正则太复杂了，我是肯定理解不了的...\n// 不过：\n\n// 如果是 @click=\"onClick\"\n// isMethodPath 为 true，直接返回\n// 最终结果变成 on:{\"click\":onClick}\n\n// 如果是 @click=\"onClick($event)\"\n// isMethodPath 为 false，返回一个函数字符串\n// 最终结果变成 on:{\"click\":function($event){return onClick($event)}}\n```\n\n我怎么记得以前是检查是否有括号...逻辑可比这个简单多了...\n\n不过现在的样子逻辑也挺清晰的，唯独就是看不懂正则...\n\n--END--","source":"_posts/2019/2019-11-05-vue-click.md","raw":"---\nlayout: post\ntitle: Vue 的事件传参\ndate: 2019-11-05 22:40:00 GMT+0800\ncategories: [前端]\ntags:  [vue,event]\n---\n\n起因是突然想起了 vue 绑定事件，好像默认情况下不能带有括号，不过如果要传参的话，就必须带有括号了。很难理解。特意今天测试了下，结果发现都兼容了。\n\n<!-- more -->\n\n## 直接上例子\n\n```html\n<template>\n  <div>\n    <p @click=\"onClick\">click1</p>\n    <p @click=\"onClick()\">click2</p>\n    <p @click=\"onClick('click3')\">click3</p>\n    <p @click=\"onClick($event, 'click4')\">click4</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"HelloWorld\",\n  data() {\n    return {};\n  },\n  methods: {\n    onClick(event, val) {\n      console.log(\"!!!\", event, val);\n    }\n  }\n};\n</script>\n```\n\nclick1 是最简单最标准的绑定事件。默认情况下，第一个参数就是 `event`，无需我们自己按照 click4 的方式再写出来。\n\nclick2 我记得很早之前不能这样写，会报错。现在不会报错了，但是强制指定了参数（为空），所以什么参数都获取不到。\n\nclick3、click4 是常规的写法，如果主动声明参数（自定义传值），那么必须这么写，clcik3 和 click4 区别就是一个指定了 `$event`，另一个没有而已。此外，这个 `$event` 不一定放在第一个参数位置，第二个参数啥的都可以。\n\n突然发现，自己太水了...\n\n## 查阅源代码\n\nsrc\\compiler\\codegen\\events.js\n\n```js\nconst fnExpRE = /^([\\w$_]+|\\([^)]*?\\))\\s*=>|^function(?:\\s+[\\w$]+)?\\s*\\(/\nconst fnInvokeRE = /\\([^)]*?\\);*$/\nconst simplePathRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['[^']*?']|\\[\"[^\"]*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*$/\n// ...\nconst isMethodPath = simplePathRE.test(handler.value)\nconst isFunctionExpression = fnExpRE.test(handler.value)\nconst isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''))\n\nif (!handler.modifiers) {\nif (isMethodPath || isFunctionExpression) {\n  return handler.value\n}\n// ...\nreturn `function($event){${\n  isFunctionInvocation ? `return ${handler.value}` : handler.value\n  }}` // inline statement\n}\n\n// simplePathRE 这个正则太复杂了，我是肯定理解不了的...\n// 不过：\n\n// 如果是 @click=\"onClick\"\n// isMethodPath 为 true，直接返回\n// 最终结果变成 on:{\"click\":onClick}\n\n// 如果是 @click=\"onClick($event)\"\n// isMethodPath 为 false，返回一个函数字符串\n// 最终结果变成 on:{\"click\":function($event){return onClick($event)}}\n```\n\n我怎么记得以前是检查是否有括号...逻辑可比这个简单多了...\n\n不过现在的样子逻辑也挺清晰的，唯独就是看不懂正则...\n\n--END--","slug":"2019-2019-11-05-vue-click","published":1,"updated":"2020-03-02T07:16:34.763Z","comments":1,"photos":[],"link":"","_id":"cka5ik8dm007cnybglga31bvt","content":"<p>起因是突然想起了 vue 绑定事件，好像默认情况下不能带有括号，不过如果要传参的话，就必须带有括号了。很难理解。特意今天测试了下，结果发现都兼容了。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"直接上例子\"><a href=\"#直接上例子\" class=\"headerlink\" title=\"直接上例子\"></a>直接上例子</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"onClick\"</span>&gt;</span>click1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"onClick()\"</span>&gt;</span>click2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"onClick('click3')\"</span>&gt;</span>click3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"onClick($event, 'click4')\"</span>&gt;</span>click4<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  name: <span class=\"string\">\"HelloWorld\"</span>,</span></span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;&#125;;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    onClick(event, val) &#123;</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"!!!\"</span>, event, val);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>click1 是最简单最标准的绑定事件。默认情况下，第一个参数就是 <code>event</code>，无需我们自己按照 click4 的方式再写出来。</p>\n<p>click2 我记得很早之前不能这样写，会报错。现在不会报错了，但是强制指定了参数（为空），所以什么参数都获取不到。</p>\n<p>click3、click4 是常规的写法，如果主动声明参数（自定义传值），那么必须这么写，clcik3 和 click4 区别就是一个指定了 <code>$event</code>，另一个没有而已。此外，这个 <code>$event</code> 不一定放在第一个参数位置，第二个参数啥的都可以。</p>\n<p>突然发现，自己太水了…</p>\n<h2 id=\"查阅源代码\"><a href=\"#查阅源代码\" class=\"headerlink\" title=\"查阅源代码\"></a>查阅源代码</h2><p>src\\compiler\\codegen\\events.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fnExpRE = <span class=\"regexp\">/^([\\w$_]+|\\([^)]*?\\))\\s*=&gt;|^function(?:\\s+[\\w$]+)?\\s*\\(/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fnInvokeRE = <span class=\"regexp\">/\\([^)]*?\\);*$/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> simplePathRE = <span class=\"regexp\">/^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['[^']*?']|\\[\"[^\"]*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*$/</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isMethodPath = simplePathRE.test(handler.value)</span><br><span class=\"line\"><span class=\"keyword\">const</span> isFunctionExpression = fnExpRE.test(handler.value)</span><br><span class=\"line\"><span class=\"keyword\">const</span> isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, <span class=\"string\">''</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!handler.modifiers) &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (isMethodPath || isFunctionExpression) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> handler.value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">`function($event)&#123;<span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">  isFunctionInvocation ? <span class=\"string\">`return <span class=\"subst\">$&#123;handler.value&#125;</span>`</span> : handler.value</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">  &#125;</span>&#125;`</span> <span class=\"comment\">// inline statement</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// simplePathRE 这个正则太复杂了，我是肯定理解不了的...</span></span><br><span class=\"line\"><span class=\"comment\">// 不过：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果是 @click=\"onClick\"</span></span><br><span class=\"line\"><span class=\"comment\">// isMethodPath 为 true，直接返回</span></span><br><span class=\"line\"><span class=\"comment\">// 最终结果变成 on:&#123;\"click\":onClick&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果是 @click=\"onClick($event)\"</span></span><br><span class=\"line\"><span class=\"comment\">// isMethodPath 为 false，返回一个函数字符串</span></span><br><span class=\"line\"><span class=\"comment\">// 最终结果变成 on:&#123;\"click\":function($event)&#123;return onClick($event)&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>我怎么记得以前是检查是否有括号…逻辑可比这个简单多了…</p>\n<p>不过现在的样子逻辑也挺清晰的，唯独就是看不懂正则…</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>起因是突然想起了 vue 绑定事件，好像默认情况下不能带有括号，不过如果要传参的话，就必须带有括号了。很难理解。特意今天测试了下，结果发现都兼容了。</p>","more":"<h2 id=\"直接上例子\"><a href=\"#直接上例子\" class=\"headerlink\" title=\"直接上例子\"></a>直接上例子</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"onClick\"</span>&gt;</span>click1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"onClick()\"</span>&gt;</span>click2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"onClick('click3')\"</span>&gt;</span>click3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"onClick($event, 'click4')\"</span>&gt;</span>click4<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  name: <span class=\"string\">\"HelloWorld\"</span>,</span></span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;&#125;;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    onClick(event, val) &#123;</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"!!!\"</span>, event, val);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>click1 是最简单最标准的绑定事件。默认情况下，第一个参数就是 <code>event</code>，无需我们自己按照 click4 的方式再写出来。</p>\n<p>click2 我记得很早之前不能这样写，会报错。现在不会报错了，但是强制指定了参数（为空），所以什么参数都获取不到。</p>\n<p>click3、click4 是常规的写法，如果主动声明参数（自定义传值），那么必须这么写，clcik3 和 click4 区别就是一个指定了 <code>$event</code>，另一个没有而已。此外，这个 <code>$event</code> 不一定放在第一个参数位置，第二个参数啥的都可以。</p>\n<p>突然发现，自己太水了…</p>\n<h2 id=\"查阅源代码\"><a href=\"#查阅源代码\" class=\"headerlink\" title=\"查阅源代码\"></a>查阅源代码</h2><p>src\\compiler\\codegen\\events.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fnExpRE = <span class=\"regexp\">/^([\\w$_]+|\\([^)]*?\\))\\s*=&gt;|^function(?:\\s+[\\w$]+)?\\s*\\(/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fnInvokeRE = <span class=\"regexp\">/\\([^)]*?\\);*$/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> simplePathRE = <span class=\"regexp\">/^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['[^']*?']|\\[\"[^\"]*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*$/</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isMethodPath = simplePathRE.test(handler.value)</span><br><span class=\"line\"><span class=\"keyword\">const</span> isFunctionExpression = fnExpRE.test(handler.value)</span><br><span class=\"line\"><span class=\"keyword\">const</span> isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, <span class=\"string\">''</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!handler.modifiers) &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (isMethodPath || isFunctionExpression) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> handler.value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">`function($event)&#123;<span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">  isFunctionInvocation ? <span class=\"string\">`return <span class=\"subst\">$&#123;handler.value&#125;</span>`</span> : handler.value</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">  &#125;</span>&#125;`</span> <span class=\"comment\">// inline statement</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// simplePathRE 这个正则太复杂了，我是肯定理解不了的...</span></span><br><span class=\"line\"><span class=\"comment\">// 不过：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果是 @click=\"onClick\"</span></span><br><span class=\"line\"><span class=\"comment\">// isMethodPath 为 true，直接返回</span></span><br><span class=\"line\"><span class=\"comment\">// 最终结果变成 on:&#123;\"click\":onClick&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果是 @click=\"onClick($event)\"</span></span><br><span class=\"line\"><span class=\"comment\">// isMethodPath 为 false，返回一个函数字符串</span></span><br><span class=\"line\"><span class=\"comment\">// 最终结果变成 on:&#123;\"click\":function($event)&#123;return onClick($event)&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>我怎么记得以前是检查是否有括号…逻辑可比这个简单多了…</p>\n<p>不过现在的样子逻辑也挺清晰的，唯独就是看不懂正则…</p>\n<p>–END–</p>"},{"layout":"post","title":"中文输入法在 React 文本输入框的特殊处理","date":"2019-11-11T22:54:00.000Z","_content":"\n看 anu 的源码，看到注释里面有一篇文章，说输入法的问题，正好很多年前也遇到过，虽然不是特别影响使用，但是这个思路确实不常见。\n\n<!-- more -->\n\n## 问题\n\n首先，这个问题和框架无关，都会遇到的。为了方便，下面用 react 来说明。简单来说：\n\n页面有一个输入框，每次输入一下，便向后端请求，获取一些相关数据。这里技术上不考虑节流情况。\n\n假设用户输入了 `abc`。那么由于触发 `onChange` 三次，所以请求了后端三次。分别是 `a` `ab` `abc`。**符合预期**。\n\n假设用户输入了 `abc的`。那么触发 `onChange` 分别是 `a` `ab` `abc` `abcd` `abcde` `abc的`。**这不符合预期**。正确的请求应该是 4 次，即 `a` `ab` `abc` `abc的`。在使用输入法输入过程中，也触发 `onChange` 了。\n\n这个问题来源和解决方案，见此： [中文输入法与React文本输入框的问题与解决方案](https://segmentfault.com/a/1190000008023476)\n\n文章挺好的，但是太长了，所以 TLDR。我自己决定按照 `compositionEvent` 试试看。\n\n## 处理代码\n\n自己写着玩的，兼容性没有测试过，只是在 chrome firefox 最新版下没问题。\n\n`compositionEvent` 输入合成事件，下文均指代输入法输入过程。\n\n```jsx\nimport React from 'react';\n\nclass App extends React.PureComponent {\n  state = {\n    text: \"\",\n    isInputing: false\n  };\n\n  // 原本只有使用输入法输入时候会触发，\n  // event.type 主要为 compositionEvent 系列。\n  // 在 handleChange 中调用此方法后，\n  // event.type 就存在 change 的情况。\n  handleCompsition = event => {\n    const { isInputing } = this.state;\n    const type = event.type;\n    const value = event.target.value;\n    console.log(\"handleCompsition\", type, value);\n\n    if (type === \"compositionstart\") {\n      // 输入法开始输入\n      this.setState({ isInputing: true });\n    } else if (type === \"compositionupdate\") {\n      // 输入法每次敲击，这里不需要特殊处理\n      // 只需要关注开始和结束事件即可\n    } else if (type === \"compositionend\") {\n      // 输入法结束输入\n      this.setState({ isInputing: false });\n      // 由于是先调用 onChange\n      // 最后调用 compositionend\n      // 故此事件内需要将最终的内容写入 state\n      this.setState({ text: value });\n    } else if (type === \"change\") {\n      if (!isInputing) {\n        // 非输入法情况下，直接保存内容到 state\n        this.setState({ text: value });\n      } else {\n        // 输入法情况下，等待输入法输入完毕\n        // 然后在 compositionend 事件内，再保存内容到 state\n        // 故此处不需要保存内容到 state\n      }\n    }\n  };\n\n  // 不论如何输入都会触发 handleChange\n  // 但是直接输入英文，不会触发 handleCompsition\n  // 故干脆都放到 handleCompsition 处理\n  handleChange = event => {\n    console.log(\"handleChange\");\n    // 必须透传 event 事件\n    // 主要是透传 event.type === 'change' 这种情况\n    this.handleCompsition(event);\n  };\n\n  render () {\n    const { text, isInputing } = this.state;\n\n    return (\n      <div>\n        <p>输入状态：{isInputing ? \"输入法输入中...\" : \"-\"}</p>\n        <p>输入内容：{text}</p>\n        <p>\n          输入区域：\n          <input\n            onCompositionStart={this.handleCompsition}\n            onCompositionUpdate={this.handleCompsition}\n            onCompositionEnd={this.handleCompsition}\n            onChange={this.handleChange}\n            value={this.state.innerInputText} />\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n通过监听 `onCompositionStart` `onCompositionEnd`，即可得知当前是否在使用输入法进行输入，也就为解决问题有了思路。\n\n这是相对复杂的情况（react 受控组件），非受控组件相对容易一些，可以参考原文。\n\n--END--","source":"_posts/2019/2019-11-11-react-input-composition.md","raw":"---\nlayout: post\ntitle: 中文输入法在 React 文本输入框的特殊处理\ndate: 2019-11-11 22:54:00 GMT+0800\ncategories: [前端]\ntags:  [react,input,event,composition]\n---\n\n看 anu 的源码，看到注释里面有一篇文章，说输入法的问题，正好很多年前也遇到过，虽然不是特别影响使用，但是这个思路确实不常见。\n\n<!-- more -->\n\n## 问题\n\n首先，这个问题和框架无关，都会遇到的。为了方便，下面用 react 来说明。简单来说：\n\n页面有一个输入框，每次输入一下，便向后端请求，获取一些相关数据。这里技术上不考虑节流情况。\n\n假设用户输入了 `abc`。那么由于触发 `onChange` 三次，所以请求了后端三次。分别是 `a` `ab` `abc`。**符合预期**。\n\n假设用户输入了 `abc的`。那么触发 `onChange` 分别是 `a` `ab` `abc` `abcd` `abcde` `abc的`。**这不符合预期**。正确的请求应该是 4 次，即 `a` `ab` `abc` `abc的`。在使用输入法输入过程中，也触发 `onChange` 了。\n\n这个问题来源和解决方案，见此： [中文输入法与React文本输入框的问题与解决方案](https://segmentfault.com/a/1190000008023476)\n\n文章挺好的，但是太长了，所以 TLDR。我自己决定按照 `compositionEvent` 试试看。\n\n## 处理代码\n\n自己写着玩的，兼容性没有测试过，只是在 chrome firefox 最新版下没问题。\n\n`compositionEvent` 输入合成事件，下文均指代输入法输入过程。\n\n```jsx\nimport React from 'react';\n\nclass App extends React.PureComponent {\n  state = {\n    text: \"\",\n    isInputing: false\n  };\n\n  // 原本只有使用输入法输入时候会触发，\n  // event.type 主要为 compositionEvent 系列。\n  // 在 handleChange 中调用此方法后，\n  // event.type 就存在 change 的情况。\n  handleCompsition = event => {\n    const { isInputing } = this.state;\n    const type = event.type;\n    const value = event.target.value;\n    console.log(\"handleCompsition\", type, value);\n\n    if (type === \"compositionstart\") {\n      // 输入法开始输入\n      this.setState({ isInputing: true });\n    } else if (type === \"compositionupdate\") {\n      // 输入法每次敲击，这里不需要特殊处理\n      // 只需要关注开始和结束事件即可\n    } else if (type === \"compositionend\") {\n      // 输入法结束输入\n      this.setState({ isInputing: false });\n      // 由于是先调用 onChange\n      // 最后调用 compositionend\n      // 故此事件内需要将最终的内容写入 state\n      this.setState({ text: value });\n    } else if (type === \"change\") {\n      if (!isInputing) {\n        // 非输入法情况下，直接保存内容到 state\n        this.setState({ text: value });\n      } else {\n        // 输入法情况下，等待输入法输入完毕\n        // 然后在 compositionend 事件内，再保存内容到 state\n        // 故此处不需要保存内容到 state\n      }\n    }\n  };\n\n  // 不论如何输入都会触发 handleChange\n  // 但是直接输入英文，不会触发 handleCompsition\n  // 故干脆都放到 handleCompsition 处理\n  handleChange = event => {\n    console.log(\"handleChange\");\n    // 必须透传 event 事件\n    // 主要是透传 event.type === 'change' 这种情况\n    this.handleCompsition(event);\n  };\n\n  render () {\n    const { text, isInputing } = this.state;\n\n    return (\n      <div>\n        <p>输入状态：{isInputing ? \"输入法输入中...\" : \"-\"}</p>\n        <p>输入内容：{text}</p>\n        <p>\n          输入区域：\n          <input\n            onCompositionStart={this.handleCompsition}\n            onCompositionUpdate={this.handleCompsition}\n            onCompositionEnd={this.handleCompsition}\n            onChange={this.handleChange}\n            value={this.state.innerInputText} />\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n通过监听 `onCompositionStart` `onCompositionEnd`，即可得知当前是否在使用输入法进行输入，也就为解决问题有了思路。\n\n这是相对复杂的情况（react 受控组件），非受控组件相对容易一些，可以参考原文。\n\n--END--","slug":"2019-2019-11-11-react-input-composition","published":1,"updated":"2020-03-02T07:16:34.763Z","comments":1,"photos":[],"link":"","_id":"cka5ik8do007fnybg2f0toeah","content":"<p>看 anu 的源码，看到注释里面有一篇文章，说输入法的问题，正好很多年前也遇到过，虽然不是特别影响使用，但是这个思路确实不常见。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>首先，这个问题和框架无关，都会遇到的。为了方便，下面用 react 来说明。简单来说：</p>\n<p>页面有一个输入框，每次输入一下，便向后端请求，获取一些相关数据。这里技术上不考虑节流情况。</p>\n<p>假设用户输入了 <code>abc</code>。那么由于触发 <code>onChange</code> 三次，所以请求了后端三次。分别是 <code>a</code> <code>ab</code> <code>abc</code>。<strong>符合预期</strong>。</p>\n<p>假设用户输入了 <code>abc的</code>。那么触发 <code>onChange</code> 分别是 <code>a</code> <code>ab</code> <code>abc</code> <code>abcd</code> <code>abcde</code> <code>abc的</code>。<strong>这不符合预期</strong>。正确的请求应该是 4 次，即 <code>a</code> <code>ab</code> <code>abc</code> <code>abc的</code>。在使用输入法输入过程中，也触发 <code>onChange</code> 了。</p>\n<p>这个问题来源和解决方案，见此： <a href=\"https://segmentfault.com/a/1190000008023476\" target=\"_blank\" rel=\"noopener\">中文输入法与React文本输入框的问题与解决方案</a></p>\n<p>文章挺好的，但是太长了，所以 TLDR。我自己决定按照 <code>compositionEvent</code> 试试看。</p>\n<h2 id=\"处理代码\"><a href=\"#处理代码\" class=\"headerlink\" title=\"处理代码\"></a>处理代码</h2><p>自己写着玩的，兼容性没有测试过，只是在 chrome firefox 最新版下没问题。</p>\n<p><code>compositionEvent</code> 输入合成事件，下文均指代输入法输入过程。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    text: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    isInputing: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 原本只有使用输入法输入时候会触发，</span></span><br><span class=\"line\">  <span class=\"comment\">// event.type 主要为 compositionEvent 系列。</span></span><br><span class=\"line\">  <span class=\"comment\">// 在 handleChange 中调用此方法后，</span></span><br><span class=\"line\">  <span class=\"comment\">// event.type 就存在 change 的情况。</span></span><br><span class=\"line\">  handleCompsition = <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; isInputing &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> type = event.type;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = event.target.value;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"handleCompsition\"</span>, type, value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">\"compositionstart\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 输入法开始输入</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">isInputing</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type === <span class=\"string\">\"compositionupdate\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 输入法每次敲击，这里不需要特殊处理</span></span><br><span class=\"line\">      <span class=\"comment\">// 只需要关注开始和结束事件即可</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type === <span class=\"string\">\"compositionend\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 输入法结束输入</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">isInputing</span>: <span class=\"literal\">false</span> &#125;);</span><br><span class=\"line\">      <span class=\"comment\">// 由于是先调用 onChange</span></span><br><span class=\"line\">      <span class=\"comment\">// 最后调用 compositionend</span></span><br><span class=\"line\">      <span class=\"comment\">// 故此事件内需要将最终的内容写入 state</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">text</span>: value &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type === <span class=\"string\">\"change\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isInputing) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 非输入法情况下，直接保存内容到 state</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">text</span>: value &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 输入法情况下，等待输入法输入完毕</span></span><br><span class=\"line\">        <span class=\"comment\">// 然后在 compositionend 事件内，再保存内容到 state</span></span><br><span class=\"line\">        <span class=\"comment\">// 故此处不需要保存内容到 state</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 不论如何输入都会触发 handleChange</span></span><br><span class=\"line\">  <span class=\"comment\">// 但是直接输入英文，不会触发 handleCompsition</span></span><br><span class=\"line\">  <span class=\"comment\">// 故干脆都放到 handleCompsition 处理</span></span><br><span class=\"line\">  handleChange = <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"handleChange\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 必须透传 event 事件</span></span><br><span class=\"line\">    <span class=\"comment\">// 主要是透传 event.type === 'change' 这种情况</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleCompsition(event);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; text, isInputing &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;p&gt;输入状态：&#123;isInputing ? <span class=\"string\">\"输入法输入中...\"</span> : <span class=\"string\">\"-\"</span>&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;p&gt;输入内容：&#123;text&#125;&lt;/</span>p&gt;</span><br><span class=\"line\">        &lt;p&gt;</span><br><span class=\"line\">          输入区域：</span><br><span class=\"line\">          &lt;input</span><br><span class=\"line\">            onCompositionStart=&#123;<span class=\"keyword\">this</span>.handleCompsition&#125;</span><br><span class=\"line\">            onCompositionUpdate=&#123;<span class=\"keyword\">this</span>.handleCompsition&#125;</span><br><span class=\"line\">            onCompositionEnd=&#123;<span class=\"keyword\">this</span>.handleCompsition&#125;</span><br><span class=\"line\">            onChange=&#123;<span class=\"keyword\">this</span>.handleChange&#125;</span><br><span class=\"line\">            value=&#123;<span class=\"keyword\">this</span>.state.innerInputText&#125; /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br></pre></td></tr></table></figure>\n\n<p>通过监听 <code>onCompositionStart</code> <code>onCompositionEnd</code>，即可得知当前是否在使用输入法进行输入，也就为解决问题有了思路。</p>\n<p>这是相对复杂的情况（react 受控组件），非受控组件相对容易一些，可以参考原文。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>看 anu 的源码，看到注释里面有一篇文章，说输入法的问题，正好很多年前也遇到过，虽然不是特别影响使用，但是这个思路确实不常见。</p>","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>首先，这个问题和框架无关，都会遇到的。为了方便，下面用 react 来说明。简单来说：</p>\n<p>页面有一个输入框，每次输入一下，便向后端请求，获取一些相关数据。这里技术上不考虑节流情况。</p>\n<p>假设用户输入了 <code>abc</code>。那么由于触发 <code>onChange</code> 三次，所以请求了后端三次。分别是 <code>a</code> <code>ab</code> <code>abc</code>。<strong>符合预期</strong>。</p>\n<p>假设用户输入了 <code>abc的</code>。那么触发 <code>onChange</code> 分别是 <code>a</code> <code>ab</code> <code>abc</code> <code>abcd</code> <code>abcde</code> <code>abc的</code>。<strong>这不符合预期</strong>。正确的请求应该是 4 次，即 <code>a</code> <code>ab</code> <code>abc</code> <code>abc的</code>。在使用输入法输入过程中，也触发 <code>onChange</code> 了。</p>\n<p>这个问题来源和解决方案，见此： <a href=\"https://segmentfault.com/a/1190000008023476\" target=\"_blank\" rel=\"noopener\">中文输入法与React文本输入框的问题与解决方案</a></p>\n<p>文章挺好的，但是太长了，所以 TLDR。我自己决定按照 <code>compositionEvent</code> 试试看。</p>\n<h2 id=\"处理代码\"><a href=\"#处理代码\" class=\"headerlink\" title=\"处理代码\"></a>处理代码</h2><p>自己写着玩的，兼容性没有测试过，只是在 chrome firefox 最新版下没问题。</p>\n<p><code>compositionEvent</code> 输入合成事件，下文均指代输入法输入过程。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    text: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    isInputing: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 原本只有使用输入法输入时候会触发，</span></span><br><span class=\"line\">  <span class=\"comment\">// event.type 主要为 compositionEvent 系列。</span></span><br><span class=\"line\">  <span class=\"comment\">// 在 handleChange 中调用此方法后，</span></span><br><span class=\"line\">  <span class=\"comment\">// event.type 就存在 change 的情况。</span></span><br><span class=\"line\">  handleCompsition = <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; isInputing &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> type = event.type;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = event.target.value;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"handleCompsition\"</span>, type, value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">\"compositionstart\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 输入法开始输入</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">isInputing</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type === <span class=\"string\">\"compositionupdate\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 输入法每次敲击，这里不需要特殊处理</span></span><br><span class=\"line\">      <span class=\"comment\">// 只需要关注开始和结束事件即可</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type === <span class=\"string\">\"compositionend\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 输入法结束输入</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">isInputing</span>: <span class=\"literal\">false</span> &#125;);</span><br><span class=\"line\">      <span class=\"comment\">// 由于是先调用 onChange</span></span><br><span class=\"line\">      <span class=\"comment\">// 最后调用 compositionend</span></span><br><span class=\"line\">      <span class=\"comment\">// 故此事件内需要将最终的内容写入 state</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">text</span>: value &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type === <span class=\"string\">\"change\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isInputing) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 非输入法情况下，直接保存内容到 state</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">text</span>: value &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 输入法情况下，等待输入法输入完毕</span></span><br><span class=\"line\">        <span class=\"comment\">// 然后在 compositionend 事件内，再保存内容到 state</span></span><br><span class=\"line\">        <span class=\"comment\">// 故此处不需要保存内容到 state</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 不论如何输入都会触发 handleChange</span></span><br><span class=\"line\">  <span class=\"comment\">// 但是直接输入英文，不会触发 handleCompsition</span></span><br><span class=\"line\">  <span class=\"comment\">// 故干脆都放到 handleCompsition 处理</span></span><br><span class=\"line\">  handleChange = <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"handleChange\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 必须透传 event 事件</span></span><br><span class=\"line\">    <span class=\"comment\">// 主要是透传 event.type === 'change' 这种情况</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleCompsition(event);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; text, isInputing &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;p&gt;输入状态：&#123;isInputing ? <span class=\"string\">\"输入法输入中...\"</span> : <span class=\"string\">\"-\"</span>&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;p&gt;输入内容：&#123;text&#125;&lt;/</span>p&gt;</span><br><span class=\"line\">        &lt;p&gt;</span><br><span class=\"line\">          输入区域：</span><br><span class=\"line\">          &lt;input</span><br><span class=\"line\">            onCompositionStart=&#123;<span class=\"keyword\">this</span>.handleCompsition&#125;</span><br><span class=\"line\">            onCompositionUpdate=&#123;<span class=\"keyword\">this</span>.handleCompsition&#125;</span><br><span class=\"line\">            onCompositionEnd=&#123;<span class=\"keyword\">this</span>.handleCompsition&#125;</span><br><span class=\"line\">            onChange=&#123;<span class=\"keyword\">this</span>.handleChange&#125;</span><br><span class=\"line\">            value=&#123;<span class=\"keyword\">this</span>.state.innerInputText&#125; /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br></pre></td></tr></table></figure>\n\n<p>通过监听 <code>onCompositionStart</code> <code>onCompositionEnd</code>，即可得知当前是否在使用输入法进行输入，也就为解决问题有了思路。</p>\n<p>这是相对复杂的情况（react 受控组件），非受控组件相对容易一些，可以参考原文。</p>\n<p>–END–</p>"},{"layout":"post","title":"Redux 学习 - umijs","date":"2019-11-12T21:56:00.000Z","_content":"\n终于到最后一篇文章了。这次开始学习 umi 架构的 redux 用法。\n\n对于 umi （dva）体系，主要是集成了 react react-router react-redux redux-saga 等。比起 redux-saga，好处是做了高度封装，将原本的 reducer.js 和 sagas.js 统一到了一个 model.js 中。\n\n<!-- more -->\n\n创建 umi 架构项目，可以通过官方脚手架来完成。具体可参考 [官方文档](https://umijs.org/)。\n\n创建项目后，配置文件等不进行调整，因为这次主要学习 model.js 的写法而已。\n\n## 直接上代码\n\n本次的示例代码 [见此](https://github.com/yukapril/learning/tree/master/react-umi)。\n\n相对于之前的 redux-saga 项目，我们只需要调整两个文件。一个是页面组件，负责页面展示（按钮控制）的功能调用 dispatch 轻微调整；以及一个 model 文件，来代替原本的 reducer 和 sagas 文件。\n\n#### models/global.js\n\n我们先创建一个 model 文件，内容如下：\n\n```js\nconst delay = timeout => new Promise(resolve => setTimeout(resolve, timeout))\n\nexport default {\n  namespace: 'global',\n  state: {\n    count: 10,\n  },\n  reducers: {\n    increment (state, action) {\n      return {\n        ...state,\n        count: state.count + action.payload,\n      }\n    },\n    decrement (state, action) {\n      return {\n        ...state,\n        count: state.count - action.payload,\n      }\n    },\n  },\n  effects: {\n    *incrementAsync (action, { put }) {\n      yield delay(1000)\n      yield put({ type: 'increment', payload: action.payload })\n    },\n    decrementAsync: [\n      function* (action, { put }) {\n        yield delay(1000)\n        yield put({ type: 'decrement', payload: action.payload })\n      },\n      { type: 'takeLatest' }\n    ]\n  },\n}\n```\n\n由于在 umi 体系下没找到 delay 方法，所以我直接实现了一下。在 redux-saga 例子中，官方是提供 delay 方法的，所以直接引用的。\n\n按照官方的格式，我们写一个对象（如上代码），定义了一些属性。其中定义了一个 `namespace: 'global'`，即这是一个命名空间为 `global` 的 model。后续我们在读取状态、dispatch 时候都要用到。\n\n`state` 中存放初始化的状态。\n\n在组件内 dispatch 后，会根据调用的类型直接路由到对应的 `reducers` 或者 `effects`。\n\n`reducers` 和之前 redux 中用法一样，负责同步修改 `state` 内容。注意也是要返回一个新的 `state` 对象，并且函数必须是无副作用的。\n\n`effects` 就是处理副作用的位置。完成副作用（比如异步获取数据）后，通过 `put`（相当于 dispatch）调用后续合适的 `reducers` 方法，完成 `state` 更新。这里要注意的是，通过 `put` 调用，直接写类型即可，不需要写命名空间。即 **不用写成 `put({ type: 'global/increment', payload: action.payload })`**。\n\n这个例子 `effects` 写了两种用法。\n\n一种是默认的 `takeEvery`，在 redux-saga 中我们接触过它。默认写法的语法是：\n\n```js\n*incrementAsync (action, effects) {}\n```\n\n另一种是 `takeLatest`，这个不是默认值，所以需要配置，语法是：\n\n```js\ndecrementAsync: [\n  function* (action, effects) {},\n  { type: 'takeLatest' }\n]\n```\n\n两种的区别在于，入口一个是 generator 函数（有星号），一个是普通数组，数组内第一个参数是 generator 函数，第二个是类型配置。 \n\n#### index.js\n\n参考之前的 redux-saga 的组件，我们基本上调整内容很少。\n\n```jsx\nimport React from \"react\"\nimport { connect } from \"dva\"\n\nclass Counter extends React.PureComponent {\n  render () {\n    const { globalState, dispatch } = this.props\n    return (\n      <div>\n        <p>COUNT:{globalState.count}</p>\n        <button onClick={() => dispatch({ type: \"global/increment\", payload: 1 }) }>\n          +1\n        </button>\n        <button onClick={() => dispatch({ type: \"global/decrement\", payload: 1 }) }>\n          -1\n        </button>\n        <button onClick={() => dispatch({ type: \"global/incrementAsync\", payload: 2 }) }>\n          +2 async takeEvery\n        </button>\n        <button onClick={() => dispatch({ type: \"global/decrementAsync\", payload: 2 }) }>\n          -2 async takeLatest\n        </button>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({ globalState: state.global })\nexport default connect(mapStateToProps)(Counter)\n```\n\n主要的区别是，我们由于定义了一个全局 model，叫做 `global`（在 `models/global.js` 中定义），所以调用时候必须加上命名空间。即 `dispatch({ type: \"global/increment\", payload: 1 }`。\n\n其他文件都不需要再修改了。\n\n--END--","source":"_posts/2019/2019-11-12-react-redux-umi.md","raw":"---\nlayout: post\ntitle: Redux 学习 - umijs\ndate: 2019-11-12 21:56:00 GMT+0800\ncategories: [前端]\ntags:  [react,redux,umi]\n---\n\n终于到最后一篇文章了。这次开始学习 umi 架构的 redux 用法。\n\n对于 umi （dva）体系，主要是集成了 react react-router react-redux redux-saga 等。比起 redux-saga，好处是做了高度封装，将原本的 reducer.js 和 sagas.js 统一到了一个 model.js 中。\n\n<!-- more -->\n\n创建 umi 架构项目，可以通过官方脚手架来完成。具体可参考 [官方文档](https://umijs.org/)。\n\n创建项目后，配置文件等不进行调整，因为这次主要学习 model.js 的写法而已。\n\n## 直接上代码\n\n本次的示例代码 [见此](https://github.com/yukapril/learning/tree/master/react-umi)。\n\n相对于之前的 redux-saga 项目，我们只需要调整两个文件。一个是页面组件，负责页面展示（按钮控制）的功能调用 dispatch 轻微调整；以及一个 model 文件，来代替原本的 reducer 和 sagas 文件。\n\n#### models/global.js\n\n我们先创建一个 model 文件，内容如下：\n\n```js\nconst delay = timeout => new Promise(resolve => setTimeout(resolve, timeout))\n\nexport default {\n  namespace: 'global',\n  state: {\n    count: 10,\n  },\n  reducers: {\n    increment (state, action) {\n      return {\n        ...state,\n        count: state.count + action.payload,\n      }\n    },\n    decrement (state, action) {\n      return {\n        ...state,\n        count: state.count - action.payload,\n      }\n    },\n  },\n  effects: {\n    *incrementAsync (action, { put }) {\n      yield delay(1000)\n      yield put({ type: 'increment', payload: action.payload })\n    },\n    decrementAsync: [\n      function* (action, { put }) {\n        yield delay(1000)\n        yield put({ type: 'decrement', payload: action.payload })\n      },\n      { type: 'takeLatest' }\n    ]\n  },\n}\n```\n\n由于在 umi 体系下没找到 delay 方法，所以我直接实现了一下。在 redux-saga 例子中，官方是提供 delay 方法的，所以直接引用的。\n\n按照官方的格式，我们写一个对象（如上代码），定义了一些属性。其中定义了一个 `namespace: 'global'`，即这是一个命名空间为 `global` 的 model。后续我们在读取状态、dispatch 时候都要用到。\n\n`state` 中存放初始化的状态。\n\n在组件内 dispatch 后，会根据调用的类型直接路由到对应的 `reducers` 或者 `effects`。\n\n`reducers` 和之前 redux 中用法一样，负责同步修改 `state` 内容。注意也是要返回一个新的 `state` 对象，并且函数必须是无副作用的。\n\n`effects` 就是处理副作用的位置。完成副作用（比如异步获取数据）后，通过 `put`（相当于 dispatch）调用后续合适的 `reducers` 方法，完成 `state` 更新。这里要注意的是，通过 `put` 调用，直接写类型即可，不需要写命名空间。即 **不用写成 `put({ type: 'global/increment', payload: action.payload })`**。\n\n这个例子 `effects` 写了两种用法。\n\n一种是默认的 `takeEvery`，在 redux-saga 中我们接触过它。默认写法的语法是：\n\n```js\n*incrementAsync (action, effects) {}\n```\n\n另一种是 `takeLatest`，这个不是默认值，所以需要配置，语法是：\n\n```js\ndecrementAsync: [\n  function* (action, effects) {},\n  { type: 'takeLatest' }\n]\n```\n\n两种的区别在于，入口一个是 generator 函数（有星号），一个是普通数组，数组内第一个参数是 generator 函数，第二个是类型配置。 \n\n#### index.js\n\n参考之前的 redux-saga 的组件，我们基本上调整内容很少。\n\n```jsx\nimport React from \"react\"\nimport { connect } from \"dva\"\n\nclass Counter extends React.PureComponent {\n  render () {\n    const { globalState, dispatch } = this.props\n    return (\n      <div>\n        <p>COUNT:{globalState.count}</p>\n        <button onClick={() => dispatch({ type: \"global/increment\", payload: 1 }) }>\n          +1\n        </button>\n        <button onClick={() => dispatch({ type: \"global/decrement\", payload: 1 }) }>\n          -1\n        </button>\n        <button onClick={() => dispatch({ type: \"global/incrementAsync\", payload: 2 }) }>\n          +2 async takeEvery\n        </button>\n        <button onClick={() => dispatch({ type: \"global/decrementAsync\", payload: 2 }) }>\n          -2 async takeLatest\n        </button>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({ globalState: state.global })\nexport default connect(mapStateToProps)(Counter)\n```\n\n主要的区别是，我们由于定义了一个全局 model，叫做 `global`（在 `models/global.js` 中定义），所以调用时候必须加上命名空间。即 `dispatch({ type: \"global/increment\", payload: 1 }`。\n\n其他文件都不需要再修改了。\n\n--END--","slug":"2019-2019-11-12-react-redux-umi","published":1,"updated":"2020-03-02T07:16:34.763Z","comments":1,"photos":[],"link":"","_id":"cka5ik8dq007hnybgky469and","content":"<p>终于到最后一篇文章了。这次开始学习 umi 架构的 redux 用法。</p>\n<p>对于 umi （dva）体系，主要是集成了 react react-router react-redux redux-saga 等。比起 redux-saga，好处是做了高度封装，将原本的 reducer.js 和 sagas.js 统一到了一个 model.js 中。</p>\n<a id=\"more\"></a>\n\n<p>创建 umi 架构项目，可以通过官方脚手架来完成。具体可参考 <a href=\"https://umijs.org/\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<p>创建项目后，配置文件等不进行调整，因为这次主要学习 model.js 的写法而已。</p>\n<h2 id=\"直接上代码\"><a href=\"#直接上代码\" class=\"headerlink\" title=\"直接上代码\"></a>直接上代码</h2><p>本次的示例代码 <a href=\"https://github.com/yukapril/learning/tree/master/react-umi\" target=\"_blank\" rel=\"noopener\">见此</a>。</p>\n<p>相对于之前的 redux-saga 项目，我们只需要调整两个文件。一个是页面组件，负责页面展示（按钮控制）的功能调用 dispatch 轻微调整；以及一个 model 文件，来代替原本的 reducer 和 sagas 文件。</p>\n<h4 id=\"models-global-js\"><a href=\"#models-global-js\" class=\"headerlink\" title=\"models/global.js\"></a>models/global.js</h4><p>我们先创建一个 model 文件，内容如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> delay = <span class=\"function\"><span class=\"params\">timeout</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> setTimeout(resolve, timeout))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  namespace: <span class=\"string\">'global'</span>,</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">10</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  reducers: &#123;</span><br><span class=\"line\">    increment (state, action) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        count: state.count + action.payload,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    decrement (state, action) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        count: state.count - action.payload,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  effects: &#123;</span><br><span class=\"line\">    *incrementAsync (action, &#123; put &#125;) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'increment'</span>, <span class=\"attr\">payload</span>: action.payload &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    decrementAsync: [</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\">action, &#123; put &#125;</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'decrement'</span>, <span class=\"attr\">payload</span>: action.payload &#125;)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">type</span>: <span class=\"string\">'takeLatest'</span> &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于在 umi 体系下没找到 delay 方法，所以我直接实现了一下。在 redux-saga 例子中，官方是提供 delay 方法的，所以直接引用的。</p>\n<p>按照官方的格式，我们写一个对象（如上代码），定义了一些属性。其中定义了一个 <code>namespace: &#39;global&#39;</code>，即这是一个命名空间为 <code>global</code> 的 model。后续我们在读取状态、dispatch 时候都要用到。</p>\n<p><code>state</code> 中存放初始化的状态。</p>\n<p>在组件内 dispatch 后，会根据调用的类型直接路由到对应的 <code>reducers</code> 或者 <code>effects</code>。</p>\n<p><code>reducers</code> 和之前 redux 中用法一样，负责同步修改 <code>state</code> 内容。注意也是要返回一个新的 <code>state</code> 对象，并且函数必须是无副作用的。</p>\n<p><code>effects</code> 就是处理副作用的位置。完成副作用（比如异步获取数据）后，通过 <code>put</code>（相当于 dispatch）调用后续合适的 <code>reducers</code> 方法，完成 <code>state</code> 更新。这里要注意的是，通过 <code>put</code> 调用，直接写类型即可，不需要写命名空间。即 <strong>不用写成 <code>put({ type: &#39;global/increment&#39;, payload: action.payload })</code></strong>。</p>\n<p>这个例子 <code>effects</code> 写了两种用法。</p>\n<p>一种是默认的 <code>takeEvery</code>，在 redux-saga 中我们接触过它。默认写法的语法是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*incrementAsync (action, effects) &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另一种是 <code>takeLatest</code>，这个不是默认值，所以需要配置，语法是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">decrementAsync: [</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\">action, effects</span>) </span>&#123;&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">type</span>: <span class=\"string\">'takeLatest'</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>两种的区别在于，入口一个是 generator 函数（有星号），一个是普通数组，数组内第一个参数是 generator 函数，第二个是类型配置。 </p>\n<h4 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a>index.js</h4><p>参考之前的 redux-saga 的组件，我们基本上调整内容很少。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"dva\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; globalState, dispatch &#125; = <span class=\"keyword\">this</span>.props</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;p&gt;COUNT:&#123;globalState.count&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: \"global/i</span>ncrement<span class=\"string\">\", payload: 1 &#125;) &#125;&gt;</span></span><br><span class=\"line\"><span class=\"string\">          +1</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: \"</span>global/decrement<span class=\"string\">\", payload: 1 &#125;) &#125;&gt;</span></span><br><span class=\"line\"><span class=\"string\">          -1</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: \"</span>global/incrementAsync<span class=\"string\">\", payload: 2 &#125;) &#125;&gt;</span></span><br><span class=\"line\"><span class=\"string\">          +2 async takeEvery</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: \"</span>global/decrementAsync<span class=\"string\">\", payload: 2 &#125;) &#125;&gt;</span></span><br><span class=\"line\"><span class=\"string\">          -2 async takeLatest</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    )</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">const mapStateToProps = state =&gt; (&#123; globalState: state.global &#125;)</span></span><br><span class=\"line\"><span class=\"string\">export default connect(mapStateToProps)(Counter)</span></span><br></pre></td></tr></table></figure>\n\n<p>主要的区别是，我们由于定义了一个全局 model，叫做 <code>global</code>（在 <code>models/global.js</code> 中定义），所以调用时候必须加上命名空间。即 <code>dispatch({ type: &quot;global/increment&quot;, payload: 1 }</code>。</p>\n<p>其他文件都不需要再修改了。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>终于到最后一篇文章了。这次开始学习 umi 架构的 redux 用法。</p>\n<p>对于 umi （dva）体系，主要是集成了 react react-router react-redux redux-saga 等。比起 redux-saga，好处是做了高度封装，将原本的 reducer.js 和 sagas.js 统一到了一个 model.js 中。</p>","more":"<p>创建 umi 架构项目，可以通过官方脚手架来完成。具体可参考 <a href=\"https://umijs.org/\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<p>创建项目后，配置文件等不进行调整，因为这次主要学习 model.js 的写法而已。</p>\n<h2 id=\"直接上代码\"><a href=\"#直接上代码\" class=\"headerlink\" title=\"直接上代码\"></a>直接上代码</h2><p>本次的示例代码 <a href=\"https://github.com/yukapril/learning/tree/master/react-umi\" target=\"_blank\" rel=\"noopener\">见此</a>。</p>\n<p>相对于之前的 redux-saga 项目，我们只需要调整两个文件。一个是页面组件，负责页面展示（按钮控制）的功能调用 dispatch 轻微调整；以及一个 model 文件，来代替原本的 reducer 和 sagas 文件。</p>\n<h4 id=\"models-global-js\"><a href=\"#models-global-js\" class=\"headerlink\" title=\"models/global.js\"></a>models/global.js</h4><p>我们先创建一个 model 文件，内容如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> delay = <span class=\"function\"><span class=\"params\">timeout</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> setTimeout(resolve, timeout))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  namespace: <span class=\"string\">'global'</span>,</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">10</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  reducers: &#123;</span><br><span class=\"line\">    increment (state, action) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        count: state.count + action.payload,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    decrement (state, action) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        count: state.count - action.payload,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  effects: &#123;</span><br><span class=\"line\">    *incrementAsync (action, &#123; put &#125;) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'increment'</span>, <span class=\"attr\">payload</span>: action.payload &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    decrementAsync: [</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\">action, &#123; put &#125;</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'decrement'</span>, <span class=\"attr\">payload</span>: action.payload &#125;)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">type</span>: <span class=\"string\">'takeLatest'</span> &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于在 umi 体系下没找到 delay 方法，所以我直接实现了一下。在 redux-saga 例子中，官方是提供 delay 方法的，所以直接引用的。</p>\n<p>按照官方的格式，我们写一个对象（如上代码），定义了一些属性。其中定义了一个 <code>namespace: &#39;global&#39;</code>，即这是一个命名空间为 <code>global</code> 的 model。后续我们在读取状态、dispatch 时候都要用到。</p>\n<p><code>state</code> 中存放初始化的状态。</p>\n<p>在组件内 dispatch 后，会根据调用的类型直接路由到对应的 <code>reducers</code> 或者 <code>effects</code>。</p>\n<p><code>reducers</code> 和之前 redux 中用法一样，负责同步修改 <code>state</code> 内容。注意也是要返回一个新的 <code>state</code> 对象，并且函数必须是无副作用的。</p>\n<p><code>effects</code> 就是处理副作用的位置。完成副作用（比如异步获取数据）后，通过 <code>put</code>（相当于 dispatch）调用后续合适的 <code>reducers</code> 方法，完成 <code>state</code> 更新。这里要注意的是，通过 <code>put</code> 调用，直接写类型即可，不需要写命名空间。即 <strong>不用写成 <code>put({ type: &#39;global/increment&#39;, payload: action.payload })</code></strong>。</p>\n<p>这个例子 <code>effects</code> 写了两种用法。</p>\n<p>一种是默认的 <code>takeEvery</code>，在 redux-saga 中我们接触过它。默认写法的语法是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*incrementAsync (action, effects) &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另一种是 <code>takeLatest</code>，这个不是默认值，所以需要配置，语法是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">decrementAsync: [</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\">action, effects</span>) </span>&#123;&#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">type</span>: <span class=\"string\">'takeLatest'</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>两种的区别在于，入口一个是 generator 函数（有星号），一个是普通数组，数组内第一个参数是 generator 函数，第二个是类型配置。 </p>\n<h4 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a>index.js</h4><p>参考之前的 redux-saga 的组件，我们基本上调整内容很少。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"dva\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; globalState, dispatch &#125; = <span class=\"keyword\">this</span>.props</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;p&gt;COUNT:&#123;globalState.count&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: \"global/i</span>ncrement<span class=\"string\">\", payload: 1 &#125;) &#125;&gt;</span></span><br><span class=\"line\"><span class=\"string\">          +1</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: \"</span>global/decrement<span class=\"string\">\", payload: 1 &#125;) &#125;&gt;</span></span><br><span class=\"line\"><span class=\"string\">          -1</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: \"</span>global/incrementAsync<span class=\"string\">\", payload: 2 &#125;) &#125;&gt;</span></span><br><span class=\"line\"><span class=\"string\">          +2 async takeEvery</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: \"</span>global/decrementAsync<span class=\"string\">\", payload: 2 &#125;) &#125;&gt;</span></span><br><span class=\"line\"><span class=\"string\">          -2 async takeLatest</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    )</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">const mapStateToProps = state =&gt; (&#123; globalState: state.global &#125;)</span></span><br><span class=\"line\"><span class=\"string\">export default connect(mapStateToProps)(Counter)</span></span><br></pre></td></tr></table></figure>\n\n<p>主要的区别是，我们由于定义了一个全局 model，叫做 <code>global</code>（在 <code>models/global.js</code> 中定义），所以调用时候必须加上命名空间。即 <code>dispatch({ type: &quot;global/increment&quot;, payload: 1 }</code>。</p>\n<p>其他文件都不需要再修改了。</p>\n<p>–END–</p>"},{"layout":"post","title":"IKBC F108 白色背光普通版说明书","date":"2019-12-21T15:50:00.000Z","_content":"\n最近一直在玩 GH60，主要是公司笔记本按键有点小问题，否则我也不会外接键盘，凑合着用了。\n\n突然想起来自己还有一把 IKBC F108，就拿出来把玩下，结果发现没有说明书根本不会用。\n\n<!-- more -->\n\n当初本想说明书这东西非常好找，就扔掉了盒子，以及 10 颗送的键帽（键帽还是可惜了，可以留下来做补充啊）。结果现在发现 F108 居然升级成 RGB 灯光了，并且特殊按键按法竟然不一致...\n\n想来想去，还是自己写一份特殊按键说明书吧，否则以后在用的时候真没办法了。\n\n\n要说明的是，我的是白色背光普通版，2017 年的，后来有升级款，RGB 灯，按键在此基础上还增加了很多功能，比如切换 Ctrl 位置等，羡慕他们一下。\n\n再次重申下，部分按键白色背光版和新的 RGB 版并不相同。比如灯光控制，新老款会有按键配置冲突的。\n\n## IKBC F108 白色背光款（普通款）按键说明\n\n#### `ScrLk` 倒计时定时器\n\n使用 `F1~F12` 及 `1~9` 控制时间，设置完成按 `Enter` 确认，或按 `End` 取消。\n\n> ScrLk 设置倒计时，使用F1一行按键表示x10分钟，最多120分钟，使用字母上方数字表示1-9分钟。这样最多设置129分钟。\n>\n> 按下ScrLk后，所有灯管熄灭，只有F1~F12和数字键亮灯，同时Enter和END表示完成和取消。选中的时间，使用最亮灯光提示。结束前一分钟，整个字母键盘区（不算空格共计60个按键）开始倒计时，一个一个灯熄灭。全部结束后，灯光闪烁提示。此时需要按 End 取消。\n\n#### Pause 爆炸定时器\n\n用法同 `scrLk` 倒计时定时器，只不过结束后效果为爆炸。并且设置时间不能超过 10 分钟。\n\n#### `Fn + PrtSc` 切换键盘布局\n\n布局| 按键次数 | 空格左侧灯光效果\n---|---|---\nQwerty | 1 | 不亮\nQwerty(Win Alt 交换) 即 Mac 布局 | 2 | 亮\nDvorak | 3 | 亮\nColemak | 4 | 亮\n\n#### `Fn + LWin` 屏蔽 win 键\n\n#### `Fn + RWin` 解锁 win 键\n\n#### `Fn + F1~F4` 首字延迟加速\n\n按下字母不松手，屏幕第二次显示该字母需要等待的时间。F1 档最慢，F4 档最快。设置为 F4 档，会出现按了一下，结果字母上屏幕好几个的情况。\n\n#### `Fn + F5~F8` 重复延迟加速\n\n按下字母不松手，屏幕第二次显示该字母后重复显示的速度，F5 档最慢，F8 档最快。设置为 F8 档，会出现一旦没松手，屏幕按键后续哗哗哗的非常高速的上屏。\n\n#### `Fn + F9` 显示当前的加速效果\n\n显示当前的首字延迟加速和重复延迟加速选中的速度，在F1~F8按键上用灯光显示。\n\n#### `Fn + F10` 关闭所有按键加速\n\n#### `Fn + F12` 灯光切换\n\n效果 | 按键次数\n---|---\n全开灯 | 1\n呼吸灯 | 2\n点按灯（按那个那个亮）| 3\n点那个开始向两边扩散亮| 4\n点那个开始从当前行向两边扩散亮| 5\n跑马灯（从左上角依次跑动亮）| 6\n瞎特么亮 | 7\n按行上下扫动亮| 8\n主键盘区右下角开始倒序亮（60个按键，正好一分钟） | 9\n\n#### `Fn + 1~9` 自定义灯光效果\n\n首先按 `Fn + 1`（如果编辑第 1 组效果的话），之后按 `Fn + Esc下面的那个点` 启动编辑模式，之后按按键调节灯光，完成后继续按 `Fn + Esc下面的那个点` 保存。\n\n之后可以按 `Fn + 1` 启动这组效果，可以继续按 `Fn + 1` 切换效果。默认是常亮，切换后可以为呼吸灯。\n\n#### `Fn + 0` 关闭灯光\n\n#### `Fn + 上箭头/下箭头` 调节灯光亮度\n\n共有六种灯光亮度可以调节。\n\n不是所有的灯光都支持调节亮度，比如呼吸灯，就不可以调节。\n\n#### `Fn + 左箭头/右箭头` 调节灯光闪烁速度\n\n好像有五种速度可以调节。\n\n不是所有灯光都支持调节速度，比如常亮，就不生效。\n\n#### `Fn + R` 重置键盘\n\n需要按住5秒，成功后小键盘区域的三个指示灯进行闪烁提示。\n\n#### `Fn + S` 保存当前灯光和配置状态\n\n首先要说明，默认灯光效果是 `Fn + F12`，键盘全亮状态。如果没有保存过，每次开机后键盘都会全亮，需要手动关闭灯光。此时只需要 `Fn + 0` 关闭灯光，之后保存 `Fn + S` 即可。\n\n如果当前设置 `Fn + 1` 启用了第一组灯光效果，并且切换到了 MacOS 键盘布局，此时保存后，下次开机就是第一组灯光和 MacOS 布局。\n\n这个功能在写作的今天才知道。之前 windows 都是每次开机手动关闭灯光，太傻了...\n\n## 可惜\n\n整个键盘主要在灯光上做了很大的努力，但是没有效仿 Poker 那种改键的能力，特别可惜。\n\n不过后续的 F108 RGB 版就可以像 minila 一样针对常用的方案进行调整了。\n\n如果是接 Mac 还好，通过模式调整，可以调整键位和苹果一致。不过苹果本身就有 karabiner-elements 来进行改键。\n\n如果是 windows，想交换 Ctrl / Alt 或者 Ctrl / CapsLk，通过键盘自己就没办法了。用于我目前在用客制化 GH60，所以没研究过 windows 改键，据说 MapKeyBoard 2.1 可以实现（免费的最后一个版本，后续改为收费的 HotKeyControl）。\n\n此外这个键盘不支持层编程，或者录制宏。层编程就算奢望，这种功能主要在 60 键盘上提供，104 键盘提供的太少了。但是如果想做定制可玩的键盘，还是建议他们后续延续 Poker 的录制宏能力。\n\n自己也就是买了之后当时在公司用了一年吧，后来公司搬家也就很少用了，直接用笔记本比较省空间。据说 IKBC 键盘故障率还是挺高的，不过我用的算是少也就没遇到什么，只是键盘背后的贴脚、铭牌早就掉了。手感现在感觉一般般，符合当时 500 的价位。\n\n还是喜欢自己的 GH60，按键想怎么定义就怎么定义，灯光对我来说意义太小了。\n\n--END--","source":"_posts/2019/2019-12-21-ikbc-f108.md","raw":"---\nlayout: post\ntitle: IKBC F108 白色背光普通版说明书\ndate: 2019-12-21 15:50:00 GMT+0800\ncategories: [外设]\ntags:  [键盘,ikbc,f108]\n---\n\n最近一直在玩 GH60，主要是公司笔记本按键有点小问题，否则我也不会外接键盘，凑合着用了。\n\n突然想起来自己还有一把 IKBC F108，就拿出来把玩下，结果发现没有说明书根本不会用。\n\n<!-- more -->\n\n当初本想说明书这东西非常好找，就扔掉了盒子，以及 10 颗送的键帽（键帽还是可惜了，可以留下来做补充啊）。结果现在发现 F108 居然升级成 RGB 灯光了，并且特殊按键按法竟然不一致...\n\n想来想去，还是自己写一份特殊按键说明书吧，否则以后在用的时候真没办法了。\n\n\n要说明的是，我的是白色背光普通版，2017 年的，后来有升级款，RGB 灯，按键在此基础上还增加了很多功能，比如切换 Ctrl 位置等，羡慕他们一下。\n\n再次重申下，部分按键白色背光版和新的 RGB 版并不相同。比如灯光控制，新老款会有按键配置冲突的。\n\n## IKBC F108 白色背光款（普通款）按键说明\n\n#### `ScrLk` 倒计时定时器\n\n使用 `F1~F12` 及 `1~9` 控制时间，设置完成按 `Enter` 确认，或按 `End` 取消。\n\n> ScrLk 设置倒计时，使用F1一行按键表示x10分钟，最多120分钟，使用字母上方数字表示1-9分钟。这样最多设置129分钟。\n>\n> 按下ScrLk后，所有灯管熄灭，只有F1~F12和数字键亮灯，同时Enter和END表示完成和取消。选中的时间，使用最亮灯光提示。结束前一分钟，整个字母键盘区（不算空格共计60个按键）开始倒计时，一个一个灯熄灭。全部结束后，灯光闪烁提示。此时需要按 End 取消。\n\n#### Pause 爆炸定时器\n\n用法同 `scrLk` 倒计时定时器，只不过结束后效果为爆炸。并且设置时间不能超过 10 分钟。\n\n#### `Fn + PrtSc` 切换键盘布局\n\n布局| 按键次数 | 空格左侧灯光效果\n---|---|---\nQwerty | 1 | 不亮\nQwerty(Win Alt 交换) 即 Mac 布局 | 2 | 亮\nDvorak | 3 | 亮\nColemak | 4 | 亮\n\n#### `Fn + LWin` 屏蔽 win 键\n\n#### `Fn + RWin` 解锁 win 键\n\n#### `Fn + F1~F4` 首字延迟加速\n\n按下字母不松手，屏幕第二次显示该字母需要等待的时间。F1 档最慢，F4 档最快。设置为 F4 档，会出现按了一下，结果字母上屏幕好几个的情况。\n\n#### `Fn + F5~F8` 重复延迟加速\n\n按下字母不松手，屏幕第二次显示该字母后重复显示的速度，F5 档最慢，F8 档最快。设置为 F8 档，会出现一旦没松手，屏幕按键后续哗哗哗的非常高速的上屏。\n\n#### `Fn + F9` 显示当前的加速效果\n\n显示当前的首字延迟加速和重复延迟加速选中的速度，在F1~F8按键上用灯光显示。\n\n#### `Fn + F10` 关闭所有按键加速\n\n#### `Fn + F12` 灯光切换\n\n效果 | 按键次数\n---|---\n全开灯 | 1\n呼吸灯 | 2\n点按灯（按那个那个亮）| 3\n点那个开始向两边扩散亮| 4\n点那个开始从当前行向两边扩散亮| 5\n跑马灯（从左上角依次跑动亮）| 6\n瞎特么亮 | 7\n按行上下扫动亮| 8\n主键盘区右下角开始倒序亮（60个按键，正好一分钟） | 9\n\n#### `Fn + 1~9` 自定义灯光效果\n\n首先按 `Fn + 1`（如果编辑第 1 组效果的话），之后按 `Fn + Esc下面的那个点` 启动编辑模式，之后按按键调节灯光，完成后继续按 `Fn + Esc下面的那个点` 保存。\n\n之后可以按 `Fn + 1` 启动这组效果，可以继续按 `Fn + 1` 切换效果。默认是常亮，切换后可以为呼吸灯。\n\n#### `Fn + 0` 关闭灯光\n\n#### `Fn + 上箭头/下箭头` 调节灯光亮度\n\n共有六种灯光亮度可以调节。\n\n不是所有的灯光都支持调节亮度，比如呼吸灯，就不可以调节。\n\n#### `Fn + 左箭头/右箭头` 调节灯光闪烁速度\n\n好像有五种速度可以调节。\n\n不是所有灯光都支持调节速度，比如常亮，就不生效。\n\n#### `Fn + R` 重置键盘\n\n需要按住5秒，成功后小键盘区域的三个指示灯进行闪烁提示。\n\n#### `Fn + S` 保存当前灯光和配置状态\n\n首先要说明，默认灯光效果是 `Fn + F12`，键盘全亮状态。如果没有保存过，每次开机后键盘都会全亮，需要手动关闭灯光。此时只需要 `Fn + 0` 关闭灯光，之后保存 `Fn + S` 即可。\n\n如果当前设置 `Fn + 1` 启用了第一组灯光效果，并且切换到了 MacOS 键盘布局，此时保存后，下次开机就是第一组灯光和 MacOS 布局。\n\n这个功能在写作的今天才知道。之前 windows 都是每次开机手动关闭灯光，太傻了...\n\n## 可惜\n\n整个键盘主要在灯光上做了很大的努力，但是没有效仿 Poker 那种改键的能力，特别可惜。\n\n不过后续的 F108 RGB 版就可以像 minila 一样针对常用的方案进行调整了。\n\n如果是接 Mac 还好，通过模式调整，可以调整键位和苹果一致。不过苹果本身就有 karabiner-elements 来进行改键。\n\n如果是 windows，想交换 Ctrl / Alt 或者 Ctrl / CapsLk，通过键盘自己就没办法了。用于我目前在用客制化 GH60，所以没研究过 windows 改键，据说 MapKeyBoard 2.1 可以实现（免费的最后一个版本，后续改为收费的 HotKeyControl）。\n\n此外这个键盘不支持层编程，或者录制宏。层编程就算奢望，这种功能主要在 60 键盘上提供，104 键盘提供的太少了。但是如果想做定制可玩的键盘，还是建议他们后续延续 Poker 的录制宏能力。\n\n自己也就是买了之后当时在公司用了一年吧，后来公司搬家也就很少用了，直接用笔记本比较省空间。据说 IKBC 键盘故障率还是挺高的，不过我用的算是少也就没遇到什么，只是键盘背后的贴脚、铭牌早就掉了。手感现在感觉一般般，符合当时 500 的价位。\n\n还是喜欢自己的 GH60，按键想怎么定义就怎么定义，灯光对我来说意义太小了。\n\n--END--","slug":"2019-2019-12-21-ikbc-f108","published":1,"updated":"2020-03-02T07:16:34.763Z","comments":1,"photos":[],"link":"","_id":"cka5ik8dr007knybgxc112e48","content":"<p>最近一直在玩 GH60，主要是公司笔记本按键有点小问题，否则我也不会外接键盘，凑合着用了。</p>\n<p>突然想起来自己还有一把 IKBC F108，就拿出来把玩下，结果发现没有说明书根本不会用。</p>\n<a id=\"more\"></a>\n\n<p>当初本想说明书这东西非常好找，就扔掉了盒子，以及 10 颗送的键帽（键帽还是可惜了，可以留下来做补充啊）。结果现在发现 F108 居然升级成 RGB 灯光了，并且特殊按键按法竟然不一致…</p>\n<p>想来想去，还是自己写一份特殊按键说明书吧，否则以后在用的时候真没办法了。</p>\n<p>要说明的是，我的是白色背光普通版，2017 年的，后来有升级款，RGB 灯，按键在此基础上还增加了很多功能，比如切换 Ctrl 位置等，羡慕他们一下。</p>\n<p>再次重申下，部分按键白色背光版和新的 RGB 版并不相同。比如灯光控制，新老款会有按键配置冲突的。</p>\n<h2 id=\"IKBC-F108-白色背光款（普通款）按键说明\"><a href=\"#IKBC-F108-白色背光款（普通款）按键说明\" class=\"headerlink\" title=\"IKBC F108 白色背光款（普通款）按键说明\"></a>IKBC F108 白色背光款（普通款）按键说明</h2><h4 id=\"ScrLk-倒计时定时器\"><a href=\"#ScrLk-倒计时定时器\" class=\"headerlink\" title=\"ScrLk 倒计时定时器\"></a><code>ScrLk</code> 倒计时定时器</h4><p>使用 <code>F1~F12</code> 及 <code>1~9</code> 控制时间，设置完成按 <code>Enter</code> 确认，或按 <code>End</code> 取消。</p>\n<blockquote>\n<p>ScrLk 设置倒计时，使用F1一行按键表示x10分钟，最多120分钟，使用字母上方数字表示1-9分钟。这样最多设置129分钟。</p>\n<p>按下ScrLk后，所有灯管熄灭，只有F1~F12和数字键亮灯，同时Enter和END表示完成和取消。选中的时间，使用最亮灯光提示。结束前一分钟，整个字母键盘区（不算空格共计60个按键）开始倒计时，一个一个灯熄灭。全部结束后，灯光闪烁提示。此时需要按 End 取消。</p>\n</blockquote>\n<h4 id=\"Pause-爆炸定时器\"><a href=\"#Pause-爆炸定时器\" class=\"headerlink\" title=\"Pause 爆炸定时器\"></a>Pause 爆炸定时器</h4><p>用法同 <code>scrLk</code> 倒计时定时器，只不过结束后效果为爆炸。并且设置时间不能超过 10 分钟。</p>\n<h4 id=\"Fn-PrtSc-切换键盘布局\"><a href=\"#Fn-PrtSc-切换键盘布局\" class=\"headerlink\" title=\"Fn + PrtSc 切换键盘布局\"></a><code>Fn + PrtSc</code> 切换键盘布局</h4><table>\n<thead>\n<tr>\n<th>布局</th>\n<th>按键次数</th>\n<th>空格左侧灯光效果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Qwerty</td>\n<td>1</td>\n<td>不亮</td>\n</tr>\n<tr>\n<td>Qwerty(Win Alt 交换) 即 Mac 布局</td>\n<td>2</td>\n<td>亮</td>\n</tr>\n<tr>\n<td>Dvorak</td>\n<td>3</td>\n<td>亮</td>\n</tr>\n<tr>\n<td>Colemak</td>\n<td>4</td>\n<td>亮</td>\n</tr>\n</tbody></table>\n<h4 id=\"Fn-LWin-屏蔽-win-键\"><a href=\"#Fn-LWin-屏蔽-win-键\" class=\"headerlink\" title=\"Fn + LWin 屏蔽 win 键\"></a><code>Fn + LWin</code> 屏蔽 win 键</h4><h4 id=\"Fn-RWin-解锁-win-键\"><a href=\"#Fn-RWin-解锁-win-键\" class=\"headerlink\" title=\"Fn + RWin 解锁 win 键\"></a><code>Fn + RWin</code> 解锁 win 键</h4><h4 id=\"Fn-F1-F4-首字延迟加速\"><a href=\"#Fn-F1-F4-首字延迟加速\" class=\"headerlink\" title=\"Fn + F1~F4 首字延迟加速\"></a><code>Fn + F1~F4</code> 首字延迟加速</h4><p>按下字母不松手，屏幕第二次显示该字母需要等待的时间。F1 档最慢，F4 档最快。设置为 F4 档，会出现按了一下，结果字母上屏幕好几个的情况。</p>\n<h4 id=\"Fn-F5-F8-重复延迟加速\"><a href=\"#Fn-F5-F8-重复延迟加速\" class=\"headerlink\" title=\"Fn + F5~F8 重复延迟加速\"></a><code>Fn + F5~F8</code> 重复延迟加速</h4><p>按下字母不松手，屏幕第二次显示该字母后重复显示的速度，F5 档最慢，F8 档最快。设置为 F8 档，会出现一旦没松手，屏幕按键后续哗哗哗的非常高速的上屏。</p>\n<h4 id=\"Fn-F9-显示当前的加速效果\"><a href=\"#Fn-F9-显示当前的加速效果\" class=\"headerlink\" title=\"Fn + F9 显示当前的加速效果\"></a><code>Fn + F9</code> 显示当前的加速效果</h4><p>显示当前的首字延迟加速和重复延迟加速选中的速度，在F1~F8按键上用灯光显示。</p>\n<h4 id=\"Fn-F10-关闭所有按键加速\"><a href=\"#Fn-F10-关闭所有按键加速\" class=\"headerlink\" title=\"Fn + F10 关闭所有按键加速\"></a><code>Fn + F10</code> 关闭所有按键加速</h4><h4 id=\"Fn-F12-灯光切换\"><a href=\"#Fn-F12-灯光切换\" class=\"headerlink\" title=\"Fn + F12 灯光切换\"></a><code>Fn + F12</code> 灯光切换</h4><table>\n<thead>\n<tr>\n<th>效果</th>\n<th>按键次数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>全开灯</td>\n<td>1</td>\n</tr>\n<tr>\n<td>呼吸灯</td>\n<td>2</td>\n</tr>\n<tr>\n<td>点按灯（按那个那个亮）</td>\n<td>3</td>\n</tr>\n<tr>\n<td>点那个开始向两边扩散亮</td>\n<td>4</td>\n</tr>\n<tr>\n<td>点那个开始从当前行向两边扩散亮</td>\n<td>5</td>\n</tr>\n<tr>\n<td>跑马灯（从左上角依次跑动亮）</td>\n<td>6</td>\n</tr>\n<tr>\n<td>瞎特么亮</td>\n<td>7</td>\n</tr>\n<tr>\n<td>按行上下扫动亮</td>\n<td>8</td>\n</tr>\n<tr>\n<td>主键盘区右下角开始倒序亮（60个按键，正好一分钟）</td>\n<td>9</td>\n</tr>\n</tbody></table>\n<h4 id=\"Fn-1-9-自定义灯光效果\"><a href=\"#Fn-1-9-自定义灯光效果\" class=\"headerlink\" title=\"Fn + 1~9 自定义灯光效果\"></a><code>Fn + 1~9</code> 自定义灯光效果</h4><p>首先按 <code>Fn + 1</code>（如果编辑第 1 组效果的话），之后按 <code>Fn + Esc下面的那个点</code> 启动编辑模式，之后按按键调节灯光，完成后继续按 <code>Fn + Esc下面的那个点</code> 保存。</p>\n<p>之后可以按 <code>Fn + 1</code> 启动这组效果，可以继续按 <code>Fn + 1</code> 切换效果。默认是常亮，切换后可以为呼吸灯。</p>\n<h4 id=\"Fn-0-关闭灯光\"><a href=\"#Fn-0-关闭灯光\" class=\"headerlink\" title=\"Fn + 0 关闭灯光\"></a><code>Fn + 0</code> 关闭灯光</h4><h4 id=\"Fn-上箭头-下箭头-调节灯光亮度\"><a href=\"#Fn-上箭头-下箭头-调节灯光亮度\" class=\"headerlink\" title=\"Fn + 上箭头/下箭头 调节灯光亮度\"></a><code>Fn + 上箭头/下箭头</code> 调节灯光亮度</h4><p>共有六种灯光亮度可以调节。</p>\n<p>不是所有的灯光都支持调节亮度，比如呼吸灯，就不可以调节。</p>\n<h4 id=\"Fn-左箭头-右箭头-调节灯光闪烁速度\"><a href=\"#Fn-左箭头-右箭头-调节灯光闪烁速度\" class=\"headerlink\" title=\"Fn + 左箭头/右箭头 调节灯光闪烁速度\"></a><code>Fn + 左箭头/右箭头</code> 调节灯光闪烁速度</h4><p>好像有五种速度可以调节。</p>\n<p>不是所有灯光都支持调节速度，比如常亮，就不生效。</p>\n<h4 id=\"Fn-R-重置键盘\"><a href=\"#Fn-R-重置键盘\" class=\"headerlink\" title=\"Fn + R 重置键盘\"></a><code>Fn + R</code> 重置键盘</h4><p>需要按住5秒，成功后小键盘区域的三个指示灯进行闪烁提示。</p>\n<h4 id=\"Fn-S-保存当前灯光和配置状态\"><a href=\"#Fn-S-保存当前灯光和配置状态\" class=\"headerlink\" title=\"Fn + S 保存当前灯光和配置状态\"></a><code>Fn + S</code> 保存当前灯光和配置状态</h4><p>首先要说明，默认灯光效果是 <code>Fn + F12</code>，键盘全亮状态。如果没有保存过，每次开机后键盘都会全亮，需要手动关闭灯光。此时只需要 <code>Fn + 0</code> 关闭灯光，之后保存 <code>Fn + S</code> 即可。</p>\n<p>如果当前设置 <code>Fn + 1</code> 启用了第一组灯光效果，并且切换到了 MacOS 键盘布局，此时保存后，下次开机就是第一组灯光和 MacOS 布局。</p>\n<p>这个功能在写作的今天才知道。之前 windows 都是每次开机手动关闭灯光，太傻了…</p>\n<h2 id=\"可惜\"><a href=\"#可惜\" class=\"headerlink\" title=\"可惜\"></a>可惜</h2><p>整个键盘主要在灯光上做了很大的努力，但是没有效仿 Poker 那种改键的能力，特别可惜。</p>\n<p>不过后续的 F108 RGB 版就可以像 minila 一样针对常用的方案进行调整了。</p>\n<p>如果是接 Mac 还好，通过模式调整，可以调整键位和苹果一致。不过苹果本身就有 karabiner-elements 来进行改键。</p>\n<p>如果是 windows，想交换 Ctrl / Alt 或者 Ctrl / CapsLk，通过键盘自己就没办法了。用于我目前在用客制化 GH60，所以没研究过 windows 改键，据说 MapKeyBoard 2.1 可以实现（免费的最后一个版本，后续改为收费的 HotKeyControl）。</p>\n<p>此外这个键盘不支持层编程，或者录制宏。层编程就算奢望，这种功能主要在 60 键盘上提供，104 键盘提供的太少了。但是如果想做定制可玩的键盘，还是建议他们后续延续 Poker 的录制宏能力。</p>\n<p>自己也就是买了之后当时在公司用了一年吧，后来公司搬家也就很少用了，直接用笔记本比较省空间。据说 IKBC 键盘故障率还是挺高的，不过我用的算是少也就没遇到什么，只是键盘背后的贴脚、铭牌早就掉了。手感现在感觉一般般，符合当时 500 的价位。</p>\n<p>还是喜欢自己的 GH60，按键想怎么定义就怎么定义，灯光对我来说意义太小了。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>最近一直在玩 GH60，主要是公司笔记本按键有点小问题，否则我也不会外接键盘，凑合着用了。</p>\n<p>突然想起来自己还有一把 IKBC F108，就拿出来把玩下，结果发现没有说明书根本不会用。</p>","more":"<p>当初本想说明书这东西非常好找，就扔掉了盒子，以及 10 颗送的键帽（键帽还是可惜了，可以留下来做补充啊）。结果现在发现 F108 居然升级成 RGB 灯光了，并且特殊按键按法竟然不一致…</p>\n<p>想来想去，还是自己写一份特殊按键说明书吧，否则以后在用的时候真没办法了。</p>\n<p>要说明的是，我的是白色背光普通版，2017 年的，后来有升级款，RGB 灯，按键在此基础上还增加了很多功能，比如切换 Ctrl 位置等，羡慕他们一下。</p>\n<p>再次重申下，部分按键白色背光版和新的 RGB 版并不相同。比如灯光控制，新老款会有按键配置冲突的。</p>\n<h2 id=\"IKBC-F108-白色背光款（普通款）按键说明\"><a href=\"#IKBC-F108-白色背光款（普通款）按键说明\" class=\"headerlink\" title=\"IKBC F108 白色背光款（普通款）按键说明\"></a>IKBC F108 白色背光款（普通款）按键说明</h2><h4 id=\"ScrLk-倒计时定时器\"><a href=\"#ScrLk-倒计时定时器\" class=\"headerlink\" title=\"ScrLk 倒计时定时器\"></a><code>ScrLk</code> 倒计时定时器</h4><p>使用 <code>F1~F12</code> 及 <code>1~9</code> 控制时间，设置完成按 <code>Enter</code> 确认，或按 <code>End</code> 取消。</p>\n<blockquote>\n<p>ScrLk 设置倒计时，使用F1一行按键表示x10分钟，最多120分钟，使用字母上方数字表示1-9分钟。这样最多设置129分钟。</p>\n<p>按下ScrLk后，所有灯管熄灭，只有F1~F12和数字键亮灯，同时Enter和END表示完成和取消。选中的时间，使用最亮灯光提示。结束前一分钟，整个字母键盘区（不算空格共计60个按键）开始倒计时，一个一个灯熄灭。全部结束后，灯光闪烁提示。此时需要按 End 取消。</p>\n</blockquote>\n<h4 id=\"Pause-爆炸定时器\"><a href=\"#Pause-爆炸定时器\" class=\"headerlink\" title=\"Pause 爆炸定时器\"></a>Pause 爆炸定时器</h4><p>用法同 <code>scrLk</code> 倒计时定时器，只不过结束后效果为爆炸。并且设置时间不能超过 10 分钟。</p>\n<h4 id=\"Fn-PrtSc-切换键盘布局\"><a href=\"#Fn-PrtSc-切换键盘布局\" class=\"headerlink\" title=\"Fn + PrtSc 切换键盘布局\"></a><code>Fn + PrtSc</code> 切换键盘布局</h4><table>\n<thead>\n<tr>\n<th>布局</th>\n<th>按键次数</th>\n<th>空格左侧灯光效果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Qwerty</td>\n<td>1</td>\n<td>不亮</td>\n</tr>\n<tr>\n<td>Qwerty(Win Alt 交换) 即 Mac 布局</td>\n<td>2</td>\n<td>亮</td>\n</tr>\n<tr>\n<td>Dvorak</td>\n<td>3</td>\n<td>亮</td>\n</tr>\n<tr>\n<td>Colemak</td>\n<td>4</td>\n<td>亮</td>\n</tr>\n</tbody></table>\n<h4 id=\"Fn-LWin-屏蔽-win-键\"><a href=\"#Fn-LWin-屏蔽-win-键\" class=\"headerlink\" title=\"Fn + LWin 屏蔽 win 键\"></a><code>Fn + LWin</code> 屏蔽 win 键</h4><h4 id=\"Fn-RWin-解锁-win-键\"><a href=\"#Fn-RWin-解锁-win-键\" class=\"headerlink\" title=\"Fn + RWin 解锁 win 键\"></a><code>Fn + RWin</code> 解锁 win 键</h4><h4 id=\"Fn-F1-F4-首字延迟加速\"><a href=\"#Fn-F1-F4-首字延迟加速\" class=\"headerlink\" title=\"Fn + F1~F4 首字延迟加速\"></a><code>Fn + F1~F4</code> 首字延迟加速</h4><p>按下字母不松手，屏幕第二次显示该字母需要等待的时间。F1 档最慢，F4 档最快。设置为 F4 档，会出现按了一下，结果字母上屏幕好几个的情况。</p>\n<h4 id=\"Fn-F5-F8-重复延迟加速\"><a href=\"#Fn-F5-F8-重复延迟加速\" class=\"headerlink\" title=\"Fn + F5~F8 重复延迟加速\"></a><code>Fn + F5~F8</code> 重复延迟加速</h4><p>按下字母不松手，屏幕第二次显示该字母后重复显示的速度，F5 档最慢，F8 档最快。设置为 F8 档，会出现一旦没松手，屏幕按键后续哗哗哗的非常高速的上屏。</p>\n<h4 id=\"Fn-F9-显示当前的加速效果\"><a href=\"#Fn-F9-显示当前的加速效果\" class=\"headerlink\" title=\"Fn + F9 显示当前的加速效果\"></a><code>Fn + F9</code> 显示当前的加速效果</h4><p>显示当前的首字延迟加速和重复延迟加速选中的速度，在F1~F8按键上用灯光显示。</p>\n<h4 id=\"Fn-F10-关闭所有按键加速\"><a href=\"#Fn-F10-关闭所有按键加速\" class=\"headerlink\" title=\"Fn + F10 关闭所有按键加速\"></a><code>Fn + F10</code> 关闭所有按键加速</h4><h4 id=\"Fn-F12-灯光切换\"><a href=\"#Fn-F12-灯光切换\" class=\"headerlink\" title=\"Fn + F12 灯光切换\"></a><code>Fn + F12</code> 灯光切换</h4><table>\n<thead>\n<tr>\n<th>效果</th>\n<th>按键次数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>全开灯</td>\n<td>1</td>\n</tr>\n<tr>\n<td>呼吸灯</td>\n<td>2</td>\n</tr>\n<tr>\n<td>点按灯（按那个那个亮）</td>\n<td>3</td>\n</tr>\n<tr>\n<td>点那个开始向两边扩散亮</td>\n<td>4</td>\n</tr>\n<tr>\n<td>点那个开始从当前行向两边扩散亮</td>\n<td>5</td>\n</tr>\n<tr>\n<td>跑马灯（从左上角依次跑动亮）</td>\n<td>6</td>\n</tr>\n<tr>\n<td>瞎特么亮</td>\n<td>7</td>\n</tr>\n<tr>\n<td>按行上下扫动亮</td>\n<td>8</td>\n</tr>\n<tr>\n<td>主键盘区右下角开始倒序亮（60个按键，正好一分钟）</td>\n<td>9</td>\n</tr>\n</tbody></table>\n<h4 id=\"Fn-1-9-自定义灯光效果\"><a href=\"#Fn-1-9-自定义灯光效果\" class=\"headerlink\" title=\"Fn + 1~9 自定义灯光效果\"></a><code>Fn + 1~9</code> 自定义灯光效果</h4><p>首先按 <code>Fn + 1</code>（如果编辑第 1 组效果的话），之后按 <code>Fn + Esc下面的那个点</code> 启动编辑模式，之后按按键调节灯光，完成后继续按 <code>Fn + Esc下面的那个点</code> 保存。</p>\n<p>之后可以按 <code>Fn + 1</code> 启动这组效果，可以继续按 <code>Fn + 1</code> 切换效果。默认是常亮，切换后可以为呼吸灯。</p>\n<h4 id=\"Fn-0-关闭灯光\"><a href=\"#Fn-0-关闭灯光\" class=\"headerlink\" title=\"Fn + 0 关闭灯光\"></a><code>Fn + 0</code> 关闭灯光</h4><h4 id=\"Fn-上箭头-下箭头-调节灯光亮度\"><a href=\"#Fn-上箭头-下箭头-调节灯光亮度\" class=\"headerlink\" title=\"Fn + 上箭头/下箭头 调节灯光亮度\"></a><code>Fn + 上箭头/下箭头</code> 调节灯光亮度</h4><p>共有六种灯光亮度可以调节。</p>\n<p>不是所有的灯光都支持调节亮度，比如呼吸灯，就不可以调节。</p>\n<h4 id=\"Fn-左箭头-右箭头-调节灯光闪烁速度\"><a href=\"#Fn-左箭头-右箭头-调节灯光闪烁速度\" class=\"headerlink\" title=\"Fn + 左箭头/右箭头 调节灯光闪烁速度\"></a><code>Fn + 左箭头/右箭头</code> 调节灯光闪烁速度</h4><p>好像有五种速度可以调节。</p>\n<p>不是所有灯光都支持调节速度，比如常亮，就不生效。</p>\n<h4 id=\"Fn-R-重置键盘\"><a href=\"#Fn-R-重置键盘\" class=\"headerlink\" title=\"Fn + R 重置键盘\"></a><code>Fn + R</code> 重置键盘</h4><p>需要按住5秒，成功后小键盘区域的三个指示灯进行闪烁提示。</p>\n<h4 id=\"Fn-S-保存当前灯光和配置状态\"><a href=\"#Fn-S-保存当前灯光和配置状态\" class=\"headerlink\" title=\"Fn + S 保存当前灯光和配置状态\"></a><code>Fn + S</code> 保存当前灯光和配置状态</h4><p>首先要说明，默认灯光效果是 <code>Fn + F12</code>，键盘全亮状态。如果没有保存过，每次开机后键盘都会全亮，需要手动关闭灯光。此时只需要 <code>Fn + 0</code> 关闭灯光，之后保存 <code>Fn + S</code> 即可。</p>\n<p>如果当前设置 <code>Fn + 1</code> 启用了第一组灯光效果，并且切换到了 MacOS 键盘布局，此时保存后，下次开机就是第一组灯光和 MacOS 布局。</p>\n<p>这个功能在写作的今天才知道。之前 windows 都是每次开机手动关闭灯光，太傻了…</p>\n<h2 id=\"可惜\"><a href=\"#可惜\" class=\"headerlink\" title=\"可惜\"></a>可惜</h2><p>整个键盘主要在灯光上做了很大的努力，但是没有效仿 Poker 那种改键的能力，特别可惜。</p>\n<p>不过后续的 F108 RGB 版就可以像 minila 一样针对常用的方案进行调整了。</p>\n<p>如果是接 Mac 还好，通过模式调整，可以调整键位和苹果一致。不过苹果本身就有 karabiner-elements 来进行改键。</p>\n<p>如果是 windows，想交换 Ctrl / Alt 或者 Ctrl / CapsLk，通过键盘自己就没办法了。用于我目前在用客制化 GH60，所以没研究过 windows 改键，据说 MapKeyBoard 2.1 可以实现（免费的最后一个版本，后续改为收费的 HotKeyControl）。</p>\n<p>此外这个键盘不支持层编程，或者录制宏。层编程就算奢望，这种功能主要在 60 键盘上提供，104 键盘提供的太少了。但是如果想做定制可玩的键盘，还是建议他们后续延续 Poker 的录制宏能力。</p>\n<p>自己也就是买了之后当时在公司用了一年吧，后来公司搬家也就很少用了，直接用笔记本比较省空间。据说 IKBC 键盘故障率还是挺高的，不过我用的算是少也就没遇到什么，只是键盘背后的贴脚、铭牌早就掉了。手感现在感觉一般般，符合当时 500 的价位。</p>\n<p>还是喜欢自己的 GH60，按键想怎么定义就怎么定义，灯光对我来说意义太小了。</p>\n<p>–END–</p>"},{"layout":"post","title":"GH60 等客制化键盘刷固件方法","date":"2019-12-28T10:47:00.000Z","_content":"\n把自己的客制化 GH60 拿出来用了一段时间，期间也刷机很多次。由于当时的刷机方案过于陈旧，而且当时故障也挺多的，就重新研究了下客制化键盘的刷固件方法。\n\n<!-- more -->\n\n## 步骤\n\n主要分三步：\n1. 准备键盘布局，生成 raw 布局内容\n2. 将键盘布局 raw 转为 eep 文件\n3. 将 eep 刷入键盘\n\n本文方法不限 GH60 主板，只要第 2 步，第 3 步的工具支持就可以。\n\n## 准备键盘布局\n\n打开 [http://www.keyboard-layout-editor.com](http://www.keyboard-layout-editor.com)，选择顶部的 `Preset` 预设方案，选择一个和你键盘最接近的方案，这样后面就比较容易修改了。\n\n如果有别人配置好的对应布局链接也可以，省去了自己配置。\n\n如果有别人的 raw data，也可以直接复制到页面中间部分的选项卡 `raw data` 中。\n\n这里给出我的 GH60 Pure 布局的 raw 内容：\n\n```\n[{a:0},\"Esc\\n\\n\\n\\n~\\n`\",{a:4},\"!\\n1\\n\\n\\nF1\",\"@\\n2\\n\\n\\nF2\",\"#\\n3\\n\\n\\nF3\",\"$\\n4\\n\\n\\nF4\",\"%\\n5\\n\\n\\nF5\",\"^\\n6\\n\\n\\nF6\",\"&\\n7\\n\\n\\nF7\",\"*\\n8\\n\\n\\nF8\",\"(\\n9\\n\\n\\nF9\",\")\\n0\\n\\n\\nF10\",\"_\\n-\\n\\n\\nF11\",\"+\\n=\\n\\n\\nF12\",{w:2},\"Backspace\\n\\n\\n\\nDelete\"],\n[{w:1.5},\"Tab\",\"Q\",\"W\\n\\n\\n\\n↑\",\"E\",\"R\",\"T\",\"Y\\n\\n\\n\\nCalc\",\"U\",\"I@YUKAPRIL.COM\\n\\n\\n\\nIns\",\"O\",\"P\\n\\n\\n\\nPSc\",\"{\\n[\\n\\n\\nScrLk\",{a:0},\"}\\n]\\n\\n\\nPus\\nBrk\",{a:4,w:1.5},\"|\\n\\\\\"],\n[{w:1.75},\"Caps Lock\",\"A\\n\\n\\n\\n←\",\"S\\n\\n\\n\\n↓\",\"D\\n\\n\\n\\n→\",\"F\",\"G\",\"H\",\"J\",\"K\",\"L\",\":\\n;\\n\\n\\nHome\",\"\\\"\\n'\\n\\n\\nPgUp\",{w:2.25},\"Enter\"],\n[{w:2.25},\"Shift\",\"Z\",\"X\\n\\n\\n\\nApp\",\"C\\n\\n\\n\\nFn2\",\"V\\n\\n\\n\\nFn1\",\"B\\n\\n\\n\\nFn3\",\"N\\n\\n\\n\\nVolDn\",\"M\\n\\n\\n\\nVolUp\",\"<\\n,\\n\\n\\nMute\",\">\\n.\\n\\n\\nEnd\",\"?\\n/\\n\\n\\nPgDn\",{w:1.75},\"UP\",\"Delete\"],\n[{w:1.25},\"Alt\",{w:1.25},\"Win\",{w:1.25},\"Ctrl\",{w:6.25},\"Space\",{w:1.25},\"Fn0\",{w:1.25},\"LEFT\",{w:1.25},\"DOWN\",{w:1.25},\"RIGHT\"]\n```\n\n至于如何编辑按键，我也不太熟悉，我也只会调整大小，增加一个按键而已。\n\n按键定义，可以参考这里 [https://tkg.io/#help](https://tkg.io/#help)\n\n一般来讲，App 表示鼠标右键单击， Fn1 表示灯光开关，Fn2 表示灯光减小等，Fn3 表示灯光增加等。\n\n编辑好后，切换到 `raw data` 选项卡，把内容复制出来。\n\n我的理解是（**估计不太对**）： \n\n* Top Legend 第一列是按住 shift 后的键值\n* Bottom Legend 第一列是默认键值，如果不存在则使用 Top Legend 值\n* Font Legend 第一列是按住 Fn0 切换层后的键值，第三列是按住 Fn0 和 shift 后的键值\n\n## 将键盘布局 raw 转为 eep 文件\n\n打开 [https://tkg.io](https://tkg.io)，右上角支持语言选择。\n\n先选择 General(通用) - Keyboard(键盘)，自己对应的键盘主板型号。\n\n再选择 Layer(层) - Layer Mode(层模式) 为 Simple(简单)，复制上文的 `raw data` 至此即可。\n\n正常情况下输入框应该变成绿色，没有提示冲突或提示冲突已解决。如果红色报警，则检查键盘主板型号是否选择正确？自己的 `raw data` 是否正确（尽量不自己手动修改 `raw data`）。\n\n后续几乎不需要调整。Fn 默认控制灯光，如果你布局出现多层，才会考虑编辑。 LED 灯光也保持默认即可。\n\n最后点击 download .eep file (下载 .eep 文件)。\n\n## 将 eep 刷入键盘\n\n打开 [https://github.com/kairyu/tkg-toolkit](https://github.com/kairyu/tkg-toolkit)，下载刷固件程序。可以在页面上找到绿色按钮，点击 clone or download -> download ZIP。当然你会 git 也可以直接 clone。\n\ntkg-toolkit 支持 Windows、MacOS、Linux。Linux 可能功能不太健全。\n\n**安装键盘驱动**。我用的 Windows，这个包之内有 tool/zadig_2.2.exe 文件。接上键盘，打开后默认可以识别，不识别可以选择全部设备列表，自己选择并安装驱动。\n\n后续需要一点点命令行知识。\n\n首先命令行执行 setup 命令，会进行一些配置。\n\n之后直接把上文下载的 eep 文件，拖拽到 reflash 命令上。如果不拖拽 eep 文件，则使用默认键盘布局进行固件刷新。\n\n最后，拖拽后，应该一直闪烁提示未准备好，此时按键盘背面的 reset 按钮，就可以刷固件了。\n\n刷完之后，键盘立即可以使用。\n\n--END--","source":"_posts/2019/2019-12-28-gh60.md","raw":"---\nlayout: post\ntitle: GH60 等客制化键盘刷固件方法\ndate: 2019-12-28 10:47:00 GMT+0800\ncategories: [外设]\ntags:  [键盘,GH60,客制化]\n---\n\n把自己的客制化 GH60 拿出来用了一段时间，期间也刷机很多次。由于当时的刷机方案过于陈旧，而且当时故障也挺多的，就重新研究了下客制化键盘的刷固件方法。\n\n<!-- more -->\n\n## 步骤\n\n主要分三步：\n1. 准备键盘布局，生成 raw 布局内容\n2. 将键盘布局 raw 转为 eep 文件\n3. 将 eep 刷入键盘\n\n本文方法不限 GH60 主板，只要第 2 步，第 3 步的工具支持就可以。\n\n## 准备键盘布局\n\n打开 [http://www.keyboard-layout-editor.com](http://www.keyboard-layout-editor.com)，选择顶部的 `Preset` 预设方案，选择一个和你键盘最接近的方案，这样后面就比较容易修改了。\n\n如果有别人配置好的对应布局链接也可以，省去了自己配置。\n\n如果有别人的 raw data，也可以直接复制到页面中间部分的选项卡 `raw data` 中。\n\n这里给出我的 GH60 Pure 布局的 raw 内容：\n\n```\n[{a:0},\"Esc\\n\\n\\n\\n~\\n`\",{a:4},\"!\\n1\\n\\n\\nF1\",\"@\\n2\\n\\n\\nF2\",\"#\\n3\\n\\n\\nF3\",\"$\\n4\\n\\n\\nF4\",\"%\\n5\\n\\n\\nF5\",\"^\\n6\\n\\n\\nF6\",\"&\\n7\\n\\n\\nF7\",\"*\\n8\\n\\n\\nF8\",\"(\\n9\\n\\n\\nF9\",\")\\n0\\n\\n\\nF10\",\"_\\n-\\n\\n\\nF11\",\"+\\n=\\n\\n\\nF12\",{w:2},\"Backspace\\n\\n\\n\\nDelete\"],\n[{w:1.5},\"Tab\",\"Q\",\"W\\n\\n\\n\\n↑\",\"E\",\"R\",\"T\",\"Y\\n\\n\\n\\nCalc\",\"U\",\"I@YUKAPRIL.COM\\n\\n\\n\\nIns\",\"O\",\"P\\n\\n\\n\\nPSc\",\"{\\n[\\n\\n\\nScrLk\",{a:0},\"}\\n]\\n\\n\\nPus\\nBrk\",{a:4,w:1.5},\"|\\n\\\\\"],\n[{w:1.75},\"Caps Lock\",\"A\\n\\n\\n\\n←\",\"S\\n\\n\\n\\n↓\",\"D\\n\\n\\n\\n→\",\"F\",\"G\",\"H\",\"J\",\"K\",\"L\",\":\\n;\\n\\n\\nHome\",\"\\\"\\n'\\n\\n\\nPgUp\",{w:2.25},\"Enter\"],\n[{w:2.25},\"Shift\",\"Z\",\"X\\n\\n\\n\\nApp\",\"C\\n\\n\\n\\nFn2\",\"V\\n\\n\\n\\nFn1\",\"B\\n\\n\\n\\nFn3\",\"N\\n\\n\\n\\nVolDn\",\"M\\n\\n\\n\\nVolUp\",\"<\\n,\\n\\n\\nMute\",\">\\n.\\n\\n\\nEnd\",\"?\\n/\\n\\n\\nPgDn\",{w:1.75},\"UP\",\"Delete\"],\n[{w:1.25},\"Alt\",{w:1.25},\"Win\",{w:1.25},\"Ctrl\",{w:6.25},\"Space\",{w:1.25},\"Fn0\",{w:1.25},\"LEFT\",{w:1.25},\"DOWN\",{w:1.25},\"RIGHT\"]\n```\n\n至于如何编辑按键，我也不太熟悉，我也只会调整大小，增加一个按键而已。\n\n按键定义，可以参考这里 [https://tkg.io/#help](https://tkg.io/#help)\n\n一般来讲，App 表示鼠标右键单击， Fn1 表示灯光开关，Fn2 表示灯光减小等，Fn3 表示灯光增加等。\n\n编辑好后，切换到 `raw data` 选项卡，把内容复制出来。\n\n我的理解是（**估计不太对**）： \n\n* Top Legend 第一列是按住 shift 后的键值\n* Bottom Legend 第一列是默认键值，如果不存在则使用 Top Legend 值\n* Font Legend 第一列是按住 Fn0 切换层后的键值，第三列是按住 Fn0 和 shift 后的键值\n\n## 将键盘布局 raw 转为 eep 文件\n\n打开 [https://tkg.io](https://tkg.io)，右上角支持语言选择。\n\n先选择 General(通用) - Keyboard(键盘)，自己对应的键盘主板型号。\n\n再选择 Layer(层) - Layer Mode(层模式) 为 Simple(简单)，复制上文的 `raw data` 至此即可。\n\n正常情况下输入框应该变成绿色，没有提示冲突或提示冲突已解决。如果红色报警，则检查键盘主板型号是否选择正确？自己的 `raw data` 是否正确（尽量不自己手动修改 `raw data`）。\n\n后续几乎不需要调整。Fn 默认控制灯光，如果你布局出现多层，才会考虑编辑。 LED 灯光也保持默认即可。\n\n最后点击 download .eep file (下载 .eep 文件)。\n\n## 将 eep 刷入键盘\n\n打开 [https://github.com/kairyu/tkg-toolkit](https://github.com/kairyu/tkg-toolkit)，下载刷固件程序。可以在页面上找到绿色按钮，点击 clone or download -> download ZIP。当然你会 git 也可以直接 clone。\n\ntkg-toolkit 支持 Windows、MacOS、Linux。Linux 可能功能不太健全。\n\n**安装键盘驱动**。我用的 Windows，这个包之内有 tool/zadig_2.2.exe 文件。接上键盘，打开后默认可以识别，不识别可以选择全部设备列表，自己选择并安装驱动。\n\n后续需要一点点命令行知识。\n\n首先命令行执行 setup 命令，会进行一些配置。\n\n之后直接把上文下载的 eep 文件，拖拽到 reflash 命令上。如果不拖拽 eep 文件，则使用默认键盘布局进行固件刷新。\n\n最后，拖拽后，应该一直闪烁提示未准备好，此时按键盘背面的 reset 按钮，就可以刷固件了。\n\n刷完之后，键盘立即可以使用。\n\n--END--","slug":"2019-2019-12-28-gh60","published":1,"updated":"2020-03-02T07:16:34.763Z","comments":1,"photos":[],"link":"","_id":"cka5ik8dt007mnybgmekibvn9","content":"<p>把自己的客制化 GH60 拿出来用了一段时间，期间也刷机很多次。由于当时的刷机方案过于陈旧，而且当时故障也挺多的，就重新研究了下客制化键盘的刷固件方法。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p>主要分三步：</p>\n<ol>\n<li>准备键盘布局，生成 raw 布局内容</li>\n<li>将键盘布局 raw 转为 eep 文件</li>\n<li>将 eep 刷入键盘</li>\n</ol>\n<p>本文方法不限 GH60 主板，只要第 2 步，第 3 步的工具支持就可以。</p>\n<h2 id=\"准备键盘布局\"><a href=\"#准备键盘布局\" class=\"headerlink\" title=\"准备键盘布局\"></a>准备键盘布局</h2><p>打开 <a href=\"http://www.keyboard-layout-editor.com\" target=\"_blank\" rel=\"noopener\">http://www.keyboard-layout-editor.com</a>，选择顶部的 <code>Preset</code> 预设方案，选择一个和你键盘最接近的方案，这样后面就比较容易修改了。</p>\n<p>如果有别人配置好的对应布局链接也可以，省去了自己配置。</p>\n<p>如果有别人的 raw data，也可以直接复制到页面中间部分的选项卡 <code>raw data</code> 中。</p>\n<p>这里给出我的 GH60 Pure 布局的 raw 内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123;a:0&#125;,&quot;Esc\\n\\n\\n\\n~\\n`&quot;,&#123;a:4&#125;,&quot;!\\n1\\n\\n\\nF1&quot;,&quot;@\\n2\\n\\n\\nF2&quot;,&quot;#\\n3\\n\\n\\nF3&quot;,&quot;$\\n4\\n\\n\\nF4&quot;,&quot;%\\n5\\n\\n\\nF5&quot;,&quot;^\\n6\\n\\n\\nF6&quot;,&quot;&amp;\\n7\\n\\n\\nF7&quot;,&quot;*\\n8\\n\\n\\nF8&quot;,&quot;(\\n9\\n\\n\\nF9&quot;,&quot;)\\n0\\n\\n\\nF10&quot;,&quot;_\\n-\\n\\n\\nF11&quot;,&quot;+\\n=\\n\\n\\nF12&quot;,&#123;w:2&#125;,&quot;Backspace\\n\\n\\n\\nDelete&quot;],</span><br><span class=\"line\">[&#123;w:1.5&#125;,&quot;Tab&quot;,&quot;Q&quot;,&quot;W\\n\\n\\n\\n↑&quot;,&quot;E&quot;,&quot;R&quot;,&quot;T&quot;,&quot;Y\\n\\n\\n\\nCalc&quot;,&quot;U&quot;,&quot;I@YUKAPRIL.COM\\n\\n\\n\\nIns&quot;,&quot;O&quot;,&quot;P\\n\\n\\n\\nPSc&quot;,&quot;&#123;\\n[\\n\\n\\nScrLk&quot;,&#123;a:0&#125;,&quot;&#125;\\n]\\n\\n\\nPus\\nBrk&quot;,&#123;a:4,w:1.5&#125;,&quot;|\\n\\\\&quot;],</span><br><span class=\"line\">[&#123;w:1.75&#125;,&quot;Caps Lock&quot;,&quot;A\\n\\n\\n\\n←&quot;,&quot;S\\n\\n\\n\\n↓&quot;,&quot;D\\n\\n\\n\\n→&quot;,&quot;F&quot;,&quot;G&quot;,&quot;H&quot;,&quot;J&quot;,&quot;K&quot;,&quot;L&quot;,&quot;:\\n;\\n\\n\\nHome&quot;,&quot;\\&quot;\\n&apos;\\n\\n\\nPgUp&quot;,&#123;w:2.25&#125;,&quot;Enter&quot;],</span><br><span class=\"line\">[&#123;w:2.25&#125;,&quot;Shift&quot;,&quot;Z&quot;,&quot;X\\n\\n\\n\\nApp&quot;,&quot;C\\n\\n\\n\\nFn2&quot;,&quot;V\\n\\n\\n\\nFn1&quot;,&quot;B\\n\\n\\n\\nFn3&quot;,&quot;N\\n\\n\\n\\nVolDn&quot;,&quot;M\\n\\n\\n\\nVolUp&quot;,&quot;&lt;\\n,\\n\\n\\nMute&quot;,&quot;&gt;\\n.\\n\\n\\nEnd&quot;,&quot;?\\n/\\n\\n\\nPgDn&quot;,&#123;w:1.75&#125;,&quot;UP&quot;,&quot;Delete&quot;],</span><br><span class=\"line\">[&#123;w:1.25&#125;,&quot;Alt&quot;,&#123;w:1.25&#125;,&quot;Win&quot;,&#123;w:1.25&#125;,&quot;Ctrl&quot;,&#123;w:6.25&#125;,&quot;Space&quot;,&#123;w:1.25&#125;,&quot;Fn0&quot;,&#123;w:1.25&#125;,&quot;LEFT&quot;,&#123;w:1.25&#125;,&quot;DOWN&quot;,&#123;w:1.25&#125;,&quot;RIGHT&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>至于如何编辑按键，我也不太熟悉，我也只会调整大小，增加一个按键而已。</p>\n<p>按键定义，可以参考这里 <a href=\"https://tkg.io/#help\" target=\"_blank\" rel=\"noopener\">https://tkg.io/#help</a></p>\n<p>一般来讲，App 表示鼠标右键单击， Fn1 表示灯光开关，Fn2 表示灯光减小等，Fn3 表示灯光增加等。</p>\n<p>编辑好后，切换到 <code>raw data</code> 选项卡，把内容复制出来。</p>\n<p>我的理解是（<strong>估计不太对</strong>）： </p>\n<ul>\n<li>Top Legend 第一列是按住 shift 后的键值</li>\n<li>Bottom Legend 第一列是默认键值，如果不存在则使用 Top Legend 值</li>\n<li>Font Legend 第一列是按住 Fn0 切换层后的键值，第三列是按住 Fn0 和 shift 后的键值</li>\n</ul>\n<h2 id=\"将键盘布局-raw-转为-eep-文件\"><a href=\"#将键盘布局-raw-转为-eep-文件\" class=\"headerlink\" title=\"将键盘布局 raw 转为 eep 文件\"></a>将键盘布局 raw 转为 eep 文件</h2><p>打开 <a href=\"https://tkg.io\" target=\"_blank\" rel=\"noopener\">https://tkg.io</a>，右上角支持语言选择。</p>\n<p>先选择 General(通用) - Keyboard(键盘)，自己对应的键盘主板型号。</p>\n<p>再选择 Layer(层) - Layer Mode(层模式) 为 Simple(简单)，复制上文的 <code>raw data</code> 至此即可。</p>\n<p>正常情况下输入框应该变成绿色，没有提示冲突或提示冲突已解决。如果红色报警，则检查键盘主板型号是否选择正确？自己的 <code>raw data</code> 是否正确（尽量不自己手动修改 <code>raw data</code>）。</p>\n<p>后续几乎不需要调整。Fn 默认控制灯光，如果你布局出现多层，才会考虑编辑。 LED 灯光也保持默认即可。</p>\n<p>最后点击 download .eep file (下载 .eep 文件)。</p>\n<h2 id=\"将-eep-刷入键盘\"><a href=\"#将-eep-刷入键盘\" class=\"headerlink\" title=\"将 eep 刷入键盘\"></a>将 eep 刷入键盘</h2><p>打开 <a href=\"https://github.com/kairyu/tkg-toolkit\" target=\"_blank\" rel=\"noopener\">https://github.com/kairyu/tkg-toolkit</a>，下载刷固件程序。可以在页面上找到绿色按钮，点击 clone or download -&gt; download ZIP。当然你会 git 也可以直接 clone。</p>\n<p>tkg-toolkit 支持 Windows、MacOS、Linux。Linux 可能功能不太健全。</p>\n<p><strong>安装键盘驱动</strong>。我用的 Windows，这个包之内有 tool/zadig_2.2.exe 文件。接上键盘，打开后默认可以识别，不识别可以选择全部设备列表，自己选择并安装驱动。</p>\n<p>后续需要一点点命令行知识。</p>\n<p>首先命令行执行 setup 命令，会进行一些配置。</p>\n<p>之后直接把上文下载的 eep 文件，拖拽到 reflash 命令上。如果不拖拽 eep 文件，则使用默认键盘布局进行固件刷新。</p>\n<p>最后，拖拽后，应该一直闪烁提示未准备好，此时按键盘背面的 reset 按钮，就可以刷固件了。</p>\n<p>刷完之后，键盘立即可以使用。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>把自己的客制化 GH60 拿出来用了一段时间，期间也刷机很多次。由于当时的刷机方案过于陈旧，而且当时故障也挺多的，就重新研究了下客制化键盘的刷固件方法。</p>","more":"<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p>主要分三步：</p>\n<ol>\n<li>准备键盘布局，生成 raw 布局内容</li>\n<li>将键盘布局 raw 转为 eep 文件</li>\n<li>将 eep 刷入键盘</li>\n</ol>\n<p>本文方法不限 GH60 主板，只要第 2 步，第 3 步的工具支持就可以。</p>\n<h2 id=\"准备键盘布局\"><a href=\"#准备键盘布局\" class=\"headerlink\" title=\"准备键盘布局\"></a>准备键盘布局</h2><p>打开 <a href=\"http://www.keyboard-layout-editor.com\" target=\"_blank\" rel=\"noopener\">http://www.keyboard-layout-editor.com</a>，选择顶部的 <code>Preset</code> 预设方案，选择一个和你键盘最接近的方案，这样后面就比较容易修改了。</p>\n<p>如果有别人配置好的对应布局链接也可以，省去了自己配置。</p>\n<p>如果有别人的 raw data，也可以直接复制到页面中间部分的选项卡 <code>raw data</code> 中。</p>\n<p>这里给出我的 GH60 Pure 布局的 raw 内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123;a:0&#125;,&quot;Esc\\n\\n\\n\\n~\\n`&quot;,&#123;a:4&#125;,&quot;!\\n1\\n\\n\\nF1&quot;,&quot;@\\n2\\n\\n\\nF2&quot;,&quot;#\\n3\\n\\n\\nF3&quot;,&quot;$\\n4\\n\\n\\nF4&quot;,&quot;%\\n5\\n\\n\\nF5&quot;,&quot;^\\n6\\n\\n\\nF6&quot;,&quot;&amp;\\n7\\n\\n\\nF7&quot;,&quot;*\\n8\\n\\n\\nF8&quot;,&quot;(\\n9\\n\\n\\nF9&quot;,&quot;)\\n0\\n\\n\\nF10&quot;,&quot;_\\n-\\n\\n\\nF11&quot;,&quot;+\\n=\\n\\n\\nF12&quot;,&#123;w:2&#125;,&quot;Backspace\\n\\n\\n\\nDelete&quot;],</span><br><span class=\"line\">[&#123;w:1.5&#125;,&quot;Tab&quot;,&quot;Q&quot;,&quot;W\\n\\n\\n\\n↑&quot;,&quot;E&quot;,&quot;R&quot;,&quot;T&quot;,&quot;Y\\n\\n\\n\\nCalc&quot;,&quot;U&quot;,&quot;I@YUKAPRIL.COM\\n\\n\\n\\nIns&quot;,&quot;O&quot;,&quot;P\\n\\n\\n\\nPSc&quot;,&quot;&#123;\\n[\\n\\n\\nScrLk&quot;,&#123;a:0&#125;,&quot;&#125;\\n]\\n\\n\\nPus\\nBrk&quot;,&#123;a:4,w:1.5&#125;,&quot;|\\n\\\\&quot;],</span><br><span class=\"line\">[&#123;w:1.75&#125;,&quot;Caps Lock&quot;,&quot;A\\n\\n\\n\\n←&quot;,&quot;S\\n\\n\\n\\n↓&quot;,&quot;D\\n\\n\\n\\n→&quot;,&quot;F&quot;,&quot;G&quot;,&quot;H&quot;,&quot;J&quot;,&quot;K&quot;,&quot;L&quot;,&quot;:\\n;\\n\\n\\nHome&quot;,&quot;\\&quot;\\n&apos;\\n\\n\\nPgUp&quot;,&#123;w:2.25&#125;,&quot;Enter&quot;],</span><br><span class=\"line\">[&#123;w:2.25&#125;,&quot;Shift&quot;,&quot;Z&quot;,&quot;X\\n\\n\\n\\nApp&quot;,&quot;C\\n\\n\\n\\nFn2&quot;,&quot;V\\n\\n\\n\\nFn1&quot;,&quot;B\\n\\n\\n\\nFn3&quot;,&quot;N\\n\\n\\n\\nVolDn&quot;,&quot;M\\n\\n\\n\\nVolUp&quot;,&quot;&lt;\\n,\\n\\n\\nMute&quot;,&quot;&gt;\\n.\\n\\n\\nEnd&quot;,&quot;?\\n/\\n\\n\\nPgDn&quot;,&#123;w:1.75&#125;,&quot;UP&quot;,&quot;Delete&quot;],</span><br><span class=\"line\">[&#123;w:1.25&#125;,&quot;Alt&quot;,&#123;w:1.25&#125;,&quot;Win&quot;,&#123;w:1.25&#125;,&quot;Ctrl&quot;,&#123;w:6.25&#125;,&quot;Space&quot;,&#123;w:1.25&#125;,&quot;Fn0&quot;,&#123;w:1.25&#125;,&quot;LEFT&quot;,&#123;w:1.25&#125;,&quot;DOWN&quot;,&#123;w:1.25&#125;,&quot;RIGHT&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>至于如何编辑按键，我也不太熟悉，我也只会调整大小，增加一个按键而已。</p>\n<p>按键定义，可以参考这里 <a href=\"https://tkg.io/#help\" target=\"_blank\" rel=\"noopener\">https://tkg.io/#help</a></p>\n<p>一般来讲，App 表示鼠标右键单击， Fn1 表示灯光开关，Fn2 表示灯光减小等，Fn3 表示灯光增加等。</p>\n<p>编辑好后，切换到 <code>raw data</code> 选项卡，把内容复制出来。</p>\n<p>我的理解是（<strong>估计不太对</strong>）： </p>\n<ul>\n<li>Top Legend 第一列是按住 shift 后的键值</li>\n<li>Bottom Legend 第一列是默认键值，如果不存在则使用 Top Legend 值</li>\n<li>Font Legend 第一列是按住 Fn0 切换层后的键值，第三列是按住 Fn0 和 shift 后的键值</li>\n</ul>\n<h2 id=\"将键盘布局-raw-转为-eep-文件\"><a href=\"#将键盘布局-raw-转为-eep-文件\" class=\"headerlink\" title=\"将键盘布局 raw 转为 eep 文件\"></a>将键盘布局 raw 转为 eep 文件</h2><p>打开 <a href=\"https://tkg.io\" target=\"_blank\" rel=\"noopener\">https://tkg.io</a>，右上角支持语言选择。</p>\n<p>先选择 General(通用) - Keyboard(键盘)，自己对应的键盘主板型号。</p>\n<p>再选择 Layer(层) - Layer Mode(层模式) 为 Simple(简单)，复制上文的 <code>raw data</code> 至此即可。</p>\n<p>正常情况下输入框应该变成绿色，没有提示冲突或提示冲突已解决。如果红色报警，则检查键盘主板型号是否选择正确？自己的 <code>raw data</code> 是否正确（尽量不自己手动修改 <code>raw data</code>）。</p>\n<p>后续几乎不需要调整。Fn 默认控制灯光，如果你布局出现多层，才会考虑编辑。 LED 灯光也保持默认即可。</p>\n<p>最后点击 download .eep file (下载 .eep 文件)。</p>\n<h2 id=\"将-eep-刷入键盘\"><a href=\"#将-eep-刷入键盘\" class=\"headerlink\" title=\"将 eep 刷入键盘\"></a>将 eep 刷入键盘</h2><p>打开 <a href=\"https://github.com/kairyu/tkg-toolkit\" target=\"_blank\" rel=\"noopener\">https://github.com/kairyu/tkg-toolkit</a>，下载刷固件程序。可以在页面上找到绿色按钮，点击 clone or download -&gt; download ZIP。当然你会 git 也可以直接 clone。</p>\n<p>tkg-toolkit 支持 Windows、MacOS、Linux。Linux 可能功能不太健全。</p>\n<p><strong>安装键盘驱动</strong>。我用的 Windows，这个包之内有 tool/zadig_2.2.exe 文件。接上键盘，打开后默认可以识别，不识别可以选择全部设备列表，自己选择并安装驱动。</p>\n<p>后续需要一点点命令行知识。</p>\n<p>首先命令行执行 setup 命令，会进行一些配置。</p>\n<p>之后直接把上文下载的 eep 文件，拖拽到 reflash 命令上。如果不拖拽 eep 文件，则使用默认键盘布局进行固件刷新。</p>\n<p>最后，拖拽后，应该一直闪烁提示未准备好，此时按键盘背面的 reset 按钮，就可以刷固件了。</p>\n<p>刷完之后，键盘立即可以使用。</p>\n<p>–END–</p>"},{"layout":"post","title":"纪念下跑跑卡丁车王者成绩","date":"2020-01-09T00:46:00.000Z","photos":["https://cdn0.yukapril.com/blog/2020-01-09-popkart-1.PNG-wm.white"],"_content":"\n玩跑跑卡丁车也快半年了，前几天刚刚排位赛上了王者车手，也算纪念一下。顺手写写这半年的游戏感受。\n\n<!-- more -->\n\n## 日常\n\n每天都有任务，做任务提升赛季通行证等级，领奖。做任务主要是通过排位赛做。\n\n由于本着少充钱不充钱，所以日常各种奖励任务做的挺多的，也挺累的。有的任务不喜欢玩，但是为了得奖。\n\n最终，还是得充钱 😂\n\n## 赛车\n\n免费情况，建议正常玩就好了。除了日常赠送车辆，可以用酷币购买。我的建议是不常玩、玩不好、排位赛钻石以下不买人民币车。因为好点的车，一般都要 350 人民币起步。\n\n如果还不确定自己是否愿意玩，也有想买车的欲望，可以考虑买通行证，一般 1 级和 120 级分别送两辆车。虽然一般，但是还是比普通酷币车要好一点。\n\n此外，我记得 30 级送紫色流星，如果有充值过，送洛迪。酷币目前可以买最好的是刀锋、创世。其他赠送的都奇葩车目前感觉都不实用。也不建议买商城默认的其他赛车。\n\n#### 道具车\n\n道具车的话，看运气吧。我免费拿到摩托朵朵、摩托月饼车、香蕉车、雪球。自己酷币买了商城的驯鹿。\n\n由于道具玩的少，没什么经验，不过大家玩的好的级别高的，都是自费买道具好车。普通玩家常见驯鹿，或者各种白送车。\n\n#### 竞速车参数\n\n首先是参数说明下，好车基本上参数差异不太大，至少开起来没有那么大区别。除非 700 块的人民币车对酷币车（级别不同），否则参数不会太明显。\n\n比如最好的光明使者比最早的蔷薇棉花糖，各个指标都能有 50+ 提升，但是跑下来估计也就是略好 1 - 2 秒。所以车辆差异的话，除非是大神，否则我认为只要是好车差距就不太大，没必要追求顶级车。当然除非是天狼摩托，它集气速度太快了，氮气时间太短，这个还是能感受出来的。\n\n很大程度上我认为更重要的是车辆手感，不过好车手感都还不错。建议有条件的话可以找别人账号试试车，没账号？看外观自己随便买吧。\n\n好的车一般车辆更容易控制，精度好，不会出现很难拉车头、断漂失败的情况。有的车更沉，抓地力好，但是可能小坡不太容易骗气。还有的人能感受到车辆重心、前后驱啥的，我反正没啥感受。\n\n#### 免费竞速车挑选\n\n竞速车，我建议一开始上来有啥开啥。\n\n小号我主要开马拉松，车虽然一般，但是手感还凑合。主要是当时有活动赠送，一送就是一个月。\n\n![马拉松](https://cdn0.yukapril.com/blog/2020-01-09-popkart-2.PNG-wm.white)\n\n之后 30 级可以紫色流星，这车手感我觉得很好，就是配置稍低。手感指的是拉车头稳定，相对容易操作，不是特别漂。\n\n![紫色流星](https://cdn0.yukapril.com/blog/2020-01-09-popkart-3.PNG-wm.white)\n\n洛迪也凑合，不过反向集气、断位、小喷我觉得不好。总之就是手感没有紫色流星好。\n\n![洛迪](https://cdn0.yukapril.com/blog/2020-01-09-popkart-4.PNG-wm.white)\n\n重点说说两辆酷币车。先是创世。好像是第一赛季时候的车，特别灵活，经常转向过度，不太容易控制，好处是车头灵活过急弯就容易些。别看车很大，感觉特别不擅长对抗，可能是过于灵活导致。排位赛常看到，主要是之前赛季没有刀锋，而且不是特别高的段位的情况下。\n\n![创世](https://cdn0.yukapril.com/blog/2020-01-09-popkart-5.PNG-wm.white)\n\n再说第二辆酷币车刀锋。是刀锋不是尖峰。配置稍微比创世好一点点，车虽小，但是对抗性好于创世。缺点是转向没那么灵活，尤其复杂图，急弯相对有点难。我反而感觉车比较稳重。这车目前排位赛见得非常多，因为这是非充值条件下基本上配置最好的车。\n\n![刀锋](https://cdn0.yukapril.com/blog/2020-01-09-popkart-6.PNG-wm.white)\n\n还有一种酷币车，大概是白银齿轮，用酷币买次数，可以抽奖好车。目前是风之合金。据说抽到好车基本上需要 7 万酷币。嗯，基本上也算是人民币车了。这个太费酷币了，而且车辆算是人民币车里面最差的。\n\n**整体建议开有菱角的车，不要开什么雪球、剑、棒棒糖之类的，因为不好控制车辆边界。这种特殊的车，基本上排位赛也看不到，都是某一时期特殊车，除了收藏没啥实际价值。**\n\n车辆建议选择小尺寸的，方便近路、小路，也不太容易装上。\n\n此外摩托车（两轮、三轮）建议少开，除非真心喜欢。目前来看仍然不是主流。虽然S3赛季之后大量的猎鹰以及自费买天浪，但是整体还是小众。\n\n#### 人民币竞速车\n\n**几乎所有车我都没有。不过故事模式可以体验一下。**\n\n由于有的朋友没充值过。每个电池充值套餐，首次充值都有加送电池。所以无首充等于说充值 100 得 1000 电池，同时加送1000 电池。这也就意味着无首充下，买一辆 5000 电池（500 元）的车，可以享受半价（250 元换得 5000 电池）。\n\n下文涉及的金额，都是指默认有首冲后的金额（不享受半价情况）。\n\n* 蔷薇棉花糖，基本上到 2019 年 12 月就快绝迹了。开服之后的好车。2019 年很常见。没有什么特色，但是就是特别稳定。\n\n![蔷薇棉花糖](https://cdn0.yukapril.com/blog/2020-01-09-popkart-7.PNG-wm.white)\n\n* 冰澜棉花糖，2019 年圣诞节推出。说是比蔷薇棉花糖好一点，如果有蔷薇棉花糖可以 3 折买到。正常来讲 450+ 人民币，有蔷薇棉花糖估计不到 200 人民币。目前也很常见，说明大家都很时髦、爱跟风、也有钱。目前这车估计是第二好的车了。按这个架势，后续可能还会有各种棉花糖接班。\n\n![冰澜棉花糖](https://cdn0.yukapril.com/blog/2020-01-09-popkart-13.PNG-wm.white)\n\n* 绯红尖峰，看参数比蔷薇棉花糖好一点点，我感觉和魔怪差不多，略比魔怪差一点。很少见的车。\n\n![绯红尖峰](https://cdn0.yukapril.com/blog/2020-01-09-popkart-11.PNG-wm.white)\n\n* 魔怪，非常好，个别时候能看到。特别稳定，平时过不好的弯，这车居然可以不撞墙。据说几百块才能换得 30 天。后来出了种树活动，大概 1500 人民币换取永久。由于太贵，而且时间短，目前很少赛道上看到了。\n\n![赤炎魔怪](https://cdn0.yukapril.com/blog/2020-01-09-popkart-10.PNG-wm.white)\n\n* 光明骑士，目前最好的车。大概需要 700 块左右到手。特别常见，看来大家都是有钱人啊。目前好像没渠道体验。\n\n![光明骑士](https://cdn0.yukapril.com/blog/2020-01-09-popkart-8.PNG-wm.white)\n\n* 亚特拉斯，估计 500+。现在一般吧，不少见也不多见。基本上排在冰澜棉花糖之后，其他车之前。好像也是没渠道体验。\n\n![亚特拉斯](https://cdn0.yukapril.com/blog/2020-01-09-popkart-9.PNG-wm.white)\n\n* 国王的新车，开人物礼盒，集齐人物获得的特殊车。配置不低，但是实际很少见。估计没有轮廓都觉得不好开吧。\n\n![国王的新车](https://cdn0.yukapril.com/blog/2020-01-09-popkart-14.PNG-wm.white)\n\n* 雪国冰屋，这是辆道具车。不过其优秀的竞速属性，在比赛中有时候可以看到他参与竞速。平时竞速场几乎没见过，估计竞速开这车的就只有双修选手了。\n\n![雪国冰屋](https://cdn0.yukapril.com/blog/2020-01-09-popkart-12.PNG-wm.white)\n\n* 天浪摩托，目前最好的摩托车，我买了。适合复杂多弯赛道，集气效率极高（目前是所有车中最高的，参数已经满了），缺点是氮气时间短（才 564）。虽然实际测试上氮气比起其他车短零点几秒，但是实际体验明显时间短，普通四轮车换摩托后，明显集气太快了，不过氮气也太短了。开久了才能习惯。选择摩托，要注意跑法和其他四轮车可能不太一样。因为摩托主要做急弯、对抗上有优势，其他常规图是劣势。这个车到手成本大概 400 多一点。现在也是买不到了。\n\n![天浪](https://cdn0.yukapril.com/blog/2020-01-09-popkart-16.PNG-wm.white)\n\n* R8，S2 赛季通行证车，一般般。有时候能遇到。\n\n![R8](https://cdn0.yukapril.com/blog/2020-01-09-popkart-15.PNG-wm.white)\n\n* 猎鹰，S3 赛季通行证车，目前很常见。车还行，算是天浪的低配版，和天浪差别不大。\n\n![猎鹰](https://cdn0.yukapril.com/blog/2020-01-09-popkart-17.PNG-wm.white)\n\n主流好车基本上就这些，其他车没研究过，也不知道价位，主要是平时也很少遇到。\n\n#### 赛车升级加点\n\n赛车可以升级，共有 4 个栏目可以加点。常见的竞速加法是 10/10/5/10（简称0050）。不过我习惯 10/10/10/5（简称0005），主要是我集气不好，此外加速效果感觉不明显。\n\n#### 竞速好车排行\n\n1. 光明使者，最强\n2. 冰澜棉花糖 > 亚特拉斯\n3. 魔怪\n4. 蔷薇棉花糖\n5. 绯红尖峰\n6. 冰屋（道具车）~ 国王新车\n7. 天狼\n\n预计 1 月 10 日推出的烈焰红旗将成为新一轮最好的车。\n\n#### 道具好车\n\n各有优势，都是组队赛，所以没有排行。前四辆常见。\n\n1. 正义（冲线好车）\n2. 猫咪（防晕魔，及各种属性）\n3. 冰屋（水系好车）\n4. 海盗船\n5. 独角兽、情侣车、购物车\n\n可以看看 P1 联赛，大部分情况就是这个排布。\n\n#### 买车渠道\n\n**幸运宾果**。都是极品好车。现在是光明骑士，1月10号出红旗，估计都要 700 人民币左右。有保底，钱花到位了肯定能抽到。看样子基本上是推出后 3 个月内的最强车。\n\n**时间商店**。出过猫咪（道具车，极好），天狼（竞速摩托，一般），冰澜棉花糖。还有其他的一些道具车。基本上 400 - 500 左右的价位。一般需要买时间沙漏，但是经常能送，平时多收着点，用的时候不用额外买。车辆都是 7 折左右。大概 4100 电池（410 人民币）。\n\n**魔法齿轮**。分为黄金齿轮和白银齿轮。区别是一个用电池一个用酷币。都是特殊车，感觉不是特别主流，比如冰屋、风之合金。\n\n**集齐活动**。一般就是集齐多少个什么，送车。一般都是特殊车，比如国王新车。这种都是集齐有难度，基本上需要花钱开盒子。\n\n**理财活动（充值活动）**。基本上非常简单，就是充值，没什么任务，简单粗暴。当时魔怪就是靠种好几颗树获得。种树就是直接充值，不过充值之后的电池可以后续买其他车使用。\n\n## 排位赛和驾照\n\n从2019年的7月中旬左右开始玩，两个月一个赛季。排位规则还是挺复杂的。\n\n首先是段位，分别是青铜、白银、黄金、铂金、钻石、大师、王者、传奇车王、不朽车神。其中我记得铂金及之前段位，分 3 个小阶段，分别是 3 -> 2 -> 1，而且有段位保护（输了不会扣分或者有补偿）。后续到王者段位都是 5 个小阶段。每个小阶段，大概需要 30 到 50 积分来升级。正常玩应该都能到钻石级别。\n\n> 我基本上每天30-50分钟游戏时间，级别大概是\n> \n> * S1赛季：钻石车手2（玩的少，远不足一个赛季）\n> * S2赛季：大师车手3\n> * S3赛季：王者车手5\n\n根据大号和练小号的经验：\n\n钻石 3 左右级别，城镇高速公路大家实力大概最快 2:15 左右。\n\n大师 5 左右级别，城镇高速公路大概最快 2:08 左右。\n\n王者 5 左右级别，城镇高速公路大概最快 1:56 左右。\n\n大师 1 或者王者 5，仍然过不了 L1 驾照，此时大家太空蜿蜒跑道大概 2:24+。L1 驾照要求 2:09。我估计要想过 L1 驾照，估计要王者 2 以内。努努力基本上快上传奇车王了。\n\n驾照特别高，会不会随机到厉害的玩家？这个我觉得不会，碰到什么玩家完全和你的级别有关，和驾照没什么关系。我觉得如果能找到免费带过驾照，建议找人。这样就可以练习高级别地图了。\n\n不过我感觉和车有点关系，你的车如果特别好，那么随机到的玩家车普遍不会太差，但是你是破车，遇到特别好车的时候就少。\n\n如果连续赢，那么可能会突然遇到相对比当前级别实力高的玩家。如果连续输 3 - 4 局，那么会遇到比当前级别实力低的玩家。连输是指每局排名 6 名以后。\n\n钻石往上，大师中级以下，这时候特别容易遇到说话、骂人的，应该是都是经常玩的玩家，会玩一点，玩不好，你撞他他撞你，脾气大。其他级别，几乎没见过说话骂人啥的。\n\n个人竞速最容易开赛，组队竞速、道具都很难开赛。组队道具感觉最容易上分（很大程度上运气决定吧），竞速尤其是个人竞速，完全靠自己实力上分。组队竞速，更大程度上依赖团队蓝气配合，配合的好相当于至少比对手多 10% 氮气！所以队友配合太重要了。\n\n## 道具和普通竞速\n\n这些玩的太少了，基本上没什么经验。不过可以肯定，你遇到什么级别玩家都有可能，因为是开放场，没啥规律。由于经常被踢，所以开赛感觉还是挺困难的。\n\n## 小结\n\n玩了半年的跑跑，感觉自己提升挺慢的。和自己一起玩的朋友感觉提升特别快，我只能靠多玩和练习来提升。感觉跑跑还是挺硬核的一个游戏。\n\n对于提升来说，优先要保证地图熟悉，否则再好的技术也不知道应该哪里提前漂移。\n\n其次，联系好基本功。常规的漂移、拖漂、拖漂延续、反向集气、断漂补气等，一开始觉得太难了，后来慢慢的有的图就有了点手感。\n\n依稀记得城镇高速公路，曾经最好成绩还是 2:10，基本上最好成绩都没办法跑前四。现在在有对抗下也能跑出 1:58 左右。\n\n最后，应该就是稍微看看顶级玩家如何跑，大概什么位置要集气多少，如何走路线，如何贴边。这个比较难，要自己模仿去练习。平时每天排位赛前，我都会练习计时赛。个别时候还会单独去练习某张地图，一练就是半小时（10 局）起步。\n\n目前努力到王者 5 段位。看了下 2019 年微信游戏的报告，不确定出报告时候是按照大师 1 段位统计的还是王者 5 段位统计的，我大概已经超越了 94% 的玩家。\n\n虽然成绩还凑合，但是这里面有大量的流失玩家，基本上真实玩家在 25% 左右。这么看来，王者充其量就是一个认真玩的玩家的正常水准。\n\n争取 2020 加油。\n\n--END--","source":"_posts/2020/2020-01-09-popkart.md","raw":"---\nlayout: post\ntitle: 纪念下跑跑卡丁车王者成绩\ndate: 2020-01-09 00:46:00 GMT+0800\ncategories: [随笔]\ntags:  [跑跑卡丁车]\nphotos: [https://cdn0.yukapril.com/blog/2020-01-09-popkart-1.PNG-wm.white]\n---\n\n玩跑跑卡丁车也快半年了，前几天刚刚排位赛上了王者车手，也算纪念一下。顺手写写这半年的游戏感受。\n\n<!-- more -->\n\n## 日常\n\n每天都有任务，做任务提升赛季通行证等级，领奖。做任务主要是通过排位赛做。\n\n由于本着少充钱不充钱，所以日常各种奖励任务做的挺多的，也挺累的。有的任务不喜欢玩，但是为了得奖。\n\n最终，还是得充钱 😂\n\n## 赛车\n\n免费情况，建议正常玩就好了。除了日常赠送车辆，可以用酷币购买。我的建议是不常玩、玩不好、排位赛钻石以下不买人民币车。因为好点的车，一般都要 350 人民币起步。\n\n如果还不确定自己是否愿意玩，也有想买车的欲望，可以考虑买通行证，一般 1 级和 120 级分别送两辆车。虽然一般，但是还是比普通酷币车要好一点。\n\n此外，我记得 30 级送紫色流星，如果有充值过，送洛迪。酷币目前可以买最好的是刀锋、创世。其他赠送的都奇葩车目前感觉都不实用。也不建议买商城默认的其他赛车。\n\n#### 道具车\n\n道具车的话，看运气吧。我免费拿到摩托朵朵、摩托月饼车、香蕉车、雪球。自己酷币买了商城的驯鹿。\n\n由于道具玩的少，没什么经验，不过大家玩的好的级别高的，都是自费买道具好车。普通玩家常见驯鹿，或者各种白送车。\n\n#### 竞速车参数\n\n首先是参数说明下，好车基本上参数差异不太大，至少开起来没有那么大区别。除非 700 块的人民币车对酷币车（级别不同），否则参数不会太明显。\n\n比如最好的光明使者比最早的蔷薇棉花糖，各个指标都能有 50+ 提升，但是跑下来估计也就是略好 1 - 2 秒。所以车辆差异的话，除非是大神，否则我认为只要是好车差距就不太大，没必要追求顶级车。当然除非是天狼摩托，它集气速度太快了，氮气时间太短，这个还是能感受出来的。\n\n很大程度上我认为更重要的是车辆手感，不过好车手感都还不错。建议有条件的话可以找别人账号试试车，没账号？看外观自己随便买吧。\n\n好的车一般车辆更容易控制，精度好，不会出现很难拉车头、断漂失败的情况。有的车更沉，抓地力好，但是可能小坡不太容易骗气。还有的人能感受到车辆重心、前后驱啥的，我反正没啥感受。\n\n#### 免费竞速车挑选\n\n竞速车，我建议一开始上来有啥开啥。\n\n小号我主要开马拉松，车虽然一般，但是手感还凑合。主要是当时有活动赠送，一送就是一个月。\n\n![马拉松](https://cdn0.yukapril.com/blog/2020-01-09-popkart-2.PNG-wm.white)\n\n之后 30 级可以紫色流星，这车手感我觉得很好，就是配置稍低。手感指的是拉车头稳定，相对容易操作，不是特别漂。\n\n![紫色流星](https://cdn0.yukapril.com/blog/2020-01-09-popkart-3.PNG-wm.white)\n\n洛迪也凑合，不过反向集气、断位、小喷我觉得不好。总之就是手感没有紫色流星好。\n\n![洛迪](https://cdn0.yukapril.com/blog/2020-01-09-popkart-4.PNG-wm.white)\n\n重点说说两辆酷币车。先是创世。好像是第一赛季时候的车，特别灵活，经常转向过度，不太容易控制，好处是车头灵活过急弯就容易些。别看车很大，感觉特别不擅长对抗，可能是过于灵活导致。排位赛常看到，主要是之前赛季没有刀锋，而且不是特别高的段位的情况下。\n\n![创世](https://cdn0.yukapril.com/blog/2020-01-09-popkart-5.PNG-wm.white)\n\n再说第二辆酷币车刀锋。是刀锋不是尖峰。配置稍微比创世好一点点，车虽小，但是对抗性好于创世。缺点是转向没那么灵活，尤其复杂图，急弯相对有点难。我反而感觉车比较稳重。这车目前排位赛见得非常多，因为这是非充值条件下基本上配置最好的车。\n\n![刀锋](https://cdn0.yukapril.com/blog/2020-01-09-popkart-6.PNG-wm.white)\n\n还有一种酷币车，大概是白银齿轮，用酷币买次数，可以抽奖好车。目前是风之合金。据说抽到好车基本上需要 7 万酷币。嗯，基本上也算是人民币车了。这个太费酷币了，而且车辆算是人民币车里面最差的。\n\n**整体建议开有菱角的车，不要开什么雪球、剑、棒棒糖之类的，因为不好控制车辆边界。这种特殊的车，基本上排位赛也看不到，都是某一时期特殊车，除了收藏没啥实际价值。**\n\n车辆建议选择小尺寸的，方便近路、小路，也不太容易装上。\n\n此外摩托车（两轮、三轮）建议少开，除非真心喜欢。目前来看仍然不是主流。虽然S3赛季之后大量的猎鹰以及自费买天浪，但是整体还是小众。\n\n#### 人民币竞速车\n\n**几乎所有车我都没有。不过故事模式可以体验一下。**\n\n由于有的朋友没充值过。每个电池充值套餐，首次充值都有加送电池。所以无首充等于说充值 100 得 1000 电池，同时加送1000 电池。这也就意味着无首充下，买一辆 5000 电池（500 元）的车，可以享受半价（250 元换得 5000 电池）。\n\n下文涉及的金额，都是指默认有首冲后的金额（不享受半价情况）。\n\n* 蔷薇棉花糖，基本上到 2019 年 12 月就快绝迹了。开服之后的好车。2019 年很常见。没有什么特色，但是就是特别稳定。\n\n![蔷薇棉花糖](https://cdn0.yukapril.com/blog/2020-01-09-popkart-7.PNG-wm.white)\n\n* 冰澜棉花糖，2019 年圣诞节推出。说是比蔷薇棉花糖好一点，如果有蔷薇棉花糖可以 3 折买到。正常来讲 450+ 人民币，有蔷薇棉花糖估计不到 200 人民币。目前也很常见，说明大家都很时髦、爱跟风、也有钱。目前这车估计是第二好的车了。按这个架势，后续可能还会有各种棉花糖接班。\n\n![冰澜棉花糖](https://cdn0.yukapril.com/blog/2020-01-09-popkart-13.PNG-wm.white)\n\n* 绯红尖峰，看参数比蔷薇棉花糖好一点点，我感觉和魔怪差不多，略比魔怪差一点。很少见的车。\n\n![绯红尖峰](https://cdn0.yukapril.com/blog/2020-01-09-popkart-11.PNG-wm.white)\n\n* 魔怪，非常好，个别时候能看到。特别稳定，平时过不好的弯，这车居然可以不撞墙。据说几百块才能换得 30 天。后来出了种树活动，大概 1500 人民币换取永久。由于太贵，而且时间短，目前很少赛道上看到了。\n\n![赤炎魔怪](https://cdn0.yukapril.com/blog/2020-01-09-popkart-10.PNG-wm.white)\n\n* 光明骑士，目前最好的车。大概需要 700 块左右到手。特别常见，看来大家都是有钱人啊。目前好像没渠道体验。\n\n![光明骑士](https://cdn0.yukapril.com/blog/2020-01-09-popkart-8.PNG-wm.white)\n\n* 亚特拉斯，估计 500+。现在一般吧，不少见也不多见。基本上排在冰澜棉花糖之后，其他车之前。好像也是没渠道体验。\n\n![亚特拉斯](https://cdn0.yukapril.com/blog/2020-01-09-popkart-9.PNG-wm.white)\n\n* 国王的新车，开人物礼盒，集齐人物获得的特殊车。配置不低，但是实际很少见。估计没有轮廓都觉得不好开吧。\n\n![国王的新车](https://cdn0.yukapril.com/blog/2020-01-09-popkart-14.PNG-wm.white)\n\n* 雪国冰屋，这是辆道具车。不过其优秀的竞速属性，在比赛中有时候可以看到他参与竞速。平时竞速场几乎没见过，估计竞速开这车的就只有双修选手了。\n\n![雪国冰屋](https://cdn0.yukapril.com/blog/2020-01-09-popkart-12.PNG-wm.white)\n\n* 天浪摩托，目前最好的摩托车，我买了。适合复杂多弯赛道，集气效率极高（目前是所有车中最高的，参数已经满了），缺点是氮气时间短（才 564）。虽然实际测试上氮气比起其他车短零点几秒，但是实际体验明显时间短，普通四轮车换摩托后，明显集气太快了，不过氮气也太短了。开久了才能习惯。选择摩托，要注意跑法和其他四轮车可能不太一样。因为摩托主要做急弯、对抗上有优势，其他常规图是劣势。这个车到手成本大概 400 多一点。现在也是买不到了。\n\n![天浪](https://cdn0.yukapril.com/blog/2020-01-09-popkart-16.PNG-wm.white)\n\n* R8，S2 赛季通行证车，一般般。有时候能遇到。\n\n![R8](https://cdn0.yukapril.com/blog/2020-01-09-popkart-15.PNG-wm.white)\n\n* 猎鹰，S3 赛季通行证车，目前很常见。车还行，算是天浪的低配版，和天浪差别不大。\n\n![猎鹰](https://cdn0.yukapril.com/blog/2020-01-09-popkart-17.PNG-wm.white)\n\n主流好车基本上就这些，其他车没研究过，也不知道价位，主要是平时也很少遇到。\n\n#### 赛车升级加点\n\n赛车可以升级，共有 4 个栏目可以加点。常见的竞速加法是 10/10/5/10（简称0050）。不过我习惯 10/10/10/5（简称0005），主要是我集气不好，此外加速效果感觉不明显。\n\n#### 竞速好车排行\n\n1. 光明使者，最强\n2. 冰澜棉花糖 > 亚特拉斯\n3. 魔怪\n4. 蔷薇棉花糖\n5. 绯红尖峰\n6. 冰屋（道具车）~ 国王新车\n7. 天狼\n\n预计 1 月 10 日推出的烈焰红旗将成为新一轮最好的车。\n\n#### 道具好车\n\n各有优势，都是组队赛，所以没有排行。前四辆常见。\n\n1. 正义（冲线好车）\n2. 猫咪（防晕魔，及各种属性）\n3. 冰屋（水系好车）\n4. 海盗船\n5. 独角兽、情侣车、购物车\n\n可以看看 P1 联赛，大部分情况就是这个排布。\n\n#### 买车渠道\n\n**幸运宾果**。都是极品好车。现在是光明骑士，1月10号出红旗，估计都要 700 人民币左右。有保底，钱花到位了肯定能抽到。看样子基本上是推出后 3 个月内的最强车。\n\n**时间商店**。出过猫咪（道具车，极好），天狼（竞速摩托，一般），冰澜棉花糖。还有其他的一些道具车。基本上 400 - 500 左右的价位。一般需要买时间沙漏，但是经常能送，平时多收着点，用的时候不用额外买。车辆都是 7 折左右。大概 4100 电池（410 人民币）。\n\n**魔法齿轮**。分为黄金齿轮和白银齿轮。区别是一个用电池一个用酷币。都是特殊车，感觉不是特别主流，比如冰屋、风之合金。\n\n**集齐活动**。一般就是集齐多少个什么，送车。一般都是特殊车，比如国王新车。这种都是集齐有难度，基本上需要花钱开盒子。\n\n**理财活动（充值活动）**。基本上非常简单，就是充值，没什么任务，简单粗暴。当时魔怪就是靠种好几颗树获得。种树就是直接充值，不过充值之后的电池可以后续买其他车使用。\n\n## 排位赛和驾照\n\n从2019年的7月中旬左右开始玩，两个月一个赛季。排位规则还是挺复杂的。\n\n首先是段位，分别是青铜、白银、黄金、铂金、钻石、大师、王者、传奇车王、不朽车神。其中我记得铂金及之前段位，分 3 个小阶段，分别是 3 -> 2 -> 1，而且有段位保护（输了不会扣分或者有补偿）。后续到王者段位都是 5 个小阶段。每个小阶段，大概需要 30 到 50 积分来升级。正常玩应该都能到钻石级别。\n\n> 我基本上每天30-50分钟游戏时间，级别大概是\n> \n> * S1赛季：钻石车手2（玩的少，远不足一个赛季）\n> * S2赛季：大师车手3\n> * S3赛季：王者车手5\n\n根据大号和练小号的经验：\n\n钻石 3 左右级别，城镇高速公路大家实力大概最快 2:15 左右。\n\n大师 5 左右级别，城镇高速公路大概最快 2:08 左右。\n\n王者 5 左右级别，城镇高速公路大概最快 1:56 左右。\n\n大师 1 或者王者 5，仍然过不了 L1 驾照，此时大家太空蜿蜒跑道大概 2:24+。L1 驾照要求 2:09。我估计要想过 L1 驾照，估计要王者 2 以内。努努力基本上快上传奇车王了。\n\n驾照特别高，会不会随机到厉害的玩家？这个我觉得不会，碰到什么玩家完全和你的级别有关，和驾照没什么关系。我觉得如果能找到免费带过驾照，建议找人。这样就可以练习高级别地图了。\n\n不过我感觉和车有点关系，你的车如果特别好，那么随机到的玩家车普遍不会太差，但是你是破车，遇到特别好车的时候就少。\n\n如果连续赢，那么可能会突然遇到相对比当前级别实力高的玩家。如果连续输 3 - 4 局，那么会遇到比当前级别实力低的玩家。连输是指每局排名 6 名以后。\n\n钻石往上，大师中级以下，这时候特别容易遇到说话、骂人的，应该是都是经常玩的玩家，会玩一点，玩不好，你撞他他撞你，脾气大。其他级别，几乎没见过说话骂人啥的。\n\n个人竞速最容易开赛，组队竞速、道具都很难开赛。组队道具感觉最容易上分（很大程度上运气决定吧），竞速尤其是个人竞速，完全靠自己实力上分。组队竞速，更大程度上依赖团队蓝气配合，配合的好相当于至少比对手多 10% 氮气！所以队友配合太重要了。\n\n## 道具和普通竞速\n\n这些玩的太少了，基本上没什么经验。不过可以肯定，你遇到什么级别玩家都有可能，因为是开放场，没啥规律。由于经常被踢，所以开赛感觉还是挺困难的。\n\n## 小结\n\n玩了半年的跑跑，感觉自己提升挺慢的。和自己一起玩的朋友感觉提升特别快，我只能靠多玩和练习来提升。感觉跑跑还是挺硬核的一个游戏。\n\n对于提升来说，优先要保证地图熟悉，否则再好的技术也不知道应该哪里提前漂移。\n\n其次，联系好基本功。常规的漂移、拖漂、拖漂延续、反向集气、断漂补气等，一开始觉得太难了，后来慢慢的有的图就有了点手感。\n\n依稀记得城镇高速公路，曾经最好成绩还是 2:10，基本上最好成绩都没办法跑前四。现在在有对抗下也能跑出 1:58 左右。\n\n最后，应该就是稍微看看顶级玩家如何跑，大概什么位置要集气多少，如何走路线，如何贴边。这个比较难，要自己模仿去练习。平时每天排位赛前，我都会练习计时赛。个别时候还会单独去练习某张地图，一练就是半小时（10 局）起步。\n\n目前努力到王者 5 段位。看了下 2019 年微信游戏的报告，不确定出报告时候是按照大师 1 段位统计的还是王者 5 段位统计的，我大概已经超越了 94% 的玩家。\n\n虽然成绩还凑合，但是这里面有大量的流失玩家，基本上真实玩家在 25% 左右。这么看来，王者充其量就是一个认真玩的玩家的正常水准。\n\n争取 2020 加油。\n\n--END--","slug":"2020-2020-01-09-popkart","published":1,"updated":"2020-03-02T07:16:34.764Z","comments":1,"link":"","_id":"cka5ik8du007pnybgswvkv1ll","content":"<p>玩跑跑卡丁车也快半年了，前几天刚刚排位赛上了王者车手，也算纪念一下。顺手写写这半年的游戏感受。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"日常\"><a href=\"#日常\" class=\"headerlink\" title=\"日常\"></a>日常</h2><p>每天都有任务，做任务提升赛季通行证等级，领奖。做任务主要是通过排位赛做。</p>\n<p>由于本着少充钱不充钱，所以日常各种奖励任务做的挺多的，也挺累的。有的任务不喜欢玩，但是为了得奖。</p>\n<p>最终，还是得充钱 😂</p>\n<h2 id=\"赛车\"><a href=\"#赛车\" class=\"headerlink\" title=\"赛车\"></a>赛车</h2><p>免费情况，建议正常玩就好了。除了日常赠送车辆，可以用酷币购买。我的建议是不常玩、玩不好、排位赛钻石以下不买人民币车。因为好点的车，一般都要 350 人民币起步。</p>\n<p>如果还不确定自己是否愿意玩，也有想买车的欲望，可以考虑买通行证，一般 1 级和 120 级分别送两辆车。虽然一般，但是还是比普通酷币车要好一点。</p>\n<p>此外，我记得 30 级送紫色流星，如果有充值过，送洛迪。酷币目前可以买最好的是刀锋、创世。其他赠送的都奇葩车目前感觉都不实用。也不建议买商城默认的其他赛车。</p>\n<h4 id=\"道具车\"><a href=\"#道具车\" class=\"headerlink\" title=\"道具车\"></a>道具车</h4><p>道具车的话，看运气吧。我免费拿到摩托朵朵、摩托月饼车、香蕉车、雪球。自己酷币买了商城的驯鹿。</p>\n<p>由于道具玩的少，没什么经验，不过大家玩的好的级别高的，都是自费买道具好车。普通玩家常见驯鹿，或者各种白送车。</p>\n<h4 id=\"竞速车参数\"><a href=\"#竞速车参数\" class=\"headerlink\" title=\"竞速车参数\"></a>竞速车参数</h4><p>首先是参数说明下，好车基本上参数差异不太大，至少开起来没有那么大区别。除非 700 块的人民币车对酷币车（级别不同），否则参数不会太明显。</p>\n<p>比如最好的光明使者比最早的蔷薇棉花糖，各个指标都能有 50+ 提升，但是跑下来估计也就是略好 1 - 2 秒。所以车辆差异的话，除非是大神，否则我认为只要是好车差距就不太大，没必要追求顶级车。当然除非是天狼摩托，它集气速度太快了，氮气时间太短，这个还是能感受出来的。</p>\n<p>很大程度上我认为更重要的是车辆手感，不过好车手感都还不错。建议有条件的话可以找别人账号试试车，没账号？看外观自己随便买吧。</p>\n<p>好的车一般车辆更容易控制，精度好，不会出现很难拉车头、断漂失败的情况。有的车更沉，抓地力好，但是可能小坡不太容易骗气。还有的人能感受到车辆重心、前后驱啥的，我反正没啥感受。</p>\n<h4 id=\"免费竞速车挑选\"><a href=\"#免费竞速车挑选\" class=\"headerlink\" title=\"免费竞速车挑选\"></a>免费竞速车挑选</h4><p>竞速车，我建议一开始上来有啥开啥。</p>\n<p>小号我主要开马拉松，车虽然一般，但是手感还凑合。主要是当时有活动赠送，一送就是一个月。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-2.PNG-wm.white\" alt=\"马拉松\"></p>\n<p>之后 30 级可以紫色流星，这车手感我觉得很好，就是配置稍低。手感指的是拉车头稳定，相对容易操作，不是特别漂。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-3.PNG-wm.white\" alt=\"紫色流星\"></p>\n<p>洛迪也凑合，不过反向集气、断位、小喷我觉得不好。总之就是手感没有紫色流星好。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-4.PNG-wm.white\" alt=\"洛迪\"></p>\n<p>重点说说两辆酷币车。先是创世。好像是第一赛季时候的车，特别灵活，经常转向过度，不太容易控制，好处是车头灵活过急弯就容易些。别看车很大，感觉特别不擅长对抗，可能是过于灵活导致。排位赛常看到，主要是之前赛季没有刀锋，而且不是特别高的段位的情况下。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-5.PNG-wm.white\" alt=\"创世\"></p>\n<p>再说第二辆酷币车刀锋。是刀锋不是尖峰。配置稍微比创世好一点点，车虽小，但是对抗性好于创世。缺点是转向没那么灵活，尤其复杂图，急弯相对有点难。我反而感觉车比较稳重。这车目前排位赛见得非常多，因为这是非充值条件下基本上配置最好的车。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-6.PNG-wm.white\" alt=\"刀锋\"></p>\n<p>还有一种酷币车，大概是白银齿轮，用酷币买次数，可以抽奖好车。目前是风之合金。据说抽到好车基本上需要 7 万酷币。嗯，基本上也算是人民币车了。这个太费酷币了，而且车辆算是人民币车里面最差的。</p>\n<p><strong>整体建议开有菱角的车，不要开什么雪球、剑、棒棒糖之类的，因为不好控制车辆边界。这种特殊的车，基本上排位赛也看不到，都是某一时期特殊车，除了收藏没啥实际价值。</strong></p>\n<p>车辆建议选择小尺寸的，方便近路、小路，也不太容易装上。</p>\n<p>此外摩托车（两轮、三轮）建议少开，除非真心喜欢。目前来看仍然不是主流。虽然S3赛季之后大量的猎鹰以及自费买天浪，但是整体还是小众。</p>\n<h4 id=\"人民币竞速车\"><a href=\"#人民币竞速车\" class=\"headerlink\" title=\"人民币竞速车\"></a>人民币竞速车</h4><p><strong>几乎所有车我都没有。不过故事模式可以体验一下。</strong></p>\n<p>由于有的朋友没充值过。每个电池充值套餐，首次充值都有加送电池。所以无首充等于说充值 100 得 1000 电池，同时加送1000 电池。这也就意味着无首充下，买一辆 5000 电池（500 元）的车，可以享受半价（250 元换得 5000 电池）。</p>\n<p>下文涉及的金额，都是指默认有首冲后的金额（不享受半价情况）。</p>\n<ul>\n<li>蔷薇棉花糖，基本上到 2019 年 12 月就快绝迹了。开服之后的好车。2019 年很常见。没有什么特色，但是就是特别稳定。</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-7.PNG-wm.white\" alt=\"蔷薇棉花糖\"></p>\n<ul>\n<li>冰澜棉花糖，2019 年圣诞节推出。说是比蔷薇棉花糖好一点，如果有蔷薇棉花糖可以 3 折买到。正常来讲 450+ 人民币，有蔷薇棉花糖估计不到 200 人民币。目前也很常见，说明大家都很时髦、爱跟风、也有钱。目前这车估计是第二好的车了。按这个架势，后续可能还会有各种棉花糖接班。</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-13.PNG-wm.white\" alt=\"冰澜棉花糖\"></p>\n<ul>\n<li>绯红尖峰，看参数比蔷薇棉花糖好一点点，我感觉和魔怪差不多，略比魔怪差一点。很少见的车。</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-11.PNG-wm.white\" alt=\"绯红尖峰\"></p>\n<ul>\n<li>魔怪，非常好，个别时候能看到。特别稳定，平时过不好的弯，这车居然可以不撞墙。据说几百块才能换得 30 天。后来出了种树活动，大概 1500 人民币换取永久。由于太贵，而且时间短，目前很少赛道上看到了。</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-10.PNG-wm.white\" alt=\"赤炎魔怪\"></p>\n<ul>\n<li>光明骑士，目前最好的车。大概需要 700 块左右到手。特别常见，看来大家都是有钱人啊。目前好像没渠道体验。</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-8.PNG-wm.white\" alt=\"光明骑士\"></p>\n<ul>\n<li>亚特拉斯，估计 500+。现在一般吧，不少见也不多见。基本上排在冰澜棉花糖之后，其他车之前。好像也是没渠道体验。</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-9.PNG-wm.white\" alt=\"亚特拉斯\"></p>\n<ul>\n<li>国王的新车，开人物礼盒，集齐人物获得的特殊车。配置不低，但是实际很少见。估计没有轮廓都觉得不好开吧。</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-14.PNG-wm.white\" alt=\"国王的新车\"></p>\n<ul>\n<li>雪国冰屋，这是辆道具车。不过其优秀的竞速属性，在比赛中有时候可以看到他参与竞速。平时竞速场几乎没见过，估计竞速开这车的就只有双修选手了。</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-12.PNG-wm.white\" alt=\"雪国冰屋\"></p>\n<ul>\n<li>天浪摩托，目前最好的摩托车，我买了。适合复杂多弯赛道，集气效率极高（目前是所有车中最高的，参数已经满了），缺点是氮气时间短（才 564）。虽然实际测试上氮气比起其他车短零点几秒，但是实际体验明显时间短，普通四轮车换摩托后，明显集气太快了，不过氮气也太短了。开久了才能习惯。选择摩托，要注意跑法和其他四轮车可能不太一样。因为摩托主要做急弯、对抗上有优势，其他常规图是劣势。这个车到手成本大概 400 多一点。现在也是买不到了。</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-16.PNG-wm.white\" alt=\"天浪\"></p>\n<ul>\n<li>R8，S2 赛季通行证车，一般般。有时候能遇到。</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-15.PNG-wm.white\" alt=\"R8\"></p>\n<ul>\n<li>猎鹰，S3 赛季通行证车，目前很常见。车还行，算是天浪的低配版，和天浪差别不大。</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-17.PNG-wm.white\" alt=\"猎鹰\"></p>\n<p>主流好车基本上就这些，其他车没研究过，也不知道价位，主要是平时也很少遇到。</p>\n<h4 id=\"赛车升级加点\"><a href=\"#赛车升级加点\" class=\"headerlink\" title=\"赛车升级加点\"></a>赛车升级加点</h4><p>赛车可以升级，共有 4 个栏目可以加点。常见的竞速加法是 10/10/5/10（简称0050）。不过我习惯 10/10/10/5（简称0005），主要是我集气不好，此外加速效果感觉不明显。</p>\n<h4 id=\"竞速好车排行\"><a href=\"#竞速好车排行\" class=\"headerlink\" title=\"竞速好车排行\"></a>竞速好车排行</h4><ol>\n<li>光明使者，最强</li>\n<li>冰澜棉花糖 &gt; 亚特拉斯</li>\n<li>魔怪</li>\n<li>蔷薇棉花糖</li>\n<li>绯红尖峰</li>\n<li>冰屋（道具车）~ 国王新车</li>\n<li>天狼</li>\n</ol>\n<p>预计 1 月 10 日推出的烈焰红旗将成为新一轮最好的车。</p>\n<h4 id=\"道具好车\"><a href=\"#道具好车\" class=\"headerlink\" title=\"道具好车\"></a>道具好车</h4><p>各有优势，都是组队赛，所以没有排行。前四辆常见。</p>\n<ol>\n<li>正义（冲线好车）</li>\n<li>猫咪（防晕魔，及各种属性）</li>\n<li>冰屋（水系好车）</li>\n<li>海盗船</li>\n<li>独角兽、情侣车、购物车</li>\n</ol>\n<p>可以看看 P1 联赛，大部分情况就是这个排布。</p>\n<h4 id=\"买车渠道\"><a href=\"#买车渠道\" class=\"headerlink\" title=\"买车渠道\"></a>买车渠道</h4><p><strong>幸运宾果</strong>。都是极品好车。现在是光明骑士，1月10号出红旗，估计都要 700 人民币左右。有保底，钱花到位了肯定能抽到。看样子基本上是推出后 3 个月内的最强车。</p>\n<p><strong>时间商店</strong>。出过猫咪（道具车，极好），天狼（竞速摩托，一般），冰澜棉花糖。还有其他的一些道具车。基本上 400 - 500 左右的价位。一般需要买时间沙漏，但是经常能送，平时多收着点，用的时候不用额外买。车辆都是 7 折左右。大概 4100 电池（410 人民币）。</p>\n<p><strong>魔法齿轮</strong>。分为黄金齿轮和白银齿轮。区别是一个用电池一个用酷币。都是特殊车，感觉不是特别主流，比如冰屋、风之合金。</p>\n<p><strong>集齐活动</strong>。一般就是集齐多少个什么，送车。一般都是特殊车，比如国王新车。这种都是集齐有难度，基本上需要花钱开盒子。</p>\n<p><strong>理财活动（充值活动）</strong>。基本上非常简单，就是充值，没什么任务，简单粗暴。当时魔怪就是靠种好几颗树获得。种树就是直接充值，不过充值之后的电池可以后续买其他车使用。</p>\n<h2 id=\"排位赛和驾照\"><a href=\"#排位赛和驾照\" class=\"headerlink\" title=\"排位赛和驾照\"></a>排位赛和驾照</h2><p>从2019年的7月中旬左右开始玩，两个月一个赛季。排位规则还是挺复杂的。</p>\n<p>首先是段位，分别是青铜、白银、黄金、铂金、钻石、大师、王者、传奇车王、不朽车神。其中我记得铂金及之前段位，分 3 个小阶段，分别是 3 -&gt; 2 -&gt; 1，而且有段位保护（输了不会扣分或者有补偿）。后续到王者段位都是 5 个小阶段。每个小阶段，大概需要 30 到 50 积分来升级。正常玩应该都能到钻石级别。</p>\n<blockquote>\n<p>我基本上每天30-50分钟游戏时间，级别大概是</p>\n<ul>\n<li>S1赛季：钻石车手2（玩的少，远不足一个赛季）</li>\n<li>S2赛季：大师车手3</li>\n<li>S3赛季：王者车手5</li>\n</ul>\n</blockquote>\n<p>根据大号和练小号的经验：</p>\n<p>钻石 3 左右级别，城镇高速公路大家实力大概最快 2:15 左右。</p>\n<p>大师 5 左右级别，城镇高速公路大概最快 2:08 左右。</p>\n<p>王者 5 左右级别，城镇高速公路大概最快 1:56 左右。</p>\n<p>大师 1 或者王者 5，仍然过不了 L1 驾照，此时大家太空蜿蜒跑道大概 2:24+。L1 驾照要求 2:09。我估计要想过 L1 驾照，估计要王者 2 以内。努努力基本上快上传奇车王了。</p>\n<p>驾照特别高，会不会随机到厉害的玩家？这个我觉得不会，碰到什么玩家完全和你的级别有关，和驾照没什么关系。我觉得如果能找到免费带过驾照，建议找人。这样就可以练习高级别地图了。</p>\n<p>不过我感觉和车有点关系，你的车如果特别好，那么随机到的玩家车普遍不会太差，但是你是破车，遇到特别好车的时候就少。</p>\n<p>如果连续赢，那么可能会突然遇到相对比当前级别实力高的玩家。如果连续输 3 - 4 局，那么会遇到比当前级别实力低的玩家。连输是指每局排名 6 名以后。</p>\n<p>钻石往上，大师中级以下，这时候特别容易遇到说话、骂人的，应该是都是经常玩的玩家，会玩一点，玩不好，你撞他他撞你，脾气大。其他级别，几乎没见过说话骂人啥的。</p>\n<p>个人竞速最容易开赛，组队竞速、道具都很难开赛。组队道具感觉最容易上分（很大程度上运气决定吧），竞速尤其是个人竞速，完全靠自己实力上分。组队竞速，更大程度上依赖团队蓝气配合，配合的好相当于至少比对手多 10% 氮气！所以队友配合太重要了。</p>\n<h2 id=\"道具和普通竞速\"><a href=\"#道具和普通竞速\" class=\"headerlink\" title=\"道具和普通竞速\"></a>道具和普通竞速</h2><p>这些玩的太少了，基本上没什么经验。不过可以肯定，你遇到什么级别玩家都有可能，因为是开放场，没啥规律。由于经常被踢，所以开赛感觉还是挺困难的。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>玩了半年的跑跑，感觉自己提升挺慢的。和自己一起玩的朋友感觉提升特别快，我只能靠多玩和练习来提升。感觉跑跑还是挺硬核的一个游戏。</p>\n<p>对于提升来说，优先要保证地图熟悉，否则再好的技术也不知道应该哪里提前漂移。</p>\n<p>其次，联系好基本功。常规的漂移、拖漂、拖漂延续、反向集气、断漂补气等，一开始觉得太难了，后来慢慢的有的图就有了点手感。</p>\n<p>依稀记得城镇高速公路，曾经最好成绩还是 2:10，基本上最好成绩都没办法跑前四。现在在有对抗下也能跑出 1:58 左右。</p>\n<p>最后，应该就是稍微看看顶级玩家如何跑，大概什么位置要集气多少，如何走路线，如何贴边。这个比较难，要自己模仿去练习。平时每天排位赛前，我都会练习计时赛。个别时候还会单独去练习某张地图，一练就是半小时（10 局）起步。</p>\n<p>目前努力到王者 5 段位。看了下 2019 年微信游戏的报告，不确定出报告时候是按照大师 1 段位统计的还是王者 5 段位统计的，我大概已经超越了 94% 的玩家。</p>\n<p>虽然成绩还凑合，但是这里面有大量的流失玩家，基本上真实玩家在 25% 左右。这么看来，王者充其量就是一个认真玩的玩家的正常水准。</p>\n<p>争取 2020 加油。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>玩跑跑卡丁车也快半年了，前几天刚刚排位赛上了王者车手，也算纪念一下。顺手写写这半年的游戏感受。</p>","more":"<h2 id=\"日常\"><a href=\"#日常\" class=\"headerlink\" title=\"日常\"></a>日常</h2><p>每天都有任务，做任务提升赛季通行证等级，领奖。做任务主要是通过排位赛做。</p>\n<p>由于本着少充钱不充钱，所以日常各种奖励任务做的挺多的，也挺累的。有的任务不喜欢玩，但是为了得奖。</p>\n<p>最终，还是得充钱 😂</p>\n<h2 id=\"赛车\"><a href=\"#赛车\" class=\"headerlink\" title=\"赛车\"></a>赛车</h2><p>免费情况，建议正常玩就好了。除了日常赠送车辆，可以用酷币购买。我的建议是不常玩、玩不好、排位赛钻石以下不买人民币车。因为好点的车，一般都要 350 人民币起步。</p>\n<p>如果还不确定自己是否愿意玩，也有想买车的欲望，可以考虑买通行证，一般 1 级和 120 级分别送两辆车。虽然一般，但是还是比普通酷币车要好一点。</p>\n<p>此外，我记得 30 级送紫色流星，如果有充值过，送洛迪。酷币目前可以买最好的是刀锋、创世。其他赠送的都奇葩车目前感觉都不实用。也不建议买商城默认的其他赛车。</p>\n<h4 id=\"道具车\"><a href=\"#道具车\" class=\"headerlink\" title=\"道具车\"></a>道具车</h4><p>道具车的话，看运气吧。我免费拿到摩托朵朵、摩托月饼车、香蕉车、雪球。自己酷币买了商城的驯鹿。</p>\n<p>由于道具玩的少，没什么经验，不过大家玩的好的级别高的，都是自费买道具好车。普通玩家常见驯鹿，或者各种白送车。</p>\n<h4 id=\"竞速车参数\"><a href=\"#竞速车参数\" class=\"headerlink\" title=\"竞速车参数\"></a>竞速车参数</h4><p>首先是参数说明下，好车基本上参数差异不太大，至少开起来没有那么大区别。除非 700 块的人民币车对酷币车（级别不同），否则参数不会太明显。</p>\n<p>比如最好的光明使者比最早的蔷薇棉花糖，各个指标都能有 50+ 提升，但是跑下来估计也就是略好 1 - 2 秒。所以车辆差异的话，除非是大神，否则我认为只要是好车差距就不太大，没必要追求顶级车。当然除非是天狼摩托，它集气速度太快了，氮气时间太短，这个还是能感受出来的。</p>\n<p>很大程度上我认为更重要的是车辆手感，不过好车手感都还不错。建议有条件的话可以找别人账号试试车，没账号？看外观自己随便买吧。</p>\n<p>好的车一般车辆更容易控制，精度好，不会出现很难拉车头、断漂失败的情况。有的车更沉，抓地力好，但是可能小坡不太容易骗气。还有的人能感受到车辆重心、前后驱啥的，我反正没啥感受。</p>\n<h4 id=\"免费竞速车挑选\"><a href=\"#免费竞速车挑选\" class=\"headerlink\" title=\"免费竞速车挑选\"></a>免费竞速车挑选</h4><p>竞速车，我建议一开始上来有啥开啥。</p>\n<p>小号我主要开马拉松，车虽然一般，但是手感还凑合。主要是当时有活动赠送，一送就是一个月。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-2.PNG-wm.white\" alt=\"马拉松\"></p>\n<p>之后 30 级可以紫色流星，这车手感我觉得很好，就是配置稍低。手感指的是拉车头稳定，相对容易操作，不是特别漂。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-3.PNG-wm.white\" alt=\"紫色流星\"></p>\n<p>洛迪也凑合，不过反向集气、断位、小喷我觉得不好。总之就是手感没有紫色流星好。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-4.PNG-wm.white\" alt=\"洛迪\"></p>\n<p>重点说说两辆酷币车。先是创世。好像是第一赛季时候的车，特别灵活，经常转向过度，不太容易控制，好处是车头灵活过急弯就容易些。别看车很大，感觉特别不擅长对抗，可能是过于灵活导致。排位赛常看到，主要是之前赛季没有刀锋，而且不是特别高的段位的情况下。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-5.PNG-wm.white\" alt=\"创世\"></p>\n<p>再说第二辆酷币车刀锋。是刀锋不是尖峰。配置稍微比创世好一点点，车虽小，但是对抗性好于创世。缺点是转向没那么灵活，尤其复杂图，急弯相对有点难。我反而感觉车比较稳重。这车目前排位赛见得非常多，因为这是非充值条件下基本上配置最好的车。</p>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-6.PNG-wm.white\" alt=\"刀锋\"></p>\n<p>还有一种酷币车，大概是白银齿轮，用酷币买次数，可以抽奖好车。目前是风之合金。据说抽到好车基本上需要 7 万酷币。嗯，基本上也算是人民币车了。这个太费酷币了，而且车辆算是人民币车里面最差的。</p>\n<p><strong>整体建议开有菱角的车，不要开什么雪球、剑、棒棒糖之类的，因为不好控制车辆边界。这种特殊的车，基本上排位赛也看不到，都是某一时期特殊车，除了收藏没啥实际价值。</strong></p>\n<p>车辆建议选择小尺寸的，方便近路、小路，也不太容易装上。</p>\n<p>此外摩托车（两轮、三轮）建议少开，除非真心喜欢。目前来看仍然不是主流。虽然S3赛季之后大量的猎鹰以及自费买天浪，但是整体还是小众。</p>\n<h4 id=\"人民币竞速车\"><a href=\"#人民币竞速车\" class=\"headerlink\" title=\"人民币竞速车\"></a>人民币竞速车</h4><p><strong>几乎所有车我都没有。不过故事模式可以体验一下。</strong></p>\n<p>由于有的朋友没充值过。每个电池充值套餐，首次充值都有加送电池。所以无首充等于说充值 100 得 1000 电池，同时加送1000 电池。这也就意味着无首充下，买一辆 5000 电池（500 元）的车，可以享受半价（250 元换得 5000 电池）。</p>\n<p>下文涉及的金额，都是指默认有首冲后的金额（不享受半价情况）。</p>\n<ul>\n<li>蔷薇棉花糖，基本上到 2019 年 12 月就快绝迹了。开服之后的好车。2019 年很常见。没有什么特色，但是就是特别稳定。</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-7.PNG-wm.white\" alt=\"蔷薇棉花糖\"></p>\n<ul>\n<li>冰澜棉花糖，2019 年圣诞节推出。说是比蔷薇棉花糖好一点，如果有蔷薇棉花糖可以 3 折买到。正常来讲 450+ 人民币，有蔷薇棉花糖估计不到 200 人民币。目前也很常见，说明大家都很时髦、爱跟风、也有钱。目前这车估计是第二好的车了。按这个架势，后续可能还会有各种棉花糖接班。</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-13.PNG-wm.white\" alt=\"冰澜棉花糖\"></p>\n<ul>\n<li>绯红尖峰，看参数比蔷薇棉花糖好一点点，我感觉和魔怪差不多，略比魔怪差一点。很少见的车。</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-11.PNG-wm.white\" alt=\"绯红尖峰\"></p>\n<ul>\n<li>魔怪，非常好，个别时候能看到。特别稳定，平时过不好的弯，这车居然可以不撞墙。据说几百块才能换得 30 天。后来出了种树活动，大概 1500 人民币换取永久。由于太贵，而且时间短，目前很少赛道上看到了。</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-10.PNG-wm.white\" alt=\"赤炎魔怪\"></p>\n<ul>\n<li>光明骑士，目前最好的车。大概需要 700 块左右到手。特别常见，看来大家都是有钱人啊。目前好像没渠道体验。</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-8.PNG-wm.white\" alt=\"光明骑士\"></p>\n<ul>\n<li>亚特拉斯，估计 500+。现在一般吧，不少见也不多见。基本上排在冰澜棉花糖之后，其他车之前。好像也是没渠道体验。</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-9.PNG-wm.white\" alt=\"亚特拉斯\"></p>\n<ul>\n<li>国王的新车，开人物礼盒，集齐人物获得的特殊车。配置不低，但是实际很少见。估计没有轮廓都觉得不好开吧。</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-14.PNG-wm.white\" alt=\"国王的新车\"></p>\n<ul>\n<li>雪国冰屋，这是辆道具车。不过其优秀的竞速属性，在比赛中有时候可以看到他参与竞速。平时竞速场几乎没见过，估计竞速开这车的就只有双修选手了。</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-12.PNG-wm.white\" alt=\"雪国冰屋\"></p>\n<ul>\n<li>天浪摩托，目前最好的摩托车，我买了。适合复杂多弯赛道，集气效率极高（目前是所有车中最高的，参数已经满了），缺点是氮气时间短（才 564）。虽然实际测试上氮气比起其他车短零点几秒，但是实际体验明显时间短，普通四轮车换摩托后，明显集气太快了，不过氮气也太短了。开久了才能习惯。选择摩托，要注意跑法和其他四轮车可能不太一样。因为摩托主要做急弯、对抗上有优势，其他常规图是劣势。这个车到手成本大概 400 多一点。现在也是买不到了。</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-16.PNG-wm.white\" alt=\"天浪\"></p>\n<ul>\n<li>R8，S2 赛季通行证车，一般般。有时候能遇到。</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-15.PNG-wm.white\" alt=\"R8\"></p>\n<ul>\n<li>猎鹰，S3 赛季通行证车，目前很常见。车还行，算是天浪的低配版，和天浪差别不大。</li>\n</ul>\n<p><img src=\"https://cdn0.yukapril.com/blog/2020-01-09-popkart-17.PNG-wm.white\" alt=\"猎鹰\"></p>\n<p>主流好车基本上就这些，其他车没研究过，也不知道价位，主要是平时也很少遇到。</p>\n<h4 id=\"赛车升级加点\"><a href=\"#赛车升级加点\" class=\"headerlink\" title=\"赛车升级加点\"></a>赛车升级加点</h4><p>赛车可以升级，共有 4 个栏目可以加点。常见的竞速加法是 10/10/5/10（简称0050）。不过我习惯 10/10/10/5（简称0005），主要是我集气不好，此外加速效果感觉不明显。</p>\n<h4 id=\"竞速好车排行\"><a href=\"#竞速好车排行\" class=\"headerlink\" title=\"竞速好车排行\"></a>竞速好车排行</h4><ol>\n<li>光明使者，最强</li>\n<li>冰澜棉花糖 &gt; 亚特拉斯</li>\n<li>魔怪</li>\n<li>蔷薇棉花糖</li>\n<li>绯红尖峰</li>\n<li>冰屋（道具车）~ 国王新车</li>\n<li>天狼</li>\n</ol>\n<p>预计 1 月 10 日推出的烈焰红旗将成为新一轮最好的车。</p>\n<h4 id=\"道具好车\"><a href=\"#道具好车\" class=\"headerlink\" title=\"道具好车\"></a>道具好车</h4><p>各有优势，都是组队赛，所以没有排行。前四辆常见。</p>\n<ol>\n<li>正义（冲线好车）</li>\n<li>猫咪（防晕魔，及各种属性）</li>\n<li>冰屋（水系好车）</li>\n<li>海盗船</li>\n<li>独角兽、情侣车、购物车</li>\n</ol>\n<p>可以看看 P1 联赛，大部分情况就是这个排布。</p>\n<h4 id=\"买车渠道\"><a href=\"#买车渠道\" class=\"headerlink\" title=\"买车渠道\"></a>买车渠道</h4><p><strong>幸运宾果</strong>。都是极品好车。现在是光明骑士，1月10号出红旗，估计都要 700 人民币左右。有保底，钱花到位了肯定能抽到。看样子基本上是推出后 3 个月内的最强车。</p>\n<p><strong>时间商店</strong>。出过猫咪（道具车，极好），天狼（竞速摩托，一般），冰澜棉花糖。还有其他的一些道具车。基本上 400 - 500 左右的价位。一般需要买时间沙漏，但是经常能送，平时多收着点，用的时候不用额外买。车辆都是 7 折左右。大概 4100 电池（410 人民币）。</p>\n<p><strong>魔法齿轮</strong>。分为黄金齿轮和白银齿轮。区别是一个用电池一个用酷币。都是特殊车，感觉不是特别主流，比如冰屋、风之合金。</p>\n<p><strong>集齐活动</strong>。一般就是集齐多少个什么，送车。一般都是特殊车，比如国王新车。这种都是集齐有难度，基本上需要花钱开盒子。</p>\n<p><strong>理财活动（充值活动）</strong>。基本上非常简单，就是充值，没什么任务，简单粗暴。当时魔怪就是靠种好几颗树获得。种树就是直接充值，不过充值之后的电池可以后续买其他车使用。</p>\n<h2 id=\"排位赛和驾照\"><a href=\"#排位赛和驾照\" class=\"headerlink\" title=\"排位赛和驾照\"></a>排位赛和驾照</h2><p>从2019年的7月中旬左右开始玩，两个月一个赛季。排位规则还是挺复杂的。</p>\n<p>首先是段位，分别是青铜、白银、黄金、铂金、钻石、大师、王者、传奇车王、不朽车神。其中我记得铂金及之前段位，分 3 个小阶段，分别是 3 -&gt; 2 -&gt; 1，而且有段位保护（输了不会扣分或者有补偿）。后续到王者段位都是 5 个小阶段。每个小阶段，大概需要 30 到 50 积分来升级。正常玩应该都能到钻石级别。</p>\n<blockquote>\n<p>我基本上每天30-50分钟游戏时间，级别大概是</p>\n<ul>\n<li>S1赛季：钻石车手2（玩的少，远不足一个赛季）</li>\n<li>S2赛季：大师车手3</li>\n<li>S3赛季：王者车手5</li>\n</ul>\n</blockquote>\n<p>根据大号和练小号的经验：</p>\n<p>钻石 3 左右级别，城镇高速公路大家实力大概最快 2:15 左右。</p>\n<p>大师 5 左右级别，城镇高速公路大概最快 2:08 左右。</p>\n<p>王者 5 左右级别，城镇高速公路大概最快 1:56 左右。</p>\n<p>大师 1 或者王者 5，仍然过不了 L1 驾照，此时大家太空蜿蜒跑道大概 2:24+。L1 驾照要求 2:09。我估计要想过 L1 驾照，估计要王者 2 以内。努努力基本上快上传奇车王了。</p>\n<p>驾照特别高，会不会随机到厉害的玩家？这个我觉得不会，碰到什么玩家完全和你的级别有关，和驾照没什么关系。我觉得如果能找到免费带过驾照，建议找人。这样就可以练习高级别地图了。</p>\n<p>不过我感觉和车有点关系，你的车如果特别好，那么随机到的玩家车普遍不会太差，但是你是破车，遇到特别好车的时候就少。</p>\n<p>如果连续赢，那么可能会突然遇到相对比当前级别实力高的玩家。如果连续输 3 - 4 局，那么会遇到比当前级别实力低的玩家。连输是指每局排名 6 名以后。</p>\n<p>钻石往上，大师中级以下，这时候特别容易遇到说话、骂人的，应该是都是经常玩的玩家，会玩一点，玩不好，你撞他他撞你，脾气大。其他级别，几乎没见过说话骂人啥的。</p>\n<p>个人竞速最容易开赛，组队竞速、道具都很难开赛。组队道具感觉最容易上分（很大程度上运气决定吧），竞速尤其是个人竞速，完全靠自己实力上分。组队竞速，更大程度上依赖团队蓝气配合，配合的好相当于至少比对手多 10% 氮气！所以队友配合太重要了。</p>\n<h2 id=\"道具和普通竞速\"><a href=\"#道具和普通竞速\" class=\"headerlink\" title=\"道具和普通竞速\"></a>道具和普通竞速</h2><p>这些玩的太少了，基本上没什么经验。不过可以肯定，你遇到什么级别玩家都有可能，因为是开放场，没啥规律。由于经常被踢，所以开赛感觉还是挺困难的。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>玩了半年的跑跑，感觉自己提升挺慢的。和自己一起玩的朋友感觉提升特别快，我只能靠多玩和练习来提升。感觉跑跑还是挺硬核的一个游戏。</p>\n<p>对于提升来说，优先要保证地图熟悉，否则再好的技术也不知道应该哪里提前漂移。</p>\n<p>其次，联系好基本功。常规的漂移、拖漂、拖漂延续、反向集气、断漂补气等，一开始觉得太难了，后来慢慢的有的图就有了点手感。</p>\n<p>依稀记得城镇高速公路，曾经最好成绩还是 2:10，基本上最好成绩都没办法跑前四。现在在有对抗下也能跑出 1:58 左右。</p>\n<p>最后，应该就是稍微看看顶级玩家如何跑，大概什么位置要集气多少，如何走路线，如何贴边。这个比较难，要自己模仿去练习。平时每天排位赛前，我都会练习计时赛。个别时候还会单独去练习某张地图，一练就是半小时（10 局）起步。</p>\n<p>目前努力到王者 5 段位。看了下 2019 年微信游戏的报告，不确定出报告时候是按照大师 1 段位统计的还是王者 5 段位统计的，我大概已经超越了 94% 的玩家。</p>\n<p>虽然成绩还凑合，但是这里面有大量的流失玩家，基本上真实玩家在 25% 左右。这么看来，王者充其量就是一个认真玩的玩家的正常水准。</p>\n<p>争取 2020 加油。</p>\n<p>–END–</p>"},{"layout":"post","title":"Apple Watch 5 四个月的上手体验","date":"2020-01-27T22:31:00.000Z","_content":"\n在 Apple Watch 5 发售后，我就第一时间订购了。到现在已有 4 个月时间。在收到货之前，以及现在，大部分时候只要看到关于 Apple Watch 5 的文章，我也非常乐意去看下。\n\n<!-- more -->\n\n本想着体验 1 个月就写一写，结果发现体验不够准，而且覆盖面太少了。一拖再拖，直到过年。\n\n## 为什么是 Apple Watch 5\n\n最早我是用西铁城的光动能手表的。这个表太沉了，而且金属的表链配合苹果笔记本总有刮痕的声音。后来养成了看表的习惯，属于有手机都会额外看表的习惯，晚上也会看手表。但是西铁城只能靠吸收光线后，十二个刻度外加两根指针有荧光效果，并且荧光不能持续很久，我就在考虑更换一块手表了。不过这块手表好处是相对比较正式（其实表盘内还有计时器功能，还是觉得不太正式），并且有光就可以充电，我估计后续只有考试的时候会用了。\n\n2019年初，买了小米手环 3。应该是刚出不太久，因为买的时候 NFC 版本还没有出。买小米手环主要是解决晚上/夜里看时间的问题，还有可以收到手机通知。其实这两个需求只要是个稍微能连接手机的的电子表就可以实现。选择小米手环 3 主要考虑到他是大厂成产并且便宜。\n\n小米手环 3 在 Apple Watch 到手之前（2019年9月）也聊过了。可以参见 [这里](https://www.yukapril.com/2019/09/21/miband3.html)。虽然有很多问题，但是基本功能都算有了：夜里看时间、手机通知、运动记录、闹铃、长续航。只不过除了续航外，体验都不太好。\n\n这就有了 Apple Watch 5 的机会。\n\n你是愿意选择 200 块不到小米手环 4？还是花 3500 块去体验优秀的 Apple Watch 5？我选择后者。\n\n超过 1000 块，为什么不直接选择一个目前地球上体验最好的设备呢？\n\n**题外话：**当时没有 1300 元小米真-智能手表，也没有800 元小米手表 Color。这俩货是年底才推出的。不过要选的话，我估计真-智能手表看不上，他外观过分了啊。小米手表 Color 貌似有些卡，如果体验能上去，我愿意考虑。\n\n## 订购\n\n由于北京当时还没有 e-sim，而且我应该不会出现手表离开手机的情况，所以就只考虑普通版。\n\n订购过程，绝对算得上是一个小插曲。\n\n由于公司就在大悦城楼上，所以发布后我就非常关注。去试戴，咨询到货时间。\n\n当时店员主要透露了两点，事后证明都是**错的**：\n\n1. Apple Watch 有门店预约计划。在发布会上说了时间，官网会开放预约线上订购。同时可以开放线下预约。后来又有一个店员搭腔，说线上订购开放的第二天才会开放线下预约。\n2. 这个店员带的 Apple Watch 3，可以使用 1 天半多，预计 Apple Watch 5 两天问题不大。\n\n事后才知道都是错误的。首先是预约，这个手表根本就没有线上预约线下取货的情况，所以不存在所谓的时间了。其次是 Apple Watch 5 根据这四个月的佩戴，续航 2 天的方案不是没有，是太极限了，基本上没有价值。\n\n正是因为被欺骗了，导致我没有第一时间订购手表，第二天下午才订购。结果根据发货的统计，应该是第二批发货了。幸运的是，十一之前 2 天左右终于送到了。\n\n此外，我研究了这次快递号，大概估算了每日的发货量和地区分布。由于原始文件丢失了，不过当时估算第一批也就是 2400 左右。第二批 1300 左右。比起手机还是差的太远了。\n\n![发货统计](https://cdn0.yukapril.com/2020-01-27-aw-1.jpeg-wm.white)\n\n## 手表细节\n\n由于手表这么主流，我就不准备太多图片了。说说我的一些细节感受。\n\n我订购的是44 mm 的普通铝金属，因为感觉一块过几年就会淘汰的手表，不值得买贵重外壳，并且我十分爱惜物品，基本上不会弄上太多划痕。\n\n表带选择了小号、黑色。因为黑色大号根本订不到！至少要等 2 个月才有货。\n\n![开箱](https://cdn0.yukapril.com/2020-01-27-aw-2.jpeg-wm.white)\n\n![手表正面](https://cdn0.yukapril.com/2020-01-27-aw-4.jpeg-wm.white)\n\n![手表背面](https://cdn0.yukapril.com/2020-01-27-aw-5.jpeg-wm.white)\n\n![手表安装后还有一条下表带](https://cdn0.yukapril.com/2020-01-27-aw-3.jpeg-wm.white)\n\n这里必须感谢一下最早（大概是发布前 1 个月左右）去大悦城店试戴时候的一个店员，他告诉我买小号就好，一是和我手腕正合适，不会有多出来的表带需要塞进卡扣里；二是小号套装里面除了一个上表带，是带有两个尺寸的下表带的，你自己可以换！不用直接买大号表带！事后也证明这是非常正确的！\n\n## 手表体验\n\n钱花到位了，体验自然查不了。我说说我最常用最期待的一些功能体验。\n\n#### Always Display On 屏幕常亮\n\n现在它终于是一块能随时看时间的手表了。Always Display On（屏幕常亮）只能用于 Apple Watch 5，可以实时看时间，不需要抬腕亮屏了。虽然 Apple Watch 5 灵敏度非常高，基本上不会遇到之前小米手环的垃圾体验，但是我还是开启了。这个功能属于开了就关不了的功能。\n\n不过我感觉开启了屏幕常亮后，抬腕亮屏灵敏度有些许下降，大概相当于原来的 90~95% 灵敏度。而且加入颜色动画，感觉慢了很多。\n\n#### 提醒消息\n\n可以理解原本 iPhone 的通知栏直接挪到了手表上。\n\n对于系统自带的软件，比如手机收到邮件，通知栏可以看内容，可以删除、归档。那么手表也可以基本完成一样的操作，甚至还能提供更多的快捷回复语之类。\n\n对于第三方软件，如果手表没安装 APP，或者 APP 不提供手机那种复杂的功能，那就是纯看通知了。当然如果安装了对应 APP，也是可以点击跳转到 APP的。\n\n这里还有一个 bug，你们也可以感受下：\n\n![不能点击关闭](https://cdn0.yukapril.com/2020-01-27-aw-6.jpeg-wm.white)\n\n收到短信后，手表查阅。然后滚动到页面最下面，直到不能滚动为止。此时 “关闭” 按钮点击不了。好几个版本了，都不能点击。\n\n#### 指南针\n\n我属于是出门找不到北的那种，之前手机的指南针就觉得非常有用。否则出了地铁找方向，只能开着导航走几十米，看看自己的方向...或者打开 iPhone 的指南针看下。所以指南针非常期待登录 Apple Watch 5。\n\n实际来看，对我没什么卵用。买了之后除了体验玩了 2 次，实际这四个月只用了 1 次。因为我几乎不去不认识的地方！那指南针有啥用！\n\n好不容易去个陌生的地方，那我没下地铁前就肯定开导航，查查出那个口比较近。之后...为啥我还要额外用手表看指南针，用手机直接看指南针不好吗？\n\n**所以这个非常期待的功能实际没什么卵用。**\n\n#### 噪音检测\n\n也是 Apple Watch 5 新增的功能。直接上结论，没用！\n\n你身边有没有噪音你耳朵听不到吗？如果真听不到那这 3500 块的手表钱还不够你看病的！\n\n现实大部分情况是你可能身边很嘈杂，但是却不能离开。比如你们公司隔壁装修，你也必须在你工位工作。\n\n我能想到的唯一用途就是娱乐，比如我用机械键盘打字，看看噪音多少...（可惜的是我并没有这样测试过）\n\n#### 健康类（运动检测、记录、心率）\n\n![夜里下班骑车回家](https://cdn0.yukapril.com/2020-01-27-aw-7.jpeg-wm.white)\n\n首先我是不指望他监督我运动的，我只是希望能记录下而已。\n\n虽然我平时就是戴着它只走路，每个季度能跑步一次就不错了。但是还是很喜欢他的半自动运动记录方式（它感觉你在运动，会过一小会主动问你，让你确认）。并且三个圆环展示效果非常好。唯独就是站立时间计算，我觉得很不准。\n\n还有他的站立提醒、呼吸提醒，我都很喜欢。\n\n现在我经常看看运动圆环，偶尔进行呼吸冥想，虽然不能逼迫自己运动，但已经起到敦促的效果了，有时候真的自己会运动一下。所以我认为它的体验是非常优秀的。\n\n心率也是我有时候会用到的功能，通过 APP 我了解了自己休息、走路、跑步的心率情况，可喜的是国内没有开放心电图。\n\n#### NFC 支付类\n\n由于之前用的小米手环没有NFC，都是用手机刷公交。这次手表支持了，就直接在手机上把银行卡、公交卡切换到手表上了。\n\n>这里有一个问题，把手机的卡转移到手表上，成功之后手机上就没有卡了。\n>\n>比如公交卡，原因应该是一张卡只能被绑定到一台设备上吧，当然手机还可以再重新开启一张新的公交卡（卡号不同，需要单独充值）。\n\n每次都是刷手表，手机不用切换到刷卡页了。不过好像手机直接刷 NFC 对我也没有什么影响...但我觉得还是更方便一些，因为整个过程不需要准备手机了。而且，手表竟然可以直接用绑定的银行卡给公交卡充值，**无需手机操作**。\n\n#### 闹钟\n\n选择贴身电子设备好处就是闹钟可以只让自己醒而不用打扰他人。自从用了小米手环后就觉得这样的闹钟体验太好了。\n\n> 这一点我在大学就非常有感受：平时爱迟到的人设置很早的闹铃，把其他人都叫醒了，自己却没醒。\n\n手表和手机一样可以设置多个闹钟，到时候会震动提醒，力度很合适。之前小米手环有时候我竟然感觉不到，或者误碰了关闭按钮！Apple Watch 是点击屏幕左侧按钮，复杂度提升了一点点，正好合适。\n\n#### 地图\n\n手表地图必须和手机地图联动，两个 APP 会同时启动，所以不能手表导航手机干别的了，尴尬。我唯一能想到这么做的优势是，手表只需要提供 GPS 接收外，其他计算都可以放到手机上完成，变相给手表省电。不过如果是 e-sim 卡版本呢？就不晓得了。\n\n实际使用意义不大，因为我的手表离不开手机，那我为啥不用大屏幕设备进行导航？或者为啥不用高德地图导航，非要用系统自带地图？这么小的屏幕，获取的信息就太少了，也可能显示不完整。\n\n![导航可能遇到地名太长不完整显示](https://cdn0.yukapril.com/2020-01-27-aw-8.jpeg-wm.white)\n\n如果不是手机完成计算，那么手机也要开启地图不是鸡肋么？反正很难理解。\n\n#### 电话\n\n很少用手表打电话，但是接电话确很方便。比如做饭时候，上卫生间时候（上卫生间竟然不拿手机！）、早晨洗漱时候，来个电话直接手表免提接听。还有就是手机被小孩拿走玩游戏时候，我可以通过手表直接打电话，而且手机那边没有任何影响（不会跳转到拨号功能，游戏可以继续），省时省力省心。\n\n#### 手电筒\n\n表盘界面，从下向上滑动，可以看到手电筒。打开后屏幕亮度最大，白色。\n\n这个功能太常用了，晚上不开夜灯我就靠它了。\n\n#### 其他\n\n天气、计算器、拍照辅助、倒计时、计时器这些，我几乎没怎么用过。\n\n天气主要是提供的内容太少了。\n\n拍照辅助冷启动慢，而且经常手表看不到手机内容，是黑屏的。但是触摸对焦、拍照之类是 OK 的。\n\n倒计时我就在做饭时候用过 2~3次。之前都是不停的看时间完成定时。\n\n计时器，我又不跑步计时、玩魔方计时，这个实在是用不到。\n\n#### 和 MacOS 联动\n\nApple Watch竟然可以充当指纹设备有木有！当用苹果本需要唤起系统自带的密码输入框时候，按两下手表切换键（按两下相当于支付功能）等于输入了指纹！\n\n在离开后锁屏，之后回来解锁时非常好用；还有就是系统设置时候需要进行解锁时。不过其他场景我遇到的非常少了。\n\n## 手表佩戴\n\n我是非常离不开手表的，除了充电意外，其他时间都会戴在手上。\n\n#### 户外\n\n之前用小米手环，户外看时间基本看不清。现在 Apple Watch 体验好太多了。日期时间非常清楚。不过运动时候（比如骑车），个别运动数据是彩色的，有些暗，不是那么清楚。\n\n![白天骑车效果](https://cdn0.yukapril.com/2020-01-27-aw-9.jpeg-wm.white)\n\n#### 洗澡\n\n虽说 Apple Watch 防水，但是也是常温水。据说不防水蒸气。所以除了买之后带着它洗过澡 3~5 次，后续都是充电，或者藏在卫生间衣服里防止进水蒸气。洗澡是一种放松，所以中途经常会忘记自己洗澡时候洗了多久...\n\n这一点小米手环比较好。由于没有按钮，密封相对好一点，只有外露充电电极，而且便宜，坏了不心疼，就无所谓洗澡防不防水了。\n\n#### 做饭、刷碗\n\n做饭还好，之前忘了干什么，手不停地翻转，会导致反复抬腕亮屏。\n\n刷碗时候我很慎重，怕油污沾到手表表盘、表带上，后续觉得清洗太麻烦。个别时候我还是选择摘下来，不过很多时候还是自己小心些，不弄上油污。\n\n#### 划痕\n\n买手表时候同时在淘宝买了贴膜，水凝膜那种。\n\n首先是这种膜特别容易滑动，第一张膜贴了3个月，最后因为偏移了20%导致我直接撕了。第二张膜过了一夜，就发生偏移，直接又撕了。到目前就没再贴膜了。\n\n幸运的是，我的 Apple Watch 目前没有任何划痕，我想主要应该是注意保护外加铝金属没有那么差劲吧。\n\n**感觉最容易碰的位置是手表上侧靠近手的角**，因为日常活动这里碰撞最多。其他三个边框我认为基本上不会碰到。\n\n**屏幕我几乎没有碰过**，所以现在不贴膜了。\n\n![立式充电的手表](https://cdn0.yukapril.com/2020-01-27-aw-10.jpeg-wm.white)\n\n充电容易造成划痕，一是如果立式充电，那么总有一个边框直接放桌子上，会有磨损。所以还是建议平躺充电。\n\n此外，充电中会自动息屏，没办法直接看时间。除非你给它一点轻微震动，或者在闹铃响前 5 分钟它也会逐渐亮屏。\n\n**所以拿它充电时候当时钟，不现实！**除非像我家一样，桌子不是特别稳，电脑打字就会有轻微抖动。\n\n## 第三方 APP\n\n我装的第三方 APP 很少。\n\n微信：主要是你不装它，就没办法进行高级一点的回复，或者查看历史聊天内容。APP 倒是感觉不卡，但是聊天排序、内容都不太准，像是网速极慢的那种。\n\n支付宝：只能提供二维码被扫，好像还能查快递？反正我用不上，删除了。\n\n一款记录饮水的 APP：忘了叫什么了，但是非常傻！我手机上也安装了，手机定时提醒，手表也定时提醒！是分开提醒的！这 APP 作者脑子是不是有问题...果断删除了。\n\n微博：只能和别人 PK 步数！？一个微博只能统计步数？我装它有啥用？\n\n墨迹天气：如果要看天气，我肯定看墨迹，因为提供的数据比自带的多很多，排版也容易理解。\n\n## 手表续航和充电\n\n手表续航可以单独拿出来说道说道了。\n\n先说开启关闭哪些功能、以及一些模式：\n\n* 屏幕常亮开启\n* 心率检测开启\n* GPS 没办法关闭的，手表自动管理\n* 晚上睡觉开启剧院模式，屏幕黑屏\n* 平时主要是有推送消息，大概每天不到 100 条\n* 很少玩手表，一直玩手表比开启其它任何功能都费电\n\n#### 正常使用\n\n平时我都是晚上充电，充满后带手表睡觉。早晨起来大概 90% 左右。夜间平均每小时耗电 1% 左右。这个主要是待机耗电，还有心率检测耗电。\n\n白天大概每小时耗电 4% 左右。这个主要是屏幕常亮、心率检测、推送以及待机耗电。\n\n这样每天晚上到家基本上还能剩下 40% 多的电量。个别时候能接近 50%，但是情况极少。\n\n#### 关闭功能情况\n\n**心率关闭**\n\n如果关闭心率，夜间能稍微省一点电，预计每小时耗电 0.7-1.0% 左右。白天预计每小时耗电 2.85% 左右。这样到家预计可以剩下 60% 不到的电量。由此来看，心率预计一天需要消耗 15% 左右电量。\n\n**心率、屏幕常亮都关闭**\n\n早晨起来剩余 95%。夜间预计每小时耗电 0.7-1.0% 左右。由于夜间已经剧院模式，所以屏幕常亮没什么用，开关不影响。白天预计每小时耗电 2.2-2.5% 左右。晚上下班到家预计可以剩下 65% 左右电量。由此来看，屏幕常亮大概一天需要消耗10-15% 左右的电量，和心率差不太多。**但我感觉好像屏幕常亮大概应该在 15-20% 左右**。可能还是测试数据量不够多或者有数据不太准。\n\n**噪音检测**\n\n根据苹果的设计，如果你不是打开到对应 APP 界面，或者表盘上有该 APP 的功能，那么该 APP 后台不会运行。\n\n所以这个关闭与否无所谓。只要表盘没有此功能，那么默认就是关闭。上面我也说这个功能没啥用了，所以就没测试。\n\n**导航（GPS）**\n\n我记得我测试过，大概测试了 1 小时，不过数据找不到了。根据印象，导航 1 小时，费电 10% 左右。\n\n**运动模式（GPS、运动检测）**\n\n这个记不住自己是否测试过了，不做说明了。但应该比导航费电，因为除了 GPS外，还需要手表各种运动检测记录，这都需要手表自己来计算。\n\n#### 充电时间\n\n一开始我都是晚上 10 点后，给笔记本解锁后，就放在桌上充电。这样一般从 30% 开始，需要充电一小时多。不过也有特别费电的时候，大概从 10% 不到，充满需要一个半小时以上。\n\n有时候考虑加班，又怕坐地铁没电，中午休息打游戏时候，会充电半小时。所以很多时候上班都是带着充电器来回跑的。中午充电好处是，晚上可以更快速的充好电。因为好多次我都会忘记充。\n\n11月，感觉特别费电，但我记得没有更新固件。目前原因也不知道。1月开始，又变的费电了，可能是温度低了？每天比上面提到的还要费掉 10%。所以最近1个月基本上天天带着充电器。\n\n#### 充电建议\n\n首先如果你是用电大户，比如平时就爱手表玩游戏，这个是无解的。戒掉玩手表习惯。\n\n如果和我一样基本上 24 小时佩戴，工作还算规律，可以考虑晚上一次 1.5 小时的充电，也可以分开充电。\n\n如果 24 小时佩戴，并且工作不太规律，那么一定提前安排好充电，否则正常使用最多到第二天中午左右。\n\n如果只是白天戴，那么无所谓啦，肯定一整天足够的。\n\n我不建议早晨充电，主要是早晨时间普遍紧张，我洗漱、吃东西时候是非常关注时间的，防止赶不上车迟到等。而且就算充电，我从起床到出门也只有半小时时间，留给充电只有不到 20 分钟。手表的穿戴，解锁都需要时间，还不如到公司再充电。\n\n#### 硬撑 2 天方案\n\n非要把 Apple Watch 用到 2 天，有些难度。我也不敢测试，怕耽误事。不过根据数据来看，还是有可能的。\n\n首先晚上充好电，可以戴着睡觉。但关闭屏幕常亮、心率检测。晚上睡觉时候开启剧场模式，防止亮屏。这样早晨起来应该有 95% 左右。\n\n白天除了看消息、看时间，其他功能要少用。估计晚上下班还可以有 60% 以上。\n\n第二天早晨预计还能有 50%，第二天下班时预计还能有 15% 左右。这样甚至可以撑到第三天早上。\n\n以上是理论数据，实际来看应该不太容易。第一天还好，剩余 60% 应该很容易（我剩余过 68%）。但是30-70% 这个阶段电量感觉不耐用，第二天可能掉电会快一些。\n\n这么极限，会让使用体验大幅下降。所以它还是一天一充设备。\n\n#### 纯电子表的方案\n\n如果只把它当做一块纯电子表，那么续航肯定长很多，但是体验太差了，具体能多久没测试。\n\n**操作：**没表盘显示界面里，从下面向上滑，点击电量，即可看到省电模式。切换之后，只能看时间，并且只能使用电子数字方式显示，也不能抬腕亮屏，需要按两个实体按钮（任意均可）才能看时间，并且按了之后需要等1-2秒才能显示。其他啥都没有了。这相当于智能系统关机了，只保留屏幕显示和时间驱动。\n\n这个模式，还远不如小米手环好用。我不知道它的意义是什么。难道就是为了应急看下时间？\n\n退出省电模式也很容易，重启手表...其实就是重新开启智能系统。按住开关机键 3 秒就好了。\n\n省电模式简直是垃圾...绝对不要用。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n--END--","source":"_posts/2020/2020-01-27-apple-watch-5.md","raw":"---\nlayout: post\ntitle: Apple Watch 5 四个月的上手体验\ndate: 2020-01-27 22:31:00 GMT+0800\ncategories: [外设]\ntags:  [Apple Watch]\n---\n\n在 Apple Watch 5 发售后，我就第一时间订购了。到现在已有 4 个月时间。在收到货之前，以及现在，大部分时候只要看到关于 Apple Watch 5 的文章，我也非常乐意去看下。\n\n<!-- more -->\n\n本想着体验 1 个月就写一写，结果发现体验不够准，而且覆盖面太少了。一拖再拖，直到过年。\n\n## 为什么是 Apple Watch 5\n\n最早我是用西铁城的光动能手表的。这个表太沉了，而且金属的表链配合苹果笔记本总有刮痕的声音。后来养成了看表的习惯，属于有手机都会额外看表的习惯，晚上也会看手表。但是西铁城只能靠吸收光线后，十二个刻度外加两根指针有荧光效果，并且荧光不能持续很久，我就在考虑更换一块手表了。不过这块手表好处是相对比较正式（其实表盘内还有计时器功能，还是觉得不太正式），并且有光就可以充电，我估计后续只有考试的时候会用了。\n\n2019年初，买了小米手环 3。应该是刚出不太久，因为买的时候 NFC 版本还没有出。买小米手环主要是解决晚上/夜里看时间的问题，还有可以收到手机通知。其实这两个需求只要是个稍微能连接手机的的电子表就可以实现。选择小米手环 3 主要考虑到他是大厂成产并且便宜。\n\n小米手环 3 在 Apple Watch 到手之前（2019年9月）也聊过了。可以参见 [这里](https://www.yukapril.com/2019/09/21/miband3.html)。虽然有很多问题，但是基本功能都算有了：夜里看时间、手机通知、运动记录、闹铃、长续航。只不过除了续航外，体验都不太好。\n\n这就有了 Apple Watch 5 的机会。\n\n你是愿意选择 200 块不到小米手环 4？还是花 3500 块去体验优秀的 Apple Watch 5？我选择后者。\n\n超过 1000 块，为什么不直接选择一个目前地球上体验最好的设备呢？\n\n**题外话：**当时没有 1300 元小米真-智能手表，也没有800 元小米手表 Color。这俩货是年底才推出的。不过要选的话，我估计真-智能手表看不上，他外观过分了啊。小米手表 Color 貌似有些卡，如果体验能上去，我愿意考虑。\n\n## 订购\n\n由于北京当时还没有 e-sim，而且我应该不会出现手表离开手机的情况，所以就只考虑普通版。\n\n订购过程，绝对算得上是一个小插曲。\n\n由于公司就在大悦城楼上，所以发布后我就非常关注。去试戴，咨询到货时间。\n\n当时店员主要透露了两点，事后证明都是**错的**：\n\n1. Apple Watch 有门店预约计划。在发布会上说了时间，官网会开放预约线上订购。同时可以开放线下预约。后来又有一个店员搭腔，说线上订购开放的第二天才会开放线下预约。\n2. 这个店员带的 Apple Watch 3，可以使用 1 天半多，预计 Apple Watch 5 两天问题不大。\n\n事后才知道都是错误的。首先是预约，这个手表根本就没有线上预约线下取货的情况，所以不存在所谓的时间了。其次是 Apple Watch 5 根据这四个月的佩戴，续航 2 天的方案不是没有，是太极限了，基本上没有价值。\n\n正是因为被欺骗了，导致我没有第一时间订购手表，第二天下午才订购。结果根据发货的统计，应该是第二批发货了。幸运的是，十一之前 2 天左右终于送到了。\n\n此外，我研究了这次快递号，大概估算了每日的发货量和地区分布。由于原始文件丢失了，不过当时估算第一批也就是 2400 左右。第二批 1300 左右。比起手机还是差的太远了。\n\n![发货统计](https://cdn0.yukapril.com/2020-01-27-aw-1.jpeg-wm.white)\n\n## 手表细节\n\n由于手表这么主流，我就不准备太多图片了。说说我的一些细节感受。\n\n我订购的是44 mm 的普通铝金属，因为感觉一块过几年就会淘汰的手表，不值得买贵重外壳，并且我十分爱惜物品，基本上不会弄上太多划痕。\n\n表带选择了小号、黑色。因为黑色大号根本订不到！至少要等 2 个月才有货。\n\n![开箱](https://cdn0.yukapril.com/2020-01-27-aw-2.jpeg-wm.white)\n\n![手表正面](https://cdn0.yukapril.com/2020-01-27-aw-4.jpeg-wm.white)\n\n![手表背面](https://cdn0.yukapril.com/2020-01-27-aw-5.jpeg-wm.white)\n\n![手表安装后还有一条下表带](https://cdn0.yukapril.com/2020-01-27-aw-3.jpeg-wm.white)\n\n这里必须感谢一下最早（大概是发布前 1 个月左右）去大悦城店试戴时候的一个店员，他告诉我买小号就好，一是和我手腕正合适，不会有多出来的表带需要塞进卡扣里；二是小号套装里面除了一个上表带，是带有两个尺寸的下表带的，你自己可以换！不用直接买大号表带！事后也证明这是非常正确的！\n\n## 手表体验\n\n钱花到位了，体验自然查不了。我说说我最常用最期待的一些功能体验。\n\n#### Always Display On 屏幕常亮\n\n现在它终于是一块能随时看时间的手表了。Always Display On（屏幕常亮）只能用于 Apple Watch 5，可以实时看时间，不需要抬腕亮屏了。虽然 Apple Watch 5 灵敏度非常高，基本上不会遇到之前小米手环的垃圾体验，但是我还是开启了。这个功能属于开了就关不了的功能。\n\n不过我感觉开启了屏幕常亮后，抬腕亮屏灵敏度有些许下降，大概相当于原来的 90~95% 灵敏度。而且加入颜色动画，感觉慢了很多。\n\n#### 提醒消息\n\n可以理解原本 iPhone 的通知栏直接挪到了手表上。\n\n对于系统自带的软件，比如手机收到邮件，通知栏可以看内容，可以删除、归档。那么手表也可以基本完成一样的操作，甚至还能提供更多的快捷回复语之类。\n\n对于第三方软件，如果手表没安装 APP，或者 APP 不提供手机那种复杂的功能，那就是纯看通知了。当然如果安装了对应 APP，也是可以点击跳转到 APP的。\n\n这里还有一个 bug，你们也可以感受下：\n\n![不能点击关闭](https://cdn0.yukapril.com/2020-01-27-aw-6.jpeg-wm.white)\n\n收到短信后，手表查阅。然后滚动到页面最下面，直到不能滚动为止。此时 “关闭” 按钮点击不了。好几个版本了，都不能点击。\n\n#### 指南针\n\n我属于是出门找不到北的那种，之前手机的指南针就觉得非常有用。否则出了地铁找方向，只能开着导航走几十米，看看自己的方向...或者打开 iPhone 的指南针看下。所以指南针非常期待登录 Apple Watch 5。\n\n实际来看，对我没什么卵用。买了之后除了体验玩了 2 次，实际这四个月只用了 1 次。因为我几乎不去不认识的地方！那指南针有啥用！\n\n好不容易去个陌生的地方，那我没下地铁前就肯定开导航，查查出那个口比较近。之后...为啥我还要额外用手表看指南针，用手机直接看指南针不好吗？\n\n**所以这个非常期待的功能实际没什么卵用。**\n\n#### 噪音检测\n\n也是 Apple Watch 5 新增的功能。直接上结论，没用！\n\n你身边有没有噪音你耳朵听不到吗？如果真听不到那这 3500 块的手表钱还不够你看病的！\n\n现实大部分情况是你可能身边很嘈杂，但是却不能离开。比如你们公司隔壁装修，你也必须在你工位工作。\n\n我能想到的唯一用途就是娱乐，比如我用机械键盘打字，看看噪音多少...（可惜的是我并没有这样测试过）\n\n#### 健康类（运动检测、记录、心率）\n\n![夜里下班骑车回家](https://cdn0.yukapril.com/2020-01-27-aw-7.jpeg-wm.white)\n\n首先我是不指望他监督我运动的，我只是希望能记录下而已。\n\n虽然我平时就是戴着它只走路，每个季度能跑步一次就不错了。但是还是很喜欢他的半自动运动记录方式（它感觉你在运动，会过一小会主动问你，让你确认）。并且三个圆环展示效果非常好。唯独就是站立时间计算，我觉得很不准。\n\n还有他的站立提醒、呼吸提醒，我都很喜欢。\n\n现在我经常看看运动圆环，偶尔进行呼吸冥想，虽然不能逼迫自己运动，但已经起到敦促的效果了，有时候真的自己会运动一下。所以我认为它的体验是非常优秀的。\n\n心率也是我有时候会用到的功能，通过 APP 我了解了自己休息、走路、跑步的心率情况，可喜的是国内没有开放心电图。\n\n#### NFC 支付类\n\n由于之前用的小米手环没有NFC，都是用手机刷公交。这次手表支持了，就直接在手机上把银行卡、公交卡切换到手表上了。\n\n>这里有一个问题，把手机的卡转移到手表上，成功之后手机上就没有卡了。\n>\n>比如公交卡，原因应该是一张卡只能被绑定到一台设备上吧，当然手机还可以再重新开启一张新的公交卡（卡号不同，需要单独充值）。\n\n每次都是刷手表，手机不用切换到刷卡页了。不过好像手机直接刷 NFC 对我也没有什么影响...但我觉得还是更方便一些，因为整个过程不需要准备手机了。而且，手表竟然可以直接用绑定的银行卡给公交卡充值，**无需手机操作**。\n\n#### 闹钟\n\n选择贴身电子设备好处就是闹钟可以只让自己醒而不用打扰他人。自从用了小米手环后就觉得这样的闹钟体验太好了。\n\n> 这一点我在大学就非常有感受：平时爱迟到的人设置很早的闹铃，把其他人都叫醒了，自己却没醒。\n\n手表和手机一样可以设置多个闹钟，到时候会震动提醒，力度很合适。之前小米手环有时候我竟然感觉不到，或者误碰了关闭按钮！Apple Watch 是点击屏幕左侧按钮，复杂度提升了一点点，正好合适。\n\n#### 地图\n\n手表地图必须和手机地图联动，两个 APP 会同时启动，所以不能手表导航手机干别的了，尴尬。我唯一能想到这么做的优势是，手表只需要提供 GPS 接收外，其他计算都可以放到手机上完成，变相给手表省电。不过如果是 e-sim 卡版本呢？就不晓得了。\n\n实际使用意义不大，因为我的手表离不开手机，那我为啥不用大屏幕设备进行导航？或者为啥不用高德地图导航，非要用系统自带地图？这么小的屏幕，获取的信息就太少了，也可能显示不完整。\n\n![导航可能遇到地名太长不完整显示](https://cdn0.yukapril.com/2020-01-27-aw-8.jpeg-wm.white)\n\n如果不是手机完成计算，那么手机也要开启地图不是鸡肋么？反正很难理解。\n\n#### 电话\n\n很少用手表打电话，但是接电话确很方便。比如做饭时候，上卫生间时候（上卫生间竟然不拿手机！）、早晨洗漱时候，来个电话直接手表免提接听。还有就是手机被小孩拿走玩游戏时候，我可以通过手表直接打电话，而且手机那边没有任何影响（不会跳转到拨号功能，游戏可以继续），省时省力省心。\n\n#### 手电筒\n\n表盘界面，从下向上滑动，可以看到手电筒。打开后屏幕亮度最大，白色。\n\n这个功能太常用了，晚上不开夜灯我就靠它了。\n\n#### 其他\n\n天气、计算器、拍照辅助、倒计时、计时器这些，我几乎没怎么用过。\n\n天气主要是提供的内容太少了。\n\n拍照辅助冷启动慢，而且经常手表看不到手机内容，是黑屏的。但是触摸对焦、拍照之类是 OK 的。\n\n倒计时我就在做饭时候用过 2~3次。之前都是不停的看时间完成定时。\n\n计时器，我又不跑步计时、玩魔方计时，这个实在是用不到。\n\n#### 和 MacOS 联动\n\nApple Watch竟然可以充当指纹设备有木有！当用苹果本需要唤起系统自带的密码输入框时候，按两下手表切换键（按两下相当于支付功能）等于输入了指纹！\n\n在离开后锁屏，之后回来解锁时非常好用；还有就是系统设置时候需要进行解锁时。不过其他场景我遇到的非常少了。\n\n## 手表佩戴\n\n我是非常离不开手表的，除了充电意外，其他时间都会戴在手上。\n\n#### 户外\n\n之前用小米手环，户外看时间基本看不清。现在 Apple Watch 体验好太多了。日期时间非常清楚。不过运动时候（比如骑车），个别运动数据是彩色的，有些暗，不是那么清楚。\n\n![白天骑车效果](https://cdn0.yukapril.com/2020-01-27-aw-9.jpeg-wm.white)\n\n#### 洗澡\n\n虽说 Apple Watch 防水，但是也是常温水。据说不防水蒸气。所以除了买之后带着它洗过澡 3~5 次，后续都是充电，或者藏在卫生间衣服里防止进水蒸气。洗澡是一种放松，所以中途经常会忘记自己洗澡时候洗了多久...\n\n这一点小米手环比较好。由于没有按钮，密封相对好一点，只有外露充电电极，而且便宜，坏了不心疼，就无所谓洗澡防不防水了。\n\n#### 做饭、刷碗\n\n做饭还好，之前忘了干什么，手不停地翻转，会导致反复抬腕亮屏。\n\n刷碗时候我很慎重，怕油污沾到手表表盘、表带上，后续觉得清洗太麻烦。个别时候我还是选择摘下来，不过很多时候还是自己小心些，不弄上油污。\n\n#### 划痕\n\n买手表时候同时在淘宝买了贴膜，水凝膜那种。\n\n首先是这种膜特别容易滑动，第一张膜贴了3个月，最后因为偏移了20%导致我直接撕了。第二张膜过了一夜，就发生偏移，直接又撕了。到目前就没再贴膜了。\n\n幸运的是，我的 Apple Watch 目前没有任何划痕，我想主要应该是注意保护外加铝金属没有那么差劲吧。\n\n**感觉最容易碰的位置是手表上侧靠近手的角**，因为日常活动这里碰撞最多。其他三个边框我认为基本上不会碰到。\n\n**屏幕我几乎没有碰过**，所以现在不贴膜了。\n\n![立式充电的手表](https://cdn0.yukapril.com/2020-01-27-aw-10.jpeg-wm.white)\n\n充电容易造成划痕，一是如果立式充电，那么总有一个边框直接放桌子上，会有磨损。所以还是建议平躺充电。\n\n此外，充电中会自动息屏，没办法直接看时间。除非你给它一点轻微震动，或者在闹铃响前 5 分钟它也会逐渐亮屏。\n\n**所以拿它充电时候当时钟，不现实！**除非像我家一样，桌子不是特别稳，电脑打字就会有轻微抖动。\n\n## 第三方 APP\n\n我装的第三方 APP 很少。\n\n微信：主要是你不装它，就没办法进行高级一点的回复，或者查看历史聊天内容。APP 倒是感觉不卡，但是聊天排序、内容都不太准，像是网速极慢的那种。\n\n支付宝：只能提供二维码被扫，好像还能查快递？反正我用不上，删除了。\n\n一款记录饮水的 APP：忘了叫什么了，但是非常傻！我手机上也安装了，手机定时提醒，手表也定时提醒！是分开提醒的！这 APP 作者脑子是不是有问题...果断删除了。\n\n微博：只能和别人 PK 步数！？一个微博只能统计步数？我装它有啥用？\n\n墨迹天气：如果要看天气，我肯定看墨迹，因为提供的数据比自带的多很多，排版也容易理解。\n\n## 手表续航和充电\n\n手表续航可以单独拿出来说道说道了。\n\n先说开启关闭哪些功能、以及一些模式：\n\n* 屏幕常亮开启\n* 心率检测开启\n* GPS 没办法关闭的，手表自动管理\n* 晚上睡觉开启剧院模式，屏幕黑屏\n* 平时主要是有推送消息，大概每天不到 100 条\n* 很少玩手表，一直玩手表比开启其它任何功能都费电\n\n#### 正常使用\n\n平时我都是晚上充电，充满后带手表睡觉。早晨起来大概 90% 左右。夜间平均每小时耗电 1% 左右。这个主要是待机耗电，还有心率检测耗电。\n\n白天大概每小时耗电 4% 左右。这个主要是屏幕常亮、心率检测、推送以及待机耗电。\n\n这样每天晚上到家基本上还能剩下 40% 多的电量。个别时候能接近 50%，但是情况极少。\n\n#### 关闭功能情况\n\n**心率关闭**\n\n如果关闭心率，夜间能稍微省一点电，预计每小时耗电 0.7-1.0% 左右。白天预计每小时耗电 2.85% 左右。这样到家预计可以剩下 60% 不到的电量。由此来看，心率预计一天需要消耗 15% 左右电量。\n\n**心率、屏幕常亮都关闭**\n\n早晨起来剩余 95%。夜间预计每小时耗电 0.7-1.0% 左右。由于夜间已经剧院模式，所以屏幕常亮没什么用，开关不影响。白天预计每小时耗电 2.2-2.5% 左右。晚上下班到家预计可以剩下 65% 左右电量。由此来看，屏幕常亮大概一天需要消耗10-15% 左右的电量，和心率差不太多。**但我感觉好像屏幕常亮大概应该在 15-20% 左右**。可能还是测试数据量不够多或者有数据不太准。\n\n**噪音检测**\n\n根据苹果的设计，如果你不是打开到对应 APP 界面，或者表盘上有该 APP 的功能，那么该 APP 后台不会运行。\n\n所以这个关闭与否无所谓。只要表盘没有此功能，那么默认就是关闭。上面我也说这个功能没啥用了，所以就没测试。\n\n**导航（GPS）**\n\n我记得我测试过，大概测试了 1 小时，不过数据找不到了。根据印象，导航 1 小时，费电 10% 左右。\n\n**运动模式（GPS、运动检测）**\n\n这个记不住自己是否测试过了，不做说明了。但应该比导航费电，因为除了 GPS外，还需要手表各种运动检测记录，这都需要手表自己来计算。\n\n#### 充电时间\n\n一开始我都是晚上 10 点后，给笔记本解锁后，就放在桌上充电。这样一般从 30% 开始，需要充电一小时多。不过也有特别费电的时候，大概从 10% 不到，充满需要一个半小时以上。\n\n有时候考虑加班，又怕坐地铁没电，中午休息打游戏时候，会充电半小时。所以很多时候上班都是带着充电器来回跑的。中午充电好处是，晚上可以更快速的充好电。因为好多次我都会忘记充。\n\n11月，感觉特别费电，但我记得没有更新固件。目前原因也不知道。1月开始，又变的费电了，可能是温度低了？每天比上面提到的还要费掉 10%。所以最近1个月基本上天天带着充电器。\n\n#### 充电建议\n\n首先如果你是用电大户，比如平时就爱手表玩游戏，这个是无解的。戒掉玩手表习惯。\n\n如果和我一样基本上 24 小时佩戴，工作还算规律，可以考虑晚上一次 1.5 小时的充电，也可以分开充电。\n\n如果 24 小时佩戴，并且工作不太规律，那么一定提前安排好充电，否则正常使用最多到第二天中午左右。\n\n如果只是白天戴，那么无所谓啦，肯定一整天足够的。\n\n我不建议早晨充电，主要是早晨时间普遍紧张，我洗漱、吃东西时候是非常关注时间的，防止赶不上车迟到等。而且就算充电，我从起床到出门也只有半小时时间，留给充电只有不到 20 分钟。手表的穿戴，解锁都需要时间，还不如到公司再充电。\n\n#### 硬撑 2 天方案\n\n非要把 Apple Watch 用到 2 天，有些难度。我也不敢测试，怕耽误事。不过根据数据来看，还是有可能的。\n\n首先晚上充好电，可以戴着睡觉。但关闭屏幕常亮、心率检测。晚上睡觉时候开启剧场模式，防止亮屏。这样早晨起来应该有 95% 左右。\n\n白天除了看消息、看时间，其他功能要少用。估计晚上下班还可以有 60% 以上。\n\n第二天早晨预计还能有 50%，第二天下班时预计还能有 15% 左右。这样甚至可以撑到第三天早上。\n\n以上是理论数据，实际来看应该不太容易。第一天还好，剩余 60% 应该很容易（我剩余过 68%）。但是30-70% 这个阶段电量感觉不耐用，第二天可能掉电会快一些。\n\n这么极限，会让使用体验大幅下降。所以它还是一天一充设备。\n\n#### 纯电子表的方案\n\n如果只把它当做一块纯电子表，那么续航肯定长很多，但是体验太差了，具体能多久没测试。\n\n**操作：**没表盘显示界面里，从下面向上滑，点击电量，即可看到省电模式。切换之后，只能看时间，并且只能使用电子数字方式显示，也不能抬腕亮屏，需要按两个实体按钮（任意均可）才能看时间，并且按了之后需要等1-2秒才能显示。其他啥都没有了。这相当于智能系统关机了，只保留屏幕显示和时间驱动。\n\n这个模式，还远不如小米手环好用。我不知道它的意义是什么。难道就是为了应急看下时间？\n\n退出省电模式也很容易，重启手表...其实就是重新开启智能系统。按住开关机键 3 秒就好了。\n\n省电模式简直是垃圾...绝对不要用。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n--END--","slug":"2020-2020-01-27-apple-watch-5","published":1,"updated":"2020-03-02T07:16:34.764Z","comments":1,"photos":[],"link":"","_id":"cka5ik8dw007snybggnj5jwac","content":"<p>在 Apple Watch 5 发售后，我就第一时间订购了。到现在已有 4 个月时间。在收到货之前，以及现在，大部分时候只要看到关于 Apple Watch 5 的文章，我也非常乐意去看下。</p>\n<a id=\"more\"></a>\n\n<p>本想着体验 1 个月就写一写，结果发现体验不够准，而且覆盖面太少了。一拖再拖，直到过年。</p>\n<h2 id=\"为什么是-Apple-Watch-5\"><a href=\"#为什么是-Apple-Watch-5\" class=\"headerlink\" title=\"为什么是 Apple Watch 5\"></a>为什么是 Apple Watch 5</h2><p>最早我是用西铁城的光动能手表的。这个表太沉了，而且金属的表链配合苹果笔记本总有刮痕的声音。后来养成了看表的习惯，属于有手机都会额外看表的习惯，晚上也会看手表。但是西铁城只能靠吸收光线后，十二个刻度外加两根指针有荧光效果，并且荧光不能持续很久，我就在考虑更换一块手表了。不过这块手表好处是相对比较正式（其实表盘内还有计时器功能，还是觉得不太正式），并且有光就可以充电，我估计后续只有考试的时候会用了。</p>\n<p>2019年初，买了小米手环 3。应该是刚出不太久，因为买的时候 NFC 版本还没有出。买小米手环主要是解决晚上/夜里看时间的问题，还有可以收到手机通知。其实这两个需求只要是个稍微能连接手机的的电子表就可以实现。选择小米手环 3 主要考虑到他是大厂成产并且便宜。</p>\n<p>小米手环 3 在 Apple Watch 到手之前（2019年9月）也聊过了。可以参见 <a href=\"https://www.yukapril.com/2019/09/21/miband3.html\">这里</a>。虽然有很多问题，但是基本功能都算有了：夜里看时间、手机通知、运动记录、闹铃、长续航。只不过除了续航外，体验都不太好。</p>\n<p>这就有了 Apple Watch 5 的机会。</p>\n<p>你是愿意选择 200 块不到小米手环 4？还是花 3500 块去体验优秀的 Apple Watch 5？我选择后者。</p>\n<p>超过 1000 块，为什么不直接选择一个目前地球上体验最好的设备呢？</p>\n<p><strong>题外话：</strong>当时没有 1300 元小米真-智能手表，也没有800 元小米手表 Color。这俩货是年底才推出的。不过要选的话，我估计真-智能手表看不上，他外观过分了啊。小米手表 Color 貌似有些卡，如果体验能上去，我愿意考虑。</p>\n<h2 id=\"订购\"><a href=\"#订购\" class=\"headerlink\" title=\"订购\"></a>订购</h2><p>由于北京当时还没有 e-sim，而且我应该不会出现手表离开手机的情况，所以就只考虑普通版。</p>\n<p>订购过程，绝对算得上是一个小插曲。</p>\n<p>由于公司就在大悦城楼上，所以发布后我就非常关注。去试戴，咨询到货时间。</p>\n<p>当时店员主要透露了两点，事后证明都是<strong>错的</strong>：</p>\n<ol>\n<li>Apple Watch 有门店预约计划。在发布会上说了时间，官网会开放预约线上订购。同时可以开放线下预约。后来又有一个店员搭腔，说线上订购开放的第二天才会开放线下预约。</li>\n<li>这个店员带的 Apple Watch 3，可以使用 1 天半多，预计 Apple Watch 5 两天问题不大。</li>\n</ol>\n<p>事后才知道都是错误的。首先是预约，这个手表根本就没有线上预约线下取货的情况，所以不存在所谓的时间了。其次是 Apple Watch 5 根据这四个月的佩戴，续航 2 天的方案不是没有，是太极限了，基本上没有价值。</p>\n<p>正是因为被欺骗了，导致我没有第一时间订购手表，第二天下午才订购。结果根据发货的统计，应该是第二批发货了。幸运的是，十一之前 2 天左右终于送到了。</p>\n<p>此外，我研究了这次快递号，大概估算了每日的发货量和地区分布。由于原始文件丢失了，不过当时估算第一批也就是 2400 左右。第二批 1300 左右。比起手机还是差的太远了。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-01-27-aw-1.jpeg-wm.white\" alt=\"发货统计\"></p>\n<h2 id=\"手表细节\"><a href=\"#手表细节\" class=\"headerlink\" title=\"手表细节\"></a>手表细节</h2><p>由于手表这么主流，我就不准备太多图片了。说说我的一些细节感受。</p>\n<p>我订购的是44 mm 的普通铝金属，因为感觉一块过几年就会淘汰的手表，不值得买贵重外壳，并且我十分爱惜物品，基本上不会弄上太多划痕。</p>\n<p>表带选择了小号、黑色。因为黑色大号根本订不到！至少要等 2 个月才有货。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-01-27-aw-2.jpeg-wm.white\" alt=\"开箱\"></p>\n<p><img src=\"https://cdn0.yukapril.com/2020-01-27-aw-4.jpeg-wm.white\" alt=\"手表正面\"></p>\n<p><img src=\"https://cdn0.yukapril.com/2020-01-27-aw-5.jpeg-wm.white\" alt=\"手表背面\"></p>\n<p><img src=\"https://cdn0.yukapril.com/2020-01-27-aw-3.jpeg-wm.white\" alt=\"手表安装后还有一条下表带\"></p>\n<p>这里必须感谢一下最早（大概是发布前 1 个月左右）去大悦城店试戴时候的一个店员，他告诉我买小号就好，一是和我手腕正合适，不会有多出来的表带需要塞进卡扣里；二是小号套装里面除了一个上表带，是带有两个尺寸的下表带的，你自己可以换！不用直接买大号表带！事后也证明这是非常正确的！</p>\n<h2 id=\"手表体验\"><a href=\"#手表体验\" class=\"headerlink\" title=\"手表体验\"></a>手表体验</h2><p>钱花到位了，体验自然查不了。我说说我最常用最期待的一些功能体验。</p>\n<h4 id=\"Always-Display-On-屏幕常亮\"><a href=\"#Always-Display-On-屏幕常亮\" class=\"headerlink\" title=\"Always Display On 屏幕常亮\"></a>Always Display On 屏幕常亮</h4><p>现在它终于是一块能随时看时间的手表了。Always Display On（屏幕常亮）只能用于 Apple Watch 5，可以实时看时间，不需要抬腕亮屏了。虽然 Apple Watch 5 灵敏度非常高，基本上不会遇到之前小米手环的垃圾体验，但是我还是开启了。这个功能属于开了就关不了的功能。</p>\n<p>不过我感觉开启了屏幕常亮后，抬腕亮屏灵敏度有些许下降，大概相当于原来的 90~95% 灵敏度。而且加入颜色动画，感觉慢了很多。</p>\n<h4 id=\"提醒消息\"><a href=\"#提醒消息\" class=\"headerlink\" title=\"提醒消息\"></a>提醒消息</h4><p>可以理解原本 iPhone 的通知栏直接挪到了手表上。</p>\n<p>对于系统自带的软件，比如手机收到邮件，通知栏可以看内容，可以删除、归档。那么手表也可以基本完成一样的操作，甚至还能提供更多的快捷回复语之类。</p>\n<p>对于第三方软件，如果手表没安装 APP，或者 APP 不提供手机那种复杂的功能，那就是纯看通知了。当然如果安装了对应 APP，也是可以点击跳转到 APP的。</p>\n<p>这里还有一个 bug，你们也可以感受下：</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-01-27-aw-6.jpeg-wm.white\" alt=\"不能点击关闭\"></p>\n<p>收到短信后，手表查阅。然后滚动到页面最下面，直到不能滚动为止。此时 “关闭” 按钮点击不了。好几个版本了，都不能点击。</p>\n<h4 id=\"指南针\"><a href=\"#指南针\" class=\"headerlink\" title=\"指南针\"></a>指南针</h4><p>我属于是出门找不到北的那种，之前手机的指南针就觉得非常有用。否则出了地铁找方向，只能开着导航走几十米，看看自己的方向…或者打开 iPhone 的指南针看下。所以指南针非常期待登录 Apple Watch 5。</p>\n<p>实际来看，对我没什么卵用。买了之后除了体验玩了 2 次，实际这四个月只用了 1 次。因为我几乎不去不认识的地方！那指南针有啥用！</p>\n<p>好不容易去个陌生的地方，那我没下地铁前就肯定开导航，查查出那个口比较近。之后…为啥我还要额外用手表看指南针，用手机直接看指南针不好吗？</p>\n<p><strong>所以这个非常期待的功能实际没什么卵用。</strong></p>\n<h4 id=\"噪音检测\"><a href=\"#噪音检测\" class=\"headerlink\" title=\"噪音检测\"></a>噪音检测</h4><p>也是 Apple Watch 5 新增的功能。直接上结论，没用！</p>\n<p>你身边有没有噪音你耳朵听不到吗？如果真听不到那这 3500 块的手表钱还不够你看病的！</p>\n<p>现实大部分情况是你可能身边很嘈杂，但是却不能离开。比如你们公司隔壁装修，你也必须在你工位工作。</p>\n<p>我能想到的唯一用途就是娱乐，比如我用机械键盘打字，看看噪音多少…（可惜的是我并没有这样测试过）</p>\n<h4 id=\"健康类（运动检测、记录、心率）\"><a href=\"#健康类（运动检测、记录、心率）\" class=\"headerlink\" title=\"健康类（运动检测、记录、心率）\"></a>健康类（运动检测、记录、心率）</h4><p><img src=\"https://cdn0.yukapril.com/2020-01-27-aw-7.jpeg-wm.white\" alt=\"夜里下班骑车回家\"></p>\n<p>首先我是不指望他监督我运动的，我只是希望能记录下而已。</p>\n<p>虽然我平时就是戴着它只走路，每个季度能跑步一次就不错了。但是还是很喜欢他的半自动运动记录方式（它感觉你在运动，会过一小会主动问你，让你确认）。并且三个圆环展示效果非常好。唯独就是站立时间计算，我觉得很不准。</p>\n<p>还有他的站立提醒、呼吸提醒，我都很喜欢。</p>\n<p>现在我经常看看运动圆环，偶尔进行呼吸冥想，虽然不能逼迫自己运动，但已经起到敦促的效果了，有时候真的自己会运动一下。所以我认为它的体验是非常优秀的。</p>\n<p>心率也是我有时候会用到的功能，通过 APP 我了解了自己休息、走路、跑步的心率情况，可喜的是国内没有开放心电图。</p>\n<h4 id=\"NFC-支付类\"><a href=\"#NFC-支付类\" class=\"headerlink\" title=\"NFC 支付类\"></a>NFC 支付类</h4><p>由于之前用的小米手环没有NFC，都是用手机刷公交。这次手表支持了，就直接在手机上把银行卡、公交卡切换到手表上了。</p>\n<blockquote>\n<p>这里有一个问题，把手机的卡转移到手表上，成功之后手机上就没有卡了。</p>\n<p>比如公交卡，原因应该是一张卡只能被绑定到一台设备上吧，当然手机还可以再重新开启一张新的公交卡（卡号不同，需要单独充值）。</p>\n</blockquote>\n<p>每次都是刷手表，手机不用切换到刷卡页了。不过好像手机直接刷 NFC 对我也没有什么影响…但我觉得还是更方便一些，因为整个过程不需要准备手机了。而且，手表竟然可以直接用绑定的银行卡给公交卡充值，<strong>无需手机操作</strong>。</p>\n<h4 id=\"闹钟\"><a href=\"#闹钟\" class=\"headerlink\" title=\"闹钟\"></a>闹钟</h4><p>选择贴身电子设备好处就是闹钟可以只让自己醒而不用打扰他人。自从用了小米手环后就觉得这样的闹钟体验太好了。</p>\n<blockquote>\n<p>这一点我在大学就非常有感受：平时爱迟到的人设置很早的闹铃，把其他人都叫醒了，自己却没醒。</p>\n</blockquote>\n<p>手表和手机一样可以设置多个闹钟，到时候会震动提醒，力度很合适。之前小米手环有时候我竟然感觉不到，或者误碰了关闭按钮！Apple Watch 是点击屏幕左侧按钮，复杂度提升了一点点，正好合适。</p>\n<h4 id=\"地图\"><a href=\"#地图\" class=\"headerlink\" title=\"地图\"></a>地图</h4><p>手表地图必须和手机地图联动，两个 APP 会同时启动，所以不能手表导航手机干别的了，尴尬。我唯一能想到这么做的优势是，手表只需要提供 GPS 接收外，其他计算都可以放到手机上完成，变相给手表省电。不过如果是 e-sim 卡版本呢？就不晓得了。</p>\n<p>实际使用意义不大，因为我的手表离不开手机，那我为啥不用大屏幕设备进行导航？或者为啥不用高德地图导航，非要用系统自带地图？这么小的屏幕，获取的信息就太少了，也可能显示不完整。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-01-27-aw-8.jpeg-wm.white\" alt=\"导航可能遇到地名太长不完整显示\"></p>\n<p>如果不是手机完成计算，那么手机也要开启地图不是鸡肋么？反正很难理解。</p>\n<h4 id=\"电话\"><a href=\"#电话\" class=\"headerlink\" title=\"电话\"></a>电话</h4><p>很少用手表打电话，但是接电话确很方便。比如做饭时候，上卫生间时候（上卫生间竟然不拿手机！）、早晨洗漱时候，来个电话直接手表免提接听。还有就是手机被小孩拿走玩游戏时候，我可以通过手表直接打电话，而且手机那边没有任何影响（不会跳转到拨号功能，游戏可以继续），省时省力省心。</p>\n<h4 id=\"手电筒\"><a href=\"#手电筒\" class=\"headerlink\" title=\"手电筒\"></a>手电筒</h4><p>表盘界面，从下向上滑动，可以看到手电筒。打开后屏幕亮度最大，白色。</p>\n<p>这个功能太常用了，晚上不开夜灯我就靠它了。</p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>天气、计算器、拍照辅助、倒计时、计时器这些，我几乎没怎么用过。</p>\n<p>天气主要是提供的内容太少了。</p>\n<p>拍照辅助冷启动慢，而且经常手表看不到手机内容，是黑屏的。但是触摸对焦、拍照之类是 OK 的。</p>\n<p>倒计时我就在做饭时候用过 2~3次。之前都是不停的看时间完成定时。</p>\n<p>计时器，我又不跑步计时、玩魔方计时，这个实在是用不到。</p>\n<h4 id=\"和-MacOS-联动\"><a href=\"#和-MacOS-联动\" class=\"headerlink\" title=\"和 MacOS 联动\"></a>和 MacOS 联动</h4><p>Apple Watch竟然可以充当指纹设备有木有！当用苹果本需要唤起系统自带的密码输入框时候，按两下手表切换键（按两下相当于支付功能）等于输入了指纹！</p>\n<p>在离开后锁屏，之后回来解锁时非常好用；还有就是系统设置时候需要进行解锁时。不过其他场景我遇到的非常少了。</p>\n<h2 id=\"手表佩戴\"><a href=\"#手表佩戴\" class=\"headerlink\" title=\"手表佩戴\"></a>手表佩戴</h2><p>我是非常离不开手表的，除了充电意外，其他时间都会戴在手上。</p>\n<h4 id=\"户外\"><a href=\"#户外\" class=\"headerlink\" title=\"户外\"></a>户外</h4><p>之前用小米手环，户外看时间基本看不清。现在 Apple Watch 体验好太多了。日期时间非常清楚。不过运动时候（比如骑车），个别运动数据是彩色的，有些暗，不是那么清楚。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-01-27-aw-9.jpeg-wm.white\" alt=\"白天骑车效果\"></p>\n<h4 id=\"洗澡\"><a href=\"#洗澡\" class=\"headerlink\" title=\"洗澡\"></a>洗澡</h4><p>虽说 Apple Watch 防水，但是也是常温水。据说不防水蒸气。所以除了买之后带着它洗过澡 3~5 次，后续都是充电，或者藏在卫生间衣服里防止进水蒸气。洗澡是一种放松，所以中途经常会忘记自己洗澡时候洗了多久…</p>\n<p>这一点小米手环比较好。由于没有按钮，密封相对好一点，只有外露充电电极，而且便宜，坏了不心疼，就无所谓洗澡防不防水了。</p>\n<h4 id=\"做饭、刷碗\"><a href=\"#做饭、刷碗\" class=\"headerlink\" title=\"做饭、刷碗\"></a>做饭、刷碗</h4><p>做饭还好，之前忘了干什么，手不停地翻转，会导致反复抬腕亮屏。</p>\n<p>刷碗时候我很慎重，怕油污沾到手表表盘、表带上，后续觉得清洗太麻烦。个别时候我还是选择摘下来，不过很多时候还是自己小心些，不弄上油污。</p>\n<h4 id=\"划痕\"><a href=\"#划痕\" class=\"headerlink\" title=\"划痕\"></a>划痕</h4><p>买手表时候同时在淘宝买了贴膜，水凝膜那种。</p>\n<p>首先是这种膜特别容易滑动，第一张膜贴了3个月，最后因为偏移了20%导致我直接撕了。第二张膜过了一夜，就发生偏移，直接又撕了。到目前就没再贴膜了。</p>\n<p>幸运的是，我的 Apple Watch 目前没有任何划痕，我想主要应该是注意保护外加铝金属没有那么差劲吧。</p>\n<p><strong>感觉最容易碰的位置是手表上侧靠近手的角</strong>，因为日常活动这里碰撞最多。其他三个边框我认为基本上不会碰到。</p>\n<p><strong>屏幕我几乎没有碰过</strong>，所以现在不贴膜了。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-01-27-aw-10.jpeg-wm.white\" alt=\"立式充电的手表\"></p>\n<p>充电容易造成划痕，一是如果立式充电，那么总有一个边框直接放桌子上，会有磨损。所以还是建议平躺充电。</p>\n<p>此外，充电中会自动息屏，没办法直接看时间。除非你给它一点轻微震动，或者在闹铃响前 5 分钟它也会逐渐亮屏。</p>\n<p><strong>所以拿它充电时候当时钟，不现实！</strong>除非像我家一样，桌子不是特别稳，电脑打字就会有轻微抖动。</p>\n<h2 id=\"第三方-APP\"><a href=\"#第三方-APP\" class=\"headerlink\" title=\"第三方 APP\"></a>第三方 APP</h2><p>我装的第三方 APP 很少。</p>\n<p>微信：主要是你不装它，就没办法进行高级一点的回复，或者查看历史聊天内容。APP 倒是感觉不卡，但是聊天排序、内容都不太准，像是网速极慢的那种。</p>\n<p>支付宝：只能提供二维码被扫，好像还能查快递？反正我用不上，删除了。</p>\n<p>一款记录饮水的 APP：忘了叫什么了，但是非常傻！我手机上也安装了，手机定时提醒，手表也定时提醒！是分开提醒的！这 APP 作者脑子是不是有问题…果断删除了。</p>\n<p>微博：只能和别人 PK 步数！？一个微博只能统计步数？我装它有啥用？</p>\n<p>墨迹天气：如果要看天气，我肯定看墨迹，因为提供的数据比自带的多很多，排版也容易理解。</p>\n<h2 id=\"手表续航和充电\"><a href=\"#手表续航和充电\" class=\"headerlink\" title=\"手表续航和充电\"></a>手表续航和充电</h2><p>手表续航可以单独拿出来说道说道了。</p>\n<p>先说开启关闭哪些功能、以及一些模式：</p>\n<ul>\n<li>屏幕常亮开启</li>\n<li>心率检测开启</li>\n<li>GPS 没办法关闭的，手表自动管理</li>\n<li>晚上睡觉开启剧院模式，屏幕黑屏</li>\n<li>平时主要是有推送消息，大概每天不到 100 条</li>\n<li>很少玩手表，一直玩手表比开启其它任何功能都费电</li>\n</ul>\n<h4 id=\"正常使用\"><a href=\"#正常使用\" class=\"headerlink\" title=\"正常使用\"></a>正常使用</h4><p>平时我都是晚上充电，充满后带手表睡觉。早晨起来大概 90% 左右。夜间平均每小时耗电 1% 左右。这个主要是待机耗电，还有心率检测耗电。</p>\n<p>白天大概每小时耗电 4% 左右。这个主要是屏幕常亮、心率检测、推送以及待机耗电。</p>\n<p>这样每天晚上到家基本上还能剩下 40% 多的电量。个别时候能接近 50%，但是情况极少。</p>\n<h4 id=\"关闭功能情况\"><a href=\"#关闭功能情况\" class=\"headerlink\" title=\"关闭功能情况\"></a>关闭功能情况</h4><p><strong>心率关闭</strong></p>\n<p>如果关闭心率，夜间能稍微省一点电，预计每小时耗电 0.7-1.0% 左右。白天预计每小时耗电 2.85% 左右。这样到家预计可以剩下 60% 不到的电量。由此来看，心率预计一天需要消耗 15% 左右电量。</p>\n<p><strong>心率、屏幕常亮都关闭</strong></p>\n<p>早晨起来剩余 95%。夜间预计每小时耗电 0.7-1.0% 左右。由于夜间已经剧院模式，所以屏幕常亮没什么用，开关不影响。白天预计每小时耗电 2.2-2.5% 左右。晚上下班到家预计可以剩下 65% 左右电量。由此来看，屏幕常亮大概一天需要消耗10-15% 左右的电量，和心率差不太多。<strong>但我感觉好像屏幕常亮大概应该在 15-20% 左右</strong>。可能还是测试数据量不够多或者有数据不太准。</p>\n<p><strong>噪音检测</strong></p>\n<p>根据苹果的设计，如果你不是打开到对应 APP 界面，或者表盘上有该 APP 的功能，那么该 APP 后台不会运行。</p>\n<p>所以这个关闭与否无所谓。只要表盘没有此功能，那么默认就是关闭。上面我也说这个功能没啥用了，所以就没测试。</p>\n<p><strong>导航（GPS）</strong></p>\n<p>我记得我测试过，大概测试了 1 小时，不过数据找不到了。根据印象，导航 1 小时，费电 10% 左右。</p>\n<p><strong>运动模式（GPS、运动检测）</strong></p>\n<p>这个记不住自己是否测试过了，不做说明了。但应该比导航费电，因为除了 GPS外，还需要手表各种运动检测记录，这都需要手表自己来计算。</p>\n<h4 id=\"充电时间\"><a href=\"#充电时间\" class=\"headerlink\" title=\"充电时间\"></a>充电时间</h4><p>一开始我都是晚上 10 点后，给笔记本解锁后，就放在桌上充电。这样一般从 30% 开始，需要充电一小时多。不过也有特别费电的时候，大概从 10% 不到，充满需要一个半小时以上。</p>\n<p>有时候考虑加班，又怕坐地铁没电，中午休息打游戏时候，会充电半小时。所以很多时候上班都是带着充电器来回跑的。中午充电好处是，晚上可以更快速的充好电。因为好多次我都会忘记充。</p>\n<p>11月，感觉特别费电，但我记得没有更新固件。目前原因也不知道。1月开始，又变的费电了，可能是温度低了？每天比上面提到的还要费掉 10%。所以最近1个月基本上天天带着充电器。</p>\n<h4 id=\"充电建议\"><a href=\"#充电建议\" class=\"headerlink\" title=\"充电建议\"></a>充电建议</h4><p>首先如果你是用电大户，比如平时就爱手表玩游戏，这个是无解的。戒掉玩手表习惯。</p>\n<p>如果和我一样基本上 24 小时佩戴，工作还算规律，可以考虑晚上一次 1.5 小时的充电，也可以分开充电。</p>\n<p>如果 24 小时佩戴，并且工作不太规律，那么一定提前安排好充电，否则正常使用最多到第二天中午左右。</p>\n<p>如果只是白天戴，那么无所谓啦，肯定一整天足够的。</p>\n<p>我不建议早晨充电，主要是早晨时间普遍紧张，我洗漱、吃东西时候是非常关注时间的，防止赶不上车迟到等。而且就算充电，我从起床到出门也只有半小时时间，留给充电只有不到 20 分钟。手表的穿戴，解锁都需要时间，还不如到公司再充电。</p>\n<h4 id=\"硬撑-2-天方案\"><a href=\"#硬撑-2-天方案\" class=\"headerlink\" title=\"硬撑 2 天方案\"></a>硬撑 2 天方案</h4><p>非要把 Apple Watch 用到 2 天，有些难度。我也不敢测试，怕耽误事。不过根据数据来看，还是有可能的。</p>\n<p>首先晚上充好电，可以戴着睡觉。但关闭屏幕常亮、心率检测。晚上睡觉时候开启剧场模式，防止亮屏。这样早晨起来应该有 95% 左右。</p>\n<p>白天除了看消息、看时间，其他功能要少用。估计晚上下班还可以有 60% 以上。</p>\n<p>第二天早晨预计还能有 50%，第二天下班时预计还能有 15% 左右。这样甚至可以撑到第三天早上。</p>\n<p>以上是理论数据，实际来看应该不太容易。第一天还好，剩余 60% 应该很容易（我剩余过 68%）。但是30-70% 这个阶段电量感觉不耐用，第二天可能掉电会快一些。</p>\n<p>这么极限，会让使用体验大幅下降。所以它还是一天一充设备。</p>\n<h4 id=\"纯电子表的方案\"><a href=\"#纯电子表的方案\" class=\"headerlink\" title=\"纯电子表的方案\"></a>纯电子表的方案</h4><p>如果只把它当做一块纯电子表，那么续航肯定长很多，但是体验太差了，具体能多久没测试。</p>\n<p><strong>操作：</strong>没表盘显示界面里，从下面向上滑，点击电量，即可看到省电模式。切换之后，只能看时间，并且只能使用电子数字方式显示，也不能抬腕亮屏，需要按两个实体按钮（任意均可）才能看时间，并且按了之后需要等1-2秒才能显示。其他啥都没有了。这相当于智能系统关机了，只保留屏幕显示和时间驱动。</p>\n<p>这个模式，还远不如小米手环好用。我不知道它的意义是什么。难道就是为了应急看下时间？</p>\n<p>退出省电模式也很容易，重启手表…其实就是重新开启智能系统。按住开关机键 3 秒就好了。</p>\n<p>省电模式简直是垃圾…绝对不要用。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>在 Apple Watch 5 发售后，我就第一时间订购了。到现在已有 4 个月时间。在收到货之前，以及现在，大部分时候只要看到关于 Apple Watch 5 的文章，我也非常乐意去看下。</p>","more":"<p>本想着体验 1 个月就写一写，结果发现体验不够准，而且覆盖面太少了。一拖再拖，直到过年。</p>\n<h2 id=\"为什么是-Apple-Watch-5\"><a href=\"#为什么是-Apple-Watch-5\" class=\"headerlink\" title=\"为什么是 Apple Watch 5\"></a>为什么是 Apple Watch 5</h2><p>最早我是用西铁城的光动能手表的。这个表太沉了，而且金属的表链配合苹果笔记本总有刮痕的声音。后来养成了看表的习惯，属于有手机都会额外看表的习惯，晚上也会看手表。但是西铁城只能靠吸收光线后，十二个刻度外加两根指针有荧光效果，并且荧光不能持续很久，我就在考虑更换一块手表了。不过这块手表好处是相对比较正式（其实表盘内还有计时器功能，还是觉得不太正式），并且有光就可以充电，我估计后续只有考试的时候会用了。</p>\n<p>2019年初，买了小米手环 3。应该是刚出不太久，因为买的时候 NFC 版本还没有出。买小米手环主要是解决晚上/夜里看时间的问题，还有可以收到手机通知。其实这两个需求只要是个稍微能连接手机的的电子表就可以实现。选择小米手环 3 主要考虑到他是大厂成产并且便宜。</p>\n<p>小米手环 3 在 Apple Watch 到手之前（2019年9月）也聊过了。可以参见 <a href=\"https://www.yukapril.com/2019/09/21/miband3.html\">这里</a>。虽然有很多问题，但是基本功能都算有了：夜里看时间、手机通知、运动记录、闹铃、长续航。只不过除了续航外，体验都不太好。</p>\n<p>这就有了 Apple Watch 5 的机会。</p>\n<p>你是愿意选择 200 块不到小米手环 4？还是花 3500 块去体验优秀的 Apple Watch 5？我选择后者。</p>\n<p>超过 1000 块，为什么不直接选择一个目前地球上体验最好的设备呢？</p>\n<p><strong>题外话：</strong>当时没有 1300 元小米真-智能手表，也没有800 元小米手表 Color。这俩货是年底才推出的。不过要选的话，我估计真-智能手表看不上，他外观过分了啊。小米手表 Color 貌似有些卡，如果体验能上去，我愿意考虑。</p>\n<h2 id=\"订购\"><a href=\"#订购\" class=\"headerlink\" title=\"订购\"></a>订购</h2><p>由于北京当时还没有 e-sim，而且我应该不会出现手表离开手机的情况，所以就只考虑普通版。</p>\n<p>订购过程，绝对算得上是一个小插曲。</p>\n<p>由于公司就在大悦城楼上，所以发布后我就非常关注。去试戴，咨询到货时间。</p>\n<p>当时店员主要透露了两点，事后证明都是<strong>错的</strong>：</p>\n<ol>\n<li>Apple Watch 有门店预约计划。在发布会上说了时间，官网会开放预约线上订购。同时可以开放线下预约。后来又有一个店员搭腔，说线上订购开放的第二天才会开放线下预约。</li>\n<li>这个店员带的 Apple Watch 3，可以使用 1 天半多，预计 Apple Watch 5 两天问题不大。</li>\n</ol>\n<p>事后才知道都是错误的。首先是预约，这个手表根本就没有线上预约线下取货的情况，所以不存在所谓的时间了。其次是 Apple Watch 5 根据这四个月的佩戴，续航 2 天的方案不是没有，是太极限了，基本上没有价值。</p>\n<p>正是因为被欺骗了，导致我没有第一时间订购手表，第二天下午才订购。结果根据发货的统计，应该是第二批发货了。幸运的是，十一之前 2 天左右终于送到了。</p>\n<p>此外，我研究了这次快递号，大概估算了每日的发货量和地区分布。由于原始文件丢失了，不过当时估算第一批也就是 2400 左右。第二批 1300 左右。比起手机还是差的太远了。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-01-27-aw-1.jpeg-wm.white\" alt=\"发货统计\"></p>\n<h2 id=\"手表细节\"><a href=\"#手表细节\" class=\"headerlink\" title=\"手表细节\"></a>手表细节</h2><p>由于手表这么主流，我就不准备太多图片了。说说我的一些细节感受。</p>\n<p>我订购的是44 mm 的普通铝金属，因为感觉一块过几年就会淘汰的手表，不值得买贵重外壳，并且我十分爱惜物品，基本上不会弄上太多划痕。</p>\n<p>表带选择了小号、黑色。因为黑色大号根本订不到！至少要等 2 个月才有货。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-01-27-aw-2.jpeg-wm.white\" alt=\"开箱\"></p>\n<p><img src=\"https://cdn0.yukapril.com/2020-01-27-aw-4.jpeg-wm.white\" alt=\"手表正面\"></p>\n<p><img src=\"https://cdn0.yukapril.com/2020-01-27-aw-5.jpeg-wm.white\" alt=\"手表背面\"></p>\n<p><img src=\"https://cdn0.yukapril.com/2020-01-27-aw-3.jpeg-wm.white\" alt=\"手表安装后还有一条下表带\"></p>\n<p>这里必须感谢一下最早（大概是发布前 1 个月左右）去大悦城店试戴时候的一个店员，他告诉我买小号就好，一是和我手腕正合适，不会有多出来的表带需要塞进卡扣里；二是小号套装里面除了一个上表带，是带有两个尺寸的下表带的，你自己可以换！不用直接买大号表带！事后也证明这是非常正确的！</p>\n<h2 id=\"手表体验\"><a href=\"#手表体验\" class=\"headerlink\" title=\"手表体验\"></a>手表体验</h2><p>钱花到位了，体验自然查不了。我说说我最常用最期待的一些功能体验。</p>\n<h4 id=\"Always-Display-On-屏幕常亮\"><a href=\"#Always-Display-On-屏幕常亮\" class=\"headerlink\" title=\"Always Display On 屏幕常亮\"></a>Always Display On 屏幕常亮</h4><p>现在它终于是一块能随时看时间的手表了。Always Display On（屏幕常亮）只能用于 Apple Watch 5，可以实时看时间，不需要抬腕亮屏了。虽然 Apple Watch 5 灵敏度非常高，基本上不会遇到之前小米手环的垃圾体验，但是我还是开启了。这个功能属于开了就关不了的功能。</p>\n<p>不过我感觉开启了屏幕常亮后，抬腕亮屏灵敏度有些许下降，大概相当于原来的 90~95% 灵敏度。而且加入颜色动画，感觉慢了很多。</p>\n<h4 id=\"提醒消息\"><a href=\"#提醒消息\" class=\"headerlink\" title=\"提醒消息\"></a>提醒消息</h4><p>可以理解原本 iPhone 的通知栏直接挪到了手表上。</p>\n<p>对于系统自带的软件，比如手机收到邮件，通知栏可以看内容，可以删除、归档。那么手表也可以基本完成一样的操作，甚至还能提供更多的快捷回复语之类。</p>\n<p>对于第三方软件，如果手表没安装 APP，或者 APP 不提供手机那种复杂的功能，那就是纯看通知了。当然如果安装了对应 APP，也是可以点击跳转到 APP的。</p>\n<p>这里还有一个 bug，你们也可以感受下：</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-01-27-aw-6.jpeg-wm.white\" alt=\"不能点击关闭\"></p>\n<p>收到短信后，手表查阅。然后滚动到页面最下面，直到不能滚动为止。此时 “关闭” 按钮点击不了。好几个版本了，都不能点击。</p>\n<h4 id=\"指南针\"><a href=\"#指南针\" class=\"headerlink\" title=\"指南针\"></a>指南针</h4><p>我属于是出门找不到北的那种，之前手机的指南针就觉得非常有用。否则出了地铁找方向，只能开着导航走几十米，看看自己的方向…或者打开 iPhone 的指南针看下。所以指南针非常期待登录 Apple Watch 5。</p>\n<p>实际来看，对我没什么卵用。买了之后除了体验玩了 2 次，实际这四个月只用了 1 次。因为我几乎不去不认识的地方！那指南针有啥用！</p>\n<p>好不容易去个陌生的地方，那我没下地铁前就肯定开导航，查查出那个口比较近。之后…为啥我还要额外用手表看指南针，用手机直接看指南针不好吗？</p>\n<p><strong>所以这个非常期待的功能实际没什么卵用。</strong></p>\n<h4 id=\"噪音检测\"><a href=\"#噪音检测\" class=\"headerlink\" title=\"噪音检测\"></a>噪音检测</h4><p>也是 Apple Watch 5 新增的功能。直接上结论，没用！</p>\n<p>你身边有没有噪音你耳朵听不到吗？如果真听不到那这 3500 块的手表钱还不够你看病的！</p>\n<p>现实大部分情况是你可能身边很嘈杂，但是却不能离开。比如你们公司隔壁装修，你也必须在你工位工作。</p>\n<p>我能想到的唯一用途就是娱乐，比如我用机械键盘打字，看看噪音多少…（可惜的是我并没有这样测试过）</p>\n<h4 id=\"健康类（运动检测、记录、心率）\"><a href=\"#健康类（运动检测、记录、心率）\" class=\"headerlink\" title=\"健康类（运动检测、记录、心率）\"></a>健康类（运动检测、记录、心率）</h4><p><img src=\"https://cdn0.yukapril.com/2020-01-27-aw-7.jpeg-wm.white\" alt=\"夜里下班骑车回家\"></p>\n<p>首先我是不指望他监督我运动的，我只是希望能记录下而已。</p>\n<p>虽然我平时就是戴着它只走路，每个季度能跑步一次就不错了。但是还是很喜欢他的半自动运动记录方式（它感觉你在运动，会过一小会主动问你，让你确认）。并且三个圆环展示效果非常好。唯独就是站立时间计算，我觉得很不准。</p>\n<p>还有他的站立提醒、呼吸提醒，我都很喜欢。</p>\n<p>现在我经常看看运动圆环，偶尔进行呼吸冥想，虽然不能逼迫自己运动，但已经起到敦促的效果了，有时候真的自己会运动一下。所以我认为它的体验是非常优秀的。</p>\n<p>心率也是我有时候会用到的功能，通过 APP 我了解了自己休息、走路、跑步的心率情况，可喜的是国内没有开放心电图。</p>\n<h4 id=\"NFC-支付类\"><a href=\"#NFC-支付类\" class=\"headerlink\" title=\"NFC 支付类\"></a>NFC 支付类</h4><p>由于之前用的小米手环没有NFC，都是用手机刷公交。这次手表支持了，就直接在手机上把银行卡、公交卡切换到手表上了。</p>\n<blockquote>\n<p>这里有一个问题，把手机的卡转移到手表上，成功之后手机上就没有卡了。</p>\n<p>比如公交卡，原因应该是一张卡只能被绑定到一台设备上吧，当然手机还可以再重新开启一张新的公交卡（卡号不同，需要单独充值）。</p>\n</blockquote>\n<p>每次都是刷手表，手机不用切换到刷卡页了。不过好像手机直接刷 NFC 对我也没有什么影响…但我觉得还是更方便一些，因为整个过程不需要准备手机了。而且，手表竟然可以直接用绑定的银行卡给公交卡充值，<strong>无需手机操作</strong>。</p>\n<h4 id=\"闹钟\"><a href=\"#闹钟\" class=\"headerlink\" title=\"闹钟\"></a>闹钟</h4><p>选择贴身电子设备好处就是闹钟可以只让自己醒而不用打扰他人。自从用了小米手环后就觉得这样的闹钟体验太好了。</p>\n<blockquote>\n<p>这一点我在大学就非常有感受：平时爱迟到的人设置很早的闹铃，把其他人都叫醒了，自己却没醒。</p>\n</blockquote>\n<p>手表和手机一样可以设置多个闹钟，到时候会震动提醒，力度很合适。之前小米手环有时候我竟然感觉不到，或者误碰了关闭按钮！Apple Watch 是点击屏幕左侧按钮，复杂度提升了一点点，正好合适。</p>\n<h4 id=\"地图\"><a href=\"#地图\" class=\"headerlink\" title=\"地图\"></a>地图</h4><p>手表地图必须和手机地图联动，两个 APP 会同时启动，所以不能手表导航手机干别的了，尴尬。我唯一能想到这么做的优势是，手表只需要提供 GPS 接收外，其他计算都可以放到手机上完成，变相给手表省电。不过如果是 e-sim 卡版本呢？就不晓得了。</p>\n<p>实际使用意义不大，因为我的手表离不开手机，那我为啥不用大屏幕设备进行导航？或者为啥不用高德地图导航，非要用系统自带地图？这么小的屏幕，获取的信息就太少了，也可能显示不完整。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-01-27-aw-8.jpeg-wm.white\" alt=\"导航可能遇到地名太长不完整显示\"></p>\n<p>如果不是手机完成计算，那么手机也要开启地图不是鸡肋么？反正很难理解。</p>\n<h4 id=\"电话\"><a href=\"#电话\" class=\"headerlink\" title=\"电话\"></a>电话</h4><p>很少用手表打电话，但是接电话确很方便。比如做饭时候，上卫生间时候（上卫生间竟然不拿手机！）、早晨洗漱时候，来个电话直接手表免提接听。还有就是手机被小孩拿走玩游戏时候，我可以通过手表直接打电话，而且手机那边没有任何影响（不会跳转到拨号功能，游戏可以继续），省时省力省心。</p>\n<h4 id=\"手电筒\"><a href=\"#手电筒\" class=\"headerlink\" title=\"手电筒\"></a>手电筒</h4><p>表盘界面，从下向上滑动，可以看到手电筒。打开后屏幕亮度最大，白色。</p>\n<p>这个功能太常用了，晚上不开夜灯我就靠它了。</p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>天气、计算器、拍照辅助、倒计时、计时器这些，我几乎没怎么用过。</p>\n<p>天气主要是提供的内容太少了。</p>\n<p>拍照辅助冷启动慢，而且经常手表看不到手机内容，是黑屏的。但是触摸对焦、拍照之类是 OK 的。</p>\n<p>倒计时我就在做饭时候用过 2~3次。之前都是不停的看时间完成定时。</p>\n<p>计时器，我又不跑步计时、玩魔方计时，这个实在是用不到。</p>\n<h4 id=\"和-MacOS-联动\"><a href=\"#和-MacOS-联动\" class=\"headerlink\" title=\"和 MacOS 联动\"></a>和 MacOS 联动</h4><p>Apple Watch竟然可以充当指纹设备有木有！当用苹果本需要唤起系统自带的密码输入框时候，按两下手表切换键（按两下相当于支付功能）等于输入了指纹！</p>\n<p>在离开后锁屏，之后回来解锁时非常好用；还有就是系统设置时候需要进行解锁时。不过其他场景我遇到的非常少了。</p>\n<h2 id=\"手表佩戴\"><a href=\"#手表佩戴\" class=\"headerlink\" title=\"手表佩戴\"></a>手表佩戴</h2><p>我是非常离不开手表的，除了充电意外，其他时间都会戴在手上。</p>\n<h4 id=\"户外\"><a href=\"#户外\" class=\"headerlink\" title=\"户外\"></a>户外</h4><p>之前用小米手环，户外看时间基本看不清。现在 Apple Watch 体验好太多了。日期时间非常清楚。不过运动时候（比如骑车），个别运动数据是彩色的，有些暗，不是那么清楚。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-01-27-aw-9.jpeg-wm.white\" alt=\"白天骑车效果\"></p>\n<h4 id=\"洗澡\"><a href=\"#洗澡\" class=\"headerlink\" title=\"洗澡\"></a>洗澡</h4><p>虽说 Apple Watch 防水，但是也是常温水。据说不防水蒸气。所以除了买之后带着它洗过澡 3~5 次，后续都是充电，或者藏在卫生间衣服里防止进水蒸气。洗澡是一种放松，所以中途经常会忘记自己洗澡时候洗了多久…</p>\n<p>这一点小米手环比较好。由于没有按钮，密封相对好一点，只有外露充电电极，而且便宜，坏了不心疼，就无所谓洗澡防不防水了。</p>\n<h4 id=\"做饭、刷碗\"><a href=\"#做饭、刷碗\" class=\"headerlink\" title=\"做饭、刷碗\"></a>做饭、刷碗</h4><p>做饭还好，之前忘了干什么，手不停地翻转，会导致反复抬腕亮屏。</p>\n<p>刷碗时候我很慎重，怕油污沾到手表表盘、表带上，后续觉得清洗太麻烦。个别时候我还是选择摘下来，不过很多时候还是自己小心些，不弄上油污。</p>\n<h4 id=\"划痕\"><a href=\"#划痕\" class=\"headerlink\" title=\"划痕\"></a>划痕</h4><p>买手表时候同时在淘宝买了贴膜，水凝膜那种。</p>\n<p>首先是这种膜特别容易滑动，第一张膜贴了3个月，最后因为偏移了20%导致我直接撕了。第二张膜过了一夜，就发生偏移，直接又撕了。到目前就没再贴膜了。</p>\n<p>幸运的是，我的 Apple Watch 目前没有任何划痕，我想主要应该是注意保护外加铝金属没有那么差劲吧。</p>\n<p><strong>感觉最容易碰的位置是手表上侧靠近手的角</strong>，因为日常活动这里碰撞最多。其他三个边框我认为基本上不会碰到。</p>\n<p><strong>屏幕我几乎没有碰过</strong>，所以现在不贴膜了。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-01-27-aw-10.jpeg-wm.white\" alt=\"立式充电的手表\"></p>\n<p>充电容易造成划痕，一是如果立式充电，那么总有一个边框直接放桌子上，会有磨损。所以还是建议平躺充电。</p>\n<p>此外，充电中会自动息屏，没办法直接看时间。除非你给它一点轻微震动，或者在闹铃响前 5 分钟它也会逐渐亮屏。</p>\n<p><strong>所以拿它充电时候当时钟，不现实！</strong>除非像我家一样，桌子不是特别稳，电脑打字就会有轻微抖动。</p>\n<h2 id=\"第三方-APP\"><a href=\"#第三方-APP\" class=\"headerlink\" title=\"第三方 APP\"></a>第三方 APP</h2><p>我装的第三方 APP 很少。</p>\n<p>微信：主要是你不装它，就没办法进行高级一点的回复，或者查看历史聊天内容。APP 倒是感觉不卡，但是聊天排序、内容都不太准，像是网速极慢的那种。</p>\n<p>支付宝：只能提供二维码被扫，好像还能查快递？反正我用不上，删除了。</p>\n<p>一款记录饮水的 APP：忘了叫什么了，但是非常傻！我手机上也安装了，手机定时提醒，手表也定时提醒！是分开提醒的！这 APP 作者脑子是不是有问题…果断删除了。</p>\n<p>微博：只能和别人 PK 步数！？一个微博只能统计步数？我装它有啥用？</p>\n<p>墨迹天气：如果要看天气，我肯定看墨迹，因为提供的数据比自带的多很多，排版也容易理解。</p>\n<h2 id=\"手表续航和充电\"><a href=\"#手表续航和充电\" class=\"headerlink\" title=\"手表续航和充电\"></a>手表续航和充电</h2><p>手表续航可以单独拿出来说道说道了。</p>\n<p>先说开启关闭哪些功能、以及一些模式：</p>\n<ul>\n<li>屏幕常亮开启</li>\n<li>心率检测开启</li>\n<li>GPS 没办法关闭的，手表自动管理</li>\n<li>晚上睡觉开启剧院模式，屏幕黑屏</li>\n<li>平时主要是有推送消息，大概每天不到 100 条</li>\n<li>很少玩手表，一直玩手表比开启其它任何功能都费电</li>\n</ul>\n<h4 id=\"正常使用\"><a href=\"#正常使用\" class=\"headerlink\" title=\"正常使用\"></a>正常使用</h4><p>平时我都是晚上充电，充满后带手表睡觉。早晨起来大概 90% 左右。夜间平均每小时耗电 1% 左右。这个主要是待机耗电，还有心率检测耗电。</p>\n<p>白天大概每小时耗电 4% 左右。这个主要是屏幕常亮、心率检测、推送以及待机耗电。</p>\n<p>这样每天晚上到家基本上还能剩下 40% 多的电量。个别时候能接近 50%，但是情况极少。</p>\n<h4 id=\"关闭功能情况\"><a href=\"#关闭功能情况\" class=\"headerlink\" title=\"关闭功能情况\"></a>关闭功能情况</h4><p><strong>心率关闭</strong></p>\n<p>如果关闭心率，夜间能稍微省一点电，预计每小时耗电 0.7-1.0% 左右。白天预计每小时耗电 2.85% 左右。这样到家预计可以剩下 60% 不到的电量。由此来看，心率预计一天需要消耗 15% 左右电量。</p>\n<p><strong>心率、屏幕常亮都关闭</strong></p>\n<p>早晨起来剩余 95%。夜间预计每小时耗电 0.7-1.0% 左右。由于夜间已经剧院模式，所以屏幕常亮没什么用，开关不影响。白天预计每小时耗电 2.2-2.5% 左右。晚上下班到家预计可以剩下 65% 左右电量。由此来看，屏幕常亮大概一天需要消耗10-15% 左右的电量，和心率差不太多。<strong>但我感觉好像屏幕常亮大概应该在 15-20% 左右</strong>。可能还是测试数据量不够多或者有数据不太准。</p>\n<p><strong>噪音检测</strong></p>\n<p>根据苹果的设计，如果你不是打开到对应 APP 界面，或者表盘上有该 APP 的功能，那么该 APP 后台不会运行。</p>\n<p>所以这个关闭与否无所谓。只要表盘没有此功能，那么默认就是关闭。上面我也说这个功能没啥用了，所以就没测试。</p>\n<p><strong>导航（GPS）</strong></p>\n<p>我记得我测试过，大概测试了 1 小时，不过数据找不到了。根据印象，导航 1 小时，费电 10% 左右。</p>\n<p><strong>运动模式（GPS、运动检测）</strong></p>\n<p>这个记不住自己是否测试过了，不做说明了。但应该比导航费电，因为除了 GPS外，还需要手表各种运动检测记录，这都需要手表自己来计算。</p>\n<h4 id=\"充电时间\"><a href=\"#充电时间\" class=\"headerlink\" title=\"充电时间\"></a>充电时间</h4><p>一开始我都是晚上 10 点后，给笔记本解锁后，就放在桌上充电。这样一般从 30% 开始，需要充电一小时多。不过也有特别费电的时候，大概从 10% 不到，充满需要一个半小时以上。</p>\n<p>有时候考虑加班，又怕坐地铁没电，中午休息打游戏时候，会充电半小时。所以很多时候上班都是带着充电器来回跑的。中午充电好处是，晚上可以更快速的充好电。因为好多次我都会忘记充。</p>\n<p>11月，感觉特别费电，但我记得没有更新固件。目前原因也不知道。1月开始，又变的费电了，可能是温度低了？每天比上面提到的还要费掉 10%。所以最近1个月基本上天天带着充电器。</p>\n<h4 id=\"充电建议\"><a href=\"#充电建议\" class=\"headerlink\" title=\"充电建议\"></a>充电建议</h4><p>首先如果你是用电大户，比如平时就爱手表玩游戏，这个是无解的。戒掉玩手表习惯。</p>\n<p>如果和我一样基本上 24 小时佩戴，工作还算规律，可以考虑晚上一次 1.5 小时的充电，也可以分开充电。</p>\n<p>如果 24 小时佩戴，并且工作不太规律，那么一定提前安排好充电，否则正常使用最多到第二天中午左右。</p>\n<p>如果只是白天戴，那么无所谓啦，肯定一整天足够的。</p>\n<p>我不建议早晨充电，主要是早晨时间普遍紧张，我洗漱、吃东西时候是非常关注时间的，防止赶不上车迟到等。而且就算充电，我从起床到出门也只有半小时时间，留给充电只有不到 20 分钟。手表的穿戴，解锁都需要时间，还不如到公司再充电。</p>\n<h4 id=\"硬撑-2-天方案\"><a href=\"#硬撑-2-天方案\" class=\"headerlink\" title=\"硬撑 2 天方案\"></a>硬撑 2 天方案</h4><p>非要把 Apple Watch 用到 2 天，有些难度。我也不敢测试，怕耽误事。不过根据数据来看，还是有可能的。</p>\n<p>首先晚上充好电，可以戴着睡觉。但关闭屏幕常亮、心率检测。晚上睡觉时候开启剧场模式，防止亮屏。这样早晨起来应该有 95% 左右。</p>\n<p>白天除了看消息、看时间，其他功能要少用。估计晚上下班还可以有 60% 以上。</p>\n<p>第二天早晨预计还能有 50%，第二天下班时预计还能有 15% 左右。这样甚至可以撑到第三天早上。</p>\n<p>以上是理论数据，实际来看应该不太容易。第一天还好，剩余 60% 应该很容易（我剩余过 68%）。但是30-70% 这个阶段电量感觉不耐用，第二天可能掉电会快一些。</p>\n<p>这么极限，会让使用体验大幅下降。所以它还是一天一充设备。</p>\n<h4 id=\"纯电子表的方案\"><a href=\"#纯电子表的方案\" class=\"headerlink\" title=\"纯电子表的方案\"></a>纯电子表的方案</h4><p>如果只把它当做一块纯电子表，那么续航肯定长很多，但是体验太差了，具体能多久没测试。</p>\n<p><strong>操作：</strong>没表盘显示界面里，从下面向上滑，点击电量，即可看到省电模式。切换之后，只能看时间，并且只能使用电子数字方式显示，也不能抬腕亮屏，需要按两个实体按钮（任意均可）才能看时间，并且按了之后需要等1-2秒才能显示。其他啥都没有了。这相当于智能系统关机了，只保留屏幕显示和时间驱动。</p>\n<p>这个模式，还远不如小米手环好用。我不知道它的意义是什么。难道就是为了应急看下时间？</p>\n<p>退出省电模式也很容易，重启手表…其实就是重新开启智能系统。按住开关机键 3 秒就好了。</p>\n<p>省电模式简直是垃圾…绝对不要用。</p>\n<p>–END–</p>"},{"layout":"post","title":"说说2020春节跑跑卡丁车里送的体验车感受","date":"2020-02-01T07:58:00.000Z","_content":"\n 在上次 1 月 9 号之后，自己氪了冰澜棉花糖。随后春节又有活动，体验了没有加成的几辆人民币车。这次说说感受。\n\n<!-- more -->\n\n春节赠送的车辆，都是三天时间，默认没有加点。因为只有三天时间，送的车又是都买不了的了，也就是体验下，没办法后续用。所以我也没有加点。\n\n## 冰澜棉花糖\n\n首先是冰澜棉花糖。本来在剧情模式体验过蔷薇棉花糖，感觉整体很一般，好在比较稳定好开。觉得棉花糖应该手感是最佳的，结果感觉打脸了。\n\n冰澜棉花糖特别重，网上据说，买了之后别直接上自己喜欢的图测试成绩，让跑跑日光城体验下。反正就是特别沉的一个车，小坡不容易飞起来，缺点就是很难骗气。我的感觉这个车车头沉，说白了方向不是那么灵活，精准度一般般吧。对抗上，简直要形容为垃圾。被别人碰下偏移太大，经常造成被撞出“最佳化漂移”。车身大，比起其他好车，车头相对又不那么灵活，被撞之后很难调整路线。反正是在各种地图被撞倒柱子上，严重影响发挥。偶尔换成天浪，才觉得舒服，车小，对抗还好，我都在怀疑为啥要氪冰澜？\n\n反正目前还在适应中，已经适应半个多月了...\n\n这辆车在第三天（初二）活动免费赠送。\n\n## 光明骑士\n\n2020 年 1 月之前是最好的车。春节期间第一天（除夕）活动免费体验了下，自己没有加成。车辆速度快，感觉明显比冰澜棉花糖快。不知道是冰澜棉花糖太重变慢了，还是光明骑士真的太快了。车头很灵活，精度也比较好，只不过体验时间短，有些不适应。网上说有种怪怪的感觉，我不知道是指什么。我倒觉得转向和天浪类似，很灵活，灵活的有些难上手。对抗上，也比较优秀。整体来说是辆好车。\n\n## 正义\n\n第二天（初一）活动免费赠送。道具知名车。自己不是玩道具的，不多说了。\n\n## 国王的新车\n\n第四天（初三）活动免费赠送。由于没有外壳，所以漂移撞墙概率大了不少。其实撞墙的根本原因是这车也太滑了，有一种在雪地里面开一样，总之特别不稳定。转向灵活，感觉精准度不好。体验了几把我就直接放弃了。\n\n## 独角兽\n\n第五天（初四）活动免费赠送。道具车。不说了。\n\n## 亚特拉斯\n\n第六天（初五）活动免费赠送。类似赤炎魔怪，转向灵活，接近光明骑士和天浪，但比起赤炎魔怪稳定性差那么一点点。手感也不错。本以为这车大概是冰澜棉花糖的手感，没敢入手，结果入手冰澜才叫后悔。这车相对短小，从天浪转开这车是最容易接受的。因为在四轮车里面算是车相对小的，感觉对抗还可以。\n\n## 赤炎魔怪\n\n第七天（初六）活动免费赠送。和以前在故事模式里面体验的一样，上手不难，体验非常好的车。转向灵活，接近光明骑士和天浪，但是又没有那么灵活。同时精准度我认为是最好的，非常稳。对抗还不错。缺点可能是数据指标稍微差了点，比起现在主流好车慢那么一点点。不过我觉得即便是现在，再开上半年绝对没问题。\n\n--END--","source":"_posts/2020/2020-02-01-popkart.md","raw":"---\nlayout: post\ntitle: 说说2020春节跑跑卡丁车里送的体验车感受\ndate: 2020-02-01 07:58:00 GMT+0800\ncategories: [随笔]\ntags:  [跑跑卡丁车]\n---\n\n 在上次 1 月 9 号之后，自己氪了冰澜棉花糖。随后春节又有活动，体验了没有加成的几辆人民币车。这次说说感受。\n\n<!-- more -->\n\n春节赠送的车辆，都是三天时间，默认没有加点。因为只有三天时间，送的车又是都买不了的了，也就是体验下，没办法后续用。所以我也没有加点。\n\n## 冰澜棉花糖\n\n首先是冰澜棉花糖。本来在剧情模式体验过蔷薇棉花糖，感觉整体很一般，好在比较稳定好开。觉得棉花糖应该手感是最佳的，结果感觉打脸了。\n\n冰澜棉花糖特别重，网上据说，买了之后别直接上自己喜欢的图测试成绩，让跑跑日光城体验下。反正就是特别沉的一个车，小坡不容易飞起来，缺点就是很难骗气。我的感觉这个车车头沉，说白了方向不是那么灵活，精准度一般般吧。对抗上，简直要形容为垃圾。被别人碰下偏移太大，经常造成被撞出“最佳化漂移”。车身大，比起其他好车，车头相对又不那么灵活，被撞之后很难调整路线。反正是在各种地图被撞倒柱子上，严重影响发挥。偶尔换成天浪，才觉得舒服，车小，对抗还好，我都在怀疑为啥要氪冰澜？\n\n反正目前还在适应中，已经适应半个多月了...\n\n这辆车在第三天（初二）活动免费赠送。\n\n## 光明骑士\n\n2020 年 1 月之前是最好的车。春节期间第一天（除夕）活动免费体验了下，自己没有加成。车辆速度快，感觉明显比冰澜棉花糖快。不知道是冰澜棉花糖太重变慢了，还是光明骑士真的太快了。车头很灵活，精度也比较好，只不过体验时间短，有些不适应。网上说有种怪怪的感觉，我不知道是指什么。我倒觉得转向和天浪类似，很灵活，灵活的有些难上手。对抗上，也比较优秀。整体来说是辆好车。\n\n## 正义\n\n第二天（初一）活动免费赠送。道具知名车。自己不是玩道具的，不多说了。\n\n## 国王的新车\n\n第四天（初三）活动免费赠送。由于没有外壳，所以漂移撞墙概率大了不少。其实撞墙的根本原因是这车也太滑了，有一种在雪地里面开一样，总之特别不稳定。转向灵活，感觉精准度不好。体验了几把我就直接放弃了。\n\n## 独角兽\n\n第五天（初四）活动免费赠送。道具车。不说了。\n\n## 亚特拉斯\n\n第六天（初五）活动免费赠送。类似赤炎魔怪，转向灵活，接近光明骑士和天浪，但比起赤炎魔怪稳定性差那么一点点。手感也不错。本以为这车大概是冰澜棉花糖的手感，没敢入手，结果入手冰澜才叫后悔。这车相对短小，从天浪转开这车是最容易接受的。因为在四轮车里面算是车相对小的，感觉对抗还可以。\n\n## 赤炎魔怪\n\n第七天（初六）活动免费赠送。和以前在故事模式里面体验的一样，上手不难，体验非常好的车。转向灵活，接近光明骑士和天浪，但是又没有那么灵活。同时精准度我认为是最好的，非常稳。对抗还不错。缺点可能是数据指标稍微差了点，比起现在主流好车慢那么一点点。不过我觉得即便是现在，再开上半年绝对没问题。\n\n--END--","slug":"2020-2020-02-01-popkart","published":1,"updated":"2020-03-02T07:16:34.764Z","comments":1,"photos":[],"link":"","_id":"cka5ik8dx007wnybgi6706ir9","content":"<p> 在上次 1 月 9 号之后，自己氪了冰澜棉花糖。随后春节又有活动，体验了没有加成的几辆人民币车。这次说说感受。</p>\n<a id=\"more\"></a>\n\n<p>春节赠送的车辆，都是三天时间，默认没有加点。因为只有三天时间，送的车又是都买不了的了，也就是体验下，没办法后续用。所以我也没有加点。</p>\n<h2 id=\"冰澜棉花糖\"><a href=\"#冰澜棉花糖\" class=\"headerlink\" title=\"冰澜棉花糖\"></a>冰澜棉花糖</h2><p>首先是冰澜棉花糖。本来在剧情模式体验过蔷薇棉花糖，感觉整体很一般，好在比较稳定好开。觉得棉花糖应该手感是最佳的，结果感觉打脸了。</p>\n<p>冰澜棉花糖特别重，网上据说，买了之后别直接上自己喜欢的图测试成绩，让跑跑日光城体验下。反正就是特别沉的一个车，小坡不容易飞起来，缺点就是很难骗气。我的感觉这个车车头沉，说白了方向不是那么灵活，精准度一般般吧。对抗上，简直要形容为垃圾。被别人碰下偏移太大，经常造成被撞出“最佳化漂移”。车身大，比起其他好车，车头相对又不那么灵活，被撞之后很难调整路线。反正是在各种地图被撞倒柱子上，严重影响发挥。偶尔换成天浪，才觉得舒服，车小，对抗还好，我都在怀疑为啥要氪冰澜？</p>\n<p>反正目前还在适应中，已经适应半个多月了…</p>\n<p>这辆车在第三天（初二）活动免费赠送。</p>\n<h2 id=\"光明骑士\"><a href=\"#光明骑士\" class=\"headerlink\" title=\"光明骑士\"></a>光明骑士</h2><p>2020 年 1 月之前是最好的车。春节期间第一天（除夕）活动免费体验了下，自己没有加成。车辆速度快，感觉明显比冰澜棉花糖快。不知道是冰澜棉花糖太重变慢了，还是光明骑士真的太快了。车头很灵活，精度也比较好，只不过体验时间短，有些不适应。网上说有种怪怪的感觉，我不知道是指什么。我倒觉得转向和天浪类似，很灵活，灵活的有些难上手。对抗上，也比较优秀。整体来说是辆好车。</p>\n<h2 id=\"正义\"><a href=\"#正义\" class=\"headerlink\" title=\"正义\"></a>正义</h2><p>第二天（初一）活动免费赠送。道具知名车。自己不是玩道具的，不多说了。</p>\n<h2 id=\"国王的新车\"><a href=\"#国王的新车\" class=\"headerlink\" title=\"国王的新车\"></a>国王的新车</h2><p>第四天（初三）活动免费赠送。由于没有外壳，所以漂移撞墙概率大了不少。其实撞墙的根本原因是这车也太滑了，有一种在雪地里面开一样，总之特别不稳定。转向灵活，感觉精准度不好。体验了几把我就直接放弃了。</p>\n<h2 id=\"独角兽\"><a href=\"#独角兽\" class=\"headerlink\" title=\"独角兽\"></a>独角兽</h2><p>第五天（初四）活动免费赠送。道具车。不说了。</p>\n<h2 id=\"亚特拉斯\"><a href=\"#亚特拉斯\" class=\"headerlink\" title=\"亚特拉斯\"></a>亚特拉斯</h2><p>第六天（初五）活动免费赠送。类似赤炎魔怪，转向灵活，接近光明骑士和天浪，但比起赤炎魔怪稳定性差那么一点点。手感也不错。本以为这车大概是冰澜棉花糖的手感，没敢入手，结果入手冰澜才叫后悔。这车相对短小，从天浪转开这车是最容易接受的。因为在四轮车里面算是车相对小的，感觉对抗还可以。</p>\n<h2 id=\"赤炎魔怪\"><a href=\"#赤炎魔怪\" class=\"headerlink\" title=\"赤炎魔怪\"></a>赤炎魔怪</h2><p>第七天（初六）活动免费赠送。和以前在故事模式里面体验的一样，上手不难，体验非常好的车。转向灵活，接近光明骑士和天浪，但是又没有那么灵活。同时精准度我认为是最好的，非常稳。对抗还不错。缺点可能是数据指标稍微差了点，比起现在主流好车慢那么一点点。不过我觉得即便是现在，再开上半年绝对没问题。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p> 在上次 1 月 9 号之后，自己氪了冰澜棉花糖。随后春节又有活动，体验了没有加成的几辆人民币车。这次说说感受。</p>","more":"<p>春节赠送的车辆，都是三天时间，默认没有加点。因为只有三天时间，送的车又是都买不了的了，也就是体验下，没办法后续用。所以我也没有加点。</p>\n<h2 id=\"冰澜棉花糖\"><a href=\"#冰澜棉花糖\" class=\"headerlink\" title=\"冰澜棉花糖\"></a>冰澜棉花糖</h2><p>首先是冰澜棉花糖。本来在剧情模式体验过蔷薇棉花糖，感觉整体很一般，好在比较稳定好开。觉得棉花糖应该手感是最佳的，结果感觉打脸了。</p>\n<p>冰澜棉花糖特别重，网上据说，买了之后别直接上自己喜欢的图测试成绩，让跑跑日光城体验下。反正就是特别沉的一个车，小坡不容易飞起来，缺点就是很难骗气。我的感觉这个车车头沉，说白了方向不是那么灵活，精准度一般般吧。对抗上，简直要形容为垃圾。被别人碰下偏移太大，经常造成被撞出“最佳化漂移”。车身大，比起其他好车，车头相对又不那么灵活，被撞之后很难调整路线。反正是在各种地图被撞倒柱子上，严重影响发挥。偶尔换成天浪，才觉得舒服，车小，对抗还好，我都在怀疑为啥要氪冰澜？</p>\n<p>反正目前还在适应中，已经适应半个多月了…</p>\n<p>这辆车在第三天（初二）活动免费赠送。</p>\n<h2 id=\"光明骑士\"><a href=\"#光明骑士\" class=\"headerlink\" title=\"光明骑士\"></a>光明骑士</h2><p>2020 年 1 月之前是最好的车。春节期间第一天（除夕）活动免费体验了下，自己没有加成。车辆速度快，感觉明显比冰澜棉花糖快。不知道是冰澜棉花糖太重变慢了，还是光明骑士真的太快了。车头很灵活，精度也比较好，只不过体验时间短，有些不适应。网上说有种怪怪的感觉，我不知道是指什么。我倒觉得转向和天浪类似，很灵活，灵活的有些难上手。对抗上，也比较优秀。整体来说是辆好车。</p>\n<h2 id=\"正义\"><a href=\"#正义\" class=\"headerlink\" title=\"正义\"></a>正义</h2><p>第二天（初一）活动免费赠送。道具知名车。自己不是玩道具的，不多说了。</p>\n<h2 id=\"国王的新车\"><a href=\"#国王的新车\" class=\"headerlink\" title=\"国王的新车\"></a>国王的新车</h2><p>第四天（初三）活动免费赠送。由于没有外壳，所以漂移撞墙概率大了不少。其实撞墙的根本原因是这车也太滑了，有一种在雪地里面开一样，总之特别不稳定。转向灵活，感觉精准度不好。体验了几把我就直接放弃了。</p>\n<h2 id=\"独角兽\"><a href=\"#独角兽\" class=\"headerlink\" title=\"独角兽\"></a>独角兽</h2><p>第五天（初四）活动免费赠送。道具车。不说了。</p>\n<h2 id=\"亚特拉斯\"><a href=\"#亚特拉斯\" class=\"headerlink\" title=\"亚特拉斯\"></a>亚特拉斯</h2><p>第六天（初五）活动免费赠送。类似赤炎魔怪，转向灵活，接近光明骑士和天浪，但比起赤炎魔怪稳定性差那么一点点。手感也不错。本以为这车大概是冰澜棉花糖的手感，没敢入手，结果入手冰澜才叫后悔。这车相对短小，从天浪转开这车是最容易接受的。因为在四轮车里面算是车相对小的，感觉对抗还可以。</p>\n<h2 id=\"赤炎魔怪\"><a href=\"#赤炎魔怪\" class=\"headerlink\" title=\"赤炎魔怪\"></a>赤炎魔怪</h2><p>第七天（初六）活动免费赠送。和以前在故事模式里面体验的一样，上手不难，体验非常好的车。转向灵活，接近光明骑士和天浪，但是又没有那么灵活。同时精准度我认为是最好的，非常稳。对抗还不错。缺点可能是数据指标稍微差了点，比起现在主流好车慢那么一点点。不过我觉得即便是现在，再开上半年绝对没问题。</p>\n<p>–END–</p>"},{"layout":"post","title":"CSS世界阅读笔记（一）","date":"2020-02-03T22:18:00.000Z","_content":"\n过节实在是无聊，也没办法出门，就拿出书看看，结果收获颇多。\n\n<!-- more -->\n\n## 文本少居中，多时候左对齐\n\n这个特别有趣，自己一时没想到。\n\n```html\nHTML：\n<div class=\"box\">\n  <p class=\"content\">文字内容</p>\n</div>\n```\n\n```css\n.box {\n  padding: 10px;\n  background-color: #cd0000;\n  text-align: center;\n}\n.content {\n  display: inline-block;\n  text-align: left;\n}\n```\n\n父元素设置文字居中，子元素设置为行内块。这样文字内容少的时候，行内块没办法撑满整个父元素宽度，表现出居中特性。此时子元素对齐方式没有任何效果。\n\n当子元素文字过多时候，会撑满父元素宽度。此时父元素文字居中对齐就没有效果了。子元素撑满父元素后，子元素的对齐方式开始起作用。\n\n具体例子参见[这里](https://demo.cssworld.cn/3/2-5.php)。\n\n## 父元素宽度为 0\n\n如果把父元素宽度改为 0，那么子元素默认宽度 `width: auto` 不会继承 0，而是看看子元素文字等宽度，比如文字设置 `font-size: 20px`，那么子元素宽度大概是 `20px` 多一点。\n\n## 利用首选最小宽度画凹凸\n\n把块元素宽度改为 0，利用文字不同宽度和换行，实现描边。\n\n这个太有创意了，但感觉实际项目没啥用途。\n\n具体例子参见[这里](https://demo.cssworld.cn/3/2-6.php)。\n\n## box-sizing \n\n写页面经常先写上这句话：\n\n```css\nbody * { box-sizing: border-box; }\n```\n\n后续直接定义宽度 width 就好了，不会导致元素超过尺寸，但是具体为什么，也不清楚。\n\n看过书才明白，原来它是决定宽度 width 作用在什么盒子上。\n\n从元素本身开始，由内到外依次是：\n\n```\ncontent --> padding --> border --> margin\n```\n\n对应的属性是：\n\n```\ncontent-box --> padding-box --> border-box --> margin-box\n```\n\n默认情况下，宽度作用在元素本身，所以调整 `padding` `border` 会导致元素尺寸变化！\n\n但如果作用到 `border` 上呢？自然这个问题迎刃而解。\n\n除了默认的 `content-box` 和常用的 `border-box` 外，另外两个基本上浏览器不支持。\n\n\n\n\n--END--","source":"_posts/2020/2020-02-03-read-css-world.md","raw":"---\nlayout: post\ntitle: CSS世界阅读笔记（一）\ndate: 2020-02-03 22:18:00 GMT+0800\ncategories: [前端]\ntags:  [CSS世界,读书]\n---\n\n过节实在是无聊，也没办法出门，就拿出书看看，结果收获颇多。\n\n<!-- more -->\n\n## 文本少居中，多时候左对齐\n\n这个特别有趣，自己一时没想到。\n\n```html\nHTML：\n<div class=\"box\">\n  <p class=\"content\">文字内容</p>\n</div>\n```\n\n```css\n.box {\n  padding: 10px;\n  background-color: #cd0000;\n  text-align: center;\n}\n.content {\n  display: inline-block;\n  text-align: left;\n}\n```\n\n父元素设置文字居中，子元素设置为行内块。这样文字内容少的时候，行内块没办法撑满整个父元素宽度，表现出居中特性。此时子元素对齐方式没有任何效果。\n\n当子元素文字过多时候，会撑满父元素宽度。此时父元素文字居中对齐就没有效果了。子元素撑满父元素后，子元素的对齐方式开始起作用。\n\n具体例子参见[这里](https://demo.cssworld.cn/3/2-5.php)。\n\n## 父元素宽度为 0\n\n如果把父元素宽度改为 0，那么子元素默认宽度 `width: auto` 不会继承 0，而是看看子元素文字等宽度，比如文字设置 `font-size: 20px`，那么子元素宽度大概是 `20px` 多一点。\n\n## 利用首选最小宽度画凹凸\n\n把块元素宽度改为 0，利用文字不同宽度和换行，实现描边。\n\n这个太有创意了，但感觉实际项目没啥用途。\n\n具体例子参见[这里](https://demo.cssworld.cn/3/2-6.php)。\n\n## box-sizing \n\n写页面经常先写上这句话：\n\n```css\nbody * { box-sizing: border-box; }\n```\n\n后续直接定义宽度 width 就好了，不会导致元素超过尺寸，但是具体为什么，也不清楚。\n\n看过书才明白，原来它是决定宽度 width 作用在什么盒子上。\n\n从元素本身开始，由内到外依次是：\n\n```\ncontent --> padding --> border --> margin\n```\n\n对应的属性是：\n\n```\ncontent-box --> padding-box --> border-box --> margin-box\n```\n\n默认情况下，宽度作用在元素本身，所以调整 `padding` `border` 会导致元素尺寸变化！\n\n但如果作用到 `border` 上呢？自然这个问题迎刃而解。\n\n除了默认的 `content-box` 和常用的 `border-box` 外，另外两个基本上浏览器不支持。\n\n\n\n\n--END--","slug":"2020-2020-02-03-read-css-world","published":1,"updated":"2020-03-02T07:16:34.764Z","comments":1,"photos":[],"link":"","_id":"cka5ik8dy007znybgmqhma2oq","content":"<p>过节实在是无聊，也没办法出门，就拿出书看看，结果收获颇多。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"文本少居中，多时候左对齐\"><a href=\"#文本少居中，多时候左对齐\" class=\"headerlink\" title=\"文本少居中，多时候左对齐\"></a>文本少居中，多时候左对齐</h2><p>这个特别有趣，自己一时没想到。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTML：</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span>文字内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#cd0000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>父元素设置文字居中，子元素设置为行内块。这样文字内容少的时候，行内块没办法撑满整个父元素宽度，表现出居中特性。此时子元素对齐方式没有任何效果。</p>\n<p>当子元素文字过多时候，会撑满父元素宽度。此时父元素文字居中对齐就没有效果了。子元素撑满父元素后，子元素的对齐方式开始起作用。</p>\n<p>具体例子参见<a href=\"https://demo.cssworld.cn/3/2-5.php\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h2 id=\"父元素宽度为-0\"><a href=\"#父元素宽度为-0\" class=\"headerlink\" title=\"父元素宽度为 0\"></a>父元素宽度为 0</h2><p>如果把父元素宽度改为 0，那么子元素默认宽度 <code>width: auto</code> 不会继承 0，而是看看子元素文字等宽度，比如文字设置 <code>font-size: 20px</code>，那么子元素宽度大概是 <code>20px</code> 多一点。</p>\n<h2 id=\"利用首选最小宽度画凹凸\"><a href=\"#利用首选最小宽度画凹凸\" class=\"headerlink\" title=\"利用首选最小宽度画凹凸\"></a>利用首选最小宽度画凹凸</h2><p>把块元素宽度改为 0，利用文字不同宽度和换行，实现描边。</p>\n<p>这个太有创意了，但感觉实际项目没啥用途。</p>\n<p>具体例子参见<a href=\"https://demo.cssworld.cn/3/2-6.php\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h2 id=\"box-sizing\"><a href=\"#box-sizing\" class=\"headerlink\" title=\"box-sizing\"></a>box-sizing</h2><p>写页面经常先写上这句话：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> * &#123; <span class=\"attribute\">box-sizing</span>: border-box; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>后续直接定义宽度 width 就好了，不会导致元素超过尺寸，但是具体为什么，也不清楚。</p>\n<p>看过书才明白，原来它是决定宽度 width 作用在什么盒子上。</p>\n<p>从元素本身开始，由内到外依次是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">content --&gt; padding --&gt; border --&gt; margin</span><br></pre></td></tr></table></figure>\n\n<p>对应的属性是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">content-box --&gt; padding-box --&gt; border-box --&gt; margin-box</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，宽度作用在元素本身，所以调整 <code>padding</code> <code>border</code> 会导致元素尺寸变化！</p>\n<p>但如果作用到 <code>border</code> 上呢？自然这个问题迎刃而解。</p>\n<p>除了默认的 <code>content-box</code> 和常用的 <code>border-box</code> 外，另外两个基本上浏览器不支持。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>过节实在是无聊，也没办法出门，就拿出书看看，结果收获颇多。</p>","more":"<h2 id=\"文本少居中，多时候左对齐\"><a href=\"#文本少居中，多时候左对齐\" class=\"headerlink\" title=\"文本少居中，多时候左对齐\"></a>文本少居中，多时候左对齐</h2><p>这个特别有趣，自己一时没想到。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTML：</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span>文字内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#cd0000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>父元素设置文字居中，子元素设置为行内块。这样文字内容少的时候，行内块没办法撑满整个父元素宽度，表现出居中特性。此时子元素对齐方式没有任何效果。</p>\n<p>当子元素文字过多时候，会撑满父元素宽度。此时父元素文字居中对齐就没有效果了。子元素撑满父元素后，子元素的对齐方式开始起作用。</p>\n<p>具体例子参见<a href=\"https://demo.cssworld.cn/3/2-5.php\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h2 id=\"父元素宽度为-0\"><a href=\"#父元素宽度为-0\" class=\"headerlink\" title=\"父元素宽度为 0\"></a>父元素宽度为 0</h2><p>如果把父元素宽度改为 0，那么子元素默认宽度 <code>width: auto</code> 不会继承 0，而是看看子元素文字等宽度，比如文字设置 <code>font-size: 20px</code>，那么子元素宽度大概是 <code>20px</code> 多一点。</p>\n<h2 id=\"利用首选最小宽度画凹凸\"><a href=\"#利用首选最小宽度画凹凸\" class=\"headerlink\" title=\"利用首选最小宽度画凹凸\"></a>利用首选最小宽度画凹凸</h2><p>把块元素宽度改为 0，利用文字不同宽度和换行，实现描边。</p>\n<p>这个太有创意了，但感觉实际项目没啥用途。</p>\n<p>具体例子参见<a href=\"https://demo.cssworld.cn/3/2-6.php\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h2 id=\"box-sizing\"><a href=\"#box-sizing\" class=\"headerlink\" title=\"box-sizing\"></a>box-sizing</h2><p>写页面经常先写上这句话：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> * &#123; <span class=\"attribute\">box-sizing</span>: border-box; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>后续直接定义宽度 width 就好了，不会导致元素超过尺寸，但是具体为什么，也不清楚。</p>\n<p>看过书才明白，原来它是决定宽度 width 作用在什么盒子上。</p>\n<p>从元素本身开始，由内到外依次是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">content --&gt; padding --&gt; border --&gt; margin</span><br></pre></td></tr></table></figure>\n\n<p>对应的属性是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">content-box --&gt; padding-box --&gt; border-box --&gt; margin-box</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，宽度作用在元素本身，所以调整 <code>padding</code> <code>border</code> 会导致元素尺寸变化！</p>\n<p>但如果作用到 <code>border</code> 上呢？自然这个问题迎刃而解。</p>\n<p>除了默认的 <code>content-box</code> 和常用的 <code>border-box</code> 外，另外两个基本上浏览器不支持。</p>\n<p>–END–</p>"},{"layout":"post","title":"JSBox Paste 付费模式的调整以及对应用的思考","date":"2020-02-08T15:44:00.000Z","_content":"\nJSBox 宣布 2.0 发布，同时也改变了其付费模式，由下载付费改为订阅制。与此同时，Paste 也宣布新版开始采用全平台订阅制。\n\n<!-- more -->\n\n## JSBox 的历史\n\n原本的 JSBox 是 Pin 的其中一部分，后来作者发现编写脚本能力太强大了，同时这些功能集成到 Pin 里面，还会导致苹果商店审核问题，就决定另起一个项目。\n\n现在看来，其实编写脚本功能审核是没有问题的，当时的问题主要在 Pin 里面集成了应用商店，可以自由下载。后来 JSBox 独立出来，也有此类问题，只能通过不带应用商店模式上架。\n\n由于 JSBox 可以编写脚本运行，所以可以在手动把应用商店安装回来。\n\n原本 Pin 是 18 元。拆分后，Pin 价格不变，里面继续集成着 JSBox 的精简版。不过也鲜有实质更新了。\n\n新的 JSBox 起初 40 元（如果捆绑 Pin 的套包，大概 30 元左右），后来涨价到 58 元。\n\n不过对于一直都在加新功能的 JSBox，这点钱真不算多。但对于用户来讲，对于平时也就 6 元、18 元，JSBox 已经算是非常高价的应用了。\n\nJSBox 提供的大量的编程功能。但也是由于要编程，难度大幅增加，直接导致对应的应用很稀少。这点对比苹果收购的“快捷指令”对比就太明显了。\n\n## JSBox 计费模式调整\n\n2020 年刚过完年，JSBox 决定改变计费模式。首先是提供了限免下载，之后改为内购收费。原本的付费用户自动从下载之日起赠送一年有效期。\n\n![JSBox Pro 高级版付费说明](https://cdn0.yukapril.com/2020-02-08-in-app-purchase.png-wm.white)\n由于我下载的时间比较早，所以已经过期了。\n\n升级 Pro 高级版，每年 58 元。为了照顾用户，第一年打折，40 元。\n\n比较好的是，默认免费版本是带有基础功能的，如果只是基础使 用的话还是可以的。但对于开发者，可能会有一些困难。此外，免费版没办法使用新推出的 NodeJS 环境。\n\n====\n\n**2020-02-25补充**：\n\n比较有意思也比较人性化的是，JsBox 会自动判断你的购买时间，如果是之前 1.0 的购买者（限免下载好像不算），会默认获得 1.0 时代的所有功能。\n\n比如下图，后面的 PRO 表示专业版功能，前面的小锁表示是否已经解锁。2.0之后的专业功能都不可用，但之前的专业功能（比如编辑器插件），是可以使用的。\n\n![各个版本功能以及是否可用](https://cdn0.yukapril.com/2020-02-25-jsbox.PNG-wm.white)\n\n====\n\n不过不知道大部分用户是直接下载脚本使用，还是自己开发应用。\n\n对我来讲，其实无所谓。免费版足够了，或者，没有也可以。\n\n这两年几乎没怎么用过脚本，主要就用了定时推送，每天到点弹窗，点击后打开网页打卡而已。完全可以被苹果官方的“快捷指令”替代。当时购买主要为了支持作者，以及提前投资，看看这款 APP 后续的发展。\n\nJSBox 虽然改成了内购按年付费，但也算良心，很多基础的功能免费了。此举应该是为了多拉些用户。用户太少，也就没有高质量的脚本应用，只会导致 JSBox 沦为小众的软件。到最后就只能不停提高费用了。\n\n顺便一提，Pin 除了手机版（18 元），还有 MacOS 版（30 元）。虽然 Pin 在手机端功能强大，但在 MacOS 上体验不够好。这也导致我没有考虑这种组合。\n\n## Paste \n\n说起剪贴板同步，Paste 绝对够出名。MacOS 下的优秀体验，手机端还免费，通过 iCloud 完成同步。所以如果你 MacOS 是破解版的，那等于免费用。即便是购买，也只有 98 元，打折期间大概也就是 50 元左右。\n\n2020 年 2 月 7 日提供了新版更新，直接改为了内购按年付费（73 元），同时针对 iPad 需要额外付费（30 元）。\n\nPaste 给出的建议是，要么升级，按年付费使用；要么不升级，未来不会有更新。\n\n> 比较有意思的是，Paste MacOS 版在半年前提供了直接下载并使用序列号方式付费，但现在又看不到这种方式了。\n\n我比较倾向不升级。但是手机端不小心已经更新了，这就需要找回之前的老版本 APP。由于刚刚更新，估计还不够稳定，手机端有时候还不能看到内购选项。我计划先用新版，看看过期后的效果。不过预计过期后可能移动端不能正常使用。未来都将是免费下载，按年订购付费。但提供 14 天左右的体验期。\n\n====\n\n**2020-02-25更新**：\n\n首先是 Mac 端，我没有更新，保持在老版本。iCloud 同步提示是成功的。\n\n移动端更新了第一个版本，发现无法完成内购付费，并且 iCloud 同步还不行。\n\n移动端在2-25更新到最新版本（发布了一周），结果发现还是没有内购付费，iCloud 还是不行（显示同步中）。内购付费还是不确定具体的流程，但估计是按账号计算，Mac 端如果购买，移动端自动也算购买了。但 iCloud 不能同步，难道是新版本和老版本 iCloud 不兼容？\n\n之后我尝试删除 Mac App Store 下载的 Paste，改成了我的正版 2.5.7 下载版本，可能是数据小问题，一开始没有历史数据，后续栏目名字有点小问题，不过问题不大。\n\n此时移动端的数据才能显示出来，所以不确定真的是新版本 iCloud 改了，还是我这点数据对它来说实在是太多太慢了。\n\n有意思的是，安装2.5.7首次启动时，提示更新2.5.8，我没更新。而且发现原本的正版下载地址竟然消失了。\n\n====\n\n**2020-03-04更新**：\n\n前几天，我认真仔细看了下 Paste Mac 端和手机端。\n\n使用 Mac App Store 的版本，提示是是订阅制，提示到期时间，我的到期时间大致是 2022年1月1日。也就是即便换成 MAS 的版本，我可以继续使用 2 年不到。此版本同步正常。\n\n手机端，订阅制下面，写着 “有效期内的订阅： iOSLegacy”。那么意思应该是永久可用。估计是检测了当前的 iTunes 账号，发现是老用户吧。此版本同步也是正常的。\n\n后来我换了 Mac，就安装了当年人工下载的 2.5.7 正版，首次启动更新了 2.5.8 版。同步功能也完全正常。此版本没有订阅制内容，也就无所谓到期了。\n\n====\n\n## 常见软件付费种类\n\n不论是一次性买断还是订阅制，软件都很常见。但我认为，**本质上不同的支付方式，是由软件性质决定的**。\n\n#### 买断型软件\n\n比如常用的 Beyond Compare，商业软件，主要提供代码比对等功能，提供普通版和专业版。都是当前主版本终身制。这类软件普遍在主版本一开始提供大量的功能（或者做了UI调整），后续的小版本主要是修复为主，并且一般也不会再额外增加特殊的功能。对于使用者来讲，在购买时候就已经知晓它的功能，不需要额外的补充。所以一次买断终身使用是比较良好的。\n\n这种软件，还有 MWeb、Charles 等。软件买断后，作者不需要额外的付出，只需要日常修复 bug 就好了。同时用户也是本地使用软件，几乎不用联网到作者的服务器。\n\n我认为 Paste 就属于这一类。软件本身同步不依赖于作者的服务器，使用 iCloud 完成同步，同时后续也无需做大量功能迭代。所以另起炉灶建立 Paste3 就好，老的用户可以继续正常使用 Paste2。\n\n#### 订阅型软件\n\n还有一类软件，如音乐会员等，由于用户的使用会一直持续的占用作者服务器资源，所以必须使用订阅制。这种形式无可厚非。\n\n#### 特殊型软件\n\n还有一类软件，其实常见于小公司或个人性质开发者。由于其对软件的更新频繁，每次都提供一些新功能。如 JSBox，搞哪种付费方式都不合理。\n\n软件初始，使用买断制，用户花钱直接拥有，购买意愿也比较大。作者也可以快速回笼资金。但起初价格不能过高，否则很难销售。价格太低，又不可以持续支撑维护。软件发展后，只能选择逐步提高销售价格。但软件为终身制，则还未购买的用户将越来越少。收入也将逐步见顶。或者转型为订阅制，JSBox 就是这样的例子。\n\n如果软件初始使用订阅制，则需要软件具有较强的依赖性及不可替代性，而且后续作者必须有后续持续的维护，如增加更强的功能或提供长久的服务器支持。这样能做到的软件并不多。即便这么做了，做了几年也可能导致维护积极性下降。最终如果作者跳坑，则会推出买断的版本。\n\n由于大公司一般都有完善的配套设施和软件规划，一般很少这样中途改变计费方式。\n\n## 大型软件\n\n还有一类软件，比较特殊。同时提供两种计费方式。版本买断和订阅制同时存在。这种一般都是大公司搞，个人和小公司比较少见。主要特征是提供云服务，每个大周期（每年左右）有持续功能加入，要考虑断网的环境。\n\n如 Parallels 和 Office。\n\nParallels 是虚拟机软件。一个版本发布后，主要兼容当前的各种系统，买断版就可以一直使用当前版本。但是如果你期望永远兼容最新系统，那么则需要选择订阅制。\n\nOffice 虽然不需要考虑兼容，但是买断版只有 Word、Excel、PowerPoint 等少量软件。最主要的是，没办法享用大容量的 OneDrive 云盘。不过买断版也有一些好处，比如支持没有网络的地区使用。\n\n## 思考\n\n对于 JSBox 来说，作者持续的更新，提供了大量的付出。软件转为基础免费，高级订阅也未尝不可。\n\n但我认为还是直接打磨好新的版本，向 Beyond Compare 一样，重新发布一个 JSBox，对老用户更加友好。愿意使用新功能则购买新的，不愿意老的继续使用。\n\nJSBox 转型订阅制也很讲究，基础功能免费了。只有需要更专业功能的用户才需要订购专业版。不过这样操作，收入能有多少就要画一个问号了。\n\n那可以不可以两种结合，JSBox 1.0 保留，新版 2.0 重新发布，调整为订阅制呢？我认为没有必要。首先是新版 2.0 基础功能是否收费，如果免费，那会导致大量用户直接使用 2.0。此时何必还要维护 1.0？如果基础功能收费，高级版更贵，会引来过多的舆论，还不如直接转为新版买断+部分功能单独买断形式。\n\n后续 JSBox 的盈利模式，我还会持续关注。\n\n对于 JSBox，我会在考虑是否会继续使用，因为是用的功能过于简单，可以换为“快捷指令”来完成，而且可能完成的更好。\n\n> 至于很多作者提到的，老版本软件兼容新系统，成本很大。我认为并不大，而且真要是太麻烦，干脆不去兼容就可以了。\n\n对于 Paste，由于刚刚开始转为订阅制，我还没有所有设备更新，并且要 14 天后才能见效果。不过看样子过了 14 天之后，就不能使用了。\n\n作者还提到，老版本则不会继续维护更新了。我在想，老版本，除了做系统兼容性时候更新过，其他功能你更新过吗？😂\n\n作者文章下面的网友回复：\n\n> This is incredibly lame. I use Paste on my Mac every day, but it honestly feels like it hasn’t changed or improved in years. I’m perfectly fine with that, because it does its job. But suddenly switching to a subscription model for a basic utility that hasn’t added new features in so long feels like a shameless cash grab. The least you could have done was launch a version 3 and differentiate it in the App Store for those of us with no intention of paying a subscription. Now I have to make sure my copy doesn’t automatically update, which is a pain in the ass. Seriously frustrating.\n\n我也认为如此，宁可从新开一个新的 Paste3，也别升级 Paste2。和这个网友相同，平时我只是用用而已，而且用的很好。Paste2 也没有联网到作者服务器，也没有常规的更新。我为什么要为这些付费？现在，我为什么要时刻提防着更新？\n\n合着，作者只需要把买断制改成订阅制，就可以继续圈钱了？这个吃相太难看。\n\n当然，Paste 对此也有一些处理，比如不小心更新到了最新版，那么可以到 [这里](https://pasteapp.io/mac/legacy/download/)，填写你购买的 Apple ID，可以提供最后一个买断版本下载。但是对于 iOS 等移动端，就没解决方案了。\n\n我想，Paste 不更新到 3.0，估计是不想见到一堆对 2.0 的差评吧，或者还是有恶意引导用户升级为订阅制的想法。也可能，目前的 Paste，怎么好意思改个计费模式就叫 3.0 了？未来在改个计费模式就可以 4.0 吗？\n\n--END--","source":"_posts/2020/2020-02-08-in-app-purchase.md","raw":"---\nlayout: post\ntitle: JSBox Paste 付费模式的调整以及对应用的思考\ndate: 2020-02-08 15:44:00 GMT+0800\ncategories: [杂谈]\ntags:  [jsbox,paste]\n---\n\nJSBox 宣布 2.0 发布，同时也改变了其付费模式，由下载付费改为订阅制。与此同时，Paste 也宣布新版开始采用全平台订阅制。\n\n<!-- more -->\n\n## JSBox 的历史\n\n原本的 JSBox 是 Pin 的其中一部分，后来作者发现编写脚本能力太强大了，同时这些功能集成到 Pin 里面，还会导致苹果商店审核问题，就决定另起一个项目。\n\n现在看来，其实编写脚本功能审核是没有问题的，当时的问题主要在 Pin 里面集成了应用商店，可以自由下载。后来 JSBox 独立出来，也有此类问题，只能通过不带应用商店模式上架。\n\n由于 JSBox 可以编写脚本运行，所以可以在手动把应用商店安装回来。\n\n原本 Pin 是 18 元。拆分后，Pin 价格不变，里面继续集成着 JSBox 的精简版。不过也鲜有实质更新了。\n\n新的 JSBox 起初 40 元（如果捆绑 Pin 的套包，大概 30 元左右），后来涨价到 58 元。\n\n不过对于一直都在加新功能的 JSBox，这点钱真不算多。但对于用户来讲，对于平时也就 6 元、18 元，JSBox 已经算是非常高价的应用了。\n\nJSBox 提供的大量的编程功能。但也是由于要编程，难度大幅增加，直接导致对应的应用很稀少。这点对比苹果收购的“快捷指令”对比就太明显了。\n\n## JSBox 计费模式调整\n\n2020 年刚过完年，JSBox 决定改变计费模式。首先是提供了限免下载，之后改为内购收费。原本的付费用户自动从下载之日起赠送一年有效期。\n\n![JSBox Pro 高级版付费说明](https://cdn0.yukapril.com/2020-02-08-in-app-purchase.png-wm.white)\n由于我下载的时间比较早，所以已经过期了。\n\n升级 Pro 高级版，每年 58 元。为了照顾用户，第一年打折，40 元。\n\n比较好的是，默认免费版本是带有基础功能的，如果只是基础使 用的话还是可以的。但对于开发者，可能会有一些困难。此外，免费版没办法使用新推出的 NodeJS 环境。\n\n====\n\n**2020-02-25补充**：\n\n比较有意思也比较人性化的是，JsBox 会自动判断你的购买时间，如果是之前 1.0 的购买者（限免下载好像不算），会默认获得 1.0 时代的所有功能。\n\n比如下图，后面的 PRO 表示专业版功能，前面的小锁表示是否已经解锁。2.0之后的专业功能都不可用，但之前的专业功能（比如编辑器插件），是可以使用的。\n\n![各个版本功能以及是否可用](https://cdn0.yukapril.com/2020-02-25-jsbox.PNG-wm.white)\n\n====\n\n不过不知道大部分用户是直接下载脚本使用，还是自己开发应用。\n\n对我来讲，其实无所谓。免费版足够了，或者，没有也可以。\n\n这两年几乎没怎么用过脚本，主要就用了定时推送，每天到点弹窗，点击后打开网页打卡而已。完全可以被苹果官方的“快捷指令”替代。当时购买主要为了支持作者，以及提前投资，看看这款 APP 后续的发展。\n\nJSBox 虽然改成了内购按年付费，但也算良心，很多基础的功能免费了。此举应该是为了多拉些用户。用户太少，也就没有高质量的脚本应用，只会导致 JSBox 沦为小众的软件。到最后就只能不停提高费用了。\n\n顺便一提，Pin 除了手机版（18 元），还有 MacOS 版（30 元）。虽然 Pin 在手机端功能强大，但在 MacOS 上体验不够好。这也导致我没有考虑这种组合。\n\n## Paste \n\n说起剪贴板同步，Paste 绝对够出名。MacOS 下的优秀体验，手机端还免费，通过 iCloud 完成同步。所以如果你 MacOS 是破解版的，那等于免费用。即便是购买，也只有 98 元，打折期间大概也就是 50 元左右。\n\n2020 年 2 月 7 日提供了新版更新，直接改为了内购按年付费（73 元），同时针对 iPad 需要额外付费（30 元）。\n\nPaste 给出的建议是，要么升级，按年付费使用；要么不升级，未来不会有更新。\n\n> 比较有意思的是，Paste MacOS 版在半年前提供了直接下载并使用序列号方式付费，但现在又看不到这种方式了。\n\n我比较倾向不升级。但是手机端不小心已经更新了，这就需要找回之前的老版本 APP。由于刚刚更新，估计还不够稳定，手机端有时候还不能看到内购选项。我计划先用新版，看看过期后的效果。不过预计过期后可能移动端不能正常使用。未来都将是免费下载，按年订购付费。但提供 14 天左右的体验期。\n\n====\n\n**2020-02-25更新**：\n\n首先是 Mac 端，我没有更新，保持在老版本。iCloud 同步提示是成功的。\n\n移动端更新了第一个版本，发现无法完成内购付费，并且 iCloud 同步还不行。\n\n移动端在2-25更新到最新版本（发布了一周），结果发现还是没有内购付费，iCloud 还是不行（显示同步中）。内购付费还是不确定具体的流程，但估计是按账号计算，Mac 端如果购买，移动端自动也算购买了。但 iCloud 不能同步，难道是新版本和老版本 iCloud 不兼容？\n\n之后我尝试删除 Mac App Store 下载的 Paste，改成了我的正版 2.5.7 下载版本，可能是数据小问题，一开始没有历史数据，后续栏目名字有点小问题，不过问题不大。\n\n此时移动端的数据才能显示出来，所以不确定真的是新版本 iCloud 改了，还是我这点数据对它来说实在是太多太慢了。\n\n有意思的是，安装2.5.7首次启动时，提示更新2.5.8，我没更新。而且发现原本的正版下载地址竟然消失了。\n\n====\n\n**2020-03-04更新**：\n\n前几天，我认真仔细看了下 Paste Mac 端和手机端。\n\n使用 Mac App Store 的版本，提示是是订阅制，提示到期时间，我的到期时间大致是 2022年1月1日。也就是即便换成 MAS 的版本，我可以继续使用 2 年不到。此版本同步正常。\n\n手机端，订阅制下面，写着 “有效期内的订阅： iOSLegacy”。那么意思应该是永久可用。估计是检测了当前的 iTunes 账号，发现是老用户吧。此版本同步也是正常的。\n\n后来我换了 Mac，就安装了当年人工下载的 2.5.7 正版，首次启动更新了 2.5.8 版。同步功能也完全正常。此版本没有订阅制内容，也就无所谓到期了。\n\n====\n\n## 常见软件付费种类\n\n不论是一次性买断还是订阅制，软件都很常见。但我认为，**本质上不同的支付方式，是由软件性质决定的**。\n\n#### 买断型软件\n\n比如常用的 Beyond Compare，商业软件，主要提供代码比对等功能，提供普通版和专业版。都是当前主版本终身制。这类软件普遍在主版本一开始提供大量的功能（或者做了UI调整），后续的小版本主要是修复为主，并且一般也不会再额外增加特殊的功能。对于使用者来讲，在购买时候就已经知晓它的功能，不需要额外的补充。所以一次买断终身使用是比较良好的。\n\n这种软件，还有 MWeb、Charles 等。软件买断后，作者不需要额外的付出，只需要日常修复 bug 就好了。同时用户也是本地使用软件，几乎不用联网到作者的服务器。\n\n我认为 Paste 就属于这一类。软件本身同步不依赖于作者的服务器，使用 iCloud 完成同步，同时后续也无需做大量功能迭代。所以另起炉灶建立 Paste3 就好，老的用户可以继续正常使用 Paste2。\n\n#### 订阅型软件\n\n还有一类软件，如音乐会员等，由于用户的使用会一直持续的占用作者服务器资源，所以必须使用订阅制。这种形式无可厚非。\n\n#### 特殊型软件\n\n还有一类软件，其实常见于小公司或个人性质开发者。由于其对软件的更新频繁，每次都提供一些新功能。如 JSBox，搞哪种付费方式都不合理。\n\n软件初始，使用买断制，用户花钱直接拥有，购买意愿也比较大。作者也可以快速回笼资金。但起初价格不能过高，否则很难销售。价格太低，又不可以持续支撑维护。软件发展后，只能选择逐步提高销售价格。但软件为终身制，则还未购买的用户将越来越少。收入也将逐步见顶。或者转型为订阅制，JSBox 就是这样的例子。\n\n如果软件初始使用订阅制，则需要软件具有较强的依赖性及不可替代性，而且后续作者必须有后续持续的维护，如增加更强的功能或提供长久的服务器支持。这样能做到的软件并不多。即便这么做了，做了几年也可能导致维护积极性下降。最终如果作者跳坑，则会推出买断的版本。\n\n由于大公司一般都有完善的配套设施和软件规划，一般很少这样中途改变计费方式。\n\n## 大型软件\n\n还有一类软件，比较特殊。同时提供两种计费方式。版本买断和订阅制同时存在。这种一般都是大公司搞，个人和小公司比较少见。主要特征是提供云服务，每个大周期（每年左右）有持续功能加入，要考虑断网的环境。\n\n如 Parallels 和 Office。\n\nParallels 是虚拟机软件。一个版本发布后，主要兼容当前的各种系统，买断版就可以一直使用当前版本。但是如果你期望永远兼容最新系统，那么则需要选择订阅制。\n\nOffice 虽然不需要考虑兼容，但是买断版只有 Word、Excel、PowerPoint 等少量软件。最主要的是，没办法享用大容量的 OneDrive 云盘。不过买断版也有一些好处，比如支持没有网络的地区使用。\n\n## 思考\n\n对于 JSBox 来说，作者持续的更新，提供了大量的付出。软件转为基础免费，高级订阅也未尝不可。\n\n但我认为还是直接打磨好新的版本，向 Beyond Compare 一样，重新发布一个 JSBox，对老用户更加友好。愿意使用新功能则购买新的，不愿意老的继续使用。\n\nJSBox 转型订阅制也很讲究，基础功能免费了。只有需要更专业功能的用户才需要订购专业版。不过这样操作，收入能有多少就要画一个问号了。\n\n那可以不可以两种结合，JSBox 1.0 保留，新版 2.0 重新发布，调整为订阅制呢？我认为没有必要。首先是新版 2.0 基础功能是否收费，如果免费，那会导致大量用户直接使用 2.0。此时何必还要维护 1.0？如果基础功能收费，高级版更贵，会引来过多的舆论，还不如直接转为新版买断+部分功能单独买断形式。\n\n后续 JSBox 的盈利模式，我还会持续关注。\n\n对于 JSBox，我会在考虑是否会继续使用，因为是用的功能过于简单，可以换为“快捷指令”来完成，而且可能完成的更好。\n\n> 至于很多作者提到的，老版本软件兼容新系统，成本很大。我认为并不大，而且真要是太麻烦，干脆不去兼容就可以了。\n\n对于 Paste，由于刚刚开始转为订阅制，我还没有所有设备更新，并且要 14 天后才能见效果。不过看样子过了 14 天之后，就不能使用了。\n\n作者还提到，老版本则不会继续维护更新了。我在想，老版本，除了做系统兼容性时候更新过，其他功能你更新过吗？😂\n\n作者文章下面的网友回复：\n\n> This is incredibly lame. I use Paste on my Mac every day, but it honestly feels like it hasn’t changed or improved in years. I’m perfectly fine with that, because it does its job. But suddenly switching to a subscription model for a basic utility that hasn’t added new features in so long feels like a shameless cash grab. The least you could have done was launch a version 3 and differentiate it in the App Store for those of us with no intention of paying a subscription. Now I have to make sure my copy doesn’t automatically update, which is a pain in the ass. Seriously frustrating.\n\n我也认为如此，宁可从新开一个新的 Paste3，也别升级 Paste2。和这个网友相同，平时我只是用用而已，而且用的很好。Paste2 也没有联网到作者服务器，也没有常规的更新。我为什么要为这些付费？现在，我为什么要时刻提防着更新？\n\n合着，作者只需要把买断制改成订阅制，就可以继续圈钱了？这个吃相太难看。\n\n当然，Paste 对此也有一些处理，比如不小心更新到了最新版，那么可以到 [这里](https://pasteapp.io/mac/legacy/download/)，填写你购买的 Apple ID，可以提供最后一个买断版本下载。但是对于 iOS 等移动端，就没解决方案了。\n\n我想，Paste 不更新到 3.0，估计是不想见到一堆对 2.0 的差评吧，或者还是有恶意引导用户升级为订阅制的想法。也可能，目前的 Paste，怎么好意思改个计费模式就叫 3.0 了？未来在改个计费模式就可以 4.0 吗？\n\n--END--","slug":"2020-2020-02-08-in-app-purchase","published":1,"updated":"2020-03-04T14:33:42.683Z","comments":1,"photos":[],"link":"","_id":"cka5ik8dz0082nybguuf9a8b1","content":"<p>JSBox 宣布 2.0 发布，同时也改变了其付费模式，由下载付费改为订阅制。与此同时，Paste 也宣布新版开始采用全平台订阅制。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"JSBox-的历史\"><a href=\"#JSBox-的历史\" class=\"headerlink\" title=\"JSBox 的历史\"></a>JSBox 的历史</h2><p>原本的 JSBox 是 Pin 的其中一部分，后来作者发现编写脚本能力太强大了，同时这些功能集成到 Pin 里面，还会导致苹果商店审核问题，就决定另起一个项目。</p>\n<p>现在看来，其实编写脚本功能审核是没有问题的，当时的问题主要在 Pin 里面集成了应用商店，可以自由下载。后来 JSBox 独立出来，也有此类问题，只能通过不带应用商店模式上架。</p>\n<p>由于 JSBox 可以编写脚本运行，所以可以在手动把应用商店安装回来。</p>\n<p>原本 Pin 是 18 元。拆分后，Pin 价格不变，里面继续集成着 JSBox 的精简版。不过也鲜有实质更新了。</p>\n<p>新的 JSBox 起初 40 元（如果捆绑 Pin 的套包，大概 30 元左右），后来涨价到 58 元。</p>\n<p>不过对于一直都在加新功能的 JSBox，这点钱真不算多。但对于用户来讲，对于平时也就 6 元、18 元，JSBox 已经算是非常高价的应用了。</p>\n<p>JSBox 提供的大量的编程功能。但也是由于要编程，难度大幅增加，直接导致对应的应用很稀少。这点对比苹果收购的“快捷指令”对比就太明显了。</p>\n<h2 id=\"JSBox-计费模式调整\"><a href=\"#JSBox-计费模式调整\" class=\"headerlink\" title=\"JSBox 计费模式调整\"></a>JSBox 计费模式调整</h2><p>2020 年刚过完年，JSBox 决定改变计费模式。首先是提供了限免下载，之后改为内购收费。原本的付费用户自动从下载之日起赠送一年有效期。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-02-08-in-app-purchase.png-wm.white\" alt=\"JSBox Pro 高级版付费说明\"><br>由于我下载的时间比较早，所以已经过期了。</p>\n<p>升级 Pro 高级版，每年 58 元。为了照顾用户，第一年打折，40 元。</p>\n<p>比较好的是，默认免费版本是带有基础功能的，如果只是基础使 用的话还是可以的。但对于开发者，可能会有一些困难。此外，免费版没办法使用新推出的 NodeJS 环境。</p>\n<p>====</p>\n<p><strong>2020-02-25补充</strong>：</p>\n<p>比较有意思也比较人性化的是，JsBox 会自动判断你的购买时间，如果是之前 1.0 的购买者（限免下载好像不算），会默认获得 1.0 时代的所有功能。</p>\n<p>比如下图，后面的 PRO 表示专业版功能，前面的小锁表示是否已经解锁。2.0之后的专业功能都不可用，但之前的专业功能（比如编辑器插件），是可以使用的。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-02-25-jsbox.PNG-wm.white\" alt=\"各个版本功能以及是否可用\"></p>\n<p>====</p>\n<p>不过不知道大部分用户是直接下载脚本使用，还是自己开发应用。</p>\n<p>对我来讲，其实无所谓。免费版足够了，或者，没有也可以。</p>\n<p>这两年几乎没怎么用过脚本，主要就用了定时推送，每天到点弹窗，点击后打开网页打卡而已。完全可以被苹果官方的“快捷指令”替代。当时购买主要为了支持作者，以及提前投资，看看这款 APP 后续的发展。</p>\n<p>JSBox 虽然改成了内购按年付费，但也算良心，很多基础的功能免费了。此举应该是为了多拉些用户。用户太少，也就没有高质量的脚本应用，只会导致 JSBox 沦为小众的软件。到最后就只能不停提高费用了。</p>\n<p>顺便一提，Pin 除了手机版（18 元），还有 MacOS 版（30 元）。虽然 Pin 在手机端功能强大，但在 MacOS 上体验不够好。这也导致我没有考虑这种组合。</p>\n<h2 id=\"Paste\"><a href=\"#Paste\" class=\"headerlink\" title=\"Paste\"></a>Paste</h2><p>说起剪贴板同步，Paste 绝对够出名。MacOS 下的优秀体验，手机端还免费，通过 iCloud 完成同步。所以如果你 MacOS 是破解版的，那等于免费用。即便是购买，也只有 98 元，打折期间大概也就是 50 元左右。</p>\n<p>2020 年 2 月 7 日提供了新版更新，直接改为了内购按年付费（73 元），同时针对 iPad 需要额外付费（30 元）。</p>\n<p>Paste 给出的建议是，要么升级，按年付费使用；要么不升级，未来不会有更新。</p>\n<blockquote>\n<p>比较有意思的是，Paste MacOS 版在半年前提供了直接下载并使用序列号方式付费，但现在又看不到这种方式了。</p>\n</blockquote>\n<p>我比较倾向不升级。但是手机端不小心已经更新了，这就需要找回之前的老版本 APP。由于刚刚更新，估计还不够稳定，手机端有时候还不能看到内购选项。我计划先用新版，看看过期后的效果。不过预计过期后可能移动端不能正常使用。未来都将是免费下载，按年订购付费。但提供 14 天左右的体验期。</p>\n<p>====</p>\n<p><strong>2020-02-25更新</strong>：</p>\n<p>首先是 Mac 端，我没有更新，保持在老版本。iCloud 同步提示是成功的。</p>\n<p>移动端更新了第一个版本，发现无法完成内购付费，并且 iCloud 同步还不行。</p>\n<p>移动端在2-25更新到最新版本（发布了一周），结果发现还是没有内购付费，iCloud 还是不行（显示同步中）。内购付费还是不确定具体的流程，但估计是按账号计算，Mac 端如果购买，移动端自动也算购买了。但 iCloud 不能同步，难道是新版本和老版本 iCloud 不兼容？</p>\n<p>之后我尝试删除 Mac App Store 下载的 Paste，改成了我的正版 2.5.7 下载版本，可能是数据小问题，一开始没有历史数据，后续栏目名字有点小问题，不过问题不大。</p>\n<p>此时移动端的数据才能显示出来，所以不确定真的是新版本 iCloud 改了，还是我这点数据对它来说实在是太多太慢了。</p>\n<p>有意思的是，安装2.5.7首次启动时，提示更新2.5.8，我没更新。而且发现原本的正版下载地址竟然消失了。</p>\n<p>====</p>\n<p><strong>2020-03-04更新</strong>：</p>\n<p>前几天，我认真仔细看了下 Paste Mac 端和手机端。</p>\n<p>使用 Mac App Store 的版本，提示是是订阅制，提示到期时间，我的到期时间大致是 2022年1月1日。也就是即便换成 MAS 的版本，我可以继续使用 2 年不到。此版本同步正常。</p>\n<p>手机端，订阅制下面，写着 “有效期内的订阅： iOSLegacy”。那么意思应该是永久可用。估计是检测了当前的 iTunes 账号，发现是老用户吧。此版本同步也是正常的。</p>\n<p>后来我换了 Mac，就安装了当年人工下载的 2.5.7 正版，首次启动更新了 2.5.8 版。同步功能也完全正常。此版本没有订阅制内容，也就无所谓到期了。</p>\n<p>====</p>\n<h2 id=\"常见软件付费种类\"><a href=\"#常见软件付费种类\" class=\"headerlink\" title=\"常见软件付费种类\"></a>常见软件付费种类</h2><p>不论是一次性买断还是订阅制，软件都很常见。但我认为，<strong>本质上不同的支付方式，是由软件性质决定的</strong>。</p>\n<h4 id=\"买断型软件\"><a href=\"#买断型软件\" class=\"headerlink\" title=\"买断型软件\"></a>买断型软件</h4><p>比如常用的 Beyond Compare，商业软件，主要提供代码比对等功能，提供普通版和专业版。都是当前主版本终身制。这类软件普遍在主版本一开始提供大量的功能（或者做了UI调整），后续的小版本主要是修复为主，并且一般也不会再额外增加特殊的功能。对于使用者来讲，在购买时候就已经知晓它的功能，不需要额外的补充。所以一次买断终身使用是比较良好的。</p>\n<p>这种软件，还有 MWeb、Charles 等。软件买断后，作者不需要额外的付出，只需要日常修复 bug 就好了。同时用户也是本地使用软件，几乎不用联网到作者的服务器。</p>\n<p>我认为 Paste 就属于这一类。软件本身同步不依赖于作者的服务器，使用 iCloud 完成同步，同时后续也无需做大量功能迭代。所以另起炉灶建立 Paste3 就好，老的用户可以继续正常使用 Paste2。</p>\n<h4 id=\"订阅型软件\"><a href=\"#订阅型软件\" class=\"headerlink\" title=\"订阅型软件\"></a>订阅型软件</h4><p>还有一类软件，如音乐会员等，由于用户的使用会一直持续的占用作者服务器资源，所以必须使用订阅制。这种形式无可厚非。</p>\n<h4 id=\"特殊型软件\"><a href=\"#特殊型软件\" class=\"headerlink\" title=\"特殊型软件\"></a>特殊型软件</h4><p>还有一类软件，其实常见于小公司或个人性质开发者。由于其对软件的更新频繁，每次都提供一些新功能。如 JSBox，搞哪种付费方式都不合理。</p>\n<p>软件初始，使用买断制，用户花钱直接拥有，购买意愿也比较大。作者也可以快速回笼资金。但起初价格不能过高，否则很难销售。价格太低，又不可以持续支撑维护。软件发展后，只能选择逐步提高销售价格。但软件为终身制，则还未购买的用户将越来越少。收入也将逐步见顶。或者转型为订阅制，JSBox 就是这样的例子。</p>\n<p>如果软件初始使用订阅制，则需要软件具有较强的依赖性及不可替代性，而且后续作者必须有后续持续的维护，如增加更强的功能或提供长久的服务器支持。这样能做到的软件并不多。即便这么做了，做了几年也可能导致维护积极性下降。最终如果作者跳坑，则会推出买断的版本。</p>\n<p>由于大公司一般都有完善的配套设施和软件规划，一般很少这样中途改变计费方式。</p>\n<h2 id=\"大型软件\"><a href=\"#大型软件\" class=\"headerlink\" title=\"大型软件\"></a>大型软件</h2><p>还有一类软件，比较特殊。同时提供两种计费方式。版本买断和订阅制同时存在。这种一般都是大公司搞，个人和小公司比较少见。主要特征是提供云服务，每个大周期（每年左右）有持续功能加入，要考虑断网的环境。</p>\n<p>如 Parallels 和 Office。</p>\n<p>Parallels 是虚拟机软件。一个版本发布后，主要兼容当前的各种系统，买断版就可以一直使用当前版本。但是如果你期望永远兼容最新系统，那么则需要选择订阅制。</p>\n<p>Office 虽然不需要考虑兼容，但是买断版只有 Word、Excel、PowerPoint 等少量软件。最主要的是，没办法享用大容量的 OneDrive 云盘。不过买断版也有一些好处，比如支持没有网络的地区使用。</p>\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><p>对于 JSBox 来说，作者持续的更新，提供了大量的付出。软件转为基础免费，高级订阅也未尝不可。</p>\n<p>但我认为还是直接打磨好新的版本，向 Beyond Compare 一样，重新发布一个 JSBox，对老用户更加友好。愿意使用新功能则购买新的，不愿意老的继续使用。</p>\n<p>JSBox 转型订阅制也很讲究，基础功能免费了。只有需要更专业功能的用户才需要订购专业版。不过这样操作，收入能有多少就要画一个问号了。</p>\n<p>那可以不可以两种结合，JSBox 1.0 保留，新版 2.0 重新发布，调整为订阅制呢？我认为没有必要。首先是新版 2.0 基础功能是否收费，如果免费，那会导致大量用户直接使用 2.0。此时何必还要维护 1.0？如果基础功能收费，高级版更贵，会引来过多的舆论，还不如直接转为新版买断+部分功能单独买断形式。</p>\n<p>后续 JSBox 的盈利模式，我还会持续关注。</p>\n<p>对于 JSBox，我会在考虑是否会继续使用，因为是用的功能过于简单，可以换为“快捷指令”来完成，而且可能完成的更好。</p>\n<blockquote>\n<p>至于很多作者提到的，老版本软件兼容新系统，成本很大。我认为并不大，而且真要是太麻烦，干脆不去兼容就可以了。</p>\n</blockquote>\n<p>对于 Paste，由于刚刚开始转为订阅制，我还没有所有设备更新，并且要 14 天后才能见效果。不过看样子过了 14 天之后，就不能使用了。</p>\n<p>作者还提到，老版本则不会继续维护更新了。我在想，老版本，除了做系统兼容性时候更新过，其他功能你更新过吗？😂</p>\n<p>作者文章下面的网友回复：</p>\n<blockquote>\n<p>This is incredibly lame. I use Paste on my Mac every day, but it honestly feels like it hasn’t changed or improved in years. I’m perfectly fine with that, because it does its job. But suddenly switching to a subscription model for a basic utility that hasn’t added new features in so long feels like a shameless cash grab. The least you could have done was launch a version 3 and differentiate it in the App Store for those of us with no intention of paying a subscription. Now I have to make sure my copy doesn’t automatically update, which is a pain in the ass. Seriously frustrating.</p>\n</blockquote>\n<p>我也认为如此，宁可从新开一个新的 Paste3，也别升级 Paste2。和这个网友相同，平时我只是用用而已，而且用的很好。Paste2 也没有联网到作者服务器，也没有常规的更新。我为什么要为这些付费？现在，我为什么要时刻提防着更新？</p>\n<p>合着，作者只需要把买断制改成订阅制，就可以继续圈钱了？这个吃相太难看。</p>\n<p>当然，Paste 对此也有一些处理，比如不小心更新到了最新版，那么可以到 <a href=\"https://pasteapp.io/mac/legacy/download/\" target=\"_blank\" rel=\"noopener\">这里</a>，填写你购买的 Apple ID，可以提供最后一个买断版本下载。但是对于 iOS 等移动端，就没解决方案了。</p>\n<p>我想，Paste 不更新到 3.0，估计是不想见到一堆对 2.0 的差评吧，或者还是有恶意引导用户升级为订阅制的想法。也可能，目前的 Paste，怎么好意思改个计费模式就叫 3.0 了？未来在改个计费模式就可以 4.0 吗？</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>JSBox 宣布 2.0 发布，同时也改变了其付费模式，由下载付费改为订阅制。与此同时，Paste 也宣布新版开始采用全平台订阅制。</p>","more":"<h2 id=\"JSBox-的历史\"><a href=\"#JSBox-的历史\" class=\"headerlink\" title=\"JSBox 的历史\"></a>JSBox 的历史</h2><p>原本的 JSBox 是 Pin 的其中一部分，后来作者发现编写脚本能力太强大了，同时这些功能集成到 Pin 里面，还会导致苹果商店审核问题，就决定另起一个项目。</p>\n<p>现在看来，其实编写脚本功能审核是没有问题的，当时的问题主要在 Pin 里面集成了应用商店，可以自由下载。后来 JSBox 独立出来，也有此类问题，只能通过不带应用商店模式上架。</p>\n<p>由于 JSBox 可以编写脚本运行，所以可以在手动把应用商店安装回来。</p>\n<p>原本 Pin 是 18 元。拆分后，Pin 价格不变，里面继续集成着 JSBox 的精简版。不过也鲜有实质更新了。</p>\n<p>新的 JSBox 起初 40 元（如果捆绑 Pin 的套包，大概 30 元左右），后来涨价到 58 元。</p>\n<p>不过对于一直都在加新功能的 JSBox，这点钱真不算多。但对于用户来讲，对于平时也就 6 元、18 元，JSBox 已经算是非常高价的应用了。</p>\n<p>JSBox 提供的大量的编程功能。但也是由于要编程，难度大幅增加，直接导致对应的应用很稀少。这点对比苹果收购的“快捷指令”对比就太明显了。</p>\n<h2 id=\"JSBox-计费模式调整\"><a href=\"#JSBox-计费模式调整\" class=\"headerlink\" title=\"JSBox 计费模式调整\"></a>JSBox 计费模式调整</h2><p>2020 年刚过完年，JSBox 决定改变计费模式。首先是提供了限免下载，之后改为内购收费。原本的付费用户自动从下载之日起赠送一年有效期。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-02-08-in-app-purchase.png-wm.white\" alt=\"JSBox Pro 高级版付费说明\"><br>由于我下载的时间比较早，所以已经过期了。</p>\n<p>升级 Pro 高级版，每年 58 元。为了照顾用户，第一年打折，40 元。</p>\n<p>比较好的是，默认免费版本是带有基础功能的，如果只是基础使 用的话还是可以的。但对于开发者，可能会有一些困难。此外，免费版没办法使用新推出的 NodeJS 环境。</p>\n<p>====</p>\n<p><strong>2020-02-25补充</strong>：</p>\n<p>比较有意思也比较人性化的是，JsBox 会自动判断你的购买时间，如果是之前 1.0 的购买者（限免下载好像不算），会默认获得 1.0 时代的所有功能。</p>\n<p>比如下图，后面的 PRO 表示专业版功能，前面的小锁表示是否已经解锁。2.0之后的专业功能都不可用，但之前的专业功能（比如编辑器插件），是可以使用的。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-02-25-jsbox.PNG-wm.white\" alt=\"各个版本功能以及是否可用\"></p>\n<p>====</p>\n<p>不过不知道大部分用户是直接下载脚本使用，还是自己开发应用。</p>\n<p>对我来讲，其实无所谓。免费版足够了，或者，没有也可以。</p>\n<p>这两年几乎没怎么用过脚本，主要就用了定时推送，每天到点弹窗，点击后打开网页打卡而已。完全可以被苹果官方的“快捷指令”替代。当时购买主要为了支持作者，以及提前投资，看看这款 APP 后续的发展。</p>\n<p>JSBox 虽然改成了内购按年付费，但也算良心，很多基础的功能免费了。此举应该是为了多拉些用户。用户太少，也就没有高质量的脚本应用，只会导致 JSBox 沦为小众的软件。到最后就只能不停提高费用了。</p>\n<p>顺便一提，Pin 除了手机版（18 元），还有 MacOS 版（30 元）。虽然 Pin 在手机端功能强大，但在 MacOS 上体验不够好。这也导致我没有考虑这种组合。</p>\n<h2 id=\"Paste\"><a href=\"#Paste\" class=\"headerlink\" title=\"Paste\"></a>Paste</h2><p>说起剪贴板同步，Paste 绝对够出名。MacOS 下的优秀体验，手机端还免费，通过 iCloud 完成同步。所以如果你 MacOS 是破解版的，那等于免费用。即便是购买，也只有 98 元，打折期间大概也就是 50 元左右。</p>\n<p>2020 年 2 月 7 日提供了新版更新，直接改为了内购按年付费（73 元），同时针对 iPad 需要额外付费（30 元）。</p>\n<p>Paste 给出的建议是，要么升级，按年付费使用；要么不升级，未来不会有更新。</p>\n<blockquote>\n<p>比较有意思的是，Paste MacOS 版在半年前提供了直接下载并使用序列号方式付费，但现在又看不到这种方式了。</p>\n</blockquote>\n<p>我比较倾向不升级。但是手机端不小心已经更新了，这就需要找回之前的老版本 APP。由于刚刚更新，估计还不够稳定，手机端有时候还不能看到内购选项。我计划先用新版，看看过期后的效果。不过预计过期后可能移动端不能正常使用。未来都将是免费下载，按年订购付费。但提供 14 天左右的体验期。</p>\n<p>====</p>\n<p><strong>2020-02-25更新</strong>：</p>\n<p>首先是 Mac 端，我没有更新，保持在老版本。iCloud 同步提示是成功的。</p>\n<p>移动端更新了第一个版本，发现无法完成内购付费，并且 iCloud 同步还不行。</p>\n<p>移动端在2-25更新到最新版本（发布了一周），结果发现还是没有内购付费，iCloud 还是不行（显示同步中）。内购付费还是不确定具体的流程，但估计是按账号计算，Mac 端如果购买，移动端自动也算购买了。但 iCloud 不能同步，难道是新版本和老版本 iCloud 不兼容？</p>\n<p>之后我尝试删除 Mac App Store 下载的 Paste，改成了我的正版 2.5.7 下载版本，可能是数据小问题，一开始没有历史数据，后续栏目名字有点小问题，不过问题不大。</p>\n<p>此时移动端的数据才能显示出来，所以不确定真的是新版本 iCloud 改了，还是我这点数据对它来说实在是太多太慢了。</p>\n<p>有意思的是，安装2.5.7首次启动时，提示更新2.5.8，我没更新。而且发现原本的正版下载地址竟然消失了。</p>\n<p>====</p>\n<p><strong>2020-03-04更新</strong>：</p>\n<p>前几天，我认真仔细看了下 Paste Mac 端和手机端。</p>\n<p>使用 Mac App Store 的版本，提示是是订阅制，提示到期时间，我的到期时间大致是 2022年1月1日。也就是即便换成 MAS 的版本，我可以继续使用 2 年不到。此版本同步正常。</p>\n<p>手机端，订阅制下面，写着 “有效期内的订阅： iOSLegacy”。那么意思应该是永久可用。估计是检测了当前的 iTunes 账号，发现是老用户吧。此版本同步也是正常的。</p>\n<p>后来我换了 Mac，就安装了当年人工下载的 2.5.7 正版，首次启动更新了 2.5.8 版。同步功能也完全正常。此版本没有订阅制内容，也就无所谓到期了。</p>\n<p>====</p>\n<h2 id=\"常见软件付费种类\"><a href=\"#常见软件付费种类\" class=\"headerlink\" title=\"常见软件付费种类\"></a>常见软件付费种类</h2><p>不论是一次性买断还是订阅制，软件都很常见。但我认为，<strong>本质上不同的支付方式，是由软件性质决定的</strong>。</p>\n<h4 id=\"买断型软件\"><a href=\"#买断型软件\" class=\"headerlink\" title=\"买断型软件\"></a>买断型软件</h4><p>比如常用的 Beyond Compare，商业软件，主要提供代码比对等功能，提供普通版和专业版。都是当前主版本终身制。这类软件普遍在主版本一开始提供大量的功能（或者做了UI调整），后续的小版本主要是修复为主，并且一般也不会再额外增加特殊的功能。对于使用者来讲，在购买时候就已经知晓它的功能，不需要额外的补充。所以一次买断终身使用是比较良好的。</p>\n<p>这种软件，还有 MWeb、Charles 等。软件买断后，作者不需要额外的付出，只需要日常修复 bug 就好了。同时用户也是本地使用软件，几乎不用联网到作者的服务器。</p>\n<p>我认为 Paste 就属于这一类。软件本身同步不依赖于作者的服务器，使用 iCloud 完成同步，同时后续也无需做大量功能迭代。所以另起炉灶建立 Paste3 就好，老的用户可以继续正常使用 Paste2。</p>\n<h4 id=\"订阅型软件\"><a href=\"#订阅型软件\" class=\"headerlink\" title=\"订阅型软件\"></a>订阅型软件</h4><p>还有一类软件，如音乐会员等，由于用户的使用会一直持续的占用作者服务器资源，所以必须使用订阅制。这种形式无可厚非。</p>\n<h4 id=\"特殊型软件\"><a href=\"#特殊型软件\" class=\"headerlink\" title=\"特殊型软件\"></a>特殊型软件</h4><p>还有一类软件，其实常见于小公司或个人性质开发者。由于其对软件的更新频繁，每次都提供一些新功能。如 JSBox，搞哪种付费方式都不合理。</p>\n<p>软件初始，使用买断制，用户花钱直接拥有，购买意愿也比较大。作者也可以快速回笼资金。但起初价格不能过高，否则很难销售。价格太低，又不可以持续支撑维护。软件发展后，只能选择逐步提高销售价格。但软件为终身制，则还未购买的用户将越来越少。收入也将逐步见顶。或者转型为订阅制，JSBox 就是这样的例子。</p>\n<p>如果软件初始使用订阅制，则需要软件具有较强的依赖性及不可替代性，而且后续作者必须有后续持续的维护，如增加更强的功能或提供长久的服务器支持。这样能做到的软件并不多。即便这么做了，做了几年也可能导致维护积极性下降。最终如果作者跳坑，则会推出买断的版本。</p>\n<p>由于大公司一般都有完善的配套设施和软件规划，一般很少这样中途改变计费方式。</p>\n<h2 id=\"大型软件\"><a href=\"#大型软件\" class=\"headerlink\" title=\"大型软件\"></a>大型软件</h2><p>还有一类软件，比较特殊。同时提供两种计费方式。版本买断和订阅制同时存在。这种一般都是大公司搞，个人和小公司比较少见。主要特征是提供云服务，每个大周期（每年左右）有持续功能加入，要考虑断网的环境。</p>\n<p>如 Parallels 和 Office。</p>\n<p>Parallels 是虚拟机软件。一个版本发布后，主要兼容当前的各种系统，买断版就可以一直使用当前版本。但是如果你期望永远兼容最新系统，那么则需要选择订阅制。</p>\n<p>Office 虽然不需要考虑兼容，但是买断版只有 Word、Excel、PowerPoint 等少量软件。最主要的是，没办法享用大容量的 OneDrive 云盘。不过买断版也有一些好处，比如支持没有网络的地区使用。</p>\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><p>对于 JSBox 来说，作者持续的更新，提供了大量的付出。软件转为基础免费，高级订阅也未尝不可。</p>\n<p>但我认为还是直接打磨好新的版本，向 Beyond Compare 一样，重新发布一个 JSBox，对老用户更加友好。愿意使用新功能则购买新的，不愿意老的继续使用。</p>\n<p>JSBox 转型订阅制也很讲究，基础功能免费了。只有需要更专业功能的用户才需要订购专业版。不过这样操作，收入能有多少就要画一个问号了。</p>\n<p>那可以不可以两种结合，JSBox 1.0 保留，新版 2.0 重新发布，调整为订阅制呢？我认为没有必要。首先是新版 2.0 基础功能是否收费，如果免费，那会导致大量用户直接使用 2.0。此时何必还要维护 1.0？如果基础功能收费，高级版更贵，会引来过多的舆论，还不如直接转为新版买断+部分功能单独买断形式。</p>\n<p>后续 JSBox 的盈利模式，我还会持续关注。</p>\n<p>对于 JSBox，我会在考虑是否会继续使用，因为是用的功能过于简单，可以换为“快捷指令”来完成，而且可能完成的更好。</p>\n<blockquote>\n<p>至于很多作者提到的，老版本软件兼容新系统，成本很大。我认为并不大，而且真要是太麻烦，干脆不去兼容就可以了。</p>\n</blockquote>\n<p>对于 Paste，由于刚刚开始转为订阅制，我还没有所有设备更新，并且要 14 天后才能见效果。不过看样子过了 14 天之后，就不能使用了。</p>\n<p>作者还提到，老版本则不会继续维护更新了。我在想，老版本，除了做系统兼容性时候更新过，其他功能你更新过吗？😂</p>\n<p>作者文章下面的网友回复：</p>\n<blockquote>\n<p>This is incredibly lame. I use Paste on my Mac every day, but it honestly feels like it hasn’t changed or improved in years. I’m perfectly fine with that, because it does its job. But suddenly switching to a subscription model for a basic utility that hasn’t added new features in so long feels like a shameless cash grab. The least you could have done was launch a version 3 and differentiate it in the App Store for those of us with no intention of paying a subscription. Now I have to make sure my copy doesn’t automatically update, which is a pain in the ass. Seriously frustrating.</p>\n</blockquote>\n<p>我也认为如此，宁可从新开一个新的 Paste3，也别升级 Paste2。和这个网友相同，平时我只是用用而已，而且用的很好。Paste2 也没有联网到作者服务器，也没有常规的更新。我为什么要为这些付费？现在，我为什么要时刻提防着更新？</p>\n<p>合着，作者只需要把买断制改成订阅制，就可以继续圈钱了？这个吃相太难看。</p>\n<p>当然，Paste 对此也有一些处理，比如不小心更新到了最新版，那么可以到 <a href=\"https://pasteapp.io/mac/legacy/download/\" target=\"_blank\" rel=\"noopener\">这里</a>，填写你购买的 Apple ID，可以提供最后一个买断版本下载。但是对于 iOS 等移动端，就没解决方案了。</p>\n<p>我想，Paste 不更新到 3.0，估计是不想见到一堆对 2.0 的差评吧，或者还是有恶意引导用户升级为订阅制的想法。也可能，目前的 Paste，怎么好意思改个计费模式就叫 3.0 了？未来在改个计费模式就可以 4.0 吗？</p>\n<p>–END–</p>"},{"layout":"post","title":"多账户邮箱及域名邮箱的管理","date":"2020-03-02T21:41:00.000Z","_content":"\n偶然发现 Microsoft E3 账号可以关联自己的域名，正巧自己有域名需要托管，也喜欢 outlook 的风格，就这样进行迁移了。同时自己也有其他服务商的一些邮箱，虽然有的很少，但可能还会有写邮件，也就一并管理下。\n\n<!-- more -->\n\n## 域名邮箱\n\n首先明确的是，域名邮箱不考虑自建服务的那种。自建服务一是有一定硬件成本，还会遇到垃圾邮件处理的问题。所以我不考虑这种情况。\n\n国内的域名邮箱最早出现在腾讯的 QQ 邮箱。操作很简单，就可以在你原有的 QQ 邮箱上面绑定自己的域名，建立域名邮箱。当时很多有域名的人都在 QQ 邮箱上建立。\n\n#### QQ 域名邮箱\n\nQQ 域名邮箱也很有特色，比如它建立的域名邮箱，必须绑定到 QQ 邮箱账号上，相当于原有的 QQ 邮箱多了一个发件和收件人而已。\n\n由于是直接把域名邮箱绑定到自己的 QQ 邮箱上，所以是用的还是 QQ 邮箱，QQ 邮箱有啥域名邮箱就有，体验还是不错的，功能也很强大。而且支持多个域名邮箱绑定到一个 QQ 邮箱上，这样只需要一个 QQ 邮箱就可以接收发送 N 多域名邮箱邮件。\n\n缺点是国外不稳定和域名限制。2018年及以前，我在使用，国内的邮件基本上没什么问题，不过国外的一些服务商邮件可能收不到，也可能需要很长时间（几小时甚至一天）。此外貌似是域名需要备案（或者有的域名后缀不识别），反正不是所有的域名都可以绑定的。\n\n**写文章的今天再去查看，发现已经不能创建域名邮箱了，改成了企业邮箱。企业邮箱也有免费版，需要创建企业管理员，我估计建立过程和网易域名邮箱差不多。最终企业邮箱是单独开账号还是绑定现有 QQ 邮箱，不得而知。**\n\n据说腾讯企业邮箱不绑定 QQ 邮箱了，页面风格应该属于腾讯云那种。但是功能还是挺强大的。\n\n#### 网易域名邮箱\n\n一次在计划转移域名时候，发现 QQ 域名邮箱不能收国外邮件，就放弃了。后来也反复验证，QQ 域名邮箱接收国外服务商邮件非常不稳定。这就使得我开始转向网易域名邮箱。\n\n网易的域名邮箱需要单独创建，设立管理员、企业信息等。最后单独建立一个个域名邮箱。每一个域名邮箱也是完全独立的，登录也要走域名邮箱登录页面。\n\n网易的邮箱果真名不虚传，邮件接收不论国内国外，大部分情况都没什么问题，极个别时候有慢的情况。由于是独立的域名邮箱，所以你创建 10 个域名邮箱，就有 10 个独立账号，真正做到完全独立。网易域名邮箱提供功能上比较少，但好在常用功能都不欠缺。比如我想用的邮件代收功能，它就支持（下文 outlook 域名邮箱就不支持）。\n\n缺点是由于每个邮箱独立，管理起来可能复杂一点。此外，这也是我见过唯一一个给域名邮箱发广告的服务商...恩，平时经常能收到网易的广告邮件。\n\n当然如果你有域名，完全可以考虑网易域名邮箱。免费的里面我认为已经非常好用了。\n\n不过后来我还是迁移走了，主要是更喜欢 outlook 的页面，还有就是网易邮箱邮件代收实在无法接受。\n\n#### yandex 域名邮箱\n\nyandex 是俄罗斯著名的搜索引擎公司，其也提供域名邮箱服务。更准确的说是提供小企业服务。\n\n账户建立也是需要注册管理员和企业信息，之后可以配置一个个域名邮箱。由于是英文，而且本身是提供小企业多方位服务，所以我觉得增加域名邮箱操作稍微步骤有点多。\n\n邮件界面倒是简单，不过功能貌似也很少。\n\n我用的极少，也不确定其能否邮件代收。但常规的 imap /smtp 应该还是提供的。这里还是推荐下它，主要是因为想接收国外邮件，除了网易邮箱外，国外的 outlook / google(G suite) 等都需要付费企业账号，一般人可能搞不到。不过据说有网友说它发信经常失败。\n\n#### outlook 域名邮箱\n\n想在微软下建立域名邮箱，基本上就需要 Microsoft MSDN E3 或 A1 之类的账号。恰巧自己有一个 E3 账号。\n\nE3 账户支持配置 25 个 office 用户（用户无限，但是邮箱必须依托 office 权限）。每个账户可以配置一个主邮箱，以及多个别名邮箱。多个别名邮箱可以接收邮件，但是无法通过该别名发送邮件。而且通过别名接收的邮件，会直接显示在主邮箱上，一点区分能力都没有。\n\n> 举个例子：主邮箱 a@hello.com，别名邮箱 b@hello.com，发给 b@hello.com 的邮件直接显示在 a@hello.com 里，并且收件人就是 a@hello.com。\n> \n> 目前我还没发现如何区分是发给 b@hello.com 的邮件还是直接发给 a@hello.com 的。\n\n所以如果真的域名邮箱太多的话，单纯接收还好，可以建立一个主邮箱，配置多个别名邮箱。如果真的想区分开进行接收和发送邮件，那么域名邮箱最多只有 25 个。\n\n#### 其他我听说过的域名邮箱\n\n1. Mailgun + 其他邮箱：通过 Mailgun 收邮件自动转发，外加一个正常邮箱配置 SMTP 服务发邮件。这个方法发现 Mailgun 免费版已经不能转发邮件了。如果你只需要转发接收邮件，而不用回复，可以看看国外的域名注册商（当年我记得域名注册商 Godaddy 就有免费的转发邮件功能）。\n2. mail.ru ：据说还不错，可惜是全俄文，实在接受不了。\n3. pingly：我测试过，界面非常好，非常简约，简约到都没有设置功能。貌似半年前刚刚支持 SMTP 服务，也有了别名邮箱功能。不过由于太简单了，常用的邮件转发、签名、代收、通讯录啥的都没有。我建议过几年在看看吧。目前好像只能一个账户绑定一个域名。\n4. zoho：有国内和国外版。据说免费没有 IMAP / POP3，那只能登录页面查邮件了。而且收信貌似也很慢。\n\n## 邮件的代收\n\n邮箱多了，又不可能装 N 多邮箱客户端或登录他们的网站查看，就必须统一管理。常用的方案是邮件转发和邮件代收。\n\n邮件转发我认为会在原邮箱留下太多痕迹，并且无法做到原路（原邮件地址）回复，感觉不太优雅。不过这种方式对于公司中比如客服之类邮件会比较实用。\n\n邮件代收等同于邮箱里安装了一个邮箱客户端，通过一个主邮箱去管理多个子邮箱。我更倾向这种方案。好处是大部分邮箱都支持 SMTP+IMAP 方式，在主邮箱里可以发送、删除子邮箱的邮件。\n\n但是邮件代收，服务商存储你的各个子邮箱账号密码安全性先不考虑之外，仍有不少的坑。下文主要讨论网页版的邮箱情况。\n\n#### 子邮箱被收信\n\n要想被别的邮箱或者客户端收信，首先你的邮箱得支持被收信。常见的方式主要有 SMTP+POP、SMTP+IMAP、Exchange。前两个主要是对邮箱信件删除的区别，一个是仅删除本地，一个是删除本地同时也把服务器中的邮件删除。最后一个是微软的协议，能支持日历之类的同步。比如 yahoo 的邮箱，就不支持被收信。\n\n再次就是国内邮箱的垃圾，比如 QQ、网易、搜狐等，都宣称代收（使用客户端 APP 也是代收行为）是不安全的，所以都搞一个安全码之类的密码。开通安全码要绑定手机或者其他操作，相对多了一大步操作。当然，你使用它们官方指定的客户端 APP 就不需要安全码，算是变相推广客户端 APP。\n\n所谓安全码数量、停用机制等感觉都很难理解。\n\n比如 QQ 邮箱可以单独设置独立于 QQ 账号的邮箱登录密码，还可以设置安全码。安全码也不能查询开通了几个，那个还能否用。只是听说修改 QQ 密码（QQ 邮箱登录密码），会导致安全码都失效。**这就是说，安全码泄露了，必须修改 QQ 密码（QQ 邮箱登录密码）才能解决。**那和我直接用 QQ 密码有啥区别么！我能想到的唯一区别就是配置了安全码泄露的是一串无意义密码，没有配置泄露的是你自己配置的密码。对于我这种密码随机生成且不重复没有意义，**当然如果一个人所有账号都是一个密码还真的有效**。\n\n网易邮箱的安全码相对容易一点，只能生成一个安全码，你必须手动抄下来，在各个地方使用，否则后续只能重置安全码。\n\n解决了安全码，就可以代收的了么？还不一定。\n\n目前发现网易是屏蔽 Spark 邮件客户端的，大致是网易觉得一家独大吧，屏蔽一些邮件客户端可以增加自己的客户端安装量。如果你遇到此类问题，可以尝试搜索下，是否别人也遇到了，以及解决方案。\n\n> 不过域名邮箱，就不用受安全码限制，比如网易域名邮箱，就没有安全码，所以就可以直接登录。\n\n#### 主邮箱代收\n\n之前曾经短暂用过 QQ 邮箱的代收，感觉还行，没有什么太大问题。\n\n网易邮箱，不论是 163 / 126 等官方邮箱，还是自己建立的域名邮箱，都可以进行邮件代收，但是我感觉主邮箱同步子邮箱邮件频率很低，感觉最少要 1-2 小时才会同步一次。**最可气的是，它还显示收取中、收取完成。**具体官方邮箱和自己建立的域名邮箱同步频率是否一致也不清楚。反正域名邮箱非常慢，经常收不到邮件，要等很久甚至过几天才会推送过来，更甚至有时候要登录后手动刷新。对于要接收验证码急用的我实在是受不了。\n\noutlook 也可以代收，但是只限于默认官方的邮箱。**域名邮箱没有此功能。**同步速度非常快，基本上几分钟内都可以收到。目前也是我最爱使用的邮箱。\n\n> outlook 代收邮件还有一个趣事。我用它代收 office 365 域名邮箱的邮件，结果提示默认不支持，需要手动配置 SMTP+IMAP 信息才可以。\n\n## 小结\n\n总之管理好多个邮箱是个困难活，主要是各个服务商对自身的安全性限制比较多，要求安全码之类。同时服务商可能不提供对应的代收等能力，给统一管理造成了一些困难。\n\n开立自己的域名邮箱，优先推荐腾讯企业邮箱，效果应该还好，功能也算强大。如果遇到收不到国外邮件，可以尝试网易域名邮箱。不过这两个服务商都可能遇到有的冷门域名添加不了的情况，并且国内一般有要求实名等。\n\n如果非要选用国外的邮箱，可以试试 yandex，虽然有反馈有发信失败，但选用他们家的域名邮箱的人还是挺多的，我觉得质量应该不会太差。\n\n能有路子找到 Office 365 特殊账号的，强烈推荐直接上 outlook，体验简直飞起。\n\nG suite 少量用户收费但不太贵（6 美金/用户/月），但是考虑国内网络情况，并不推荐。\n\n--END--","source":"_posts/2020/2020-03-02-mail.md","raw":"---\nlayout: post\ntitle: 多账户邮箱及域名邮箱的管理\ndate: 2020-03-02 21:41:00 GMT+0800\ncategories: [杂谈]\ntags:  [email, 域名邮箱]\n---\n\n偶然发现 Microsoft E3 账号可以关联自己的域名，正巧自己有域名需要托管，也喜欢 outlook 的风格，就这样进行迁移了。同时自己也有其他服务商的一些邮箱，虽然有的很少，但可能还会有写邮件，也就一并管理下。\n\n<!-- more -->\n\n## 域名邮箱\n\n首先明确的是，域名邮箱不考虑自建服务的那种。自建服务一是有一定硬件成本，还会遇到垃圾邮件处理的问题。所以我不考虑这种情况。\n\n国内的域名邮箱最早出现在腾讯的 QQ 邮箱。操作很简单，就可以在你原有的 QQ 邮箱上面绑定自己的域名，建立域名邮箱。当时很多有域名的人都在 QQ 邮箱上建立。\n\n#### QQ 域名邮箱\n\nQQ 域名邮箱也很有特色，比如它建立的域名邮箱，必须绑定到 QQ 邮箱账号上，相当于原有的 QQ 邮箱多了一个发件和收件人而已。\n\n由于是直接把域名邮箱绑定到自己的 QQ 邮箱上，所以是用的还是 QQ 邮箱，QQ 邮箱有啥域名邮箱就有，体验还是不错的，功能也很强大。而且支持多个域名邮箱绑定到一个 QQ 邮箱上，这样只需要一个 QQ 邮箱就可以接收发送 N 多域名邮箱邮件。\n\n缺点是国外不稳定和域名限制。2018年及以前，我在使用，国内的邮件基本上没什么问题，不过国外的一些服务商邮件可能收不到，也可能需要很长时间（几小时甚至一天）。此外貌似是域名需要备案（或者有的域名后缀不识别），反正不是所有的域名都可以绑定的。\n\n**写文章的今天再去查看，发现已经不能创建域名邮箱了，改成了企业邮箱。企业邮箱也有免费版，需要创建企业管理员，我估计建立过程和网易域名邮箱差不多。最终企业邮箱是单独开账号还是绑定现有 QQ 邮箱，不得而知。**\n\n据说腾讯企业邮箱不绑定 QQ 邮箱了，页面风格应该属于腾讯云那种。但是功能还是挺强大的。\n\n#### 网易域名邮箱\n\n一次在计划转移域名时候，发现 QQ 域名邮箱不能收国外邮件，就放弃了。后来也反复验证，QQ 域名邮箱接收国外服务商邮件非常不稳定。这就使得我开始转向网易域名邮箱。\n\n网易的域名邮箱需要单独创建，设立管理员、企业信息等。最后单独建立一个个域名邮箱。每一个域名邮箱也是完全独立的，登录也要走域名邮箱登录页面。\n\n网易的邮箱果真名不虚传，邮件接收不论国内国外，大部分情况都没什么问题，极个别时候有慢的情况。由于是独立的域名邮箱，所以你创建 10 个域名邮箱，就有 10 个独立账号，真正做到完全独立。网易域名邮箱提供功能上比较少，但好在常用功能都不欠缺。比如我想用的邮件代收功能，它就支持（下文 outlook 域名邮箱就不支持）。\n\n缺点是由于每个邮箱独立，管理起来可能复杂一点。此外，这也是我见过唯一一个给域名邮箱发广告的服务商...恩，平时经常能收到网易的广告邮件。\n\n当然如果你有域名，完全可以考虑网易域名邮箱。免费的里面我认为已经非常好用了。\n\n不过后来我还是迁移走了，主要是更喜欢 outlook 的页面，还有就是网易邮箱邮件代收实在无法接受。\n\n#### yandex 域名邮箱\n\nyandex 是俄罗斯著名的搜索引擎公司，其也提供域名邮箱服务。更准确的说是提供小企业服务。\n\n账户建立也是需要注册管理员和企业信息，之后可以配置一个个域名邮箱。由于是英文，而且本身是提供小企业多方位服务，所以我觉得增加域名邮箱操作稍微步骤有点多。\n\n邮件界面倒是简单，不过功能貌似也很少。\n\n我用的极少，也不确定其能否邮件代收。但常规的 imap /smtp 应该还是提供的。这里还是推荐下它，主要是因为想接收国外邮件，除了网易邮箱外，国外的 outlook / google(G suite) 等都需要付费企业账号，一般人可能搞不到。不过据说有网友说它发信经常失败。\n\n#### outlook 域名邮箱\n\n想在微软下建立域名邮箱，基本上就需要 Microsoft MSDN E3 或 A1 之类的账号。恰巧自己有一个 E3 账号。\n\nE3 账户支持配置 25 个 office 用户（用户无限，但是邮箱必须依托 office 权限）。每个账户可以配置一个主邮箱，以及多个别名邮箱。多个别名邮箱可以接收邮件，但是无法通过该别名发送邮件。而且通过别名接收的邮件，会直接显示在主邮箱上，一点区分能力都没有。\n\n> 举个例子：主邮箱 a@hello.com，别名邮箱 b@hello.com，发给 b@hello.com 的邮件直接显示在 a@hello.com 里，并且收件人就是 a@hello.com。\n> \n> 目前我还没发现如何区分是发给 b@hello.com 的邮件还是直接发给 a@hello.com 的。\n\n所以如果真的域名邮箱太多的话，单纯接收还好，可以建立一个主邮箱，配置多个别名邮箱。如果真的想区分开进行接收和发送邮件，那么域名邮箱最多只有 25 个。\n\n#### 其他我听说过的域名邮箱\n\n1. Mailgun + 其他邮箱：通过 Mailgun 收邮件自动转发，外加一个正常邮箱配置 SMTP 服务发邮件。这个方法发现 Mailgun 免费版已经不能转发邮件了。如果你只需要转发接收邮件，而不用回复，可以看看国外的域名注册商（当年我记得域名注册商 Godaddy 就有免费的转发邮件功能）。\n2. mail.ru ：据说还不错，可惜是全俄文，实在接受不了。\n3. pingly：我测试过，界面非常好，非常简约，简约到都没有设置功能。貌似半年前刚刚支持 SMTP 服务，也有了别名邮箱功能。不过由于太简单了，常用的邮件转发、签名、代收、通讯录啥的都没有。我建议过几年在看看吧。目前好像只能一个账户绑定一个域名。\n4. zoho：有国内和国外版。据说免费没有 IMAP / POP3，那只能登录页面查邮件了。而且收信貌似也很慢。\n\n## 邮件的代收\n\n邮箱多了，又不可能装 N 多邮箱客户端或登录他们的网站查看，就必须统一管理。常用的方案是邮件转发和邮件代收。\n\n邮件转发我认为会在原邮箱留下太多痕迹，并且无法做到原路（原邮件地址）回复，感觉不太优雅。不过这种方式对于公司中比如客服之类邮件会比较实用。\n\n邮件代收等同于邮箱里安装了一个邮箱客户端，通过一个主邮箱去管理多个子邮箱。我更倾向这种方案。好处是大部分邮箱都支持 SMTP+IMAP 方式，在主邮箱里可以发送、删除子邮箱的邮件。\n\n但是邮件代收，服务商存储你的各个子邮箱账号密码安全性先不考虑之外，仍有不少的坑。下文主要讨论网页版的邮箱情况。\n\n#### 子邮箱被收信\n\n要想被别的邮箱或者客户端收信，首先你的邮箱得支持被收信。常见的方式主要有 SMTP+POP、SMTP+IMAP、Exchange。前两个主要是对邮箱信件删除的区别，一个是仅删除本地，一个是删除本地同时也把服务器中的邮件删除。最后一个是微软的协议，能支持日历之类的同步。比如 yahoo 的邮箱，就不支持被收信。\n\n再次就是国内邮箱的垃圾，比如 QQ、网易、搜狐等，都宣称代收（使用客户端 APP 也是代收行为）是不安全的，所以都搞一个安全码之类的密码。开通安全码要绑定手机或者其他操作，相对多了一大步操作。当然，你使用它们官方指定的客户端 APP 就不需要安全码，算是变相推广客户端 APP。\n\n所谓安全码数量、停用机制等感觉都很难理解。\n\n比如 QQ 邮箱可以单独设置独立于 QQ 账号的邮箱登录密码，还可以设置安全码。安全码也不能查询开通了几个，那个还能否用。只是听说修改 QQ 密码（QQ 邮箱登录密码），会导致安全码都失效。**这就是说，安全码泄露了，必须修改 QQ 密码（QQ 邮箱登录密码）才能解决。**那和我直接用 QQ 密码有啥区别么！我能想到的唯一区别就是配置了安全码泄露的是一串无意义密码，没有配置泄露的是你自己配置的密码。对于我这种密码随机生成且不重复没有意义，**当然如果一个人所有账号都是一个密码还真的有效**。\n\n网易邮箱的安全码相对容易一点，只能生成一个安全码，你必须手动抄下来，在各个地方使用，否则后续只能重置安全码。\n\n解决了安全码，就可以代收的了么？还不一定。\n\n目前发现网易是屏蔽 Spark 邮件客户端的，大致是网易觉得一家独大吧，屏蔽一些邮件客户端可以增加自己的客户端安装量。如果你遇到此类问题，可以尝试搜索下，是否别人也遇到了，以及解决方案。\n\n> 不过域名邮箱，就不用受安全码限制，比如网易域名邮箱，就没有安全码，所以就可以直接登录。\n\n#### 主邮箱代收\n\n之前曾经短暂用过 QQ 邮箱的代收，感觉还行，没有什么太大问题。\n\n网易邮箱，不论是 163 / 126 等官方邮箱，还是自己建立的域名邮箱，都可以进行邮件代收，但是我感觉主邮箱同步子邮箱邮件频率很低，感觉最少要 1-2 小时才会同步一次。**最可气的是，它还显示收取中、收取完成。**具体官方邮箱和自己建立的域名邮箱同步频率是否一致也不清楚。反正域名邮箱非常慢，经常收不到邮件，要等很久甚至过几天才会推送过来，更甚至有时候要登录后手动刷新。对于要接收验证码急用的我实在是受不了。\n\noutlook 也可以代收，但是只限于默认官方的邮箱。**域名邮箱没有此功能。**同步速度非常快，基本上几分钟内都可以收到。目前也是我最爱使用的邮箱。\n\n> outlook 代收邮件还有一个趣事。我用它代收 office 365 域名邮箱的邮件，结果提示默认不支持，需要手动配置 SMTP+IMAP 信息才可以。\n\n## 小结\n\n总之管理好多个邮箱是个困难活，主要是各个服务商对自身的安全性限制比较多，要求安全码之类。同时服务商可能不提供对应的代收等能力，给统一管理造成了一些困难。\n\n开立自己的域名邮箱，优先推荐腾讯企业邮箱，效果应该还好，功能也算强大。如果遇到收不到国外邮件，可以尝试网易域名邮箱。不过这两个服务商都可能遇到有的冷门域名添加不了的情况，并且国内一般有要求实名等。\n\n如果非要选用国外的邮箱，可以试试 yandex，虽然有反馈有发信失败，但选用他们家的域名邮箱的人还是挺多的，我觉得质量应该不会太差。\n\n能有路子找到 Office 365 特殊账号的，强烈推荐直接上 outlook，体验简直飞起。\n\nG suite 少量用户收费但不太贵（6 美金/用户/月），但是考虑国内网络情况，并不推荐。\n\n--END--","slug":"2020-2020-03-02-mail","published":1,"updated":"2020-03-02T16:49:54.523Z","comments":1,"photos":[],"link":"","_id":"cka5ik8e10085nybg8tmzruny","content":"<p>偶然发现 Microsoft E3 账号可以关联自己的域名，正巧自己有域名需要托管，也喜欢 outlook 的风格，就这样进行迁移了。同时自己也有其他服务商的一些邮箱，虽然有的很少，但可能还会有写邮件，也就一并管理下。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"域名邮箱\"><a href=\"#域名邮箱\" class=\"headerlink\" title=\"域名邮箱\"></a>域名邮箱</h2><p>首先明确的是，域名邮箱不考虑自建服务的那种。自建服务一是有一定硬件成本，还会遇到垃圾邮件处理的问题。所以我不考虑这种情况。</p>\n<p>国内的域名邮箱最早出现在腾讯的 QQ 邮箱。操作很简单，就可以在你原有的 QQ 邮箱上面绑定自己的域名，建立域名邮箱。当时很多有域名的人都在 QQ 邮箱上建立。</p>\n<h4 id=\"QQ-域名邮箱\"><a href=\"#QQ-域名邮箱\" class=\"headerlink\" title=\"QQ 域名邮箱\"></a>QQ 域名邮箱</h4><p>QQ 域名邮箱也很有特色，比如它建立的域名邮箱，必须绑定到 QQ 邮箱账号上，相当于原有的 QQ 邮箱多了一个发件和收件人而已。</p>\n<p>由于是直接把域名邮箱绑定到自己的 QQ 邮箱上，所以是用的还是 QQ 邮箱，QQ 邮箱有啥域名邮箱就有，体验还是不错的，功能也很强大。而且支持多个域名邮箱绑定到一个 QQ 邮箱上，这样只需要一个 QQ 邮箱就可以接收发送 N 多域名邮箱邮件。</p>\n<p>缺点是国外不稳定和域名限制。2018年及以前，我在使用，国内的邮件基本上没什么问题，不过国外的一些服务商邮件可能收不到，也可能需要很长时间（几小时甚至一天）。此外貌似是域名需要备案（或者有的域名后缀不识别），反正不是所有的域名都可以绑定的。</p>\n<p><strong>写文章的今天再去查看，发现已经不能创建域名邮箱了，改成了企业邮箱。企业邮箱也有免费版，需要创建企业管理员，我估计建立过程和网易域名邮箱差不多。最终企业邮箱是单独开账号还是绑定现有 QQ 邮箱，不得而知。</strong></p>\n<p>据说腾讯企业邮箱不绑定 QQ 邮箱了，页面风格应该属于腾讯云那种。但是功能还是挺强大的。</p>\n<h4 id=\"网易域名邮箱\"><a href=\"#网易域名邮箱\" class=\"headerlink\" title=\"网易域名邮箱\"></a>网易域名邮箱</h4><p>一次在计划转移域名时候，发现 QQ 域名邮箱不能收国外邮件，就放弃了。后来也反复验证，QQ 域名邮箱接收国外服务商邮件非常不稳定。这就使得我开始转向网易域名邮箱。</p>\n<p>网易的域名邮箱需要单独创建，设立管理员、企业信息等。最后单独建立一个个域名邮箱。每一个域名邮箱也是完全独立的，登录也要走域名邮箱登录页面。</p>\n<p>网易的邮箱果真名不虚传，邮件接收不论国内国外，大部分情况都没什么问题，极个别时候有慢的情况。由于是独立的域名邮箱，所以你创建 10 个域名邮箱，就有 10 个独立账号，真正做到完全独立。网易域名邮箱提供功能上比较少，但好在常用功能都不欠缺。比如我想用的邮件代收功能，它就支持（下文 outlook 域名邮箱就不支持）。</p>\n<p>缺点是由于每个邮箱独立，管理起来可能复杂一点。此外，这也是我见过唯一一个给域名邮箱发广告的服务商…恩，平时经常能收到网易的广告邮件。</p>\n<p>当然如果你有域名，完全可以考虑网易域名邮箱。免费的里面我认为已经非常好用了。</p>\n<p>不过后来我还是迁移走了，主要是更喜欢 outlook 的页面，还有就是网易邮箱邮件代收实在无法接受。</p>\n<h4 id=\"yandex-域名邮箱\"><a href=\"#yandex-域名邮箱\" class=\"headerlink\" title=\"yandex 域名邮箱\"></a>yandex 域名邮箱</h4><p>yandex 是俄罗斯著名的搜索引擎公司，其也提供域名邮箱服务。更准确的说是提供小企业服务。</p>\n<p>账户建立也是需要注册管理员和企业信息，之后可以配置一个个域名邮箱。由于是英文，而且本身是提供小企业多方位服务，所以我觉得增加域名邮箱操作稍微步骤有点多。</p>\n<p>邮件界面倒是简单，不过功能貌似也很少。</p>\n<p>我用的极少，也不确定其能否邮件代收。但常规的 imap /smtp 应该还是提供的。这里还是推荐下它，主要是因为想接收国外邮件，除了网易邮箱外，国外的 outlook / google(G suite) 等都需要付费企业账号，一般人可能搞不到。不过据说有网友说它发信经常失败。</p>\n<h4 id=\"outlook-域名邮箱\"><a href=\"#outlook-域名邮箱\" class=\"headerlink\" title=\"outlook 域名邮箱\"></a>outlook 域名邮箱</h4><p>想在微软下建立域名邮箱，基本上就需要 Microsoft MSDN E3 或 A1 之类的账号。恰巧自己有一个 E3 账号。</p>\n<p>E3 账户支持配置 25 个 office 用户（用户无限，但是邮箱必须依托 office 权限）。每个账户可以配置一个主邮箱，以及多个别名邮箱。多个别名邮箱可以接收邮件，但是无法通过该别名发送邮件。而且通过别名接收的邮件，会直接显示在主邮箱上，一点区分能力都没有。</p>\n<blockquote>\n<p>举个例子：主邮箱 <a href=\"mailto:a@hello.com\" target=\"_blank\" rel=\"noopener\">a@hello.com</a>，别名邮箱 <a href=\"mailto:b@hello.com\" target=\"_blank\" rel=\"noopener\">b@hello.com</a>，发给 <a href=\"mailto:b@hello.com\" target=\"_blank\" rel=\"noopener\">b@hello.com</a> 的邮件直接显示在 <a href=\"mailto:a@hello.com\" target=\"_blank\" rel=\"noopener\">a@hello.com</a> 里，并且收件人就是 <a href=\"mailto:a@hello.com\" target=\"_blank\" rel=\"noopener\">a@hello.com</a>。</p>\n<p>目前我还没发现如何区分是发给 <a href=\"mailto:b@hello.com\" target=\"_blank\" rel=\"noopener\">b@hello.com</a> 的邮件还是直接发给 <a href=\"mailto:a@hello.com\" target=\"_blank\" rel=\"noopener\">a@hello.com</a> 的。</p>\n</blockquote>\n<p>所以如果真的域名邮箱太多的话，单纯接收还好，可以建立一个主邮箱，配置多个别名邮箱。如果真的想区分开进行接收和发送邮件，那么域名邮箱最多只有 25 个。</p>\n<h4 id=\"其他我听说过的域名邮箱\"><a href=\"#其他我听说过的域名邮箱\" class=\"headerlink\" title=\"其他我听说过的域名邮箱\"></a>其他我听说过的域名邮箱</h4><ol>\n<li>Mailgun + 其他邮箱：通过 Mailgun 收邮件自动转发，外加一个正常邮箱配置 SMTP 服务发邮件。这个方法发现 Mailgun 免费版已经不能转发邮件了。如果你只需要转发接收邮件，而不用回复，可以看看国外的域名注册商（当年我记得域名注册商 Godaddy 就有免费的转发邮件功能）。</li>\n<li>mail.ru ：据说还不错，可惜是全俄文，实在接受不了。</li>\n<li>pingly：我测试过，界面非常好，非常简约，简约到都没有设置功能。貌似半年前刚刚支持 SMTP 服务，也有了别名邮箱功能。不过由于太简单了，常用的邮件转发、签名、代收、通讯录啥的都没有。我建议过几年在看看吧。目前好像只能一个账户绑定一个域名。</li>\n<li>zoho：有国内和国外版。据说免费没有 IMAP / POP3，那只能登录页面查邮件了。而且收信貌似也很慢。</li>\n</ol>\n<h2 id=\"邮件的代收\"><a href=\"#邮件的代收\" class=\"headerlink\" title=\"邮件的代收\"></a>邮件的代收</h2><p>邮箱多了，又不可能装 N 多邮箱客户端或登录他们的网站查看，就必须统一管理。常用的方案是邮件转发和邮件代收。</p>\n<p>邮件转发我认为会在原邮箱留下太多痕迹，并且无法做到原路（原邮件地址）回复，感觉不太优雅。不过这种方式对于公司中比如客服之类邮件会比较实用。</p>\n<p>邮件代收等同于邮箱里安装了一个邮箱客户端，通过一个主邮箱去管理多个子邮箱。我更倾向这种方案。好处是大部分邮箱都支持 SMTP+IMAP 方式，在主邮箱里可以发送、删除子邮箱的邮件。</p>\n<p>但是邮件代收，服务商存储你的各个子邮箱账号密码安全性先不考虑之外，仍有不少的坑。下文主要讨论网页版的邮箱情况。</p>\n<h4 id=\"子邮箱被收信\"><a href=\"#子邮箱被收信\" class=\"headerlink\" title=\"子邮箱被收信\"></a>子邮箱被收信</h4><p>要想被别的邮箱或者客户端收信，首先你的邮箱得支持被收信。常见的方式主要有 SMTP+POP、SMTP+IMAP、Exchange。前两个主要是对邮箱信件删除的区别，一个是仅删除本地，一个是删除本地同时也把服务器中的邮件删除。最后一个是微软的协议，能支持日历之类的同步。比如 yahoo 的邮箱，就不支持被收信。</p>\n<p>再次就是国内邮箱的垃圾，比如 QQ、网易、搜狐等，都宣称代收（使用客户端 APP 也是代收行为）是不安全的，所以都搞一个安全码之类的密码。开通安全码要绑定手机或者其他操作，相对多了一大步操作。当然，你使用它们官方指定的客户端 APP 就不需要安全码，算是变相推广客户端 APP。</p>\n<p>所谓安全码数量、停用机制等感觉都很难理解。</p>\n<p>比如 QQ 邮箱可以单独设置独立于 QQ 账号的邮箱登录密码，还可以设置安全码。安全码也不能查询开通了几个，那个还能否用。只是听说修改 QQ 密码（QQ 邮箱登录密码），会导致安全码都失效。<strong>这就是说，安全码泄露了，必须修改 QQ 密码（QQ 邮箱登录密码）才能解决。</strong>那和我直接用 QQ 密码有啥区别么！我能想到的唯一区别就是配置了安全码泄露的是一串无意义密码，没有配置泄露的是你自己配置的密码。对于我这种密码随机生成且不重复没有意义，<strong>当然如果一个人所有账号都是一个密码还真的有效</strong>。</p>\n<p>网易邮箱的安全码相对容易一点，只能生成一个安全码，你必须手动抄下来，在各个地方使用，否则后续只能重置安全码。</p>\n<p>解决了安全码，就可以代收的了么？还不一定。</p>\n<p>目前发现网易是屏蔽 Spark 邮件客户端的，大致是网易觉得一家独大吧，屏蔽一些邮件客户端可以增加自己的客户端安装量。如果你遇到此类问题，可以尝试搜索下，是否别人也遇到了，以及解决方案。</p>\n<blockquote>\n<p>不过域名邮箱，就不用受安全码限制，比如网易域名邮箱，就没有安全码，所以就可以直接登录。</p>\n</blockquote>\n<h4 id=\"主邮箱代收\"><a href=\"#主邮箱代收\" class=\"headerlink\" title=\"主邮箱代收\"></a>主邮箱代收</h4><p>之前曾经短暂用过 QQ 邮箱的代收，感觉还行，没有什么太大问题。</p>\n<p>网易邮箱，不论是 163 / 126 等官方邮箱，还是自己建立的域名邮箱，都可以进行邮件代收，但是我感觉主邮箱同步子邮箱邮件频率很低，感觉最少要 1-2 小时才会同步一次。<strong>最可气的是，它还显示收取中、收取完成。</strong>具体官方邮箱和自己建立的域名邮箱同步频率是否一致也不清楚。反正域名邮箱非常慢，经常收不到邮件，要等很久甚至过几天才会推送过来，更甚至有时候要登录后手动刷新。对于要接收验证码急用的我实在是受不了。</p>\n<p>outlook 也可以代收，但是只限于默认官方的邮箱。<strong>域名邮箱没有此功能。</strong>同步速度非常快，基本上几分钟内都可以收到。目前也是我最爱使用的邮箱。</p>\n<blockquote>\n<p>outlook 代收邮件还有一个趣事。我用它代收 office 365 域名邮箱的邮件，结果提示默认不支持，需要手动配置 SMTP+IMAP 信息才可以。</p>\n</blockquote>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>总之管理好多个邮箱是个困难活，主要是各个服务商对自身的安全性限制比较多，要求安全码之类。同时服务商可能不提供对应的代收等能力，给统一管理造成了一些困难。</p>\n<p>开立自己的域名邮箱，优先推荐腾讯企业邮箱，效果应该还好，功能也算强大。如果遇到收不到国外邮件，可以尝试网易域名邮箱。不过这两个服务商都可能遇到有的冷门域名添加不了的情况，并且国内一般有要求实名等。</p>\n<p>如果非要选用国外的邮箱，可以试试 yandex，虽然有反馈有发信失败，但选用他们家的域名邮箱的人还是挺多的，我觉得质量应该不会太差。</p>\n<p>能有路子找到 Office 365 特殊账号的，强烈推荐直接上 outlook，体验简直飞起。</p>\n<p>G suite 少量用户收费但不太贵（6 美金/用户/月），但是考虑国内网络情况，并不推荐。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>偶然发现 Microsoft E3 账号可以关联自己的域名，正巧自己有域名需要托管，也喜欢 outlook 的风格，就这样进行迁移了。同时自己也有其他服务商的一些邮箱，虽然有的很少，但可能还会有写邮件，也就一并管理下。</p>","more":"<h2 id=\"域名邮箱\"><a href=\"#域名邮箱\" class=\"headerlink\" title=\"域名邮箱\"></a>域名邮箱</h2><p>首先明确的是，域名邮箱不考虑自建服务的那种。自建服务一是有一定硬件成本，还会遇到垃圾邮件处理的问题。所以我不考虑这种情况。</p>\n<p>国内的域名邮箱最早出现在腾讯的 QQ 邮箱。操作很简单，就可以在你原有的 QQ 邮箱上面绑定自己的域名，建立域名邮箱。当时很多有域名的人都在 QQ 邮箱上建立。</p>\n<h4 id=\"QQ-域名邮箱\"><a href=\"#QQ-域名邮箱\" class=\"headerlink\" title=\"QQ 域名邮箱\"></a>QQ 域名邮箱</h4><p>QQ 域名邮箱也很有特色，比如它建立的域名邮箱，必须绑定到 QQ 邮箱账号上，相当于原有的 QQ 邮箱多了一个发件和收件人而已。</p>\n<p>由于是直接把域名邮箱绑定到自己的 QQ 邮箱上，所以是用的还是 QQ 邮箱，QQ 邮箱有啥域名邮箱就有，体验还是不错的，功能也很强大。而且支持多个域名邮箱绑定到一个 QQ 邮箱上，这样只需要一个 QQ 邮箱就可以接收发送 N 多域名邮箱邮件。</p>\n<p>缺点是国外不稳定和域名限制。2018年及以前，我在使用，国内的邮件基本上没什么问题，不过国外的一些服务商邮件可能收不到，也可能需要很长时间（几小时甚至一天）。此外貌似是域名需要备案（或者有的域名后缀不识别），反正不是所有的域名都可以绑定的。</p>\n<p><strong>写文章的今天再去查看，发现已经不能创建域名邮箱了，改成了企业邮箱。企业邮箱也有免费版，需要创建企业管理员，我估计建立过程和网易域名邮箱差不多。最终企业邮箱是单独开账号还是绑定现有 QQ 邮箱，不得而知。</strong></p>\n<p>据说腾讯企业邮箱不绑定 QQ 邮箱了，页面风格应该属于腾讯云那种。但是功能还是挺强大的。</p>\n<h4 id=\"网易域名邮箱\"><a href=\"#网易域名邮箱\" class=\"headerlink\" title=\"网易域名邮箱\"></a>网易域名邮箱</h4><p>一次在计划转移域名时候，发现 QQ 域名邮箱不能收国外邮件，就放弃了。后来也反复验证，QQ 域名邮箱接收国外服务商邮件非常不稳定。这就使得我开始转向网易域名邮箱。</p>\n<p>网易的域名邮箱需要单独创建，设立管理员、企业信息等。最后单独建立一个个域名邮箱。每一个域名邮箱也是完全独立的，登录也要走域名邮箱登录页面。</p>\n<p>网易的邮箱果真名不虚传，邮件接收不论国内国外，大部分情况都没什么问题，极个别时候有慢的情况。由于是独立的域名邮箱，所以你创建 10 个域名邮箱，就有 10 个独立账号，真正做到完全独立。网易域名邮箱提供功能上比较少，但好在常用功能都不欠缺。比如我想用的邮件代收功能，它就支持（下文 outlook 域名邮箱就不支持）。</p>\n<p>缺点是由于每个邮箱独立，管理起来可能复杂一点。此外，这也是我见过唯一一个给域名邮箱发广告的服务商…恩，平时经常能收到网易的广告邮件。</p>\n<p>当然如果你有域名，完全可以考虑网易域名邮箱。免费的里面我认为已经非常好用了。</p>\n<p>不过后来我还是迁移走了，主要是更喜欢 outlook 的页面，还有就是网易邮箱邮件代收实在无法接受。</p>\n<h4 id=\"yandex-域名邮箱\"><a href=\"#yandex-域名邮箱\" class=\"headerlink\" title=\"yandex 域名邮箱\"></a>yandex 域名邮箱</h4><p>yandex 是俄罗斯著名的搜索引擎公司，其也提供域名邮箱服务。更准确的说是提供小企业服务。</p>\n<p>账户建立也是需要注册管理员和企业信息，之后可以配置一个个域名邮箱。由于是英文，而且本身是提供小企业多方位服务，所以我觉得增加域名邮箱操作稍微步骤有点多。</p>\n<p>邮件界面倒是简单，不过功能貌似也很少。</p>\n<p>我用的极少，也不确定其能否邮件代收。但常规的 imap /smtp 应该还是提供的。这里还是推荐下它，主要是因为想接收国外邮件，除了网易邮箱外，国外的 outlook / google(G suite) 等都需要付费企业账号，一般人可能搞不到。不过据说有网友说它发信经常失败。</p>\n<h4 id=\"outlook-域名邮箱\"><a href=\"#outlook-域名邮箱\" class=\"headerlink\" title=\"outlook 域名邮箱\"></a>outlook 域名邮箱</h4><p>想在微软下建立域名邮箱，基本上就需要 Microsoft MSDN E3 或 A1 之类的账号。恰巧自己有一个 E3 账号。</p>\n<p>E3 账户支持配置 25 个 office 用户（用户无限，但是邮箱必须依托 office 权限）。每个账户可以配置一个主邮箱，以及多个别名邮箱。多个别名邮箱可以接收邮件，但是无法通过该别名发送邮件。而且通过别名接收的邮件，会直接显示在主邮箱上，一点区分能力都没有。</p>\n<blockquote>\n<p>举个例子：主邮箱 <a href=\"mailto:a@hello.com\" target=\"_blank\" rel=\"noopener\">a@hello.com</a>，别名邮箱 <a href=\"mailto:b@hello.com\" target=\"_blank\" rel=\"noopener\">b@hello.com</a>，发给 <a href=\"mailto:b@hello.com\" target=\"_blank\" rel=\"noopener\">b@hello.com</a> 的邮件直接显示在 <a href=\"mailto:a@hello.com\" target=\"_blank\" rel=\"noopener\">a@hello.com</a> 里，并且收件人就是 <a href=\"mailto:a@hello.com\" target=\"_blank\" rel=\"noopener\">a@hello.com</a>。</p>\n<p>目前我还没发现如何区分是发给 <a href=\"mailto:b@hello.com\" target=\"_blank\" rel=\"noopener\">b@hello.com</a> 的邮件还是直接发给 <a href=\"mailto:a@hello.com\" target=\"_blank\" rel=\"noopener\">a@hello.com</a> 的。</p>\n</blockquote>\n<p>所以如果真的域名邮箱太多的话，单纯接收还好，可以建立一个主邮箱，配置多个别名邮箱。如果真的想区分开进行接收和发送邮件，那么域名邮箱最多只有 25 个。</p>\n<h4 id=\"其他我听说过的域名邮箱\"><a href=\"#其他我听说过的域名邮箱\" class=\"headerlink\" title=\"其他我听说过的域名邮箱\"></a>其他我听说过的域名邮箱</h4><ol>\n<li>Mailgun + 其他邮箱：通过 Mailgun 收邮件自动转发，外加一个正常邮箱配置 SMTP 服务发邮件。这个方法发现 Mailgun 免费版已经不能转发邮件了。如果你只需要转发接收邮件，而不用回复，可以看看国外的域名注册商（当年我记得域名注册商 Godaddy 就有免费的转发邮件功能）。</li>\n<li>mail.ru ：据说还不错，可惜是全俄文，实在接受不了。</li>\n<li>pingly：我测试过，界面非常好，非常简约，简约到都没有设置功能。貌似半年前刚刚支持 SMTP 服务，也有了别名邮箱功能。不过由于太简单了，常用的邮件转发、签名、代收、通讯录啥的都没有。我建议过几年在看看吧。目前好像只能一个账户绑定一个域名。</li>\n<li>zoho：有国内和国外版。据说免费没有 IMAP / POP3，那只能登录页面查邮件了。而且收信貌似也很慢。</li>\n</ol>\n<h2 id=\"邮件的代收\"><a href=\"#邮件的代收\" class=\"headerlink\" title=\"邮件的代收\"></a>邮件的代收</h2><p>邮箱多了，又不可能装 N 多邮箱客户端或登录他们的网站查看，就必须统一管理。常用的方案是邮件转发和邮件代收。</p>\n<p>邮件转发我认为会在原邮箱留下太多痕迹，并且无法做到原路（原邮件地址）回复，感觉不太优雅。不过这种方式对于公司中比如客服之类邮件会比较实用。</p>\n<p>邮件代收等同于邮箱里安装了一个邮箱客户端，通过一个主邮箱去管理多个子邮箱。我更倾向这种方案。好处是大部分邮箱都支持 SMTP+IMAP 方式，在主邮箱里可以发送、删除子邮箱的邮件。</p>\n<p>但是邮件代收，服务商存储你的各个子邮箱账号密码安全性先不考虑之外，仍有不少的坑。下文主要讨论网页版的邮箱情况。</p>\n<h4 id=\"子邮箱被收信\"><a href=\"#子邮箱被收信\" class=\"headerlink\" title=\"子邮箱被收信\"></a>子邮箱被收信</h4><p>要想被别的邮箱或者客户端收信，首先你的邮箱得支持被收信。常见的方式主要有 SMTP+POP、SMTP+IMAP、Exchange。前两个主要是对邮箱信件删除的区别，一个是仅删除本地，一个是删除本地同时也把服务器中的邮件删除。最后一个是微软的协议，能支持日历之类的同步。比如 yahoo 的邮箱，就不支持被收信。</p>\n<p>再次就是国内邮箱的垃圾，比如 QQ、网易、搜狐等，都宣称代收（使用客户端 APP 也是代收行为）是不安全的，所以都搞一个安全码之类的密码。开通安全码要绑定手机或者其他操作，相对多了一大步操作。当然，你使用它们官方指定的客户端 APP 就不需要安全码，算是变相推广客户端 APP。</p>\n<p>所谓安全码数量、停用机制等感觉都很难理解。</p>\n<p>比如 QQ 邮箱可以单独设置独立于 QQ 账号的邮箱登录密码，还可以设置安全码。安全码也不能查询开通了几个，那个还能否用。只是听说修改 QQ 密码（QQ 邮箱登录密码），会导致安全码都失效。<strong>这就是说，安全码泄露了，必须修改 QQ 密码（QQ 邮箱登录密码）才能解决。</strong>那和我直接用 QQ 密码有啥区别么！我能想到的唯一区别就是配置了安全码泄露的是一串无意义密码，没有配置泄露的是你自己配置的密码。对于我这种密码随机生成且不重复没有意义，<strong>当然如果一个人所有账号都是一个密码还真的有效</strong>。</p>\n<p>网易邮箱的安全码相对容易一点，只能生成一个安全码，你必须手动抄下来，在各个地方使用，否则后续只能重置安全码。</p>\n<p>解决了安全码，就可以代收的了么？还不一定。</p>\n<p>目前发现网易是屏蔽 Spark 邮件客户端的，大致是网易觉得一家独大吧，屏蔽一些邮件客户端可以增加自己的客户端安装量。如果你遇到此类问题，可以尝试搜索下，是否别人也遇到了，以及解决方案。</p>\n<blockquote>\n<p>不过域名邮箱，就不用受安全码限制，比如网易域名邮箱，就没有安全码，所以就可以直接登录。</p>\n</blockquote>\n<h4 id=\"主邮箱代收\"><a href=\"#主邮箱代收\" class=\"headerlink\" title=\"主邮箱代收\"></a>主邮箱代收</h4><p>之前曾经短暂用过 QQ 邮箱的代收，感觉还行，没有什么太大问题。</p>\n<p>网易邮箱，不论是 163 / 126 等官方邮箱，还是自己建立的域名邮箱，都可以进行邮件代收，但是我感觉主邮箱同步子邮箱邮件频率很低，感觉最少要 1-2 小时才会同步一次。<strong>最可气的是，它还显示收取中、收取完成。</strong>具体官方邮箱和自己建立的域名邮箱同步频率是否一致也不清楚。反正域名邮箱非常慢，经常收不到邮件，要等很久甚至过几天才会推送过来，更甚至有时候要登录后手动刷新。对于要接收验证码急用的我实在是受不了。</p>\n<p>outlook 也可以代收，但是只限于默认官方的邮箱。<strong>域名邮箱没有此功能。</strong>同步速度非常快，基本上几分钟内都可以收到。目前也是我最爱使用的邮箱。</p>\n<blockquote>\n<p>outlook 代收邮件还有一个趣事。我用它代收 office 365 域名邮箱的邮件，结果提示默认不支持，需要手动配置 SMTP+IMAP 信息才可以。</p>\n</blockquote>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>总之管理好多个邮箱是个困难活，主要是各个服务商对自身的安全性限制比较多，要求安全码之类。同时服务商可能不提供对应的代收等能力，给统一管理造成了一些困难。</p>\n<p>开立自己的域名邮箱，优先推荐腾讯企业邮箱，效果应该还好，功能也算强大。如果遇到收不到国外邮件，可以尝试网易域名邮箱。不过这两个服务商都可能遇到有的冷门域名添加不了的情况，并且国内一般有要求实名等。</p>\n<p>如果非要选用国外的邮箱，可以试试 yandex，虽然有反馈有发信失败，但选用他们家的域名邮箱的人还是挺多的，我觉得质量应该不会太差。</p>\n<p>能有路子找到 Office 365 特殊账号的，强烈推荐直接上 outlook，体验简直飞起。</p>\n<p>G suite 少量用户收费但不太贵（6 美金/用户/月），但是考虑国内网络情况，并不推荐。</p>\n<p>–END–</p>"},{"layout":"post","title":"邮箱客户端","date":"2020-03-05T00:40:00.000Z","_content":"\n上文讲述了多个邮箱如何管理邮件，以及自己的域名邮箱绑定的一些思路。即便使用了邮件代收，那么一个人可能还是有多个邮箱。\n\n比如我，除了自己的域名邮箱外，平时还要关注 outlook 邮箱（关联了很多小邮箱），以及一个工作邮箱。\n\n上班的时候，总不能一直开着网页端吧？此时就需要一个靠谱的邮箱客户端了。\n\n<!-- more -->\n\n邮箱客户端，我主要看中的是其常规功能，常用的功能都有没有，到底好不好用，以及好不好看。对于通讯录我的要求比较低，经常是换电脑后每次手动粘贴收件人，只有个别常联系的同事才存放通讯录。\n\n系统支持上，部分客户端都是支持 windows MacOS 多系统的。\n\n#### Outlook\n\n![outlook](https://cdn0.yukapril.com/2020-03-04-mail-outlook1.png-wm.black)\n\n我最喜欢的客户端。主要是规矩且稳定。而且对 exchange 的支持感觉最好。它支持我最爱用的打标签，而且更换设备也能同步。目前来看，只有 Outlook 一款软件可以做到。\n\n工作有很多邮件需要稍后处理，我可以通过颜色标签进行区分，查找归类也非常便利。完成后再清除标签。最关键就是标签是同步的，我不必担心更换机器而找不到邮件。此外针对某类工作的邮件，建立单独的文件夹，使用各种规则进行来信归类，让每日的邮件梳理的井井有条。\n\n还有就是“会议”功能，很多年前没有现代钉钉企业微信等软件时候，开会用“会议”，开会前会有提醒，非常实用。不过这几年由于钉钉和企业微信兴起，一般都是聊天工具里面通知了。\n\n由于我几乎从不使用日历，也很少用 TO-DO 类软件，所以 outlook 的一些特色感受不到了。不过 Outlook 就是这种很规矩，没有太多特色，但是很稳定的软件。你挑不出来它什么毛病，但又没有什么特别突出的特色来推荐它。唯一让我气愤的是，**MacOS 版本不支持定时发送，但 Windows 版本就支持**，瞬间感觉被歧视了。\n\n费用吗，需要专业版 office 365 或者 office 买断版本才行。最便宜的方案就是 office 365 个人购买，或者家庭购买多人使用平摊费用。平摊费用来讲，一年 office 365 大概需要 80 元不到。\n\n#### Foxmail\n\n![Foxmail](https://cdn0.yukapril.com/2020-03-04-mail-foxmail1.png-wm.black)\n\n国内肯定很多人用，我周边也是很多同事在用。支持 exchange，但是却需要手动配置一个服务器地址。我发现国外的客户端都不要配置这个的。\n\n简洁、轻量是他的特点。好处是竟然支持 exchange 的邮件分类。服务器配置的邮件分类，除了 Outlook 只有它能识别。还有就是“会议”，邮件回执，它都支持。\n\n本来一开始我也是用 Foxmail 的，但是邮件如果特别多之后，之前的版本就会变卡。不知道现在的版本改进了没有。此外它也是很少才更新，一般只适配新系统而已。\n\n可惜的是，它的标签（仅 windows 版本才有）、星标功能，是本地的，换机器后就不显示了。\n\n如果你只有一台机器用，并且不太需要同步标签之类，轻度使用，Foxmail 是个很好的选择。\n\n#### 网易邮箱大师\n\n![网易邮箱大师](https://cdn0.yukapril.com/2020-03-04-mail-netease1.png-wm.black)\n\n![网易邮箱大师](https://cdn0.yukapril.com/2020-03-04-mail-netease2.png-wm.black)\n\n我估计也应该有部分用户在用。支持 exchange，同样的需要配置一个服务器地址。好奇怪为啥国内客户端都要配置服务器地址。\n\n整体功能也比较简单，带有星标功能，更换设备不确定能否同步。特色是第一个提出了群发单显（群发邮件时收件人只能看到自己），不过好像 Foxmail windows 版也支持了。网易邮箱大师定时发送、回执、“会议”等功能也支持。可惜 exchange 不支持邮件分类。默认带有发件模板，对于刚入职的新人可能比较合适。\n\n#### Spark (MacOS)\n\n![Spark](https://cdn0.yukapril.com/2020-03-04-mail-spark1.png-wm.black)\n\n![Spark](https://cdn0.yukapril.com/2020-03-04-mail-spark2.png-wm.black)\n\n界面美观，功能一应俱全，也兼容 exchange 协议，关键是免费。还支持集成其他第三方服务，反正各个方面都很优秀。\n\n此外，它官方宣称支持 yahoo。yahoo 是出了名的不支持客户端的。\n\nSpark 支持邮箱别名（替身邮箱），但需要服务器支持。说白了就是一个收件地址，对应多个发件地址。不过不知道是啥原因，系统显示发送成功了，但是对方却收不到邮件。\n\n缺点是不支持邮件分类规则。不过 exchange 邮箱服务器会进行分类。还有管理邮箱方式不太习惯，别人大部分都是按照邮箱分类，它是按照功能分类（收件箱、发件箱之类），这样会导致不在收件箱里面的邮件可能注意不到。还有就是缺少打标签的功能，只能单独建立文件夹，把相应的邮件拖到对应文件夹里。或者采用官方的方案，选择邮件置顶。\n\n> Spark 提供的置顶功能，不确定是否能多客户端同步。\n\n#### Airmail (MacOS)\n\n![Airmail](https://cdn0.yukapril.com/2020-03-04-mail-Airmail1.png-wm.black)\n\n![Airmail](https://cdn0.yukapril.com/2020-03-04-mail-Airmail2.png-wm.black)\n\n页面美观，也很棒的软件。感觉比 Spark 还要强大一些。按照邮箱进行分类查阅，比较顺手。默认建立了一系列彩色文件夹，让人耳目一新。它假装支持标签，实际还是建立文件夹。但如果一封邮件有两个标签咋办？比较鸡贼的是他们把邮件复制了两封，分别放到两个文件夹下！所以好处是换台电脑也能识别，就算是换个软件都能识别。\n\n此外，它也官方宣称支持 yahoo。\n\n同样地，他也支持邮箱别名，而且我测试是成功的。但发送人不是别名是原名啊。还不确定原因所在。\n\n> Airmail 还支持邮件星标，这个不确定能否多客户端同步。\n\n问题上，就是不支持邮件分类。还有就是不知道是分词 bug 还是咋样，测试搜索中文内容时候，**个别时候搜索查不到**。同样的问题在 Outlook 也有时候会遇到。但其他客户端还没发现。还有一个小问题，就是不能查看邮件原始信息。虽然这个功能极少被用到。\n\n这么好的软件，也是要收费的，而且感觉也挺贵的。当前是 73 元/年。\n\n##### 其他\n\n还有一些小众一点的客户端，很多都体验过，但是都有些欠缺。\n\n* YoMail：以前体验过，支持各大系统。我记得可以支持各种邮箱，包括 exchange 协议。边栏还可以支持微信等网页工具。但是由于用的 electron 或类似 H5 的页面解决方案，导致切换页面等会丢失上一次的滚动位置。目前据说团队解散。\n* WPS Mail：好像只有 windows 版本，小巧美观，功能不多。但当时只支持 SMTP / POP3 / IMAP，不支持 exchange，我就放弃了。\n* Thunderbird：火狐公司的邮件客户端，上古时代产物，可以看看官网的图。感觉不太适应操作而放弃。\n* DreamMail(梦想快车)：只有 windows 版，很多年前的软件，最近一两年又开始更新了。这个没用过。\n* Polymail：太贵了，一个月 50+ 人民币都不止。我都没敢体验。不过卖这么贵，应该不会太差吧。\n* Mail(MacOS)：一开始 Mac 没有安装额外客户端之前就用的系统自带的，感觉稳定性不够好，如果工作用，怕操作错误出错。\n\n## 小结\n\n如果你需要稳定、同步各种操作的话，就只能选择 Outlook 了。\n\n主要使用国内邮箱的话，QQ 邮箱就用 Foxmail，网易邮箱就用网易邮箱大师。这样能省去配置邮箱安全码之类的操作。\n\n为了轻便简洁，就选择 Foxmail。\n\nmac下，如果希望好看，功能也强大一点，可以选择 Spark 或 Airmail。\n\n如果平时也没有邮件需求，每月也用不了几次的话，可以考虑系统自带邮件，或者干脆定时去邮箱中看看。\n\n我一般都是手机端安装 Outlook，手表接收推送。每次收到邮件都是第一时间收到推送。如果需要查阅，则通过电脑客户端或者网页进行查阅。平时非上班时间，电脑的客户端也不启动的。\n\n其实还是电脑配置低，能省点内存就省一点...\n\n--END--","source":"_posts/2020/2020-03-04-mail-client.md","raw":"---\nlayout: post\ntitle: 邮箱客户端\ndate: 2020-03-05 00:40:00 GMT+0800\ncategories: [杂谈]\ntags:  [email, 邮箱]\n---\n\n上文讲述了多个邮箱如何管理邮件，以及自己的域名邮箱绑定的一些思路。即便使用了邮件代收，那么一个人可能还是有多个邮箱。\n\n比如我，除了自己的域名邮箱外，平时还要关注 outlook 邮箱（关联了很多小邮箱），以及一个工作邮箱。\n\n上班的时候，总不能一直开着网页端吧？此时就需要一个靠谱的邮箱客户端了。\n\n<!-- more -->\n\n邮箱客户端，我主要看中的是其常规功能，常用的功能都有没有，到底好不好用，以及好不好看。对于通讯录我的要求比较低，经常是换电脑后每次手动粘贴收件人，只有个别常联系的同事才存放通讯录。\n\n系统支持上，部分客户端都是支持 windows MacOS 多系统的。\n\n#### Outlook\n\n![outlook](https://cdn0.yukapril.com/2020-03-04-mail-outlook1.png-wm.black)\n\n我最喜欢的客户端。主要是规矩且稳定。而且对 exchange 的支持感觉最好。它支持我最爱用的打标签，而且更换设备也能同步。目前来看，只有 Outlook 一款软件可以做到。\n\n工作有很多邮件需要稍后处理，我可以通过颜色标签进行区分，查找归类也非常便利。完成后再清除标签。最关键就是标签是同步的，我不必担心更换机器而找不到邮件。此外针对某类工作的邮件，建立单独的文件夹，使用各种规则进行来信归类，让每日的邮件梳理的井井有条。\n\n还有就是“会议”功能，很多年前没有现代钉钉企业微信等软件时候，开会用“会议”，开会前会有提醒，非常实用。不过这几年由于钉钉和企业微信兴起，一般都是聊天工具里面通知了。\n\n由于我几乎从不使用日历，也很少用 TO-DO 类软件，所以 outlook 的一些特色感受不到了。不过 Outlook 就是这种很规矩，没有太多特色，但是很稳定的软件。你挑不出来它什么毛病，但又没有什么特别突出的特色来推荐它。唯一让我气愤的是，**MacOS 版本不支持定时发送，但 Windows 版本就支持**，瞬间感觉被歧视了。\n\n费用吗，需要专业版 office 365 或者 office 买断版本才行。最便宜的方案就是 office 365 个人购买，或者家庭购买多人使用平摊费用。平摊费用来讲，一年 office 365 大概需要 80 元不到。\n\n#### Foxmail\n\n![Foxmail](https://cdn0.yukapril.com/2020-03-04-mail-foxmail1.png-wm.black)\n\n国内肯定很多人用，我周边也是很多同事在用。支持 exchange，但是却需要手动配置一个服务器地址。我发现国外的客户端都不要配置这个的。\n\n简洁、轻量是他的特点。好处是竟然支持 exchange 的邮件分类。服务器配置的邮件分类，除了 Outlook 只有它能识别。还有就是“会议”，邮件回执，它都支持。\n\n本来一开始我也是用 Foxmail 的，但是邮件如果特别多之后，之前的版本就会变卡。不知道现在的版本改进了没有。此外它也是很少才更新，一般只适配新系统而已。\n\n可惜的是，它的标签（仅 windows 版本才有）、星标功能，是本地的，换机器后就不显示了。\n\n如果你只有一台机器用，并且不太需要同步标签之类，轻度使用，Foxmail 是个很好的选择。\n\n#### 网易邮箱大师\n\n![网易邮箱大师](https://cdn0.yukapril.com/2020-03-04-mail-netease1.png-wm.black)\n\n![网易邮箱大师](https://cdn0.yukapril.com/2020-03-04-mail-netease2.png-wm.black)\n\n我估计也应该有部分用户在用。支持 exchange，同样的需要配置一个服务器地址。好奇怪为啥国内客户端都要配置服务器地址。\n\n整体功能也比较简单，带有星标功能，更换设备不确定能否同步。特色是第一个提出了群发单显（群发邮件时收件人只能看到自己），不过好像 Foxmail windows 版也支持了。网易邮箱大师定时发送、回执、“会议”等功能也支持。可惜 exchange 不支持邮件分类。默认带有发件模板，对于刚入职的新人可能比较合适。\n\n#### Spark (MacOS)\n\n![Spark](https://cdn0.yukapril.com/2020-03-04-mail-spark1.png-wm.black)\n\n![Spark](https://cdn0.yukapril.com/2020-03-04-mail-spark2.png-wm.black)\n\n界面美观，功能一应俱全，也兼容 exchange 协议，关键是免费。还支持集成其他第三方服务，反正各个方面都很优秀。\n\n此外，它官方宣称支持 yahoo。yahoo 是出了名的不支持客户端的。\n\nSpark 支持邮箱别名（替身邮箱），但需要服务器支持。说白了就是一个收件地址，对应多个发件地址。不过不知道是啥原因，系统显示发送成功了，但是对方却收不到邮件。\n\n缺点是不支持邮件分类规则。不过 exchange 邮箱服务器会进行分类。还有管理邮箱方式不太习惯，别人大部分都是按照邮箱分类，它是按照功能分类（收件箱、发件箱之类），这样会导致不在收件箱里面的邮件可能注意不到。还有就是缺少打标签的功能，只能单独建立文件夹，把相应的邮件拖到对应文件夹里。或者采用官方的方案，选择邮件置顶。\n\n> Spark 提供的置顶功能，不确定是否能多客户端同步。\n\n#### Airmail (MacOS)\n\n![Airmail](https://cdn0.yukapril.com/2020-03-04-mail-Airmail1.png-wm.black)\n\n![Airmail](https://cdn0.yukapril.com/2020-03-04-mail-Airmail2.png-wm.black)\n\n页面美观，也很棒的软件。感觉比 Spark 还要强大一些。按照邮箱进行分类查阅，比较顺手。默认建立了一系列彩色文件夹，让人耳目一新。它假装支持标签，实际还是建立文件夹。但如果一封邮件有两个标签咋办？比较鸡贼的是他们把邮件复制了两封，分别放到两个文件夹下！所以好处是换台电脑也能识别，就算是换个软件都能识别。\n\n此外，它也官方宣称支持 yahoo。\n\n同样地，他也支持邮箱别名，而且我测试是成功的。但发送人不是别名是原名啊。还不确定原因所在。\n\n> Airmail 还支持邮件星标，这个不确定能否多客户端同步。\n\n问题上，就是不支持邮件分类。还有就是不知道是分词 bug 还是咋样，测试搜索中文内容时候，**个别时候搜索查不到**。同样的问题在 Outlook 也有时候会遇到。但其他客户端还没发现。还有一个小问题，就是不能查看邮件原始信息。虽然这个功能极少被用到。\n\n这么好的软件，也是要收费的，而且感觉也挺贵的。当前是 73 元/年。\n\n##### 其他\n\n还有一些小众一点的客户端，很多都体验过，但是都有些欠缺。\n\n* YoMail：以前体验过，支持各大系统。我记得可以支持各种邮箱，包括 exchange 协议。边栏还可以支持微信等网页工具。但是由于用的 electron 或类似 H5 的页面解决方案，导致切换页面等会丢失上一次的滚动位置。目前据说团队解散。\n* WPS Mail：好像只有 windows 版本，小巧美观，功能不多。但当时只支持 SMTP / POP3 / IMAP，不支持 exchange，我就放弃了。\n* Thunderbird：火狐公司的邮件客户端，上古时代产物，可以看看官网的图。感觉不太适应操作而放弃。\n* DreamMail(梦想快车)：只有 windows 版，很多年前的软件，最近一两年又开始更新了。这个没用过。\n* Polymail：太贵了，一个月 50+ 人民币都不止。我都没敢体验。不过卖这么贵，应该不会太差吧。\n* Mail(MacOS)：一开始 Mac 没有安装额外客户端之前就用的系统自带的，感觉稳定性不够好，如果工作用，怕操作错误出错。\n\n## 小结\n\n如果你需要稳定、同步各种操作的话，就只能选择 Outlook 了。\n\n主要使用国内邮箱的话，QQ 邮箱就用 Foxmail，网易邮箱就用网易邮箱大师。这样能省去配置邮箱安全码之类的操作。\n\n为了轻便简洁，就选择 Foxmail。\n\nmac下，如果希望好看，功能也强大一点，可以选择 Spark 或 Airmail。\n\n如果平时也没有邮件需求，每月也用不了几次的话，可以考虑系统自带邮件，或者干脆定时去邮箱中看看。\n\n我一般都是手机端安装 Outlook，手表接收推送。每次收到邮件都是第一时间收到推送。如果需要查阅，则通过电脑客户端或者网页进行查阅。平时非上班时间，电脑的客户端也不启动的。\n\n其实还是电脑配置低，能省点内存就省一点...\n\n--END--","slug":"2020-2020-03-04-mail-client","published":1,"updated":"2020-03-04T16:39:28.188Z","comments":1,"photos":[],"link":"","_id":"cka5ik8e20087nybg6fqavlk5","content":"<p>上文讲述了多个邮箱如何管理邮件，以及自己的域名邮箱绑定的一些思路。即便使用了邮件代收，那么一个人可能还是有多个邮箱。</p>\n<p>比如我，除了自己的域名邮箱外，平时还要关注 outlook 邮箱（关联了很多小邮箱），以及一个工作邮箱。</p>\n<p>上班的时候，总不能一直开着网页端吧？此时就需要一个靠谱的邮箱客户端了。</p>\n<a id=\"more\"></a>\n\n<p>邮箱客户端，我主要看中的是其常规功能，常用的功能都有没有，到底好不好用，以及好不好看。对于通讯录我的要求比较低，经常是换电脑后每次手动粘贴收件人，只有个别常联系的同事才存放通讯录。</p>\n<p>系统支持上，部分客户端都是支持 windows MacOS 多系统的。</p>\n<h4 id=\"Outlook\"><a href=\"#Outlook\" class=\"headerlink\" title=\"Outlook\"></a>Outlook</h4><p><img src=\"https://cdn0.yukapril.com/2020-03-04-mail-outlook1.png-wm.black\" alt=\"outlook\"></p>\n<p>我最喜欢的客户端。主要是规矩且稳定。而且对 exchange 的支持感觉最好。它支持我最爱用的打标签，而且更换设备也能同步。目前来看，只有 Outlook 一款软件可以做到。</p>\n<p>工作有很多邮件需要稍后处理，我可以通过颜色标签进行区分，查找归类也非常便利。完成后再清除标签。最关键就是标签是同步的，我不必担心更换机器而找不到邮件。此外针对某类工作的邮件，建立单独的文件夹，使用各种规则进行来信归类，让每日的邮件梳理的井井有条。</p>\n<p>还有就是“会议”功能，很多年前没有现代钉钉企业微信等软件时候，开会用“会议”，开会前会有提醒，非常实用。不过这几年由于钉钉和企业微信兴起，一般都是聊天工具里面通知了。</p>\n<p>由于我几乎从不使用日历，也很少用 TO-DO 类软件，所以 outlook 的一些特色感受不到了。不过 Outlook 就是这种很规矩，没有太多特色，但是很稳定的软件。你挑不出来它什么毛病，但又没有什么特别突出的特色来推荐它。唯一让我气愤的是，<strong>MacOS 版本不支持定时发送，但 Windows 版本就支持</strong>，瞬间感觉被歧视了。</p>\n<p>费用吗，需要专业版 office 365 或者 office 买断版本才行。最便宜的方案就是 office 365 个人购买，或者家庭购买多人使用平摊费用。平摊费用来讲，一年 office 365 大概需要 80 元不到。</p>\n<h4 id=\"Foxmail\"><a href=\"#Foxmail\" class=\"headerlink\" title=\"Foxmail\"></a>Foxmail</h4><p><img src=\"https://cdn0.yukapril.com/2020-03-04-mail-foxmail1.png-wm.black\" alt=\"Foxmail\"></p>\n<p>国内肯定很多人用，我周边也是很多同事在用。支持 exchange，但是却需要手动配置一个服务器地址。我发现国外的客户端都不要配置这个的。</p>\n<p>简洁、轻量是他的特点。好处是竟然支持 exchange 的邮件分类。服务器配置的邮件分类，除了 Outlook 只有它能识别。还有就是“会议”，邮件回执，它都支持。</p>\n<p>本来一开始我也是用 Foxmail 的，但是邮件如果特别多之后，之前的版本就会变卡。不知道现在的版本改进了没有。此外它也是很少才更新，一般只适配新系统而已。</p>\n<p>可惜的是，它的标签（仅 windows 版本才有）、星标功能，是本地的，换机器后就不显示了。</p>\n<p>如果你只有一台机器用，并且不太需要同步标签之类，轻度使用，Foxmail 是个很好的选择。</p>\n<h4 id=\"网易邮箱大师\"><a href=\"#网易邮箱大师\" class=\"headerlink\" title=\"网易邮箱大师\"></a>网易邮箱大师</h4><p><img src=\"https://cdn0.yukapril.com/2020-03-04-mail-netease1.png-wm.black\" alt=\"网易邮箱大师\"></p>\n<p><img src=\"https://cdn0.yukapril.com/2020-03-04-mail-netease2.png-wm.black\" alt=\"网易邮箱大师\"></p>\n<p>我估计也应该有部分用户在用。支持 exchange，同样的需要配置一个服务器地址。好奇怪为啥国内客户端都要配置服务器地址。</p>\n<p>整体功能也比较简单，带有星标功能，更换设备不确定能否同步。特色是第一个提出了群发单显（群发邮件时收件人只能看到自己），不过好像 Foxmail windows 版也支持了。网易邮箱大师定时发送、回执、“会议”等功能也支持。可惜 exchange 不支持邮件分类。默认带有发件模板，对于刚入职的新人可能比较合适。</p>\n<h4 id=\"Spark-MacOS\"><a href=\"#Spark-MacOS\" class=\"headerlink\" title=\"Spark (MacOS)\"></a>Spark (MacOS)</h4><p><img src=\"https://cdn0.yukapril.com/2020-03-04-mail-spark1.png-wm.black\" alt=\"Spark\"></p>\n<p><img src=\"https://cdn0.yukapril.com/2020-03-04-mail-spark2.png-wm.black\" alt=\"Spark\"></p>\n<p>界面美观，功能一应俱全，也兼容 exchange 协议，关键是免费。还支持集成其他第三方服务，反正各个方面都很优秀。</p>\n<p>此外，它官方宣称支持 yahoo。yahoo 是出了名的不支持客户端的。</p>\n<p>Spark 支持邮箱别名（替身邮箱），但需要服务器支持。说白了就是一个收件地址，对应多个发件地址。不过不知道是啥原因，系统显示发送成功了，但是对方却收不到邮件。</p>\n<p>缺点是不支持邮件分类规则。不过 exchange 邮箱服务器会进行分类。还有管理邮箱方式不太习惯，别人大部分都是按照邮箱分类，它是按照功能分类（收件箱、发件箱之类），这样会导致不在收件箱里面的邮件可能注意不到。还有就是缺少打标签的功能，只能单独建立文件夹，把相应的邮件拖到对应文件夹里。或者采用官方的方案，选择邮件置顶。</p>\n<blockquote>\n<p>Spark 提供的置顶功能，不确定是否能多客户端同步。</p>\n</blockquote>\n<h4 id=\"Airmail-MacOS\"><a href=\"#Airmail-MacOS\" class=\"headerlink\" title=\"Airmail (MacOS)\"></a>Airmail (MacOS)</h4><p><img src=\"https://cdn0.yukapril.com/2020-03-04-mail-Airmail1.png-wm.black\" alt=\"Airmail\"></p>\n<p><img src=\"https://cdn0.yukapril.com/2020-03-04-mail-Airmail2.png-wm.black\" alt=\"Airmail\"></p>\n<p>页面美观，也很棒的软件。感觉比 Spark 还要强大一些。按照邮箱进行分类查阅，比较顺手。默认建立了一系列彩色文件夹，让人耳目一新。它假装支持标签，实际还是建立文件夹。但如果一封邮件有两个标签咋办？比较鸡贼的是他们把邮件复制了两封，分别放到两个文件夹下！所以好处是换台电脑也能识别，就算是换个软件都能识别。</p>\n<p>此外，它也官方宣称支持 yahoo。</p>\n<p>同样地，他也支持邮箱别名，而且我测试是成功的。但发送人不是别名是原名啊。还不确定原因所在。</p>\n<blockquote>\n<p>Airmail 还支持邮件星标，这个不确定能否多客户端同步。</p>\n</blockquote>\n<p>问题上，就是不支持邮件分类。还有就是不知道是分词 bug 还是咋样，测试搜索中文内容时候，<strong>个别时候搜索查不到</strong>。同样的问题在 Outlook 也有时候会遇到。但其他客户端还没发现。还有一个小问题，就是不能查看邮件原始信息。虽然这个功能极少被用到。</p>\n<p>这么好的软件，也是要收费的，而且感觉也挺贵的。当前是 73 元/年。</p>\n<h5 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h5><p>还有一些小众一点的客户端，很多都体验过，但是都有些欠缺。</p>\n<ul>\n<li>YoMail：以前体验过，支持各大系统。我记得可以支持各种邮箱，包括 exchange 协议。边栏还可以支持微信等网页工具。但是由于用的 electron 或类似 H5 的页面解决方案，导致切换页面等会丢失上一次的滚动位置。目前据说团队解散。</li>\n<li>WPS Mail：好像只有 windows 版本，小巧美观，功能不多。但当时只支持 SMTP / POP3 / IMAP，不支持 exchange，我就放弃了。</li>\n<li>Thunderbird：火狐公司的邮件客户端，上古时代产物，可以看看官网的图。感觉不太适应操作而放弃。</li>\n<li>DreamMail(梦想快车)：只有 windows 版，很多年前的软件，最近一两年又开始更新了。这个没用过。</li>\n<li>Polymail：太贵了，一个月 50+ 人民币都不止。我都没敢体验。不过卖这么贵，应该不会太差吧。</li>\n<li>Mail(MacOS)：一开始 Mac 没有安装额外客户端之前就用的系统自带的，感觉稳定性不够好，如果工作用，怕操作错误出错。</li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>如果你需要稳定、同步各种操作的话，就只能选择 Outlook 了。</p>\n<p>主要使用国内邮箱的话，QQ 邮箱就用 Foxmail，网易邮箱就用网易邮箱大师。这样能省去配置邮箱安全码之类的操作。</p>\n<p>为了轻便简洁，就选择 Foxmail。</p>\n<p>mac下，如果希望好看，功能也强大一点，可以选择 Spark 或 Airmail。</p>\n<p>如果平时也没有邮件需求，每月也用不了几次的话，可以考虑系统自带邮件，或者干脆定时去邮箱中看看。</p>\n<p>我一般都是手机端安装 Outlook，手表接收推送。每次收到邮件都是第一时间收到推送。如果需要查阅，则通过电脑客户端或者网页进行查阅。平时非上班时间，电脑的客户端也不启动的。</p>\n<p>其实还是电脑配置低，能省点内存就省一点…</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>上文讲述了多个邮箱如何管理邮件，以及自己的域名邮箱绑定的一些思路。即便使用了邮件代收，那么一个人可能还是有多个邮箱。</p>\n<p>比如我，除了自己的域名邮箱外，平时还要关注 outlook 邮箱（关联了很多小邮箱），以及一个工作邮箱。</p>\n<p>上班的时候，总不能一直开着网页端吧？此时就需要一个靠谱的邮箱客户端了。</p>","more":"<p>邮箱客户端，我主要看中的是其常规功能，常用的功能都有没有，到底好不好用，以及好不好看。对于通讯录我的要求比较低，经常是换电脑后每次手动粘贴收件人，只有个别常联系的同事才存放通讯录。</p>\n<p>系统支持上，部分客户端都是支持 windows MacOS 多系统的。</p>\n<h4 id=\"Outlook\"><a href=\"#Outlook\" class=\"headerlink\" title=\"Outlook\"></a>Outlook</h4><p><img src=\"https://cdn0.yukapril.com/2020-03-04-mail-outlook1.png-wm.black\" alt=\"outlook\"></p>\n<p>我最喜欢的客户端。主要是规矩且稳定。而且对 exchange 的支持感觉最好。它支持我最爱用的打标签，而且更换设备也能同步。目前来看，只有 Outlook 一款软件可以做到。</p>\n<p>工作有很多邮件需要稍后处理，我可以通过颜色标签进行区分，查找归类也非常便利。完成后再清除标签。最关键就是标签是同步的，我不必担心更换机器而找不到邮件。此外针对某类工作的邮件，建立单独的文件夹，使用各种规则进行来信归类，让每日的邮件梳理的井井有条。</p>\n<p>还有就是“会议”功能，很多年前没有现代钉钉企业微信等软件时候，开会用“会议”，开会前会有提醒，非常实用。不过这几年由于钉钉和企业微信兴起，一般都是聊天工具里面通知了。</p>\n<p>由于我几乎从不使用日历，也很少用 TO-DO 类软件，所以 outlook 的一些特色感受不到了。不过 Outlook 就是这种很规矩，没有太多特色，但是很稳定的软件。你挑不出来它什么毛病，但又没有什么特别突出的特色来推荐它。唯一让我气愤的是，<strong>MacOS 版本不支持定时发送，但 Windows 版本就支持</strong>，瞬间感觉被歧视了。</p>\n<p>费用吗，需要专业版 office 365 或者 office 买断版本才行。最便宜的方案就是 office 365 个人购买，或者家庭购买多人使用平摊费用。平摊费用来讲，一年 office 365 大概需要 80 元不到。</p>\n<h4 id=\"Foxmail\"><a href=\"#Foxmail\" class=\"headerlink\" title=\"Foxmail\"></a>Foxmail</h4><p><img src=\"https://cdn0.yukapril.com/2020-03-04-mail-foxmail1.png-wm.black\" alt=\"Foxmail\"></p>\n<p>国内肯定很多人用，我周边也是很多同事在用。支持 exchange，但是却需要手动配置一个服务器地址。我发现国外的客户端都不要配置这个的。</p>\n<p>简洁、轻量是他的特点。好处是竟然支持 exchange 的邮件分类。服务器配置的邮件分类，除了 Outlook 只有它能识别。还有就是“会议”，邮件回执，它都支持。</p>\n<p>本来一开始我也是用 Foxmail 的，但是邮件如果特别多之后，之前的版本就会变卡。不知道现在的版本改进了没有。此外它也是很少才更新，一般只适配新系统而已。</p>\n<p>可惜的是，它的标签（仅 windows 版本才有）、星标功能，是本地的，换机器后就不显示了。</p>\n<p>如果你只有一台机器用，并且不太需要同步标签之类，轻度使用，Foxmail 是个很好的选择。</p>\n<h4 id=\"网易邮箱大师\"><a href=\"#网易邮箱大师\" class=\"headerlink\" title=\"网易邮箱大师\"></a>网易邮箱大师</h4><p><img src=\"https://cdn0.yukapril.com/2020-03-04-mail-netease1.png-wm.black\" alt=\"网易邮箱大师\"></p>\n<p><img src=\"https://cdn0.yukapril.com/2020-03-04-mail-netease2.png-wm.black\" alt=\"网易邮箱大师\"></p>\n<p>我估计也应该有部分用户在用。支持 exchange，同样的需要配置一个服务器地址。好奇怪为啥国内客户端都要配置服务器地址。</p>\n<p>整体功能也比较简单，带有星标功能，更换设备不确定能否同步。特色是第一个提出了群发单显（群发邮件时收件人只能看到自己），不过好像 Foxmail windows 版也支持了。网易邮箱大师定时发送、回执、“会议”等功能也支持。可惜 exchange 不支持邮件分类。默认带有发件模板，对于刚入职的新人可能比较合适。</p>\n<h4 id=\"Spark-MacOS\"><a href=\"#Spark-MacOS\" class=\"headerlink\" title=\"Spark (MacOS)\"></a>Spark (MacOS)</h4><p><img src=\"https://cdn0.yukapril.com/2020-03-04-mail-spark1.png-wm.black\" alt=\"Spark\"></p>\n<p><img src=\"https://cdn0.yukapril.com/2020-03-04-mail-spark2.png-wm.black\" alt=\"Spark\"></p>\n<p>界面美观，功能一应俱全，也兼容 exchange 协议，关键是免费。还支持集成其他第三方服务，反正各个方面都很优秀。</p>\n<p>此外，它官方宣称支持 yahoo。yahoo 是出了名的不支持客户端的。</p>\n<p>Spark 支持邮箱别名（替身邮箱），但需要服务器支持。说白了就是一个收件地址，对应多个发件地址。不过不知道是啥原因，系统显示发送成功了，但是对方却收不到邮件。</p>\n<p>缺点是不支持邮件分类规则。不过 exchange 邮箱服务器会进行分类。还有管理邮箱方式不太习惯，别人大部分都是按照邮箱分类，它是按照功能分类（收件箱、发件箱之类），这样会导致不在收件箱里面的邮件可能注意不到。还有就是缺少打标签的功能，只能单独建立文件夹，把相应的邮件拖到对应文件夹里。或者采用官方的方案，选择邮件置顶。</p>\n<blockquote>\n<p>Spark 提供的置顶功能，不确定是否能多客户端同步。</p>\n</blockquote>\n<h4 id=\"Airmail-MacOS\"><a href=\"#Airmail-MacOS\" class=\"headerlink\" title=\"Airmail (MacOS)\"></a>Airmail (MacOS)</h4><p><img src=\"https://cdn0.yukapril.com/2020-03-04-mail-Airmail1.png-wm.black\" alt=\"Airmail\"></p>\n<p><img src=\"https://cdn0.yukapril.com/2020-03-04-mail-Airmail2.png-wm.black\" alt=\"Airmail\"></p>\n<p>页面美观，也很棒的软件。感觉比 Spark 还要强大一些。按照邮箱进行分类查阅，比较顺手。默认建立了一系列彩色文件夹，让人耳目一新。它假装支持标签，实际还是建立文件夹。但如果一封邮件有两个标签咋办？比较鸡贼的是他们把邮件复制了两封，分别放到两个文件夹下！所以好处是换台电脑也能识别，就算是换个软件都能识别。</p>\n<p>此外，它也官方宣称支持 yahoo。</p>\n<p>同样地，他也支持邮箱别名，而且我测试是成功的。但发送人不是别名是原名啊。还不确定原因所在。</p>\n<blockquote>\n<p>Airmail 还支持邮件星标，这个不确定能否多客户端同步。</p>\n</blockquote>\n<p>问题上，就是不支持邮件分类。还有就是不知道是分词 bug 还是咋样，测试搜索中文内容时候，<strong>个别时候搜索查不到</strong>。同样的问题在 Outlook 也有时候会遇到。但其他客户端还没发现。还有一个小问题，就是不能查看邮件原始信息。虽然这个功能极少被用到。</p>\n<p>这么好的软件，也是要收费的，而且感觉也挺贵的。当前是 73 元/年。</p>\n<h5 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h5><p>还有一些小众一点的客户端，很多都体验过，但是都有些欠缺。</p>\n<ul>\n<li>YoMail：以前体验过，支持各大系统。我记得可以支持各种邮箱，包括 exchange 协议。边栏还可以支持微信等网页工具。但是由于用的 electron 或类似 H5 的页面解决方案，导致切换页面等会丢失上一次的滚动位置。目前据说团队解散。</li>\n<li>WPS Mail：好像只有 windows 版本，小巧美观，功能不多。但当时只支持 SMTP / POP3 / IMAP，不支持 exchange，我就放弃了。</li>\n<li>Thunderbird：火狐公司的邮件客户端，上古时代产物，可以看看官网的图。感觉不太适应操作而放弃。</li>\n<li>DreamMail(梦想快车)：只有 windows 版，很多年前的软件，最近一两年又开始更新了。这个没用过。</li>\n<li>Polymail：太贵了，一个月 50+ 人民币都不止。我都没敢体验。不过卖这么贵，应该不会太差吧。</li>\n<li>Mail(MacOS)：一开始 Mac 没有安装额外客户端之前就用的系统自带的，感觉稳定性不够好，如果工作用，怕操作错误出错。</li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>如果你需要稳定、同步各种操作的话，就只能选择 Outlook 了。</p>\n<p>主要使用国内邮箱的话，QQ 邮箱就用 Foxmail，网易邮箱就用网易邮箱大师。这样能省去配置邮箱安全码之类的操作。</p>\n<p>为了轻便简洁，就选择 Foxmail。</p>\n<p>mac下，如果希望好看，功能也强大一点，可以选择 Spark 或 Airmail。</p>\n<p>如果平时也没有邮件需求，每月也用不了几次的话，可以考虑系统自带邮件，或者干脆定时去邮箱中看看。</p>\n<p>我一般都是手机端安装 Outlook，手表接收推送。每次收到邮件都是第一时间收到推送。如果需要查阅，则通过电脑客户端或者网页进行查阅。平时非上班时间，电脑的客户端也不启动的。</p>\n<p>其实还是电脑配置低，能省点内存就省一点…</p>\n<p>–END–</p>"},{"layout":"post","title":"管理多版本 node -- nvm 的使用","date":"2020-03-13T22:14:00.000Z","_content":"\n公司有个老项目要维护，git 拉下来项目就是一阵安装依赖。之后直接 `npm run dev`。结果失败了。才想起来这个项目要用 node 11 以下版本。自己的 MacOS 已经在官网安装了 node v12，总不能为此降级成 v10。突然想起了 `nvm` 这个管理库。虽然刚入门时候用过一个管理库，忘了是 `n` 还是 `nvm-widnows` 了，这次也正好也好好体验一番。\n\n由于我不用 windows，不确定以下操作是否通用。\n\n<!-- more -->\n\n## 安装\n\n项目地址：[https://github.com/nvm-sh/nvm](https://github.com/nvm-sh/nvm)\n\n如果是 MacOS 或者 Linux，比较方便，直接 `curl` 或者 `wget` 就行了。\n\n```bash\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\n# 或者\nwget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\n```\n\n之后，它提示我不用配置环境变量了，因为已经帮我配置好了（我用的 zsh）。\n\n其他 shell 不确定是否要自己配置下。安装结束时会有提示。\n\n通过 `nvm` 安装的 node，会存放在 `~/.nvm` 下。\n\n## 使用\n\n#### 查询安装的 node\n\n由于我系统已经安装过了，并且通过 nvm 安装了两个版本（10.19.0 和 12.16.1）。\n\n上面三行，显示了安装了那些版本的 node。之后的，都是默认提供的别名（alias）。\n\n```bash\nnvm ls\n\n->     v10.19.0       # 手动安装的版本，前方有箭头表示当前正在使用此版本\n       v12.16.1       # 手动安装的版本\n         system       # 系统已安装的版本\ndefault -> 10.19.0 (-> v10.19.0)        # 当前默认版本\nnode -> stable (-> v12.16.1) (default)  # 当前最新的 node 版本\nstable -> 12.16 (-> v12.16.1) (default) # (已废弃)针对 0.12 之前版本有效，现在和 node 内容完全一致\niojs -> N/A (default)                   # 当前最新的 iojs 版本(曾经node)\nunstable -> N/A (default)               # 非稳定版本，我没装\nlts/* -> lts/erbium (-> v12.16.1)       # 最新的LTS长期支持版本，装了12.16.1\nlts/argon -> v4.9.1 (-> N/A)            # LTS长期支持版本 v4系列，没装\nlts/boron -> v6.17.1 (-> N/A)           # LTS长期支持版本 v6系列，没装\nlts/carbon -> v8.17.0 (-> N/A)          # LTS长期支持版本 v8系列，没装\nlts/dubnium -> v10.19.0                 # LTS长期支持版本 v10系列，装了\nlts/erbium -> v12.16.1                  # LTS长期支持版本 v12系列，装了12.16.1\n```\n\n#### 查询当前使用的 node 版本\n\n```bash\nnvm ls      # 可以查看，就是返回内容太多了\nnvm current # 直接返回当前是用的版本号\nnode -v     # 直接调用 node 查询版本号，我一般都用这个查\n```\n\n#### 查询远端 node 版本\n\n```bash\nnvm ls-remote\n```\n\n这个命令会返回所有的 node 版本，费时还不找好。一般都是进行过滤。\n\n比如安装 LTS 长期支持版本，可以加上参数 `--lts`\n\n```bash\nnvm ls-remote --lts\n```\n\n如果需要查询 v8 系列 LTS 的版本，可以使用官方语法，但你必须知道它的英文名字：\n\n```bash\nnvm ls-remote --lts=carbon\n```\n\n不过，我一般都是采用字符串过滤的方案，这样无需记忆每个版本的名字。最主要是，如果不是 LTS 版本，是没有名字的：\n\n```bash\nnvm  ls-remote --lts | grep v8\nnvm  ls-remote | grep v13\n```\n\n还有一种方案，就是手动去 [nodejs.org](https://nodejs.org/en/download/releases/) 查询具体的每个版本。\n\n#### 安装 node\n\n```bash\nnvm install v12.16.1  # 直接输入版本号进行安装\nnvm install 12.16.1   # 可以忽略v标记\nnvm install 12        # 输入主版本号也可以安装\nnvm install --lts     # 安装最新的 LTS 版本\n```\n\n#### 切换 node 版本\n\n```bash\nnvm use v12.16.1     # 直接输入版本号进行切换\nnvm use 12           # 输入主版本好也可以切换\nnvm use --lts        # 使用最新的 LTS 版本\n```\n\n#### 查询 node 安装位置\n\n```bash\n nvm which current   # 查询当前版本安装位置\n nvm witch 12        # 同样支持简写\n```\n\n#### 移除已经安装的 node 版本\n\n不可以移除当前使用中的版本。\n\n```bash\nnvm uninstall 11    # 同上，可以使用简写\n```\n\n#### 使用指定版本 node 运行程序\n\n```bash\nnvm run 6.10.3 app.js # 用 6.10.3 执行 app.js\nnvm exec 4.8.3 node app.js # 用 4.8.3 的环境执行 `node app.js`\n```\n\n我认为 `nvm run` 是 `nvm exec` 的精简命令。`run` 后面一定接的是 `node` 命令。即：\n\n```bash\nnvm exec 12.16.0 node main.js\n# 可以精简为\nnvm run 12.16.0 main.js\n```\n\n那 `nvm exec` 没用了吗？当然不是，比如，用 `12.16.0` 的环境，执行 `npm` 命令：\n\n```bash\nnvm exec 12.16.0 npm install\n```\n\n#### 给 node 版本起别名\n\n比如我安装了 node v11.15.0，用于一个项目的测试任务。我想给这个版本起名为 `test`，则可以：\n\n```bash\nnvm alias test 11 # 版本号这里我喜欢简写\n```\n\n查询现在有哪些别名，可以使用\n\n```bash\nnvm alias # 会返回所有带有别名的列表。和 nvm ls 类似，就是没有当前安装的版本列表而已。\n```\n\n之后需要切换版本，可以使用：\n\n```bash\nnvm use test # 其中 test 是别名，代表了 11.15.0 版本\n```\n\n## 小结\n\n这次尝试使用了 `nvm` 后，发现再也离不开了。主要表现在三个方面。\n\n#### 更容易安装 node\n\n如果是 windows 或者 MacOS 还好，官方有提供安装包，下载双击即可。但是如果是 Linux 就比较麻烦了。\n\n比如 Ubuntu，官方的 `apt` 安装版本比较老，每次就需要手动安装。下载、解压、放到合理的目录，最后做好软连接。实在是繁琐。\n\nMacOS / Linux 环境，如果网络可以的话（需要访问 github），使用 nvm，安装可以归纳为：\n\n1. 下载 nvm： \n\n    ```bash\n    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\n    ```\n\n3. 配置环境变量（这步估计是最复杂的）\n4. 安装最新稳定版 node： `nvm install --lts`\n\n#### 支持多版本 node 共存\n\n不用 `nvm`，应该很难解决多版本共享的问题。而实际却有这种需求。尤其对于我现在手上的老项目，升级依赖不现实，只能用更低版本的 node，方便快捷。\n\n#### 更方便升级\n\n由于支持多版本 node 共存，想升级也是易如反掌。想升级时候，只需要安装一个最新版本即可。老版本课保留可删除。\n\n**不过这样有一个缺陷**：我看通过 `npm install xxx -g` 全局安装的工具，是直接安装到当前版本的目录下的。例如 `~/.nvm/versions/node/v12.16.1/lib/node_modules`。切换版本后，该工具就失效了。这么做应该是为了防止你安装工具不支持其他版本而考虑的吧。\n\n所以如果是 `v12.16.0` 升级到 `v12.16.1`，安装的全局工具就消失了。即便工具可以支持升级后的版本也不行。\n\n--END--","source":"_posts/2020/2020-03-13-nvm.md","raw":"---\nlayout: post\ntitle: 管理多版本 node -- nvm 的使用\ndate: 2020-03-13 22:14:00 GMT+0800\ncategories: [前端]\ntags:  [node,nvm]\n---\n\n公司有个老项目要维护，git 拉下来项目就是一阵安装依赖。之后直接 `npm run dev`。结果失败了。才想起来这个项目要用 node 11 以下版本。自己的 MacOS 已经在官网安装了 node v12，总不能为此降级成 v10。突然想起了 `nvm` 这个管理库。虽然刚入门时候用过一个管理库，忘了是 `n` 还是 `nvm-widnows` 了，这次也正好也好好体验一番。\n\n由于我不用 windows，不确定以下操作是否通用。\n\n<!-- more -->\n\n## 安装\n\n项目地址：[https://github.com/nvm-sh/nvm](https://github.com/nvm-sh/nvm)\n\n如果是 MacOS 或者 Linux，比较方便，直接 `curl` 或者 `wget` 就行了。\n\n```bash\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\n# 或者\nwget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\n```\n\n之后，它提示我不用配置环境变量了，因为已经帮我配置好了（我用的 zsh）。\n\n其他 shell 不确定是否要自己配置下。安装结束时会有提示。\n\n通过 `nvm` 安装的 node，会存放在 `~/.nvm` 下。\n\n## 使用\n\n#### 查询安装的 node\n\n由于我系统已经安装过了，并且通过 nvm 安装了两个版本（10.19.0 和 12.16.1）。\n\n上面三行，显示了安装了那些版本的 node。之后的，都是默认提供的别名（alias）。\n\n```bash\nnvm ls\n\n->     v10.19.0       # 手动安装的版本，前方有箭头表示当前正在使用此版本\n       v12.16.1       # 手动安装的版本\n         system       # 系统已安装的版本\ndefault -> 10.19.0 (-> v10.19.0)        # 当前默认版本\nnode -> stable (-> v12.16.1) (default)  # 当前最新的 node 版本\nstable -> 12.16 (-> v12.16.1) (default) # (已废弃)针对 0.12 之前版本有效，现在和 node 内容完全一致\niojs -> N/A (default)                   # 当前最新的 iojs 版本(曾经node)\nunstable -> N/A (default)               # 非稳定版本，我没装\nlts/* -> lts/erbium (-> v12.16.1)       # 最新的LTS长期支持版本，装了12.16.1\nlts/argon -> v4.9.1 (-> N/A)            # LTS长期支持版本 v4系列，没装\nlts/boron -> v6.17.1 (-> N/A)           # LTS长期支持版本 v6系列，没装\nlts/carbon -> v8.17.0 (-> N/A)          # LTS长期支持版本 v8系列，没装\nlts/dubnium -> v10.19.0                 # LTS长期支持版本 v10系列，装了\nlts/erbium -> v12.16.1                  # LTS长期支持版本 v12系列，装了12.16.1\n```\n\n#### 查询当前使用的 node 版本\n\n```bash\nnvm ls      # 可以查看，就是返回内容太多了\nnvm current # 直接返回当前是用的版本号\nnode -v     # 直接调用 node 查询版本号，我一般都用这个查\n```\n\n#### 查询远端 node 版本\n\n```bash\nnvm ls-remote\n```\n\n这个命令会返回所有的 node 版本，费时还不找好。一般都是进行过滤。\n\n比如安装 LTS 长期支持版本，可以加上参数 `--lts`\n\n```bash\nnvm ls-remote --lts\n```\n\n如果需要查询 v8 系列 LTS 的版本，可以使用官方语法，但你必须知道它的英文名字：\n\n```bash\nnvm ls-remote --lts=carbon\n```\n\n不过，我一般都是采用字符串过滤的方案，这样无需记忆每个版本的名字。最主要是，如果不是 LTS 版本，是没有名字的：\n\n```bash\nnvm  ls-remote --lts | grep v8\nnvm  ls-remote | grep v13\n```\n\n还有一种方案，就是手动去 [nodejs.org](https://nodejs.org/en/download/releases/) 查询具体的每个版本。\n\n#### 安装 node\n\n```bash\nnvm install v12.16.1  # 直接输入版本号进行安装\nnvm install 12.16.1   # 可以忽略v标记\nnvm install 12        # 输入主版本号也可以安装\nnvm install --lts     # 安装最新的 LTS 版本\n```\n\n#### 切换 node 版本\n\n```bash\nnvm use v12.16.1     # 直接输入版本号进行切换\nnvm use 12           # 输入主版本好也可以切换\nnvm use --lts        # 使用最新的 LTS 版本\n```\n\n#### 查询 node 安装位置\n\n```bash\n nvm which current   # 查询当前版本安装位置\n nvm witch 12        # 同样支持简写\n```\n\n#### 移除已经安装的 node 版本\n\n不可以移除当前使用中的版本。\n\n```bash\nnvm uninstall 11    # 同上，可以使用简写\n```\n\n#### 使用指定版本 node 运行程序\n\n```bash\nnvm run 6.10.3 app.js # 用 6.10.3 执行 app.js\nnvm exec 4.8.3 node app.js # 用 4.8.3 的环境执行 `node app.js`\n```\n\n我认为 `nvm run` 是 `nvm exec` 的精简命令。`run` 后面一定接的是 `node` 命令。即：\n\n```bash\nnvm exec 12.16.0 node main.js\n# 可以精简为\nnvm run 12.16.0 main.js\n```\n\n那 `nvm exec` 没用了吗？当然不是，比如，用 `12.16.0` 的环境，执行 `npm` 命令：\n\n```bash\nnvm exec 12.16.0 npm install\n```\n\n#### 给 node 版本起别名\n\n比如我安装了 node v11.15.0，用于一个项目的测试任务。我想给这个版本起名为 `test`，则可以：\n\n```bash\nnvm alias test 11 # 版本号这里我喜欢简写\n```\n\n查询现在有哪些别名，可以使用\n\n```bash\nnvm alias # 会返回所有带有别名的列表。和 nvm ls 类似，就是没有当前安装的版本列表而已。\n```\n\n之后需要切换版本，可以使用：\n\n```bash\nnvm use test # 其中 test 是别名，代表了 11.15.0 版本\n```\n\n## 小结\n\n这次尝试使用了 `nvm` 后，发现再也离不开了。主要表现在三个方面。\n\n#### 更容易安装 node\n\n如果是 windows 或者 MacOS 还好，官方有提供安装包，下载双击即可。但是如果是 Linux 就比较麻烦了。\n\n比如 Ubuntu，官方的 `apt` 安装版本比较老，每次就需要手动安装。下载、解压、放到合理的目录，最后做好软连接。实在是繁琐。\n\nMacOS / Linux 环境，如果网络可以的话（需要访问 github），使用 nvm，安装可以归纳为：\n\n1. 下载 nvm： \n\n    ```bash\n    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\n    ```\n\n3. 配置环境变量（这步估计是最复杂的）\n4. 安装最新稳定版 node： `nvm install --lts`\n\n#### 支持多版本 node 共存\n\n不用 `nvm`，应该很难解决多版本共享的问题。而实际却有这种需求。尤其对于我现在手上的老项目，升级依赖不现实，只能用更低版本的 node，方便快捷。\n\n#### 更方便升级\n\n由于支持多版本 node 共存，想升级也是易如反掌。想升级时候，只需要安装一个最新版本即可。老版本课保留可删除。\n\n**不过这样有一个缺陷**：我看通过 `npm install xxx -g` 全局安装的工具，是直接安装到当前版本的目录下的。例如 `~/.nvm/versions/node/v12.16.1/lib/node_modules`。切换版本后，该工具就失效了。这么做应该是为了防止你安装工具不支持其他版本而考虑的吧。\n\n所以如果是 `v12.16.0` 升级到 `v12.16.1`，安装的全局工具就消失了。即便工具可以支持升级后的版本也不行。\n\n--END--","slug":"2020-2020-03-13-nvm","published":1,"updated":"2020-03-14T10:28:59.277Z","comments":1,"photos":[],"link":"","_id":"cka5ik8e3008anybg1uzkz54u","content":"<p>公司有个老项目要维护，git 拉下来项目就是一阵安装依赖。之后直接 <code>npm run dev</code>。结果失败了。才想起来这个项目要用 node 11 以下版本。自己的 MacOS 已经在官网安装了 node v12，总不能为此降级成 v10。突然想起了 <code>nvm</code> 这个管理库。虽然刚入门时候用过一个管理库，忘了是 <code>n</code> 还是 <code>nvm-widnows</code> 了，这次也正好也好好体验一番。</p>\n<p>由于我不用 windows，不确定以下操作是否通用。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>项目地址：<a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"noopener\">https://github.com/nvm-sh/nvm</a></p>\n<p>如果是 MacOS 或者 Linux，比较方便，直接 <code>curl</code> 或者 <code>wget</code> 就行了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br></pre></td></tr></table></figure>\n\n<p>之后，它提示我不用配置环境变量了，因为已经帮我配置好了（我用的 zsh）。</p>\n<p>其他 shell 不确定是否要自己配置下。安装结束时会有提示。</p>\n<p>通过 <code>nvm</code> 安装的 node，会存放在 <code>~/.nvm</code> 下。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h4 id=\"查询安装的-node\"><a href=\"#查询安装的-node\" class=\"headerlink\" title=\"查询安装的 node\"></a>查询安装的 node</h4><p>由于我系统已经安装过了，并且通过 nvm 安装了两个版本（10.19.0 和 12.16.1）。</p>\n<p>上面三行，显示了安装了那些版本的 node。之后的，都是默认提供的别名（alias）。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm ls</span><br><span class=\"line\"></span><br><span class=\"line\">-&gt;     v10.19.0       <span class=\"comment\"># 手动安装的版本，前方有箭头表示当前正在使用此版本</span></span><br><span class=\"line\">       v12.16.1       <span class=\"comment\"># 手动安装的版本</span></span><br><span class=\"line\">         system       <span class=\"comment\"># 系统已安装的版本</span></span><br><span class=\"line\">default -&gt; 10.19.0 (-&gt; v10.19.0)        <span class=\"comment\"># 当前默认版本</span></span><br><span class=\"line\">node -&gt; stable (-&gt; v12.16.1) (default)  <span class=\"comment\"># 当前最新的 node 版本</span></span><br><span class=\"line\">stable -&gt; 12.16 (-&gt; v12.16.1) (default) <span class=\"comment\"># (已废弃)针对 0.12 之前版本有效，现在和 node 内容完全一致</span></span><br><span class=\"line\">iojs -&gt; N/A (default)                   <span class=\"comment\"># 当前最新的 iojs 版本(曾经node)</span></span><br><span class=\"line\">unstable -&gt; N/A (default)               <span class=\"comment\"># 非稳定版本，我没装</span></span><br><span class=\"line\">lts/* -&gt; lts/erbium (-&gt; v12.16.1)       <span class=\"comment\"># 最新的LTS长期支持版本，装了12.16.1</span></span><br><span class=\"line\">lts/argon -&gt; v4.9.1 (-&gt; N/A)            <span class=\"comment\"># LTS长期支持版本 v4系列，没装</span></span><br><span class=\"line\">lts/boron -&gt; v6.17.1 (-&gt; N/A)           <span class=\"comment\"># LTS长期支持版本 v6系列，没装</span></span><br><span class=\"line\">lts/carbon -&gt; v8.17.0 (-&gt; N/A)          <span class=\"comment\"># LTS长期支持版本 v8系列，没装</span></span><br><span class=\"line\">lts/dubnium -&gt; v10.19.0                 <span class=\"comment\"># LTS长期支持版本 v10系列，装了</span></span><br><span class=\"line\">lts/erbium -&gt; v12.16.1                  <span class=\"comment\"># LTS长期支持版本 v12系列，装了12.16.1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查询当前使用的-node-版本\"><a href=\"#查询当前使用的-node-版本\" class=\"headerlink\" title=\"查询当前使用的 node 版本\"></a>查询当前使用的 node 版本</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm ls      <span class=\"comment\"># 可以查看，就是返回内容太多了</span></span><br><span class=\"line\">nvm current <span class=\"comment\"># 直接返回当前是用的版本号</span></span><br><span class=\"line\">node -v     <span class=\"comment\"># 直接调用 node 查询版本号，我一般都用这个查</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查询远端-node-版本\"><a href=\"#查询远端-node-版本\" class=\"headerlink\" title=\"查询远端 node 版本\"></a>查询远端 node 版本</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm ls-remote</span><br></pre></td></tr></table></figure>\n\n<p>这个命令会返回所有的 node 版本，费时还不找好。一般都是进行过滤。</p>\n<p>比如安装 LTS 长期支持版本，可以加上参数 <code>--lts</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm ls-remote --lts</span><br></pre></td></tr></table></figure>\n\n<p>如果需要查询 v8 系列 LTS 的版本，可以使用官方语法，但你必须知道它的英文名字：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm ls-remote --lts=carbon</span><br></pre></td></tr></table></figure>\n\n<p>不过，我一般都是采用字符串过滤的方案，这样无需记忆每个版本的名字。最主要是，如果不是 LTS 版本，是没有名字的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm  ls-remote --lts | grep v8</span><br><span class=\"line\">nvm  ls-remote | grep v13</span><br></pre></td></tr></table></figure>\n\n<p>还有一种方案，就是手动去 <a href=\"https://nodejs.org/en/download/releases/\" target=\"_blank\" rel=\"noopener\">nodejs.org</a> 查询具体的每个版本。</p>\n<h4 id=\"安装-node\"><a href=\"#安装-node\" class=\"headerlink\" title=\"安装 node\"></a>安装 node</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install v12.16.1  <span class=\"comment\"># 直接输入版本号进行安装</span></span><br><span class=\"line\">nvm install 12.16.1   <span class=\"comment\"># 可以忽略v标记</span></span><br><span class=\"line\">nvm install 12        <span class=\"comment\"># 输入主版本号也可以安装</span></span><br><span class=\"line\">nvm install --lts     <span class=\"comment\"># 安装最新的 LTS 版本</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"切换-node-版本\"><a href=\"#切换-node-版本\" class=\"headerlink\" title=\"切换 node 版本\"></a>切换 node 版本</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use v12.16.1     <span class=\"comment\"># 直接输入版本号进行切换</span></span><br><span class=\"line\">nvm use 12           <span class=\"comment\"># 输入主版本好也可以切换</span></span><br><span class=\"line\">nvm use --lts        <span class=\"comment\"># 使用最新的 LTS 版本</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查询-node-安装位置\"><a href=\"#查询-node-安装位置\" class=\"headerlink\" title=\"查询 node 安装位置\"></a>查询 node 安装位置</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm <span class=\"built_in\">which</span> current   <span class=\"comment\"># 查询当前版本安装位置</span></span><br><span class=\"line\">nvm witch 12        <span class=\"comment\"># 同样支持简写</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"移除已经安装的-node-版本\"><a href=\"#移除已经安装的-node-版本\" class=\"headerlink\" title=\"移除已经安装的 node 版本\"></a>移除已经安装的 node 版本</h4><p>不可以移除当前使用中的版本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm uninstall 11    <span class=\"comment\"># 同上，可以使用简写</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用指定版本-node-运行程序\"><a href=\"#使用指定版本-node-运行程序\" class=\"headerlink\" title=\"使用指定版本 node 运行程序\"></a>使用指定版本 node 运行程序</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm run 6.10.3 app.js <span class=\"comment\"># 用 6.10.3 执行 app.js</span></span><br><span class=\"line\">nvm <span class=\"built_in\">exec</span> 4.8.3 node app.js <span class=\"comment\"># 用 4.8.3 的环境执行 `node app.js`</span></span><br></pre></td></tr></table></figure>\n\n<p>我认为 <code>nvm run</code> 是 <code>nvm exec</code> 的精简命令。<code>run</code> 后面一定接的是 <code>node</code> 命令。即：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm <span class=\"built_in\">exec</span> 12.16.0 node main.js</span><br><span class=\"line\"><span class=\"comment\"># 可以精简为</span></span><br><span class=\"line\">nvm run 12.16.0 main.js</span><br></pre></td></tr></table></figure>\n\n<p>那 <code>nvm exec</code> 没用了吗？当然不是，比如，用 <code>12.16.0</code> 的环境，执行 <code>npm</code> 命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm <span class=\"built_in\">exec</span> 12.16.0 npm install</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"给-node-版本起别名\"><a href=\"#给-node-版本起别名\" class=\"headerlink\" title=\"给 node 版本起别名\"></a>给 node 版本起别名</h4><p>比如我安装了 node v11.15.0，用于一个项目的测试任务。我想给这个版本起名为 <code>test</code>，则可以：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm <span class=\"built_in\">alias</span> <span class=\"built_in\">test</span> 11 <span class=\"comment\"># 版本号这里我喜欢简写</span></span><br></pre></td></tr></table></figure>\n\n<p>查询现在有哪些别名，可以使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm <span class=\"built_in\">alias</span> <span class=\"comment\"># 会返回所有带有别名的列表。和 nvm ls 类似，就是没有当前安装的版本列表而已。</span></span><br></pre></td></tr></table></figure>\n\n<p>之后需要切换版本，可以使用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use <span class=\"built_in\">test</span> <span class=\"comment\"># 其中 test 是别名，代表了 11.15.0 版本</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>这次尝试使用了 <code>nvm</code> 后，发现再也离不开了。主要表现在三个方面。</p>\n<h4 id=\"更容易安装-node\"><a href=\"#更容易安装-node\" class=\"headerlink\" title=\"更容易安装 node\"></a>更容易安装 node</h4><p>如果是 windows 或者 MacOS 还好，官方有提供安装包，下载双击即可。但是如果是 Linux 就比较麻烦了。</p>\n<p>比如 Ubuntu，官方的 <code>apt</code> 安装版本比较老，每次就需要手动安装。下载、解压、放到合理的目录，最后做好软连接。实在是繁琐。</p>\n<p>MacOS / Linux 环境，如果网络可以的话（需要访问 github），使用 nvm，安装可以归纳为：</p>\n<ol>\n<li><p>下载 nvm： </p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置环境变量（这步估计是最复杂的）</p>\n</li>\n<li><p>安装最新稳定版 node： <code>nvm install --lts</code></p>\n</li>\n</ol>\n<h4 id=\"支持多版本-node-共存\"><a href=\"#支持多版本-node-共存\" class=\"headerlink\" title=\"支持多版本 node 共存\"></a>支持多版本 node 共存</h4><p>不用 <code>nvm</code>，应该很难解决多版本共享的问题。而实际却有这种需求。尤其对于我现在手上的老项目，升级依赖不现实，只能用更低版本的 node，方便快捷。</p>\n<h4 id=\"更方便升级\"><a href=\"#更方便升级\" class=\"headerlink\" title=\"更方便升级\"></a>更方便升级</h4><p>由于支持多版本 node 共存，想升级也是易如反掌。想升级时候，只需要安装一个最新版本即可。老版本课保留可删除。</p>\n<p><strong>不过这样有一个缺陷</strong>：我看通过 <code>npm install xxx -g</code> 全局安装的工具，是直接安装到当前版本的目录下的。例如 <code>~/.nvm/versions/node/v12.16.1/lib/node_modules</code>。切换版本后，该工具就失效了。这么做应该是为了防止你安装工具不支持其他版本而考虑的吧。</p>\n<p>所以如果是 <code>v12.16.0</code> 升级到 <code>v12.16.1</code>，安装的全局工具就消失了。即便工具可以支持升级后的版本也不行。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>公司有个老项目要维护，git 拉下来项目就是一阵安装依赖。之后直接 <code>npm run dev</code>。结果失败了。才想起来这个项目要用 node 11 以下版本。自己的 MacOS 已经在官网安装了 node v12，总不能为此降级成 v10。突然想起了 <code>nvm</code> 这个管理库。虽然刚入门时候用过一个管理库，忘了是 <code>n</code> 还是 <code>nvm-widnows</code> 了，这次也正好也好好体验一番。</p>\n<p>由于我不用 windows，不确定以下操作是否通用。</p>","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>项目地址：<a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"noopener\">https://github.com/nvm-sh/nvm</a></p>\n<p>如果是 MacOS 或者 Linux，比较方便，直接 <code>curl</code> 或者 <code>wget</code> 就行了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br></pre></td></tr></table></figure>\n\n<p>之后，它提示我不用配置环境变量了，因为已经帮我配置好了（我用的 zsh）。</p>\n<p>其他 shell 不确定是否要自己配置下。安装结束时会有提示。</p>\n<p>通过 <code>nvm</code> 安装的 node，会存放在 <code>~/.nvm</code> 下。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h4 id=\"查询安装的-node\"><a href=\"#查询安装的-node\" class=\"headerlink\" title=\"查询安装的 node\"></a>查询安装的 node</h4><p>由于我系统已经安装过了，并且通过 nvm 安装了两个版本（10.19.0 和 12.16.1）。</p>\n<p>上面三行，显示了安装了那些版本的 node。之后的，都是默认提供的别名（alias）。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm ls</span><br><span class=\"line\"></span><br><span class=\"line\">-&gt;     v10.19.0       <span class=\"comment\"># 手动安装的版本，前方有箭头表示当前正在使用此版本</span></span><br><span class=\"line\">       v12.16.1       <span class=\"comment\"># 手动安装的版本</span></span><br><span class=\"line\">         system       <span class=\"comment\"># 系统已安装的版本</span></span><br><span class=\"line\">default -&gt; 10.19.0 (-&gt; v10.19.0)        <span class=\"comment\"># 当前默认版本</span></span><br><span class=\"line\">node -&gt; stable (-&gt; v12.16.1) (default)  <span class=\"comment\"># 当前最新的 node 版本</span></span><br><span class=\"line\">stable -&gt; 12.16 (-&gt; v12.16.1) (default) <span class=\"comment\"># (已废弃)针对 0.12 之前版本有效，现在和 node 内容完全一致</span></span><br><span class=\"line\">iojs -&gt; N/A (default)                   <span class=\"comment\"># 当前最新的 iojs 版本(曾经node)</span></span><br><span class=\"line\">unstable -&gt; N/A (default)               <span class=\"comment\"># 非稳定版本，我没装</span></span><br><span class=\"line\">lts/* -&gt; lts/erbium (-&gt; v12.16.1)       <span class=\"comment\"># 最新的LTS长期支持版本，装了12.16.1</span></span><br><span class=\"line\">lts/argon -&gt; v4.9.1 (-&gt; N/A)            <span class=\"comment\"># LTS长期支持版本 v4系列，没装</span></span><br><span class=\"line\">lts/boron -&gt; v6.17.1 (-&gt; N/A)           <span class=\"comment\"># LTS长期支持版本 v6系列，没装</span></span><br><span class=\"line\">lts/carbon -&gt; v8.17.0 (-&gt; N/A)          <span class=\"comment\"># LTS长期支持版本 v8系列，没装</span></span><br><span class=\"line\">lts/dubnium -&gt; v10.19.0                 <span class=\"comment\"># LTS长期支持版本 v10系列，装了</span></span><br><span class=\"line\">lts/erbium -&gt; v12.16.1                  <span class=\"comment\"># LTS长期支持版本 v12系列，装了12.16.1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查询当前使用的-node-版本\"><a href=\"#查询当前使用的-node-版本\" class=\"headerlink\" title=\"查询当前使用的 node 版本\"></a>查询当前使用的 node 版本</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm ls      <span class=\"comment\"># 可以查看，就是返回内容太多了</span></span><br><span class=\"line\">nvm current <span class=\"comment\"># 直接返回当前是用的版本号</span></span><br><span class=\"line\">node -v     <span class=\"comment\"># 直接调用 node 查询版本号，我一般都用这个查</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查询远端-node-版本\"><a href=\"#查询远端-node-版本\" class=\"headerlink\" title=\"查询远端 node 版本\"></a>查询远端 node 版本</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm ls-remote</span><br></pre></td></tr></table></figure>\n\n<p>这个命令会返回所有的 node 版本，费时还不找好。一般都是进行过滤。</p>\n<p>比如安装 LTS 长期支持版本，可以加上参数 <code>--lts</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm ls-remote --lts</span><br></pre></td></tr></table></figure>\n\n<p>如果需要查询 v8 系列 LTS 的版本，可以使用官方语法，但你必须知道它的英文名字：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm ls-remote --lts=carbon</span><br></pre></td></tr></table></figure>\n\n<p>不过，我一般都是采用字符串过滤的方案，这样无需记忆每个版本的名字。最主要是，如果不是 LTS 版本，是没有名字的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm  ls-remote --lts | grep v8</span><br><span class=\"line\">nvm  ls-remote | grep v13</span><br></pre></td></tr></table></figure>\n\n<p>还有一种方案，就是手动去 <a href=\"https://nodejs.org/en/download/releases/\" target=\"_blank\" rel=\"noopener\">nodejs.org</a> 查询具体的每个版本。</p>\n<h4 id=\"安装-node\"><a href=\"#安装-node\" class=\"headerlink\" title=\"安装 node\"></a>安装 node</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install v12.16.1  <span class=\"comment\"># 直接输入版本号进行安装</span></span><br><span class=\"line\">nvm install 12.16.1   <span class=\"comment\"># 可以忽略v标记</span></span><br><span class=\"line\">nvm install 12        <span class=\"comment\"># 输入主版本号也可以安装</span></span><br><span class=\"line\">nvm install --lts     <span class=\"comment\"># 安装最新的 LTS 版本</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"切换-node-版本\"><a href=\"#切换-node-版本\" class=\"headerlink\" title=\"切换 node 版本\"></a>切换 node 版本</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use v12.16.1     <span class=\"comment\"># 直接输入版本号进行切换</span></span><br><span class=\"line\">nvm use 12           <span class=\"comment\"># 输入主版本好也可以切换</span></span><br><span class=\"line\">nvm use --lts        <span class=\"comment\"># 使用最新的 LTS 版本</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查询-node-安装位置\"><a href=\"#查询-node-安装位置\" class=\"headerlink\" title=\"查询 node 安装位置\"></a>查询 node 安装位置</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm <span class=\"built_in\">which</span> current   <span class=\"comment\"># 查询当前版本安装位置</span></span><br><span class=\"line\">nvm witch 12        <span class=\"comment\"># 同样支持简写</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"移除已经安装的-node-版本\"><a href=\"#移除已经安装的-node-版本\" class=\"headerlink\" title=\"移除已经安装的 node 版本\"></a>移除已经安装的 node 版本</h4><p>不可以移除当前使用中的版本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm uninstall 11    <span class=\"comment\"># 同上，可以使用简写</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用指定版本-node-运行程序\"><a href=\"#使用指定版本-node-运行程序\" class=\"headerlink\" title=\"使用指定版本 node 运行程序\"></a>使用指定版本 node 运行程序</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm run 6.10.3 app.js <span class=\"comment\"># 用 6.10.3 执行 app.js</span></span><br><span class=\"line\">nvm <span class=\"built_in\">exec</span> 4.8.3 node app.js <span class=\"comment\"># 用 4.8.3 的环境执行 `node app.js`</span></span><br></pre></td></tr></table></figure>\n\n<p>我认为 <code>nvm run</code> 是 <code>nvm exec</code> 的精简命令。<code>run</code> 后面一定接的是 <code>node</code> 命令。即：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm <span class=\"built_in\">exec</span> 12.16.0 node main.js</span><br><span class=\"line\"><span class=\"comment\"># 可以精简为</span></span><br><span class=\"line\">nvm run 12.16.0 main.js</span><br></pre></td></tr></table></figure>\n\n<p>那 <code>nvm exec</code> 没用了吗？当然不是，比如，用 <code>12.16.0</code> 的环境，执行 <code>npm</code> 命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm <span class=\"built_in\">exec</span> 12.16.0 npm install</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"给-node-版本起别名\"><a href=\"#给-node-版本起别名\" class=\"headerlink\" title=\"给 node 版本起别名\"></a>给 node 版本起别名</h4><p>比如我安装了 node v11.15.0，用于一个项目的测试任务。我想给这个版本起名为 <code>test</code>，则可以：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm <span class=\"built_in\">alias</span> <span class=\"built_in\">test</span> 11 <span class=\"comment\"># 版本号这里我喜欢简写</span></span><br></pre></td></tr></table></figure>\n\n<p>查询现在有哪些别名，可以使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm <span class=\"built_in\">alias</span> <span class=\"comment\"># 会返回所有带有别名的列表。和 nvm ls 类似，就是没有当前安装的版本列表而已。</span></span><br></pre></td></tr></table></figure>\n\n<p>之后需要切换版本，可以使用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use <span class=\"built_in\">test</span> <span class=\"comment\"># 其中 test 是别名，代表了 11.15.0 版本</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>这次尝试使用了 <code>nvm</code> 后，发现再也离不开了。主要表现在三个方面。</p>\n<h4 id=\"更容易安装-node\"><a href=\"#更容易安装-node\" class=\"headerlink\" title=\"更容易安装 node\"></a>更容易安装 node</h4><p>如果是 windows 或者 MacOS 还好，官方有提供安装包，下载双击即可。但是如果是 Linux 就比较麻烦了。</p>\n<p>比如 Ubuntu，官方的 <code>apt</code> 安装版本比较老，每次就需要手动安装。下载、解压、放到合理的目录，最后做好软连接。实在是繁琐。</p>\n<p>MacOS / Linux 环境，如果网络可以的话（需要访问 github），使用 nvm，安装可以归纳为：</p>\n<ol>\n<li><p>下载 nvm： </p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置环境变量（这步估计是最复杂的）</p>\n</li>\n<li><p>安装最新稳定版 node： <code>nvm install --lts</code></p>\n</li>\n</ol>\n<h4 id=\"支持多版本-node-共存\"><a href=\"#支持多版本-node-共存\" class=\"headerlink\" title=\"支持多版本 node 共存\"></a>支持多版本 node 共存</h4><p>不用 <code>nvm</code>，应该很难解决多版本共享的问题。而实际却有这种需求。尤其对于我现在手上的老项目，升级依赖不现实，只能用更低版本的 node，方便快捷。</p>\n<h4 id=\"更方便升级\"><a href=\"#更方便升级\" class=\"headerlink\" title=\"更方便升级\"></a>更方便升级</h4><p>由于支持多版本 node 共存，想升级也是易如反掌。想升级时候，只需要安装一个最新版本即可。老版本课保留可删除。</p>\n<p><strong>不过这样有一个缺陷</strong>：我看通过 <code>npm install xxx -g</code> 全局安装的工具，是直接安装到当前版本的目录下的。例如 <code>~/.nvm/versions/node/v12.16.1/lib/node_modules</code>。切换版本后，该工具就失效了。这么做应该是为了防止你安装工具不支持其他版本而考虑的吧。</p>\n<p>所以如果是 <code>v12.16.0</code> 升级到 <code>v12.16.1</code>，安装的全局工具就消失了。即便工具可以支持升级后的版本也不行。</p>\n<p>–END–</p>"},{"layout":"post","title":"使用 cloudflare 实现访问代理","date":"2020-03-14T18:50:00.000Z","photos":["https://cdn0.yukapril.com/20200314-cloudflare-proxy.png"],"_content":"\n昨天写了一篇文章，讲到可以使用 `nvm` 来部署 node。其中第一步安装的时候，要访问 github 的资源服务器。这一步的访问可能在国内非常不畅。这就需要有一个访问代理来协助。\n\n<!-- more -->\n\n之前听说函数计算可以实现一些简单的功能。就比如访问代理，只需要函数计算实现参数接收、代理请求、结果返回三步就够了。正好我也一直比较好奇函数计算，就此也尝试下。\n\n原则上讲，国内的阿里云、腾讯云都可以实现函数计算服务，但是他们服务器在国内，无法实现访问 github。也就没有考虑。\n\n我选择了 cloudflare workers。和函数计算一个意思。对于个人使用的偶尔使用，免费的量非常充裕。主要就是限制每天 10 万次请求，最多 30 个 workers。足够了。\n\n**新建 workers**\n\n访问 [cloudflare workers](https://workers.cloudflare.com/) 页面，注册登录。\n\ncloudflare workers 提供本地编程的工具包，但是我的需求很简单，直接在线编辑测试就可以了。\n\n![cloudflare workers](https://cdn0.yukapril.com/20200314-cloudflare-proxy.png)\n\n选择页面上的 `Start Building` 开始。之后可以选择右侧的 Workers 栏目进入。\n\n之后需要建立自己的子域，一般是 `xxxx.workers.dev` 形式。\n\n比如建立一个叫做 `my` 的子域，那么完整的子域地址是 `my.workers.dev`。\n\n创建每个 workers，系统会默认起名字，可以改的。比如我们要做一个文件代理，名字我们就叫做 `proxy`，那么这个 workers 的访问地址就是 `proxy.my.workers.dev`。\n\n**编写脚本**\n\n直接进入编辑模式，可以写入如下脚本，完成对 `https://raw.githubusercontent.com` 地址的代理：\n\n```js\naddEventListener('fetch', event => {\n  // event 包含\n  // actorState: 不知道是啥\n  // request: 请求包\n  // type: 类型，此处为 \"fetch\"\n  event.respondWith(handleRequest(event.request))\n})\n\nasync function handleRequest(request) {\n  // 获取请求的 url\n  const url = request.url\n  // 构造 URL 对象，方便解析出 pathname\n  const urlObj = new URL(url)\n  const pathname = urlObj.pathname\n\n  if (pathname === '/') {\n    // 访问根节点，直接返回空内容\n    return new Response('', { status: 200 })\n  } else {\n    // 抓取内容\n    const html = await getHtml('https://raw.githubusercontent.com' + pathname)\n    return new Response(html, { status: 200 })\n  }\n}\n\n/**\n * 获取指定地址的 html\n */\nasync function getHtml(url) {\n  const res = await fetch(url, { method: 'GET' })\n  if (res.status === 200) {\n    return await res.text()\n  }\n  return ''\n}\n```\n\n写好脚本后，使用 <key>Ctrl</key>/<key>Cmd</key> + <key>S</key> 进行保存即可。\n\n我们就可以浏览器测试了。\n\n比如 `nvm` 的安装脚本地址是：\n\n```\nhttps://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh\n```\n\n我们只需要更换为我们的域名即可(域名要换成你自己创建的)：\n```\nhttps://proxy.my.workers.dev/nvm-sh/nvm/v0.35.3/install.sh\n``` \n\n--END--","source":"_posts/2020/2020-03-14-cloudflare-proxy.md","raw":"---\nlayout: post\ntitle: 使用 cloudflare 实现访问代理\ndate: 2020-03-14 18:50:00 GMT+0800\ncategories: [技术]\ntags:  [cloudflare,workers,proxy]\nphotos: [https://cdn0.yukapril.com/20200314-cloudflare-proxy.png]\n---\n\n昨天写了一篇文章，讲到可以使用 `nvm` 来部署 node。其中第一步安装的时候，要访问 github 的资源服务器。这一步的访问可能在国内非常不畅。这就需要有一个访问代理来协助。\n\n<!-- more -->\n\n之前听说函数计算可以实现一些简单的功能。就比如访问代理，只需要函数计算实现参数接收、代理请求、结果返回三步就够了。正好我也一直比较好奇函数计算，就此也尝试下。\n\n原则上讲，国内的阿里云、腾讯云都可以实现函数计算服务，但是他们服务器在国内，无法实现访问 github。也就没有考虑。\n\n我选择了 cloudflare workers。和函数计算一个意思。对于个人使用的偶尔使用，免费的量非常充裕。主要就是限制每天 10 万次请求，最多 30 个 workers。足够了。\n\n**新建 workers**\n\n访问 [cloudflare workers](https://workers.cloudflare.com/) 页面，注册登录。\n\ncloudflare workers 提供本地编程的工具包，但是我的需求很简单，直接在线编辑测试就可以了。\n\n![cloudflare workers](https://cdn0.yukapril.com/20200314-cloudflare-proxy.png)\n\n选择页面上的 `Start Building` 开始。之后可以选择右侧的 Workers 栏目进入。\n\n之后需要建立自己的子域，一般是 `xxxx.workers.dev` 形式。\n\n比如建立一个叫做 `my` 的子域，那么完整的子域地址是 `my.workers.dev`。\n\n创建每个 workers，系统会默认起名字，可以改的。比如我们要做一个文件代理，名字我们就叫做 `proxy`，那么这个 workers 的访问地址就是 `proxy.my.workers.dev`。\n\n**编写脚本**\n\n直接进入编辑模式，可以写入如下脚本，完成对 `https://raw.githubusercontent.com` 地址的代理：\n\n```js\naddEventListener('fetch', event => {\n  // event 包含\n  // actorState: 不知道是啥\n  // request: 请求包\n  // type: 类型，此处为 \"fetch\"\n  event.respondWith(handleRequest(event.request))\n})\n\nasync function handleRequest(request) {\n  // 获取请求的 url\n  const url = request.url\n  // 构造 URL 对象，方便解析出 pathname\n  const urlObj = new URL(url)\n  const pathname = urlObj.pathname\n\n  if (pathname === '/') {\n    // 访问根节点，直接返回空内容\n    return new Response('', { status: 200 })\n  } else {\n    // 抓取内容\n    const html = await getHtml('https://raw.githubusercontent.com' + pathname)\n    return new Response(html, { status: 200 })\n  }\n}\n\n/**\n * 获取指定地址的 html\n */\nasync function getHtml(url) {\n  const res = await fetch(url, { method: 'GET' })\n  if (res.status === 200) {\n    return await res.text()\n  }\n  return ''\n}\n```\n\n写好脚本后，使用 <key>Ctrl</key>/<key>Cmd</key> + <key>S</key> 进行保存即可。\n\n我们就可以浏览器测试了。\n\n比如 `nvm` 的安装脚本地址是：\n\n```\nhttps://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh\n```\n\n我们只需要更换为我们的域名即可(域名要换成你自己创建的)：\n```\nhttps://proxy.my.workers.dev/nvm-sh/nvm/v0.35.3/install.sh\n``` \n\n--END--","slug":"2020-2020-03-14-cloudflare-proxy","published":1,"updated":"2020-03-14T11:00:59.238Z","comments":1,"link":"","_id":"cka5ik8e5008dnybgud7rg0ky","content":"<p>昨天写了一篇文章，讲到可以使用 <code>nvm</code> 来部署 node。其中第一步安装的时候，要访问 github 的资源服务器。这一步的访问可能在国内非常不畅。这就需要有一个访问代理来协助。</p>\n<a id=\"more\"></a>\n\n<p>之前听说函数计算可以实现一些简单的功能。就比如访问代理，只需要函数计算实现参数接收、代理请求、结果返回三步就够了。正好我也一直比较好奇函数计算，就此也尝试下。</p>\n<p>原则上讲，国内的阿里云、腾讯云都可以实现函数计算服务，但是他们服务器在国内，无法实现访问 github。也就没有考虑。</p>\n<p>我选择了 cloudflare workers。和函数计算一个意思。对于个人使用的偶尔使用，免费的量非常充裕。主要就是限制每天 10 万次请求，最多 30 个 workers。足够了。</p>\n<p><strong>新建 workers</strong></p>\n<p>访问 <a href=\"https://workers.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">cloudflare workers</a> 页面，注册登录。</p>\n<p>cloudflare workers 提供本地编程的工具包，但是我的需求很简单，直接在线编辑测试就可以了。</p>\n<p><img src=\"https://cdn0.yukapril.com/20200314-cloudflare-proxy.png\" alt=\"cloudflare workers\"></p>\n<p>选择页面上的 <code>Start Building</code> 开始。之后可以选择右侧的 Workers 栏目进入。</p>\n<p>之后需要建立自己的子域，一般是 <code>xxxx.workers.dev</code> 形式。</p>\n<p>比如建立一个叫做 <code>my</code> 的子域，那么完整的子域地址是 <code>my.workers.dev</code>。</p>\n<p>创建每个 workers，系统会默认起名字，可以改的。比如我们要做一个文件代理，名字我们就叫做 <code>proxy</code>，那么这个 workers 的访问地址就是 <code>proxy.my.workers.dev</code>。</p>\n<p><strong>编写脚本</strong></p>\n<p>直接进入编辑模式，可以写入如下脚本，完成对 <code>https://raw.githubusercontent.com</code> 地址的代理：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addEventListener(<span class=\"string\">'fetch'</span>, event =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// event 包含</span></span><br><span class=\"line\">  <span class=\"comment\">// actorState: 不知道是啥</span></span><br><span class=\"line\">  <span class=\"comment\">// request: 请求包</span></span><br><span class=\"line\">  <span class=\"comment\">// type: 类型，此处为 \"fetch\"</span></span><br><span class=\"line\">  event.respondWith(handleRequest(event.request))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleRequest</span>(<span class=\"params\">request</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取请求的 url</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = request.url</span><br><span class=\"line\">  <span class=\"comment\">// 构造 URL 对象，方便解析出 pathname</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> urlObj = <span class=\"keyword\">new</span> URL(url)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> pathname = urlObj.pathname</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (pathname === <span class=\"string\">'/'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 访问根节点，直接返回空内容</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Response(<span class=\"string\">''</span>, &#123; <span class=\"attr\">status</span>: <span class=\"number\">200</span> &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 抓取内容</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> html = <span class=\"keyword\">await</span> getHtml(<span class=\"string\">'https://raw.githubusercontent.com'</span> + pathname)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Response(html, &#123; <span class=\"attr\">status</span>: <span class=\"number\">200</span> &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取指定地址的 html</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getHtml</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> fetch(url, &#123; <span class=\"attr\">method</span>: <span class=\"string\">'GET'</span> &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.status === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> res.text()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">''</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>写好脚本后，使用 <key>Ctrl</key>/<key>Cmd</key> + <key>S</key> 进行保存即可。</p>\n<p>我们就可以浏览器测试了。</p>\n<p>比如 <code>nvm</code> 的安装脚本地址是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh</span><br></pre></td></tr></table></figure>\n\n<p>我们只需要更换为我们的域名即可(域名要换成你自己创建的)：</p>\n<pre><code>https://proxy.my.workers.dev/nvm-sh/nvm/v0.35.3/install.sh</code></pre><p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>昨天写了一篇文章，讲到可以使用 <code>nvm</code> 来部署 node。其中第一步安装的时候，要访问 github 的资源服务器。这一步的访问可能在国内非常不畅。这就需要有一个访问代理来协助。</p>","more":"<p>之前听说函数计算可以实现一些简单的功能。就比如访问代理，只需要函数计算实现参数接收、代理请求、结果返回三步就够了。正好我也一直比较好奇函数计算，就此也尝试下。</p>\n<p>原则上讲，国内的阿里云、腾讯云都可以实现函数计算服务，但是他们服务器在国内，无法实现访问 github。也就没有考虑。</p>\n<p>我选择了 cloudflare workers。和函数计算一个意思。对于个人使用的偶尔使用，免费的量非常充裕。主要就是限制每天 10 万次请求，最多 30 个 workers。足够了。</p>\n<p><strong>新建 workers</strong></p>\n<p>访问 <a href=\"https://workers.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">cloudflare workers</a> 页面，注册登录。</p>\n<p>cloudflare workers 提供本地编程的工具包，但是我的需求很简单，直接在线编辑测试就可以了。</p>\n<p><img src=\"https://cdn0.yukapril.com/20200314-cloudflare-proxy.png\" alt=\"cloudflare workers\"></p>\n<p>选择页面上的 <code>Start Building</code> 开始。之后可以选择右侧的 Workers 栏目进入。</p>\n<p>之后需要建立自己的子域，一般是 <code>xxxx.workers.dev</code> 形式。</p>\n<p>比如建立一个叫做 <code>my</code> 的子域，那么完整的子域地址是 <code>my.workers.dev</code>。</p>\n<p>创建每个 workers，系统会默认起名字，可以改的。比如我们要做一个文件代理，名字我们就叫做 <code>proxy</code>，那么这个 workers 的访问地址就是 <code>proxy.my.workers.dev</code>。</p>\n<p><strong>编写脚本</strong></p>\n<p>直接进入编辑模式，可以写入如下脚本，完成对 <code>https://raw.githubusercontent.com</code> 地址的代理：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addEventListener(<span class=\"string\">'fetch'</span>, event =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// event 包含</span></span><br><span class=\"line\">  <span class=\"comment\">// actorState: 不知道是啥</span></span><br><span class=\"line\">  <span class=\"comment\">// request: 请求包</span></span><br><span class=\"line\">  <span class=\"comment\">// type: 类型，此处为 \"fetch\"</span></span><br><span class=\"line\">  event.respondWith(handleRequest(event.request))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleRequest</span>(<span class=\"params\">request</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取请求的 url</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = request.url</span><br><span class=\"line\">  <span class=\"comment\">// 构造 URL 对象，方便解析出 pathname</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> urlObj = <span class=\"keyword\">new</span> URL(url)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> pathname = urlObj.pathname</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (pathname === <span class=\"string\">'/'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 访问根节点，直接返回空内容</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Response(<span class=\"string\">''</span>, &#123; <span class=\"attr\">status</span>: <span class=\"number\">200</span> &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 抓取内容</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> html = <span class=\"keyword\">await</span> getHtml(<span class=\"string\">'https://raw.githubusercontent.com'</span> + pathname)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Response(html, &#123; <span class=\"attr\">status</span>: <span class=\"number\">200</span> &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取指定地址的 html</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getHtml</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> fetch(url, &#123; <span class=\"attr\">method</span>: <span class=\"string\">'GET'</span> &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.status === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> res.text()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">''</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>写好脚本后，使用 <key>Ctrl</key>/<key>Cmd</key> + <key>S</key> 进行保存即可。</p>\n<p>我们就可以浏览器测试了。</p>\n<p>比如 <code>nvm</code> 的安装脚本地址是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh</span><br></pre></td></tr></table></figure>\n\n<p>我们只需要更换为我们的域名即可(域名要换成你自己创建的)：</p>\n<pre><code>https://proxy.my.workers.dev/nvm-sh/nvm/v0.35.3/install.sh</code></pre><p>–END–</p>"},{"layout":"post","title":"MacOS 通知栏的好帮手 日历 系统信息 多种花样","date":"2020-03-18T22:34:00.000Z","photos":["https://cdn0.yukapril.com/2020-03-18-notification-bar-1.png-wm.white"],"_content":"\n一直在关注通知栏的号软件，突然用上了 BitBar，觉得不错，就把在用的软件汇总介绍下。\n\n<!-- more -->\n\n## 日历 Itsycal\n\n对于从 Windows 转过来的用户，估计最难受的就是没办法直接看日历了。之前用 Windows 的时候，开会讨论日期、项目排期，随手一点时间，就能看到日历，简直太方便。\n\n通过 Itsycal，我们可以模拟出一个日期。点击后展示出日历。\n\n![Itsycal 效果](https://cdn0.yukapril.com/2020-03-18-notification-bar-1.png-wm.white)\n\nItsycal 效果比较清爽简约，此外还支持暗色模式。授权后，可以显示一周内的日历行为。\n\n我觉得只显示日期效果比较好。当然你也可以让它显示时间。需要在设置里面输入日期的格式。具体的时间配置方法可以参考官方[配置文档](https://www.mowglii.com/itsycal/datetime.html)。配置好后，按住 <key>command</key>，可以拖动到系统时间旁边。\n\n**Itsycal**\n\n* 官网 [https://www.mowglii.com/itsycal](https://www.mowglii.com/itsycal)\n* 价格：免费。\n\n> 除此外，下文的 iStat Menus 也可以模拟日历，不过配置相对来说更复杂一些，而且 iStat Menus 还是收费的。效果可以参考下图。\n> \n> 好处可能就是字体大一点、彩色一点、支持显示多地区时间。\n> \n> 一开始我没购买 iStat Menus 前，都是用的 Itsycal，也习惯了。反而不适应这个效果。\n> \n> 不过 iStat Menus 启动比较慢，不确定启动慢是否会影响在通知栏的位置。反正我不推荐用它。\n> \n> ![iStat Menus 效果](https://cdn0.yukapril.com/2020-03-18-notification-bar-2.png-wm.white)\n\n## 系统设备信息 iStat Menus\n\n用笔记本时候，有时会觉得 CPU 不够用，总喜欢开着 “活动监视器” 查看那个程序占着 CPU。其实 Windows 下我也一直开着 “资源管理器” 😂。\n\n![iStat Menus 系统监控](https://cdn0.yukapril.com/2020-03-18-notification-bar-3.png-wm.white)\n\n找了半天，也就是 iStat Menus 最好用了。监控 CPU、内存、硬盘、网速等不在话下。什么软件占用的多、持续图表信息，很全面。配置好后相当满意。而且用起来，基本上好几个月都不会遇到崩溃，非常稳定。\n\n![iStat Menus 复杂的配置](https://cdn0.yukapril.com/2020-03-18-notification-bar-4.png-wm.black)\n\n缺点就是初步上手配置比较复杂，每个栏目都要自己拖拽等配置，还要理解啥是“合并”。而且首次配置很容易卡死。\n\n我建议它还是做系统监控显示比较好。其他最多比较喜爱的估计是电源功能。可以显示蓝牙键盘、鼠标、耳机的电量。恩，这个功能实在！\n\n其他的遗憾，应该就是收费软件了。虽然不贵，但不支持插件。功能就是列出的这些。\n\n**iStat Menus**\n\n* 官网：[https://bjango.com/mac/istatmenus](https://bjango.com/mac/istatmenus)\n* 价格：单独授权 RMB 50 元 / 家庭套餐 RMB 70 元。\n\n## BitBar\n\n最近我刚刚安装的软件，比较喜欢。主要是可以自定义。\n\n简单说来，可以使用常见的你喜欢的编程语言，编写一些逻辑，之后把想看到的内容，一次打印出来就可以了。BitBar 支持定时执行你的脚本。\n\n此外，点击后，它支持打开链接、执行脚本。虽然看着功能太简单了，但是执行脚本可以不显示终端，这几乎相当于什么都能做了。\n\n定时执行上，它支持秒、分钟、小时、天。最少间隔 1 秒。对于想用它在通知栏做简单动画是不可能了，1秒刷新一次，会显得动画帧率太低卡顿。而且每次执行，看样子会重新从硬盘读取脚本，这么频繁感觉不太好。我认为合理的时间间隔应该和需求有关，主要分布在四个频率上：\n* 10 秒 / 1 分钟：高频，第一时间刷新，总能看到最新消息（如邮件）\n* 10 分钟：低频触发，也不失去消息的及时性（如订阅新闻）\n* 30 分钟 / 1 小时：少量触发，能收到消息就好（如爬取数据）\n* 1 天：每次启动后执行一次，之后几乎不执行刷新（如展示个性内容）\n\n社区还算丰富，官网也提供了不少现成的脚本，不过绝大部分感觉都不适合我。\n\n![BitBar 做的读取 Feedly 未读条数](https://cdn0.yukapril.com/2020-03-18-notification-bar-5.png-wm.white)\n\n这两天，我做过跑马灯（没啥用，就是练习试试）、未读消息数（非常爱用），还有一个小红心提示（没卵用，就是好看）。\n\n未来应用上，我认为它的插件主要体现在以下几个方面：\n\n* **能定时运行**。适合做定时检查，之后消息提示类的功能。比如邮件、天气、金融、资源剩余、定时爬虫之类等。\n* **醒目显示**。只要不全屏，你就能看到它。比如展示喜欢的效果（图片、提示语）、任务提醒、IP显示之类等。\n* **常用功能、工作流**。在醒目的位置，点击一下，即可完成一个任务。比如点击一个栏目打开研发常用的软件，点击另一个栏目打开调试用的程序等。或点击一个栏目，展示常用短语，点击短语完成复制等。\n* **快捷开关**。对一些系统或功能进行开关控制。比如一键切换暗色模式、一键断网等。\n\n之后，我应该会有单独文章来写 BitBar 如何上手。\n\n**BitBar**\n\n* 官网：[https://getbitbar.com](https://getbitbar.com)\n* 价格：开源，免费\n\n## Shuttle\n\n 好像半年前用过 Shuttle，不过重新安装发现和之前配置不太一样了。可能是我记错了。\n \n 之前有几个项目，总是要不停地合并代码、安装、构建、发布。每次都要使用命令行逐一操作：\n \n * `cd` 到项目路径\n * 更新代码\n * 合并代码\n * 人工检查\n * `npm install` 安装项目依赖\n * `npm run build` 项目构建\n * 打开项目构建好的目录\n\n有时候一天就要好几次。实在受不了，找到了个软件（好像就是 Shuttle）。\n\n它是使用配置文件完成功能配置。当时我记得每组栏目，可以配置模式：打开指定网址、启动某个软件、启动命令行等。\n\n当时我就是使用它的启动命令行并执行=写好的 sh 脚本。简直不要太爽！\n\n不过现在来看，Shuttle 主要是提供 ssh 链接功能，其他的功能我没找到介绍。可能是我记错了软件，也可能是介绍文档变化了。\n\n因为现在不用它了，也就没有截图了。\n\n**Shuttle**\n\n* 官网：[https://fitztrev.github.io/shuttle](https://fitztrev.github.io/shuttle/)\n* 价格：开源，免费\n\n--END--","source":"_posts/2020/2020-03-18-notification-bar.md","raw":"---\nlayout: post\ntitle: MacOS 通知栏的好帮手 日历 系统信息 多种花样 \ndate: 2020-03-18 22:34:00 GMT+0800\ncategories: [软件]\ntags:  [iStat Menus,Itsycal,BitBar]\nphotos: [https://cdn0.yukapril.com/2020-03-18-notification-bar-1.png-wm.white]\n---\n\n一直在关注通知栏的号软件，突然用上了 BitBar，觉得不错，就把在用的软件汇总介绍下。\n\n<!-- more -->\n\n## 日历 Itsycal\n\n对于从 Windows 转过来的用户，估计最难受的就是没办法直接看日历了。之前用 Windows 的时候，开会讨论日期、项目排期，随手一点时间，就能看到日历，简直太方便。\n\n通过 Itsycal，我们可以模拟出一个日期。点击后展示出日历。\n\n![Itsycal 效果](https://cdn0.yukapril.com/2020-03-18-notification-bar-1.png-wm.white)\n\nItsycal 效果比较清爽简约，此外还支持暗色模式。授权后，可以显示一周内的日历行为。\n\n我觉得只显示日期效果比较好。当然你也可以让它显示时间。需要在设置里面输入日期的格式。具体的时间配置方法可以参考官方[配置文档](https://www.mowglii.com/itsycal/datetime.html)。配置好后，按住 <key>command</key>，可以拖动到系统时间旁边。\n\n**Itsycal**\n\n* 官网 [https://www.mowglii.com/itsycal](https://www.mowglii.com/itsycal)\n* 价格：免费。\n\n> 除此外，下文的 iStat Menus 也可以模拟日历，不过配置相对来说更复杂一些，而且 iStat Menus 还是收费的。效果可以参考下图。\n> \n> 好处可能就是字体大一点、彩色一点、支持显示多地区时间。\n> \n> 一开始我没购买 iStat Menus 前，都是用的 Itsycal，也习惯了。反而不适应这个效果。\n> \n> 不过 iStat Menus 启动比较慢，不确定启动慢是否会影响在通知栏的位置。反正我不推荐用它。\n> \n> ![iStat Menus 效果](https://cdn0.yukapril.com/2020-03-18-notification-bar-2.png-wm.white)\n\n## 系统设备信息 iStat Menus\n\n用笔记本时候，有时会觉得 CPU 不够用，总喜欢开着 “活动监视器” 查看那个程序占着 CPU。其实 Windows 下我也一直开着 “资源管理器” 😂。\n\n![iStat Menus 系统监控](https://cdn0.yukapril.com/2020-03-18-notification-bar-3.png-wm.white)\n\n找了半天，也就是 iStat Menus 最好用了。监控 CPU、内存、硬盘、网速等不在话下。什么软件占用的多、持续图表信息，很全面。配置好后相当满意。而且用起来，基本上好几个月都不会遇到崩溃，非常稳定。\n\n![iStat Menus 复杂的配置](https://cdn0.yukapril.com/2020-03-18-notification-bar-4.png-wm.black)\n\n缺点就是初步上手配置比较复杂，每个栏目都要自己拖拽等配置，还要理解啥是“合并”。而且首次配置很容易卡死。\n\n我建议它还是做系统监控显示比较好。其他最多比较喜爱的估计是电源功能。可以显示蓝牙键盘、鼠标、耳机的电量。恩，这个功能实在！\n\n其他的遗憾，应该就是收费软件了。虽然不贵，但不支持插件。功能就是列出的这些。\n\n**iStat Menus**\n\n* 官网：[https://bjango.com/mac/istatmenus](https://bjango.com/mac/istatmenus)\n* 价格：单独授权 RMB 50 元 / 家庭套餐 RMB 70 元。\n\n## BitBar\n\n最近我刚刚安装的软件，比较喜欢。主要是可以自定义。\n\n简单说来，可以使用常见的你喜欢的编程语言，编写一些逻辑，之后把想看到的内容，一次打印出来就可以了。BitBar 支持定时执行你的脚本。\n\n此外，点击后，它支持打开链接、执行脚本。虽然看着功能太简单了，但是执行脚本可以不显示终端，这几乎相当于什么都能做了。\n\n定时执行上，它支持秒、分钟、小时、天。最少间隔 1 秒。对于想用它在通知栏做简单动画是不可能了，1秒刷新一次，会显得动画帧率太低卡顿。而且每次执行，看样子会重新从硬盘读取脚本，这么频繁感觉不太好。我认为合理的时间间隔应该和需求有关，主要分布在四个频率上：\n* 10 秒 / 1 分钟：高频，第一时间刷新，总能看到最新消息（如邮件）\n* 10 分钟：低频触发，也不失去消息的及时性（如订阅新闻）\n* 30 分钟 / 1 小时：少量触发，能收到消息就好（如爬取数据）\n* 1 天：每次启动后执行一次，之后几乎不执行刷新（如展示个性内容）\n\n社区还算丰富，官网也提供了不少现成的脚本，不过绝大部分感觉都不适合我。\n\n![BitBar 做的读取 Feedly 未读条数](https://cdn0.yukapril.com/2020-03-18-notification-bar-5.png-wm.white)\n\n这两天，我做过跑马灯（没啥用，就是练习试试）、未读消息数（非常爱用），还有一个小红心提示（没卵用，就是好看）。\n\n未来应用上，我认为它的插件主要体现在以下几个方面：\n\n* **能定时运行**。适合做定时检查，之后消息提示类的功能。比如邮件、天气、金融、资源剩余、定时爬虫之类等。\n* **醒目显示**。只要不全屏，你就能看到它。比如展示喜欢的效果（图片、提示语）、任务提醒、IP显示之类等。\n* **常用功能、工作流**。在醒目的位置，点击一下，即可完成一个任务。比如点击一个栏目打开研发常用的软件，点击另一个栏目打开调试用的程序等。或点击一个栏目，展示常用短语，点击短语完成复制等。\n* **快捷开关**。对一些系统或功能进行开关控制。比如一键切换暗色模式、一键断网等。\n\n之后，我应该会有单独文章来写 BitBar 如何上手。\n\n**BitBar**\n\n* 官网：[https://getbitbar.com](https://getbitbar.com)\n* 价格：开源，免费\n\n## Shuttle\n\n 好像半年前用过 Shuttle，不过重新安装发现和之前配置不太一样了。可能是我记错了。\n \n 之前有几个项目，总是要不停地合并代码、安装、构建、发布。每次都要使用命令行逐一操作：\n \n * `cd` 到项目路径\n * 更新代码\n * 合并代码\n * 人工检查\n * `npm install` 安装项目依赖\n * `npm run build` 项目构建\n * 打开项目构建好的目录\n\n有时候一天就要好几次。实在受不了，找到了个软件（好像就是 Shuttle）。\n\n它是使用配置文件完成功能配置。当时我记得每组栏目，可以配置模式：打开指定网址、启动某个软件、启动命令行等。\n\n当时我就是使用它的启动命令行并执行=写好的 sh 脚本。简直不要太爽！\n\n不过现在来看，Shuttle 主要是提供 ssh 链接功能，其他的功能我没找到介绍。可能是我记错了软件，也可能是介绍文档变化了。\n\n因为现在不用它了，也就没有截图了。\n\n**Shuttle**\n\n* 官网：[https://fitztrev.github.io/shuttle](https://fitztrev.github.io/shuttle/)\n* 价格：开源，免费\n\n--END--","slug":"2020-2020-03-18-notification-bar","published":1,"updated":"2020-03-18T14:34:36.512Z","comments":1,"link":"","_id":"cka5ik8e6008hnybgfxoibh8b","content":"<p>一直在关注通知栏的号软件，突然用上了 BitBar，觉得不错，就把在用的软件汇总介绍下。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"日历-Itsycal\"><a href=\"#日历-Itsycal\" class=\"headerlink\" title=\"日历 Itsycal\"></a>日历 Itsycal</h2><p>对于从 Windows 转过来的用户，估计最难受的就是没办法直接看日历了。之前用 Windows 的时候，开会讨论日期、项目排期，随手一点时间，就能看到日历，简直太方便。</p>\n<p>通过 Itsycal，我们可以模拟出一个日期。点击后展示出日历。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-03-18-notification-bar-1.png-wm.white\" alt=\"Itsycal 效果\"></p>\n<p>Itsycal 效果比较清爽简约，此外还支持暗色模式。授权后，可以显示一周内的日历行为。</p>\n<p>我觉得只显示日期效果比较好。当然你也可以让它显示时间。需要在设置里面输入日期的格式。具体的时间配置方法可以参考官方<a href=\"https://www.mowglii.com/itsycal/datetime.html\" target=\"_blank\" rel=\"noopener\">配置文档</a>。配置好后，按住 <key>command</key>，可以拖动到系统时间旁边。</p>\n<p><strong>Itsycal</strong></p>\n<ul>\n<li>官网 <a href=\"https://www.mowglii.com/itsycal\" target=\"_blank\" rel=\"noopener\">https://www.mowglii.com/itsycal</a></li>\n<li>价格：免费。</li>\n</ul>\n<blockquote>\n<p>除此外，下文的 iStat Menus 也可以模拟日历，不过配置相对来说更复杂一些，而且 iStat Menus 还是收费的。效果可以参考下图。</p>\n<p>好处可能就是字体大一点、彩色一点、支持显示多地区时间。</p>\n<p>一开始我没购买 iStat Menus 前，都是用的 Itsycal，也习惯了。反而不适应这个效果。</p>\n<p>不过 iStat Menus 启动比较慢，不确定启动慢是否会影响在通知栏的位置。反正我不推荐用它。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-03-18-notification-bar-2.png-wm.white\" alt=\"iStat Menus 效果\"></p>\n</blockquote>\n<h2 id=\"系统设备信息-iStat-Menus\"><a href=\"#系统设备信息-iStat-Menus\" class=\"headerlink\" title=\"系统设备信息 iStat Menus\"></a>系统设备信息 iStat Menus</h2><p>用笔记本时候，有时会觉得 CPU 不够用，总喜欢开着 “活动监视器” 查看那个程序占着 CPU。其实 Windows 下我也一直开着 “资源管理器” 😂。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-03-18-notification-bar-3.png-wm.white\" alt=\"iStat Menus 系统监控\"></p>\n<p>找了半天，也就是 iStat Menus 最好用了。监控 CPU、内存、硬盘、网速等不在话下。什么软件占用的多、持续图表信息，很全面。配置好后相当满意。而且用起来，基本上好几个月都不会遇到崩溃，非常稳定。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-03-18-notification-bar-4.png-wm.black\" alt=\"iStat Menus 复杂的配置\"></p>\n<p>缺点就是初步上手配置比较复杂，每个栏目都要自己拖拽等配置，还要理解啥是“合并”。而且首次配置很容易卡死。</p>\n<p>我建议它还是做系统监控显示比较好。其他最多比较喜爱的估计是电源功能。可以显示蓝牙键盘、鼠标、耳机的电量。恩，这个功能实在！</p>\n<p>其他的遗憾，应该就是收费软件了。虽然不贵，但不支持插件。功能就是列出的这些。</p>\n<p><strong>iStat Menus</strong></p>\n<ul>\n<li>官网：<a href=\"https://bjango.com/mac/istatmenus\" target=\"_blank\" rel=\"noopener\">https://bjango.com/mac/istatmenus</a></li>\n<li>价格：单独授权 RMB 50 元 / 家庭套餐 RMB 70 元。</li>\n</ul>\n<h2 id=\"BitBar\"><a href=\"#BitBar\" class=\"headerlink\" title=\"BitBar\"></a>BitBar</h2><p>最近我刚刚安装的软件，比较喜欢。主要是可以自定义。</p>\n<p>简单说来，可以使用常见的你喜欢的编程语言，编写一些逻辑，之后把想看到的内容，一次打印出来就可以了。BitBar 支持定时执行你的脚本。</p>\n<p>此外，点击后，它支持打开链接、执行脚本。虽然看着功能太简单了，但是执行脚本可以不显示终端，这几乎相当于什么都能做了。</p>\n<p>定时执行上，它支持秒、分钟、小时、天。最少间隔 1 秒。对于想用它在通知栏做简单动画是不可能了，1秒刷新一次，会显得动画帧率太低卡顿。而且每次执行，看样子会重新从硬盘读取脚本，这么频繁感觉不太好。我认为合理的时间间隔应该和需求有关，主要分布在四个频率上：</p>\n<ul>\n<li>10 秒 / 1 分钟：高频，第一时间刷新，总能看到最新消息（如邮件）</li>\n<li>10 分钟：低频触发，也不失去消息的及时性（如订阅新闻）</li>\n<li>30 分钟 / 1 小时：少量触发，能收到消息就好（如爬取数据）</li>\n<li>1 天：每次启动后执行一次，之后几乎不执行刷新（如展示个性内容）</li>\n</ul>\n<p>社区还算丰富，官网也提供了不少现成的脚本，不过绝大部分感觉都不适合我。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-03-18-notification-bar-5.png-wm.white\" alt=\"BitBar 做的读取 Feedly 未读条数\"></p>\n<p>这两天，我做过跑马灯（没啥用，就是练习试试）、未读消息数（非常爱用），还有一个小红心提示（没卵用，就是好看）。</p>\n<p>未来应用上，我认为它的插件主要体现在以下几个方面：</p>\n<ul>\n<li><strong>能定时运行</strong>。适合做定时检查，之后消息提示类的功能。比如邮件、天气、金融、资源剩余、定时爬虫之类等。</li>\n<li><strong>醒目显示</strong>。只要不全屏，你就能看到它。比如展示喜欢的效果（图片、提示语）、任务提醒、IP显示之类等。</li>\n<li><strong>常用功能、工作流</strong>。在醒目的位置，点击一下，即可完成一个任务。比如点击一个栏目打开研发常用的软件，点击另一个栏目打开调试用的程序等。或点击一个栏目，展示常用短语，点击短语完成复制等。</li>\n<li><strong>快捷开关</strong>。对一些系统或功能进行开关控制。比如一键切换暗色模式、一键断网等。</li>\n</ul>\n<p>之后，我应该会有单独文章来写 BitBar 如何上手。</p>\n<p><strong>BitBar</strong></p>\n<ul>\n<li>官网：<a href=\"https://getbitbar.com\" target=\"_blank\" rel=\"noopener\">https://getbitbar.com</a></li>\n<li>价格：开源，免费</li>\n</ul>\n<h2 id=\"Shuttle\"><a href=\"#Shuttle\" class=\"headerlink\" title=\"Shuttle\"></a>Shuttle</h2><p> 好像半年前用过 Shuttle，不过重新安装发现和之前配置不太一样了。可能是我记错了。</p>\n<p> 之前有几个项目，总是要不停地合并代码、安装、构建、发布。每次都要使用命令行逐一操作：</p>\n<ul>\n<li><code>cd</code> 到项目路径</li>\n<li>更新代码</li>\n<li>合并代码</li>\n<li>人工检查</li>\n<li><code>npm install</code> 安装项目依赖</li>\n<li><code>npm run build</code> 项目构建</li>\n<li>打开项目构建好的目录</li>\n</ul>\n<p>有时候一天就要好几次。实在受不了，找到了个软件（好像就是 Shuttle）。</p>\n<p>它是使用配置文件完成功能配置。当时我记得每组栏目，可以配置模式：打开指定网址、启动某个软件、启动命令行等。</p>\n<p>当时我就是使用它的启动命令行并执行=写好的 sh 脚本。简直不要太爽！</p>\n<p>不过现在来看，Shuttle 主要是提供 ssh 链接功能，其他的功能我没找到介绍。可能是我记错了软件，也可能是介绍文档变化了。</p>\n<p>因为现在不用它了，也就没有截图了。</p>\n<p><strong>Shuttle</strong></p>\n<ul>\n<li>官网：<a href=\"https://fitztrev.github.io/shuttle/\" target=\"_blank\" rel=\"noopener\">https://fitztrev.github.io/shuttle</a></li>\n<li>价格：开源，免费</li>\n</ul>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>一直在关注通知栏的号软件，突然用上了 BitBar，觉得不错，就把在用的软件汇总介绍下。</p>","more":"<h2 id=\"日历-Itsycal\"><a href=\"#日历-Itsycal\" class=\"headerlink\" title=\"日历 Itsycal\"></a>日历 Itsycal</h2><p>对于从 Windows 转过来的用户，估计最难受的就是没办法直接看日历了。之前用 Windows 的时候，开会讨论日期、项目排期，随手一点时间，就能看到日历，简直太方便。</p>\n<p>通过 Itsycal，我们可以模拟出一个日期。点击后展示出日历。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-03-18-notification-bar-1.png-wm.white\" alt=\"Itsycal 效果\"></p>\n<p>Itsycal 效果比较清爽简约，此外还支持暗色模式。授权后，可以显示一周内的日历行为。</p>\n<p>我觉得只显示日期效果比较好。当然你也可以让它显示时间。需要在设置里面输入日期的格式。具体的时间配置方法可以参考官方<a href=\"https://www.mowglii.com/itsycal/datetime.html\" target=\"_blank\" rel=\"noopener\">配置文档</a>。配置好后，按住 <key>command</key>，可以拖动到系统时间旁边。</p>\n<p><strong>Itsycal</strong></p>\n<ul>\n<li>官网 <a href=\"https://www.mowglii.com/itsycal\" target=\"_blank\" rel=\"noopener\">https://www.mowglii.com/itsycal</a></li>\n<li>价格：免费。</li>\n</ul>\n<blockquote>\n<p>除此外，下文的 iStat Menus 也可以模拟日历，不过配置相对来说更复杂一些，而且 iStat Menus 还是收费的。效果可以参考下图。</p>\n<p>好处可能就是字体大一点、彩色一点、支持显示多地区时间。</p>\n<p>一开始我没购买 iStat Menus 前，都是用的 Itsycal，也习惯了。反而不适应这个效果。</p>\n<p>不过 iStat Menus 启动比较慢，不确定启动慢是否会影响在通知栏的位置。反正我不推荐用它。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-03-18-notification-bar-2.png-wm.white\" alt=\"iStat Menus 效果\"></p>\n</blockquote>\n<h2 id=\"系统设备信息-iStat-Menus\"><a href=\"#系统设备信息-iStat-Menus\" class=\"headerlink\" title=\"系统设备信息 iStat Menus\"></a>系统设备信息 iStat Menus</h2><p>用笔记本时候，有时会觉得 CPU 不够用，总喜欢开着 “活动监视器” 查看那个程序占着 CPU。其实 Windows 下我也一直开着 “资源管理器” 😂。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-03-18-notification-bar-3.png-wm.white\" alt=\"iStat Menus 系统监控\"></p>\n<p>找了半天，也就是 iStat Menus 最好用了。监控 CPU、内存、硬盘、网速等不在话下。什么软件占用的多、持续图表信息，很全面。配置好后相当满意。而且用起来，基本上好几个月都不会遇到崩溃，非常稳定。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-03-18-notification-bar-4.png-wm.black\" alt=\"iStat Menus 复杂的配置\"></p>\n<p>缺点就是初步上手配置比较复杂，每个栏目都要自己拖拽等配置，还要理解啥是“合并”。而且首次配置很容易卡死。</p>\n<p>我建议它还是做系统监控显示比较好。其他最多比较喜爱的估计是电源功能。可以显示蓝牙键盘、鼠标、耳机的电量。恩，这个功能实在！</p>\n<p>其他的遗憾，应该就是收费软件了。虽然不贵，但不支持插件。功能就是列出的这些。</p>\n<p><strong>iStat Menus</strong></p>\n<ul>\n<li>官网：<a href=\"https://bjango.com/mac/istatmenus\" target=\"_blank\" rel=\"noopener\">https://bjango.com/mac/istatmenus</a></li>\n<li>价格：单独授权 RMB 50 元 / 家庭套餐 RMB 70 元。</li>\n</ul>\n<h2 id=\"BitBar\"><a href=\"#BitBar\" class=\"headerlink\" title=\"BitBar\"></a>BitBar</h2><p>最近我刚刚安装的软件，比较喜欢。主要是可以自定义。</p>\n<p>简单说来，可以使用常见的你喜欢的编程语言，编写一些逻辑，之后把想看到的内容，一次打印出来就可以了。BitBar 支持定时执行你的脚本。</p>\n<p>此外，点击后，它支持打开链接、执行脚本。虽然看着功能太简单了，但是执行脚本可以不显示终端，这几乎相当于什么都能做了。</p>\n<p>定时执行上，它支持秒、分钟、小时、天。最少间隔 1 秒。对于想用它在通知栏做简单动画是不可能了，1秒刷新一次，会显得动画帧率太低卡顿。而且每次执行，看样子会重新从硬盘读取脚本，这么频繁感觉不太好。我认为合理的时间间隔应该和需求有关，主要分布在四个频率上：</p>\n<ul>\n<li>10 秒 / 1 分钟：高频，第一时间刷新，总能看到最新消息（如邮件）</li>\n<li>10 分钟：低频触发，也不失去消息的及时性（如订阅新闻）</li>\n<li>30 分钟 / 1 小时：少量触发，能收到消息就好（如爬取数据）</li>\n<li>1 天：每次启动后执行一次，之后几乎不执行刷新（如展示个性内容）</li>\n</ul>\n<p>社区还算丰富，官网也提供了不少现成的脚本，不过绝大部分感觉都不适合我。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-03-18-notification-bar-5.png-wm.white\" alt=\"BitBar 做的读取 Feedly 未读条数\"></p>\n<p>这两天，我做过跑马灯（没啥用，就是练习试试）、未读消息数（非常爱用），还有一个小红心提示（没卵用，就是好看）。</p>\n<p>未来应用上，我认为它的插件主要体现在以下几个方面：</p>\n<ul>\n<li><strong>能定时运行</strong>。适合做定时检查，之后消息提示类的功能。比如邮件、天气、金融、资源剩余、定时爬虫之类等。</li>\n<li><strong>醒目显示</strong>。只要不全屏，你就能看到它。比如展示喜欢的效果（图片、提示语）、任务提醒、IP显示之类等。</li>\n<li><strong>常用功能、工作流</strong>。在醒目的位置，点击一下，即可完成一个任务。比如点击一个栏目打开研发常用的软件，点击另一个栏目打开调试用的程序等。或点击一个栏目，展示常用短语，点击短语完成复制等。</li>\n<li><strong>快捷开关</strong>。对一些系统或功能进行开关控制。比如一键切换暗色模式、一键断网等。</li>\n</ul>\n<p>之后，我应该会有单独文章来写 BitBar 如何上手。</p>\n<p><strong>BitBar</strong></p>\n<ul>\n<li>官网：<a href=\"https://getbitbar.com\" target=\"_blank\" rel=\"noopener\">https://getbitbar.com</a></li>\n<li>价格：开源，免费</li>\n</ul>\n<h2 id=\"Shuttle\"><a href=\"#Shuttle\" class=\"headerlink\" title=\"Shuttle\"></a>Shuttle</h2><p> 好像半年前用过 Shuttle，不过重新安装发现和之前配置不太一样了。可能是我记错了。</p>\n<p> 之前有几个项目，总是要不停地合并代码、安装、构建、发布。每次都要使用命令行逐一操作：</p>\n<ul>\n<li><code>cd</code> 到项目路径</li>\n<li>更新代码</li>\n<li>合并代码</li>\n<li>人工检查</li>\n<li><code>npm install</code> 安装项目依赖</li>\n<li><code>npm run build</code> 项目构建</li>\n<li>打开项目构建好的目录</li>\n</ul>\n<p>有时候一天就要好几次。实在受不了，找到了个软件（好像就是 Shuttle）。</p>\n<p>它是使用配置文件完成功能配置。当时我记得每组栏目，可以配置模式：打开指定网址、启动某个软件、启动命令行等。</p>\n<p>当时我就是使用它的启动命令行并执行=写好的 sh 脚本。简直不要太爽！</p>\n<p>不过现在来看，Shuttle 主要是提供 ssh 链接功能，其他的功能我没找到介绍。可能是我记错了软件，也可能是介绍文档变化了。</p>\n<p>因为现在不用它了，也就没有截图了。</p>\n<p><strong>Shuttle</strong></p>\n<ul>\n<li>官网：<a href=\"https://fitztrev.github.io/shuttle/\" target=\"_blank\" rel=\"noopener\">https://fitztrev.github.io/shuttle</a></li>\n<li>价格：开源，免费</li>\n</ul>\n<p>–END–</p>"},{"layout":"post","title":"购入 AirPods Pro，常见问题问答","date":"2020-04-07T22:00:00.000Z","_content":"\n在家办公会议太多了，正巧自己原本的 SONY 蓝牙耳机也用了快 10 年，就想着换个吧。才知道现在有百亿补贴活动，AirPods Pro 大概 1400+，AirPods 2 无线版大概 1200+。\n\n<!-- more -->\n\n本来特别想买 AirPods 2，主要是自己带着苹果 EarPods 的耳机特别舒服。而同样是入耳式的 SONY，带着估计不到半小时耳朵就有明显的听诊器效应，所以一开始特别抗拒 AirPods Pro。不过最终还是因为价格真香，本着买新不买旧，也就是多花 200 左右，所以还是入手了 AirPods Pro。\n\n![曾经的 SONY](https://cdn0.yukapril.com/2020-04-07-airpods-pro-1.JPG-wm.black)\n\n当时 1470+ 购买的，结果第二天补贴更厉害了，大概到手价可以再便宜 80 左右。今天又看了下，基本上徘徊在 1390+ 左右。\n\n由于我有 Apple Watch 5。也支持无线充电，所以对充电方式特别感兴趣。\n\n**开箱**\n\n苹果的东西，外包装一向干净简洁。\n\n![外包装](https://cdn0.yukapril.com/2020-04-07-airpods-pro-2.JPG-wm.white)\n\n打开后，AirPods Pro 映入眼帘。包装纸包裹非常整齐，我尝试撕开了下，很有阻力。内部已经放好了两枚耳机。\n\n拿出上层托板，下侧是盘好的数据线，USB Type-C 接口到苹果 Lightning 接口。可惜我没有 Type-C的设备，这根数据线就没什么用了。中间是备选的耳塞，默认耳机上的耳塞是 M 号，这里还有 S 和 L 号可以选择。\n\n![AirPods Pro 配件全家福](https://cdn0.yukapril.com/2020-04-07-airpods-pro-3.JPG-wm.white)\n\n耳机盒正面，有一个灯，有橘色和绿色之分。开盖是磁吸形式的。可惜耳机盒不能立起来，只能躺着。不过 AirPods 系列好像也是不能立起来的。\n\n![AirPods Pro 正面](https://cdn0.yukapril.com/2020-04-07-airpods-pro-4.JPG-wm.white)\n\n![耳机全貌](https://cdn0.yukapril.com/2020-04-07-airpods-pro-5.JPG-wm.white)\n\n背面，有一个按钮，按下后，方便其他设备链接。\n![AirPods Pro 背面](https://cdn0.yukapril.com/2020-04-07-airpods-pro-6.JPG-wm.white)\n\n**问答**\n\n买 AirPods Pro 之前，自己就有很多疑问，所以这次就算是给自己的解答吧。\n\n* AirPods Pro 和 AirPods 2 区别?\n\nAirPods Pro 除了外观差异（变短了、操作区变成了按压）外，重要的就是增加了降噪，据说目前是降噪水准最好的蓝牙入耳耳机。AirPods 2 区分有线版（使用数据线充电）和无线版（可以 QI 无线充电或者有线充电），但是 AirPods Pro 不区分，只有无线充电版。\n\n* AirPods Pro 和 AirPods 2 外观有多少差异？\n\nAirPods Pro 短了，变成了矮胖子，AirPods 2 一如既往的个高。此外 AirPods Pro 不能立起来，AirPods 2 好像也不行。\n\n同时 AirPods Pro 耳机边缘变成了按压式操作，AirPods 2 还是触摸式。\n\n* 我有无线充电器了，可以通用吗？\n\nAirPods Pro 是标准的 QI 无线充电标准，只要符合标准的就可以。常规的给手机充电的无线充电板只要是 QI 协议应该都可以。所以无线充电设备成本较低。\n\n不过，Apple Watch 无线充电器不可以给它充电！Apple Watch 无线充电器据说是改版的 QI 协议。通过一些手法或许才能给 AirPods Pro 充电。不过我失败了。\n\n> 你也可以试试：使用 Apple Watch 无线充电器先给手表充电，此时激活充电设备。然后迅速把手表拿开，换成 AirPods Pro，AirPods Pro 灯会亮起橘色，后续熄灭（正常）。但还是不能冲进去电。\n\n* AirPods Pro 充电不亮灯\n\n是的，AirPods Pro 和 AirPods 不同了。AirPods Pro 充电会亮橘色，过几秒就会消失。开盖、背后的蓝牙连接按钮，会亮绿色，也是过几秒消失。\n\n* 两副耳机如何充电？\n\n耳机底部，有两个半圆的金属边，是充电电极。耳机充电盒内部也有对应的电片。耳机放入后，有明显的磁力吸附，而且由于模具的设计，左右耳机不能放反，否则不能放进去。\n\n* 耳机带着舒服吗？\n\n对我来讲，佩戴肯定不如传统的 EarPods（AirPods）。比之前的 SONY 好一些，一方面设计更加优秀，另一方面是它有“透明模式”来减少不适感。估计我可以连续佩戴一小时。老的 SONY 为半小时。\n\n耳机边的虚拟按压条，按动后有“咔”的轻微声音提示，体验不错，但是感觉虚拟按钮没那么自然。\n\n* 降噪体验如何？\n\n所有的入耳带硅胶帽的耳机都能提供物理的降噪而且效果尚可。AirPods Pro 通过外置麦克风检测噪音，内部耳机进行反向噪音来进行抵消，确实会更好一些。大概是：\n\n在屋里带着耳机办公，10 米外的客厅的普通说话声音几乎听不到，小孩的吵闹可以听到，但是听不清。\n\n如果是 1-2 米左右的沟通，正常说话声音可以听到，需要仔细听，如果说话稍微轻盈，会有部分内容靠看嘴型来猜。\n\n有人进屋，走到你身后，根本感觉不到。\n\n从未用过其他任何一款降噪耳机，所以没有比较。\n\n* AirPods Pro 内置降噪模式、透明模式区别？\n\nAirPods Pro 有三种模式：降噪模式、关闭、透明模式。\n\n降噪模式就很好理解。使用背部的麦克风检测噪音并播放反向噪音进行抵消。是最费电的模式。\n\n关闭，就是关闭背部麦克风，使得 AirPods Pro 变成了普通的耳机，噪音通过耳机缝隙少量传入。\n\n透明模式，通过背部麦克风将噪音收集，并通过耳机播放出来。可以有效缓解不适感。\n\n* 如何连接设备？\n\n连接 iPhone。直接把 AirPods Pro 接近 iPhone 就好了，保持在 5 厘米范围内，自动 iPhone 弹窗。\n\n连接其他设备，或者切换连接的手机。按下充电盒背部的按钮，之后其他设备可以发现 AirPods Pro。\n\n* 如何调节耳机音量？\n\n直接在 iPhone 或其它设备上调节。此外如果你也有 Apple Watch，默认带有一个 Now Playing，可以在这里面调节。这个 APP 还可以调整 AirPods Pro 的三种模式。\n\n* 如何切换三种模式？\n\n首先连接 iPhone。桌面下，上滑动，打开快捷菜单，选择音量，会可以看到三种模式切换。\n\n还可以去“设置”-“蓝牙”，选择 AirPods Pro，改名、切换模式、耳机按住功能都在这里控制。\n\n有 Apple Watch 的话，可以参考上面的“如何调节耳机音量”，也可以切换。\n\n其它设备？你为啥要买 AirPods Pro？\n\n* 如何查看电量？\n\n接近 iPhone，之后开盖。弹窗分别显示耳机以及耳机盒的电量。\n\n或者负一屏，增加一个电池小组件，可以看到。前提是已经连接 AirPods Pro。恩，要么耳机使用中，要么打开耳机盒，否则不会连接的。\n\n大概也就想到这些内容，这次就这样吧。\n\n--END--","source":"_posts/2020/2020-04-07-airpods-pro.md","raw":"---\nlayout: post\ntitle: 购入 AirPods Pro，常见问题问答 \ndate: 2020-04-07 22:00:00 GMT+0800\ncategories: [外设]\ntags:  [AirPods Pro]\n---\n\n在家办公会议太多了，正巧自己原本的 SONY 蓝牙耳机也用了快 10 年，就想着换个吧。才知道现在有百亿补贴活动，AirPods Pro 大概 1400+，AirPods 2 无线版大概 1200+。\n\n<!-- more -->\n\n本来特别想买 AirPods 2，主要是自己带着苹果 EarPods 的耳机特别舒服。而同样是入耳式的 SONY，带着估计不到半小时耳朵就有明显的听诊器效应，所以一开始特别抗拒 AirPods Pro。不过最终还是因为价格真香，本着买新不买旧，也就是多花 200 左右，所以还是入手了 AirPods Pro。\n\n![曾经的 SONY](https://cdn0.yukapril.com/2020-04-07-airpods-pro-1.JPG-wm.black)\n\n当时 1470+ 购买的，结果第二天补贴更厉害了，大概到手价可以再便宜 80 左右。今天又看了下，基本上徘徊在 1390+ 左右。\n\n由于我有 Apple Watch 5。也支持无线充电，所以对充电方式特别感兴趣。\n\n**开箱**\n\n苹果的东西，外包装一向干净简洁。\n\n![外包装](https://cdn0.yukapril.com/2020-04-07-airpods-pro-2.JPG-wm.white)\n\n打开后，AirPods Pro 映入眼帘。包装纸包裹非常整齐，我尝试撕开了下，很有阻力。内部已经放好了两枚耳机。\n\n拿出上层托板，下侧是盘好的数据线，USB Type-C 接口到苹果 Lightning 接口。可惜我没有 Type-C的设备，这根数据线就没什么用了。中间是备选的耳塞，默认耳机上的耳塞是 M 号，这里还有 S 和 L 号可以选择。\n\n![AirPods Pro 配件全家福](https://cdn0.yukapril.com/2020-04-07-airpods-pro-3.JPG-wm.white)\n\n耳机盒正面，有一个灯，有橘色和绿色之分。开盖是磁吸形式的。可惜耳机盒不能立起来，只能躺着。不过 AirPods 系列好像也是不能立起来的。\n\n![AirPods Pro 正面](https://cdn0.yukapril.com/2020-04-07-airpods-pro-4.JPG-wm.white)\n\n![耳机全貌](https://cdn0.yukapril.com/2020-04-07-airpods-pro-5.JPG-wm.white)\n\n背面，有一个按钮，按下后，方便其他设备链接。\n![AirPods Pro 背面](https://cdn0.yukapril.com/2020-04-07-airpods-pro-6.JPG-wm.white)\n\n**问答**\n\n买 AirPods Pro 之前，自己就有很多疑问，所以这次就算是给自己的解答吧。\n\n* AirPods Pro 和 AirPods 2 区别?\n\nAirPods Pro 除了外观差异（变短了、操作区变成了按压）外，重要的就是增加了降噪，据说目前是降噪水准最好的蓝牙入耳耳机。AirPods 2 区分有线版（使用数据线充电）和无线版（可以 QI 无线充电或者有线充电），但是 AirPods Pro 不区分，只有无线充电版。\n\n* AirPods Pro 和 AirPods 2 外观有多少差异？\n\nAirPods Pro 短了，变成了矮胖子，AirPods 2 一如既往的个高。此外 AirPods Pro 不能立起来，AirPods 2 好像也不行。\n\n同时 AirPods Pro 耳机边缘变成了按压式操作，AirPods 2 还是触摸式。\n\n* 我有无线充电器了，可以通用吗？\n\nAirPods Pro 是标准的 QI 无线充电标准，只要符合标准的就可以。常规的给手机充电的无线充电板只要是 QI 协议应该都可以。所以无线充电设备成本较低。\n\n不过，Apple Watch 无线充电器不可以给它充电！Apple Watch 无线充电器据说是改版的 QI 协议。通过一些手法或许才能给 AirPods Pro 充电。不过我失败了。\n\n> 你也可以试试：使用 Apple Watch 无线充电器先给手表充电，此时激活充电设备。然后迅速把手表拿开，换成 AirPods Pro，AirPods Pro 灯会亮起橘色，后续熄灭（正常）。但还是不能冲进去电。\n\n* AirPods Pro 充电不亮灯\n\n是的，AirPods Pro 和 AirPods 不同了。AirPods Pro 充电会亮橘色，过几秒就会消失。开盖、背后的蓝牙连接按钮，会亮绿色，也是过几秒消失。\n\n* 两副耳机如何充电？\n\n耳机底部，有两个半圆的金属边，是充电电极。耳机充电盒内部也有对应的电片。耳机放入后，有明显的磁力吸附，而且由于模具的设计，左右耳机不能放反，否则不能放进去。\n\n* 耳机带着舒服吗？\n\n对我来讲，佩戴肯定不如传统的 EarPods（AirPods）。比之前的 SONY 好一些，一方面设计更加优秀，另一方面是它有“透明模式”来减少不适感。估计我可以连续佩戴一小时。老的 SONY 为半小时。\n\n耳机边的虚拟按压条，按动后有“咔”的轻微声音提示，体验不错，但是感觉虚拟按钮没那么自然。\n\n* 降噪体验如何？\n\n所有的入耳带硅胶帽的耳机都能提供物理的降噪而且效果尚可。AirPods Pro 通过外置麦克风检测噪音，内部耳机进行反向噪音来进行抵消，确实会更好一些。大概是：\n\n在屋里带着耳机办公，10 米外的客厅的普通说话声音几乎听不到，小孩的吵闹可以听到，但是听不清。\n\n如果是 1-2 米左右的沟通，正常说话声音可以听到，需要仔细听，如果说话稍微轻盈，会有部分内容靠看嘴型来猜。\n\n有人进屋，走到你身后，根本感觉不到。\n\n从未用过其他任何一款降噪耳机，所以没有比较。\n\n* AirPods Pro 内置降噪模式、透明模式区别？\n\nAirPods Pro 有三种模式：降噪模式、关闭、透明模式。\n\n降噪模式就很好理解。使用背部的麦克风检测噪音并播放反向噪音进行抵消。是最费电的模式。\n\n关闭，就是关闭背部麦克风，使得 AirPods Pro 变成了普通的耳机，噪音通过耳机缝隙少量传入。\n\n透明模式，通过背部麦克风将噪音收集，并通过耳机播放出来。可以有效缓解不适感。\n\n* 如何连接设备？\n\n连接 iPhone。直接把 AirPods Pro 接近 iPhone 就好了，保持在 5 厘米范围内，自动 iPhone 弹窗。\n\n连接其他设备，或者切换连接的手机。按下充电盒背部的按钮，之后其他设备可以发现 AirPods Pro。\n\n* 如何调节耳机音量？\n\n直接在 iPhone 或其它设备上调节。此外如果你也有 Apple Watch，默认带有一个 Now Playing，可以在这里面调节。这个 APP 还可以调整 AirPods Pro 的三种模式。\n\n* 如何切换三种模式？\n\n首先连接 iPhone。桌面下，上滑动，打开快捷菜单，选择音量，会可以看到三种模式切换。\n\n还可以去“设置”-“蓝牙”，选择 AirPods Pro，改名、切换模式、耳机按住功能都在这里控制。\n\n有 Apple Watch 的话，可以参考上面的“如何调节耳机音量”，也可以切换。\n\n其它设备？你为啥要买 AirPods Pro？\n\n* 如何查看电量？\n\n接近 iPhone，之后开盖。弹窗分别显示耳机以及耳机盒的电量。\n\n或者负一屏，增加一个电池小组件，可以看到。前提是已经连接 AirPods Pro。恩，要么耳机使用中，要么打开耳机盒，否则不会连接的。\n\n大概也就想到这些内容，这次就这样吧。\n\n--END--","slug":"2020-2020-04-07-airpods-pro","published":1,"updated":"2020-04-07T14:04:30.628Z","comments":1,"photos":[],"link":"","_id":"cka5ik8e8008knybgymz2fk6j","content":"<p>在家办公会议太多了，正巧自己原本的 SONY 蓝牙耳机也用了快 10 年，就想着换个吧。才知道现在有百亿补贴活动，AirPods Pro 大概 1400+，AirPods 2 无线版大概 1200+。</p>\n<a id=\"more\"></a>\n\n<p>本来特别想买 AirPods 2，主要是自己带着苹果 EarPods 的耳机特别舒服。而同样是入耳式的 SONY，带着估计不到半小时耳朵就有明显的听诊器效应，所以一开始特别抗拒 AirPods Pro。不过最终还是因为价格真香，本着买新不买旧，也就是多花 200 左右，所以还是入手了 AirPods Pro。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-04-07-airpods-pro-1.JPG-wm.black\" alt=\"曾经的 SONY\"></p>\n<p>当时 1470+ 购买的，结果第二天补贴更厉害了，大概到手价可以再便宜 80 左右。今天又看了下，基本上徘徊在 1390+ 左右。</p>\n<p>由于我有 Apple Watch 5。也支持无线充电，所以对充电方式特别感兴趣。</p>\n<p><strong>开箱</strong></p>\n<p>苹果的东西，外包装一向干净简洁。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-04-07-airpods-pro-2.JPG-wm.white\" alt=\"外包装\"></p>\n<p>打开后，AirPods Pro 映入眼帘。包装纸包裹非常整齐，我尝试撕开了下，很有阻力。内部已经放好了两枚耳机。</p>\n<p>拿出上层托板，下侧是盘好的数据线，USB Type-C 接口到苹果 Lightning 接口。可惜我没有 Type-C的设备，这根数据线就没什么用了。中间是备选的耳塞，默认耳机上的耳塞是 M 号，这里还有 S 和 L 号可以选择。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-04-07-airpods-pro-3.JPG-wm.white\" alt=\"AirPods Pro 配件全家福\"></p>\n<p>耳机盒正面，有一个灯，有橘色和绿色之分。开盖是磁吸形式的。可惜耳机盒不能立起来，只能躺着。不过 AirPods 系列好像也是不能立起来的。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-04-07-airpods-pro-4.JPG-wm.white\" alt=\"AirPods Pro 正面\"></p>\n<p><img src=\"https://cdn0.yukapril.com/2020-04-07-airpods-pro-5.JPG-wm.white\" alt=\"耳机全貌\"></p>\n<p>背面，有一个按钮，按下后，方便其他设备链接。<br><img src=\"https://cdn0.yukapril.com/2020-04-07-airpods-pro-6.JPG-wm.white\" alt=\"AirPods Pro 背面\"></p>\n<p><strong>问答</strong></p>\n<p>买 AirPods Pro 之前，自己就有很多疑问，所以这次就算是给自己的解答吧。</p>\n<ul>\n<li>AirPods Pro 和 AirPods 2 区别?</li>\n</ul>\n<p>AirPods Pro 除了外观差异（变短了、操作区变成了按压）外，重要的就是增加了降噪，据说目前是降噪水准最好的蓝牙入耳耳机。AirPods 2 区分有线版（使用数据线充电）和无线版（可以 QI 无线充电或者有线充电），但是 AirPods Pro 不区分，只有无线充电版。</p>\n<ul>\n<li>AirPods Pro 和 AirPods 2 外观有多少差异？</li>\n</ul>\n<p>AirPods Pro 短了，变成了矮胖子，AirPods 2 一如既往的个高。此外 AirPods Pro 不能立起来，AirPods 2 好像也不行。</p>\n<p>同时 AirPods Pro 耳机边缘变成了按压式操作，AirPods 2 还是触摸式。</p>\n<ul>\n<li>我有无线充电器了，可以通用吗？</li>\n</ul>\n<p>AirPods Pro 是标准的 QI 无线充电标准，只要符合标准的就可以。常规的给手机充电的无线充电板只要是 QI 协议应该都可以。所以无线充电设备成本较低。</p>\n<p>不过，Apple Watch 无线充电器不可以给它充电！Apple Watch 无线充电器据说是改版的 QI 协议。通过一些手法或许才能给 AirPods Pro 充电。不过我失败了。</p>\n<blockquote>\n<p>你也可以试试：使用 Apple Watch 无线充电器先给手表充电，此时激活充电设备。然后迅速把手表拿开，换成 AirPods Pro，AirPods Pro 灯会亮起橘色，后续熄灭（正常）。但还是不能冲进去电。</p>\n</blockquote>\n<ul>\n<li>AirPods Pro 充电不亮灯</li>\n</ul>\n<p>是的，AirPods Pro 和 AirPods 不同了。AirPods Pro 充电会亮橘色，过几秒就会消失。开盖、背后的蓝牙连接按钮，会亮绿色，也是过几秒消失。</p>\n<ul>\n<li>两副耳机如何充电？</li>\n</ul>\n<p>耳机底部，有两个半圆的金属边，是充电电极。耳机充电盒内部也有对应的电片。耳机放入后，有明显的磁力吸附，而且由于模具的设计，左右耳机不能放反，否则不能放进去。</p>\n<ul>\n<li>耳机带着舒服吗？</li>\n</ul>\n<p>对我来讲，佩戴肯定不如传统的 EarPods（AirPods）。比之前的 SONY 好一些，一方面设计更加优秀，另一方面是它有“透明模式”来减少不适感。估计我可以连续佩戴一小时。老的 SONY 为半小时。</p>\n<p>耳机边的虚拟按压条，按动后有“咔”的轻微声音提示，体验不错，但是感觉虚拟按钮没那么自然。</p>\n<ul>\n<li>降噪体验如何？</li>\n</ul>\n<p>所有的入耳带硅胶帽的耳机都能提供物理的降噪而且效果尚可。AirPods Pro 通过外置麦克风检测噪音，内部耳机进行反向噪音来进行抵消，确实会更好一些。大概是：</p>\n<p>在屋里带着耳机办公，10 米外的客厅的普通说话声音几乎听不到，小孩的吵闹可以听到，但是听不清。</p>\n<p>如果是 1-2 米左右的沟通，正常说话声音可以听到，需要仔细听，如果说话稍微轻盈，会有部分内容靠看嘴型来猜。</p>\n<p>有人进屋，走到你身后，根本感觉不到。</p>\n<p>从未用过其他任何一款降噪耳机，所以没有比较。</p>\n<ul>\n<li>AirPods Pro 内置降噪模式、透明模式区别？</li>\n</ul>\n<p>AirPods Pro 有三种模式：降噪模式、关闭、透明模式。</p>\n<p>降噪模式就很好理解。使用背部的麦克风检测噪音并播放反向噪音进行抵消。是最费电的模式。</p>\n<p>关闭，就是关闭背部麦克风，使得 AirPods Pro 变成了普通的耳机，噪音通过耳机缝隙少量传入。</p>\n<p>透明模式，通过背部麦克风将噪音收集，并通过耳机播放出来。可以有效缓解不适感。</p>\n<ul>\n<li>如何连接设备？</li>\n</ul>\n<p>连接 iPhone。直接把 AirPods Pro 接近 iPhone 就好了，保持在 5 厘米范围内，自动 iPhone 弹窗。</p>\n<p>连接其他设备，或者切换连接的手机。按下充电盒背部的按钮，之后其他设备可以发现 AirPods Pro。</p>\n<ul>\n<li>如何调节耳机音量？</li>\n</ul>\n<p>直接在 iPhone 或其它设备上调节。此外如果你也有 Apple Watch，默认带有一个 Now Playing，可以在这里面调节。这个 APP 还可以调整 AirPods Pro 的三种模式。</p>\n<ul>\n<li>如何切换三种模式？</li>\n</ul>\n<p>首先连接 iPhone。桌面下，上滑动，打开快捷菜单，选择音量，会可以看到三种模式切换。</p>\n<p>还可以去“设置”-“蓝牙”，选择 AirPods Pro，改名、切换模式、耳机按住功能都在这里控制。</p>\n<p>有 Apple Watch 的话，可以参考上面的“如何调节耳机音量”，也可以切换。</p>\n<p>其它设备？你为啥要买 AirPods Pro？</p>\n<ul>\n<li>如何查看电量？</li>\n</ul>\n<p>接近 iPhone，之后开盖。弹窗分别显示耳机以及耳机盒的电量。</p>\n<p>或者负一屏，增加一个电池小组件，可以看到。前提是已经连接 AirPods Pro。恩，要么耳机使用中，要么打开耳机盒，否则不会连接的。</p>\n<p>大概也就想到这些内容，这次就这样吧。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>在家办公会议太多了，正巧自己原本的 SONY 蓝牙耳机也用了快 10 年，就想着换个吧。才知道现在有百亿补贴活动，AirPods Pro 大概 1400+，AirPods 2 无线版大概 1200+。</p>","more":"<p>本来特别想买 AirPods 2，主要是自己带着苹果 EarPods 的耳机特别舒服。而同样是入耳式的 SONY，带着估计不到半小时耳朵就有明显的听诊器效应，所以一开始特别抗拒 AirPods Pro。不过最终还是因为价格真香，本着买新不买旧，也就是多花 200 左右，所以还是入手了 AirPods Pro。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-04-07-airpods-pro-1.JPG-wm.black\" alt=\"曾经的 SONY\"></p>\n<p>当时 1470+ 购买的，结果第二天补贴更厉害了，大概到手价可以再便宜 80 左右。今天又看了下，基本上徘徊在 1390+ 左右。</p>\n<p>由于我有 Apple Watch 5。也支持无线充电，所以对充电方式特别感兴趣。</p>\n<p><strong>开箱</strong></p>\n<p>苹果的东西，外包装一向干净简洁。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-04-07-airpods-pro-2.JPG-wm.white\" alt=\"外包装\"></p>\n<p>打开后，AirPods Pro 映入眼帘。包装纸包裹非常整齐，我尝试撕开了下，很有阻力。内部已经放好了两枚耳机。</p>\n<p>拿出上层托板，下侧是盘好的数据线，USB Type-C 接口到苹果 Lightning 接口。可惜我没有 Type-C的设备，这根数据线就没什么用了。中间是备选的耳塞，默认耳机上的耳塞是 M 号，这里还有 S 和 L 号可以选择。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-04-07-airpods-pro-3.JPG-wm.white\" alt=\"AirPods Pro 配件全家福\"></p>\n<p>耳机盒正面，有一个灯，有橘色和绿色之分。开盖是磁吸形式的。可惜耳机盒不能立起来，只能躺着。不过 AirPods 系列好像也是不能立起来的。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-04-07-airpods-pro-4.JPG-wm.white\" alt=\"AirPods Pro 正面\"></p>\n<p><img src=\"https://cdn0.yukapril.com/2020-04-07-airpods-pro-5.JPG-wm.white\" alt=\"耳机全貌\"></p>\n<p>背面，有一个按钮，按下后，方便其他设备链接。<br><img src=\"https://cdn0.yukapril.com/2020-04-07-airpods-pro-6.JPG-wm.white\" alt=\"AirPods Pro 背面\"></p>\n<p><strong>问答</strong></p>\n<p>买 AirPods Pro 之前，自己就有很多疑问，所以这次就算是给自己的解答吧。</p>\n<ul>\n<li>AirPods Pro 和 AirPods 2 区别?</li>\n</ul>\n<p>AirPods Pro 除了外观差异（变短了、操作区变成了按压）外，重要的就是增加了降噪，据说目前是降噪水准最好的蓝牙入耳耳机。AirPods 2 区分有线版（使用数据线充电）和无线版（可以 QI 无线充电或者有线充电），但是 AirPods Pro 不区分，只有无线充电版。</p>\n<ul>\n<li>AirPods Pro 和 AirPods 2 外观有多少差异？</li>\n</ul>\n<p>AirPods Pro 短了，变成了矮胖子，AirPods 2 一如既往的个高。此外 AirPods Pro 不能立起来，AirPods 2 好像也不行。</p>\n<p>同时 AirPods Pro 耳机边缘变成了按压式操作，AirPods 2 还是触摸式。</p>\n<ul>\n<li>我有无线充电器了，可以通用吗？</li>\n</ul>\n<p>AirPods Pro 是标准的 QI 无线充电标准，只要符合标准的就可以。常规的给手机充电的无线充电板只要是 QI 协议应该都可以。所以无线充电设备成本较低。</p>\n<p>不过，Apple Watch 无线充电器不可以给它充电！Apple Watch 无线充电器据说是改版的 QI 协议。通过一些手法或许才能给 AirPods Pro 充电。不过我失败了。</p>\n<blockquote>\n<p>你也可以试试：使用 Apple Watch 无线充电器先给手表充电，此时激活充电设备。然后迅速把手表拿开，换成 AirPods Pro，AirPods Pro 灯会亮起橘色，后续熄灭（正常）。但还是不能冲进去电。</p>\n</blockquote>\n<ul>\n<li>AirPods Pro 充电不亮灯</li>\n</ul>\n<p>是的，AirPods Pro 和 AirPods 不同了。AirPods Pro 充电会亮橘色，过几秒就会消失。开盖、背后的蓝牙连接按钮，会亮绿色，也是过几秒消失。</p>\n<ul>\n<li>两副耳机如何充电？</li>\n</ul>\n<p>耳机底部，有两个半圆的金属边，是充电电极。耳机充电盒内部也有对应的电片。耳机放入后，有明显的磁力吸附，而且由于模具的设计，左右耳机不能放反，否则不能放进去。</p>\n<ul>\n<li>耳机带着舒服吗？</li>\n</ul>\n<p>对我来讲，佩戴肯定不如传统的 EarPods（AirPods）。比之前的 SONY 好一些，一方面设计更加优秀，另一方面是它有“透明模式”来减少不适感。估计我可以连续佩戴一小时。老的 SONY 为半小时。</p>\n<p>耳机边的虚拟按压条，按动后有“咔”的轻微声音提示，体验不错，但是感觉虚拟按钮没那么自然。</p>\n<ul>\n<li>降噪体验如何？</li>\n</ul>\n<p>所有的入耳带硅胶帽的耳机都能提供物理的降噪而且效果尚可。AirPods Pro 通过外置麦克风检测噪音，内部耳机进行反向噪音来进行抵消，确实会更好一些。大概是：</p>\n<p>在屋里带着耳机办公，10 米外的客厅的普通说话声音几乎听不到，小孩的吵闹可以听到，但是听不清。</p>\n<p>如果是 1-2 米左右的沟通，正常说话声音可以听到，需要仔细听，如果说话稍微轻盈，会有部分内容靠看嘴型来猜。</p>\n<p>有人进屋，走到你身后，根本感觉不到。</p>\n<p>从未用过其他任何一款降噪耳机，所以没有比较。</p>\n<ul>\n<li>AirPods Pro 内置降噪模式、透明模式区别？</li>\n</ul>\n<p>AirPods Pro 有三种模式：降噪模式、关闭、透明模式。</p>\n<p>降噪模式就很好理解。使用背部的麦克风检测噪音并播放反向噪音进行抵消。是最费电的模式。</p>\n<p>关闭，就是关闭背部麦克风，使得 AirPods Pro 变成了普通的耳机，噪音通过耳机缝隙少量传入。</p>\n<p>透明模式，通过背部麦克风将噪音收集，并通过耳机播放出来。可以有效缓解不适感。</p>\n<ul>\n<li>如何连接设备？</li>\n</ul>\n<p>连接 iPhone。直接把 AirPods Pro 接近 iPhone 就好了，保持在 5 厘米范围内，自动 iPhone 弹窗。</p>\n<p>连接其他设备，或者切换连接的手机。按下充电盒背部的按钮，之后其他设备可以发现 AirPods Pro。</p>\n<ul>\n<li>如何调节耳机音量？</li>\n</ul>\n<p>直接在 iPhone 或其它设备上调节。此外如果你也有 Apple Watch，默认带有一个 Now Playing，可以在这里面调节。这个 APP 还可以调整 AirPods Pro 的三种模式。</p>\n<ul>\n<li>如何切换三种模式？</li>\n</ul>\n<p>首先连接 iPhone。桌面下，上滑动，打开快捷菜单，选择音量，会可以看到三种模式切换。</p>\n<p>还可以去“设置”-“蓝牙”，选择 AirPods Pro，改名、切换模式、耳机按住功能都在这里控制。</p>\n<p>有 Apple Watch 的话，可以参考上面的“如何调节耳机音量”，也可以切换。</p>\n<p>其它设备？你为啥要买 AirPods Pro？</p>\n<ul>\n<li>如何查看电量？</li>\n</ul>\n<p>接近 iPhone，之后开盖。弹窗分别显示耳机以及耳机盒的电量。</p>\n<p>或者负一屏，增加一个电池小组件，可以看到。前提是已经连接 AirPods Pro。恩，要么耳机使用中，要么打开耳机盒，否则不会连接的。</p>\n<p>大概也就想到这些内容，这次就这样吧。</p>\n<p>–END–</p>"},{"layout":"post","title":"把 Windows、Linux 安装到外置硬盘(U盘)","date":"2020-04-21T21:34:00.000Z","_content":"\n我的主力机都是 Mac，但是偶尔也会用到 Windows，直接采用U盘安装和启动特别方便。最近在用 Linux，只能安装到虚拟机，效率大打折扣。也就在思考，Linux 可否和 Windows一样，安装为 U盘版？插上 U盘，控制启动顺序，直接进入 Linux？\n\n<!-- more -->\n\n正常来讲，不论现在你用的那个系统，在保证原系统的情况下，想直接换系统使用，无非就是虚拟机安装、U盘装或者再弄一台机器硬盘装。\n\n简单来说，区别如下：\n\n* 虚拟机：原系统与新系统同时运行，方便操作，缺点是非常吃机器资源，原系统和新系统都会受影响，尤其是非固态硬盘，特别慢。\n* 外置U盘(硬盘)装系统：由于只有一台主机，所以一次只能启动一个系统，更换系统要关机重启。可以发挥硬件所有性能，成本低廉。\n* 新电脑装：原系统与新系统同时运行，方便操作，可以发挥硬件所有性能。缺点是得花钱再买一台电脑。\n\n体验上，如果机器配置比较好，还是建议虚拟机，比较方便快捷。尤其是付费的虚拟机（parallels之类），还能做到交互，而且常规办公之类软件运行效率也还可以。除非是新的系统也需要非常高的性能，比如用大型软件、游戏等，否则优先推荐虚拟机。\n\n其次比较推荐U盘装系统，就是带块硬盘（U盘）就行了，临时使用非常合适。\n\n## 安装 Windows 到U盘\n\n由于 Windows 本身就有一个 Windows To Go 版本（WTG），相当于就是U盘版本。所以不用考虑安装原版 Windows 了。\n\n> 按照正常方法操作，可以保证装好的U盘版 Windows，在 Mac 电脑，普通 PC 都可以正常启动。\n\n**需要准备以下内容**\n\n* 一个 Windows 机器。没有的话，装个虚拟机版本的也行（但是你需要会配置虚拟机，来连接U盘）；\n* Windows 10 安装包，据说 Windows 8 的也可以；\n* 一个超过 32G 的高速U盘（移动硬盘），太小的装不下系统；\n* 下载 WTG 辅助工具（建议用第三方工具，而不是系统自带工具）。\n\n以上准备材料，在 Windows 下备好。\n\n**制作系统U盘方法**\n\n使用 WTG 辅助工具，制作 Windows 高速U盘。做好U盘就完事了。\n\n> 具体安装细节可以参考文章 [说走就走的「Windows」—— Windows To Go 制作详解](https://sspai.com/post/44699)\n\n**使用方法**\n\n在非 Mac 下使用：直接插上高速U盘，配置下开机启动顺序即可。很简单。\n\n在 Mac 下使用：需要特殊准备些东西。\n* 准备驱动。进入 MacOS 系统，打开 `启动转换助理` APP，选择 `操作`-`下载Windows支持软件`，保存到另一个U盘上。\n* 至少准备一个兼容 Windows 的鼠标。兼容的意思是，这个鼠标放在 Windows 机器上，你不用装驱动就能用。需要鼠标的原因是进入 Windows 后，Mac 键盘鼠标都不识别。至少使用鼠标来点击，外加屏幕虚拟键盘输入。\n* 由于需要至少 3 个 USB 设备（系统高速U盘、驱动U盘、鼠标），所以看下机器的 USB 口够不够，不够则还需要 USB Hub。\n\n准备好后，先插入U盘，按住 `option/alt` 同时再按开机键。使用键盘左右键选择 `EFI Boot` 并进入 Windows。\n\n进入 Windows 系统后，使用兼容鼠标（键盘）进行操作。完成配置信息。\n\n最后进入 Windows 桌面，把存有驱动的U盘插上，安装驱动即可。\n\n## 安装 Linux 到U盘\n\n我接触过 Ubuntu(Mint) 还有 Manjaro 两类 Linux。他们的安装大同小异，不熟悉流程的可以用虚拟机模拟体验下。简单来说，就是U盘启动，选择体验 Linux(Live CD)，进入桌面，双击 Install 图标来安装 Linux。\n\n下文内容，使用 Mint Linux 19 来说明。其他 Linux 基本类似。\n\n**几点重要说明**\n\n1. 以下有的操作必须在真实的机器上操作，虚拟机不行；\n2. 通过下文方法制作的系统高速U盘，在安装的机器上可以反复使用，但是更换机器，不保证可用。\n\n其中第二点，由于现在大部分机器都是 EFI 启动的，在不支持 EFI 的机器上，肯定启动不了。但同样支持 EFI 的机器，也不保证可用。我自己就是 MacBook Pro 安装好，正常使用。但是换到 iMac 上就不可用。\n\n**准备材料**\n\n* 要安装的系统 ISO 文件；\n* 安装系统临时用到的U盘，因为大部分机器没有光驱了，换做U盘代替，根据 ISO 文件大小而定，一般 4G 足够；\n* 将 ISO 文件写入安装U盘的软件，比如 Etcher 或者 rufus；\n* 一个超过 16G 的高速U盘（移动硬盘），太小的装不下系统和软件，建议最少 32G 以上；\n* 一台可以操作电脑，必须真机，虚拟机不行，未来就要经常在这台机器上启动Linux；\n* 细致的心。因为要真机上操作，有的危险步骤一旦操作错误可能影响这台电脑的系统。\n\n**制作系统U盘方法**\n\n1. 制作操作安装U盘\n    1. 电脑上安装 Etcher 或者 rufus，我推荐 Etcher，最简单还漂亮；\n    2. 插入临时用的小U盘，启动 Etcher，将 Linux ISO 拖入其中，此时前两步已经完成；如果你插入多个U盘，请自行选择用一个；\n    3. 点击 `Flash!` 等待完成。\n    ![Etcher](https://cdn0.yukapril.com/2020-04-21-u-pan-1.png-wm.white)\n2. 安装Linux到高速U盘\n  1. 以下步骤要在未来要常用来启动 Linux 的电脑上操作，务必小心；\n  2. 插入小U盘和装系统用的高速U盘（移动硬盘），开机。并调整启动顺序，用小U盘启动。\n  3. 正常加载 Linux，并进入安装界面，一直来到安装位置选择页，并选择“自定义位置安装” 之类选项；\n  4. 你可以见到如下图内容。通过容量可以看出来，`/dev/sda` 是我的 MacBook Pro 自带的 SSD 硬盘，`/dev/sdb` 是我插入并要安装 Linux 的 500G 移动硬盘， `/dev/sdc` 不用管，其实是 MacBook Pro 的读卡器。**我们要在计划装系统的盘上操作，其他盘不要点，也不要操作**。首先是看是否有分区，我的 `/dev/sdb` 没有分区了，如果你的有，点击对应的分区（是分区不是硬盘，可能叫做 `/dev/sdb1`）后点击下面的 `减号` 来删除，请删除干净。此外建议选中计划装系统的盘（是硬盘不是分区，比如截图是 `dev/sdb`），选择 `新建分区表` 来重建分区表；\n    ![Linux 分区管理](https://cdn0.yukapril.com/2020-04-21-u-pan-2.jpg-wm.white)\n  5. 删除干净后，我们来新建 EFI 启动分区。如下图，在空闲区上，点击 `加号` 新建分区。大小为 300-500MB 左右都行。如果计划装多个系统，可以多分配一点。分区类型为 `主分区`，用于 `EFI`；\n    ![建立 EFI 分区](https://cdn0.yukapril.com/2020-04-21-u-pan-3.jpg-wm.white)       \n  6. 接下来建立系统分区。选择空闲区上，点击 `加号` 新建分区。容量根据使用情况来定。我的截图是 150G。分区类型无所谓，哪一个都可以启动系统，但是选择 `主分区` 可以让编号更靠前，以后好管理。用于一般都是 `Ext4`，可以根据你的系统支持情况进行变通。最后挂载点选择 `/`；\n    ![建立系统分区](https://cdn0.yukapril.com/2020-04-21-u-pan-4.jpg-wm.white)\n  7. **非常重要**。选择 `安装启动引导器的设备`，改为你装 Linux 的硬盘，比如我的是 `/dev/sdb/` （我测试选择 EFI 分区 `/dev/sdb1` 也可以，不知道两者区别）；\n  8. 点击 `现在安装`，并完成后续相关设置，完成 Linux 的安装过程。\n\n**使用方法**\n\n在安装系统的机器上。直接插上装有 Linux 的高速U盘，配置下开机启动顺序即可，很简单。Mac 则是开机按住 `option/alt`，然后选择 `EFI Boot`。\n\n在非安装系统的机器上，我自己测试换了台 Mac 是不行的。普通 PC 机我没有，不确定具体情况。\n\n--END--","source":"_posts/2020/2020-04-21-u-pan.md","raw":"---\nlayout: post\ntitle: 把 Windows、Linux 安装到外置硬盘(U盘)\ndate: 2020-04-21 21:34:00 GMT+0800\ncategories: [技术]\ntags:  [U盘,Windows,Linux]\n---\n\n我的主力机都是 Mac，但是偶尔也会用到 Windows，直接采用U盘安装和启动特别方便。最近在用 Linux，只能安装到虚拟机，效率大打折扣。也就在思考，Linux 可否和 Windows一样，安装为 U盘版？插上 U盘，控制启动顺序，直接进入 Linux？\n\n<!-- more -->\n\n正常来讲，不论现在你用的那个系统，在保证原系统的情况下，想直接换系统使用，无非就是虚拟机安装、U盘装或者再弄一台机器硬盘装。\n\n简单来说，区别如下：\n\n* 虚拟机：原系统与新系统同时运行，方便操作，缺点是非常吃机器资源，原系统和新系统都会受影响，尤其是非固态硬盘，特别慢。\n* 外置U盘(硬盘)装系统：由于只有一台主机，所以一次只能启动一个系统，更换系统要关机重启。可以发挥硬件所有性能，成本低廉。\n* 新电脑装：原系统与新系统同时运行，方便操作，可以发挥硬件所有性能。缺点是得花钱再买一台电脑。\n\n体验上，如果机器配置比较好，还是建议虚拟机，比较方便快捷。尤其是付费的虚拟机（parallels之类），还能做到交互，而且常规办公之类软件运行效率也还可以。除非是新的系统也需要非常高的性能，比如用大型软件、游戏等，否则优先推荐虚拟机。\n\n其次比较推荐U盘装系统，就是带块硬盘（U盘）就行了，临时使用非常合适。\n\n## 安装 Windows 到U盘\n\n由于 Windows 本身就有一个 Windows To Go 版本（WTG），相当于就是U盘版本。所以不用考虑安装原版 Windows 了。\n\n> 按照正常方法操作，可以保证装好的U盘版 Windows，在 Mac 电脑，普通 PC 都可以正常启动。\n\n**需要准备以下内容**\n\n* 一个 Windows 机器。没有的话，装个虚拟机版本的也行（但是你需要会配置虚拟机，来连接U盘）；\n* Windows 10 安装包，据说 Windows 8 的也可以；\n* 一个超过 32G 的高速U盘（移动硬盘），太小的装不下系统；\n* 下载 WTG 辅助工具（建议用第三方工具，而不是系统自带工具）。\n\n以上准备材料，在 Windows 下备好。\n\n**制作系统U盘方法**\n\n使用 WTG 辅助工具，制作 Windows 高速U盘。做好U盘就完事了。\n\n> 具体安装细节可以参考文章 [说走就走的「Windows」—— Windows To Go 制作详解](https://sspai.com/post/44699)\n\n**使用方法**\n\n在非 Mac 下使用：直接插上高速U盘，配置下开机启动顺序即可。很简单。\n\n在 Mac 下使用：需要特殊准备些东西。\n* 准备驱动。进入 MacOS 系统，打开 `启动转换助理` APP，选择 `操作`-`下载Windows支持软件`，保存到另一个U盘上。\n* 至少准备一个兼容 Windows 的鼠标。兼容的意思是，这个鼠标放在 Windows 机器上，你不用装驱动就能用。需要鼠标的原因是进入 Windows 后，Mac 键盘鼠标都不识别。至少使用鼠标来点击，外加屏幕虚拟键盘输入。\n* 由于需要至少 3 个 USB 设备（系统高速U盘、驱动U盘、鼠标），所以看下机器的 USB 口够不够，不够则还需要 USB Hub。\n\n准备好后，先插入U盘，按住 `option/alt` 同时再按开机键。使用键盘左右键选择 `EFI Boot` 并进入 Windows。\n\n进入 Windows 系统后，使用兼容鼠标（键盘）进行操作。完成配置信息。\n\n最后进入 Windows 桌面，把存有驱动的U盘插上，安装驱动即可。\n\n## 安装 Linux 到U盘\n\n我接触过 Ubuntu(Mint) 还有 Manjaro 两类 Linux。他们的安装大同小异，不熟悉流程的可以用虚拟机模拟体验下。简单来说，就是U盘启动，选择体验 Linux(Live CD)，进入桌面，双击 Install 图标来安装 Linux。\n\n下文内容，使用 Mint Linux 19 来说明。其他 Linux 基本类似。\n\n**几点重要说明**\n\n1. 以下有的操作必须在真实的机器上操作，虚拟机不行；\n2. 通过下文方法制作的系统高速U盘，在安装的机器上可以反复使用，但是更换机器，不保证可用。\n\n其中第二点，由于现在大部分机器都是 EFI 启动的，在不支持 EFI 的机器上，肯定启动不了。但同样支持 EFI 的机器，也不保证可用。我自己就是 MacBook Pro 安装好，正常使用。但是换到 iMac 上就不可用。\n\n**准备材料**\n\n* 要安装的系统 ISO 文件；\n* 安装系统临时用到的U盘，因为大部分机器没有光驱了，换做U盘代替，根据 ISO 文件大小而定，一般 4G 足够；\n* 将 ISO 文件写入安装U盘的软件，比如 Etcher 或者 rufus；\n* 一个超过 16G 的高速U盘（移动硬盘），太小的装不下系统和软件，建议最少 32G 以上；\n* 一台可以操作电脑，必须真机，虚拟机不行，未来就要经常在这台机器上启动Linux；\n* 细致的心。因为要真机上操作，有的危险步骤一旦操作错误可能影响这台电脑的系统。\n\n**制作系统U盘方法**\n\n1. 制作操作安装U盘\n    1. 电脑上安装 Etcher 或者 rufus，我推荐 Etcher，最简单还漂亮；\n    2. 插入临时用的小U盘，启动 Etcher，将 Linux ISO 拖入其中，此时前两步已经完成；如果你插入多个U盘，请自行选择用一个；\n    3. 点击 `Flash!` 等待完成。\n    ![Etcher](https://cdn0.yukapril.com/2020-04-21-u-pan-1.png-wm.white)\n2. 安装Linux到高速U盘\n  1. 以下步骤要在未来要常用来启动 Linux 的电脑上操作，务必小心；\n  2. 插入小U盘和装系统用的高速U盘（移动硬盘），开机。并调整启动顺序，用小U盘启动。\n  3. 正常加载 Linux，并进入安装界面，一直来到安装位置选择页，并选择“自定义位置安装” 之类选项；\n  4. 你可以见到如下图内容。通过容量可以看出来，`/dev/sda` 是我的 MacBook Pro 自带的 SSD 硬盘，`/dev/sdb` 是我插入并要安装 Linux 的 500G 移动硬盘， `/dev/sdc` 不用管，其实是 MacBook Pro 的读卡器。**我们要在计划装系统的盘上操作，其他盘不要点，也不要操作**。首先是看是否有分区，我的 `/dev/sdb` 没有分区了，如果你的有，点击对应的分区（是分区不是硬盘，可能叫做 `/dev/sdb1`）后点击下面的 `减号` 来删除，请删除干净。此外建议选中计划装系统的盘（是硬盘不是分区，比如截图是 `dev/sdb`），选择 `新建分区表` 来重建分区表；\n    ![Linux 分区管理](https://cdn0.yukapril.com/2020-04-21-u-pan-2.jpg-wm.white)\n  5. 删除干净后，我们来新建 EFI 启动分区。如下图，在空闲区上，点击 `加号` 新建分区。大小为 300-500MB 左右都行。如果计划装多个系统，可以多分配一点。分区类型为 `主分区`，用于 `EFI`；\n    ![建立 EFI 分区](https://cdn0.yukapril.com/2020-04-21-u-pan-3.jpg-wm.white)       \n  6. 接下来建立系统分区。选择空闲区上，点击 `加号` 新建分区。容量根据使用情况来定。我的截图是 150G。分区类型无所谓，哪一个都可以启动系统，但是选择 `主分区` 可以让编号更靠前，以后好管理。用于一般都是 `Ext4`，可以根据你的系统支持情况进行变通。最后挂载点选择 `/`；\n    ![建立系统分区](https://cdn0.yukapril.com/2020-04-21-u-pan-4.jpg-wm.white)\n  7. **非常重要**。选择 `安装启动引导器的设备`，改为你装 Linux 的硬盘，比如我的是 `/dev/sdb/` （我测试选择 EFI 分区 `/dev/sdb1` 也可以，不知道两者区别）；\n  8. 点击 `现在安装`，并完成后续相关设置，完成 Linux 的安装过程。\n\n**使用方法**\n\n在安装系统的机器上。直接插上装有 Linux 的高速U盘，配置下开机启动顺序即可，很简单。Mac 则是开机按住 `option/alt`，然后选择 `EFI Boot`。\n\n在非安装系统的机器上，我自己测试换了台 Mac 是不行的。普通 PC 机我没有，不确定具体情况。\n\n--END--","slug":"2020-2020-04-21-u-pan","published":1,"updated":"2020-04-22T13:34:13.692Z","comments":1,"photos":[],"link":"","_id":"cka5ik8eb008onybggnyiq2mr","content":"<p>我的主力机都是 Mac，但是偶尔也会用到 Windows，直接采用U盘安装和启动特别方便。最近在用 Linux，只能安装到虚拟机，效率大打折扣。也就在思考，Linux 可否和 Windows一样，安装为 U盘版？插上 U盘，控制启动顺序，直接进入 Linux？</p>\n<a id=\"more\"></a>\n\n<p>正常来讲，不论现在你用的那个系统，在保证原系统的情况下，想直接换系统使用，无非就是虚拟机安装、U盘装或者再弄一台机器硬盘装。</p>\n<p>简单来说，区别如下：</p>\n<ul>\n<li>虚拟机：原系统与新系统同时运行，方便操作，缺点是非常吃机器资源，原系统和新系统都会受影响，尤其是非固态硬盘，特别慢。</li>\n<li>外置U盘(硬盘)装系统：由于只有一台主机，所以一次只能启动一个系统，更换系统要关机重启。可以发挥硬件所有性能，成本低廉。</li>\n<li>新电脑装：原系统与新系统同时运行，方便操作，可以发挥硬件所有性能。缺点是得花钱再买一台电脑。</li>\n</ul>\n<p>体验上，如果机器配置比较好，还是建议虚拟机，比较方便快捷。尤其是付费的虚拟机（parallels之类），还能做到交互，而且常规办公之类软件运行效率也还可以。除非是新的系统也需要非常高的性能，比如用大型软件、游戏等，否则优先推荐虚拟机。</p>\n<p>其次比较推荐U盘装系统，就是带块硬盘（U盘）就行了，临时使用非常合适。</p>\n<h2 id=\"安装-Windows-到U盘\"><a href=\"#安装-Windows-到U盘\" class=\"headerlink\" title=\"安装 Windows 到U盘\"></a>安装 Windows 到U盘</h2><p>由于 Windows 本身就有一个 Windows To Go 版本（WTG），相当于就是U盘版本。所以不用考虑安装原版 Windows 了。</p>\n<blockquote>\n<p>按照正常方法操作，可以保证装好的U盘版 Windows，在 Mac 电脑，普通 PC 都可以正常启动。</p>\n</blockquote>\n<p><strong>需要准备以下内容</strong></p>\n<ul>\n<li>一个 Windows 机器。没有的话，装个虚拟机版本的也行（但是你需要会配置虚拟机，来连接U盘）；</li>\n<li>Windows 10 安装包，据说 Windows 8 的也可以；</li>\n<li>一个超过 32G 的高速U盘（移动硬盘），太小的装不下系统；</li>\n<li>下载 WTG 辅助工具（建议用第三方工具，而不是系统自带工具）。</li>\n</ul>\n<p>以上准备材料，在 Windows 下备好。</p>\n<p><strong>制作系统U盘方法</strong></p>\n<p>使用 WTG 辅助工具，制作 Windows 高速U盘。做好U盘就完事了。</p>\n<blockquote>\n<p>具体安装细节可以参考文章 <a href=\"https://sspai.com/post/44699\" target=\"_blank\" rel=\"noopener\">说走就走的「Windows」—— Windows To Go 制作详解</a></p>\n</blockquote>\n<p><strong>使用方法</strong></p>\n<p>在非 Mac 下使用：直接插上高速U盘，配置下开机启动顺序即可。很简单。</p>\n<p>在 Mac 下使用：需要特殊准备些东西。</p>\n<ul>\n<li>准备驱动。进入 MacOS 系统，打开 <code>启动转换助理</code> APP，选择 <code>操作</code>-<code>下载Windows支持软件</code>，保存到另一个U盘上。</li>\n<li>至少准备一个兼容 Windows 的鼠标。兼容的意思是，这个鼠标放在 Windows 机器上，你不用装驱动就能用。需要鼠标的原因是进入 Windows 后，Mac 键盘鼠标都不识别。至少使用鼠标来点击，外加屏幕虚拟键盘输入。</li>\n<li>由于需要至少 3 个 USB 设备（系统高速U盘、驱动U盘、鼠标），所以看下机器的 USB 口够不够，不够则还需要 USB Hub。</li>\n</ul>\n<p>准备好后，先插入U盘，按住 <code>option/alt</code> 同时再按开机键。使用键盘左右键选择 <code>EFI Boot</code> 并进入 Windows。</p>\n<p>进入 Windows 系统后，使用兼容鼠标（键盘）进行操作。完成配置信息。</p>\n<p>最后进入 Windows 桌面，把存有驱动的U盘插上，安装驱动即可。</p>\n<h2 id=\"安装-Linux-到U盘\"><a href=\"#安装-Linux-到U盘\" class=\"headerlink\" title=\"安装 Linux 到U盘\"></a>安装 Linux 到U盘</h2><p>我接触过 Ubuntu(Mint) 还有 Manjaro 两类 Linux。他们的安装大同小异，不熟悉流程的可以用虚拟机模拟体验下。简单来说，就是U盘启动，选择体验 Linux(Live CD)，进入桌面，双击 Install 图标来安装 Linux。</p>\n<p>下文内容，使用 Mint Linux 19 来说明。其他 Linux 基本类似。</p>\n<p><strong>几点重要说明</strong></p>\n<ol>\n<li>以下有的操作必须在真实的机器上操作，虚拟机不行；</li>\n<li>通过下文方法制作的系统高速U盘，在安装的机器上可以反复使用，但是更换机器，不保证可用。</li>\n</ol>\n<p>其中第二点，由于现在大部分机器都是 EFI 启动的，在不支持 EFI 的机器上，肯定启动不了。但同样支持 EFI 的机器，也不保证可用。我自己就是 MacBook Pro 安装好，正常使用。但是换到 iMac 上就不可用。</p>\n<p><strong>准备材料</strong></p>\n<ul>\n<li>要安装的系统 ISO 文件；</li>\n<li>安装系统临时用到的U盘，因为大部分机器没有光驱了，换做U盘代替，根据 ISO 文件大小而定，一般 4G 足够；</li>\n<li>将 ISO 文件写入安装U盘的软件，比如 Etcher 或者 rufus；</li>\n<li>一个超过 16G 的高速U盘（移动硬盘），太小的装不下系统和软件，建议最少 32G 以上；</li>\n<li>一台可以操作电脑，必须真机，虚拟机不行，未来就要经常在这台机器上启动Linux；</li>\n<li>细致的心。因为要真机上操作，有的危险步骤一旦操作错误可能影响这台电脑的系统。</li>\n</ul>\n<p><strong>制作系统U盘方法</strong></p>\n<ol>\n<li>制作操作安装U盘<ol>\n<li>电脑上安装 Etcher 或者 rufus，我推荐 Etcher，最简单还漂亮；</li>\n<li>插入临时用的小U盘，启动 Etcher，将 Linux ISO 拖入其中，此时前两步已经完成；如果你插入多个U盘，请自行选择用一个；</li>\n<li>点击 <code>Flash!</code> 等待完成。<br><img src=\"https://cdn0.yukapril.com/2020-04-21-u-pan-1.png-wm.white\" alt=\"Etcher\"></li>\n</ol>\n</li>\n<li>安装Linux到高速U盘<ol>\n<li>以下步骤要在未来要常用来启动 Linux 的电脑上操作，务必小心；</li>\n<li>插入小U盘和装系统用的高速U盘（移动硬盘），开机。并调整启动顺序，用小U盘启动。</li>\n<li>正常加载 Linux，并进入安装界面，一直来到安装位置选择页，并选择“自定义位置安装” 之类选项；</li>\n<li>你可以见到如下图内容。通过容量可以看出来，<code>/dev/sda</code> 是我的 MacBook Pro 自带的 SSD 硬盘，<code>/dev/sdb</code> 是我插入并要安装 Linux 的 500G 移动硬盘， <code>/dev/sdc</code> 不用管，其实是 MacBook Pro 的读卡器。<strong>我们要在计划装系统的盘上操作，其他盘不要点，也不要操作</strong>。首先是看是否有分区，我的 <code>/dev/sdb</code> 没有分区了，如果你的有，点击对应的分区（是分区不是硬盘，可能叫做 <code>/dev/sdb1</code>）后点击下面的 <code>减号</code> 来删除，请删除干净。此外建议选中计划装系统的盘（是硬盘不是分区，比如截图是 <code>dev/sdb</code>），选择 <code>新建分区表</code> 来重建分区表；<br><img src=\"https://cdn0.yukapril.com/2020-04-21-u-pan-2.jpg-wm.white\" alt=\"Linux 分区管理\"></li>\n<li>删除干净后，我们来新建 EFI 启动分区。如下图，在空闲区上，点击 <code>加号</code> 新建分区。大小为 300-500MB 左右都行。如果计划装多个系统，可以多分配一点。分区类型为 <code>主分区</code>，用于 <code>EFI</code>；<br><img src=\"https://cdn0.yukapril.com/2020-04-21-u-pan-3.jpg-wm.white\" alt=\"建立 EFI 分区\">       </li>\n<li>接下来建立系统分区。选择空闲区上，点击 <code>加号</code> 新建分区。容量根据使用情况来定。我的截图是 150G。分区类型无所谓，哪一个都可以启动系统，但是选择 <code>主分区</code> 可以让编号更靠前，以后好管理。用于一般都是 <code>Ext4</code>，可以根据你的系统支持情况进行变通。最后挂载点选择 <code>/</code>；<br><img src=\"https://cdn0.yukapril.com/2020-04-21-u-pan-4.jpg-wm.white\" alt=\"建立系统分区\"></li>\n<li><strong>非常重要</strong>。选择 <code>安装启动引导器的设备</code>，改为你装 Linux 的硬盘，比如我的是 <code>/dev/sdb/</code> （我测试选择 EFI 分区 <code>/dev/sdb1</code> 也可以，不知道两者区别）；</li>\n<li>点击 <code>现在安装</code>，并完成后续相关设置，完成 Linux 的安装过程。</li>\n</ol>\n</li>\n</ol>\n<p><strong>使用方法</strong></p>\n<p>在安装系统的机器上。直接插上装有 Linux 的高速U盘，配置下开机启动顺序即可，很简单。Mac 则是开机按住 <code>option/alt</code>，然后选择 <code>EFI Boot</code>。</p>\n<p>在非安装系统的机器上，我自己测试换了台 Mac 是不行的。普通 PC 机我没有，不确定具体情况。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>我的主力机都是 Mac，但是偶尔也会用到 Windows，直接采用U盘安装和启动特别方便。最近在用 Linux，只能安装到虚拟机，效率大打折扣。也就在思考，Linux 可否和 Windows一样，安装为 U盘版？插上 U盘，控制启动顺序，直接进入 Linux？</p>","more":"<p>正常来讲，不论现在你用的那个系统，在保证原系统的情况下，想直接换系统使用，无非就是虚拟机安装、U盘装或者再弄一台机器硬盘装。</p>\n<p>简单来说，区别如下：</p>\n<ul>\n<li>虚拟机：原系统与新系统同时运行，方便操作，缺点是非常吃机器资源，原系统和新系统都会受影响，尤其是非固态硬盘，特别慢。</li>\n<li>外置U盘(硬盘)装系统：由于只有一台主机，所以一次只能启动一个系统，更换系统要关机重启。可以发挥硬件所有性能，成本低廉。</li>\n<li>新电脑装：原系统与新系统同时运行，方便操作，可以发挥硬件所有性能。缺点是得花钱再买一台电脑。</li>\n</ul>\n<p>体验上，如果机器配置比较好，还是建议虚拟机，比较方便快捷。尤其是付费的虚拟机（parallels之类），还能做到交互，而且常规办公之类软件运行效率也还可以。除非是新的系统也需要非常高的性能，比如用大型软件、游戏等，否则优先推荐虚拟机。</p>\n<p>其次比较推荐U盘装系统，就是带块硬盘（U盘）就行了，临时使用非常合适。</p>\n<h2 id=\"安装-Windows-到U盘\"><a href=\"#安装-Windows-到U盘\" class=\"headerlink\" title=\"安装 Windows 到U盘\"></a>安装 Windows 到U盘</h2><p>由于 Windows 本身就有一个 Windows To Go 版本（WTG），相当于就是U盘版本。所以不用考虑安装原版 Windows 了。</p>\n<blockquote>\n<p>按照正常方法操作，可以保证装好的U盘版 Windows，在 Mac 电脑，普通 PC 都可以正常启动。</p>\n</blockquote>\n<p><strong>需要准备以下内容</strong></p>\n<ul>\n<li>一个 Windows 机器。没有的话，装个虚拟机版本的也行（但是你需要会配置虚拟机，来连接U盘）；</li>\n<li>Windows 10 安装包，据说 Windows 8 的也可以；</li>\n<li>一个超过 32G 的高速U盘（移动硬盘），太小的装不下系统；</li>\n<li>下载 WTG 辅助工具（建议用第三方工具，而不是系统自带工具）。</li>\n</ul>\n<p>以上准备材料，在 Windows 下备好。</p>\n<p><strong>制作系统U盘方法</strong></p>\n<p>使用 WTG 辅助工具，制作 Windows 高速U盘。做好U盘就完事了。</p>\n<blockquote>\n<p>具体安装细节可以参考文章 <a href=\"https://sspai.com/post/44699\" target=\"_blank\" rel=\"noopener\">说走就走的「Windows」—— Windows To Go 制作详解</a></p>\n</blockquote>\n<p><strong>使用方法</strong></p>\n<p>在非 Mac 下使用：直接插上高速U盘，配置下开机启动顺序即可。很简单。</p>\n<p>在 Mac 下使用：需要特殊准备些东西。</p>\n<ul>\n<li>准备驱动。进入 MacOS 系统，打开 <code>启动转换助理</code> APP，选择 <code>操作</code>-<code>下载Windows支持软件</code>，保存到另一个U盘上。</li>\n<li>至少准备一个兼容 Windows 的鼠标。兼容的意思是，这个鼠标放在 Windows 机器上，你不用装驱动就能用。需要鼠标的原因是进入 Windows 后，Mac 键盘鼠标都不识别。至少使用鼠标来点击，外加屏幕虚拟键盘输入。</li>\n<li>由于需要至少 3 个 USB 设备（系统高速U盘、驱动U盘、鼠标），所以看下机器的 USB 口够不够，不够则还需要 USB Hub。</li>\n</ul>\n<p>准备好后，先插入U盘，按住 <code>option/alt</code> 同时再按开机键。使用键盘左右键选择 <code>EFI Boot</code> 并进入 Windows。</p>\n<p>进入 Windows 系统后，使用兼容鼠标（键盘）进行操作。完成配置信息。</p>\n<p>最后进入 Windows 桌面，把存有驱动的U盘插上，安装驱动即可。</p>\n<h2 id=\"安装-Linux-到U盘\"><a href=\"#安装-Linux-到U盘\" class=\"headerlink\" title=\"安装 Linux 到U盘\"></a>安装 Linux 到U盘</h2><p>我接触过 Ubuntu(Mint) 还有 Manjaro 两类 Linux。他们的安装大同小异，不熟悉流程的可以用虚拟机模拟体验下。简单来说，就是U盘启动，选择体验 Linux(Live CD)，进入桌面，双击 Install 图标来安装 Linux。</p>\n<p>下文内容，使用 Mint Linux 19 来说明。其他 Linux 基本类似。</p>\n<p><strong>几点重要说明</strong></p>\n<ol>\n<li>以下有的操作必须在真实的机器上操作，虚拟机不行；</li>\n<li>通过下文方法制作的系统高速U盘，在安装的机器上可以反复使用，但是更换机器，不保证可用。</li>\n</ol>\n<p>其中第二点，由于现在大部分机器都是 EFI 启动的，在不支持 EFI 的机器上，肯定启动不了。但同样支持 EFI 的机器，也不保证可用。我自己就是 MacBook Pro 安装好，正常使用。但是换到 iMac 上就不可用。</p>\n<p><strong>准备材料</strong></p>\n<ul>\n<li>要安装的系统 ISO 文件；</li>\n<li>安装系统临时用到的U盘，因为大部分机器没有光驱了，换做U盘代替，根据 ISO 文件大小而定，一般 4G 足够；</li>\n<li>将 ISO 文件写入安装U盘的软件，比如 Etcher 或者 rufus；</li>\n<li>一个超过 16G 的高速U盘（移动硬盘），太小的装不下系统和软件，建议最少 32G 以上；</li>\n<li>一台可以操作电脑，必须真机，虚拟机不行，未来就要经常在这台机器上启动Linux；</li>\n<li>细致的心。因为要真机上操作，有的危险步骤一旦操作错误可能影响这台电脑的系统。</li>\n</ul>\n<p><strong>制作系统U盘方法</strong></p>\n<ol>\n<li>制作操作安装U盘<ol>\n<li>电脑上安装 Etcher 或者 rufus，我推荐 Etcher，最简单还漂亮；</li>\n<li>插入临时用的小U盘，启动 Etcher，将 Linux ISO 拖入其中，此时前两步已经完成；如果你插入多个U盘，请自行选择用一个；</li>\n<li>点击 <code>Flash!</code> 等待完成。<br><img src=\"https://cdn0.yukapril.com/2020-04-21-u-pan-1.png-wm.white\" alt=\"Etcher\"></li>\n</ol>\n</li>\n<li>安装Linux到高速U盘<ol>\n<li>以下步骤要在未来要常用来启动 Linux 的电脑上操作，务必小心；</li>\n<li>插入小U盘和装系统用的高速U盘（移动硬盘），开机。并调整启动顺序，用小U盘启动。</li>\n<li>正常加载 Linux，并进入安装界面，一直来到安装位置选择页，并选择“自定义位置安装” 之类选项；</li>\n<li>你可以见到如下图内容。通过容量可以看出来，<code>/dev/sda</code> 是我的 MacBook Pro 自带的 SSD 硬盘，<code>/dev/sdb</code> 是我插入并要安装 Linux 的 500G 移动硬盘， <code>/dev/sdc</code> 不用管，其实是 MacBook Pro 的读卡器。<strong>我们要在计划装系统的盘上操作，其他盘不要点，也不要操作</strong>。首先是看是否有分区，我的 <code>/dev/sdb</code> 没有分区了，如果你的有，点击对应的分区（是分区不是硬盘，可能叫做 <code>/dev/sdb1</code>）后点击下面的 <code>减号</code> 来删除，请删除干净。此外建议选中计划装系统的盘（是硬盘不是分区，比如截图是 <code>dev/sdb</code>），选择 <code>新建分区表</code> 来重建分区表；<br><img src=\"https://cdn0.yukapril.com/2020-04-21-u-pan-2.jpg-wm.white\" alt=\"Linux 分区管理\"></li>\n<li>删除干净后，我们来新建 EFI 启动分区。如下图，在空闲区上，点击 <code>加号</code> 新建分区。大小为 300-500MB 左右都行。如果计划装多个系统，可以多分配一点。分区类型为 <code>主分区</code>，用于 <code>EFI</code>；<br><img src=\"https://cdn0.yukapril.com/2020-04-21-u-pan-3.jpg-wm.white\" alt=\"建立 EFI 分区\">       </li>\n<li>接下来建立系统分区。选择空闲区上，点击 <code>加号</code> 新建分区。容量根据使用情况来定。我的截图是 150G。分区类型无所谓，哪一个都可以启动系统，但是选择 <code>主分区</code> 可以让编号更靠前，以后好管理。用于一般都是 <code>Ext4</code>，可以根据你的系统支持情况进行变通。最后挂载点选择 <code>/</code>；<br><img src=\"https://cdn0.yukapril.com/2020-04-21-u-pan-4.jpg-wm.white\" alt=\"建立系统分区\"></li>\n<li><strong>非常重要</strong>。选择 <code>安装启动引导器的设备</code>，改为你装 Linux 的硬盘，比如我的是 <code>/dev/sdb/</code> （我测试选择 EFI 分区 <code>/dev/sdb1</code> 也可以，不知道两者区别）；</li>\n<li>点击 <code>现在安装</code>，并完成后续相关设置，完成 Linux 的安装过程。</li>\n</ol>\n</li>\n</ol>\n<p><strong>使用方法</strong></p>\n<p>在安装系统的机器上。直接插上装有 Linux 的高速U盘，配置下开机启动顺序即可，很简单。Mac 则是开机按住 <code>option/alt</code>，然后选择 <code>EFI Boot</code>。</p>\n<p>在非安装系统的机器上，我自己测试换了台 Mac 是不行的。普通 PC 机我没有，不确定具体情况。</p>\n<p>–END–</p>"},{"layout":"post","title":"树莓派 Raspberry Pi 4B 上手","date":"2020-05-13T23:37:00.000Z","_content":"\n从 2018 年就开始考虑入手一个树莓派玩玩，当时还是 Raspberry Pi 3B+ 刚出的时候。后来发现自己没有太多用途，也就没着急入手。一晃到了 2019 年，看了阮一峰老师的文章，介绍树莓派的入门，再次想起了这个东西。可惜当时感觉也没有什么用途，再加上听说要出 Raspberry Pi 4B 了，就特意等了等。\n\n2019 年 6 月，果真推出 Raspberry Pi 4B 了，不过当时价格虚高，等到十一左右才算稳定。而且爆出了供电问题。而且，我还是没什么用途。\n\n2020 年刚过，终于下决心了。这次真的有用途了。\n\n<!-- more -->\n\n## 入手 Raspberry Pi 4B (4GB)\n\n![外包装已经被我打开，因为收到后第一时间就开箱欣赏了](https://cdn0.yukapril.com/2020-05-11-pi-1.jpg-wm.white)\n\n![配件全家福](https://cdn0.yukapril.com/2020-05-11-pi-2.jpg-wm.white)\n\n![Raspberry Pi 4B 特写](https://cdn0.yukapril.com/2020-05-11-pi-3.jpg-wm.white)\n\n![Raspberry Pi 4B 特写](https://cdn0.yukapril.com/2020-05-11-pi-4.jpg-wm.white)\n\n拿到手之后，才发现他是如此的小巧，和信用卡般的大小，拿在手里迷你至极。甚至打开快递盒后，一度认为电源的盒子内装的才是本体。\n\n同时被它的做工惊艳到了。虽然是开发板，入门级电脑，但做工绝不含糊，规整的电路和清晰的印刷给我留下了极深的印象。\n\n后来甚至在想，要不要再买一个，放在公司或者床头，当个摆件?\n\n## 版本选择\n\n性能上，Raspberry Pi 4B 确实有较大提升，但是温度据说也比较高。日常使用至少建议配散热器（散热壳），中度使用还需要风扇。\n\nRaspberry Pi 3B / 3B+，虽然配置低了些，但是会温度低一些，跑跑日常工具也够用。\n\n价格上，现在（2020-05-11），Raspberry Pi 3B+ 235 元左右，Raspberry Pi 4B 的 2GB 版本 260 元左右，4GB版本 405 元左右。 \n\n本着买新不买旧，如果没买过的话，建议 Raspberry Pi 4B。跑小功能的话，2GB版本够用了。如果不差钱，直接 4GB 版本。如果有了 3B 系列，没遇到瓶颈，可以不换。\n\n如果想用桌面的话，建议 Pi 4B 4GB 版本。\n\n如果追求 USB 接口速度，网口速度等，NAS 等用途，选 Pi 4B。\n\n此外，Pi 4B 由于供电问题，新版已经修改了这个硬件 bug，买的时候，询问店家是否是 v1.2 及之后版本。\n\n## Micro SD(TF) 卡选择\n\nMicro SD 卡就是 TF 卡。就是那种非常小，指甲盖大小的卡。如果套上一个外壳，可以变成 SD 卡。\n\n![各种卡介绍](https://cdn0.yukapril.com/2020-05-11-pi-5.jpg-wm.black)\n\n为了好拼写，下文直接叫做 TF 卡。\n\n由于树莓派 4B 本身 TF 速度大概是读取不到 100M/s，写入 40M/s 左右。所以不需要买比较顶级的卡，一方面是多花钱性能用不到，另一方面可能不兼容。\n\n没听说有用户使用 256GB 的卡，不确定这么大容量是否兼容。128GB 有 4B 用户在用，但也很少。稳妥起见，最大 64GB 为宜。不能小于 16GB，否则空间太小。\n\n根据某个淘宝店家传言，之前树莓派对三星的卡兼容不好，尤其容量大的卡。\n\n大部分人都是选择常规容量卡，如果有额外需求，外挂硬盘。\n\n## 启动树莓派\n\n启动树莓派有几部分内容：\n\n* 硬件的准备（最小规格）\n* TF 卡的准备\n* 首次进行开机 ssh 和网络的准备\n* 开机和其他一些后续建议的设置\n\n接下来我分别说明。\n\n## 硬件的准备\n\n要想用树莓派，硬件必须准备的：\n\n* 树莓派本体\n* 电源适配器，4B 建议官方电源或店家电源，因为老的版本硬件有bug，不是所有的 type-C 电源都可用\n* 装有系统的 TF 卡\n* 最好有网线，操作起来很简单。没有的话就要配置 WiFi\n\n不需要 HDMI 线，不需要额外显示器键盘鼠标等。\n\n## TF 卡的准备\n\n#### 1. 下载  TF卡烧录软件(Raspberry Pi Imager)\n\n> 曾经据说这个软件可能还不稳定，可以用 balena Etcher 等工具替代。不过我建议先用 Raspberry Pi Imager 试试，如果有问题在换。\n\n访问 [官网下载区](https://www.raspberrypi.org/downloads/) 即可下载 Raspberry Pi Imager。\n\n#### 2. 下载操作系统(Raspbian)\n\n> 建议选择官方系统，文档更多。遇到问题也稍微好解决一点。其他的系统最多性能比较好，但维护起来没什么优势。\n\nRaspbian 操作系统官网提供三个版本：\n\n* Raspbian Buster with desktop and recommended software：桌面版，外带一堆软件，不是特别推荐，除非你要作为桌面版拿来体验玩玩。\n* Raspbian Buster with desktop ：桌面版，没有附加软件，推荐\n* Raspbian Buster Lite：精简版，就是没有桌面，如果主要跑服务，推荐\n\n我选择的是 Raspbian Buster with desktop，后续可以通过 VNC 开远程桌面。不过 VNC 对我来说目前还没什么实际用途。\n\n#### 3. 烧录 TF 卡 \n\n![Raspberry Pi Imager](https://cdn0.yukapril.com/2020-05-11-pi-6.jpg-wm.white)\n\n使用第一步的软件，对第二步的系统 img 文件进行烧录。操作很简单。\n\n唯一要注意的，选择 「Operating System」时候，选择最后一个 「Use Custom」，来选择你下载的文件。\n\n## 首次进行开机 ssh 和网络的准备\n\n烧录完毕 TF 卡，重新插拔后会发现，只能看到一个几百 MB 的 Fat32 分区了。这个是启动分区，Fat32 格式所有电脑都可以识别和修改里面的内容。剩余的空间，会单独分区用作树莓派系统。\n\n此时如果直接插卡开机，是不能通过 ssh 进行连接的。\n\n需要在分区内，增加一个名字叫做 `ssh` 的空文件。\n\n如果使用网线，则不需要额外配置网络。如果想用 WiFi 进行连接，可以搜索下相关文档，看过之后你就知道还是准备条网线才是真香。\n\n## 开机和其他一些后续建议的设置\n\n准备好所有物品，插卡，接入电源，接好网线。\n\n树莓派尾部有两个灯，一红一绿。红色灯是电源指示灯，绿色是硬盘指示灯。一般是红色灯常亮，绿色灯开机亮，之后闪烁。\n\n通过路由或者其他方式，查到树莓派的 IP 地址。下文以 `10.0.0.81` 说明。\n\n```bash\nssh pi@10.0.0.81 # 以用户pi来链接10.0.0.81\n# 之后会要求输入密码，默认密码raspberry\n```\n\n链接成功后，执行配置工具：\n\n```bash\nsudo raspi-config \n```\n\n![raspi-config](https://cdn0.yukapril.com/2020-05-11-pi-7.jpg-wm.white)\n\n在这里可以修改密码、配置时区、键盘布局、网络 WiFi 等。请自行配置即可，比较容易的。\n\n#### 开启 VNC\n如果想远程桌面，可以开启 VNC。单独说下开启 VNC，因为有坑。\n\n进入`5 Interfacing Options` 后，选择 `P3 VNC` 进行开启。之后需要到 `7 Advanced Options`中，配置 `A5 Resolution` 分辨率。**如果不配置分辨率，使用 VNC 链接会屏幕无内容或报错。**\n\n#### 切换到国内源\n\nRaspberry Pi 有两个地方需要修改。建议先备份，再修改。\n\n```bash\nsudo cp /etc/apt/sources.list /etc/apt/sources.list.backup\nsudo vi /etc/apt/sources.list\n# 编辑 URL 部分，都改成 \n# http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/\n# 其他地方不要改\n```\n\n```bash\nsudo cp /etc/apt/sources.list.d/raspi.list /etc/apt/sources.list.d/raspi.list.backup\nsudo vi /etc/apt/sources.list.d/raspi.list\n# 编辑 URL 部分，都改成 \n# http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/\n# 其他地方不要改\n```\n\n#### 更新 EEPROM\n\n**不了解 EEPROM，这个操作可以不做。**\n\n由于 Raspberry Pi 4B 启动代码不是放在 TF 卡里了，所以如果有必要，可以手动更新 EEPROM。\n\n> 目前 4B 的 EEPROM 不支持 USB 等启动，等后续 EEPROM 更新。\n\n```bash\nsudo apt install rpi-eeprom\nsudo rpi-eeprom-update\n```\n\n## 参考文档\n\n* [树莓派LED指示灯状态的解释](https://shumeipai.nxez.com/2014/09/30/raspberry-pi-led-status-detail.html)\n* [树莓派 VNC Viewer 远程桌面配置教程](http://www.52pi.net/archives/1729)\n* [树莓派4 Buster换源](https://www.quarkbook.com/?p=636)\n\n--END--\n","source":"_posts/2020/2020-05-13-raspberry-pi.md","raw":"---\nlayout: post\ntitle: 树莓派 Raspberry Pi 4B 上手\ndate: 2020-05-13 23:37:00 GMT+0800\ncategories: [开发板]\ntags:  [树莓派]\n---\n\n从 2018 年就开始考虑入手一个树莓派玩玩，当时还是 Raspberry Pi 3B+ 刚出的时候。后来发现自己没有太多用途，也就没着急入手。一晃到了 2019 年，看了阮一峰老师的文章，介绍树莓派的入门，再次想起了这个东西。可惜当时感觉也没有什么用途，再加上听说要出 Raspberry Pi 4B 了，就特意等了等。\n\n2019 年 6 月，果真推出 Raspberry Pi 4B 了，不过当时价格虚高，等到十一左右才算稳定。而且爆出了供电问题。而且，我还是没什么用途。\n\n2020 年刚过，终于下决心了。这次真的有用途了。\n\n<!-- more -->\n\n## 入手 Raspberry Pi 4B (4GB)\n\n![外包装已经被我打开，因为收到后第一时间就开箱欣赏了](https://cdn0.yukapril.com/2020-05-11-pi-1.jpg-wm.white)\n\n![配件全家福](https://cdn0.yukapril.com/2020-05-11-pi-2.jpg-wm.white)\n\n![Raspberry Pi 4B 特写](https://cdn0.yukapril.com/2020-05-11-pi-3.jpg-wm.white)\n\n![Raspberry Pi 4B 特写](https://cdn0.yukapril.com/2020-05-11-pi-4.jpg-wm.white)\n\n拿到手之后，才发现他是如此的小巧，和信用卡般的大小，拿在手里迷你至极。甚至打开快递盒后，一度认为电源的盒子内装的才是本体。\n\n同时被它的做工惊艳到了。虽然是开发板，入门级电脑，但做工绝不含糊，规整的电路和清晰的印刷给我留下了极深的印象。\n\n后来甚至在想，要不要再买一个，放在公司或者床头，当个摆件?\n\n## 版本选择\n\n性能上，Raspberry Pi 4B 确实有较大提升，但是温度据说也比较高。日常使用至少建议配散热器（散热壳），中度使用还需要风扇。\n\nRaspberry Pi 3B / 3B+，虽然配置低了些，但是会温度低一些，跑跑日常工具也够用。\n\n价格上，现在（2020-05-11），Raspberry Pi 3B+ 235 元左右，Raspberry Pi 4B 的 2GB 版本 260 元左右，4GB版本 405 元左右。 \n\n本着买新不买旧，如果没买过的话，建议 Raspberry Pi 4B。跑小功能的话，2GB版本够用了。如果不差钱，直接 4GB 版本。如果有了 3B 系列，没遇到瓶颈，可以不换。\n\n如果想用桌面的话，建议 Pi 4B 4GB 版本。\n\n如果追求 USB 接口速度，网口速度等，NAS 等用途，选 Pi 4B。\n\n此外，Pi 4B 由于供电问题，新版已经修改了这个硬件 bug，买的时候，询问店家是否是 v1.2 及之后版本。\n\n## Micro SD(TF) 卡选择\n\nMicro SD 卡就是 TF 卡。就是那种非常小，指甲盖大小的卡。如果套上一个外壳，可以变成 SD 卡。\n\n![各种卡介绍](https://cdn0.yukapril.com/2020-05-11-pi-5.jpg-wm.black)\n\n为了好拼写，下文直接叫做 TF 卡。\n\n由于树莓派 4B 本身 TF 速度大概是读取不到 100M/s，写入 40M/s 左右。所以不需要买比较顶级的卡，一方面是多花钱性能用不到，另一方面可能不兼容。\n\n没听说有用户使用 256GB 的卡，不确定这么大容量是否兼容。128GB 有 4B 用户在用，但也很少。稳妥起见，最大 64GB 为宜。不能小于 16GB，否则空间太小。\n\n根据某个淘宝店家传言，之前树莓派对三星的卡兼容不好，尤其容量大的卡。\n\n大部分人都是选择常规容量卡，如果有额外需求，外挂硬盘。\n\n## 启动树莓派\n\n启动树莓派有几部分内容：\n\n* 硬件的准备（最小规格）\n* TF 卡的准备\n* 首次进行开机 ssh 和网络的准备\n* 开机和其他一些后续建议的设置\n\n接下来我分别说明。\n\n## 硬件的准备\n\n要想用树莓派，硬件必须准备的：\n\n* 树莓派本体\n* 电源适配器，4B 建议官方电源或店家电源，因为老的版本硬件有bug，不是所有的 type-C 电源都可用\n* 装有系统的 TF 卡\n* 最好有网线，操作起来很简单。没有的话就要配置 WiFi\n\n不需要 HDMI 线，不需要额外显示器键盘鼠标等。\n\n## TF 卡的准备\n\n#### 1. 下载  TF卡烧录软件(Raspberry Pi Imager)\n\n> 曾经据说这个软件可能还不稳定，可以用 balena Etcher 等工具替代。不过我建议先用 Raspberry Pi Imager 试试，如果有问题在换。\n\n访问 [官网下载区](https://www.raspberrypi.org/downloads/) 即可下载 Raspberry Pi Imager。\n\n#### 2. 下载操作系统(Raspbian)\n\n> 建议选择官方系统，文档更多。遇到问题也稍微好解决一点。其他的系统最多性能比较好，但维护起来没什么优势。\n\nRaspbian 操作系统官网提供三个版本：\n\n* Raspbian Buster with desktop and recommended software：桌面版，外带一堆软件，不是特别推荐，除非你要作为桌面版拿来体验玩玩。\n* Raspbian Buster with desktop ：桌面版，没有附加软件，推荐\n* Raspbian Buster Lite：精简版，就是没有桌面，如果主要跑服务，推荐\n\n我选择的是 Raspbian Buster with desktop，后续可以通过 VNC 开远程桌面。不过 VNC 对我来说目前还没什么实际用途。\n\n#### 3. 烧录 TF 卡 \n\n![Raspberry Pi Imager](https://cdn0.yukapril.com/2020-05-11-pi-6.jpg-wm.white)\n\n使用第一步的软件，对第二步的系统 img 文件进行烧录。操作很简单。\n\n唯一要注意的，选择 「Operating System」时候，选择最后一个 「Use Custom」，来选择你下载的文件。\n\n## 首次进行开机 ssh 和网络的准备\n\n烧录完毕 TF 卡，重新插拔后会发现，只能看到一个几百 MB 的 Fat32 分区了。这个是启动分区，Fat32 格式所有电脑都可以识别和修改里面的内容。剩余的空间，会单独分区用作树莓派系统。\n\n此时如果直接插卡开机，是不能通过 ssh 进行连接的。\n\n需要在分区内，增加一个名字叫做 `ssh` 的空文件。\n\n如果使用网线，则不需要额外配置网络。如果想用 WiFi 进行连接，可以搜索下相关文档，看过之后你就知道还是准备条网线才是真香。\n\n## 开机和其他一些后续建议的设置\n\n准备好所有物品，插卡，接入电源，接好网线。\n\n树莓派尾部有两个灯，一红一绿。红色灯是电源指示灯，绿色是硬盘指示灯。一般是红色灯常亮，绿色灯开机亮，之后闪烁。\n\n通过路由或者其他方式，查到树莓派的 IP 地址。下文以 `10.0.0.81` 说明。\n\n```bash\nssh pi@10.0.0.81 # 以用户pi来链接10.0.0.81\n# 之后会要求输入密码，默认密码raspberry\n```\n\n链接成功后，执行配置工具：\n\n```bash\nsudo raspi-config \n```\n\n![raspi-config](https://cdn0.yukapril.com/2020-05-11-pi-7.jpg-wm.white)\n\n在这里可以修改密码、配置时区、键盘布局、网络 WiFi 等。请自行配置即可，比较容易的。\n\n#### 开启 VNC\n如果想远程桌面，可以开启 VNC。单独说下开启 VNC，因为有坑。\n\n进入`5 Interfacing Options` 后，选择 `P3 VNC` 进行开启。之后需要到 `7 Advanced Options`中，配置 `A5 Resolution` 分辨率。**如果不配置分辨率，使用 VNC 链接会屏幕无内容或报错。**\n\n#### 切换到国内源\n\nRaspberry Pi 有两个地方需要修改。建议先备份，再修改。\n\n```bash\nsudo cp /etc/apt/sources.list /etc/apt/sources.list.backup\nsudo vi /etc/apt/sources.list\n# 编辑 URL 部分，都改成 \n# http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/\n# 其他地方不要改\n```\n\n```bash\nsudo cp /etc/apt/sources.list.d/raspi.list /etc/apt/sources.list.d/raspi.list.backup\nsudo vi /etc/apt/sources.list.d/raspi.list\n# 编辑 URL 部分，都改成 \n# http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/\n# 其他地方不要改\n```\n\n#### 更新 EEPROM\n\n**不了解 EEPROM，这个操作可以不做。**\n\n由于 Raspberry Pi 4B 启动代码不是放在 TF 卡里了，所以如果有必要，可以手动更新 EEPROM。\n\n> 目前 4B 的 EEPROM 不支持 USB 等启动，等后续 EEPROM 更新。\n\n```bash\nsudo apt install rpi-eeprom\nsudo rpi-eeprom-update\n```\n\n## 参考文档\n\n* [树莓派LED指示灯状态的解释](https://shumeipai.nxez.com/2014/09/30/raspberry-pi-led-status-detail.html)\n* [树莓派 VNC Viewer 远程桌面配置教程](http://www.52pi.net/archives/1729)\n* [树莓派4 Buster换源](https://www.quarkbook.com/?p=636)\n\n--END--\n","slug":"2020-2020-05-13-raspberry-pi","published":1,"updated":"2020-05-13T15:38:27.512Z","comments":1,"photos":[],"link":"","_id":"cka5ik8ec008rnybg1yg71275","content":"<p>从 2018 年就开始考虑入手一个树莓派玩玩，当时还是 Raspberry Pi 3B+ 刚出的时候。后来发现自己没有太多用途，也就没着急入手。一晃到了 2019 年，看了阮一峰老师的文章，介绍树莓派的入门，再次想起了这个东西。可惜当时感觉也没有什么用途，再加上听说要出 Raspberry Pi 4B 了，就特意等了等。</p>\n<p>2019 年 6 月，果真推出 Raspberry Pi 4B 了，不过当时价格虚高，等到十一左右才算稳定。而且爆出了供电问题。而且，我还是没什么用途。</p>\n<p>2020 年刚过，终于下决心了。这次真的有用途了。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"入手-Raspberry-Pi-4B-4GB\"><a href=\"#入手-Raspberry-Pi-4B-4GB\" class=\"headerlink\" title=\"入手 Raspberry Pi 4B (4GB)\"></a>入手 Raspberry Pi 4B (4GB)</h2><p><img src=\"https://cdn0.yukapril.com/2020-05-11-pi-1.jpg-wm.white\" alt=\"外包装已经被我打开，因为收到后第一时间就开箱欣赏了\"></p>\n<p><img src=\"https://cdn0.yukapril.com/2020-05-11-pi-2.jpg-wm.white\" alt=\"配件全家福\"></p>\n<p><img src=\"https://cdn0.yukapril.com/2020-05-11-pi-3.jpg-wm.white\" alt=\"Raspberry Pi 4B 特写\"></p>\n<p><img src=\"https://cdn0.yukapril.com/2020-05-11-pi-4.jpg-wm.white\" alt=\"Raspberry Pi 4B 特写\"></p>\n<p>拿到手之后，才发现他是如此的小巧，和信用卡般的大小，拿在手里迷你至极。甚至打开快递盒后，一度认为电源的盒子内装的才是本体。</p>\n<p>同时被它的做工惊艳到了。虽然是开发板，入门级电脑，但做工绝不含糊，规整的电路和清晰的印刷给我留下了极深的印象。</p>\n<p>后来甚至在想，要不要再买一个，放在公司或者床头，当个摆件?</p>\n<h2 id=\"版本选择\"><a href=\"#版本选择\" class=\"headerlink\" title=\"版本选择\"></a>版本选择</h2><p>性能上，Raspberry Pi 4B 确实有较大提升，但是温度据说也比较高。日常使用至少建议配散热器（散热壳），中度使用还需要风扇。</p>\n<p>Raspberry Pi 3B / 3B+，虽然配置低了些，但是会温度低一些，跑跑日常工具也够用。</p>\n<p>价格上，现在（2020-05-11），Raspberry Pi 3B+ 235 元左右，Raspberry Pi 4B 的 2GB 版本 260 元左右，4GB版本 405 元左右。 </p>\n<p>本着买新不买旧，如果没买过的话，建议 Raspberry Pi 4B。跑小功能的话，2GB版本够用了。如果不差钱，直接 4GB 版本。如果有了 3B 系列，没遇到瓶颈，可以不换。</p>\n<p>如果想用桌面的话，建议 Pi 4B 4GB 版本。</p>\n<p>如果追求 USB 接口速度，网口速度等，NAS 等用途，选 Pi 4B。</p>\n<p>此外，Pi 4B 由于供电问题，新版已经修改了这个硬件 bug，买的时候，询问店家是否是 v1.2 及之后版本。</p>\n<h2 id=\"Micro-SD-TF-卡选择\"><a href=\"#Micro-SD-TF-卡选择\" class=\"headerlink\" title=\"Micro SD(TF) 卡选择\"></a>Micro SD(TF) 卡选择</h2><p>Micro SD 卡就是 TF 卡。就是那种非常小，指甲盖大小的卡。如果套上一个外壳，可以变成 SD 卡。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-05-11-pi-5.jpg-wm.black\" alt=\"各种卡介绍\"></p>\n<p>为了好拼写，下文直接叫做 TF 卡。</p>\n<p>由于树莓派 4B 本身 TF 速度大概是读取不到 100M/s，写入 40M/s 左右。所以不需要买比较顶级的卡，一方面是多花钱性能用不到，另一方面可能不兼容。</p>\n<p>没听说有用户使用 256GB 的卡，不确定这么大容量是否兼容。128GB 有 4B 用户在用，但也很少。稳妥起见，最大 64GB 为宜。不能小于 16GB，否则空间太小。</p>\n<p>根据某个淘宝店家传言，之前树莓派对三星的卡兼容不好，尤其容量大的卡。</p>\n<p>大部分人都是选择常规容量卡，如果有额外需求，外挂硬盘。</p>\n<h2 id=\"启动树莓派\"><a href=\"#启动树莓派\" class=\"headerlink\" title=\"启动树莓派\"></a>启动树莓派</h2><p>启动树莓派有几部分内容：</p>\n<ul>\n<li>硬件的准备（最小规格）</li>\n<li>TF 卡的准备</li>\n<li>首次进行开机 ssh 和网络的准备</li>\n<li>开机和其他一些后续建议的设置</li>\n</ul>\n<p>接下来我分别说明。</p>\n<h2 id=\"硬件的准备\"><a href=\"#硬件的准备\" class=\"headerlink\" title=\"硬件的准备\"></a>硬件的准备</h2><p>要想用树莓派，硬件必须准备的：</p>\n<ul>\n<li>树莓派本体</li>\n<li>电源适配器，4B 建议官方电源或店家电源，因为老的版本硬件有bug，不是所有的 type-C 电源都可用</li>\n<li>装有系统的 TF 卡</li>\n<li>最好有网线，操作起来很简单。没有的话就要配置 WiFi</li>\n</ul>\n<p>不需要 HDMI 线，不需要额外显示器键盘鼠标等。</p>\n<h2 id=\"TF-卡的准备\"><a href=\"#TF-卡的准备\" class=\"headerlink\" title=\"TF 卡的准备\"></a>TF 卡的准备</h2><h4 id=\"1-下载-TF卡烧录软件-Raspberry-Pi-Imager\"><a href=\"#1-下载-TF卡烧录软件-Raspberry-Pi-Imager\" class=\"headerlink\" title=\"1. 下载  TF卡烧录软件(Raspberry Pi Imager)\"></a>1. 下载  TF卡烧录软件(Raspberry Pi Imager)</h4><blockquote>\n<p>曾经据说这个软件可能还不稳定，可以用 balena Etcher 等工具替代。不过我建议先用 Raspberry Pi Imager 试试，如果有问题在换。</p>\n</blockquote>\n<p>访问 <a href=\"https://www.raspberrypi.org/downloads/\" target=\"_blank\" rel=\"noopener\">官网下载区</a> 即可下载 Raspberry Pi Imager。</p>\n<h4 id=\"2-下载操作系统-Raspbian\"><a href=\"#2-下载操作系统-Raspbian\" class=\"headerlink\" title=\"2. 下载操作系统(Raspbian)\"></a>2. 下载操作系统(Raspbian)</h4><blockquote>\n<p>建议选择官方系统，文档更多。遇到问题也稍微好解决一点。其他的系统最多性能比较好，但维护起来没什么优势。</p>\n</blockquote>\n<p>Raspbian 操作系统官网提供三个版本：</p>\n<ul>\n<li>Raspbian Buster with desktop and recommended software：桌面版，外带一堆软件，不是特别推荐，除非你要作为桌面版拿来体验玩玩。</li>\n<li>Raspbian Buster with desktop ：桌面版，没有附加软件，推荐</li>\n<li>Raspbian Buster Lite：精简版，就是没有桌面，如果主要跑服务，推荐</li>\n</ul>\n<p>我选择的是 Raspbian Buster with desktop，后续可以通过 VNC 开远程桌面。不过 VNC 对我来说目前还没什么实际用途。</p>\n<h4 id=\"3-烧录-TF-卡\"><a href=\"#3-烧录-TF-卡\" class=\"headerlink\" title=\"3. 烧录 TF 卡\"></a>3. 烧录 TF 卡</h4><p><img src=\"https://cdn0.yukapril.com/2020-05-11-pi-6.jpg-wm.white\" alt=\"Raspberry Pi Imager\"></p>\n<p>使用第一步的软件，对第二步的系统 img 文件进行烧录。操作很简单。</p>\n<p>唯一要注意的，选择 「Operating System」时候，选择最后一个 「Use Custom」，来选择你下载的文件。</p>\n<h2 id=\"首次进行开机-ssh-和网络的准备\"><a href=\"#首次进行开机-ssh-和网络的准备\" class=\"headerlink\" title=\"首次进行开机 ssh 和网络的准备\"></a>首次进行开机 ssh 和网络的准备</h2><p>烧录完毕 TF 卡，重新插拔后会发现，只能看到一个几百 MB 的 Fat32 分区了。这个是启动分区，Fat32 格式所有电脑都可以识别和修改里面的内容。剩余的空间，会单独分区用作树莓派系统。</p>\n<p>此时如果直接插卡开机，是不能通过 ssh 进行连接的。</p>\n<p>需要在分区内，增加一个名字叫做 <code>ssh</code> 的空文件。</p>\n<p>如果使用网线，则不需要额外配置网络。如果想用 WiFi 进行连接，可以搜索下相关文档，看过之后你就知道还是准备条网线才是真香。</p>\n<h2 id=\"开机和其他一些后续建议的设置\"><a href=\"#开机和其他一些后续建议的设置\" class=\"headerlink\" title=\"开机和其他一些后续建议的设置\"></a>开机和其他一些后续建议的设置</h2><p>准备好所有物品，插卡，接入电源，接好网线。</p>\n<p>树莓派尾部有两个灯，一红一绿。红色灯是电源指示灯，绿色是硬盘指示灯。一般是红色灯常亮，绿色灯开机亮，之后闪烁。</p>\n<p>通过路由或者其他方式，查到树莓派的 IP 地址。下文以 <code>10.0.0.81</code> 说明。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh pi@10.0.0.81 <span class=\"comment\"># 以用户pi来链接10.0.0.81</span></span><br><span class=\"line\"><span class=\"comment\"># 之后会要求输入密码，默认密码raspberry</span></span><br></pre></td></tr></table></figure>\n\n<p>链接成功后，执行配置工具：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo raspi-config</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn0.yukapril.com/2020-05-11-pi-7.jpg-wm.white\" alt=\"raspi-config\"></p>\n<p>在这里可以修改密码、配置时区、键盘布局、网络 WiFi 等。请自行配置即可，比较容易的。</p>\n<h4 id=\"开启-VNC\"><a href=\"#开启-VNC\" class=\"headerlink\" title=\"开启 VNC\"></a>开启 VNC</h4><p>如果想远程桌面，可以开启 VNC。单独说下开启 VNC，因为有坑。</p>\n<p>进入<code>5 Interfacing Options</code> 后，选择 <code>P3 VNC</code> 进行开启。之后需要到 <code>7 Advanced Options</code>中，配置 <code>A5 Resolution</code> 分辨率。<strong>如果不配置分辨率，使用 VNC 链接会屏幕无内容或报错。</strong></p>\n<h4 id=\"切换到国内源\"><a href=\"#切换到国内源\" class=\"headerlink\" title=\"切换到国内源\"></a>切换到国内源</h4><p>Raspberry Pi 有两个地方需要修改。建议先备份，再修改。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup</span><br><span class=\"line\">sudo vi /etc/apt/sources.list</span><br><span class=\"line\"><span class=\"comment\"># 编辑 URL 部分，都改成 </span></span><br><span class=\"line\"><span class=\"comment\"># http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/</span></span><br><span class=\"line\"><span class=\"comment\"># 其他地方不要改</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp /etc/apt/sources.list.d/raspi.list /etc/apt/sources.list.d/raspi.list.backup</span><br><span class=\"line\">sudo vi /etc/apt/sources.list.d/raspi.list</span><br><span class=\"line\"><span class=\"comment\"># 编辑 URL 部分，都改成 </span></span><br><span class=\"line\"><span class=\"comment\"># http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/</span></span><br><span class=\"line\"><span class=\"comment\"># 其他地方不要改</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更新-EEPROM\"><a href=\"#更新-EEPROM\" class=\"headerlink\" title=\"更新 EEPROM\"></a>更新 EEPROM</h4><p><strong>不了解 EEPROM，这个操作可以不做。</strong></p>\n<p>由于 Raspberry Pi 4B 启动代码不是放在 TF 卡里了，所以如果有必要，可以手动更新 EEPROM。</p>\n<blockquote>\n<p>目前 4B 的 EEPROM 不支持 USB 等启动，等后续 EEPROM 更新。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install rpi-eeprom</span><br><span class=\"line\">sudo rpi-eeprom-update</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><a href=\"https://shumeipai.nxez.com/2014/09/30/raspberry-pi-led-status-detail.html\" target=\"_blank\" rel=\"noopener\">树莓派LED指示灯状态的解释</a></li>\n<li><a href=\"http://www.52pi.net/archives/1729\" target=\"_blank\" rel=\"noopener\">树莓派 VNC Viewer 远程桌面配置教程</a></li>\n<li><a href=\"https://www.quarkbook.com/?p=636\" target=\"_blank\" rel=\"noopener\">树莓派4 Buster换源</a></li>\n</ul>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>从 2018 年就开始考虑入手一个树莓派玩玩，当时还是 Raspberry Pi 3B+ 刚出的时候。后来发现自己没有太多用途，也就没着急入手。一晃到了 2019 年，看了阮一峰老师的文章，介绍树莓派的入门，再次想起了这个东西。可惜当时感觉也没有什么用途，再加上听说要出 Raspberry Pi 4B 了，就特意等了等。</p>\n<p>2019 年 6 月，果真推出 Raspberry Pi 4B 了，不过当时价格虚高，等到十一左右才算稳定。而且爆出了供电问题。而且，我还是没什么用途。</p>\n<p>2020 年刚过，终于下决心了。这次真的有用途了。</p>","more":"<h2 id=\"入手-Raspberry-Pi-4B-4GB\"><a href=\"#入手-Raspberry-Pi-4B-4GB\" class=\"headerlink\" title=\"入手 Raspberry Pi 4B (4GB)\"></a>入手 Raspberry Pi 4B (4GB)</h2><p><img src=\"https://cdn0.yukapril.com/2020-05-11-pi-1.jpg-wm.white\" alt=\"外包装已经被我打开，因为收到后第一时间就开箱欣赏了\"></p>\n<p><img src=\"https://cdn0.yukapril.com/2020-05-11-pi-2.jpg-wm.white\" alt=\"配件全家福\"></p>\n<p><img src=\"https://cdn0.yukapril.com/2020-05-11-pi-3.jpg-wm.white\" alt=\"Raspberry Pi 4B 特写\"></p>\n<p><img src=\"https://cdn0.yukapril.com/2020-05-11-pi-4.jpg-wm.white\" alt=\"Raspberry Pi 4B 特写\"></p>\n<p>拿到手之后，才发现他是如此的小巧，和信用卡般的大小，拿在手里迷你至极。甚至打开快递盒后，一度认为电源的盒子内装的才是本体。</p>\n<p>同时被它的做工惊艳到了。虽然是开发板，入门级电脑，但做工绝不含糊，规整的电路和清晰的印刷给我留下了极深的印象。</p>\n<p>后来甚至在想，要不要再买一个，放在公司或者床头，当个摆件?</p>\n<h2 id=\"版本选择\"><a href=\"#版本选择\" class=\"headerlink\" title=\"版本选择\"></a>版本选择</h2><p>性能上，Raspberry Pi 4B 确实有较大提升，但是温度据说也比较高。日常使用至少建议配散热器（散热壳），中度使用还需要风扇。</p>\n<p>Raspberry Pi 3B / 3B+，虽然配置低了些，但是会温度低一些，跑跑日常工具也够用。</p>\n<p>价格上，现在（2020-05-11），Raspberry Pi 3B+ 235 元左右，Raspberry Pi 4B 的 2GB 版本 260 元左右，4GB版本 405 元左右。 </p>\n<p>本着买新不买旧，如果没买过的话，建议 Raspberry Pi 4B。跑小功能的话，2GB版本够用了。如果不差钱，直接 4GB 版本。如果有了 3B 系列，没遇到瓶颈，可以不换。</p>\n<p>如果想用桌面的话，建议 Pi 4B 4GB 版本。</p>\n<p>如果追求 USB 接口速度，网口速度等，NAS 等用途，选 Pi 4B。</p>\n<p>此外，Pi 4B 由于供电问题，新版已经修改了这个硬件 bug，买的时候，询问店家是否是 v1.2 及之后版本。</p>\n<h2 id=\"Micro-SD-TF-卡选择\"><a href=\"#Micro-SD-TF-卡选择\" class=\"headerlink\" title=\"Micro SD(TF) 卡选择\"></a>Micro SD(TF) 卡选择</h2><p>Micro SD 卡就是 TF 卡。就是那种非常小，指甲盖大小的卡。如果套上一个外壳，可以变成 SD 卡。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-05-11-pi-5.jpg-wm.black\" alt=\"各种卡介绍\"></p>\n<p>为了好拼写，下文直接叫做 TF 卡。</p>\n<p>由于树莓派 4B 本身 TF 速度大概是读取不到 100M/s，写入 40M/s 左右。所以不需要买比较顶级的卡，一方面是多花钱性能用不到，另一方面可能不兼容。</p>\n<p>没听说有用户使用 256GB 的卡，不确定这么大容量是否兼容。128GB 有 4B 用户在用，但也很少。稳妥起见，最大 64GB 为宜。不能小于 16GB，否则空间太小。</p>\n<p>根据某个淘宝店家传言，之前树莓派对三星的卡兼容不好，尤其容量大的卡。</p>\n<p>大部分人都是选择常规容量卡，如果有额外需求，外挂硬盘。</p>\n<h2 id=\"启动树莓派\"><a href=\"#启动树莓派\" class=\"headerlink\" title=\"启动树莓派\"></a>启动树莓派</h2><p>启动树莓派有几部分内容：</p>\n<ul>\n<li>硬件的准备（最小规格）</li>\n<li>TF 卡的准备</li>\n<li>首次进行开机 ssh 和网络的准备</li>\n<li>开机和其他一些后续建议的设置</li>\n</ul>\n<p>接下来我分别说明。</p>\n<h2 id=\"硬件的准备\"><a href=\"#硬件的准备\" class=\"headerlink\" title=\"硬件的准备\"></a>硬件的准备</h2><p>要想用树莓派，硬件必须准备的：</p>\n<ul>\n<li>树莓派本体</li>\n<li>电源适配器，4B 建议官方电源或店家电源，因为老的版本硬件有bug，不是所有的 type-C 电源都可用</li>\n<li>装有系统的 TF 卡</li>\n<li>最好有网线，操作起来很简单。没有的话就要配置 WiFi</li>\n</ul>\n<p>不需要 HDMI 线，不需要额外显示器键盘鼠标等。</p>\n<h2 id=\"TF-卡的准备\"><a href=\"#TF-卡的准备\" class=\"headerlink\" title=\"TF 卡的准备\"></a>TF 卡的准备</h2><h4 id=\"1-下载-TF卡烧录软件-Raspberry-Pi-Imager\"><a href=\"#1-下载-TF卡烧录软件-Raspberry-Pi-Imager\" class=\"headerlink\" title=\"1. 下载  TF卡烧录软件(Raspberry Pi Imager)\"></a>1. 下载  TF卡烧录软件(Raspberry Pi Imager)</h4><blockquote>\n<p>曾经据说这个软件可能还不稳定，可以用 balena Etcher 等工具替代。不过我建议先用 Raspberry Pi Imager 试试，如果有问题在换。</p>\n</blockquote>\n<p>访问 <a href=\"https://www.raspberrypi.org/downloads/\" target=\"_blank\" rel=\"noopener\">官网下载区</a> 即可下载 Raspberry Pi Imager。</p>\n<h4 id=\"2-下载操作系统-Raspbian\"><a href=\"#2-下载操作系统-Raspbian\" class=\"headerlink\" title=\"2. 下载操作系统(Raspbian)\"></a>2. 下载操作系统(Raspbian)</h4><blockquote>\n<p>建议选择官方系统，文档更多。遇到问题也稍微好解决一点。其他的系统最多性能比较好，但维护起来没什么优势。</p>\n</blockquote>\n<p>Raspbian 操作系统官网提供三个版本：</p>\n<ul>\n<li>Raspbian Buster with desktop and recommended software：桌面版，外带一堆软件，不是特别推荐，除非你要作为桌面版拿来体验玩玩。</li>\n<li>Raspbian Buster with desktop ：桌面版，没有附加软件，推荐</li>\n<li>Raspbian Buster Lite：精简版，就是没有桌面，如果主要跑服务，推荐</li>\n</ul>\n<p>我选择的是 Raspbian Buster with desktop，后续可以通过 VNC 开远程桌面。不过 VNC 对我来说目前还没什么实际用途。</p>\n<h4 id=\"3-烧录-TF-卡\"><a href=\"#3-烧录-TF-卡\" class=\"headerlink\" title=\"3. 烧录 TF 卡\"></a>3. 烧录 TF 卡</h4><p><img src=\"https://cdn0.yukapril.com/2020-05-11-pi-6.jpg-wm.white\" alt=\"Raspberry Pi Imager\"></p>\n<p>使用第一步的软件，对第二步的系统 img 文件进行烧录。操作很简单。</p>\n<p>唯一要注意的，选择 「Operating System」时候，选择最后一个 「Use Custom」，来选择你下载的文件。</p>\n<h2 id=\"首次进行开机-ssh-和网络的准备\"><a href=\"#首次进行开机-ssh-和网络的准备\" class=\"headerlink\" title=\"首次进行开机 ssh 和网络的准备\"></a>首次进行开机 ssh 和网络的准备</h2><p>烧录完毕 TF 卡，重新插拔后会发现，只能看到一个几百 MB 的 Fat32 分区了。这个是启动分区，Fat32 格式所有电脑都可以识别和修改里面的内容。剩余的空间，会单独分区用作树莓派系统。</p>\n<p>此时如果直接插卡开机，是不能通过 ssh 进行连接的。</p>\n<p>需要在分区内，增加一个名字叫做 <code>ssh</code> 的空文件。</p>\n<p>如果使用网线，则不需要额外配置网络。如果想用 WiFi 进行连接，可以搜索下相关文档，看过之后你就知道还是准备条网线才是真香。</p>\n<h2 id=\"开机和其他一些后续建议的设置\"><a href=\"#开机和其他一些后续建议的设置\" class=\"headerlink\" title=\"开机和其他一些后续建议的设置\"></a>开机和其他一些后续建议的设置</h2><p>准备好所有物品，插卡，接入电源，接好网线。</p>\n<p>树莓派尾部有两个灯，一红一绿。红色灯是电源指示灯，绿色是硬盘指示灯。一般是红色灯常亮，绿色灯开机亮，之后闪烁。</p>\n<p>通过路由或者其他方式，查到树莓派的 IP 地址。下文以 <code>10.0.0.81</code> 说明。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh pi@10.0.0.81 <span class=\"comment\"># 以用户pi来链接10.0.0.81</span></span><br><span class=\"line\"><span class=\"comment\"># 之后会要求输入密码，默认密码raspberry</span></span><br></pre></td></tr></table></figure>\n\n<p>链接成功后，执行配置工具：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo raspi-config</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn0.yukapril.com/2020-05-11-pi-7.jpg-wm.white\" alt=\"raspi-config\"></p>\n<p>在这里可以修改密码、配置时区、键盘布局、网络 WiFi 等。请自行配置即可，比较容易的。</p>\n<h4 id=\"开启-VNC\"><a href=\"#开启-VNC\" class=\"headerlink\" title=\"开启 VNC\"></a>开启 VNC</h4><p>如果想远程桌面，可以开启 VNC。单独说下开启 VNC，因为有坑。</p>\n<p>进入<code>5 Interfacing Options</code> 后，选择 <code>P3 VNC</code> 进行开启。之后需要到 <code>7 Advanced Options</code>中，配置 <code>A5 Resolution</code> 分辨率。<strong>如果不配置分辨率，使用 VNC 链接会屏幕无内容或报错。</strong></p>\n<h4 id=\"切换到国内源\"><a href=\"#切换到国内源\" class=\"headerlink\" title=\"切换到国内源\"></a>切换到国内源</h4><p>Raspberry Pi 有两个地方需要修改。建议先备份，再修改。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup</span><br><span class=\"line\">sudo vi /etc/apt/sources.list</span><br><span class=\"line\"><span class=\"comment\"># 编辑 URL 部分，都改成 </span></span><br><span class=\"line\"><span class=\"comment\"># http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/</span></span><br><span class=\"line\"><span class=\"comment\"># 其他地方不要改</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp /etc/apt/sources.list.d/raspi.list /etc/apt/sources.list.d/raspi.list.backup</span><br><span class=\"line\">sudo vi /etc/apt/sources.list.d/raspi.list</span><br><span class=\"line\"><span class=\"comment\"># 编辑 URL 部分，都改成 </span></span><br><span class=\"line\"><span class=\"comment\"># http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/</span></span><br><span class=\"line\"><span class=\"comment\"># 其他地方不要改</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更新-EEPROM\"><a href=\"#更新-EEPROM\" class=\"headerlink\" title=\"更新 EEPROM\"></a>更新 EEPROM</h4><p><strong>不了解 EEPROM，这个操作可以不做。</strong></p>\n<p>由于 Raspberry Pi 4B 启动代码不是放在 TF 卡里了，所以如果有必要，可以手动更新 EEPROM。</p>\n<blockquote>\n<p>目前 4B 的 EEPROM 不支持 USB 等启动，等后续 EEPROM 更新。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install rpi-eeprom</span><br><span class=\"line\">sudo rpi-eeprom-update</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><a href=\"https://shumeipai.nxez.com/2014/09/30/raspberry-pi-led-status-detail.html\" target=\"_blank\" rel=\"noopener\">树莓派LED指示灯状态的解释</a></li>\n<li><a href=\"http://www.52pi.net/archives/1729\" target=\"_blank\" rel=\"noopener\">树莓派 VNC Viewer 远程桌面配置教程</a></li>\n<li><a href=\"https://www.quarkbook.com/?p=636\" target=\"_blank\" rel=\"noopener\">树莓派4 Buster换源</a></li>\n</ul>\n<p>–END–</p>"},{"layout":"post","title":"Docker 安装和简易入门","date":"2020-05-23T14:56:00.000Z","_content":"\n后续由于树莓派用到了 Docker，所以得开个新坑来写写 Docker 的简易入门。\n\n<!-- more -->\n\n## 安装\n\n首先给出[官网下载地址](https://docs.docker.com/engine/install)，如果是 Windows 或 MacOS，有对应的安装包，直接安装就好。带有图形界面，方便配置和重启。\n\nLinux 的话，需要用脚本或者命令来安装。可以参考上面的下载地址，也有对应 Linux 的安装方式。如果是树莓派，可以按照 Debian 的方法来。\n\n但比较省事的方式是：\n\n```bash\ncurl -sSL get.docker.com |sh\n```\n\n## 管理员权限运行\n\nDocker 需要管理员来运行，为了省事，可以把 Docker 用户加入到管理组。如果不增加到管理组，每条命令前面必须加入 `sudo`。\n\n```bash\nsudo usermod -aG docker $USER\n```\n\n## 更改为国内源\n\n更改国内源，目前发现只有阿里云的速度非常好。可能是用的人多，缓存命中率也高。\n\n其他第三方（网易、某高校、docker 中国区），都不用注册，结果就是都存在部分镜像没有缓存，那就变的非常慢了。\n\n登录阿里云，访问「[容器镜像服务](https://cr.console.aliyun.com/)」，然后去「镜像加速器」栏目，查看自己的加速器地址。\n\n具体的操作方法，在加速器地址的页面下侧也有写。Windows 和 MacOS 因为有图形界面，可以直接配置。\n\n其他 Linux，比如树莓派，按照 Ubuntu 的方式，内容如下：\n\n> 您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器\n> \n> sudo mkdir -p /etc/docker\n> sudo tee /etc/docker/daemon.json <<-'EOF'\n> {\n>   \"registry-mirrors\": [\"https://tca8ayts.mirror.aliyuncs.com\"]\n> }\n> EOF\n> sudo systemctl daemon-reload\n> sudo systemctl restart docker\n> \n\n\n## 常用命令\n\n```bash\ndocker image ls # 列出当前本地的镜像，简写 docker images\ndocker image pull xxx # 拉取一个镜像，简写 docker pull\ndocker image rm xxx # 移除一个本地镜像，简写 docker rmi\ndocker image build -t xxx /path # 通过 Dockerfile 构建一个镜像，简写 docker build\n\ndocker container ls --all # 当前存在的容器，不加 --all 则只显示运行中的容器，简写 docker ps \ndocker container run xxx # 运行一个新容器，简写 docker run\ndocker container exec -it xxx /bin/bash # 进入一个后台运行的容器，简写 docker exec\ndocker container stop xxx # 停止一个容器，简称 docker stop\ndocker container start xxx # 启动一个容器，简称 docker start\ndocker container kill xxx # 强行结束一个容器，简称 docker kill\ndocker container rm xxx # 移除一个容器，简写 docker rm\n```\n\n```bash\ndocker container run --name --rm -p 8000:3000 -itd xxx /bin/bash \n# name 指容器别名\n# rm 指容器停止运行后，自动移除\n# p 指端口映射（将容器3000映射到当前系统8000）\n# i 指交互模式\n# t 指终端\n# d 指后台运行\n```\n\n#### docker run 说明\n\n如果启动的镜像不存在，则先进行 docker image pull，之后再进行启动。\n\n## 容器开机启动\n\n具体可以参考[官网-restart-policies](https://docs.docker.com/engine/reference/run/#restart-policies---restart)\n\n```bash\ndocker run -it -p 58080:8080 --restart=always mytomcat:4.0 /root/run.sh\n# restart 重启策略，默认为 no，退出后不再启动。\n# 可以配置为：\n#   * always，永远启动\n#   * on-failure，失败就启动\n```\n\n## 安装 protainer 可视化工具\n\n这个简直太方便了，省去敲好多命令。可以参考[官网安装方法](https://www.portainer.io/installation/)。\n\n![登录后的首页](https://cdn0.yukapril.com/2020-05-23-docker-1.png-wm.black)\n\n![容器管理页](https://cdn0.yukapril.com/2020-05-23-docker-2.png-wm.black)\n\n> 体验地址: http://demo.portainer.io/\n> 用户名: admin\n> 密码: tryportainer\n\n\n如果是 Linux，安装方式如下：\n\n```bash\n$ docker volume create portainer_data\n$ docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer\n```\n\n## 参考\n\n* [http://dockone.io/article/1732](http://dockone.io/article/1732)\n* [Docker 入门教程](http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html)\n\n--END--\n","source":"_posts/2020/2020-05-23-docker.md","raw":"---\nlayout: post\ntitle: Docker 安装和简易入门\ndate: 2020-05-23 14:56:00 GMT+0800\ncategories: [编程]\ntags:  [docker]\n---\n\n后续由于树莓派用到了 Docker，所以得开个新坑来写写 Docker 的简易入门。\n\n<!-- more -->\n\n## 安装\n\n首先给出[官网下载地址](https://docs.docker.com/engine/install)，如果是 Windows 或 MacOS，有对应的安装包，直接安装就好。带有图形界面，方便配置和重启。\n\nLinux 的话，需要用脚本或者命令来安装。可以参考上面的下载地址，也有对应 Linux 的安装方式。如果是树莓派，可以按照 Debian 的方法来。\n\n但比较省事的方式是：\n\n```bash\ncurl -sSL get.docker.com |sh\n```\n\n## 管理员权限运行\n\nDocker 需要管理员来运行，为了省事，可以把 Docker 用户加入到管理组。如果不增加到管理组，每条命令前面必须加入 `sudo`。\n\n```bash\nsudo usermod -aG docker $USER\n```\n\n## 更改为国内源\n\n更改国内源，目前发现只有阿里云的速度非常好。可能是用的人多，缓存命中率也高。\n\n其他第三方（网易、某高校、docker 中国区），都不用注册，结果就是都存在部分镜像没有缓存，那就变的非常慢了。\n\n登录阿里云，访问「[容器镜像服务](https://cr.console.aliyun.com/)」，然后去「镜像加速器」栏目，查看自己的加速器地址。\n\n具体的操作方法，在加速器地址的页面下侧也有写。Windows 和 MacOS 因为有图形界面，可以直接配置。\n\n其他 Linux，比如树莓派，按照 Ubuntu 的方式，内容如下：\n\n> 您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器\n> \n> sudo mkdir -p /etc/docker\n> sudo tee /etc/docker/daemon.json <<-'EOF'\n> {\n>   \"registry-mirrors\": [\"https://tca8ayts.mirror.aliyuncs.com\"]\n> }\n> EOF\n> sudo systemctl daemon-reload\n> sudo systemctl restart docker\n> \n\n\n## 常用命令\n\n```bash\ndocker image ls # 列出当前本地的镜像，简写 docker images\ndocker image pull xxx # 拉取一个镜像，简写 docker pull\ndocker image rm xxx # 移除一个本地镜像，简写 docker rmi\ndocker image build -t xxx /path # 通过 Dockerfile 构建一个镜像，简写 docker build\n\ndocker container ls --all # 当前存在的容器，不加 --all 则只显示运行中的容器，简写 docker ps \ndocker container run xxx # 运行一个新容器，简写 docker run\ndocker container exec -it xxx /bin/bash # 进入一个后台运行的容器，简写 docker exec\ndocker container stop xxx # 停止一个容器，简称 docker stop\ndocker container start xxx # 启动一个容器，简称 docker start\ndocker container kill xxx # 强行结束一个容器，简称 docker kill\ndocker container rm xxx # 移除一个容器，简写 docker rm\n```\n\n```bash\ndocker container run --name --rm -p 8000:3000 -itd xxx /bin/bash \n# name 指容器别名\n# rm 指容器停止运行后，自动移除\n# p 指端口映射（将容器3000映射到当前系统8000）\n# i 指交互模式\n# t 指终端\n# d 指后台运行\n```\n\n#### docker run 说明\n\n如果启动的镜像不存在，则先进行 docker image pull，之后再进行启动。\n\n## 容器开机启动\n\n具体可以参考[官网-restart-policies](https://docs.docker.com/engine/reference/run/#restart-policies---restart)\n\n```bash\ndocker run -it -p 58080:8080 --restart=always mytomcat:4.0 /root/run.sh\n# restart 重启策略，默认为 no，退出后不再启动。\n# 可以配置为：\n#   * always，永远启动\n#   * on-failure，失败就启动\n```\n\n## 安装 protainer 可视化工具\n\n这个简直太方便了，省去敲好多命令。可以参考[官网安装方法](https://www.portainer.io/installation/)。\n\n![登录后的首页](https://cdn0.yukapril.com/2020-05-23-docker-1.png-wm.black)\n\n![容器管理页](https://cdn0.yukapril.com/2020-05-23-docker-2.png-wm.black)\n\n> 体验地址: http://demo.portainer.io/\n> 用户名: admin\n> 密码: tryportainer\n\n\n如果是 Linux，安装方式如下：\n\n```bash\n$ docker volume create portainer_data\n$ docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer\n```\n\n## 参考\n\n* [http://dockone.io/article/1732](http://dockone.io/article/1732)\n* [Docker 入门教程](http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html)\n\n--END--\n","slug":"2020-2020-05-23-docker","published":1,"updated":"2020-05-23T08:10:15.417Z","_id":"ckajc2g1n00008ybgfg0g80v8","comments":1,"photos":[],"link":"","content":"<p>后续由于树莓派用到了 Docker，所以得开个新坑来写写 Docker 的简易入门。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>首先给出<a href=\"https://docs.docker.com/engine/install\" target=\"_blank\" rel=\"noopener\">官网下载地址</a>，如果是 Windows 或 MacOS，有对应的安装包，直接安装就好。带有图形界面，方便配置和重启。</p>\n<p>Linux 的话，需要用脚本或者命令来安装。可以参考上面的下载地址，也有对应 Linux 的安装方式。如果是树莓派，可以按照 Debian 的方法来。</p>\n<p>但比较省事的方式是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sSL get.docker.com |sh</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"管理员权限运行\"><a href=\"#管理员权限运行\" class=\"headerlink\" title=\"管理员权限运行\"></a>管理员权限运行</h2><p>Docker 需要管理员来运行，为了省事，可以把 Docker 用户加入到管理组。如果不增加到管理组，每条命令前面必须加入 <code>sudo</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo usermod -aG docker <span class=\"variable\">$USER</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更改为国内源\"><a href=\"#更改为国内源\" class=\"headerlink\" title=\"更改为国内源\"></a>更改为国内源</h2><p>更改国内源，目前发现只有阿里云的速度非常好。可能是用的人多，缓存命中率也高。</p>\n<p>其他第三方（网易、某高校、docker 中国区），都不用注册，结果就是都存在部分镜像没有缓存，那就变的非常慢了。</p>\n<p>登录阿里云，访问「<a href=\"https://cr.console.aliyun.com/\" target=\"_blank\" rel=\"noopener\">容器镜像服务</a>」，然后去「镜像加速器」栏目，查看自己的加速器地址。</p>\n<p>具体的操作方法，在加速器地址的页面下侧也有写。Windows 和 MacOS 因为有图形界面，可以直接配置。</p>\n<p>其他 Linux，比如树莓派，按照 Ubuntu 的方式，内容如下：</p>\n<blockquote>\n<p>您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</p>\n<p>sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-‘EOF’<br>{<br>  “registry-mirrors”: [“<a href=\"https://tca8ayts.mirror.aliyuncs.com&quot;]\" target=\"_blank\" rel=\"noopener\">https://tca8ayts.mirror.aliyuncs.com&quot;]</a><br>}<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker</p>\n</blockquote>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker image ls <span class=\"comment\"># 列出当前本地的镜像，简写 docker images</span></span><br><span class=\"line\">docker image pull xxx <span class=\"comment\"># 拉取一个镜像，简写 docker pull</span></span><br><span class=\"line\">docker image rm xxx <span class=\"comment\"># 移除一个本地镜像，简写 docker rmi</span></span><br><span class=\"line\">docker image build -t xxx /path <span class=\"comment\"># 通过 Dockerfile 构建一个镜像，简写 docker build</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker container ls --all <span class=\"comment\"># 当前存在的容器，不加 --all 则只显示运行中的容器，简写 docker ps </span></span><br><span class=\"line\">docker container run xxx <span class=\"comment\"># 运行一个新容器，简写 docker run</span></span><br><span class=\"line\">docker container <span class=\"built_in\">exec</span> -it xxx /bin/bash <span class=\"comment\"># 进入一个后台运行的容器，简写 docker exec</span></span><br><span class=\"line\">docker container stop xxx <span class=\"comment\"># 停止一个容器，简称 docker stop</span></span><br><span class=\"line\">docker container start xxx <span class=\"comment\"># 启动一个容器，简称 docker start</span></span><br><span class=\"line\">docker container <span class=\"built_in\">kill</span> xxx <span class=\"comment\"># 强行结束一个容器，简称 docker kill</span></span><br><span class=\"line\">docker container rm xxx <span class=\"comment\"># 移除一个容器，简写 docker rm</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run --name --rm -p 8000:3000 -itd xxx /bin/bash </span><br><span class=\"line\"><span class=\"comment\"># name 指容器别名</span></span><br><span class=\"line\"><span class=\"comment\"># rm 指容器停止运行后，自动移除</span></span><br><span class=\"line\"><span class=\"comment\"># p 指端口映射（将容器3000映射到当前系统8000）</span></span><br><span class=\"line\"><span class=\"comment\"># i 指交互模式</span></span><br><span class=\"line\"><span class=\"comment\"># t 指终端</span></span><br><span class=\"line\"><span class=\"comment\"># d 指后台运行</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"docker-run-说明\"><a href=\"#docker-run-说明\" class=\"headerlink\" title=\"docker run 说明\"></a>docker run 说明</h4><p>如果启动的镜像不存在，则先进行 docker image pull，之后再进行启动。</p>\n<h2 id=\"容器开机启动\"><a href=\"#容器开机启动\" class=\"headerlink\" title=\"容器开机启动\"></a>容器开机启动</h2><p>具体可以参考<a href=\"https://docs.docker.com/engine/reference/run/#restart-policies---restart\" target=\"_blank\" rel=\"noopener\">官网-restart-policies</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -p 58080:8080 --restart=always mytomcat:4.0 /root/run.sh</span><br><span class=\"line\"><span class=\"comment\"># restart 重启策略，默认为 no，退出后不再启动。</span></span><br><span class=\"line\"><span class=\"comment\"># 可以配置为：</span></span><br><span class=\"line\"><span class=\"comment\">#   * always，永远启动</span></span><br><span class=\"line\"><span class=\"comment\">#   * on-failure，失败就启动</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-protainer-可视化工具\"><a href=\"#安装-protainer-可视化工具\" class=\"headerlink\" title=\"安装 protainer 可视化工具\"></a>安装 protainer 可视化工具</h2><p>这个简直太方便了，省去敲好多命令。可以参考<a href=\"https://www.portainer.io/installation/\" target=\"_blank\" rel=\"noopener\">官网安装方法</a>。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-05-23-docker-1.png-wm.black\" alt=\"登录后的首页\"></p>\n<p><img src=\"https://cdn0.yukapril.com/2020-05-23-docker-2.png-wm.black\" alt=\"容器管理页\"></p>\n<blockquote>\n<p>体验地址: <a href=\"http://demo.portainer.io/\" target=\"_blank\" rel=\"noopener\">http://demo.portainer.io/</a><br>用户名: admin<br>密码: tryportainer</p>\n</blockquote>\n<p>如果是 Linux，安装方式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker volume create portainer_data</span><br><span class=\"line\">$ docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://dockone.io/article/1732\" target=\"_blank\" rel=\"noopener\">http://dockone.io/article/1732</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html\" target=\"_blank\" rel=\"noopener\">Docker 入门教程</a></li>\n</ul>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>后续由于树莓派用到了 Docker，所以得开个新坑来写写 Docker 的简易入门。</p>","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>首先给出<a href=\"https://docs.docker.com/engine/install\" target=\"_blank\" rel=\"noopener\">官网下载地址</a>，如果是 Windows 或 MacOS，有对应的安装包，直接安装就好。带有图形界面，方便配置和重启。</p>\n<p>Linux 的话，需要用脚本或者命令来安装。可以参考上面的下载地址，也有对应 Linux 的安装方式。如果是树莓派，可以按照 Debian 的方法来。</p>\n<p>但比较省事的方式是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sSL get.docker.com |sh</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"管理员权限运行\"><a href=\"#管理员权限运行\" class=\"headerlink\" title=\"管理员权限运行\"></a>管理员权限运行</h2><p>Docker 需要管理员来运行，为了省事，可以把 Docker 用户加入到管理组。如果不增加到管理组，每条命令前面必须加入 <code>sudo</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo usermod -aG docker <span class=\"variable\">$USER</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更改为国内源\"><a href=\"#更改为国内源\" class=\"headerlink\" title=\"更改为国内源\"></a>更改为国内源</h2><p>更改国内源，目前发现只有阿里云的速度非常好。可能是用的人多，缓存命中率也高。</p>\n<p>其他第三方（网易、某高校、docker 中国区），都不用注册，结果就是都存在部分镜像没有缓存，那就变的非常慢了。</p>\n<p>登录阿里云，访问「<a href=\"https://cr.console.aliyun.com/\" target=\"_blank\" rel=\"noopener\">容器镜像服务</a>」，然后去「镜像加速器」栏目，查看自己的加速器地址。</p>\n<p>具体的操作方法，在加速器地址的页面下侧也有写。Windows 和 MacOS 因为有图形界面，可以直接配置。</p>\n<p>其他 Linux，比如树莓派，按照 Ubuntu 的方式，内容如下：</p>\n<blockquote>\n<p>您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</p>\n<p>sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-‘EOF’<br>{<br>  “registry-mirrors”: [“<a href=\"https://tca8ayts.mirror.aliyuncs.com&quot;]\" target=\"_blank\" rel=\"noopener\">https://tca8ayts.mirror.aliyuncs.com&quot;]</a><br>}<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker</p>\n</blockquote>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker image ls <span class=\"comment\"># 列出当前本地的镜像，简写 docker images</span></span><br><span class=\"line\">docker image pull xxx <span class=\"comment\"># 拉取一个镜像，简写 docker pull</span></span><br><span class=\"line\">docker image rm xxx <span class=\"comment\"># 移除一个本地镜像，简写 docker rmi</span></span><br><span class=\"line\">docker image build -t xxx /path <span class=\"comment\"># 通过 Dockerfile 构建一个镜像，简写 docker build</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker container ls --all <span class=\"comment\"># 当前存在的容器，不加 --all 则只显示运行中的容器，简写 docker ps </span></span><br><span class=\"line\">docker container run xxx <span class=\"comment\"># 运行一个新容器，简写 docker run</span></span><br><span class=\"line\">docker container <span class=\"built_in\">exec</span> -it xxx /bin/bash <span class=\"comment\"># 进入一个后台运行的容器，简写 docker exec</span></span><br><span class=\"line\">docker container stop xxx <span class=\"comment\"># 停止一个容器，简称 docker stop</span></span><br><span class=\"line\">docker container start xxx <span class=\"comment\"># 启动一个容器，简称 docker start</span></span><br><span class=\"line\">docker container <span class=\"built_in\">kill</span> xxx <span class=\"comment\"># 强行结束一个容器，简称 docker kill</span></span><br><span class=\"line\">docker container rm xxx <span class=\"comment\"># 移除一个容器，简写 docker rm</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run --name --rm -p 8000:3000 -itd xxx /bin/bash </span><br><span class=\"line\"><span class=\"comment\"># name 指容器别名</span></span><br><span class=\"line\"><span class=\"comment\"># rm 指容器停止运行后，自动移除</span></span><br><span class=\"line\"><span class=\"comment\"># p 指端口映射（将容器3000映射到当前系统8000）</span></span><br><span class=\"line\"><span class=\"comment\"># i 指交互模式</span></span><br><span class=\"line\"><span class=\"comment\"># t 指终端</span></span><br><span class=\"line\"><span class=\"comment\"># d 指后台运行</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"docker-run-说明\"><a href=\"#docker-run-说明\" class=\"headerlink\" title=\"docker run 说明\"></a>docker run 说明</h4><p>如果启动的镜像不存在，则先进行 docker image pull，之后再进行启动。</p>\n<h2 id=\"容器开机启动\"><a href=\"#容器开机启动\" class=\"headerlink\" title=\"容器开机启动\"></a>容器开机启动</h2><p>具体可以参考<a href=\"https://docs.docker.com/engine/reference/run/#restart-policies---restart\" target=\"_blank\" rel=\"noopener\">官网-restart-policies</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -p 58080:8080 --restart=always mytomcat:4.0 /root/run.sh</span><br><span class=\"line\"><span class=\"comment\"># restart 重启策略，默认为 no，退出后不再启动。</span></span><br><span class=\"line\"><span class=\"comment\"># 可以配置为：</span></span><br><span class=\"line\"><span class=\"comment\">#   * always，永远启动</span></span><br><span class=\"line\"><span class=\"comment\">#   * on-failure，失败就启动</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-protainer-可视化工具\"><a href=\"#安装-protainer-可视化工具\" class=\"headerlink\" title=\"安装 protainer 可视化工具\"></a>安装 protainer 可视化工具</h2><p>这个简直太方便了，省去敲好多命令。可以参考<a href=\"https://www.portainer.io/installation/\" target=\"_blank\" rel=\"noopener\">官网安装方法</a>。</p>\n<p><img src=\"https://cdn0.yukapril.com/2020-05-23-docker-1.png-wm.black\" alt=\"登录后的首页\"></p>\n<p><img src=\"https://cdn0.yukapril.com/2020-05-23-docker-2.png-wm.black\" alt=\"容器管理页\"></p>\n<blockquote>\n<p>体验地址: <a href=\"http://demo.portainer.io/\" target=\"_blank\" rel=\"noopener\">http://demo.portainer.io/</a><br>用户名: admin<br>密码: tryportainer</p>\n</blockquote>\n<p>如果是 Linux，安装方式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker volume create portainer_data</span><br><span class=\"line\">$ docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://dockone.io/article/1732\" target=\"_blank\" rel=\"noopener\">http://dockone.io/article/1732</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html\" target=\"_blank\" rel=\"noopener\">Docker 入门教程</a></li>\n</ul>\n<p>–END–</p>"},{"layout":"post","title":"树莓派 Raspberry Pi (一)：入门","date":"2020-05-31T12:17:00.000Z","_content":"\n之前的文章介绍了树莓派的安装和开机，本次开始，我来聊一聊拥有树莓派后，可以做那些具体的应用，以及我现在怎么来用。\n\n<!-- more -->\n\n## 上次开箱的遗留-温度情况\n\n上次的文章算是开箱加上安装启动。用了两周多的时间，测试了常见的几种情况的温度。\n\n首先是默认系统开机，不加装任何散热，裸板。当时忘记看温度了，就用手摸了摸，感觉挺热的，估计要 45-50 度。\n\n我把它拴好绳子，挂载客厅墙上了（因为距离路由近，方便网线），安装了一体散热壳。安装 Node、Docker，启动了点轻微的任务。关闭WiFi和蓝牙，因为用不到。此时大概 42 度。\n\n3.3v 电压开启双风扇，大概是 39-42 度。5v 电压开启双风扇，大概是 40 度以内。\n\n看样子它常规极限也就是 40 度左右了，很难做到更低的温度。而且至少应该安装比较大的（比较好的）被动散热。如果是跑界面当 PC 来用的话，主动散热（大风扇）是必须的。\n\n我平时就是跑跑网站之类服务，没那么多任务量，被动散热或者轻微开一点风扇都可以满足。\n\n噪音上，3.3v 的风扇几乎感觉不到声音，5v 的风扇离近了可以感觉到，但是超过一米距离，就算夜里夜深人静也不明显。\n\n## Raspberry Pi 特点\n\n树莓派有很多特点，不同的特点有着不同的应用。特点我能想到的有：\n\n* 完整的硬件设备、低配 PC\n* 40Pin GPIO\n* 低功耗\n* 小巧\n* 价格相对低廉\n\n树莓派（非 Zero 等系列）本身的设计就是为了实现低价的计算机入门和 Linux 学习，而且标准版都带有电源、USB、HDMI 等接口，和普通 PC 没有大区别。所以最容易想到的就是当做入门级 PC 来用。最新的树莓派 4B，虽然发热量大，但日常上网，简单 Office 办公之类完全可以应付。\n\n树莓派还属于开发板系列，带有 40 Pin 的 GPIO 接口，也就是可以和各种外设进行联动开发。比如定时浇花、监控家中的宠物等。不过这些功能需要一点硬件知识。\n\n树莓派功耗比较低，据说 3B+ 大概 3-5w，4B 大概 3-6w。我自己实测是 4w。可以长时间开机，相当于一台小型服务器。做个人网站、下载机再合适不过。\n\n最后，如果有体积要求，那树莓派肯定是好的选择。只有信用卡大小的主板，配上上面的有点，让树莓派如虎添翼。\n\n## Raspberry Pi 对手\n\n作为带有 GPIO 的入门级 PC，基本上没有对手。但如果多增加预算，稍微体积增大一些，可以选择 LattePanda（拿铁熊猫）。它可以直接安装 Windows 10，自带板载 EMMC 闪存，并且也提供 GPIO 接口（通过集成 Arduino 实现），但功耗也比较大。可以说是豪华顶配版的树莓派。\n\n如果只考虑低配低功耗 PC，我还听说过 Wintel。感兴趣可以搜索下，功耗听说也就是3-5w，和 3B+ 相当。价格也不贵，体积也很小。\n\n此外还有 Nvidia 系列的开发板，价格也不低，主要用作 AI 计算用。同样可以作为 PC 来使用。\n\n低功耗系列的开发板，比较常见的是 Arduino、micro:bit。首先它们都是限定了开发语言。Arduino 为 C++，micro:bit 为 typescript。这两个开发板配置比起树莓派那是非常低，不能进行太重的任务，而且本身也没有 WiFi 等支持，还需要增加外设。所以如果是不联网的情况比较适合，其他情况可能还不如树莓派 Zero W。\n\n最后一种是国产开发板，基本上都是围绕 Arduino 的。有各种改良版，比如增加 Wifi等。其最大的优势就是价格，如上一条，建议选择国产开发板，价格实惠。要知道进口的 Arduino 本身也很贵！不过国产开发板可能有精简，建议多注意。\n\n## Raspberry Pi 用途\n\n根据树莓派的特点，常见应用场景有：\n\n* 上网、轻办公\n* 服务器，跑博客网站等\n* 下载机\n* NAS 私有网盘\n* 电视盒子\n* GPIO 配合各种外设\n\n除了 GPIO 接上各种零件，其他都是软件方面的应用，尤其是作为服务器跑网站、下载、NAS，非常常见，资料也非常多。\n\n不过如果想外网访问树莓派，就要考虑有外网 IP。现在 IPv4 极其稀少，北京联通在 2019 年下半年就开始给用户直接分配内网 IP 了，好在可以打人工客服要求分一个外网 IP。不过这半年来看，几乎每周至少被强制更换一次 IP。所以用好动态域名非常关键。\n\n## 我的一些用途\n\n虽然我家里有群辉，配置好动态域名就可以从外网访问了，但是这个服务有时候会有 5-30 分钟的延时。而且如果没有群辉的话，就要自己考虑做动态域名解析了。\n\n所以我跑了一个 NodeJS 服务，一方面测试网络是否通畅，一方面获取当前 IP，并完成动态域名解析。\n\n此外我喜欢通过 RSS 订阅文章，之前用的 feedly 结果突然也网络不畅了，开始考虑自己架设服务，用的 Tiny-Tiny-RSS (TT-RSS)。这个安装比较复杂，而且官方也推荐用 Docker。所以需要安装 Docker。\n\n后来，发现 qBittorrent 有 Docker 版的，正巧自己也用它作为主力下载工具，所以也就一并安装了。\n\n其中 Docker 的 TT-RSS 还有坑，后面的文章，我会一一介绍我是如何搭建这些服务的。\n\n> **Docker 版 TT-RSS**。官方版支持都是 x86 架构，不能直接在树莓派上安装，因为 ARM 架构下缺少一个包，所以要做调整。\n\n## 顺便再次给出基础服务的安装方式\n\n**NodeJS 的服务安装**。之前的文章也写过具体的方法了，安装 nvm，来管理多版本 Node。如果网络不通畅，无法访问安装脚本，可以有代理方法。具体参见：\n\n[管理多版本 node -- nvm 的使用](https://www.yukapril.com/2020/03/13/nvm.html)\n\n[使用 cloudflare 实现访问代理](https://www.yukapril.com/2020/03/14/cloudflare-proxy.html)\n\n**Docker 的安装**。终于自己也也补上了 Docker 文章。可以参见：\n\n[Docker 安装和简易入门](https://www.yukapril.com/2020/05/23/docker.html)\n\n--END--\n","source":"_posts/2020/2020-05-31-raspberry-pi-1.md","raw":"---\nlayout: post\ntitle: 树莓派 Raspberry Pi (一)：入门 \ndate: 2020-05-31 12:17:00 GMT+0800\ncategories: [开发板]\ntags:  [树莓派]\n---\n\n之前的文章介绍了树莓派的安装和开机，本次开始，我来聊一聊拥有树莓派后，可以做那些具体的应用，以及我现在怎么来用。\n\n<!-- more -->\n\n## 上次开箱的遗留-温度情况\n\n上次的文章算是开箱加上安装启动。用了两周多的时间，测试了常见的几种情况的温度。\n\n首先是默认系统开机，不加装任何散热，裸板。当时忘记看温度了，就用手摸了摸，感觉挺热的，估计要 45-50 度。\n\n我把它拴好绳子，挂载客厅墙上了（因为距离路由近，方便网线），安装了一体散热壳。安装 Node、Docker，启动了点轻微的任务。关闭WiFi和蓝牙，因为用不到。此时大概 42 度。\n\n3.3v 电压开启双风扇，大概是 39-42 度。5v 电压开启双风扇，大概是 40 度以内。\n\n看样子它常规极限也就是 40 度左右了，很难做到更低的温度。而且至少应该安装比较大的（比较好的）被动散热。如果是跑界面当 PC 来用的话，主动散热（大风扇）是必须的。\n\n我平时就是跑跑网站之类服务，没那么多任务量，被动散热或者轻微开一点风扇都可以满足。\n\n噪音上，3.3v 的风扇几乎感觉不到声音，5v 的风扇离近了可以感觉到，但是超过一米距离，就算夜里夜深人静也不明显。\n\n## Raspberry Pi 特点\n\n树莓派有很多特点，不同的特点有着不同的应用。特点我能想到的有：\n\n* 完整的硬件设备、低配 PC\n* 40Pin GPIO\n* 低功耗\n* 小巧\n* 价格相对低廉\n\n树莓派（非 Zero 等系列）本身的设计就是为了实现低价的计算机入门和 Linux 学习，而且标准版都带有电源、USB、HDMI 等接口，和普通 PC 没有大区别。所以最容易想到的就是当做入门级 PC 来用。最新的树莓派 4B，虽然发热量大，但日常上网，简单 Office 办公之类完全可以应付。\n\n树莓派还属于开发板系列，带有 40 Pin 的 GPIO 接口，也就是可以和各种外设进行联动开发。比如定时浇花、监控家中的宠物等。不过这些功能需要一点硬件知识。\n\n树莓派功耗比较低，据说 3B+ 大概 3-5w，4B 大概 3-6w。我自己实测是 4w。可以长时间开机，相当于一台小型服务器。做个人网站、下载机再合适不过。\n\n最后，如果有体积要求，那树莓派肯定是好的选择。只有信用卡大小的主板，配上上面的有点，让树莓派如虎添翼。\n\n## Raspberry Pi 对手\n\n作为带有 GPIO 的入门级 PC，基本上没有对手。但如果多增加预算，稍微体积增大一些，可以选择 LattePanda（拿铁熊猫）。它可以直接安装 Windows 10，自带板载 EMMC 闪存，并且也提供 GPIO 接口（通过集成 Arduino 实现），但功耗也比较大。可以说是豪华顶配版的树莓派。\n\n如果只考虑低配低功耗 PC，我还听说过 Wintel。感兴趣可以搜索下，功耗听说也就是3-5w，和 3B+ 相当。价格也不贵，体积也很小。\n\n此外还有 Nvidia 系列的开发板，价格也不低，主要用作 AI 计算用。同样可以作为 PC 来使用。\n\n低功耗系列的开发板，比较常见的是 Arduino、micro:bit。首先它们都是限定了开发语言。Arduino 为 C++，micro:bit 为 typescript。这两个开发板配置比起树莓派那是非常低，不能进行太重的任务，而且本身也没有 WiFi 等支持，还需要增加外设。所以如果是不联网的情况比较适合，其他情况可能还不如树莓派 Zero W。\n\n最后一种是国产开发板，基本上都是围绕 Arduino 的。有各种改良版，比如增加 Wifi等。其最大的优势就是价格，如上一条，建议选择国产开发板，价格实惠。要知道进口的 Arduino 本身也很贵！不过国产开发板可能有精简，建议多注意。\n\n## Raspberry Pi 用途\n\n根据树莓派的特点，常见应用场景有：\n\n* 上网、轻办公\n* 服务器，跑博客网站等\n* 下载机\n* NAS 私有网盘\n* 电视盒子\n* GPIO 配合各种外设\n\n除了 GPIO 接上各种零件，其他都是软件方面的应用，尤其是作为服务器跑网站、下载、NAS，非常常见，资料也非常多。\n\n不过如果想外网访问树莓派，就要考虑有外网 IP。现在 IPv4 极其稀少，北京联通在 2019 年下半年就开始给用户直接分配内网 IP 了，好在可以打人工客服要求分一个外网 IP。不过这半年来看，几乎每周至少被强制更换一次 IP。所以用好动态域名非常关键。\n\n## 我的一些用途\n\n虽然我家里有群辉，配置好动态域名就可以从外网访问了，但是这个服务有时候会有 5-30 分钟的延时。而且如果没有群辉的话，就要自己考虑做动态域名解析了。\n\n所以我跑了一个 NodeJS 服务，一方面测试网络是否通畅，一方面获取当前 IP，并完成动态域名解析。\n\n此外我喜欢通过 RSS 订阅文章，之前用的 feedly 结果突然也网络不畅了，开始考虑自己架设服务，用的 Tiny-Tiny-RSS (TT-RSS)。这个安装比较复杂，而且官方也推荐用 Docker。所以需要安装 Docker。\n\n后来，发现 qBittorrent 有 Docker 版的，正巧自己也用它作为主力下载工具，所以也就一并安装了。\n\n其中 Docker 的 TT-RSS 还有坑，后面的文章，我会一一介绍我是如何搭建这些服务的。\n\n> **Docker 版 TT-RSS**。官方版支持都是 x86 架构，不能直接在树莓派上安装，因为 ARM 架构下缺少一个包，所以要做调整。\n\n## 顺便再次给出基础服务的安装方式\n\n**NodeJS 的服务安装**。之前的文章也写过具体的方法了，安装 nvm，来管理多版本 Node。如果网络不通畅，无法访问安装脚本，可以有代理方法。具体参见：\n\n[管理多版本 node -- nvm 的使用](https://www.yukapril.com/2020/03/13/nvm.html)\n\n[使用 cloudflare 实现访问代理](https://www.yukapril.com/2020/03/14/cloudflare-proxy.html)\n\n**Docker 的安装**。终于自己也也补上了 Docker 文章。可以参见：\n\n[Docker 安装和简易入门](https://www.yukapril.com/2020/05/23/docker.html)\n\n--END--\n","slug":"2020-2020-05-31-raspberry-pi-1","published":1,"updated":"2020-05-31T07:06:58.135Z","_id":"ckauk1zlq0000kobgdeso7fv3","comments":1,"photos":[],"link":"","content":"<p>之前的文章介绍了树莓派的安装和开机，本次开始，我来聊一聊拥有树莓派后，可以做那些具体的应用，以及我现在怎么来用。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"上次开箱的遗留-温度情况\"><a href=\"#上次开箱的遗留-温度情况\" class=\"headerlink\" title=\"上次开箱的遗留-温度情况\"></a>上次开箱的遗留-温度情况</h2><p>上次的文章算是开箱加上安装启动。用了两周多的时间，测试了常见的几种情况的温度。</p>\n<p>首先是默认系统开机，不加装任何散热，裸板。当时忘记看温度了，就用手摸了摸，感觉挺热的，估计要 45-50 度。</p>\n<p>我把它拴好绳子，挂载客厅墙上了（因为距离路由近，方便网线），安装了一体散热壳。安装 Node、Docker，启动了点轻微的任务。关闭WiFi和蓝牙，因为用不到。此时大概 42 度。</p>\n<p>3.3v 电压开启双风扇，大概是 39-42 度。5v 电压开启双风扇，大概是 40 度以内。</p>\n<p>看样子它常规极限也就是 40 度左右了，很难做到更低的温度。而且至少应该安装比较大的（比较好的）被动散热。如果是跑界面当 PC 来用的话，主动散热（大风扇）是必须的。</p>\n<p>我平时就是跑跑网站之类服务，没那么多任务量，被动散热或者轻微开一点风扇都可以满足。</p>\n<p>噪音上，3.3v 的风扇几乎感觉不到声音，5v 的风扇离近了可以感觉到，但是超过一米距离，就算夜里夜深人静也不明显。</p>\n<h2 id=\"Raspberry-Pi-特点\"><a href=\"#Raspberry-Pi-特点\" class=\"headerlink\" title=\"Raspberry Pi 特点\"></a>Raspberry Pi 特点</h2><p>树莓派有很多特点，不同的特点有着不同的应用。特点我能想到的有：</p>\n<ul>\n<li>完整的硬件设备、低配 PC</li>\n<li>40Pin GPIO</li>\n<li>低功耗</li>\n<li>小巧</li>\n<li>价格相对低廉</li>\n</ul>\n<p>树莓派（非 Zero 等系列）本身的设计就是为了实现低价的计算机入门和 Linux 学习，而且标准版都带有电源、USB、HDMI 等接口，和普通 PC 没有大区别。所以最容易想到的就是当做入门级 PC 来用。最新的树莓派 4B，虽然发热量大，但日常上网，简单 Office 办公之类完全可以应付。</p>\n<p>树莓派还属于开发板系列，带有 40 Pin 的 GPIO 接口，也就是可以和各种外设进行联动开发。比如定时浇花、监控家中的宠物等。不过这些功能需要一点硬件知识。</p>\n<p>树莓派功耗比较低，据说 3B+ 大概 3-5w，4B 大概 3-6w。我自己实测是 4w。可以长时间开机，相当于一台小型服务器。做个人网站、下载机再合适不过。</p>\n<p>最后，如果有体积要求，那树莓派肯定是好的选择。只有信用卡大小的主板，配上上面的有点，让树莓派如虎添翼。</p>\n<h2 id=\"Raspberry-Pi-对手\"><a href=\"#Raspberry-Pi-对手\" class=\"headerlink\" title=\"Raspberry Pi 对手\"></a>Raspberry Pi 对手</h2><p>作为带有 GPIO 的入门级 PC，基本上没有对手。但如果多增加预算，稍微体积增大一些，可以选择 LattePanda（拿铁熊猫）。它可以直接安装 Windows 10，自带板载 EMMC 闪存，并且也提供 GPIO 接口（通过集成 Arduino 实现），但功耗也比较大。可以说是豪华顶配版的树莓派。</p>\n<p>如果只考虑低配低功耗 PC，我还听说过 Wintel。感兴趣可以搜索下，功耗听说也就是3-5w，和 3B+ 相当。价格也不贵，体积也很小。</p>\n<p>此外还有 Nvidia 系列的开发板，价格也不低，主要用作 AI 计算用。同样可以作为 PC 来使用。</p>\n<p>低功耗系列的开发板，比较常见的是 Arduino、micro:bit。首先它们都是限定了开发语言。Arduino 为 C++，micro:bit 为 typescript。这两个开发板配置比起树莓派那是非常低，不能进行太重的任务，而且本身也没有 WiFi 等支持，还需要增加外设。所以如果是不联网的情况比较适合，其他情况可能还不如树莓派 Zero W。</p>\n<p>最后一种是国产开发板，基本上都是围绕 Arduino 的。有各种改良版，比如增加 Wifi等。其最大的优势就是价格，如上一条，建议选择国产开发板，价格实惠。要知道进口的 Arduino 本身也很贵！不过国产开发板可能有精简，建议多注意。</p>\n<h2 id=\"Raspberry-Pi-用途\"><a href=\"#Raspberry-Pi-用途\" class=\"headerlink\" title=\"Raspberry Pi 用途\"></a>Raspberry Pi 用途</h2><p>根据树莓派的特点，常见应用场景有：</p>\n<ul>\n<li>上网、轻办公</li>\n<li>服务器，跑博客网站等</li>\n<li>下载机</li>\n<li>NAS 私有网盘</li>\n<li>电视盒子</li>\n<li>GPIO 配合各种外设</li>\n</ul>\n<p>除了 GPIO 接上各种零件，其他都是软件方面的应用，尤其是作为服务器跑网站、下载、NAS，非常常见，资料也非常多。</p>\n<p>不过如果想外网访问树莓派，就要考虑有外网 IP。现在 IPv4 极其稀少，北京联通在 2019 年下半年就开始给用户直接分配内网 IP 了，好在可以打人工客服要求分一个外网 IP。不过这半年来看，几乎每周至少被强制更换一次 IP。所以用好动态域名非常关键。</p>\n<h2 id=\"我的一些用途\"><a href=\"#我的一些用途\" class=\"headerlink\" title=\"我的一些用途\"></a>我的一些用途</h2><p>虽然我家里有群辉，配置好动态域名就可以从外网访问了，但是这个服务有时候会有 5-30 分钟的延时。而且如果没有群辉的话，就要自己考虑做动态域名解析了。</p>\n<p>所以我跑了一个 NodeJS 服务，一方面测试网络是否通畅，一方面获取当前 IP，并完成动态域名解析。</p>\n<p>此外我喜欢通过 RSS 订阅文章，之前用的 feedly 结果突然也网络不畅了，开始考虑自己架设服务，用的 Tiny-Tiny-RSS (TT-RSS)。这个安装比较复杂，而且官方也推荐用 Docker。所以需要安装 Docker。</p>\n<p>后来，发现 qBittorrent 有 Docker 版的，正巧自己也用它作为主力下载工具，所以也就一并安装了。</p>\n<p>其中 Docker 的 TT-RSS 还有坑，后面的文章，我会一一介绍我是如何搭建这些服务的。</p>\n<blockquote>\n<p><strong>Docker 版 TT-RSS</strong>。官方版支持都是 x86 架构，不能直接在树莓派上安装，因为 ARM 架构下缺少一个包，所以要做调整。</p>\n</blockquote>\n<h2 id=\"顺便再次给出基础服务的安装方式\"><a href=\"#顺便再次给出基础服务的安装方式\" class=\"headerlink\" title=\"顺便再次给出基础服务的安装方式\"></a>顺便再次给出基础服务的安装方式</h2><p><strong>NodeJS 的服务安装</strong>。之前的文章也写过具体的方法了，安装 nvm，来管理多版本 Node。如果网络不通畅，无法访问安装脚本，可以有代理方法。具体参见：</p>\n<p><a href=\"https://www.yukapril.com/2020/03/13/nvm.html\">管理多版本 node – nvm 的使用</a></p>\n<p><a href=\"https://www.yukapril.com/2020/03/14/cloudflare-proxy.html\">使用 cloudflare 实现访问代理</a></p>\n<p><strong>Docker 的安装</strong>。终于自己也也补上了 Docker 文章。可以参见：</p>\n<p><a href=\"https://www.yukapril.com/2020/05/23/docker.html\">Docker 安装和简易入门</a></p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>之前的文章介绍了树莓派的安装和开机，本次开始，我来聊一聊拥有树莓派后，可以做那些具体的应用，以及我现在怎么来用。</p>","more":"<h2 id=\"上次开箱的遗留-温度情况\"><a href=\"#上次开箱的遗留-温度情况\" class=\"headerlink\" title=\"上次开箱的遗留-温度情况\"></a>上次开箱的遗留-温度情况</h2><p>上次的文章算是开箱加上安装启动。用了两周多的时间，测试了常见的几种情况的温度。</p>\n<p>首先是默认系统开机，不加装任何散热，裸板。当时忘记看温度了，就用手摸了摸，感觉挺热的，估计要 45-50 度。</p>\n<p>我把它拴好绳子，挂载客厅墙上了（因为距离路由近，方便网线），安装了一体散热壳。安装 Node、Docker，启动了点轻微的任务。关闭WiFi和蓝牙，因为用不到。此时大概 42 度。</p>\n<p>3.3v 电压开启双风扇，大概是 39-42 度。5v 电压开启双风扇，大概是 40 度以内。</p>\n<p>看样子它常规极限也就是 40 度左右了，很难做到更低的温度。而且至少应该安装比较大的（比较好的）被动散热。如果是跑界面当 PC 来用的话，主动散热（大风扇）是必须的。</p>\n<p>我平时就是跑跑网站之类服务，没那么多任务量，被动散热或者轻微开一点风扇都可以满足。</p>\n<p>噪音上，3.3v 的风扇几乎感觉不到声音，5v 的风扇离近了可以感觉到，但是超过一米距离，就算夜里夜深人静也不明显。</p>\n<h2 id=\"Raspberry-Pi-特点\"><a href=\"#Raspberry-Pi-特点\" class=\"headerlink\" title=\"Raspberry Pi 特点\"></a>Raspberry Pi 特点</h2><p>树莓派有很多特点，不同的特点有着不同的应用。特点我能想到的有：</p>\n<ul>\n<li>完整的硬件设备、低配 PC</li>\n<li>40Pin GPIO</li>\n<li>低功耗</li>\n<li>小巧</li>\n<li>价格相对低廉</li>\n</ul>\n<p>树莓派（非 Zero 等系列）本身的设计就是为了实现低价的计算机入门和 Linux 学习，而且标准版都带有电源、USB、HDMI 等接口，和普通 PC 没有大区别。所以最容易想到的就是当做入门级 PC 来用。最新的树莓派 4B，虽然发热量大，但日常上网，简单 Office 办公之类完全可以应付。</p>\n<p>树莓派还属于开发板系列，带有 40 Pin 的 GPIO 接口，也就是可以和各种外设进行联动开发。比如定时浇花、监控家中的宠物等。不过这些功能需要一点硬件知识。</p>\n<p>树莓派功耗比较低，据说 3B+ 大概 3-5w，4B 大概 3-6w。我自己实测是 4w。可以长时间开机，相当于一台小型服务器。做个人网站、下载机再合适不过。</p>\n<p>最后，如果有体积要求，那树莓派肯定是好的选择。只有信用卡大小的主板，配上上面的有点，让树莓派如虎添翼。</p>\n<h2 id=\"Raspberry-Pi-对手\"><a href=\"#Raspberry-Pi-对手\" class=\"headerlink\" title=\"Raspberry Pi 对手\"></a>Raspberry Pi 对手</h2><p>作为带有 GPIO 的入门级 PC，基本上没有对手。但如果多增加预算，稍微体积增大一些，可以选择 LattePanda（拿铁熊猫）。它可以直接安装 Windows 10，自带板载 EMMC 闪存，并且也提供 GPIO 接口（通过集成 Arduino 实现），但功耗也比较大。可以说是豪华顶配版的树莓派。</p>\n<p>如果只考虑低配低功耗 PC，我还听说过 Wintel。感兴趣可以搜索下，功耗听说也就是3-5w，和 3B+ 相当。价格也不贵，体积也很小。</p>\n<p>此外还有 Nvidia 系列的开发板，价格也不低，主要用作 AI 计算用。同样可以作为 PC 来使用。</p>\n<p>低功耗系列的开发板，比较常见的是 Arduino、micro:bit。首先它们都是限定了开发语言。Arduino 为 C++，micro:bit 为 typescript。这两个开发板配置比起树莓派那是非常低，不能进行太重的任务，而且本身也没有 WiFi 等支持，还需要增加外设。所以如果是不联网的情况比较适合，其他情况可能还不如树莓派 Zero W。</p>\n<p>最后一种是国产开发板，基本上都是围绕 Arduino 的。有各种改良版，比如增加 Wifi等。其最大的优势就是价格，如上一条，建议选择国产开发板，价格实惠。要知道进口的 Arduino 本身也很贵！不过国产开发板可能有精简，建议多注意。</p>\n<h2 id=\"Raspberry-Pi-用途\"><a href=\"#Raspberry-Pi-用途\" class=\"headerlink\" title=\"Raspberry Pi 用途\"></a>Raspberry Pi 用途</h2><p>根据树莓派的特点，常见应用场景有：</p>\n<ul>\n<li>上网、轻办公</li>\n<li>服务器，跑博客网站等</li>\n<li>下载机</li>\n<li>NAS 私有网盘</li>\n<li>电视盒子</li>\n<li>GPIO 配合各种外设</li>\n</ul>\n<p>除了 GPIO 接上各种零件，其他都是软件方面的应用，尤其是作为服务器跑网站、下载、NAS，非常常见，资料也非常多。</p>\n<p>不过如果想外网访问树莓派，就要考虑有外网 IP。现在 IPv4 极其稀少，北京联通在 2019 年下半年就开始给用户直接分配内网 IP 了，好在可以打人工客服要求分一个外网 IP。不过这半年来看，几乎每周至少被强制更换一次 IP。所以用好动态域名非常关键。</p>\n<h2 id=\"我的一些用途\"><a href=\"#我的一些用途\" class=\"headerlink\" title=\"我的一些用途\"></a>我的一些用途</h2><p>虽然我家里有群辉，配置好动态域名就可以从外网访问了，但是这个服务有时候会有 5-30 分钟的延时。而且如果没有群辉的话，就要自己考虑做动态域名解析了。</p>\n<p>所以我跑了一个 NodeJS 服务，一方面测试网络是否通畅，一方面获取当前 IP，并完成动态域名解析。</p>\n<p>此外我喜欢通过 RSS 订阅文章，之前用的 feedly 结果突然也网络不畅了，开始考虑自己架设服务，用的 Tiny-Tiny-RSS (TT-RSS)。这个安装比较复杂，而且官方也推荐用 Docker。所以需要安装 Docker。</p>\n<p>后来，发现 qBittorrent 有 Docker 版的，正巧自己也用它作为主力下载工具，所以也就一并安装了。</p>\n<p>其中 Docker 的 TT-RSS 还有坑，后面的文章，我会一一介绍我是如何搭建这些服务的。</p>\n<blockquote>\n<p><strong>Docker 版 TT-RSS</strong>。官方版支持都是 x86 架构，不能直接在树莓派上安装，因为 ARM 架构下缺少一个包，所以要做调整。</p>\n</blockquote>\n<h2 id=\"顺便再次给出基础服务的安装方式\"><a href=\"#顺便再次给出基础服务的安装方式\" class=\"headerlink\" title=\"顺便再次给出基础服务的安装方式\"></a>顺便再次给出基础服务的安装方式</h2><p><strong>NodeJS 的服务安装</strong>。之前的文章也写过具体的方法了，安装 nvm，来管理多版本 Node。如果网络不通畅，无法访问安装脚本，可以有代理方法。具体参见：</p>\n<p><a href=\"https://www.yukapril.com/2020/03/13/nvm.html\">管理多版本 node – nvm 的使用</a></p>\n<p><a href=\"https://www.yukapril.com/2020/03/14/cloudflare-proxy.html\">使用 cloudflare 实现访问代理</a></p>\n<p><strong>Docker 的安装</strong>。终于自己也也补上了 Docker 文章。可以参见：</p>\n<p><a href=\"https://www.yukapril.com/2020/05/23/docker.html\">Docker 安装和简易入门</a></p>\n<p>–END–</p>"},{"layout":"post","title":"使用 ffmpeg，完成多个 mp4 文件合并","date":"2020-05-31T15:35:00.000Z","_content":"\n自从买了 Downie 之后，就不敢去优酷下载视频，因为他们家下载回来的都是小文件，还需要合并。而 Mac 下我有找不到能合并多个 mp4 文件的工具，只能作罢。\n\n后来发现优酷上下载回来的视频质量还是很高的，所以还是决定在考虑下合并 mp4。之前也听说过通过 ffmpeg 工具可以完成，并且可以非常高速的完成合并。这次就再搜索查找了下。\n\n<!-- more -->\n\n当时看的文章比较多也比较杂，这次搜索后，主要参考了一篇文章。在此基础上，我稍微整理了下。\n\n> 见此：[使用FFmpeg合并MP4视频](https://blog.csdn.net/u010764910/article/details/79821361)\n\n首先是安装 ffmpeg 工具，Windows/MacOS/Linux 都可以。可以自行搜索安装方法。\n\n其中 MacOS 下的方法是：\n\n```bash\nbrew install ffmpeg\n```\n\n下文的脚本，以 MacOS 为准。Linux 应该通用。Windows 没用过，不确定。\n\n将多个 mp4 小文件，合并为一个大文件，方法有两种：**mpeg 拼接**，**ts 拼接（推荐）**。\n\n**mpeg 拼接**\n\n需要先将小 mp4 文件转码为 mpeg 文件，之后 mpeg 直接拼接，最后再转码回 mp4。\n\n此方法速度比较慢，并且最终生成的文件比较大。例如 6 个小 mp4 文件，累计 240MB，通过此方法，最终 mp4 文件会变成 640MB 左右。整个操作用时超过 1 分钟。\n\n```bash\nffmpeg -i a1.mp4 -qscale 4 a1.mpg\nffmpeg -i a2.mp4 -qscale 4 a2.mpg\ncat a1.mpg a2.mpg| ffmpeg -f mpeg -i - -qscale 6 -vcodec mpeg4 output.mp4\n```\n\n速度慢也就算了，关键是变大太多了。果断舍弃此方案。\n\n**ts 拼接（推荐）**\n\n整个方法先把 mp4 封装成 ts 格式，之后 ts 直接拼接，最后在转化为 mp4。\n\n此方法速度快，最终文件基本上等于小文件的总和。例如 6 个小 mp4 文件，累计 240MB，通过此方法，最终 mp4 文件也在 240MB 左右。整个操作用时 10 秒。\n\n```bash\n#! /bin/bash\n# 将 mp4 文件封装为 ts 格式\nffmpeg -i a1.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 1.ts\nffmpeg -i a2.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 2.ts\nffmpeg -i a3.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 3.ts\nffmpeg -i a4.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 4.ts\n# 拼接 ts 并导出最终 mp4 文件\nffmpeg -i \"concat:1.ts|2.ts|3.ts|4.ts\" -acodec copy -vcodec copy -absf aac_adtstoasc output.mp4\n# 删除过程中生成的 ts 文件\nrm *.ts\n```\n\n具体操作方案：\n\n1. 使用 Transnomino（MacOS 下我找到的唯一一个免费且好用的批量更名软件）。先将目录下的 mp4 进行改名，当然也可以使用 MacOS 自带的批量改名功能。改名为 `a1.mp4`, `a2.mp4` ...；\n2. 编辑上面的脚本，把它保存到 mp4 目录内，名字无所谓，比如 `a.sh`；\n3. 终端中，cd 到 mp4 的目录，执行 `bash a.sh`，等待即可；\n4. 最终即可生成 output.mp4 合并好的文件了。\n\n--END--\n","source":"_posts/2020/2020-05-31-mp4-combine.md","raw":"---\nlayout: post\ntitle: 使用 ffmpeg，完成多个 mp4 文件合并\ndate: 2020-05-31 15:35:00 GMT+0800\ncategories: [技术]\ntags:  [ffmpeg,mp4]\n---\n\n自从买了 Downie 之后，就不敢去优酷下载视频，因为他们家下载回来的都是小文件，还需要合并。而 Mac 下我有找不到能合并多个 mp4 文件的工具，只能作罢。\n\n后来发现优酷上下载回来的视频质量还是很高的，所以还是决定在考虑下合并 mp4。之前也听说过通过 ffmpeg 工具可以完成，并且可以非常高速的完成合并。这次就再搜索查找了下。\n\n<!-- more -->\n\n当时看的文章比较多也比较杂，这次搜索后，主要参考了一篇文章。在此基础上，我稍微整理了下。\n\n> 见此：[使用FFmpeg合并MP4视频](https://blog.csdn.net/u010764910/article/details/79821361)\n\n首先是安装 ffmpeg 工具，Windows/MacOS/Linux 都可以。可以自行搜索安装方法。\n\n其中 MacOS 下的方法是：\n\n```bash\nbrew install ffmpeg\n```\n\n下文的脚本，以 MacOS 为准。Linux 应该通用。Windows 没用过，不确定。\n\n将多个 mp4 小文件，合并为一个大文件，方法有两种：**mpeg 拼接**，**ts 拼接（推荐）**。\n\n**mpeg 拼接**\n\n需要先将小 mp4 文件转码为 mpeg 文件，之后 mpeg 直接拼接，最后再转码回 mp4。\n\n此方法速度比较慢，并且最终生成的文件比较大。例如 6 个小 mp4 文件，累计 240MB，通过此方法，最终 mp4 文件会变成 640MB 左右。整个操作用时超过 1 分钟。\n\n```bash\nffmpeg -i a1.mp4 -qscale 4 a1.mpg\nffmpeg -i a2.mp4 -qscale 4 a2.mpg\ncat a1.mpg a2.mpg| ffmpeg -f mpeg -i - -qscale 6 -vcodec mpeg4 output.mp4\n```\n\n速度慢也就算了，关键是变大太多了。果断舍弃此方案。\n\n**ts 拼接（推荐）**\n\n整个方法先把 mp4 封装成 ts 格式，之后 ts 直接拼接，最后在转化为 mp4。\n\n此方法速度快，最终文件基本上等于小文件的总和。例如 6 个小 mp4 文件，累计 240MB，通过此方法，最终 mp4 文件也在 240MB 左右。整个操作用时 10 秒。\n\n```bash\n#! /bin/bash\n# 将 mp4 文件封装为 ts 格式\nffmpeg -i a1.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 1.ts\nffmpeg -i a2.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 2.ts\nffmpeg -i a3.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 3.ts\nffmpeg -i a4.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 4.ts\n# 拼接 ts 并导出最终 mp4 文件\nffmpeg -i \"concat:1.ts|2.ts|3.ts|4.ts\" -acodec copy -vcodec copy -absf aac_adtstoasc output.mp4\n# 删除过程中生成的 ts 文件\nrm *.ts\n```\n\n具体操作方案：\n\n1. 使用 Transnomino（MacOS 下我找到的唯一一个免费且好用的批量更名软件）。先将目录下的 mp4 进行改名，当然也可以使用 MacOS 自带的批量改名功能。改名为 `a1.mp4`, `a2.mp4` ...；\n2. 编辑上面的脚本，把它保存到 mp4 目录内，名字无所谓，比如 `a.sh`；\n3. 终端中，cd 到 mp4 的目录，执行 `bash a.sh`，等待即可；\n4. 最终即可生成 output.mp4 合并好的文件了。\n\n--END--\n","slug":"2020-2020-05-31-mp4-combine","published":1,"updated":"2020-05-31T07:48:12.167Z","_id":"ckauran2w0000jjbg2ay4c7dq","comments":1,"photos":[],"link":"","content":"<p>自从买了 Downie 之后，就不敢去优酷下载视频，因为他们家下载回来的都是小文件，还需要合并。而 Mac 下我有找不到能合并多个 mp4 文件的工具，只能作罢。</p>\n<p>后来发现优酷上下载回来的视频质量还是很高的，所以还是决定在考虑下合并 mp4。之前也听说过通过 ffmpeg 工具可以完成，并且可以非常高速的完成合并。这次就再搜索查找了下。</p>\n<a id=\"more\"></a>\n\n<p>当时看的文章比较多也比较杂，这次搜索后，主要参考了一篇文章。在此基础上，我稍微整理了下。</p>\n<blockquote>\n<p>见此：<a href=\"https://blog.csdn.net/u010764910/article/details/79821361\" target=\"_blank\" rel=\"noopener\">使用FFmpeg合并MP4视频</a></p>\n</blockquote>\n<p>首先是安装 ffmpeg 工具，Windows/MacOS/Linux 都可以。可以自行搜索安装方法。</p>\n<p>其中 MacOS 下的方法是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install ffmpeg</span><br></pre></td></tr></table></figure>\n\n<p>下文的脚本，以 MacOS 为准。Linux 应该通用。Windows 没用过，不确定。</p>\n<p>将多个 mp4 小文件，合并为一个大文件，方法有两种：<strong>mpeg 拼接</strong>，<strong>ts 拼接（推荐）</strong>。</p>\n<p><strong>mpeg 拼接</strong></p>\n<p>需要先将小 mp4 文件转码为 mpeg 文件，之后 mpeg 直接拼接，最后再转码回 mp4。</p>\n<p>此方法速度比较慢，并且最终生成的文件比较大。例如 6 个小 mp4 文件，累计 240MB，通过此方法，最终 mp4 文件会变成 640MB 左右。整个操作用时超过 1 分钟。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -i a1.mp4 -qscale 4 a1.mpg</span><br><span class=\"line\">ffmpeg -i a2.mp4 -qscale 4 a2.mpg</span><br><span class=\"line\">cat a1.mpg a2.mpg| ffmpeg -f mpeg -i - -qscale 6 -vcodec mpeg4 output.mp4</span><br></pre></td></tr></table></figure>\n\n<p>速度慢也就算了，关键是变大太多了。果断舍弃此方案。</p>\n<p><strong>ts 拼接（推荐）</strong></p>\n<p>整个方法先把 mp4 封装成 ts 格式，之后 ts 直接拼接，最后在转化为 mp4。</p>\n<p>此方法速度快，最终文件基本上等于小文件的总和。例如 6 个小 mp4 文件，累计 240MB，通过此方法，最终 mp4 文件也在 240MB 左右。整个操作用时 10 秒。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># 将 mp4 文件封装为 ts 格式</span></span><br><span class=\"line\">ffmpeg -i a1.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 1.ts</span><br><span class=\"line\">ffmpeg -i a2.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 2.ts</span><br><span class=\"line\">ffmpeg -i a3.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 3.ts</span><br><span class=\"line\">ffmpeg -i a4.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 4.ts</span><br><span class=\"line\"><span class=\"comment\"># 拼接 ts 并导出最终 mp4 文件</span></span><br><span class=\"line\">ffmpeg -i <span class=\"string\">\"concat:1.ts|2.ts|3.ts|4.ts\"</span> -acodec copy -vcodec copy -absf aac_adtstoasc output.mp4</span><br><span class=\"line\"><span class=\"comment\"># 删除过程中生成的 ts 文件</span></span><br><span class=\"line\">rm *.ts</span><br></pre></td></tr></table></figure>\n\n<p>具体操作方案：</p>\n<ol>\n<li>使用 Transnomino（MacOS 下我找到的唯一一个免费且好用的批量更名软件）。先将目录下的 mp4 进行改名，当然也可以使用 MacOS 自带的批量改名功能。改名为 <code>a1.mp4</code>, <code>a2.mp4</code> …；</li>\n<li>编辑上面的脚本，把它保存到 mp4 目录内，名字无所谓，比如 <code>a.sh</code>；</li>\n<li>终端中，cd 到 mp4 的目录，执行 <code>bash a.sh</code>，等待即可；</li>\n<li>最终即可生成 output.mp4 合并好的文件了。</li>\n</ol>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>自从买了 Downie 之后，就不敢去优酷下载视频，因为他们家下载回来的都是小文件，还需要合并。而 Mac 下我有找不到能合并多个 mp4 文件的工具，只能作罢。</p>\n<p>后来发现优酷上下载回来的视频质量还是很高的，所以还是决定在考虑下合并 mp4。之前也听说过通过 ffmpeg 工具可以完成，并且可以非常高速的完成合并。这次就再搜索查找了下。</p>","more":"<p>当时看的文章比较多也比较杂，这次搜索后，主要参考了一篇文章。在此基础上，我稍微整理了下。</p>\n<blockquote>\n<p>见此：<a href=\"https://blog.csdn.net/u010764910/article/details/79821361\" target=\"_blank\" rel=\"noopener\">使用FFmpeg合并MP4视频</a></p>\n</blockquote>\n<p>首先是安装 ffmpeg 工具，Windows/MacOS/Linux 都可以。可以自行搜索安装方法。</p>\n<p>其中 MacOS 下的方法是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install ffmpeg</span><br></pre></td></tr></table></figure>\n\n<p>下文的脚本，以 MacOS 为准。Linux 应该通用。Windows 没用过，不确定。</p>\n<p>将多个 mp4 小文件，合并为一个大文件，方法有两种：<strong>mpeg 拼接</strong>，<strong>ts 拼接（推荐）</strong>。</p>\n<p><strong>mpeg 拼接</strong></p>\n<p>需要先将小 mp4 文件转码为 mpeg 文件，之后 mpeg 直接拼接，最后再转码回 mp4。</p>\n<p>此方法速度比较慢，并且最终生成的文件比较大。例如 6 个小 mp4 文件，累计 240MB，通过此方法，最终 mp4 文件会变成 640MB 左右。整个操作用时超过 1 分钟。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -i a1.mp4 -qscale 4 a1.mpg</span><br><span class=\"line\">ffmpeg -i a2.mp4 -qscale 4 a2.mpg</span><br><span class=\"line\">cat a1.mpg a2.mpg| ffmpeg -f mpeg -i - -qscale 6 -vcodec mpeg4 output.mp4</span><br></pre></td></tr></table></figure>\n\n<p>速度慢也就算了，关键是变大太多了。果断舍弃此方案。</p>\n<p><strong>ts 拼接（推荐）</strong></p>\n<p>整个方法先把 mp4 封装成 ts 格式，之后 ts 直接拼接，最后在转化为 mp4。</p>\n<p>此方法速度快，最终文件基本上等于小文件的总和。例如 6 个小 mp4 文件，累计 240MB，通过此方法，最终 mp4 文件也在 240MB 左右。整个操作用时 10 秒。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># 将 mp4 文件封装为 ts 格式</span></span><br><span class=\"line\">ffmpeg -i a1.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 1.ts</span><br><span class=\"line\">ffmpeg -i a2.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 2.ts</span><br><span class=\"line\">ffmpeg -i a3.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 3.ts</span><br><span class=\"line\">ffmpeg -i a4.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 4.ts</span><br><span class=\"line\"><span class=\"comment\"># 拼接 ts 并导出最终 mp4 文件</span></span><br><span class=\"line\">ffmpeg -i <span class=\"string\">\"concat:1.ts|2.ts|3.ts|4.ts\"</span> -acodec copy -vcodec copy -absf aac_adtstoasc output.mp4</span><br><span class=\"line\"><span class=\"comment\"># 删除过程中生成的 ts 文件</span></span><br><span class=\"line\">rm *.ts</span><br></pre></td></tr></table></figure>\n\n<p>具体操作方案：</p>\n<ol>\n<li>使用 Transnomino（MacOS 下我找到的唯一一个免费且好用的批量更名软件）。先将目录下的 mp4 进行改名，当然也可以使用 MacOS 自带的批量改名功能。改名为 <code>a1.mp4</code>, <code>a2.mp4</code> …；</li>\n<li>编辑上面的脚本，把它保存到 mp4 目录内，名字无所谓，比如 <code>a.sh</code>；</li>\n<li>终端中，cd 到 mp4 的目录，执行 <code>bash a.sh</code>，等待即可；</li>\n<li>最终即可生成 output.mp4 合并好的文件了。</li>\n</ol>\n<p>–END–</p>"},{"layout":"post","title":"树莓派 Raspberry Pi (二)：DDNS 动态域名解析实现","date":"2020-06-08T21:11:00.000Z","_content":"\n如果想从外网访问家里的树莓派，除了家里要有外网 IP 外，还需要配置动态域名解析。\n\n<!-- more -->\n\n首先是外网 IP，这个必须要有。否则不能采用直连的方案，也就不能用动态域名解析的方案了。\n\n但这不代表外网一定访问不了。比如花生壳穿透，ngrok 等之类内网穿透软件，还是可以实现的。不过穿透方案，有很大局限性，比如 gnrok 国内环境不稳定，还有各种收费等。\n\n本文就单说有外网 IP，但是会经常变化的情况。\n\n## 使用光猫、路由实现\n\n如果光猫、路由支持 DDNS（动态域名解析），可以考虑直接使用。\n\n我家里联通光猫支持 TZO、Oray、DynDNS，而网件路由支持 NetGear、NO-IP、3322、Oray、DynDNS。\n\n反正我都不熟悉，或者有的根本就是收费服务。\n\n## 使用支持 API 的域名解析服务商\n\n首先要明确一点，基本上支持域名解析 API 调用的服务商，都支持类似 `https://api.xxx.com/ddns?token=xxx&ip=xxx` 这种通过连接形式修改的方法。而且上述光猫、路由中，可能还会支持自定义服务商，相当于定义好相关字段，当外网 IP 改变后，自动实现调用。\n\n我的域名托管在阿里云。也有 API 调用的方法。方法思路也一样，定时检测自己的 IP 地址，发现阿里云填写的地址不同，则重新变更下域名解析就行了。\n\n## 使用阿里云 DDNS API 实现动态域名解析\n\n#### 创建账号，获取 KEY\n\n首先，要创建一个新账号，并开通 API 相应权限权限。\n\n到阿里云 `RAM 访问控制` 中，新建账号，权限的话，分配 `AliyunDNSFullAccess` 就够了。之后会得到 AccessKeyId、accessKeySecret。留好备用。\n\n#### Node 官方实现\n\n参考文档：[https://help.aliyun.com/document_detail/124923.html?spm=a2c4g.11186623.6.621.5ad930b1uJsGI4#title-fbv-si0-ict](https://help.aliyun.com/document_detail/124923.html?spm=a2c4g.11186623.6.621.5ad930b1uJsGI4#title-fbv-si0-ict)\n\n```js\nconst Core = require('@alicloud/pop-core');\n\n// 创建连接\nvar client = new Core({\n  accessKeyId: '<accessKeyId>',\n  accessKeySecret: '<accessSecret>',\n  endpoint: 'https://alidns.aliyuncs.com', // 不要改\n  apiVersion: '2015-01-09' // 不要改\n});\n\nvar params = {\n  \"DomainName\": \"dns-example.com\", // 你要修改的跟域名\n  \"RR\": \"apitest1\", // 修改的子域名，比如 test.aa.com，这里填写 test\n  \"Type\": \"A\", // 修改类型，这里为A记录\n  \"Value\": \"3.0.3.0\" // 修改后的值\n}\n\nvar requestOption = {\n  method: 'POST'\n};\n\nclient.request('AddDomainRecord', params, requestOption).then((result) => {\n  console.log(JSON.stringify(result));\n}, (ex) => {\n  console.log(ex);\n})\n```\n\n#### Node 我的实现\n\n参考代码：[https://github.com/yukapril/network-service/blob/master/app/service/net.js](https://github.com/yukapril/network-service/blob/master/app/service/net.js)\n\n我用的是 eggjs，配置好了定时任务。以下代码为核心逻辑：\n\n首先是完成查询自己的 IP，我用的 ip-api 的接口：\n\n```js\nfunction myIp () {\n  const { ctx } = this\n  return new Promise(async (resolve, reject) => {\n    try {\n      const result = await ctx.curl('http://ip-api.com/json', { dataType: 'json' })\n      const json = result.data\n      resolve(json)\n    } catch (e) {\n      reject(e)\n    }\n  })\n}  \n```\n\n再写一个查询阿里云当前 DNS 配置的方法。通过此方法，我们可以查到指定子域名的相关数据。后续更新的时候要用到的：\n\n```js\nconst Core = require('@alicloud/pop-core')\n\nconst getDnsRecord = (subdomain) => {\n  // 参考官方例子，填好自己的id/secret\n  const client = new Core({\n    accessKeyId: 'xxx',\n    accessKeySecret: 'xxx',\n    endpoint: 'https://alidns.aliyuncs.com', // 不要改\n    apiVersion: '2015-01-09' // 不要改\n  })\n\n  const requestOption = {\n    method: 'POST'\n  }\n\n  const params = {\n    RegionId: 'cn-hangzhou', // 好像所有人都是这个\n    DomainName: 'abc.com', // 填写自己的域名\n    PageSize: 500 // 一次性多查点，省的翻页了\n  }\n\n  return new Promise(async (resolve, reject) => {\n    try {\n      const result = await client.request('DescribeDomainRecords', params, requestOption)\n      const record = result.DomainRecords.Record.filter(item => {\n        return item.RR === subdomain \n      })[0]\n      resolve(record)\n    } catch (ex) {\n      reject(ex)\n    }\n  })\n}\n```\n\n如果发现当前 IP 和阿里云中查询的 IP 不同，则需要更新。写一个更新方法：\n\n```js\nconst Core = require('@alicloud/pop-core')\n\nconst updateDnsRecord = (recordId, rr, ip) => {\n  // 参考官方例子，填好自己的id/secret\n  const client = new Core({\n    accessKeyId: 'xxx',\n    accessKeySecret: 'xxx',\n    endpoint: 'https://alidns.aliyuncs.com', // 不要改\n    apiVersion: '2015-01-09' // 不要改\n  })\n  \n  const requestOption = {\n    method: 'POST'\n  }\n\n  const params = {\n    RegionId: 'cn-hangzhou',\n    RecordId: recordId,\n    RR: rr,\n    Type: 'A',\n    Value: ip\n  }\n\n  return new Promise(async (resolve, reject) => {\n    try {\n      const result = await client.request('UpdateDomainRecord', params, requestOption)\n      resolve()\n    } catch (ex) {\n      reject(ex)\n    }\n  })\n}\n```\n\n最后，对以上的方法，进行组合：\n\n```js\n// 自己要修改的子域名\nconst rr = 'test' \n\n// 查询自己的 IP\nconst ipData = await myIp()\nconst ip = ipData.query\n\n// 查询阿里云配置的记录\nconst record = await getDnsRecord(rr)\n// 如果配置的记录和当前 IP 相同，可以结束了\nif(record.Value === ip) return \n// 否则要更新阿里云 IP\nawait updateDnsRecord(record.RecordId, rr, ip)\n```\n\n整体写完后，其实也很简单的嘛~没有那么复杂。\n\n--END--\n","source":"_posts/2020/2020-06-08-raspberry-pi-2.md","raw":"---\nlayout: post\ntitle: 树莓派 Raspberry Pi (二)：DDNS 动态域名解析实现 \ndate: 2020-06-08 21:11:00 GMT+0800\ncategories: [开发板]\ntags:  [树莓派,node]\n---\n\n如果想从外网访问家里的树莓派，除了家里要有外网 IP 外，还需要配置动态域名解析。\n\n<!-- more -->\n\n首先是外网 IP，这个必须要有。否则不能采用直连的方案，也就不能用动态域名解析的方案了。\n\n但这不代表外网一定访问不了。比如花生壳穿透，ngrok 等之类内网穿透软件，还是可以实现的。不过穿透方案，有很大局限性，比如 gnrok 国内环境不稳定，还有各种收费等。\n\n本文就单说有外网 IP，但是会经常变化的情况。\n\n## 使用光猫、路由实现\n\n如果光猫、路由支持 DDNS（动态域名解析），可以考虑直接使用。\n\n我家里联通光猫支持 TZO、Oray、DynDNS，而网件路由支持 NetGear、NO-IP、3322、Oray、DynDNS。\n\n反正我都不熟悉，或者有的根本就是收费服务。\n\n## 使用支持 API 的域名解析服务商\n\n首先要明确一点，基本上支持域名解析 API 调用的服务商，都支持类似 `https://api.xxx.com/ddns?token=xxx&ip=xxx` 这种通过连接形式修改的方法。而且上述光猫、路由中，可能还会支持自定义服务商，相当于定义好相关字段，当外网 IP 改变后，自动实现调用。\n\n我的域名托管在阿里云。也有 API 调用的方法。方法思路也一样，定时检测自己的 IP 地址，发现阿里云填写的地址不同，则重新变更下域名解析就行了。\n\n## 使用阿里云 DDNS API 实现动态域名解析\n\n#### 创建账号，获取 KEY\n\n首先，要创建一个新账号，并开通 API 相应权限权限。\n\n到阿里云 `RAM 访问控制` 中，新建账号，权限的话，分配 `AliyunDNSFullAccess` 就够了。之后会得到 AccessKeyId、accessKeySecret。留好备用。\n\n#### Node 官方实现\n\n参考文档：[https://help.aliyun.com/document_detail/124923.html?spm=a2c4g.11186623.6.621.5ad930b1uJsGI4#title-fbv-si0-ict](https://help.aliyun.com/document_detail/124923.html?spm=a2c4g.11186623.6.621.5ad930b1uJsGI4#title-fbv-si0-ict)\n\n```js\nconst Core = require('@alicloud/pop-core');\n\n// 创建连接\nvar client = new Core({\n  accessKeyId: '<accessKeyId>',\n  accessKeySecret: '<accessSecret>',\n  endpoint: 'https://alidns.aliyuncs.com', // 不要改\n  apiVersion: '2015-01-09' // 不要改\n});\n\nvar params = {\n  \"DomainName\": \"dns-example.com\", // 你要修改的跟域名\n  \"RR\": \"apitest1\", // 修改的子域名，比如 test.aa.com，这里填写 test\n  \"Type\": \"A\", // 修改类型，这里为A记录\n  \"Value\": \"3.0.3.0\" // 修改后的值\n}\n\nvar requestOption = {\n  method: 'POST'\n};\n\nclient.request('AddDomainRecord', params, requestOption).then((result) => {\n  console.log(JSON.stringify(result));\n}, (ex) => {\n  console.log(ex);\n})\n```\n\n#### Node 我的实现\n\n参考代码：[https://github.com/yukapril/network-service/blob/master/app/service/net.js](https://github.com/yukapril/network-service/blob/master/app/service/net.js)\n\n我用的是 eggjs，配置好了定时任务。以下代码为核心逻辑：\n\n首先是完成查询自己的 IP，我用的 ip-api 的接口：\n\n```js\nfunction myIp () {\n  const { ctx } = this\n  return new Promise(async (resolve, reject) => {\n    try {\n      const result = await ctx.curl('http://ip-api.com/json', { dataType: 'json' })\n      const json = result.data\n      resolve(json)\n    } catch (e) {\n      reject(e)\n    }\n  })\n}  \n```\n\n再写一个查询阿里云当前 DNS 配置的方法。通过此方法，我们可以查到指定子域名的相关数据。后续更新的时候要用到的：\n\n```js\nconst Core = require('@alicloud/pop-core')\n\nconst getDnsRecord = (subdomain) => {\n  // 参考官方例子，填好自己的id/secret\n  const client = new Core({\n    accessKeyId: 'xxx',\n    accessKeySecret: 'xxx',\n    endpoint: 'https://alidns.aliyuncs.com', // 不要改\n    apiVersion: '2015-01-09' // 不要改\n  })\n\n  const requestOption = {\n    method: 'POST'\n  }\n\n  const params = {\n    RegionId: 'cn-hangzhou', // 好像所有人都是这个\n    DomainName: 'abc.com', // 填写自己的域名\n    PageSize: 500 // 一次性多查点，省的翻页了\n  }\n\n  return new Promise(async (resolve, reject) => {\n    try {\n      const result = await client.request('DescribeDomainRecords', params, requestOption)\n      const record = result.DomainRecords.Record.filter(item => {\n        return item.RR === subdomain \n      })[0]\n      resolve(record)\n    } catch (ex) {\n      reject(ex)\n    }\n  })\n}\n```\n\n如果发现当前 IP 和阿里云中查询的 IP 不同，则需要更新。写一个更新方法：\n\n```js\nconst Core = require('@alicloud/pop-core')\n\nconst updateDnsRecord = (recordId, rr, ip) => {\n  // 参考官方例子，填好自己的id/secret\n  const client = new Core({\n    accessKeyId: 'xxx',\n    accessKeySecret: 'xxx',\n    endpoint: 'https://alidns.aliyuncs.com', // 不要改\n    apiVersion: '2015-01-09' // 不要改\n  })\n  \n  const requestOption = {\n    method: 'POST'\n  }\n\n  const params = {\n    RegionId: 'cn-hangzhou',\n    RecordId: recordId,\n    RR: rr,\n    Type: 'A',\n    Value: ip\n  }\n\n  return new Promise(async (resolve, reject) => {\n    try {\n      const result = await client.request('UpdateDomainRecord', params, requestOption)\n      resolve()\n    } catch (ex) {\n      reject(ex)\n    }\n  })\n}\n```\n\n最后，对以上的方法，进行组合：\n\n```js\n// 自己要修改的子域名\nconst rr = 'test' \n\n// 查询自己的 IP\nconst ipData = await myIp()\nconst ip = ipData.query\n\n// 查询阿里云配置的记录\nconst record = await getDnsRecord(rr)\n// 如果配置的记录和当前 IP 相同，可以结束了\nif(record.Value === ip) return \n// 否则要更新阿里云 IP\nawait updateDnsRecord(record.RecordId, rr, ip)\n```\n\n整体写完后，其实也很简单的嘛~没有那么复杂。\n\n--END--\n","slug":"2020-2020-06-08-raspberry-pi-2","published":1,"updated":"2020-06-08T13:11:13.873Z","_id":"ckb6idafc000054sasxvqb5ct","comments":1,"photos":[],"link":"","content":"<p>如果想从外网访问家里的树莓派，除了家里要有外网 IP 外，还需要配置动态域名解析。</p>\n<a id=\"more\"></a>\n\n<p>首先是外网 IP，这个必须要有。否则不能采用直连的方案，也就不能用动态域名解析的方案了。</p>\n<p>但这不代表外网一定访问不了。比如花生壳穿透，ngrok 等之类内网穿透软件，还是可以实现的。不过穿透方案，有很大局限性，比如 gnrok 国内环境不稳定，还有各种收费等。</p>\n<p>本文就单说有外网 IP，但是会经常变化的情况。</p>\n<h2 id=\"使用光猫、路由实现\"><a href=\"#使用光猫、路由实现\" class=\"headerlink\" title=\"使用光猫、路由实现\"></a>使用光猫、路由实现</h2><p>如果光猫、路由支持 DDNS（动态域名解析），可以考虑直接使用。</p>\n<p>我家里联通光猫支持 TZO、Oray、DynDNS，而网件路由支持 NetGear、NO-IP、3322、Oray、DynDNS。</p>\n<p>反正我都不熟悉，或者有的根本就是收费服务。</p>\n<h2 id=\"使用支持-API-的域名解析服务商\"><a href=\"#使用支持-API-的域名解析服务商\" class=\"headerlink\" title=\"使用支持 API 的域名解析服务商\"></a>使用支持 API 的域名解析服务商</h2><p>首先要明确一点，基本上支持域名解析 API 调用的服务商，都支持类似 <code>https://api.xxx.com/ddns?token=xxx&amp;ip=xxx</code> 这种通过连接形式修改的方法。而且上述光猫、路由中，可能还会支持自定义服务商，相当于定义好相关字段，当外网 IP 改变后，自动实现调用。</p>\n<p>我的域名托管在阿里云。也有 API 调用的方法。方法思路也一样，定时检测自己的 IP 地址，发现阿里云填写的地址不同，则重新变更下域名解析就行了。</p>\n<h2 id=\"使用阿里云-DDNS-API-实现动态域名解析\"><a href=\"#使用阿里云-DDNS-API-实现动态域名解析\" class=\"headerlink\" title=\"使用阿里云 DDNS API 实现动态域名解析\"></a>使用阿里云 DDNS API 实现动态域名解析</h2><h4 id=\"创建账号，获取-KEY\"><a href=\"#创建账号，获取-KEY\" class=\"headerlink\" title=\"创建账号，获取 KEY\"></a>创建账号，获取 KEY</h4><p>首先，要创建一个新账号，并开通 API 相应权限权限。</p>\n<p>到阿里云 <code>RAM 访问控制</code> 中，新建账号，权限的话，分配 <code>AliyunDNSFullAccess</code> 就够了。之后会得到 AccessKeyId、accessKeySecret。留好备用。</p>\n<h4 id=\"Node-官方实现\"><a href=\"#Node-官方实现\" class=\"headerlink\" title=\"Node 官方实现\"></a>Node 官方实现</h4><p>参考文档：<a href=\"https://help.aliyun.com/document_detail/124923.html?spm=a2c4g.11186623.6.621.5ad930b1uJsGI4#title-fbv-si0-ict\" target=\"_blank\" rel=\"noopener\">https://help.aliyun.com/document_detail/124923.html?spm=a2c4g.11186623.6.621.5ad930b1uJsGI4#title-fbv-si0-ict</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Core = <span class=\"built_in\">require</span>(<span class=\"string\">'@alicloud/pop-core'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建连接</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> client = <span class=\"keyword\">new</span> Core(&#123;</span><br><span class=\"line\">  accessKeyId: <span class=\"string\">'&lt;accessKeyId&gt;'</span>,</span><br><span class=\"line\">  accessKeySecret: <span class=\"string\">'&lt;accessSecret&gt;'</span>,</span><br><span class=\"line\">  endpoint: <span class=\"string\">'https://alidns.aliyuncs.com'</span>, <span class=\"comment\">// 不要改</span></span><br><span class=\"line\">  apiVersion: <span class=\"string\">'2015-01-09'</span> <span class=\"comment\">// 不要改</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> params = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"DomainName\"</span>: <span class=\"string\">\"dns-example.com\"</span>, <span class=\"comment\">// 你要修改的跟域名</span></span><br><span class=\"line\">  <span class=\"string\">\"RR\"</span>: <span class=\"string\">\"apitest1\"</span>, <span class=\"comment\">// 修改的子域名，比如 test.aa.com，这里填写 test</span></span><br><span class=\"line\">  <span class=\"string\">\"Type\"</span>: <span class=\"string\">\"A\"</span>, <span class=\"comment\">// 修改类型，这里为A记录</span></span><br><span class=\"line\">  <span class=\"string\">\"Value\"</span>: <span class=\"string\">\"3.0.3.0\"</span> <span class=\"comment\">// 修改后的值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> requestOption = &#123;</span><br><span class=\"line\">  method: <span class=\"string\">'POST'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">client.request(<span class=\"string\">'AddDomainRecord'</span>, params, requestOption).then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(result));</span><br><span class=\"line\">&#125;, (ex) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(ex);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Node-我的实现\"><a href=\"#Node-我的实现\" class=\"headerlink\" title=\"Node 我的实现\"></a>Node 我的实现</h4><p>参考代码：<a href=\"https://github.com/yukapril/network-service/blob/master/app/service/net.js\" target=\"_blank\" rel=\"noopener\">https://github.com/yukapril/network-service/blob/master/app/service/net.js</a></p>\n<p>我用的是 eggjs，配置好了定时任务。以下代码为核心逻辑：</p>\n<p>首先是完成查询自己的 IP，我用的 ip-api 的接口：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myIp</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; ctx &#125; = <span class=\"keyword\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"keyword\">async</span> (resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> ctx.curl(<span class=\"string\">'http://ip-api.com/json'</span>, &#123; <span class=\"attr\">dataType</span>: <span class=\"string\">'json'</span> &#125;)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> json = result.data</span><br><span class=\"line\">      resolve(json)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      reject(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再写一个查询阿里云当前 DNS 配置的方法。通过此方法，我们可以查到指定子域名的相关数据。后续更新的时候要用到的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Core = <span class=\"built_in\">require</span>(<span class=\"string\">'@alicloud/pop-core'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getDnsRecord = <span class=\"function\">(<span class=\"params\">subdomain</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 参考官方例子，填好自己的id/secret</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> client = <span class=\"keyword\">new</span> Core(&#123;</span><br><span class=\"line\">    accessKeyId: <span class=\"string\">'xxx'</span>,</span><br><span class=\"line\">    accessKeySecret: <span class=\"string\">'xxx'</span>,</span><br><span class=\"line\">    endpoint: <span class=\"string\">'https://alidns.aliyuncs.com'</span>, <span class=\"comment\">// 不要改</span></span><br><span class=\"line\">    apiVersion: <span class=\"string\">'2015-01-09'</span> <span class=\"comment\">// 不要改</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> requestOption = &#123;</span><br><span class=\"line\">    method: <span class=\"string\">'POST'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> params = &#123;</span><br><span class=\"line\">    RegionId: <span class=\"string\">'cn-hangzhou'</span>, <span class=\"comment\">// 好像所有人都是这个</span></span><br><span class=\"line\">    DomainName: <span class=\"string\">'abc.com'</span>, <span class=\"comment\">// 填写自己的域名</span></span><br><span class=\"line\">    PageSize: <span class=\"number\">500</span> <span class=\"comment\">// 一次性多查点，省的翻页了</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"keyword\">async</span> (resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> client.request(<span class=\"string\">'DescribeDomainRecords'</span>, params, requestOption)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> record = result.DomainRecords.Record.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item.RR === subdomain </span><br><span class=\"line\">      &#125;)[<span class=\"number\">0</span>]</span><br><span class=\"line\">      resolve(record)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ex) &#123;</span><br><span class=\"line\">      reject(ex)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果发现当前 IP 和阿里云中查询的 IP 不同，则需要更新。写一个更新方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Core = <span class=\"built_in\">require</span>(<span class=\"string\">'@alicloud/pop-core'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> updateDnsRecord = <span class=\"function\">(<span class=\"params\">recordId, rr, ip</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 参考官方例子，填好自己的id/secret</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> client = <span class=\"keyword\">new</span> Core(&#123;</span><br><span class=\"line\">    accessKeyId: <span class=\"string\">'xxx'</span>,</span><br><span class=\"line\">    accessKeySecret: <span class=\"string\">'xxx'</span>,</span><br><span class=\"line\">    endpoint: <span class=\"string\">'https://alidns.aliyuncs.com'</span>, <span class=\"comment\">// 不要改</span></span><br><span class=\"line\">    apiVersion: <span class=\"string\">'2015-01-09'</span> <span class=\"comment\">// 不要改</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> requestOption = &#123;</span><br><span class=\"line\">    method: <span class=\"string\">'POST'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> params = &#123;</span><br><span class=\"line\">    RegionId: <span class=\"string\">'cn-hangzhou'</span>,</span><br><span class=\"line\">    RecordId: recordId,</span><br><span class=\"line\">    RR: rr,</span><br><span class=\"line\">    Type: <span class=\"string\">'A'</span>,</span><br><span class=\"line\">    Value: ip</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"keyword\">async</span> (resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> client.request(<span class=\"string\">'UpdateDomainRecord'</span>, params, requestOption)</span><br><span class=\"line\">      resolve()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ex) &#123;</span><br><span class=\"line\">      reject(ex)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后，对以上的方法，进行组合：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自己要修改的子域名</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> rr = <span class=\"string\">'test'</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询自己的 IP</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ipData = <span class=\"keyword\">await</span> myIp()</span><br><span class=\"line\"><span class=\"keyword\">const</span> ip = ipData.query</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询阿里云配置的记录</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> record = <span class=\"keyword\">await</span> getDnsRecord(rr)</span><br><span class=\"line\"><span class=\"comment\">// 如果配置的记录和当前 IP 相同，可以结束了</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(record.Value === ip) <span class=\"keyword\">return</span> </span><br><span class=\"line\"><span class=\"comment\">// 否则要更新阿里云 IP</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> updateDnsRecord(record.RecordId, rr, ip)</span><br></pre></td></tr></table></figure>\n\n<p>整体写完后，其实也很简单的嘛~没有那么复杂。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>如果想从外网访问家里的树莓派，除了家里要有外网 IP 外，还需要配置动态域名解析。</p>","more":"<p>首先是外网 IP，这个必须要有。否则不能采用直连的方案，也就不能用动态域名解析的方案了。</p>\n<p>但这不代表外网一定访问不了。比如花生壳穿透，ngrok 等之类内网穿透软件，还是可以实现的。不过穿透方案，有很大局限性，比如 gnrok 国内环境不稳定，还有各种收费等。</p>\n<p>本文就单说有外网 IP，但是会经常变化的情况。</p>\n<h2 id=\"使用光猫、路由实现\"><a href=\"#使用光猫、路由实现\" class=\"headerlink\" title=\"使用光猫、路由实现\"></a>使用光猫、路由实现</h2><p>如果光猫、路由支持 DDNS（动态域名解析），可以考虑直接使用。</p>\n<p>我家里联通光猫支持 TZO、Oray、DynDNS，而网件路由支持 NetGear、NO-IP、3322、Oray、DynDNS。</p>\n<p>反正我都不熟悉，或者有的根本就是收费服务。</p>\n<h2 id=\"使用支持-API-的域名解析服务商\"><a href=\"#使用支持-API-的域名解析服务商\" class=\"headerlink\" title=\"使用支持 API 的域名解析服务商\"></a>使用支持 API 的域名解析服务商</h2><p>首先要明确一点，基本上支持域名解析 API 调用的服务商，都支持类似 <code>https://api.xxx.com/ddns?token=xxx&amp;ip=xxx</code> 这种通过连接形式修改的方法。而且上述光猫、路由中，可能还会支持自定义服务商，相当于定义好相关字段，当外网 IP 改变后，自动实现调用。</p>\n<p>我的域名托管在阿里云。也有 API 调用的方法。方法思路也一样，定时检测自己的 IP 地址，发现阿里云填写的地址不同，则重新变更下域名解析就行了。</p>\n<h2 id=\"使用阿里云-DDNS-API-实现动态域名解析\"><a href=\"#使用阿里云-DDNS-API-实现动态域名解析\" class=\"headerlink\" title=\"使用阿里云 DDNS API 实现动态域名解析\"></a>使用阿里云 DDNS API 实现动态域名解析</h2><h4 id=\"创建账号，获取-KEY\"><a href=\"#创建账号，获取-KEY\" class=\"headerlink\" title=\"创建账号，获取 KEY\"></a>创建账号，获取 KEY</h4><p>首先，要创建一个新账号，并开通 API 相应权限权限。</p>\n<p>到阿里云 <code>RAM 访问控制</code> 中，新建账号，权限的话，分配 <code>AliyunDNSFullAccess</code> 就够了。之后会得到 AccessKeyId、accessKeySecret。留好备用。</p>\n<h4 id=\"Node-官方实现\"><a href=\"#Node-官方实现\" class=\"headerlink\" title=\"Node 官方实现\"></a>Node 官方实现</h4><p>参考文档：<a href=\"https://help.aliyun.com/document_detail/124923.html?spm=a2c4g.11186623.6.621.5ad930b1uJsGI4#title-fbv-si0-ict\" target=\"_blank\" rel=\"noopener\">https://help.aliyun.com/document_detail/124923.html?spm=a2c4g.11186623.6.621.5ad930b1uJsGI4#title-fbv-si0-ict</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Core = <span class=\"built_in\">require</span>(<span class=\"string\">'@alicloud/pop-core'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建连接</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> client = <span class=\"keyword\">new</span> Core(&#123;</span><br><span class=\"line\">  accessKeyId: <span class=\"string\">'&lt;accessKeyId&gt;'</span>,</span><br><span class=\"line\">  accessKeySecret: <span class=\"string\">'&lt;accessSecret&gt;'</span>,</span><br><span class=\"line\">  endpoint: <span class=\"string\">'https://alidns.aliyuncs.com'</span>, <span class=\"comment\">// 不要改</span></span><br><span class=\"line\">  apiVersion: <span class=\"string\">'2015-01-09'</span> <span class=\"comment\">// 不要改</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> params = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"DomainName\"</span>: <span class=\"string\">\"dns-example.com\"</span>, <span class=\"comment\">// 你要修改的跟域名</span></span><br><span class=\"line\">  <span class=\"string\">\"RR\"</span>: <span class=\"string\">\"apitest1\"</span>, <span class=\"comment\">// 修改的子域名，比如 test.aa.com，这里填写 test</span></span><br><span class=\"line\">  <span class=\"string\">\"Type\"</span>: <span class=\"string\">\"A\"</span>, <span class=\"comment\">// 修改类型，这里为A记录</span></span><br><span class=\"line\">  <span class=\"string\">\"Value\"</span>: <span class=\"string\">\"3.0.3.0\"</span> <span class=\"comment\">// 修改后的值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> requestOption = &#123;</span><br><span class=\"line\">  method: <span class=\"string\">'POST'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">client.request(<span class=\"string\">'AddDomainRecord'</span>, params, requestOption).then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(result));</span><br><span class=\"line\">&#125;, (ex) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(ex);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Node-我的实现\"><a href=\"#Node-我的实现\" class=\"headerlink\" title=\"Node 我的实现\"></a>Node 我的实现</h4><p>参考代码：<a href=\"https://github.com/yukapril/network-service/blob/master/app/service/net.js\" target=\"_blank\" rel=\"noopener\">https://github.com/yukapril/network-service/blob/master/app/service/net.js</a></p>\n<p>我用的是 eggjs，配置好了定时任务。以下代码为核心逻辑：</p>\n<p>首先是完成查询自己的 IP，我用的 ip-api 的接口：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myIp</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; ctx &#125; = <span class=\"keyword\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"keyword\">async</span> (resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> ctx.curl(<span class=\"string\">'http://ip-api.com/json'</span>, &#123; <span class=\"attr\">dataType</span>: <span class=\"string\">'json'</span> &#125;)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> json = result.data</span><br><span class=\"line\">      resolve(json)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      reject(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再写一个查询阿里云当前 DNS 配置的方法。通过此方法，我们可以查到指定子域名的相关数据。后续更新的时候要用到的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Core = <span class=\"built_in\">require</span>(<span class=\"string\">'@alicloud/pop-core'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getDnsRecord = <span class=\"function\">(<span class=\"params\">subdomain</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 参考官方例子，填好自己的id/secret</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> client = <span class=\"keyword\">new</span> Core(&#123;</span><br><span class=\"line\">    accessKeyId: <span class=\"string\">'xxx'</span>,</span><br><span class=\"line\">    accessKeySecret: <span class=\"string\">'xxx'</span>,</span><br><span class=\"line\">    endpoint: <span class=\"string\">'https://alidns.aliyuncs.com'</span>, <span class=\"comment\">// 不要改</span></span><br><span class=\"line\">    apiVersion: <span class=\"string\">'2015-01-09'</span> <span class=\"comment\">// 不要改</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> requestOption = &#123;</span><br><span class=\"line\">    method: <span class=\"string\">'POST'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> params = &#123;</span><br><span class=\"line\">    RegionId: <span class=\"string\">'cn-hangzhou'</span>, <span class=\"comment\">// 好像所有人都是这个</span></span><br><span class=\"line\">    DomainName: <span class=\"string\">'abc.com'</span>, <span class=\"comment\">// 填写自己的域名</span></span><br><span class=\"line\">    PageSize: <span class=\"number\">500</span> <span class=\"comment\">// 一次性多查点，省的翻页了</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"keyword\">async</span> (resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> client.request(<span class=\"string\">'DescribeDomainRecords'</span>, params, requestOption)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> record = result.DomainRecords.Record.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item.RR === subdomain </span><br><span class=\"line\">      &#125;)[<span class=\"number\">0</span>]</span><br><span class=\"line\">      resolve(record)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ex) &#123;</span><br><span class=\"line\">      reject(ex)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果发现当前 IP 和阿里云中查询的 IP 不同，则需要更新。写一个更新方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Core = <span class=\"built_in\">require</span>(<span class=\"string\">'@alicloud/pop-core'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> updateDnsRecord = <span class=\"function\">(<span class=\"params\">recordId, rr, ip</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 参考官方例子，填好自己的id/secret</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> client = <span class=\"keyword\">new</span> Core(&#123;</span><br><span class=\"line\">    accessKeyId: <span class=\"string\">'xxx'</span>,</span><br><span class=\"line\">    accessKeySecret: <span class=\"string\">'xxx'</span>,</span><br><span class=\"line\">    endpoint: <span class=\"string\">'https://alidns.aliyuncs.com'</span>, <span class=\"comment\">// 不要改</span></span><br><span class=\"line\">    apiVersion: <span class=\"string\">'2015-01-09'</span> <span class=\"comment\">// 不要改</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> requestOption = &#123;</span><br><span class=\"line\">    method: <span class=\"string\">'POST'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> params = &#123;</span><br><span class=\"line\">    RegionId: <span class=\"string\">'cn-hangzhou'</span>,</span><br><span class=\"line\">    RecordId: recordId,</span><br><span class=\"line\">    RR: rr,</span><br><span class=\"line\">    Type: <span class=\"string\">'A'</span>,</span><br><span class=\"line\">    Value: ip</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"keyword\">async</span> (resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> client.request(<span class=\"string\">'UpdateDomainRecord'</span>, params, requestOption)</span><br><span class=\"line\">      resolve()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ex) &#123;</span><br><span class=\"line\">      reject(ex)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后，对以上的方法，进行组合：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自己要修改的子域名</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> rr = <span class=\"string\">'test'</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询自己的 IP</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ipData = <span class=\"keyword\">await</span> myIp()</span><br><span class=\"line\"><span class=\"keyword\">const</span> ip = ipData.query</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询阿里云配置的记录</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> record = <span class=\"keyword\">await</span> getDnsRecord(rr)</span><br><span class=\"line\"><span class=\"comment\">// 如果配置的记录和当前 IP 相同，可以结束了</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(record.Value === ip) <span class=\"keyword\">return</span> </span><br><span class=\"line\"><span class=\"comment\">// 否则要更新阿里云 IP</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> updateDnsRecord(record.RecordId, rr, ip)</span><br></pre></td></tr></table></figure>\n\n<p>整体写完后，其实也很简单的嘛~没有那么复杂。</p>\n<p>–END–</p>"},{"layout":"post","title":"puppeteer 安装和启动","date":"2020-06-20T16:30:00.000Z","_content":"\npuppeteer 入门其实挺容易的，但是想安装成功确有难度。自己找了点配置，贴出来算作备份。\n\n<!-- more -->\n\n## npm 安装依赖\n\n首先配置 `.npmrc` ，防止依赖和资源无法下载：\n\n```\nhome=https://npm.taobao.org\nregistry=https://registry.npm.taobao.org/\nsass_binary_site=https://npm.taobao.org/mirrors/node-sass/\nphantomjs_cdnurl=http://cnpmjs.org/downloads\nelectron_mirror=https://npm.taobao.org/mirrors/electron/\nsqlite3_binary_host_mirror=https://foxgis.oss-cn-shanghai.aliyuncs.com/\nprofiler_binary_host_mirror=https://npm.taobao.org/mirrors/node-inspector/\nchromedriver_cdnurl=https://cdn.npm.taobao.org/dist/chromedriver\npuppeteer_download_host https://npm.taobao.org/mirrors=true\n```\n\n之后直接进行常规安装即可：\n\n```bash\nnpm install puppeteer\n```\n\n安装依赖以及安装软件包后，会有以下提示：\n\n```\nDownloading Chromium r756035 - 124.1 Mb [====================] 100% 0.0s\nChromium (756035) downloaded to /Users/xxx/Workspace/puppeteer/node_modules/puppeteer/.local-chromium/mac-756035\n```\n\n按照你的地址，就可以找到 Chromium 的安装位置了。我习惯把它拷贝到项目里。以后就不用再次下载了。\n\n> 我还听说可以用 cnpm 来安装，但我没用过，可以参考下。\n>\n> 但单独调整 npm 为国内源（比如使用 nrm），只能解决下载 npm 的问题，依赖的 chromium 还是下载不了。\n>\n> 所以既要调整 npm 为国内源，还要解决软件包下载的代理。\n\n## 启动\n\n编写一个 `index.js` 文件，注意如果调整过 Chromium 位置，则要进行配置下。\n\n```jsx\nconst puppeteer = require('puppeteer')\nconst iPhone6P = puppeteer.devices['iPhone 6 Plus']\n\nconst log = (...args) => {\n    console.log('[PUPPETEER]', ...args)\n  }\n\n;(async () => {\n  const browser = await puppeteer.launch({\n    executablePath: 'Chromium/Chromium.app/Contents/MacOS/Chromium',\n    headless: false,\n    devtools: true,\n  })\n\n  const version = await browser.version()\n  log('Chromium Version:', version)\n\n  // page\n  const page0 = await browser.newPage()\n  await page0.emulate(iPhone6P)\n  await page0.goto('https://m.so.com')\n  await page0.type('.search-txt', 'yukapril', { delay: 100 })\n  await page0.click('.search-btn')\n})()\n```\n\n\n\n--END--\n","source":"_posts/2020/2020-06-20-puppeteer.md","raw":"---\nlayout: post\ntitle: puppeteer 安装和启动 \ndate: 2020-06-20 16:30:00 GMT+0800\ncategories: [前端]\ntags:  [puppeteer,npm]\n---\n\npuppeteer 入门其实挺容易的，但是想安装成功确有难度。自己找了点配置，贴出来算作备份。\n\n<!-- more -->\n\n## npm 安装依赖\n\n首先配置 `.npmrc` ，防止依赖和资源无法下载：\n\n```\nhome=https://npm.taobao.org\nregistry=https://registry.npm.taobao.org/\nsass_binary_site=https://npm.taobao.org/mirrors/node-sass/\nphantomjs_cdnurl=http://cnpmjs.org/downloads\nelectron_mirror=https://npm.taobao.org/mirrors/electron/\nsqlite3_binary_host_mirror=https://foxgis.oss-cn-shanghai.aliyuncs.com/\nprofiler_binary_host_mirror=https://npm.taobao.org/mirrors/node-inspector/\nchromedriver_cdnurl=https://cdn.npm.taobao.org/dist/chromedriver\npuppeteer_download_host https://npm.taobao.org/mirrors=true\n```\n\n之后直接进行常规安装即可：\n\n```bash\nnpm install puppeteer\n```\n\n安装依赖以及安装软件包后，会有以下提示：\n\n```\nDownloading Chromium r756035 - 124.1 Mb [====================] 100% 0.0s\nChromium (756035) downloaded to /Users/xxx/Workspace/puppeteer/node_modules/puppeteer/.local-chromium/mac-756035\n```\n\n按照你的地址，就可以找到 Chromium 的安装位置了。我习惯把它拷贝到项目里。以后就不用再次下载了。\n\n> 我还听说可以用 cnpm 来安装，但我没用过，可以参考下。\n>\n> 但单独调整 npm 为国内源（比如使用 nrm），只能解决下载 npm 的问题，依赖的 chromium 还是下载不了。\n>\n> 所以既要调整 npm 为国内源，还要解决软件包下载的代理。\n\n## 启动\n\n编写一个 `index.js` 文件，注意如果调整过 Chromium 位置，则要进行配置下。\n\n```jsx\nconst puppeteer = require('puppeteer')\nconst iPhone6P = puppeteer.devices['iPhone 6 Plus']\n\nconst log = (...args) => {\n    console.log('[PUPPETEER]', ...args)\n  }\n\n;(async () => {\n  const browser = await puppeteer.launch({\n    executablePath: 'Chromium/Chromium.app/Contents/MacOS/Chromium',\n    headless: false,\n    devtools: true,\n  })\n\n  const version = await browser.version()\n  log('Chromium Version:', version)\n\n  // page\n  const page0 = await browser.newPage()\n  await page0.emulate(iPhone6P)\n  await page0.goto('https://m.so.com')\n  await page0.type('.search-txt', 'yukapril', { delay: 100 })\n  await page0.click('.search-btn')\n})()\n```\n\n\n\n--END--\n","slug":"2020-2020-06-20-puppeteer","published":1,"updated":"2020-06-20T08:32:28.696Z","comments":1,"photos":[],"link":"","_id":"ckbndxhk30000q0sa3s0soknc","content":"<p>puppeteer 入门其实挺容易的，但是想安装成功确有难度。自己找了点配置，贴出来算作备份。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"npm-安装依赖\"><a href=\"#npm-安装依赖\" class=\"headerlink\" title=\"npm 安装依赖\"></a>npm 安装依赖</h2><p>首先配置 <code>.npmrc</code> ，防止依赖和资源无法下载：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">home=https://npm.taobao.org</span><br><span class=\"line\">registry=https://registry.npm.taobao.org/</span><br><span class=\"line\">sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</span><br><span class=\"line\">phantomjs_cdnurl=http://cnpmjs.org/downloads</span><br><span class=\"line\">electron_mirror=https://npm.taobao.org/mirrors/electron/</span><br><span class=\"line\">sqlite3_binary_host_mirror=https://foxgis.oss-cn-shanghai.aliyuncs.com/</span><br><span class=\"line\">profiler_binary_host_mirror=https://npm.taobao.org/mirrors/node-inspector/</span><br><span class=\"line\">chromedriver_cdnurl=https://cdn.npm.taobao.org/dist/chromedriver</span><br><span class=\"line\">puppeteer_download_host https://npm.taobao.org/mirrors=true</span><br></pre></td></tr></table></figure>\n\n<p>之后直接进行常规安装即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install puppeteer</span><br></pre></td></tr></table></figure>\n\n<p>安装依赖以及安装软件包后，会有以下提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Downloading Chromium r756035 - 124.1 Mb [====================] 100% 0.0s</span><br><span class=\"line\">Chromium (756035) downloaded to /Users/xxx/Workspace/puppeteer/node_modules/puppeteer/.local-chromium/mac-756035</span><br></pre></td></tr></table></figure>\n\n<p>按照你的地址，就可以找到 Chromium 的安装位置了。我习惯把它拷贝到项目里。以后就不用再次下载了。</p>\n<blockquote>\n<p>我还听说可以用 cnpm 来安装，但我没用过，可以参考下。</p>\n<p>但单独调整 npm 为国内源（比如使用 nrm），只能解决下载 npm 的问题，依赖的 chromium 还是下载不了。</p>\n<p>所以既要调整 npm 为国内源，还要解决软件包下载的代理。</p>\n</blockquote>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><p>编写一个 <code>index.js</code> 文件，注意如果调整过 Chromium 位置，则要进行配置下。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> puppeteer = <span class=\"built_in\">require</span>(<span class=\"string\">'puppeteer'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> iPhone6P = puppeteer.devices[<span class=\"string\">'iPhone 6 Plus'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> log = <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[PUPPETEER]'</span>, ...args)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">;<span class=\"function\">(<span class=\"params\"><span class=\"keyword\">async</span> (</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> browser = <span class=\"keyword\">await</span> puppeteer.launch(&#123;</span><br><span class=\"line\">    executablePath: <span class=\"string\">'Chromium/Chromium.app/Contents/MacOS/Chromium'</span>,</span><br><span class=\"line\">    headless: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    devtools: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> version = <span class=\"keyword\">await</span> browser.version()</span><br><span class=\"line\">  log(<span class=\"string\">'Chromium Version:'</span>, version)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// page</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> page0 = <span class=\"keyword\">await</span> browser.newPage()</span><br><span class=\"line\">  <span class=\"keyword\">await</span> page0.emulate(iPhone6P)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> page0.goto(<span class=\"string\">'https://m.so.com'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> page0.type(<span class=\"string\">'.search-txt'</span>, <span class=\"string\">'yukapril'</span>, &#123; <span class=\"attr\">delay</span>: <span class=\"number\">100</span> &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> page0.click(<span class=\"string\">'.search-btn'</span>)</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>puppeteer 入门其实挺容易的，但是想安装成功确有难度。自己找了点配置，贴出来算作备份。</p>","more":"<h2 id=\"npm-安装依赖\"><a href=\"#npm-安装依赖\" class=\"headerlink\" title=\"npm 安装依赖\"></a>npm 安装依赖</h2><p>首先配置 <code>.npmrc</code> ，防止依赖和资源无法下载：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">home=https://npm.taobao.org</span><br><span class=\"line\">registry=https://registry.npm.taobao.org/</span><br><span class=\"line\">sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</span><br><span class=\"line\">phantomjs_cdnurl=http://cnpmjs.org/downloads</span><br><span class=\"line\">electron_mirror=https://npm.taobao.org/mirrors/electron/</span><br><span class=\"line\">sqlite3_binary_host_mirror=https://foxgis.oss-cn-shanghai.aliyuncs.com/</span><br><span class=\"line\">profiler_binary_host_mirror=https://npm.taobao.org/mirrors/node-inspector/</span><br><span class=\"line\">chromedriver_cdnurl=https://cdn.npm.taobao.org/dist/chromedriver</span><br><span class=\"line\">puppeteer_download_host https://npm.taobao.org/mirrors=true</span><br></pre></td></tr></table></figure>\n\n<p>之后直接进行常规安装即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install puppeteer</span><br></pre></td></tr></table></figure>\n\n<p>安装依赖以及安装软件包后，会有以下提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Downloading Chromium r756035 - 124.1 Mb [====================] 100% 0.0s</span><br><span class=\"line\">Chromium (756035) downloaded to /Users/xxx/Workspace/puppeteer/node_modules/puppeteer/.local-chromium/mac-756035</span><br></pre></td></tr></table></figure>\n\n<p>按照你的地址，就可以找到 Chromium 的安装位置了。我习惯把它拷贝到项目里。以后就不用再次下载了。</p>\n<blockquote>\n<p>我还听说可以用 cnpm 来安装，但我没用过，可以参考下。</p>\n<p>但单独调整 npm 为国内源（比如使用 nrm），只能解决下载 npm 的问题，依赖的 chromium 还是下载不了。</p>\n<p>所以既要调整 npm 为国内源，还要解决软件包下载的代理。</p>\n</blockquote>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><p>编写一个 <code>index.js</code> 文件，注意如果调整过 Chromium 位置，则要进行配置下。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> puppeteer = <span class=\"built_in\">require</span>(<span class=\"string\">'puppeteer'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> iPhone6P = puppeteer.devices[<span class=\"string\">'iPhone 6 Plus'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> log = <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[PUPPETEER]'</span>, ...args)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">;<span class=\"function\">(<span class=\"params\"><span class=\"keyword\">async</span> (</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> browser = <span class=\"keyword\">await</span> puppeteer.launch(&#123;</span><br><span class=\"line\">    executablePath: <span class=\"string\">'Chromium/Chromium.app/Contents/MacOS/Chromium'</span>,</span><br><span class=\"line\">    headless: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    devtools: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> version = <span class=\"keyword\">await</span> browser.version()</span><br><span class=\"line\">  log(<span class=\"string\">'Chromium Version:'</span>, version)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// page</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> page0 = <span class=\"keyword\">await</span> browser.newPage()</span><br><span class=\"line\">  <span class=\"keyword\">await</span> page0.emulate(iPhone6P)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> page0.goto(<span class=\"string\">'https://m.so.com'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> page0.type(<span class=\"string\">'.search-txt'</span>, <span class=\"string\">'yukapril'</span>, &#123; <span class=\"attr\">delay</span>: <span class=\"number\">100</span> &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> page0.click(<span class=\"string\">'.search-btn'</span>)</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<p>–END–</p>"},{"layout":"post","title":"树莓派 Raspberry Pi (三)：安装RSS TT-RSS","date":"2020-07-05T16:05:00.000Z","_content":"\n一直在加班，可算抽出点时间可以写博客了。不过由于 TTRSS 安装复杂，我也在测试它的稳定性。结果，上次树莓派重启后，果真挂了，所以只能大概说说当时安装时候的经验，可以参考。但不推荐在树莓派上跑。\n\n<!-- more -->\n\n安装过程其实挺简单的，但是 TTRSS 的 docker 中用了一个服务器软件，没有 ARM 版本的，所以直接安装必定失败。\n\n安装过程，参考官方文档[这里](https://git.tt-rss.org/fox/ttrss-docker-compose)。\n\n**大致说来，也就几步：**\n\n**首先，确保机器环境。**\n\n确保你树莓派上有 docker 和docker-compose，以及使用源码安装，需要 git。\n\n**其次，下载源码。**\n\n执行下脚本，就可以克隆源码了。\n\n```bash\ngit clone https://git.tt-rss.org/fox/ttrss-docker-compose.git ttrss-docker && cd ttrss-docker\n```\n\n**再后，完成配置文件。**\n\n把 `.env-dist` 拷贝一个，改名为 `.env`，然后可以配置下机器 IP 等。这里建议直接配本机 `127.0.0.1`。后续外网访问的话，在机器上起一个 Nginx 做个前置。\n\n**修改源码。**\n\n如果是 ARM 架构的 CPU，比如是树莓派，此步骤必须。其他架构的 CPU，比如 x86/amd64，此步骤可以不做。\n\n这个问题参考来源[这里](https://community.tt-rss.org/t/cant-install-ttrss-on-a-raspberry-pi-4-with-docker/3135)。\n\n修改 `/web/Dockerfile` 文件:\n\n```Dockerfile\n# FROM abiosoft/caddy:no-stats\n# 需要原有的修改为 jessestuart/caddy\nFROM jessestuart/caddy\n```\n\n**最后，完成构建并启动。**\n\n执行下列脚本，即可完成构建并启动。可以在树莓派中，访问 `127.0.0.1:8280` 来试试了。\n\n```bash\ndocker-compose up --build\n```\n\n## 小结\n\n方法是这样，但是用了一个月后，重启了树莓派，项目就再也启动不了了。突然报错了，所以还是不太建议树莓派来启动。\n\n原本从 Feedly 切换到 TT-RSS，结果又出问题，只能在切换会 Feedly，每次看新闻还得科学上网。\n\n--END--\n","source":"_posts/2020/2020-07-05-raspberry-pi-3.md","raw":"---\nlayout: post\ntitle: 树莓派 Raspberry Pi (三)：安装RSS TT-RSS\ndate: 2020-07-05 16:05:00 GMT+0800\ncategories: [开发板]\ntags:  [树莓派,Tiny Tiny,RSS]\n---\n\n一直在加班，可算抽出点时间可以写博客了。不过由于 TTRSS 安装复杂，我也在测试它的稳定性。结果，上次树莓派重启后，果真挂了，所以只能大概说说当时安装时候的经验，可以参考。但不推荐在树莓派上跑。\n\n<!-- more -->\n\n安装过程其实挺简单的，但是 TTRSS 的 docker 中用了一个服务器软件，没有 ARM 版本的，所以直接安装必定失败。\n\n安装过程，参考官方文档[这里](https://git.tt-rss.org/fox/ttrss-docker-compose)。\n\n**大致说来，也就几步：**\n\n**首先，确保机器环境。**\n\n确保你树莓派上有 docker 和docker-compose，以及使用源码安装，需要 git。\n\n**其次，下载源码。**\n\n执行下脚本，就可以克隆源码了。\n\n```bash\ngit clone https://git.tt-rss.org/fox/ttrss-docker-compose.git ttrss-docker && cd ttrss-docker\n```\n\n**再后，完成配置文件。**\n\n把 `.env-dist` 拷贝一个，改名为 `.env`，然后可以配置下机器 IP 等。这里建议直接配本机 `127.0.0.1`。后续外网访问的话，在机器上起一个 Nginx 做个前置。\n\n**修改源码。**\n\n如果是 ARM 架构的 CPU，比如是树莓派，此步骤必须。其他架构的 CPU，比如 x86/amd64，此步骤可以不做。\n\n这个问题参考来源[这里](https://community.tt-rss.org/t/cant-install-ttrss-on-a-raspberry-pi-4-with-docker/3135)。\n\n修改 `/web/Dockerfile` 文件:\n\n```Dockerfile\n# FROM abiosoft/caddy:no-stats\n# 需要原有的修改为 jessestuart/caddy\nFROM jessestuart/caddy\n```\n\n**最后，完成构建并启动。**\n\n执行下列脚本，即可完成构建并启动。可以在树莓派中，访问 `127.0.0.1:8280` 来试试了。\n\n```bash\ndocker-compose up --build\n```\n\n## 小结\n\n方法是这样，但是用了一个月后，重启了树莓派，项目就再也启动不了了。突然报错了，所以还是不太建议树莓派来启动。\n\n原本从 Feedly 切换到 TT-RSS，结果又出问题，只能在切换会 Feedly，每次看新闻还得科学上网。\n\n--END--\n","slug":"2020-2020-07-05-raspberry-pi-3","published":1,"updated":"2020-07-05T08:05:23.736Z","comments":1,"photos":[],"link":"","_id":"ckc8sl03c0000kvsaew4yf9pd","content":"<p>一直在加班，可算抽出点时间可以写博客了。不过由于 TTRSS 安装复杂，我也在测试它的稳定性。结果，上次树莓派重启后，果真挂了，所以只能大概说说当时安装时候的经验，可以参考。但不推荐在树莓派上跑。</p>\n<a id=\"more\"></a>\n\n<p>安装过程其实挺简单的，但是 TTRSS 的 docker 中用了一个服务器软件，没有 ARM 版本的，所以直接安装必定失败。</p>\n<p>安装过程，参考官方文档<a href=\"https://git.tt-rss.org/fox/ttrss-docker-compose\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p><strong>大致说来，也就几步：</strong></p>\n<p><strong>首先，确保机器环境。</strong></p>\n<p>确保你树莓派上有 docker 和docker-compose，以及使用源码安装，需要 git。</p>\n<p><strong>其次，下载源码。</strong></p>\n<p>执行下脚本，就可以克隆源码了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://git.tt-rss.org/fox/ttrss-docker-compose.git ttrss-docker &amp;&amp; <span class=\"built_in\">cd</span> ttrss-docker</span><br></pre></td></tr></table></figure>\n\n<p><strong>再后，完成配置文件。</strong></p>\n<p>把 <code>.env-dist</code> 拷贝一个，改名为 <code>.env</code>，然后可以配置下机器 IP 等。这里建议直接配本机 <code>127.0.0.1</code>。后续外网访问的话，在机器上起一个 Nginx 做个前置。</p>\n<p><strong>修改源码。</strong></p>\n<p>如果是 ARM 架构的 CPU，比如是树莓派，此步骤必须。其他架构的 CPU，比如 x86/amd64，此步骤可以不做。</p>\n<p>这个问题参考来源<a href=\"https://community.tt-rss.org/t/cant-install-ttrss-on-a-raspberry-pi-4-with-docker/3135\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>修改 <code>/web/Dockerfile</code> 文件:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># FROM abiosoft/caddy:no-stats</span></span><br><span class=\"line\"><span class=\"comment\"># 需要原有的修改为 jessestuart/caddy</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> jessestuart/caddy</span><br></pre></td></tr></table></figure>\n\n<p><strong>最后，完成构建并启动。</strong></p>\n<p>执行下列脚本，即可完成构建并启动。可以在树莓派中，访问 <code>127.0.0.1:8280</code> 来试试了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up --build</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>方法是这样，但是用了一个月后，重启了树莓派，项目就再也启动不了了。突然报错了，所以还是不太建议树莓派来启动。</p>\n<p>原本从 Feedly 切换到 TT-RSS，结果又出问题，只能在切换会 Feedly，每次看新闻还得科学上网。</p>\n<p>–END–</p>\n","site":{"data":{}},"excerpt":"<p>一直在加班，可算抽出点时间可以写博客了。不过由于 TTRSS 安装复杂，我也在测试它的稳定性。结果，上次树莓派重启后，果真挂了，所以只能大概说说当时安装时候的经验，可以参考。但不推荐在树莓派上跑。</p>","more":"<p>安装过程其实挺简单的，但是 TTRSS 的 docker 中用了一个服务器软件，没有 ARM 版本的，所以直接安装必定失败。</p>\n<p>安装过程，参考官方文档<a href=\"https://git.tt-rss.org/fox/ttrss-docker-compose\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p><strong>大致说来，也就几步：</strong></p>\n<p><strong>首先，确保机器环境。</strong></p>\n<p>确保你树莓派上有 docker 和docker-compose，以及使用源码安装，需要 git。</p>\n<p><strong>其次，下载源码。</strong></p>\n<p>执行下脚本，就可以克隆源码了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://git.tt-rss.org/fox/ttrss-docker-compose.git ttrss-docker &amp;&amp; <span class=\"built_in\">cd</span> ttrss-docker</span><br></pre></td></tr></table></figure>\n\n<p><strong>再后，完成配置文件。</strong></p>\n<p>把 <code>.env-dist</code> 拷贝一个，改名为 <code>.env</code>，然后可以配置下机器 IP 等。这里建议直接配本机 <code>127.0.0.1</code>。后续外网访问的话，在机器上起一个 Nginx 做个前置。</p>\n<p><strong>修改源码。</strong></p>\n<p>如果是 ARM 架构的 CPU，比如是树莓派，此步骤必须。其他架构的 CPU，比如 x86/amd64，此步骤可以不做。</p>\n<p>这个问题参考来源<a href=\"https://community.tt-rss.org/t/cant-install-ttrss-on-a-raspberry-pi-4-with-docker/3135\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>修改 <code>/web/Dockerfile</code> 文件:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># FROM abiosoft/caddy:no-stats</span></span><br><span class=\"line\"><span class=\"comment\"># 需要原有的修改为 jessestuart/caddy</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> jessestuart/caddy</span><br></pre></td></tr></table></figure>\n\n<p><strong>最后，完成构建并启动。</strong></p>\n<p>执行下列脚本，即可完成构建并启动。可以在树莓派中，访问 <code>127.0.0.1:8280</code> 来试试了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up --build</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>方法是这样，但是用了一个月后，重启了树莓派，项目就再也启动不了了。突然报错了，所以还是不太建议树莓派来启动。</p>\n<p>原本从 Feedly 切换到 TT-RSS，结果又出问题，只能在切换会 Feedly，每次看新闻还得科学上网。</p>\n<p>–END–</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cka5ik89m0000nybgcmdzvbmj","category_id":"cka5ik89t0002nybg71upyq4y","_id":"cka5ik8a5000dnybgujvyzgl8"},{"post_id":"cka5ik89z0006nybgnkekmnl0","category_id":"cka5ik89t0002nybg71upyq4y","_id":"cka5ik8a7000fnybgykkwcrzg"},{"post_id":"cka5ik8a20008nybgaqdo92kg","category_id":"cka5ik89t0002nybg71upyq4y","_id":"cka5ik8ab000jnybg7zr1t7ps"},{"post_id":"cka5ik89r0001nybgdpq2nrgg","category_id":"cka5ik89t0002nybg71upyq4y","_id":"cka5ik8ad000mnybgbw7ljv8i"},{"post_id":"cka5ik89v0003nybgnp0fz37h","category_id":"cka5ik8a5000cnybgbq4hkgi5","_id":"cka5ik8af000rnybg58jxipcl"},{"post_id":"cka5ik8ab000lnybg6dydz7s9","category_id":"cka5ik8a5000cnybgbq4hkgi5","_id":"cka5ik8aj000wnybg9fj992yf"},{"post_id":"cka5ik89x0005nybgbynrweak","category_id":"cka5ik8a5000cnybgbq4hkgi5","_id":"cka5ik8ak000znybgrxbhrh8l"},{"post_id":"cka5ik8ag000snybgbxk339zn","category_id":"cka5ik89t0002nybg71upyq4y","_id":"cka5ik8am0012nybg6k8n4jdh"},{"post_id":"cka5ik8a4000bnybgdyni5jiy","category_id":"cka5ik8af000qnybg2spnmvw1","_id":"cka5ik8an0016nybgsryvo3d4"},{"post_id":"cka5ik8aj000ynybgvr8ese2j","category_id":"cka5ik89t0002nybg71upyq4y","_id":"cka5ik8ap0019nybgivtnuo9q"},{"post_id":"cka5ik8a6000enybg8s9c18gz","category_id":"cka5ik8aj000xnybgr63z78aj","_id":"cka5ik8aq001cnybguvclg1r9"},{"post_id":"cka5ik8an0018nybgidlhxfg2","category_id":"cka5ik89t0002nybg71upyq4y","_id":"cka5ik8at001hnybgpam8rfei"},{"post_id":"cka5ik8a9000hnybgsnkxs6z7","category_id":"cka5ik8am0014nybg1vpi6wrn","_id":"cka5ik8av001lnybgkijljhwc"},{"post_id":"cka5ik8aq001enybgkij23hpk","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8ax001pnybg3tbr8lhg"},{"post_id":"cka5ik8ad000onybgodjt23sj","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8ay001snybg9t9d0ta0"},{"post_id":"cka5ik8as001gnybgbwx3s5b1","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8b0001vnybg7fsbr5vw"},{"post_id":"cka5ik8au001knybgi1p95xuj","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8b2001znybgpq3gm0b3"},{"post_id":"cka5ik8ai000vnybgawhtjmrc","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8b30022nybgqavv8x7v"},{"post_id":"cka5ik8aw001onybg4hbt2net","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8b60027nybgq759qwds"},{"post_id":"cka5ik8ax001rnybgr6d1pn3p","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8b70029nybgpzxtpayb"},{"post_id":"cka5ik8al0011nybgpxgfr6o2","category_id":"cka5ik8ax001qnybguoymsjeb","_id":"cka5ik8b8002cnybg6o361zuq"},{"post_id":"cka5ik8az001unybghsrgxymz","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8b9002fnybgsfln73y3"},{"post_id":"cka5ik8b1001ynybgkzjdhth7","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8bb002inybgydoc9tnz"},{"post_id":"cka5ik8am0015nybg8sjkdyps","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8bf002mnybgwf7gnkhu"},{"post_id":"cka5ik8b30021nybgb8ujo2gj","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8bg002qnybgd88z6q7j"},{"post_id":"cka5ik8b50026nybgzwcav7gn","category_id":"cka5ik8am0014nybg1vpi6wrn","_id":"cka5ik8bi002snybgi7e37ufp"},{"post_id":"cka5ik8ap001bnybgftprgmg2","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8bk002unybg1jktvbzx"},{"post_id":"cka5ik8b7002bnybg0v59l6xd","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8bl002xnybg2gmx8tb6"},{"post_id":"cka5ik8ba002hnybgca12ps2c","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8bm002znybgolikg83b"},{"post_id":"cka5ik8b60028nybgu6ri4nap","category_id":"cka5ik8b8002dnybgjefglh35","_id":"cka5ik8bn0032nybgqqgo6o3c"},{"post_id":"cka5ik8bf002knybgfgd1o64m","category_id":"cka5ik89t0002nybg71upyq4y","_id":"cka5ik8bo0035nybg6na1ww0i"},{"post_id":"cka5ik8bg002pnybgmfqn1t7q","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8bp0039nybgwz5g8ele"},{"post_id":"cka5ik8b8002enybg7daxsc6s","category_id":"cka5ik8bf002lnybg5lg8lumm","_id":"cka5ik8bq003cnybgt2fait3i"},{"post_id":"cka5ik8bh002rnybgl2ojz3xi","category_id":"cka5ik8bf002lnybg5lg8lumm","_id":"cka5ik8bs003fnybgoe3yi7zl"},{"post_id":"cka5ik8bj002tnybglw3ukyzm","category_id":"cka5ik8b8002dnybgjefglh35","_id":"cka5ik8bt003inybgantytg5g"},{"post_id":"cka5ik8bk002wnybg0aikv8c7","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8bu003lnybg69babgqm"},{"post_id":"cka5ik8bl002ynybga146zs7y","category_id":"cka5ik8bf002lnybg5lg8lumm","_id":"cka5ik8bv003onybg1wf761i6"},{"post_id":"cka5ik8bm0031nybgrsp8k1vk","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8bx003qnybg3kh5idnf"},{"post_id":"cka5ik8bn0034nybgl1g9cae5","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8bz003unybgndt3pifs"},{"post_id":"cka5ik8bo0038nybgkwq32c66","category_id":"cka5ik8b8002dnybgjefglh35","_id":"cka5ik8bz003wnybgv7ftrf1f"},{"post_id":"cka5ik8bp003bnybguuq88ob1","category_id":"cka5ik8b8002dnybgjefglh35","_id":"cka5ik8c0003znybg56n9thup"},{"post_id":"cka5ik8br003enybg1tgjrue8","category_id":"cka5ik8b8002dnybgjefglh35","_id":"cka5ik8c20041nybgdv6x7pn0"},{"post_id":"cka5ik8bs003hnybgvi8nv6bl","category_id":"cka5ik8b8002dnybgjefglh35","_id":"cka5ik8c30044nybg3v5hevt0"},{"post_id":"cka5ik8bt003knybg7ohss4vh","category_id":"cka5ik8b8002dnybgjefglh35","_id":"cka5ik8c50046nybgjsf2sdfp"},{"post_id":"cka5ik8bw003pnybg54r3loa3","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8c60048nybgls8y5p2j"},{"post_id":"cka5ik8by003tnybg893n3faj","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8c7004cnybgh1xy7amo"},{"post_id":"cka5ik8bz003vnybg5i61f6as","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8c8004fnybgq0isgrnw"},{"post_id":"cka5ik8bv003nnybg5c0xrjqe","category_id":"cka5ik8by003snybg55mu3qzz","_id":"cka5ik8c9004jnybgfs4mzcoi"},{"post_id":"cka5ik8c0003ynybgs6fo9lit","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8ca004mnybgk6rz0gek"},{"post_id":"cka5ik8c10040nybgch0tfnj3","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8cc004qnybguezsfbg4"},{"post_id":"cka5ik8c20043nybghlgvqg9g","category_id":"cka5ik89t0002nybg71upyq4y","_id":"cka5ik8cd004snybgxp5ohkso"},{"post_id":"cka5ik8c40045nybg2914m57d","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8cf004vnybg06g1r3qe"},{"post_id":"cka5ik8c50047nybgjtlfble2","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8cg004ynybg5xzjsryk"},{"post_id":"cka5ik8c7004bnybgvnvzd9bf","category_id":"cka5ik89t0002nybg71upyq4y","_id":"cka5ik8ch0051nybg8pl3h6np"},{"post_id":"cka5ik8c8004enybgiggqbb24","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8ci0055nybgx078ta1y"},{"post_id":"cka5ik8c9004inybguswulyba","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8cj0058nybgxddz29kc"},{"post_id":"cka5ik8ca004lnybg41fzr9xc","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8ck005bnybgkgsk0mqe"},{"post_id":"cka5ik8cb004pnybgdp1svkot","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8cl005dnybgi6d5wivf"},{"post_id":"cka5ik8cc004rnybgxagczzij","category_id":"cka5ik8by003snybg55mu3qzz","_id":"cka5ik8cm005gnybglbi1d413"},{"post_id":"cka5ik8ce004unybgmv3ub7mb","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8cn005inybgz62cr6d7"},{"post_id":"cka5ik8cf004xnybgmarfoqbm","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8co005lnybgh2a9x104"},{"post_id":"cka5ik8cg0050nybg8wtnurb9","category_id":"cka5ik89t0002nybg71upyq4y","_id":"cka5ik8cp005onybgmf0xs7u4"},{"post_id":"cka5ik8ch0054nybgfbtie8rf","category_id":"cka5ik8by003snybg55mu3qzz","_id":"cka5ik8cq005rnybgg3q09xox"},{"post_id":"cka5ik8ci0057nybgad0ds4h4","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8cs005vnybgv9qdj7ak"},{"post_id":"cka5ik8cj005anybg5xonck7v","category_id":"cka5ik8am0014nybg1vpi6wrn","_id":"cka5ik8ct005xnybgoo7om2y7"},{"post_id":"cka5ik8ck005cnybgmzsrvriv","category_id":"cka5ik8bf002lnybg5lg8lumm","_id":"cka5ik8cu0060nybguyubdm9v"},{"post_id":"cka5ik8cl005fnybgsw1h6u98","category_id":"cka5ik8b8002dnybgjefglh35","_id":"cka5ik8cv0063nybgt53mzn7c"},{"post_id":"cka5ik8cm005hnybgf01tf91v","category_id":"cka5ik8b8002dnybgjefglh35","_id":"cka5ik8cx0067nybg83d2sruy"},{"post_id":"cka5ik8cn005knybg6smz28s1","category_id":"cka5ik8ax001qnybguoymsjeb","_id":"cka5ik8cy006anybg408i1g2z"},{"post_id":"cka5ik8co005nnybg27tc77t6","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8d0006dnybgybbl5xi3"},{"post_id":"cka5ik8cp005qnybgkox9r83e","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8d1006gnybg7byv5pli"},{"post_id":"cka5ik8cr005unybgqwsfmobt","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8d2006jnybg9lxsv2j0"},{"post_id":"cka5ik8cs005wnybgmy770rhn","category_id":"cka5ik8am0014nybg1vpi6wrn","_id":"cka5ik8d3006mnybgt5bnch45"},{"post_id":"cka5ik8ct005znybg42u2scj0","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8d6006pnybgs660qpwu"},{"post_id":"cka5ik8cv0062nybg3fenm5e4","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8d8006snybgy3xtckyt"},{"post_id":"cka5ik8cw0066nybgut5i5u07","category_id":"cka5ik8bf002lnybg5lg8lumm","_id":"cka5ik8db006vnybgsqvtcen2"},{"post_id":"cka5ik8cx0069nybgq3o8j33p","category_id":"cka5ik8am0014nybg1vpi6wrn","_id":"cka5ik8dd006ynybgo2zrr3xc"},{"post_id":"cka5ik8cz006cnybg9uo4xu29","category_id":"cka5ik8b8002dnybgjefglh35","_id":"cka5ik8de0071nybg2bkrmc7z"},{"post_id":"cka5ik8d0006fnybgqwn8bhk0","category_id":"cka5ik8b8002dnybgjefglh35","_id":"cka5ik8dh0075nybg95ctu5kf"},{"post_id":"cka5ik8d2006inybg8aj1u5xf","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8dl0079nybgln4vysni"},{"post_id":"cka5ik8d3006lnybg1u9itczr","category_id":"cka5ik89t0002nybg71upyq4y","_id":"cka5ik8dm007bnybghfx60l2c"},{"post_id":"cka5ik8d4006onybgs52ovu5z","category_id":"cka5ik8bf002lnybg5lg8lumm","_id":"cka5ik8dn007dnybgkts50q9v"},{"post_id":"cka5ik8dc006xnybg0kdxs06n","category_id":"cka5ik8ax001qnybguoymsjeb","_id":"cka5ik8dp007gnybgweusm57b"},{"post_id":"cka5ik8dd0070nybgszfci48y","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8dq007inybgqhpz7ckf"},{"post_id":"cka5ik8d7006rnybg0a06rqpr","category_id":"cka5ik8dc006wnybgo3wcgkbm","_id":"cka5ik8ds007lnybgnfo4tsaz"},{"post_id":"cka5ik8df0073nybgrkf2fy47","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8dt007nnybgeaxxo304"},{"post_id":"cka5ik8di0078nybgfv41gov1","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8dv007qnybg4fsix4ve"},{"post_id":"cka5ik8d9006unybgs2tbyklq","category_id":"cka5ik8dc006wnybgo3wcgkbm","_id":"cka5ik8dx007tnybg3ilr96m8"},{"post_id":"cka5ik8dl007anybg4iawevpm","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8dy007xnybglr5r6b1o"},{"post_id":"cka5ik8dm007cnybglga31bvt","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8dz0080nybgp4nvwkbu"},{"post_id":"cka5ik8do007fnybg2f0toeah","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8e00083nybgdkxof7so"},{"post_id":"cka5ik8dq007hnybgky469and","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8e10086nybg7vz8lim6"},{"post_id":"cka5ik8dr007knybgxc112e48","category_id":"cka5ik8ax001qnybguoymsjeb","_id":"cka5ik8e30088nybgmxfo4u6m"},{"post_id":"cka5ik8dt007mnybgmekibvn9","category_id":"cka5ik8ax001qnybguoymsjeb","_id":"cka5ik8e5008bnybgtt68b231"},{"post_id":"cka5ik8du007pnybgswvkv1ll","category_id":"cka5ik89t0002nybg71upyq4y","_id":"cka5ik8e6008enybg1eq5mj3t"},{"post_id":"cka5ik8dw007snybggnj5jwac","category_id":"cka5ik8ax001qnybguoymsjeb","_id":"cka5ik8e7008inybgai3p3fb9"},{"post_id":"cka5ik8dx007wnybgi6706ir9","category_id":"cka5ik89t0002nybg71upyq4y","_id":"cka5ik8e9008lnybg3idu8qhk"},{"post_id":"cka5ik8dy007znybgmqhma2oq","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8ec008pnybgnzuwxm3i"},{"post_id":"cka5ik8dz0082nybguuf9a8b1","category_id":"cka5ik8by003snybg55mu3qzz","_id":"cka5ik8ed008snybgugp4hc37"},{"post_id":"cka5ik8e10085nybg8tmzruny","category_id":"cka5ik8by003snybg55mu3qzz","_id":"cka5ik8ee008tnybg4wk183at"},{"post_id":"cka5ik8e20087nybg6fqavlk5","category_id":"cka5ik8by003snybg55mu3qzz","_id":"cka5ik8eg008wnybgykhs24z6"},{"post_id":"cka5ik8e3008anybg1uzkz54u","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"cka5ik8eg008xnybgzwqzql20"},{"post_id":"cka5ik8e5008dnybgud7rg0ky","category_id":"cka5ik8bf002lnybg5lg8lumm","_id":"cka5ik8eh008znybgt7sxfyzy"},{"post_id":"cka5ik8e6008hnybgfxoibh8b","category_id":"cka5ik8am0014nybg1vpi6wrn","_id":"cka5ik8eh0091nybggancukt1"},{"post_id":"cka5ik8e8008knybgymz2fk6j","category_id":"cka5ik8ax001qnybguoymsjeb","_id":"cka5ik8ei0094nybgutzqxqg4"},{"post_id":"cka5ik8eb008onybggnyiq2mr","category_id":"cka5ik8bf002lnybg5lg8lumm","_id":"cka5ik8ei0095nybgrpavk4yb"},{"post_id":"cka5ik8ec008rnybg1yg71275","category_id":"cka5ik8eg008vnybgm8yqtywx","_id":"cka5ik8ei0097nybg4b68yoay"},{"post_id":"ckajc2g1n00008ybgfg0g80v8","category_id":"cka5ik8b8002dnybgjefglh35","_id":"ckajc2g2500048ybg30ojiqsr"},{"post_id":"ckauk1zlq0000kobgdeso7fv3","category_id":"cka5ik8eg008vnybgm8yqtywx","_id":"ckauk1zm60002kobgboo4gtrl"},{"post_id":"ckauran2w0000jjbg2ay4c7dq","category_id":"cka5ik8bf002lnybg5lg8lumm","_id":"ckauran3q0002jjbg79ltnm5r"},{"post_id":"ckb6idafc000054sasxvqb5ct","category_id":"cka5ik8eg008vnybgm8yqtywx","_id":"ckb6idafw000354samac0eopo"},{"post_id":"ckbndxhk30000q0sa3s0soknc","category_id":"cka5ik8aq001dnybgr8gvxm8r","_id":"ckbndxhkv0002q0sau5dbemrh"},{"post_id":"ckc8sl03c0000kvsaew4yf9pd","category_id":"cka5ik8eg008vnybgm8yqtywx","_id":"ckc8sl0410002kvsaa1lafmxe"}],"PostTag":[{"post_id":"cka5ik89r0001nybgdpq2nrgg","tag_id":"cka5ik89x0004nybg0mmi26xq","_id":"cka5ik8a4000anybgb9bmcp6o"},{"post_id":"cka5ik89v0003nybgnp0fz37h","tag_id":"cka5ik8a30009nybgr2szfb7n","_id":"cka5ik8ab000inybgmuvoz7dp"},{"post_id":"cka5ik89x0005nybgbynrweak","tag_id":"cka5ik8a30009nybgr2szfb7n","_id":"cka5ik8ae000pnybghkwnu62y"},{"post_id":"cka5ik8ab000lnybg6dydz7s9","tag_id":"cka5ik8a30009nybgr2szfb7n","_id":"cka5ik8ah000tnybgokeyl1qq"},{"post_id":"cka5ik89z0006nybgnkekmnl0","tag_id":"cka5ik8ad000nnybgwmkjbe8r","_id":"cka5ik8am0013nybgtep5xe0b"},{"post_id":"cka5ik89z0006nybgnkekmnl0","tag_id":"cka5ik8ah000unybgesk95g0m","_id":"cka5ik8an0017nybgxb6jrv0f"},{"post_id":"cka5ik8a20008nybgaqdo92kg","tag_id":"cka5ik8al0010nybggmxrmc1k","_id":"cka5ik8at001inybgtd4ipfvm"},{"post_id":"cka5ik8a20008nybgaqdo92kg","tag_id":"cka5ik8ap001anybg2cjcpmc5","_id":"cka5ik8av001mnybgmuz8eu6n"},{"post_id":"cka5ik8a4000bnybgdyni5jiy","tag_id":"cka5ik8as001fnybgf9em4wgh","_id":"cka5ik8b0001wnybg0vx55vd5"},{"post_id":"cka5ik8a4000bnybgdyni5jiy","tag_id":"cka5ik8av001nnybgdjo93i77","_id":"cka5ik8b30020nybgdd6xbifb"},{"post_id":"cka5ik8a6000enybg8s9c18gz","tag_id":"cka5ik8az001tnybgv5ukjd57","_id":"cka5ik8b40025nybgbhmcr44b"},{"post_id":"cka5ik8ad000onybgodjt23sj","tag_id":"cka5ik8b30023nybg6vhx6sr8","_id":"cka5ik8be002jnybgws1uaun9"},{"post_id":"cka5ik8ad000onybgodjt23sj","tag_id":"cka5ik8b7002anybg4hdvjfpt","_id":"cka5ik8bg002nnybgqoh2idb8"},{"post_id":"cka5ik8ag000snybgbxk339zn","tag_id":"cka5ik8ba002gnybgw669mz7l","_id":"cka5ik8bn0033nybg7ozjkgoe"},{"post_id":"cka5ik8ag000snybgbxk339zn","tag_id":"cka5ik8bg002onybgodb9etb3","_id":"cka5ik8bo0036nybghym14uv9"},{"post_id":"cka5ik8ag000snybgbxk339zn","tag_id":"cka5ik8bk002vnybg1v1m5ee9","_id":"cka5ik8bp003anybg9pwrkarh"},{"post_id":"cka5ik8ai000vnybgawhtjmrc","tag_id":"cka5ik8bm0030nybgor85bqb9","_id":"cka5ik8bs003gnybgt7b89fcd"},{"post_id":"cka5ik8ai000vnybgawhtjmrc","tag_id":"cka5ik8bo0037nybgaauuqfin","_id":"cka5ik8bt003jnybgst35sy0q"},{"post_id":"cka5ik8aj000ynybgvr8ese2j","tag_id":"cka5ik8br003dnybghvv7s16h","_id":"cka5ik8c6004anybg28d7noqt"},{"post_id":"cka5ik8aj000ynybgvr8ese2j","tag_id":"cka5ik8bu003mnybgpy8n2dq7","_id":"cka5ik8c8004dnybgmn676qlx"},{"post_id":"cka5ik8aj000ynybgvr8ese2j","tag_id":"cka5ik8bx003rnybg0zr1yu1u","_id":"cka5ik8c9004hnybgb2dqpygj"},{"post_id":"cka5ik8aj000ynybgvr8ese2j","tag_id":"cka5ik8c0003xnybg3rsomsli","_id":"cka5ik8ca004knybggb29hzm5"},{"post_id":"cka5ik8aj000ynybgvr8ese2j","tag_id":"cka5ik8c20042nybgy6saceox","_id":"cka5ik8cb004onybgw4mfj2hc"},{"post_id":"cka5ik8al0011nybgpxgfr6o2","tag_id":"cka5ik8c60049nybg7ru9d1fp","_id":"cka5ik8cf004wnybg4141z0dm"},{"post_id":"cka5ik8al0011nybgpxgfr6o2","tag_id":"cka5ik8c9004gnybg1bafvojt","_id":"cka5ik8cg004znybg23oo0eyd"},{"post_id":"cka5ik8al0011nybgpxgfr6o2","tag_id":"cka5ik8ca004nnybgg1bl61d3","_id":"cka5ik8ch0053nybg9plalpmj"},{"post_id":"cka5ik8am0015nybg8sjkdyps","tag_id":"cka5ik8ce004tnybg1icqwr81","_id":"cka5ik8ci0056nybggz7g0bqc"},{"post_id":"cka5ik8an0018nybgidlhxfg2","tag_id":"cka5ik8ch0052nybg232tu8y2","_id":"cka5ik8co005mnybg7d6hioq4"},{"post_id":"cka5ik8an0018nybgidlhxfg2","tag_id":"cka5ik8cj0059nybg7x4yljg4","_id":"cka5ik8cp005pnybgvass1n52"},{"post_id":"cka5ik8an0018nybgidlhxfg2","tag_id":"cka5ik8cl005enybghmzirabn","_id":"cka5ik8cr005tnybgzs4u7yn2"},{"post_id":"cka5ik8ap001bnybgftprgmg2","tag_id":"cka5ik8cn005jnybgc8vv2qs0","_id":"cka5ik8cu0061nybgconvx8jv"},{"post_id":"cka5ik8ap001bnybgftprgmg2","tag_id":"cka5ik8cq005snybg24loyx98","_id":"cka5ik8cv0064nybgzu69f4vl"},{"post_id":"cka5ik8aq001enybgkij23hpk","tag_id":"cka5ik8ce004tnybg1icqwr81","_id":"cka5ik8cx0068nybg1iafg6qf"},{"post_id":"cka5ik8as001gnybgbwx3s5b1","tag_id":"cka5ik8ce004tnybg1icqwr81","_id":"cka5ik8d0006enybgw4c5htqm"},{"post_id":"cka5ik8au001knybgi1p95xuj","tag_id":"cka5ik8bm0030nybgor85bqb9","_id":"cka5ik8d2006knybgiebspjc3"},{"post_id":"cka5ik8aw001onybg4hbt2net","tag_id":"cka5ik8ce004tnybg1icqwr81","_id":"cka5ik8d6006qnybg65stqhtt"},{"post_id":"cka5ik8ax001rnybgr6d1pn3p","tag_id":"cka5ik8d4006nnybg71tojtlo","_id":"cka5ik8df0072nybg77a0ozw8"},{"post_id":"cka5ik8ax001rnybgr6d1pn3p","tag_id":"cka5ik8d8006tnybgz2w8vcps","_id":"cka5ik8di0076nybgo0yacj15"},{"post_id":"cka5ik8az001unybghsrgxymz","tag_id":"cka5ik8d4006nnybg71tojtlo","_id":"cka5ik8dw007rnybgfzzruw0i"},{"post_id":"cka5ik8az001unybghsrgxymz","tag_id":"cka5ik8di0077nybg3ls52oc5","_id":"cka5ik8dx007unybgn4y826ug"},{"post_id":"cka5ik8az001unybghsrgxymz","tag_id":"cka5ik8dn007enybgv301aei7","_id":"cka5ik8dy007ynybg9668s814"},{"post_id":"cka5ik8az001unybghsrgxymz","tag_id":"cka5ik8dr007jnybg3ld4tqzq","_id":"cka5ik8dz0081nybgh89jaixn"},{"post_id":"cka5ik8b1001ynybgkzjdhth7","tag_id":"cka5ik8du007onybg5kz9szmq","_id":"cka5ik8e5008cnybgcnu3m759"},{"post_id":"cka5ik8b1001ynybgkzjdhth7","tag_id":"cka5ik8dx007vnybgc5hcxll1","_id":"cka5ik8e6008fnybg4hsk9cdz"},{"post_id":"cka5ik8b1001ynybgkzjdhth7","tag_id":"cka5ik8e00084nybgd4mv618z","_id":"cka5ik8e7008jnybgtcrwnqwm"},{"post_id":"cka5ik8b30021nybgb8ujo2gj","tag_id":"cka5ik8e30089nybgm7szwdza","_id":"cka5ik8e9008mnybgq19yczww"},{"post_id":"cka5ik8b50026nybgzwcav7gn","tag_id":"cka5ik8e6008gnybg61axpdv5","_id":"cka5ik8ec008qnybgdkgggub6"},{"post_id":"cka5ik8b60028nybgu6ri4nap","tag_id":"cka5ik8ea008nnybg1ceucz5o","_id":"cka5ik8eh0090nybgqi8mzucz"},{"post_id":"cka5ik8b60028nybgu6ri4nap","tag_id":"cka5ik8ee008unybg9d6i5l0v","_id":"cka5ik8eh0092nybgz17y67ie"},{"post_id":"cka5ik8b7002bnybg0v59l6xd","tag_id":"cka5ik8b30023nybg6vhx6sr8","_id":"cka5ik8ej0098nybgnsmatdg0"},{"post_id":"cka5ik8b7002bnybg0v59l6xd","tag_id":"cka5ik8eg008ynybgf8p0yp2d","_id":"cka5ik8ej0099nybgwdvsi1g0"},{"post_id":"cka5ik8b7002bnybg0v59l6xd","tag_id":"cka5ik8ei0093nybgoba4i9vz","_id":"cka5ik8ej009bnybgnaxfc5sb"},{"post_id":"cka5ik8b8002enybg7daxsc6s","tag_id":"cka5ik8ei0096nybgbty0afe4","_id":"cka5ik8ek009enybgtin35eel"},{"post_id":"cka5ik8b8002enybg7daxsc6s","tag_id":"cka5ik8ej009anybg1vvts0pt","_id":"cka5ik8ek009fnybgcqyz23zf"},{"post_id":"cka5ik8b8002enybg7daxsc6s","tag_id":"cka5ik8ej009cnybgkid5l9d9","_id":"cka5ik8ek009hnybg1py7leef"},{"post_id":"cka5ik8ba002hnybgca12ps2c","tag_id":"cka5ik8ek009dnybg8d0jzlpt","_id":"cka5ik8ek009inybgomsmhrop"},{"post_id":"cka5ik8bf002knybgfgd1o64m","tag_id":"cka5ik8ek009gnybgw3vogga3","_id":"cka5ik8el009lnybg6xk4dqz5"},{"post_id":"cka5ik8bf002knybgfgd1o64m","tag_id":"cka5ik8ek009jnybgsyqditje","_id":"cka5ik8el009mnybgt13xax62"},{"post_id":"cka5ik8bg002pnybgmfqn1t7q","tag_id":"cka5ik8el009knybg2uh0upih","_id":"cka5ik8em009pnybgjb3yvjcc"},{"post_id":"cka5ik8bg002pnybgmfqn1t7q","tag_id":"cka5ik8el009nnybg1lq5horq","_id":"cka5ik8em009qnybg5srs92a2"},{"post_id":"cka5ik8bh002rnybgl2ojz3xi","tag_id":"cka5ik8el009onybghucvn2sv","_id":"cka5ik8em009unybg06su1ala"},{"post_id":"cka5ik8bh002rnybgl2ojz3xi","tag_id":"cka5ik8em009rnybgqhwiwh89","_id":"cka5ik8em009vnybgf1qg8a7v"},{"post_id":"cka5ik8bh002rnybgl2ojz3xi","tag_id":"cka5ik8em009snybgrfatihrn","_id":"cka5ik8en009xnybgjqhjs042"},{"post_id":"cka5ik8bj002tnybglw3ukyzm","tag_id":"cka5ik8em009tnybgokqiyicm","_id":"cka5ik8en009ynybg0h3t0pu8"},{"post_id":"cka5ik8bk002wnybg0aikv8c7","tag_id":"cka5ik8em009wnybgqwoxfyqa","_id":"cka5ik8en00a1nybglksiz3mq"},{"post_id":"cka5ik8bk002wnybg0aikv8c7","tag_id":"cka5ik8en009znybg8sraw0ki","_id":"cka5ik8en00a2nybgfd5n6xln"},{"post_id":"cka5ik8bl002ynybga146zs7y","tag_id":"cka5ik8en00a0nybglqi4veok","_id":"cka5ik8ep00a5nybg1z24veti"},{"post_id":"cka5ik8bl002ynybga146zs7y","tag_id":"cka5ik8du007onybg5kz9szmq","_id":"cka5ik8ep00a6nybgxx7yauj0"},{"post_id":"cka5ik8bm0031nybgrsp8k1vk","tag_id":"cka5ik8ce004tnybg1icqwr81","_id":"cka5ik8eq00aanybg5agsesst"},{"post_id":"cka5ik8bm0031nybgrsp8k1vk","tag_id":"cka5ik8ep00a7nybglg2sclky","_id":"cka5ik8eq00abnybgamc1wyl4"},{"post_id":"cka5ik8bm0031nybgrsp8k1vk","tag_id":"cka5ik8ep00a8nybgr7tqoo60","_id":"cka5ik8eq00adnybgxuinj5e5"},{"post_id":"cka5ik8bn0034nybgl1g9cae5","tag_id":"cka5ik8d4006nnybg71tojtlo","_id":"cka5ik8er00afnybgr957gg8x"},{"post_id":"cka5ik8bn0034nybgl1g9cae5","tag_id":"cka5ik8eq00acnybgdj1poikv","_id":"cka5ik8er00agnybgo21wnk8f"},{"post_id":"cka5ik8bo0038nybgkwq32c66","tag_id":"cka5ik8eq00aenybgacq9s6os","_id":"cka5ik8er00ainybgx5zi7dk9"},{"post_id":"cka5ik8bp003bnybguuq88ob1","tag_id":"cka5ik8eq00aenybgacq9s6os","_id":"cka5ik8es00aknybgxwtoak5h"},{"post_id":"cka5ik8br003enybg1tgjrue8","tag_id":"cka5ik8eq00aenybgacq9s6os","_id":"cka5ik8es00amnybgwob5wdmv"},{"post_id":"cka5ik8bs003hnybgvi8nv6bl","tag_id":"cka5ik8eq00aenybgacq9s6os","_id":"cka5ik8et00aonybgmt6lshr1"},{"post_id":"cka5ik8bt003knybg7ohss4vh","tag_id":"cka5ik8eq00aenybgacq9s6os","_id":"cka5ik8et00aqnybgg4ypc1r9"},{"post_id":"cka5ik8bv003nnybg5c0xrjqe","tag_id":"cka5ik8et00apnybgdez948qm","_id":"cka5ik8eu00atnybg4hqkhuyc"},{"post_id":"cka5ik8bv003nnybg5c0xrjqe","tag_id":"cka5ik8et00arnybgawci5enr","_id":"cka5ik8eu00aunybgcnmr4mw8"},{"post_id":"cka5ik8bw003pnybg54r3loa3","tag_id":"cka5ik8et00asnybglnfa7ckv","_id":"cka5ik8eu00awnybg70rzewmw"},{"post_id":"cka5ik8by003tnybg893n3faj","tag_id":"cka5ik8eu00avnybga8yxw7i2","_id":"cka5ik8ev00aznybg6ahw2c82"},{"post_id":"cka5ik8by003tnybg893n3faj","tag_id":"cka5ik8eu00axnybgnrs4ngvi","_id":"cka5ik8ev00b0nybgk9fup5be"},{"post_id":"cka5ik8bz003vnybg5i61f6as","tag_id":"cka5ik8b30023nybg6vhx6sr8","_id":"cka5ik8ew00b3nybg7rng1vc0"},{"post_id":"cka5ik8bz003vnybg5i61f6as","tag_id":"cka5ik8ev00aynybgmfzuo74t","_id":"cka5ik8ew00b4nybgnhwromul"},{"post_id":"cka5ik8bz003vnybg5i61f6as","tag_id":"cka5ik8ev00b1nybg3rjegy5m","_id":"cka5ik8ex00b6nybgajv22j1x"},{"post_id":"cka5ik8c0003ynybgs6fo9lit","tag_id":"cka5ik8d4006nnybg71tojtlo","_id":"cka5ik8ex00b9nybgt0k35l6w"},{"post_id":"cka5ik8c0003ynybgs6fo9lit","tag_id":"cka5ik8ew00b5nybg383b9mq5","_id":"cka5ik8ex00banybgve0mh06g"},{"post_id":"cka5ik8c0003ynybgs6fo9lit","tag_id":"cka5ik8ex00b7nybg3x9kj8hj","_id":"cka5ik8ey00bcnybg4l1giadr"},{"post_id":"cka5ik8c10040nybgch0tfnj3","tag_id":"cka5ik8d4006nnybg71tojtlo","_id":"cka5ik8ey00bfnybgszjk2qec"},{"post_id":"cka5ik8c10040nybgch0tfnj3","tag_id":"cka5ik8ex00bbnybg18gb327o","_id":"cka5ik8ey00bgnybgkycdkuwj"},{"post_id":"cka5ik8c10040nybgch0tfnj3","tag_id":"cka5ik8ey00bdnybglhksyrcq","_id":"cka5ik8ez00binybgqmz6o92w"},{"post_id":"cka5ik8c20043nybghlgvqg9g","tag_id":"cka5ik8el009onybghucvn2sv","_id":"cka5ik8ez00bjnybgdd56g0tl"},{"post_id":"cka5ik8c40045nybg2914m57d","tag_id":"cka5ik8ce004tnybg1icqwr81","_id":"cka5ik8f000bonybgvf6t4yl1"},{"post_id":"cka5ik8c40045nybg2914m57d","tag_id":"cka5ik8ez00bknybg9uzyd5ca","_id":"cka5ik8f000bpnybg2of7njl5"},{"post_id":"cka5ik8c40045nybg2914m57d","tag_id":"cka5ik8f000blnybgxrzdrrji","_id":"cka5ik8f100brnybgy6krz0qp"},{"post_id":"cka5ik8c40045nybg2914m57d","tag_id":"cka5ik8f000bmnybgnwv4g8kd","_id":"cka5ik8f100bsnybgijqqw6os"},{"post_id":"cka5ik8c50047nybgjtlfble2","tag_id":"cka5ik8f000bnnybg312mvlk9","_id":"cka5ik8f100bunybgxq0ufxrk"},{"post_id":"cka5ik8c8004enybgiggqbb24","tag_id":"cka5ik8f000bnnybg312mvlk9","_id":"cka5ik8f200bynybgg6onxtww"},{"post_id":"cka5ik8c8004enybgiggqbb24","tag_id":"cka5ik8f100btnybgfaqi6fvl","_id":"cka5ik8f200bznybgtx055ik1"},{"post_id":"cka5ik8c8004enybgiggqbb24","tag_id":"cka5ik8f100bvnybg48p36tw8","_id":"cka5ik8f300c1nybg73yiyt8i"},{"post_id":"cka5ik8c8004enybgiggqbb24","tag_id":"cka5ik8f100bwnybguqmxgpe8","_id":"cka5ik8f400c2nybg6u3lluj0"},{"post_id":"cka5ik8c9004inybguswulyba","tag_id":"cka5ik8f200bxnybgz6w56o11","_id":"cka5ik8f400c4nybg0c3v575a"},{"post_id":"cka5ik8ca004lnybg41fzr9xc","tag_id":"cka5ik8f000bnnybg312mvlk9","_id":"cka5ik8f500c6nybggzs8c1ox"},{"post_id":"cka5ik8ca004lnybg41fzr9xc","tag_id":"cka5ik8f400c3nybg0p782oq3","_id":"cka5ik8f500c7nybgg8g0vcw7"},{"post_id":"cka5ik8cb004pnybgdp1svkot","tag_id":"cka5ik8f500c5nybgeit1a9cp","_id":"cka5ik8f700cbnybg3e8fut1l"},{"post_id":"cka5ik8cb004pnybgdp1svkot","tag_id":"cka5ik8f500c8nybgnw59igs3","_id":"cka5ik8f700ccnybgek11s93m"},{"post_id":"cka5ik8cb004pnybgdp1svkot","tag_id":"cka5ik8f600c9nybgqivisowa","_id":"cka5ik8f700cenybgm8zumbmt"},{"post_id":"cka5ik8cc004rnybgxagczzij","tag_id":"cka5ik8f600canybgtkp304za","_id":"cka5ik8f700cgnybgimonl0k7"},{"post_id":"cka5ik8cc004rnybgxagczzij","tag_id":"cka5ik8f700cdnybgclnee7i1","_id":"cka5ik8f800chnybgk28qbzs8"},{"post_id":"cka5ik8ce004unybgmv3ub7mb","tag_id":"cka5ik8f700cfnybgo3bgcjtd","_id":"cka5ik8fa00cmnybgchcbjxz3"},{"post_id":"cka5ik8ce004unybgmv3ub7mb","tag_id":"cka5ik8f600c9nybgqivisowa","_id":"cka5ik8fa00cnnybgc6mny9hi"},{"post_id":"cka5ik8ce004unybgmv3ub7mb","tag_id":"cka5ik8f500c5nybgeit1a9cp","_id":"cka5ik8fb00cpnybgrkpybjup"},{"post_id":"cka5ik8ce004unybgmv3ub7mb","tag_id":"cka5ik8f500c8nybgnw59igs3","_id":"cka5ik8fb00cqnybgc5vh26w5"},{"post_id":"cka5ik8cf004xnybgmarfoqbm","tag_id":"cka5ik8fa00clnybg7zamsoz8","_id":"cka5ik8fb00csnybg87ks17zn"},{"post_id":"cka5ik8cg0050nybg8wtnurb9","tag_id":"cka5ik8fa00conybggsw6w6j3","_id":"cka5ik8fc00cunybgwms8bm82"},{"post_id":"cka5ik8cg0050nybg8wtnurb9","tag_id":"cka5ik8fb00crnybgmqx8gxqb","_id":"cka5ik8fc00cvnybgyw7zv9g3"},{"post_id":"cka5ik8ch0054nybgfbtie8rf","tag_id":"cka5ik8fb00ctnybgmqi112zp","_id":"cka5ik8ff00cynybgapx0vnlc"},{"post_id":"cka5ik8ch0054nybgfbtie8rf","tag_id":"cka5ik8fc00cwnybg5w25cfnw","_id":"cka5ik8ff00cznybgfg8duovs"},{"post_id":"cka5ik8ci0057nybgad0ds4h4","tag_id":"cka5ik8fa00clnybg7zamsoz8","_id":"cka5ik8fg00d1nybgu8h16b0s"},{"post_id":"cka5ik8cj005anybg5xonck7v","tag_id":"cka5ik8ff00d0nybg4f0c8dwm","_id":"cka5ik8fh00d6nybgi2kay5q6"},{"post_id":"cka5ik8cj005anybg5xonck7v","tag_id":"cka5ik8fg00d2nybghmo4uf02","_id":"cka5ik8fh00d7nybgig0euz00"},{"post_id":"cka5ik8cj005anybg5xonck7v","tag_id":"cka5ik8fg00d3nybg7stot6k3","_id":"cka5ik8fi00d9nybgblqqlguu"},{"post_id":"cka5ik8cj005anybg5xonck7v","tag_id":"cka5ik8fg00d4nybg7itx31ku","_id":"cka5ik8fi00danybg5hnn90u3"},{"post_id":"cka5ik8ck005cnybgmzsrvriv","tag_id":"cka5ik8fh00d5nybgmrj9hb61","_id":"cka5ik8fj00denybgohvzuyoa"},{"post_id":"cka5ik8ck005cnybgmzsrvriv","tag_id":"cka5ik8el009onybghucvn2sv","_id":"cka5ik8fj00dfnybgmht6a0b8"},{"post_id":"cka5ik8ck005cnybgmzsrvriv","tag_id":"cka5ik8fi00dbnybg6b3j3tes","_id":"cka5ik8fk00dhnybgzfpydxg8"},{"post_id":"cka5ik8ck005cnybgmzsrvriv","tag_id":"cka5ik8fi00dcnybg8qdj02pe","_id":"cka5ik8fk00dinybgzzm4duzp"},{"post_id":"cka5ik8cl005fnybgsw1h6u98","tag_id":"cka5ik8fj00ddnybgdqt4a2e0","_id":"cka5ik8fk00dknybg4nelgvoj"},{"post_id":"cka5ik8cm005hnybgf01tf91v","tag_id":"cka5ik8em009tnybgokqiyicm","_id":"cka5ik8fk00dlnybgpibff3af"},{"post_id":"cka5ik8cn005knybg6smz28s1","tag_id":"cka5ik8fk00djnybgybdsykya","_id":"cka5ik8fl00donybgie1rpy0t"},{"post_id":"cka5ik8cn005knybg6smz28s1","tag_id":"cka5ik8fk00dmnybg18wnbev3","_id":"cka5ik8fl00dpnybgv2ytavh4"},{"post_id":"cka5ik8co005nnybg27tc77t6","tag_id":"cka5ik8ce004tnybg1icqwr81","_id":"cka5ik8fm00dsnybg8z3n729b"},{"post_id":"cka5ik8co005nnybg27tc77t6","tag_id":"cka5ik8fl00dnnybgsv0j04o2","_id":"cka5ik8fn00dtnybg53xi1r72"},{"post_id":"cka5ik8co005nnybg27tc77t6","tag_id":"cka5ik8el009knybg2uh0upih","_id":"cka5ik8fn00dvnybghvwk3j2q"},{"post_id":"cka5ik8cp005qnybgkox9r83e","tag_id":"cka5ik8fm00drnybg4u4ldvn2","_id":"cka5ik8fo00dznybgnty009in"},{"post_id":"cka5ik8cp005qnybgkox9r83e","tag_id":"cka5ik8fn00dunybggt5qotr8","_id":"cka5ik8fp00e0nybgbro1vsj9"},{"post_id":"cka5ik8cp005qnybgkox9r83e","tag_id":"cka5ik8fn00dwnybgzbed95ko","_id":"cka5ik8fp00e2nybg4b9lodxb"},{"post_id":"cka5ik8cp005qnybgkox9r83e","tag_id":"cka5ik8fo00dxnybg2svxmbr7","_id":"cka5ik8fq00e3nybg17nhgg8b"},{"post_id":"cka5ik8cr005unybgqwsfmobt","tag_id":"cka5ik8fo00dynybgg334ejp1","_id":"cka5ik8fq00e5nybg7hev4xxz"},{"post_id":"cka5ik8cs005wnybgmy770rhn","tag_id":"cka5ik8fp00e1nybgcr64b2nk","_id":"cka5ik8fs00eanybgpm45i9sv"},{"post_id":"cka5ik8cs005wnybgmy770rhn","tag_id":"cka5ik8fq00e4nybg4p0327dm","_id":"cka5ik8fs00ebnybge9w5rft5"},{"post_id":"cka5ik8cs005wnybgmy770rhn","tag_id":"cka5ik8fq00e6nybgcchbwti8","_id":"cka5ik8fs00ednybgqbd7fmhs"},{"post_id":"cka5ik8cs005wnybgmy770rhn","tag_id":"cka5ik8fr00e7nybgep1b0ms7","_id":"cka5ik8ft00eenybgfl8agfi0"},{"post_id":"cka5ik8cs005wnybgmy770rhn","tag_id":"cka5ik8et00arnybgawci5enr","_id":"cka5ik8ft00egnybgwj7habqk"},{"post_id":"cka5ik8ct005znybg42u2scj0","tag_id":"cka5ik8dr007jnybg3ld4tqzq","_id":"cka5ik8ft00ehnybgb0a0uo85"},{"post_id":"cka5ik8cv0062nybg3fenm5e4","tag_id":"cka5ik8fs00ecnybgpgxydc9h","_id":"cka5ik8fu00ejnybgdaxbxsee"},{"post_id":"cka5ik8cv0062nybg3fenm5e4","tag_id":"cka5ik8ft00efnybgusgj64y9","_id":"cka5ik8fu00eknybgiw7vy7cu"},{"post_id":"cka5ik8cw0066nybgut5i5u07","tag_id":"cka5ik8ft00einybgzxlm1yn5","_id":"cka5ik8fu00ennybg6fo8aqco"},{"post_id":"cka5ik8cw0066nybgut5i5u07","tag_id":"cka5ik8cj0059nybg7x4yljg4","_id":"cka5ik8fu00eonybgnudltuvj"},{"post_id":"cka5ik8cw0066nybgut5i5u07","tag_id":"cka5ik8fu00elnybg1j68rd4n","_id":"cka5ik8fv00eqnybg3twvpvrf"},{"post_id":"cka5ik8cx0069nybgq3o8j33p","tag_id":"cka5ik8fu00emnybgat5726k3","_id":"cka5ik8fv00ernybgfbb75ivi"},{"post_id":"cka5ik8cz006cnybg9uo4xu29","tag_id":"cka5ik8fu00epnybg8jywi3tr","_id":"cka5ik8fx00etnybgkycfqumh"},{"post_id":"cka5ik8d0006fnybgqwn8bhk0","tag_id":"cka5ik8em009tnybgokqiyicm","_id":"cka5ik8fy00evnybgic8atv0v"},{"post_id":"cka5ik8d2006inybg8aj1u5xf","tag_id":"cka5ik8el009knybg2uh0upih","_id":"cka5ik8fy00eynybglxtoywd0"},{"post_id":"cka5ik8d2006inybg8aj1u5xf","tag_id":"cka5ik8fy00ewnybgh1gd6pwr","_id":"cka5ik8fz00eznybgwqjafhhi"},{"post_id":"cka5ik8d3006lnybg1u9itczr","tag_id":"cka5ik8fy00exnybg5xfnbqgr","_id":"cka5ik8fz00f1nybgqy4mwve0"},{"post_id":"cka5ik8d4006onybgs52ovu5z","tag_id":"cka5ik8f400c3nybg0p782oq3","_id":"cka5ik8g000f3nybgx293ro2u"},{"post_id":"cka5ik8dc006xnybg0kdxs06n","tag_id":"cka5ik8fz00f2nybg77o5raf2","_id":"cka5ik8g000f5nybga7rsuqmy"},{"post_id":"cka5ik8dd0070nybgszfci48y","tag_id":"cka5ik8em009wnybgqwoxfyqa","_id":"cka5ik8g100f8nybgueixjsxs"},{"post_id":"cka5ik8dd0070nybgszfci48y","tag_id":"cka5ik8g000f6nybggzuwba0a","_id":"cka5ik8g100f9nybgne5m1506"},{"post_id":"cka5ik8df0073nybgrkf2fy47","tag_id":"cka5ik8el009knybg2uh0upih","_id":"cka5ik8g300fcnybg6baqzeg3"},{"post_id":"cka5ik8df0073nybgrkf2fy47","tag_id":"cka5ik8g100fanybg2u1iyrd1","_id":"cka5ik8g300fdnybgl71cot4d"},{"post_id":"cka5ik8di0078nybgfv41gov1","tag_id":"cka5ik8el009knybg2uh0upih","_id":"cka5ik8g500fgnybgl3eoslz6"},{"post_id":"cka5ik8di0078nybgfv41gov1","tag_id":"cka5ik8g100fanybg2u1iyrd1","_id":"cka5ik8g500fhnybgzrqja4d8"},{"post_id":"cka5ik8dl007anybg4iawevpm","tag_id":"cka5ik8el009knybg2uh0upih","_id":"cka5ik8g700flnybgfpme71uu"},{"post_id":"cka5ik8dl007anybg4iawevpm","tag_id":"cka5ik8g100fanybg2u1iyrd1","_id":"cka5ik8g700fmnybga0thl3z7"},{"post_id":"cka5ik8dl007anybg4iawevpm","tag_id":"cka5ik8g600fjnybgyokztbw6","_id":"cka5ik8g700fonybgrrf1y3fv"},{"post_id":"cka5ik8dm007cnybglga31bvt","tag_id":"cka5ik8em009wnybgqwoxfyqa","_id":"cka5ik8g800fqnybgrb1oww35"},{"post_id":"cka5ik8dm007cnybglga31bvt","tag_id":"cka5ik8g700fnnybg5ldob50s","_id":"cka5ik8g800frnybg9zvv0uj3"},{"post_id":"cka5ik8do007fnybg2f0toeah","tag_id":"cka5ik8el009knybg2uh0upih","_id":"cka5ik8ga00fwnybgq4egy3dz"},{"post_id":"cka5ik8do007fnybg2f0toeah","tag_id":"cka5ik8g000f6nybggzuwba0a","_id":"cka5ik8ga00fxnybgmdbxd57l"},{"post_id":"cka5ik8do007fnybg2f0toeah","tag_id":"cka5ik8g700fnnybg5ldob50s","_id":"cka5ik8ga00fznybgcm9v9v4h"},{"post_id":"cka5ik8do007fnybg2f0toeah","tag_id":"cka5ik8g900funybgv8vsafuv","_id":"cka5ik8ga00g0nybglzjvw957"},{"post_id":"cka5ik8dq007hnybgky469and","tag_id":"cka5ik8el009knybg2uh0upih","_id":"cka5ik8gb00g3nybgd2gchdwy"},{"post_id":"cka5ik8dq007hnybgky469and","tag_id":"cka5ik8g100fanybg2u1iyrd1","_id":"cka5ik8gb00g4nybgpy9006iy"},{"post_id":"cka5ik8dq007hnybgky469and","tag_id":"cka5ik8ga00g1nybgo5fc9vve","_id":"cka5ik8gc00g6nybg2pey8gx9"},{"post_id":"cka5ik8dr007knybgxc112e48","tag_id":"cka5ik8c9004gnybg1bafvojt","_id":"cka5ik8gc00g7nybg5vjsr7hz"},{"post_id":"cka5ik8dr007knybgxc112e48","tag_id":"cka5ik8ca004nnybgg1bl61d3","_id":"cka5ik8gc00g9nybgeej93ahd"},{"post_id":"cka5ik8dr007knybgxc112e48","tag_id":"cka5ik8gb00g2nybgn1jwqicl","_id":"cka5ik8gc00ganybgqsau1bo6"},{"post_id":"cka5ik8dt007mnybgmekibvn9","tag_id":"cka5ik8c9004gnybg1bafvojt","_id":"cka5ik8gd00gcnybgoroa684d"},{"post_id":"cka5ik8dt007mnybgmekibvn9","tag_id":"cka5ik8gb00g5nybguwvtq03m","_id":"cka5ik8gd00gdnybgvs0rqpxb"},{"post_id":"cka5ik8dt007mnybgmekibvn9","tag_id":"cka5ik8gc00g8nybg3sryzg52","_id":"cka5ik8gd00gfnybg1cuo4kmf"},{"post_id":"cka5ik8du007pnybgswvkv1ll","tag_id":"cka5ik8gc00gbnybg35ik1810","_id":"cka5ik8gd00ggnybgdkzkbhlg"},{"post_id":"cka5ik8dw007snybggnj5jwac","tag_id":"cka5ik8gd00genybgzd3y7hg4","_id":"cka5ik8ge00ginybgddrzqlfm"},{"post_id":"cka5ik8dx007wnybgi6706ir9","tag_id":"cka5ik8gc00gbnybg35ik1810","_id":"cka5ik8ge00gknybguindnc5f"},{"post_id":"cka5ik8dy007znybgmqhma2oq","tag_id":"cka5ik8ge00gjnybguurs58ah","_id":"cka5ik8gf00gnnybgwpvq1wwz"},{"post_id":"cka5ik8dy007znybgmqhma2oq","tag_id":"cka5ik8ge00glnybgmucan5o1","_id":"cka5ik8gf00gonybgsi6q3gl6"},{"post_id":"cka5ik8dz0082nybguuf9a8b1","tag_id":"cka5ik8ge00gmnybggutdx192","_id":"cka5ik8gg00grnybgsybeatph"},{"post_id":"cka5ik8dz0082nybguuf9a8b1","tag_id":"cka5ik8gf00gpnybg5q2uddf8","_id":"cka5ik8gg00gsnybgjccckn6l"},{"post_id":"cka5ik8e10085nybg8tmzruny","tag_id":"cka5ik8gf00gqnybg4rmhrzbn","_id":"cka5ik8gg00gvnybgpjfb1oxu"},{"post_id":"cka5ik8e10085nybg8tmzruny","tag_id":"cka5ik8gg00gtnybgkzb3s824","_id":"cka5ik8gg00gwnybgems9271k"},{"post_id":"cka5ik8e20087nybg6fqavlk5","tag_id":"cka5ik8gf00gqnybg4rmhrzbn","_id":"cka5ik8gh00gznybg7pampw63"},{"post_id":"cka5ik8e20087nybg6fqavlk5","tag_id":"cka5ik8gg00gxnybgqxj8odt4","_id":"cka5ik8gh00h0nybgnjv8m9oc"},{"post_id":"cka5ik8e3008anybg1uzkz54u","tag_id":"cka5ik8b30023nybg6vhx6sr8","_id":"cka5ik8gi00h2nybglctw8qfv"},{"post_id":"cka5ik8e3008anybg1uzkz54u","tag_id":"cka5ik8gh00gynybg6161ylgo","_id":"cka5ik8gi00h3nybgilafdhjg"},{"post_id":"cka5ik8e5008dnybgud7rg0ky","tag_id":"cka5ik8gh00h1nybg7p2im72u","_id":"cka5ik8gj00h7nybgtczp5t4s"},{"post_id":"cka5ik8e5008dnybgud7rg0ky","tag_id":"cka5ik8gi00h4nybgymp3xk9x","_id":"cka5ik8gj00h8nybgzei4r2ak"},{"post_id":"cka5ik8e5008dnybgud7rg0ky","tag_id":"cka5ik8gi00h5nybg8wm6htog","_id":"cka5ik8gk00hanybg2mbyxd2p"},{"post_id":"cka5ik8e6008hnybgfxoibh8b","tag_id":"cka5ik8gi00h6nybg7d62gnla","_id":"cka5ik8gk00hdnybgpgdvd2ye"},{"post_id":"cka5ik8e6008hnybgfxoibh8b","tag_id":"cka5ik8gj00h9nybg820tsnor","_id":"cka5ik8gk00henybgi4w3f55z"},{"post_id":"cka5ik8e6008hnybgfxoibh8b","tag_id":"cka5ik8gk00hbnybg6fnnu0f8","_id":"cka5ik8gl00hgnybg1rjc5k33"},{"post_id":"cka5ik8e8008knybgymz2fk6j","tag_id":"cka5ik8gk00hcnybgxb79dy1d","_id":"cka5ik8gp00hhnybgrzqmd6h3"},{"post_id":"cka5ik8eb008onybggnyiq2mr","tag_id":"cka5ik8ej009cnybgkid5l9d9","_id":"cka5ik8gq00hlnybgna2q59i6"},{"post_id":"cka5ik8eb008onybggnyiq2mr","tag_id":"cka5ik8gp00hinybglv63i77h","_id":"cka5ik8gq00hmnybgakasw4as"},{"post_id":"cka5ik8eb008onybggnyiq2mr","tag_id":"cka5ik8gp00hjnybg4zuowze0","_id":"cka5ik8gq00hnnybg89ml68bd"},{"post_id":"cka5ik8ec008rnybg1yg71275","tag_id":"cka5ik8gq00hknybgtszzpcsz","_id":"cka5ik8gq00honybgvcl7fh1f"},{"post_id":"ckajc2g1n00008ybgfg0g80v8","tag_id":"ckajc2g1s00028ybgd5wv4uyn","_id":"ckajc2g2500068ybgol5ldi0s"},{"post_id":"ckauk1zlq0000kobgdeso7fv3","tag_id":"cka5ik8gq00hknybgtszzpcsz","_id":"ckauk1zm50001kobg90ry9haf"},{"post_id":"ckauran2w0000jjbg2ay4c7dq","tag_id":"ckauran310001jjbg39d3tv1q","_id":"ckauran3s0004jjbghvrmb3km"},{"post_id":"ckauran2w0000jjbg2ay4c7dq","tag_id":"ckauran3q0003jjbg6gj52rmk","_id":"ckauran3s0005jjbgulbt04qf"},{"post_id":"ckb6idafc000054sasxvqb5ct","tag_id":"cka5ik8gq00hknybgtszzpcsz","_id":"ckb6idafv000154sajiebf41u"},{"post_id":"ckb6idafc000054sasxvqb5ct","tag_id":"cka5ik8b30023nybg6vhx6sr8","_id":"ckb6idafw000254saplgvgum6"},{"post_id":"ckbndxhk30000q0sa3s0soknc","tag_id":"ckbndxhka0001q0sa4u9yy23k","_id":"ckbndxhkw0003q0sa2fuwzc0s"},{"post_id":"ckbndxhk30000q0sa3s0soknc","tag_id":"cka5ik8b7002anybg4hdvjfpt","_id":"ckbndxhkx0004q0san5hmqkrt"},{"post_id":"ckc8sl03c0000kvsaew4yf9pd","tag_id":"cka5ik8gq00hknybgtszzpcsz","_id":"ckc8sl0430004kvsapu29e8jh"},{"post_id":"ckc8sl03c0000kvsaew4yf9pd","tag_id":"ckc8sl03j0001kvsaaehiz9q2","_id":"ckc8sl0430005kvsav9tj6x90"},{"post_id":"ckc8sl03c0000kvsaew4yf9pd","tag_id":"ckc8sl0420003kvsawgrf1nq6","_id":"ckc8sl0430006kvsa2mdqk2br"}],"Tag":[{"name":"博客","_id":"cka5ik89x0004nybg0mmi26xq"},{"name":"simack","_id":"cka5ik8a30009nybgr2szfb7n"},{"name":"beyond compare","_id":"cka5ik8ad000nnybgwmkjbe8r"},{"name":"bc","_id":"cka5ik8ah000unybgesk95g0m"},{"name":"金士顿","_id":"cka5ik8al0010nybggmxrmc1k"},{"name":"u盘","_id":"cka5ik8ap001anybg2cjcpmc5"},{"name":"计算","_id":"cka5ik8as001fnybgf9em4wgh"},{"name":"数学","_id":"cka5ik8av001nnybgdjo93i77"},{"name":"codewars","_id":"cka5ik8az001tnybgv5ukjd57"},{"name":"node","_id":"cka5ik8b30023nybg6vhx6sr8"},{"name":"npm","_id":"cka5ik8b7002anybg4hdvjfpt"},{"name":"Octocat Figurine","_id":"cka5ik8ba002gnybgw669mz7l"},{"name":"章鱼猫","_id":"cka5ik8bg002onybgodb9etb3"},{"name":"github","_id":"cka5ik8bk002vnybg1v1m5ee9"},{"name":"css","_id":"cka5ik8bm0030nybgor85bqb9"},{"name":"编码","_id":"cka5ik8bo0037nybgaauuqfin"},{"name":"未央猪肉","_id":"cka5ik8br003dnybghvv7s16h"},{"name":"网易","_id":"cka5ik8bu003mnybgpy8n2dq7"},{"name":"严选","_id":"cka5ik8bx003rnybg0zr1yu1u"},{"name":"网易严选","_id":"cka5ik8c0003xnybg3rsomsli"},{"name":"优惠券","_id":"cka5ik8c20042nybgy6saceox"},{"name":"机械键盘","_id":"cka5ik8c60049nybg7ru9d1fp"},{"name":"键盘","_id":"cka5ik8c9004gnybg1bafvojt"},{"name":"ikbc","_id":"cka5ik8ca004nnybgg1bl61d3"},{"name":"webpack","_id":"cka5ik8ce004tnybg1icqwr81"},{"name":"chrome","_id":"cka5ik8ch0052nybg232tu8y2"},{"name":"https","_id":"cka5ik8cj0059nybg7x4yljg4"},{"name":"无法连接","_id":"cka5ik8cl005enybghmzirabn"},{"name":"模板","_id":"cka5ik8cn005jnybgc8vv2qs0"},{"name":"编译","_id":"cka5ik8cq005snybg24loyx98"},{"name":"js","_id":"cka5ik8d4006nnybg71tojtlo"},{"name":"new","_id":"cka5ik8d8006tnybgz2w8vcps"},{"name":"proto","_id":"cka5ik8di0077nybg3ls52oc5"},{"name":"prototype","_id":"cka5ik8dn007enybgv301aei7"},{"name":"constructor","_id":"cka5ik8dr007jnybg3ld4tqzq"},{"name":"jekyll","_id":"cka5ik8du007onybg5kz9szmq"},{"name":"括号","_id":"cka5ik8dx007vnybgc5hcxll1"},{"name":"转义","_id":"cka5ik8e00084nybgd4mv618z"},{"name":"flexible","_id":"cka5ik8e30089nybgm7szwdza"},{"name":"keka","_id":"cka5ik8e6008gnybg61axpdv5"},{"name":"go","_id":"cka5ik8ea008nnybg1ceucz5o"},{"name":"指针","_id":"cka5ik8ee008unybg9d6i5l0v"},{"name":"module","_id":"cka5ik8eg008ynybgf8p0yp2d"},{"name":"require","_id":"cka5ik8ei0093nybgoba4i9vz"},{"name":"MAC","_id":"cka5ik8ei0096nybgbty0afe4"},{"name":"NFTS","_id":"cka5ik8ej009anybg1vvts0pt"},{"name":"U盘","_id":"cka5ik8ej009cnybgkid5l9d9"},{"name":"array","_id":"cka5ik8ek009dnybg8d0jzlpt"},{"name":"恋爱","_id":"cka5ik8ek009gnybgw3vogga3"},{"name":"长辈相处","_id":"cka5ik8ek009jnybgsyqditje"},{"name":"react","_id":"cka5ik8el009knybg2uh0upih"},{"name":"mobx","_id":"cka5ik8el009nnybg1lq5horq"},{"name":"ubuntu","_id":"cka5ik8el009onybghucvn2sv"},{"name":"访客","_id":"cka5ik8em009rnybgqhwiwh89"},{"name":"登录","_id":"cka5ik8em009snybgrfatihrn"},{"name":"git","_id":"cka5ik8em009tnybgokqiyicm"},{"name":"vue","_id":"cka5ik8em009wnybgqwoxfyqa"},{"name":"elementUI","_id":"cka5ik8en009znybg8sraw0ki"},{"name":"ruby","_id":"cka5ik8en00a0nybglqi4veok"},{"name":"uglifyjs","_id":"cka5ik8ep00a7nybglg2sclky"},{"name":"ie8","_id":"cka5ik8ep00a8nybgr7tqoo60"},{"name":"render","_id":"cka5ik8eq00acnybgdj1poikv"},{"name":"Objective-C","_id":"cka5ik8eq00aenybgacq9s6os"},{"name":"App Store","_id":"cka5ik8et00apnybgdez948qm"},{"name":"Pin","_id":"cka5ik8et00arnybgawci5enr"},{"name":"DOM","_id":"cka5ik8et00asnybglnfa7ckv"},{"name":"apache","_id":"cka5ik8eu00avnybga8yxw7i2"},{"name":"htaccess","_id":"cka5ik8eu00axnybgnrs4ngvi"},{"name":"mail","_id":"cka5ik8ev00aynybgmfzuo74t"},{"name":"nodemailer","_id":"cka5ik8ev00b1nybg3rjegy5m"},{"name":"focus","_id":"cka5ik8ew00b5nybg383b9mq5"},{"name":"blur","_id":"cka5ik8ex00b7nybg3x9kj8hj"},{"name":"if","_id":"cka5ik8ex00bbnybg18gb327o"},{"name":"equal","_id":"cka5ik8ey00bdnybglhksyrcq"},{"name":"less","_id":"cka5ik8ez00bknybg9uzyd5ca"},{"name":"OptimizeCssAssetsPlugin","_id":"cka5ik8f000blnybgxrzdrrji"},{"name":"cssnano","_id":"cka5ik8f000bmnybgnwv4g8kd"},{"name":"cdn","_id":"cka5ik8f000bnnybg312mvlk9"},{"name":"对象存储","_id":"cka5ik8f100btnybgfaqi6fvl"},{"name":"COS","_id":"cka5ik8f100bvnybg48p36tw8"},{"name":"OSS","_id":"cka5ik8f100bwnybguqmxgpe8"},{"name":"CustomEvent","_id":"cka5ik8f200bxnybgz6w56o11"},{"name":"blog","_id":"cka5ik8f400c3nybg0p782oq3"},{"name":"jquery","_id":"cka5ik8f500c5nybgeit1a9cp"},{"name":"axios","_id":"cka5ik8f500c8nybgnw59igs3"},{"name":"ajax","_id":"cka5ik8f600c9nybgqivisowa"},{"name":"macOS","_id":"cka5ik8f600canybgtkp304za"},{"name":"重装系统","_id":"cka5ik8f700cdnybgclnee7i1"},{"name":"cross domain","_id":"cka5ik8f700cfnybgo3bgcjtd"},{"name":"扁平化","_id":"cka5ik8fa00clnybg7zamsoz8"},{"name":"蔷薇少女","_id":"cka5ik8fa00conybggsw6w6j3"},{"name":"水银灯","_id":"cka5ik8fb00crnybgmqx8gxqb"},{"name":"adobe","_id":"cka5ik8fb00ctnybgmqi112zp"},{"name":"cc","_id":"cka5ik8fc00cwnybg5w25cfnw"},{"name":"hosts","_id":"cka5ik8ff00d0nybg4f0c8dwm"},{"name":"iHosts","_id":"cka5ik8fg00d2nybghmo4uf02"},{"name":"SwitchHosts","_id":"cka5ik8fg00d3nybg7stot6k3"},{"name":"Hozz","_id":"cka5ik8fg00d4nybg7itx31ku"},{"name":"cloudcone","_id":"cka5ik8fh00d5nybgmrj9hb61"},{"name":"ipv6","_id":"cka5ik8fi00dbnybg6b3j3tes"},{"name":"配置","_id":"cka5ik8fi00dcnybg8qdj02pe"},{"name":"useragent","_id":"cka5ik8fj00ddnybgdqt4a2e0"},{"name":"benq","_id":"cka5ik8fk00djnybgybdsykya"},{"name":"screenbar","_id":"cka5ik8fk00dmnybg18wnbev3"},{"name":"babel","_id":"cka5ik8fl00dnnybgsv0j04o2"},{"name":"ios","_id":"cka5ik8fm00drnybg4u4ldvn2"},{"name":"safari","_id":"cka5ik8fn00dunybggt5qotr8"},{"name":"history","_id":"cka5ik8fn00dwnybgzbed95ko"},{"name":"后退","_id":"cka5ik8fo00dxnybg2svxmbr7"},{"name":"yarn","_id":"cka5ik8fo00dynybgg334ejp1"},{"name":"1Clipboard","_id":"cka5ik8fp00e1nybgcr64b2nk"},{"name":"Clipy","_id":"cka5ik8fq00e4nybg4p0327dm"},{"name":"Paste","_id":"cka5ik8fq00e6nybgcchbwti8"},{"name":"iPaste","_id":"cka5ik8fr00e7nybgep1b0ms7"},{"name":"electron","_id":"cka5ik8fs00ecnybgpgxydc9h"},{"name":"electron-builder","_id":"cka5ik8ft00efnybgusgj64y9"},{"name":"CA","_id":"cka5ik8ft00einybgzxlm1yn5"},{"name":"cert","_id":"cka5ik8fu00elnybg1j68rd4n"},{"name":"office","_id":"cka5ik8fu00emnybgat5726k3"},{"name":"markdown","_id":"cka5ik8fu00epnybg8jywi3tr"},{"name":"hooks","_id":"cka5ik8fy00ewnybgh1gd6pwr"},{"name":"hexo","_id":"cka5ik8fy00exnybg5xfnbqgr"},{"name":"小米手环","_id":"cka5ik8fz00f2nybg77o5raf2"},{"name":"input","_id":"cka5ik8g000f6nybggzuwba0a"},{"name":"redux","_id":"cka5ik8g100fanybg2u1iyrd1"},{"name":"saga","_id":"cka5ik8g600fjnybgyokztbw6"},{"name":"event","_id":"cka5ik8g700fnnybg5ldob50s"},{"name":"composition","_id":"cka5ik8g900funybgv8vsafuv"},{"name":"umi","_id":"cka5ik8ga00g1nybgo5fc9vve"},{"name":"f108","_id":"cka5ik8gb00g2nybgn1jwqicl"},{"name":"GH60","_id":"cka5ik8gb00g5nybguwvtq03m"},{"name":"客制化","_id":"cka5ik8gc00g8nybg3sryzg52"},{"name":"跑跑卡丁车","_id":"cka5ik8gc00gbnybg35ik1810"},{"name":"Apple Watch","_id":"cka5ik8gd00genybgzd3y7hg4"},{"name":"CSS世界","_id":"cka5ik8ge00gjnybguurs58ah"},{"name":"读书","_id":"cka5ik8ge00glnybgmucan5o1"},{"name":"jsbox","_id":"cka5ik8ge00gmnybggutdx192"},{"name":"paste","_id":"cka5ik8gf00gpnybg5q2uddf8"},{"name":"email","_id":"cka5ik8gf00gqnybg4rmhrzbn"},{"name":"域名邮箱","_id":"cka5ik8gg00gtnybgkzb3s824"},{"name":"邮箱","_id":"cka5ik8gg00gxnybgqxj8odt4"},{"name":"nvm","_id":"cka5ik8gh00gynybg6161ylgo"},{"name":"cloudflare","_id":"cka5ik8gh00h1nybg7p2im72u"},{"name":"workers","_id":"cka5ik8gi00h4nybgymp3xk9x"},{"name":"proxy","_id":"cka5ik8gi00h5nybg8wm6htog"},{"name":"iStat Menus","_id":"cka5ik8gi00h6nybg7d62gnla"},{"name":"Itsycal","_id":"cka5ik8gj00h9nybg820tsnor"},{"name":"BitBar","_id":"cka5ik8gk00hbnybg6fnnu0f8"},{"name":"AirPods Pro","_id":"cka5ik8gk00hcnybgxb79dy1d"},{"name":"Windows","_id":"cka5ik8gp00hinybglv63i77h"},{"name":"Linux","_id":"cka5ik8gp00hjnybg4zuowze0"},{"name":"树莓派","_id":"cka5ik8gq00hknybgtszzpcsz"},{"name":"docker","_id":"ckajc2g1s00028ybgd5wv4uyn"},{"name":"ffmpeg","_id":"ckauran310001jjbg39d3tv1q"},{"name":"mp4","_id":"ckauran3q0003jjbg6gj52rmk"},{"name":"puppeteer","_id":"ckbndxhka0001q0sa4u9yy23k"},{"name":"Tiny Tiny","_id":"ckc8sl03j0001kvsaaehiz9q2"},{"name":"RSS","_id":"ckc8sl0420003kvsawgrf1nq6"}]}}